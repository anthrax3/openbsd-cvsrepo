head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "intel_batchbuffer.h"
#include "main/fbobject.h"

/* The clip VP defines the guardband region where expensive clipping is skipped
 * and fragments are allowed to be generated and clipped out cheaply by the SF.
 */
static void
gen6_upload_clip_vp(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   struct brw_clipper_viewport *vp;

   vp = brw_state_batch(brw, AUB_TRACE_CLIP_VP_STATE,
			sizeof(*vp), 32, &brw->clip.vp_offset);

   /* According to the "Vertex X,Y Clamping and Quantization" section of the
    * Strips and Fans documentation, objects must not have a screen-space
    * extents of over 8192 pixels, or they may be mis-rasterized.  The maximum
    * screen space coordinates of a small object may larger, but we have no
    * way to enforce the object size other than through clipping.
    *
    * If you're surprised that we set clip to -gbx to +gbx and it seems like
    * we'll end up with 16384 wide, note that for a 8192-wide render target,
    * we'll end up with a normal (-1, 1) clip volume that just covers the
    * drawable.
    */
   const float maximum_post_clamp_delta = 8192;
   float gbx = maximum_post_clamp_delta / ctx->ViewportArray[0].Width;
   float gby = maximum_post_clamp_delta / ctx->ViewportArray[0].Height;

   vp->xmin = -gbx;
   vp->xmax = gbx;
   vp->ymin = -gby;
   vp->ymax = gby;

   brw->state.dirty.cache |= CACHE_NEW_CLIP_VP;
}

const struct brw_tracked_state gen6_clip_vp = {
   .dirty = {
      .mesa = _NEW_VIEWPORT,
      .brw = BRW_NEW_BATCH,
      .cache = 0,
   },
   .emit = gen6_upload_clip_vp,
};

static void
gen6_upload_sf_vp(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const GLfloat depth_scale = 1.0F / ctx->DrawBuffer->_DepthMaxF;
   struct brw_sf_viewport *sfv;
   GLfloat y_scale, y_bias;
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
   const GLfloat *v = ctx->ViewportArray[0]._WindowMap.m;

   sfv = brw_state_batch(brw, AUB_TRACE_SF_VP_STATE,
			 sizeof(*sfv), 32, &brw->sf.vp_offset);
   memset(sfv, 0, sizeof(*sfv));

   /* _NEW_BUFFERS */
   if (render_to_fbo) {
      y_scale = 1.0;
      y_bias = 0;
   } else {
      y_scale = -1.0;
      y_bias = ctx->DrawBuffer->Height;
   }

   /* _NEW_VIEWPORT */
   sfv->viewport.m00 = v[MAT_SX];
   sfv->viewport.m11 = v[MAT_SY] * y_scale;
   sfv->viewport.m22 = v[MAT_SZ] * depth_scale;
   sfv->viewport.m30 = v[MAT_TX];
   sfv->viewport.m31 = v[MAT_TY] * y_scale + y_bias;
   sfv->viewport.m32 = v[MAT_TZ] * depth_scale;

   brw->state.dirty.cache |= CACHE_NEW_SF_VP;
}

const struct brw_tracked_state gen6_sf_vp = {
   .dirty = {
      .mesa = _NEW_VIEWPORT | _NEW_BUFFERS,
      .brw = BRW_NEW_BATCH,
      .cache = 0,
   },
   .emit = gen6_upload_sf_vp,
};

static void upload_viewport_state_pointers(struct brw_context *brw)
{
   BEGIN_BATCH(4);
   OUT_BATCH(_3DSTATE_VIEWPORT_STATE_POINTERS << 16 | (4 - 2) |
	     GEN6_CC_VIEWPORT_MODIFY |
	     GEN6_SF_VIEWPORT_MODIFY |
	     GEN6_CLIP_VIEWPORT_MODIFY);
   OUT_BATCH(brw->clip.vp_offset);
   OUT_BATCH(brw->sf.vp_offset);
   OUT_BATCH(brw->cc.vp_offset);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen6_viewport_state = {
   .dirty = {
      .mesa = 0,
      .brw = (BRW_NEW_BATCH |
	      BRW_NEW_STATE_BASE_ADDRESS),
      .cache = (CACHE_NEW_CLIP_VP |
		CACHE_NEW_SF_VP |
		CACHE_NEW_CC_VP)
   },
   .emit = upload_viewport_state_pointers,
};
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d58 2
a59 2
   float gbx = maximum_post_clamp_delta / (float) ctx->Viewport.Width;
   float gby = maximum_post_clamp_delta / (float) ctx->Viewport.Height;
d86 1
a86 1
   const GLfloat *v = ctx->Viewport._WindowMap.m;
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d32 1
a35 5
 *
 * By setting it to NDC bounds of [-1,1], we don't do GB clipping.  It's
 * supposed to cause seams to become visible in apps due to shared edges taking
 * different clip/no clip paths depending on whether the rest of the prim ends
 * up in the guardband or not.
d38 1
a38 1
prepare_clip_vp(struct brw_context *brw)
d40 1
d43 2
a44 1
   vp = brw_state_batch(brw, sizeof(*vp), 32, &brw->clip.vp_offset);
d46 19
a64 4
   vp->xmin = -1.0;
   vp->xmax = 1.0;
   vp->ymin = -1.0;
   vp->ymax = 1.0;
d71 1
a71 1
      .mesa = 0,
d75 1
a75 1
   .prepare = prepare_clip_vp,
d79 1
a79 1
prepare_sf_vp(struct brw_context *brw)
d81 1
a81 1
   struct gl_context *ctx = &brw->intel.ctx;
d85 1
a85 1
   const GLboolean render_to_fbo = (ctx->DrawBuffer->Name != 0);
d88 2
a89 1
   sfv = brw_state_batch(brw, sizeof(*sfv), 32, &brw->sf.vp_offset);
d118 1
a118 1
   .prepare = prepare_sf_vp,
a122 2
   struct intel_context *intel = &brw->intel;

@


1.2
log
@Merge Mesa 7.10.3
@
text
@d44 1
a44 1
   struct brw_clipper_viewport vp;
d46 8
a53 8
   vp.xmin = -1.0;
   vp.xmax = 1.0;
   vp.ymin = -1.0;
   vp.ymax = 1.0;

   drm_intel_bo_unreference(brw->clip.vp_bo);
   brw->clip.vp_bo = brw_cache_data(&brw->cache, BRW_CLIP_VP,
				    &vp, sizeof(vp));
d58 2
a59 2
      .mesa = _NEW_VIEWPORT, /* XXX: not really, but we need nonzero */
      .brw = 0,
d70 1
a70 1
   struct brw_sf_viewport sfv;
d75 2
a76 1
   memset(&sfv, 0, sizeof(sfv));
d88 8
a95 10
   sfv.viewport.m00 = v[MAT_SX];
   sfv.viewport.m11 = v[MAT_SY] * y_scale;
   sfv.viewport.m22 = v[MAT_SZ] * depth_scale;
   sfv.viewport.m30 = v[MAT_TX];
   sfv.viewport.m31 = v[MAT_TY] * y_scale + y_bias;
   sfv.viewport.m32 = v[MAT_TZ] * depth_scale;

   drm_intel_bo_unreference(brw->sf.vp_bo);
   brw->sf.vp_bo = brw_cache_data(&brw->cache, BRW_SF_VP,
				  &sfv, sizeof(sfv));
d101 1
a101 1
      .brw = 0,
a106 7
static void prepare_viewport_state_pointers(struct brw_context *brw)
{
   brw_add_validated_bo(brw, brw->clip.vp_bo);
   brw_add_validated_bo(brw, brw->sf.vp_bo);
   brw_add_validated_bo(brw, brw->cc.vp_bo);
}

d116 3
a118 3
   OUT_RELOC(brw->clip.vp_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
   OUT_RELOC(brw->sf.vp_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
   OUT_RELOC(brw->cc.vp_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
d125 2
a126 1
      .brw = BRW_NEW_BATCH,
a130 1
   .prepare = prepare_viewport_state_pointers,
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a31 1
#include "main/macros.h"
d53 1
a53 2
				    &vp, sizeof(vp),
				    NULL, 0);
d68 1
a68 1
   GLcontext *ctx = &brw->intel.ctx;
d96 1
a96 2
				  &sfv, sizeof(sfv),
				  NULL, 0);
a107 30
static void
prepare_cc_vp(struct brw_context *brw)
{
   GLcontext *ctx = &brw->intel.ctx;
   struct brw_cc_viewport ccv;

   /* _NEW_TRANSOFORM */
   if (ctx->Transform.DepthClamp) {
      /* _NEW_VIEWPORT */
      ccv.min_depth = MIN2(ctx->Viewport.Near, ctx->Viewport.Far);
      ccv.max_depth = MAX2(ctx->Viewport.Near, ctx->Viewport.Far);
   } else {
      ccv.min_depth = 0.0;
      ccv.max_depth = 1.0;
   }

   drm_intel_bo_unreference(brw->cc.vp_bo);
   brw->cc.vp_bo = brw_cache_data(&brw->cache, BRW_CC_VP, &ccv, sizeof(ccv),
				  NULL, 0);
}

const struct brw_tracked_state gen6_cc_vp = {
   .dirty = {
      .mesa = _NEW_VIEWPORT | _NEW_TRANSFORM,
      .brw = 0,
      .cache = 0,
   },
   .prepare = prepare_cc_vp,
};

d110 3
a112 1
   brw_add_validated_bo(brw, brw->sf.state_bo);
d120 1
a120 1
   OUT_BATCH(CMD_VIEWPORT_STATE_POINTERS << 16 | (4 - 2) |
a127 2

   intel_batchbuffer_emit_mi_flush(intel->batch);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d32 1
d54 2
a55 1
				    &vp, sizeof(vp));
d70 1
a70 1
   struct gl_context *ctx = &brw->intel.ctx;
d98 2
a99 1
				  &sfv, sizeof(sfv));
d111 30
d143 1
a143 3
   brw_add_validated_bo(brw, brw->clip.vp_bo);
   brw_add_validated_bo(brw, brw->sf.vp_bo);
   brw_add_validated_bo(brw, brw->cc.vp_bo);
d151 1
a151 1
   OUT_BATCH(_3DSTATE_VIEWPORT_STATE_POINTERS << 16 | (4 - 2) |
d159 2
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a31 1
#include "main/fbobject.h"
d35 5
d42 1
a42 1
gen6_upload_clip_vp(struct brw_context *brw)
d44 1
a44 2
   struct gl_context *ctx = &brw->ctx;
   struct brw_clipper_viewport *vp;
d46 8
a53 24
   vp = brw_state_batch(brw, AUB_TRACE_CLIP_VP_STATE,
			sizeof(*vp), 32, &brw->clip.vp_offset);

   /* According to the "Vertex X,Y Clamping and Quantization" section of the
    * Strips and Fans documentation, objects must not have a screen-space
    * extents of over 8192 pixels, or they may be mis-rasterized.  The maximum
    * screen space coordinates of a small object may larger, but we have no
    * way to enforce the object size other than through clipping.
    *
    * If you're surprised that we set clip to -gbx to +gbx and it seems like
    * we'll end up with 16384 wide, note that for a 8192-wide render target,
    * we'll end up with a normal (-1, 1) clip volume that just covers the
    * drawable.
    */
   const float maximum_post_clamp_delta = 8192;
   float gbx = maximum_post_clamp_delta / (float) ctx->Viewport.Width;
   float gby = maximum_post_clamp_delta / (float) ctx->Viewport.Height;

   vp->xmin = -gbx;
   vp->xmax = gbx;
   vp->ymin = -gby;
   vp->ymax = gby;

   brw->state.dirty.cache |= CACHE_NEW_CLIP_VP;
d58 2
a59 2
      .mesa = _NEW_VIEWPORT,
      .brw = BRW_NEW_BATCH,
d62 1
a62 1
   .emit = gen6_upload_clip_vp,
d66 1
a66 1
gen6_upload_sf_vp(struct brw_context *brw)
d68 1
a68 1
   struct gl_context *ctx = &brw->ctx;
d70 1
a70 1
   struct brw_sf_viewport *sfv;
d72 1
a72 1
   const bool render_to_fbo = _mesa_is_user_fbo(ctx->DrawBuffer);
d75 1
a75 3
   sfv = brw_state_batch(brw, AUB_TRACE_SF_VP_STATE,
			 sizeof(*sfv), 32, &brw->sf.vp_offset);
   memset(sfv, 0, sizeof(*sfv));
d87 10
a96 8
   sfv->viewport.m00 = v[MAT_SX];
   sfv->viewport.m11 = v[MAT_SY] * y_scale;
   sfv->viewport.m22 = v[MAT_SZ] * depth_scale;
   sfv->viewport.m30 = v[MAT_TX];
   sfv->viewport.m31 = v[MAT_TY] * y_scale + y_bias;
   sfv->viewport.m32 = v[MAT_TZ] * depth_scale;

   brw->state.dirty.cache |= CACHE_NEW_SF_VP;
d102 1
a102 1
      .brw = BRW_NEW_BATCH,
d105 1
a105 1
   .emit = gen6_upload_sf_vp,
d108 7
d117 2
d124 3
a126 3
   OUT_BATCH(brw->clip.vp_offset);
   OUT_BATCH(brw->sf.vp_offset);
   OUT_BATCH(brw->cc.vp_offset);
d133 1
a133 2
      .brw = (BRW_NEW_BATCH |
	      BRW_NEW_STATE_BASE_ADDRESS),
d138 1
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d58 2
a59 2
   float gbx = maximum_post_clamp_delta / ctx->ViewportArray[0].Width;
   float gby = maximum_post_clamp_delta / ctx->ViewportArray[0].Height;
d86 1
a86 1
   const GLfloat *v = ctx->ViewportArray[0]._WindowMap.m;
@


