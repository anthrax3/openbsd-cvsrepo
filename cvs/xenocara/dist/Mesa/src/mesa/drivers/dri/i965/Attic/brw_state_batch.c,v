head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.14.04.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.15;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.37;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.44;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.48.49;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 Copyright (C) Intel Corp.  2006.  All Rights Reserved.
 Intel funded Tungsten Graphics to
 develop this 3D driver.

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice (including the
 next paragraph) shall be included in all copies or substantial
 portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 **********************************************************************/
 /*
  * Authors:
  *   Keith Whitwell <keithw@@vmware.com>
  */

#include "brw_state.h"
#include "intel_batchbuffer.h"
#include "main/imports.h"
#include "glsl/ralloc.h"

static void
brw_track_state_batch(struct brw_context *brw,
		      enum state_struct_type type,
		      uint32_t offset,
		      int size)
{
   struct intel_batchbuffer *batch = &brw->batch;

   if (!brw->state_batch_list) {
      /* Our structs are always aligned to at least 32 bytes, so
       * our array doesn't need to be any larger
       */
      brw->state_batch_list = ralloc_size(brw, sizeof(*brw->state_batch_list) *
					  batch->bo->size / 32);
   }

   brw->state_batch_list[brw->state_batch_count].offset = offset;
   brw->state_batch_list[brw->state_batch_count].size = size;
   brw->state_batch_list[brw->state_batch_count].type = type;
   brw->state_batch_count++;
}

/**
 * Convenience function to populate a single drm_intel_aub_annotation data
 * structure.
 */
static inline void
make_annotation(drm_intel_aub_annotation *annotation, uint32_t type,
                uint32_t subtype, uint32_t ending_offset)
{
   annotation->type = type;
   annotation->subtype = subtype;
   annotation->ending_offset = ending_offset;
}

/**
 * Generate a set of aub file annotations for the current batch buffer, and
 * deliver them to DRM.
 *
 * The "used" section of the batch buffer (the portion containing batch
 * commands) is annotated with AUB_TRACE_TYPE_BATCH.  The remainder of the
 * batch buffer (which contains data structures pointed to by batch commands)
 * is annotated according to the type of each data structure.
 */
void
brw_annotate_aub(struct brw_context *brw)
{
   unsigned annotation_count = 2 * brw->state_batch_count + 1;
   drm_intel_aub_annotation annotations[annotation_count];
   int a = 0;
   make_annotation(&annotations[a++], AUB_TRACE_TYPE_BATCH, 0,
                   4*brw->batch.used);
   for (int i = brw->state_batch_count; i-- > 0; ) {
      uint32_t type = brw->state_batch_list[i].type;
      uint32_t start_offset = brw->state_batch_list[i].offset;
      uint32_t end_offset = start_offset + brw->state_batch_list[i].size;
      make_annotation(&annotations[a++], AUB_TRACE_TYPE_NOTYPE, 0,
                      start_offset);
      make_annotation(&annotations[a++], AUB_TRACE_TYPE(type),
                      AUB_TRACE_SUBTYPE(type), end_offset);
   }
   assert(a == annotation_count);
   drm_intel_bufmgr_gem_set_aub_annotations(brw->batch.bo, annotations,
                                            annotation_count);
}

/**
 * Allocates a block of space in the batchbuffer for indirect state.
 *
 * We don't want to allocate separate BOs for every bit of indirect
 * state in the driver.  It means overallocating by a significant
 * margin (4096 bytes, even if the object is just a 20-byte surface
 * state), and more buffers to walk and count for aperture size checking.
 *
 * However, due to the restrictions inposed by the aperture size
 * checking performance hacks, we can't have the batch point at a
 * separate indirect state buffer, because once the batch points at
 * it, no more relocations can be added to it.  So, we sneak these
 * buffers in at the top of the batchbuffer.
 */
void *
brw_state_batch(struct brw_context *brw,
		enum state_struct_type type,
		int size,
		int alignment,
		uint32_t *out_offset)
{
   struct intel_batchbuffer *batch = &brw->batch;
   uint32_t offset;

   assert(size < batch->bo->size);
   offset = ROUND_DOWN_TO(batch->state_batch_offset - size, alignment);

   /* If allocating from the top would wrap below the batchbuffer, or
    * if the batch's used space (plus the reserved pad) collides with our
    * space, then flush and try again.
    */
   if (batch->state_batch_offset < size ||
       offset < 4*batch->used + batch->reserved_space) {
      intel_batchbuffer_flush(brw);
      offset = ROUND_DOWN_TO(batch->state_batch_offset - size, alignment);
   }

   batch->state_batch_offset = offset;

   if (unlikely(INTEL_DEBUG & (DEBUG_BATCH | DEBUG_AUB)))
      brw_track_state_batch(brw, type, offset, size);

   *out_offset = offset;
   return batch->map + (offset>>2);
}
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d35 1
a35 1
#include "util/ralloc.h"
d39 1
a39 1
		      enum aub_state_struct_type type,
d119 1
a119 1
		enum aub_state_struct_type type,
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d35 1
a35 1
#include "glsl/ralloc.h"
d39 1
a39 1
		      enum state_struct_type type,
d119 1
a119 1
		enum state_struct_type type,
@


1.8
log
@Merge Mesa 9.2.0
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics (http://www.tungstengraphics.com) to
d5 1
a5 1
 
d13 1
a13 1
 
d17 1
a17 1
 
d25 1
a25 1
 
d29 1
a29 1
  *   Keith Whitwell <keith@@tungstengraphics.com>
d31 1
a31 1
     
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 67
d119 1
d124 1
a124 1
   struct intel_batchbuffer *batch = &brw->intel.batch;
d136 1
a136 1
      intel_batchbuffer_flush(&brw->intel);
d141 3
@


1.6
log
@Merge Mesa 7.10.3
@
text
@a31 2


a35 63


/* A facility similar to the data caching code above, which aims to
 * prevent identical commands being issued repeatedly.
 */
GLboolean brw_cached_batch_struct( struct brw_context *brw,
				   const void *data,
				   GLuint sz )
{
   struct brw_cached_batch_item *item = brw->cached_batch_items;
   struct header *newheader = (struct header *)data;

   if (brw->emit_state_always) {
      intel_batchbuffer_data(brw->intel.batch, data, sz, false);
      return GL_TRUE;
   }

   while (item) {
      if (item->header->opcode == newheader->opcode) {
	 if (item->sz == sz && memcmp(item->header, newheader, sz) == 0)
	    return GL_FALSE;
	 if (item->sz != sz) {
	    free(item->header);
	    item->header = malloc(sz);
	    item->sz = sz;
	 }
	 goto emit;
      }
      item = item->next;
   }

   assert(!item);
   item = CALLOC_STRUCT(brw_cached_batch_item);
   item->header = malloc(sz);
   item->sz = sz;
   item->next = brw->cached_batch_items;
   brw->cached_batch_items = item;

 emit:
   memcpy(item->header, newheader, sz);
   intel_batchbuffer_data(brw->intel.batch, data, sz, false);
   return GL_TRUE;
}

void brw_clear_batch_cache( struct brw_context *brw )
{
   struct brw_cached_batch_item *item = brw->cached_batch_items;

   while (item) {
      struct brw_cached_batch_item *next = item->next;
      free((void *)item->header);
      free(item);
      item = next;
   }

   brw->cached_batch_items = NULL;
}

void brw_destroy_batch_cache( struct brw_context *brw )
{
   brw_clear_batch_cache(brw);
}

a53 1
		drm_intel_bo **out_bo,
d56 1
a56 1
   struct intel_batchbuffer *batch = brw->intel.batch;
d59 1
a59 1
   assert(size < batch->buf->size);
d67 2
a68 2
       offset < batch->ptr - batch->map + batch->reserved_space) {
      intel_batchbuffer_flush(batch);
a73 6
   if (*out_bo != batch->buf) {
      drm_intel_bo_unreference(*out_bo);
      drm_intel_bo_reference(batch->buf);
      *out_bo = batch->buf;
   }

d75 1
a75 1
   return batch->map + offset;
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d51 1
a51 1
      intel_batchbuffer_data(brw->intel.batch, data, sz);
d78 1
a78 1
   intel_batchbuffer_data(brw->intel.batch, data, sz);
d99 49
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d51 1
a51 1
      intel_batchbuffer_data(brw->intel.batch, data, sz, IGNORE_CLIPRECTS);
d60 2
a61 2
	    _mesa_free(item->header);
	    item->header = _mesa_malloc(sz);
d71 1
a71 1
   item->header = _mesa_malloc(sz);
d78 1
a78 1
   intel_batchbuffer_data(brw->intel.batch, data, sz, IGNORE_CLIPRECTS);
d82 1
a82 1
static void clear_batch_cache( struct brw_context *brw )
a95 13
void brw_clear_batch_cache_flush( struct brw_context *brw )
{
   clear_batch_cache(brw);

/*    brw_do_flush(brw, BRW_FLUSH_STATE_CACHE|BRW_FLUSH_READ_CACHE); */
   
   brw->state.dirty.mesa |= ~0;
   brw->state.dirty.brw |= ~0;
   brw->state.dirty.cache |= ~0;
}



d98 1
a98 1
   clear_batch_cache(brw);
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d36 1
a36 1
#include "imports.h"
a99 2
   brw->wrap = 0;
   
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@a34 1
#include "brw_aub.h"
d51 1
a51 1
      intel_batchbuffer_data(brw->intel.batch, data, sz, 0);
d78 1
a78 1
   intel_batchbuffer_data(brw->intel.batch, data, sz, 0);
a93 7


   brw_clear_all_caches(brw);

   bmReleaseBuffers(&brw->intel);
   
   brw_invalidate_pools(brw);
a97 1
   bmFinishFenceLock(&(brw->intel), bmSetFenceLock(&(brw->intel)));
@


1.1
log
@Initial revision
@
text
@d106 1
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d35 1
d37 1
a37 1
#include "main/imports.h"
d52 1
a52 1
      intel_batchbuffer_data(brw->intel.batch, data, sz, false);
d61 2
a62 2
	    free(item->header);
	    item->header = malloc(sz);
d72 1
a72 1
   item->header = malloc(sz);
d79 1
a79 1
   intel_batchbuffer_data(brw->intel.batch, data, sz, false);
d83 1
a83 1
void brw_clear_batch_cache( struct brw_context *brw )
a94 1
}
d96 6
a101 3
void brw_destroy_batch_cache( struct brw_context *brw )
{
   brw_clear_batch_cache(brw);
d104 1
a104 20
/**
 * Allocates a block of space in the batchbuffer for indirect state.
 *
 * We don't want to allocate separate BOs for every bit of indirect
 * state in the driver.  It means overallocating by a significant
 * margin (4096 bytes, even if the object is just a 20-byte surface
 * state), and more buffers to walk and count for aperture size checking.
 *
 * However, due to the restrictions inposed by the aperture size
 * checking performance hacks, we can't have the batch point at a
 * separate indirect state buffer, because once the batch points at
 * it, no more relocations can be added to it.  So, we sneak these
 * buffers in at the top of the batchbuffer.
 */
void *
brw_state_batch(struct brw_context *brw,
		int size,
		int alignment,
		drm_intel_bo **out_bo,
		uint32_t *out_offset)
d106 1
a106 2
   struct intel_batchbuffer *batch = brw->intel.batch;
   uint32_t offset;
d108 8
a115 2
   assert(size < batch->buf->size);
   offset = ROUND_DOWN_TO(batch->state_batch_offset - size, alignment);
a116 9
   /* If allocating from the top would wrap below the batchbuffer, or
    * if the batch's used space (plus the reserved pad) collides with our
    * space, then flush and try again.
    */
   if (batch->state_batch_offset < size ||
       offset < batch->ptr - batch->map + batch->reserved_space) {
      intel_batchbuffer_flush(batch);
      offset = ROUND_DOWN_TO(batch->state_batch_offset - size, alignment);
   }
a117 1
   batch->state_batch_offset = offset;
d119 3
a121 8
   if (*out_bo != batch->buf) {
      drm_intel_bo_unreference(*out_bo);
      drm_intel_bo_reference(batch->buf);
      *out_bo = batch->buf;
   }

   *out_offset = offset;
   return batch->map + offset;
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d32 2
a36 1
#include "glsl/ralloc.h"
d38 8
a45 5
static void
brw_track_state_batch(struct brw_context *brw,
		      enum state_struct_type type,
		      uint32_t offset,
		      int size)
d47 2
a48 1
   struct intel_batchbuffer *batch = &brw->batch;
d50 3
a52 6
   if (!brw->state_batch_list) {
      /* Our structs are always aligned to at least 32 bytes, so
       * our array doesn't need to be any larger
       */
      brw->state_batch_list = ralloc_size(brw, sizeof(*brw->state_batch_list) *
					  batch->bo->size / 32);
d55 25
a79 4
   brw->state_batch_list[brw->state_batch_count].offset = offset;
   brw->state_batch_list[brw->state_batch_count].size = size;
   brw->state_batch_list[brw->state_batch_count].type = type;
   brw->state_batch_count++;
d82 1
a82 7
/**
 * Convenience function to populate a single drm_intel_aub_annotation data
 * structure.
 */
static inline void
make_annotation(drm_intel_aub_annotation *annotation, uint32_t type,
                uint32_t subtype, uint32_t ending_offset)
d84 10
a93 3
   annotation->type = type;
   annotation->subtype = subtype;
   annotation->ending_offset = ending_offset;
d96 1
a96 11
/**
 * Generate a set of aub file annotations for the current batch buffer, and
 * deliver them to DRM.
 *
 * The "used" section of the batch buffer (the portion containing batch
 * commands) is annotated with AUB_TRACE_TYPE_BATCH.  The remainder of the
 * batch buffer (which contains data structures pointed to by batch commands)
 * is annotated according to the type of each data structure.
 */
void
brw_annotate_aub(struct brw_context *brw)
d98 1
a98 17
   unsigned annotation_count = 2 * brw->state_batch_count + 1;
   drm_intel_aub_annotation annotations[annotation_count];
   int a = 0;
   make_annotation(&annotations[a++], AUB_TRACE_TYPE_BATCH, 0,
                   4*brw->batch.used);
   for (int i = brw->state_batch_count; i-- > 0; ) {
      uint32_t type = brw->state_batch_list[i].type;
      uint32_t start_offset = brw->state_batch_list[i].offset;
      uint32_t end_offset = start_offset + brw->state_batch_list[i].size;
      make_annotation(&annotations[a++], AUB_TRACE_TYPE_NOTYPE, 0,
                      start_offset);
      make_annotation(&annotations[a++], AUB_TRACE_TYPE(type),
                      AUB_TRACE_SUBTYPE(type), end_offset);
   }
   assert(a == annotation_count);
   drm_intel_bufmgr_gem_set_aub_annotations(brw->batch.bo, annotations,
                                            annotation_count);
a116 1
		enum state_struct_type type,
d119 1
d122 1
a122 1
   struct intel_batchbuffer *batch = &brw->batch;
d125 1
a125 1
   assert(size < batch->bo->size);
d133 2
a134 2
       offset < 4*batch->used + batch->reserved_space) {
      intel_batchbuffer_flush(brw);
d140 5
a144 2
   if (unlikely(INTEL_DEBUG & (DEBUG_BATCH | DEBUG_AUB)))
      brw_track_state_batch(brw, type, offset, size);
d147 1
a147 1
   return batch->map + (offset>>2);
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d3 1
a3 1
 Intel funded Tungsten Graphics to
d5 1
a5 1

d13 1
a13 1

d17 1
a17 1

d25 1
a25 1

d29 1
a29 1
  *   Keith Whitwell <keithw@@vmware.com>
d31 1
a31 1

@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d35 1
a35 1
#include "util/ralloc.h"
d39 1
a39 1
		      enum aub_state_struct_type type,
d119 1
a119 1
		enum aub_state_struct_type type,
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d35 1
a35 1
#include "glsl/ralloc.h"
d39 1
a39 1
		      enum state_struct_type type,
d119 1
a119 1
		enum state_struct_type type,
@


