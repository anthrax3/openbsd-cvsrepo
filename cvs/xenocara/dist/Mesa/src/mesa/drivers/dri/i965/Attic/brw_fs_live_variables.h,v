head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.15.34;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.34;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.50;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.38;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.44;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_fs.h"
#include "main/bitset.h"

namespace brw {

struct block_data {
   /**
    * Which variables are defined before being used in the block.
    *
    * Note that for our purposes, "defined" means unconditionally, completely
    * defined.
    */
   BITSET_WORD *def;

   /**
    * Which variables are used before being defined in the block.
    */
   BITSET_WORD *use;

   /** Which defs reach the entry point of the block. */
   BITSET_WORD *livein;

   /** Which defs reach the exit point of the block. */
   BITSET_WORD *liveout;
};

class fs_live_variables {
public:
   static void* operator new(size_t size, void *ctx)
   {
      void *node;

      node = rzalloc_size(ctx, size);
      assert(node != NULL);

      return node;
   }

   fs_live_variables(fs_visitor *v, cfg_t *cfg);
   ~fs_live_variables();

   void setup_def_use();
   void compute_live_variables();

   fs_visitor *v;
   cfg_t *cfg;
   void *mem_ctx;

   int num_vars;
   int bitset_words;

   /** Per-basic-block information on live variables */
   struct block_data *bd;
};

} /* namespace brw */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@a30 2
class cfg_t;

d56 9
a64 1
   DECLARE_RALLOC_CXX_OPERATORS(fs_live_variables)
a69 2
   void setup_one_read(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
   void setup_one_write(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
a70 4
   void compute_start_end();

   bool vars_interfere(int a, int b);
   int var_from_reg(fs_reg *reg);
a75 11
   /** Map from virtual GRF number to index in block_data arrays. */
   int *var_from_vgrf;

   /**
    * Map from any index in block_data to the virtual GRF containing it.
    *
    * For virtual_grf_sizes of [1, 2, 3], vgrf_from_var would contain
    * [0, 1, 1, 2, 2, 2].
    */
   int *vgrf_from_var;

a76 1
   int num_vgrfs;
a77 8

   /** @@{
    * Final computed live ranges for each var (each component of each virtual
    * GRF).
    */
   int *start;
   int *end;
   /** @@} */
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d31 1
a31 1
struct cfg_t;
d60 1
a60 1
   fs_live_variables(fs_visitor *v, const cfg_t *cfg);
d63 6
d72 4
a100 12

protected:
   void setup_def_use();
   void setup_one_read(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
   void setup_one_write(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
   void compute_live_variables();
   void compute_start_end();

   fs_visitor *v;
   const cfg_t *cfg;
   void *mem_ctx;

@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d31 1
a31 1
class cfg_t;
d60 1
a60 1
   fs_live_variables(fs_visitor *v, cfg_t *cfg);
a62 6
   void setup_def_use();
   void setup_one_read(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
   void setup_one_write(bblock_t *block, fs_inst *inst, int ip, fs_reg reg);
   void compute_live_variables();
   void compute_start_end();

a65 4
   fs_visitor *v;
   cfg_t *cfg;
   void *mem_ctx;

d91 12
@


