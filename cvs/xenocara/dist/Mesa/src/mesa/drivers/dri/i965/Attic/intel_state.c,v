head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.8;
commitid	4ry2gvZGMXkCUD2n;

1.8
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.7;
commitid	mcxB0JvoI9gTDYXU;

1.7
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	WPD6rgPryPkvXOr9;

1.6
date	2013.09.05.14.04.28;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.06.19;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.16;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.52;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.18;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.15.49;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.34.53;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.11.57;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.49.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@/**************************************************************************
 *
 * Copyright 2003 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#include "main/glheader.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/enums.h"
#include "main/colormac.h"
#include "main/dd.h"

#include "intel_screen.h"
#include "brw_context.h"
#include "brw_defines.h"

int
intel_translate_shadow_compare_func(GLenum func)
{
   /* GL specifies the result of shadow comparisons as:
    *     1     if   ref <op> texel,
    *     0     otherwise.
    *
    * The hardware does:
    *     0     if texel <op> ref,
    *     1     otherwise.
    *
    * So, these look a bit strange because there's both a negation
    * and swapping of the arguments involved.
    */
   switch (func) {
   case GL_NEVER:
      return BRW_COMPAREFUNCTION_ALWAYS;
   case GL_LESS:
      return BRW_COMPAREFUNCTION_LEQUAL;
   case GL_LEQUAL:
      return BRW_COMPAREFUNCTION_LESS;
   case GL_GREATER:
      return BRW_COMPAREFUNCTION_GEQUAL;
   case GL_GEQUAL:
      return BRW_COMPAREFUNCTION_GREATER;
   case GL_NOTEQUAL:
      return BRW_COMPAREFUNCTION_EQUAL;
   case GL_EQUAL:
      return BRW_COMPAREFUNCTION_NOTEQUAL;
   case GL_ALWAYS:
      return BRW_COMPAREFUNCTION_NEVER;
   }

   assert(!"Invalid shadow comparison function.");
   return BRW_COMPAREFUNCTION_NEVER;
}

int
intel_translate_compare_func(GLenum func)
{
   switch (func) {
   case GL_NEVER:
      return BRW_COMPAREFUNCTION_NEVER;
   case GL_LESS:
      return BRW_COMPAREFUNCTION_LESS;
   case GL_LEQUAL:
      return BRW_COMPAREFUNCTION_LEQUAL;
   case GL_GREATER:
      return BRW_COMPAREFUNCTION_GREATER;
   case GL_GEQUAL:
      return BRW_COMPAREFUNCTION_GEQUAL;
   case GL_NOTEQUAL:
      return BRW_COMPAREFUNCTION_NOTEQUAL;
   case GL_EQUAL:
      return BRW_COMPAREFUNCTION_EQUAL;
   case GL_ALWAYS:
      return BRW_COMPAREFUNCTION_ALWAYS;
   }

   assert(!"Invalid comparison function.");
   return BRW_COMPAREFUNCTION_ALWAYS;
}

int
intel_translate_stencil_op(GLenum op)
{
   switch (op) {
   case GL_KEEP:
      return BRW_STENCILOP_KEEP;
   case GL_ZERO:
      return BRW_STENCILOP_ZERO;
   case GL_REPLACE:
      return BRW_STENCILOP_REPLACE;
   case GL_INCR:
      return BRW_STENCILOP_INCRSAT;
   case GL_DECR:
      return BRW_STENCILOP_DECRSAT;
   case GL_INCR_WRAP:
      return BRW_STENCILOP_INCR;
   case GL_DECR_WRAP:
      return BRW_STENCILOP_DECR;
   case GL_INVERT:
      return BRW_STENCILOP_INVERT;
   default:
      return BRW_STENCILOP_ZERO;
   }
}

int
intel_translate_logic_op(GLenum opcode)
{
   switch (opcode) {
   case GL_CLEAR:
      return BRW_LOGICOPFUNCTION_CLEAR;
   case GL_AND:
      return BRW_LOGICOPFUNCTION_AND;
   case GL_AND_REVERSE:
      return BRW_LOGICOPFUNCTION_AND_REVERSE;
   case GL_COPY:
      return BRW_LOGICOPFUNCTION_COPY;
   case GL_COPY_INVERTED:
      return BRW_LOGICOPFUNCTION_COPY_INVERTED;
   case GL_AND_INVERTED:
      return BRW_LOGICOPFUNCTION_AND_INVERTED;
   case GL_NOOP:
      return BRW_LOGICOPFUNCTION_NOOP;
   case GL_XOR:
      return BRW_LOGICOPFUNCTION_XOR;
   case GL_OR:
      return BRW_LOGICOPFUNCTION_OR;
   case GL_OR_INVERTED:
      return BRW_LOGICOPFUNCTION_OR_INVERTED;
   case GL_NOR:
      return BRW_LOGICOPFUNCTION_NOR;
   case GL_EQUIV:
      return BRW_LOGICOPFUNCTION_EQUIV;
   case GL_INVERT:
      return BRW_LOGICOPFUNCTION_INVERT;
   case GL_OR_REVERSE:
      return BRW_LOGICOPFUNCTION_OR_REVERSE;
   case GL_NAND:
      return BRW_LOGICOPFUNCTION_NAND;
   case GL_SET:
      return BRW_LOGICOPFUNCTION_SET;
   default:
      return BRW_LOGICOPFUNCTION_SET;
   }
}
@


1.9
log
@Merge Mesa 10.2.9
@
text
@@


1.8
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d73 2
a74 1
   unreachable("Invalid shadow comparison function.");
d99 2
a100 1
   unreachable("Invalid comparison function.");
@


1.7
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d73 1
a73 2
   assert(!"Invalid shadow comparison function.");
   return BRW_COMPAREFUNCTION_NEVER;
d98 1
a98 2
   assert(!"Invalid comparison function.");
   return BRW_COMPAREFUNCTION_ALWAYS;
@


1.6
log
@Merge Mesa 9.2.0
@
text
@d2 2
a3 2
 * 
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
d5 1
a5 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 * 
d43 11
d55 9
a63 9
   case GL_NEVER: 
       return BRW_COMPAREFUNCTION_ALWAYS;
   case GL_LESS: 
       return BRW_COMPAREFUNCTION_LEQUAL;
   case GL_LEQUAL: 
       return BRW_COMPAREFUNCTION_LESS;
   case GL_GREATER: 
       return BRW_COMPAREFUNCTION_GEQUAL;
   case GL_GEQUAL: 
d65 1
a65 1
   case GL_NOTEQUAL: 
d67 1
a67 1
   case GL_EQUAL: 
d69 2
a70 2
   case GL_ALWAYS: 
       return BRW_COMPAREFUNCTION_NEVER;
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d37 2
a38 3
#include "intel_context.h"
#include "intel_regions.h"
#include "swrast/swrast.h"
d41 1
a41 1
intel_translate_shadow_compare_func( GLenum func )
d43 1
a43 1
   switch(func) {
d45 1
a45 1
       return COMPAREFUNC_ALWAYS; 
d47 1
a47 1
       return COMPAREFUNC_LEQUAL; 
d49 1
a49 1
       return COMPAREFUNC_LESS;
d51 1
a51 1
       return COMPAREFUNC_GEQUAL; 
d53 1
a53 1
      return COMPAREFUNC_GREATER; 
d55 1
a55 1
      return COMPAREFUNC_EQUAL; 
d57 1
a57 1
      return COMPAREFUNC_NOTEQUAL; 
d59 1
a59 1
       return COMPAREFUNC_NEVER; 
d62 2
a63 2
   fprintf(stderr, "Unknown value in %s: %x\n", __FUNCTION__, func);
   return COMPAREFUNC_NEVER; 
d67 1
a67 1
intel_translate_compare_func( GLenum func )
d69 17
a85 17
   switch(func) {
   case GL_NEVER: 
      return COMPAREFUNC_NEVER; 
   case GL_LESS: 
      return COMPAREFUNC_LESS; 
   case GL_LEQUAL: 
      return COMPAREFUNC_LEQUAL; 
   case GL_GREATER: 
      return COMPAREFUNC_GREATER; 
   case GL_GEQUAL: 
      return COMPAREFUNC_GEQUAL; 
   case GL_NOTEQUAL: 
      return COMPAREFUNC_NOTEQUAL; 
   case GL_EQUAL: 
      return COMPAREFUNC_EQUAL; 
   case GL_ALWAYS: 
      return COMPAREFUNC_ALWAYS; 
d88 2
a89 2
   fprintf(stderr, "Unknown value in %s: %x\n", __FUNCTION__, func);
   return COMPAREFUNC_ALWAYS; 
d93 1
a93 1
intel_translate_stencil_op( GLenum op )
d95 11
a105 11
   switch(op) {
   case GL_KEEP: 
      return STENCILOP_KEEP; 
   case GL_ZERO: 
      return STENCILOP_ZERO; 
   case GL_REPLACE: 
      return STENCILOP_REPLACE; 
   case GL_INCR: 
      return STENCILOP_INCRSAT;
   case GL_DECR: 
      return STENCILOP_DECRSAT;
d107 1
a107 1
      return STENCILOP_INCR; 
d109 5
a113 42
      return STENCILOP_DECR; 
   case GL_INVERT: 
      return STENCILOP_INVERT; 
   default: 
      return STENCILOP_ZERO;
   }
}

int
intel_translate_blend_factor( GLenum factor )
{
   switch(factor) {
   case GL_ZERO: 
      return BLENDFACT_ZERO; 
   case GL_SRC_ALPHA: 
      return BLENDFACT_SRC_ALPHA; 
   case GL_ONE: 
      return BLENDFACT_ONE; 
   case GL_SRC_COLOR: 
      return BLENDFACT_SRC_COLR; 
   case GL_ONE_MINUS_SRC_COLOR: 
      return BLENDFACT_INV_SRC_COLR; 
   case GL_DST_COLOR: 
      return BLENDFACT_DST_COLR; 
   case GL_ONE_MINUS_DST_COLOR: 
      return BLENDFACT_INV_DST_COLR; 
   case GL_ONE_MINUS_SRC_ALPHA:
      return BLENDFACT_INV_SRC_ALPHA; 
   case GL_DST_ALPHA: 
      return BLENDFACT_DST_ALPHA; 
   case GL_ONE_MINUS_DST_ALPHA:
      return BLENDFACT_INV_DST_ALPHA; 
   case GL_SRC_ALPHA_SATURATE: 
      return BLENDFACT_SRC_ALPHA_SATURATE;
   case GL_CONSTANT_COLOR:
      return BLENDFACT_CONST_COLOR; 
   case GL_ONE_MINUS_CONSTANT_COLOR:
      return BLENDFACT_INV_CONST_COLOR;
   case GL_CONSTANT_ALPHA:
      return BLENDFACT_CONST_ALPHA; 
   case GL_ONE_MINUS_CONSTANT_ALPHA:
      return BLENDFACT_INV_CONST_ALPHA;
a114 3
   
   fprintf(stderr, "Unknown value in %s: %x\n", __FUNCTION__, factor);
   return BLENDFACT_ZERO;
d118 1
a118 1
intel_translate_logic_op( GLenum opcode )
d120 33
a152 33
   switch(opcode) {
   case GL_CLEAR: 
      return LOGICOP_CLEAR; 
   case GL_AND: 
      return LOGICOP_AND; 
   case GL_AND_REVERSE: 
      return LOGICOP_AND_RVRSE; 
   case GL_COPY: 
      return LOGICOP_COPY; 
   case GL_COPY_INVERTED: 
      return LOGICOP_COPY_INV; 
   case GL_AND_INVERTED: 
      return LOGICOP_AND_INV; 
   case GL_NOOP: 
      return LOGICOP_NOOP; 
   case GL_XOR: 
      return LOGICOP_XOR; 
   case GL_OR: 
      return LOGICOP_OR; 
   case GL_OR_INVERTED: 
      return LOGICOP_OR_INV; 
   case GL_NOR: 
      return LOGICOP_NOR; 
   case GL_EQUIV: 
      return LOGICOP_EQUIV; 
   case GL_INVERT: 
      return LOGICOP_INV; 
   case GL_OR_REVERSE: 
      return LOGICOP_OR_RVRSE; 
   case GL_NAND: 
      return LOGICOP_NAND; 
   case GL_SET: 
      return LOGICOP_SET; 
d154 1
a154 1
      return LOGICOP_SET;
a155 36
}


static void
intelClearColor(GLcontext *ctx, const GLfloat color[4])
{
   struct intel_context *intel = intel_context(ctx);
   GLubyte clear[4];

   CLAMPED_FLOAT_TO_UBYTE(clear[0], color[0]);
   CLAMPED_FLOAT_TO_UBYTE(clear[1], color[1]);
   CLAMPED_FLOAT_TO_UBYTE(clear[2], color[2]);
   CLAMPED_FLOAT_TO_UBYTE(clear[3], color[3]);

   /* compute both 32 and 16-bit clear values */
   intel->ClearColor8888 = INTEL_PACKCOLOR8888(clear[0], clear[1],
                                               clear[2], clear[3]);
   intel->ClearColor565 = INTEL_PACKCOLOR565(clear[0], clear[1], clear[2]);
}


/* Fallback to swrast for select and feedback.
 */
static void
intelRenderMode( GLcontext *ctx, GLenum mode )
{
   struct intel_context *intel = intel_context(ctx);
   FALLBACK( intel, INTEL_FALLBACK_RENDERMODE, (mode != GL_RENDER) );
}


void
intelInitStateFuncs( struct dd_function_table *functions )
{
   functions->RenderMode = intelRenderMode;
   functions->ClearColor = intelClearColor;
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d29 6
a34 6
#include "glheader.h"
#include "context.h"
#include "macros.h"
#include "enums.h"
#include "colormac.h"
#include "dd.h"
d41 2
a42 1
int intel_translate_shadow_compare_func( GLenum func )
d67 2
a68 1
int intel_translate_compare_func( GLenum func )
d93 2
a94 1
int intel_translate_stencil_op( GLenum op )
d118 2
a119 1
int intel_translate_blend_factor( GLenum factor )
d158 2
a159 1
int intel_translate_logic_op( GLenum opcode )
d200 2
a201 1
static void intelClearColor(GLcontext *ctx, const GLfloat color[4])
d204 1
d206 9
a214 9
   UNCLAMPED_FLOAT_TO_RGBA_CHAN(intel->clear_chan, color);

   intel->ClearColor8888 = INTEL_PACKCOLOR8888(intel->clear_chan[0],
					       intel->clear_chan[1],
					       intel->clear_chan[2],
					       intel->clear_chan[3]);
   intel->ClearColor565 = INTEL_PACKCOLOR565(intel->clear_chan[0],
					     intel->clear_chan[1],
					     intel->clear_chan[2]);
a217 1

d220 2
a221 1
static void intelRenderMode( GLcontext *ctx, GLenum mode )
d228 2
a229 1
void intelInitStateFuncs( struct dd_function_table *functions )
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@a197 1
   intelScreenPrivate *screen = intel->intelScreen;
d201 7
a207 5
   intel->ClearColor = INTEL_PACKCOLOR(screen->fbFormat,
				       intel->clear_chan[0], 
				       intel->clear_chan[1], 
				       intel->clear_chan[2], 
				       intel->clear_chan[3]);
a224 96
}




void intelInitState( GLcontext *ctx )
{
   /* Mesa should do this for us:
    */
   ctx->Driver.AlphaFunc( ctx, 
			  ctx->Color.AlphaFunc,
			  ctx->Color.AlphaRef);

   ctx->Driver.BlendColor( ctx,
			   ctx->Color.BlendColor );

   ctx->Driver.BlendEquationSeparate( ctx, 
				      ctx->Color.BlendEquationRGB,
				      ctx->Color.BlendEquationA);

   ctx->Driver.BlendFuncSeparate( ctx,
				  ctx->Color.BlendSrcRGB,
				  ctx->Color.BlendDstRGB,
				  ctx->Color.BlendSrcA,
				  ctx->Color.BlendDstA);

   ctx->Driver.ColorMask( ctx, 
			  ctx->Color.ColorMask[RCOMP],
			  ctx->Color.ColorMask[GCOMP],
			  ctx->Color.ColorMask[BCOMP],
			  ctx->Color.ColorMask[ACOMP]);

   ctx->Driver.CullFace( ctx, ctx->Polygon.CullFaceMode );
   ctx->Driver.DepthFunc( ctx, ctx->Depth.Func );
   ctx->Driver.DepthMask( ctx, ctx->Depth.Mask );

   ctx->Driver.Enable( ctx, GL_ALPHA_TEST, ctx->Color.AlphaEnabled );
   ctx->Driver.Enable( ctx, GL_BLEND, ctx->Color.BlendEnabled );
   ctx->Driver.Enable( ctx, GL_COLOR_LOGIC_OP, ctx->Color.ColorLogicOpEnabled );
   ctx->Driver.Enable( ctx, GL_COLOR_SUM, ctx->Fog.ColorSumEnabled );
   ctx->Driver.Enable( ctx, GL_CULL_FACE, ctx->Polygon.CullFlag );
   ctx->Driver.Enable( ctx, GL_DEPTH_TEST, ctx->Depth.Test );
   ctx->Driver.Enable( ctx, GL_DITHER, ctx->Color.DitherFlag );
   ctx->Driver.Enable( ctx, GL_FOG, ctx->Fog.Enabled );
   ctx->Driver.Enable( ctx, GL_LIGHTING, ctx->Light.Enabled );
   ctx->Driver.Enable( ctx, GL_LINE_SMOOTH, ctx->Line.SmoothFlag );
   ctx->Driver.Enable( ctx, GL_POLYGON_STIPPLE, ctx->Polygon.StippleFlag );
   ctx->Driver.Enable( ctx, GL_SCISSOR_TEST, ctx->Scissor.Enabled );
   ctx->Driver.Enable( ctx, GL_STENCIL_TEST, ctx->Stencil.Enabled );
   ctx->Driver.Enable( ctx, GL_TEXTURE_1D, GL_FALSE );
   ctx->Driver.Enable( ctx, GL_TEXTURE_2D, GL_FALSE );
   ctx->Driver.Enable( ctx, GL_TEXTURE_RECTANGLE_NV, GL_FALSE );
   ctx->Driver.Enable( ctx, GL_TEXTURE_3D, GL_FALSE );
   ctx->Driver.Enable( ctx, GL_TEXTURE_CUBE_MAP, GL_FALSE );

   ctx->Driver.Fogfv( ctx, GL_FOG_COLOR, ctx->Fog.Color );
   ctx->Driver.Fogfv( ctx, GL_FOG_MODE, 0 );
   ctx->Driver.Fogfv( ctx, GL_FOG_DENSITY, &ctx->Fog.Density );
   ctx->Driver.Fogfv( ctx, GL_FOG_START, &ctx->Fog.Start );
   ctx->Driver.Fogfv( ctx, GL_FOG_END, &ctx->Fog.End );

   ctx->Driver.FrontFace( ctx, ctx->Polygon.FrontFace );

   {
      GLfloat f = (GLfloat)ctx->Light.Model.ColorControl;
      ctx->Driver.LightModelfv( ctx, GL_LIGHT_MODEL_COLOR_CONTROL, &f );
   }

   ctx->Driver.LineWidth( ctx, ctx->Line.Width );
   ctx->Driver.LogicOpcode( ctx, ctx->Color.LogicOp );
   ctx->Driver.PointSize( ctx, ctx->Point.Size );
   ctx->Driver.PolygonStipple( ctx, (const GLubyte *)ctx->PolygonStipple );
   ctx->Driver.Scissor( ctx, ctx->Scissor.X, ctx->Scissor.Y,
			ctx->Scissor.Width, ctx->Scissor.Height );
   ctx->Driver.ShadeModel( ctx, ctx->Light.ShadeModel );
   ctx->Driver.StencilFuncSeparate( ctx, GL_FRONT,
                                    ctx->Stencil.Function[0],
                                    ctx->Stencil.Ref[0],
                                    ctx->Stencil.ValueMask[0] );
   ctx->Driver.StencilFuncSeparate( ctx, GL_BACK,
                                    ctx->Stencil.Function[1],
                                    ctx->Stencil.Ref[1],
                                    ctx->Stencil.ValueMask[1] );
   ctx->Driver.StencilMaskSeparate( ctx, GL_FRONT, ctx->Stencil.WriteMask[0] );
   ctx->Driver.StencilMaskSeparate( ctx, GL_BACK, ctx->Stencil.WriteMask[1] );
   ctx->Driver.StencilOpSeparate( ctx, GL_FRONT,
                                  ctx->Stencil.FailFunc[0],
                                  ctx->Stencil.ZFailFunc[0],
                                  ctx->Stencil.ZPassFunc[0]);
   ctx->Driver.StencilOpSeparate( ctx, GL_BACK,
                                  ctx->Stencil.FailFunc[1],
                                  ctx->Stencil.ZFailFunc[1],
                                  ctx->Stencil.ZPassFunc[1]);


   ctx->Driver.DrawBuffer( ctx, ctx->Color.DrawBuffer[0] );
@


1.1
log
@Initial revision
@
text
@d41 25
a209 33
static void intelCalcViewport( GLcontext *ctx )
{
   struct intel_context *intel = intel_context(ctx);
   const GLfloat *v = ctx->Viewport._WindowMap.m;
   GLfloat *m = intel->ViewportMatrix.m;
   GLint h = 0;

   if (intel->driDrawable) 
      h = intel->driDrawable->h + SUBPIXEL_Y;

   /* See also intel_translate_vertex.  SUBPIXEL adjustments can be done
    * via state vars, too.
    */
   m[MAT_SX] =   v[MAT_SX];
   m[MAT_TX] =   v[MAT_TX] + SUBPIXEL_X;
   m[MAT_SY] = - v[MAT_SY];
   m[MAT_TY] = - v[MAT_TY] + h;
   m[MAT_SZ] =   v[MAT_SZ] * intel->depth_scale;
   m[MAT_TZ] =   v[MAT_TZ] * intel->depth_scale;
}

static void intelViewport( GLcontext *ctx,
			  GLint x, GLint y,
			  GLsizei width, GLsizei height )
{
   intelCalcViewport( ctx );
}

static void intelDepthRange( GLcontext *ctx,
			    GLclampd nearval, GLclampd farval )
{
   intelCalcViewport( ctx );
}
a222 2
   functions->Viewport = intelViewport;
   functions->DepthRange = intelDepthRange;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d185 33
d231 2
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d29 6
a34 6
#include "main/glheader.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/enums.h"
#include "main/colormac.h"
#include "main/dd.h"
d37 3
a39 2
#include "brw_context.h"
#include "brw_defines.h"
d41 1
a41 2
int
intel_translate_shadow_compare_func(GLenum func)
d43 1
a43 1
   switch (func) {
d45 1
a45 1
       return BRW_COMPAREFUNCTION_ALWAYS;
d47 1
a47 1
       return BRW_COMPAREFUNCTION_LEQUAL;
d49 1
a49 1
       return BRW_COMPAREFUNCTION_LESS;
d51 1
a51 1
       return BRW_COMPAREFUNCTION_GEQUAL;
d53 1
a53 1
      return BRW_COMPAREFUNCTION_GREATER;
d55 1
a55 1
      return BRW_COMPAREFUNCTION_EQUAL;
d57 1
a57 1
      return BRW_COMPAREFUNCTION_NOTEQUAL;
d59 1
a59 1
       return BRW_COMPAREFUNCTION_NEVER;
d62 2
a63 2
   assert(!"Invalid shadow comparison function.");
   return BRW_COMPAREFUNCTION_NEVER;
d66 1
a66 2
int
intel_translate_compare_func(GLenum func)
d68 19
a86 17
   switch (func) {
   case GL_NEVER:
      return BRW_COMPAREFUNCTION_NEVER;
   case GL_LESS:
      return BRW_COMPAREFUNCTION_LESS;
   case GL_LEQUAL:
      return BRW_COMPAREFUNCTION_LEQUAL;
   case GL_GREATER:
      return BRW_COMPAREFUNCTION_GREATER;
   case GL_GEQUAL:
      return BRW_COMPAREFUNCTION_GEQUAL;
   case GL_NOTEQUAL:
      return BRW_COMPAREFUNCTION_NOTEQUAL;
   case GL_EQUAL:
      return BRW_COMPAREFUNCTION_EQUAL;
   case GL_ALWAYS:
      return BRW_COMPAREFUNCTION_ALWAYS;
d88 1
d90 37
a126 2
   assert(!"Invalid comparison function.");
   return BRW_COMPAREFUNCTION_ALWAYS;
d129 1
a129 2
int
intel_translate_stencil_op(GLenum op)
d131 33
a163 17
   switch (op) {
   case GL_KEEP:
      return BRW_STENCILOP_KEEP;
   case GL_ZERO:
      return BRW_STENCILOP_ZERO;
   case GL_REPLACE:
      return BRW_STENCILOP_REPLACE;
   case GL_INCR:
      return BRW_STENCILOP_INCRSAT;
   case GL_DECR:
      return BRW_STENCILOP_DECRSAT;
   case GL_INCR_WRAP:
      return BRW_STENCILOP_INCR;
   case GL_DECR_WRAP:
      return BRW_STENCILOP_DECR;
   case GL_INVERT:
      return BRW_STENCILOP_INVERT;
d165 1
a165 1
      return BRW_STENCILOP_ZERO;
d169 36
a204 2
int
intel_translate_logic_op(GLenum opcode)
d206 59
a264 35
   switch (opcode) {
   case GL_CLEAR:
      return BRW_LOGICOPFUNCTION_CLEAR;
   case GL_AND:
      return BRW_LOGICOPFUNCTION_AND;
   case GL_AND_REVERSE:
      return BRW_LOGICOPFUNCTION_AND_REVERSE;
   case GL_COPY:
      return BRW_LOGICOPFUNCTION_COPY;
   case GL_COPY_INVERTED:
      return BRW_LOGICOPFUNCTION_COPY_INVERTED;
   case GL_AND_INVERTED:
      return BRW_LOGICOPFUNCTION_AND_INVERTED;
   case GL_NOOP:
      return BRW_LOGICOPFUNCTION_NOOP;
   case GL_XOR:
      return BRW_LOGICOPFUNCTION_XOR;
   case GL_OR:
      return BRW_LOGICOPFUNCTION_OR;
   case GL_OR_INVERTED:
      return BRW_LOGICOPFUNCTION_OR_INVERTED;
   case GL_NOR:
      return BRW_LOGICOPFUNCTION_NOR;
   case GL_EQUIV:
      return BRW_LOGICOPFUNCTION_EQUIV;
   case GL_INVERT:
      return BRW_LOGICOPFUNCTION_INVERT;
   case GL_OR_REVERSE:
      return BRW_LOGICOPFUNCTION_OR_REVERSE;
   case GL_NAND:
      return BRW_LOGICOPFUNCTION_NAND;
   case GL_SET:
      return BRW_LOGICOPFUNCTION_SET;
   default:
      return BRW_LOGICOPFUNCTION_SET;
d266 29
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d2 2
a3 2
 *
 * Copyright 2003 VMware, Inc.
d5 1
a5 1
 *
d13 1
a13 1
 *
d17 1
a17 1
 *
d21 1
a21 1
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
d25 1
a25 1
 *
a42 11
   /* GL specifies the result of shadow comparisons as:
    *     1     if   ref <op> texel,
    *     0     otherwise.
    *
    * The hardware does:
    *     0     if texel <op> ref,
    *     1     otherwise.
    *
    * So, these look a bit strange because there's both a negation
    * and swapping of the arguments involved.
    */
d44 9
a52 9
   case GL_NEVER:
      return BRW_COMPAREFUNCTION_ALWAYS;
   case GL_LESS:
      return BRW_COMPAREFUNCTION_LEQUAL;
   case GL_LEQUAL:
      return BRW_COMPAREFUNCTION_LESS;
   case GL_GREATER:
      return BRW_COMPAREFUNCTION_GEQUAL;
   case GL_GEQUAL:
d54 1
a54 1
   case GL_NOTEQUAL:
d56 1
a56 1
   case GL_EQUAL:
d58 2
a59 2
   case GL_ALWAYS:
      return BRW_COMPAREFUNCTION_NEVER;
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@d73 2
a74 1
   unreachable("Invalid shadow comparison function.");
d99 2
a100 1
   unreachable("Invalid comparison function.");
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d73 1
a73 2
   assert(!"Invalid shadow comparison function.");
   return BRW_COMPAREFUNCTION_NEVER;
d98 1
a98 2
   assert(!"Invalid comparison function.");
   return BRW_COMPAREFUNCTION_ALWAYS;
@


