head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.29;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.37;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_fs.h"
#include "brw_cfg.h"

/** @@file brw_cfg_t.cpp
 *
 * Walks the shader instructions generated and creates a set of basic
 * blocks with successor/predecessor edges connecting them.
 */

static bblock_t *
pop_stack(exec_list *list)
{
   bblock_link *link = (bblock_link *)list->get_tail();
   bblock_t *block = link->block;
   link->remove();

   return block;
}

bblock_t::bblock_t()
{
   start = NULL;
   end = NULL;

   parents.make_empty();
   children.make_empty();
}

void
bblock_t::add_successor(void *mem_ctx, bblock_t *successor)
{
   successor->parents.push_tail(this->make_list(mem_ctx));
   children.push_tail(successor->make_list(mem_ctx));
}

bblock_link *
bblock_t::make_list(void *mem_ctx)
{
   return new(mem_ctx) bblock_link(this);
}

cfg_t::cfg_t(backend_visitor *v)
{
   create(v->mem_ctx, &v->instructions);
}

cfg_t::cfg_t(void *mem_ctx, exec_list *instructions)
{
   create(mem_ctx, instructions);
}

void
cfg_t::create(void *parent_mem_ctx, exec_list *instructions)
{
   mem_ctx = ralloc_context(parent_mem_ctx);
   block_list.make_empty();
   num_blocks = 0;
   ip = 0;
   cur = NULL;

   bblock_t *entry = new_block();
   bblock_t *cur_if = NULL, *cur_else = NULL, *cur_endif = NULL;
   bblock_t *cur_do = NULL, *cur_while = NULL;
   exec_list if_stack, else_stack, endif_stack, do_stack, while_stack;
   bblock_t *next;

   set_next_block(entry);

   entry->start = (backend_instruction *) instructions->get_head();

   foreach_list(node, instructions) {
      backend_instruction *inst = (backend_instruction *)node;

      cur->end = inst;

      /* set_next_block wants the post-incremented ip */
      ip++;

      switch (inst->opcode) {
      case BRW_OPCODE_IF:
	 /* Push our information onto a stack so we can recover from
	  * nested ifs.
	  */
	 if_stack.push_tail(cur_if->make_list(mem_ctx));
	 else_stack.push_tail(cur_else->make_list(mem_ctx));
	 endif_stack.push_tail(cur_endif->make_list(mem_ctx));

	 cur_if = cur;
	 cur_else = NULL;
	 /* Set up the block just after the endif.  Don't know when exactly
	  * it will start, yet.
	  */
	 cur_endif = new_block();

	 /* Set up our immediately following block, full of "then"
	  * instructions.
	  */
	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 cur_if->add_successor(mem_ctx, next);

	 set_next_block(next);
	 break;

      case BRW_OPCODE_ELSE:
	 cur->add_successor(mem_ctx, cur_endif);

	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 cur_if->add_successor(mem_ctx, next);
	 cur_else = next;

	 set_next_block(next);
	 break;

      case BRW_OPCODE_ENDIF:
	 cur_endif->start = (backend_instruction *)inst->next;
	 cur->add_successor(mem_ctx, cur_endif);
	 set_next_block(cur_endif);

	 if (!cur_else)
	    cur_if->add_successor(mem_ctx, cur_endif);

	 /* Pop the stack so we're in the previous if/else/endif */
	 cur_if = pop_stack(&if_stack);
	 cur_else = pop_stack(&else_stack);
	 cur_endif = pop_stack(&endif_stack);
	 break;

      case BRW_OPCODE_DO:
	 /* Push our information onto a stack so we can recover from
	  * nested loops.
	  */
	 do_stack.push_tail(cur_do->make_list(mem_ctx));
	 while_stack.push_tail(cur_while->make_list(mem_ctx));

	 /* Set up the block just after the while.  Don't know when exactly
	  * it will start, yet.
	  */
	 cur_while = new_block();

	 /* Set up our immediately following block, full of "then"
	  * instructions.
	  */
	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 cur->add_successor(mem_ctx, next);
	 cur_do = next;

	 set_next_block(next);
	 break;

      case BRW_OPCODE_CONTINUE:
	 cur->add_successor(mem_ctx, cur_do);

	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 if (inst->predicate)
	    cur->add_successor(mem_ctx, next);

	 set_next_block(next);
	 break;

      case BRW_OPCODE_BREAK:
	 cur->add_successor(mem_ctx, cur_while);

	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 if (inst->predicate)
	    cur->add_successor(mem_ctx, next);

	 set_next_block(next);
	 break;

      case BRW_OPCODE_WHILE:
	 cur_while->start = (backend_instruction *)inst->next;

	 cur->add_successor(mem_ctx, cur_do);
	 set_next_block(cur_while);

	 /* Pop the stack so we're in the previous loop */
	 cur_do = pop_stack(&do_stack);
	 cur_while = pop_stack(&while_stack);
	 break;

      default:
	 break;
      }
   }

   cur->end_ip = ip;

   make_block_array();
}

cfg_t::~cfg_t()
{
   ralloc_free(mem_ctx);
}

bblock_t *
cfg_t::new_block()
{
   bblock_t *block = new(mem_ctx) bblock_t();

   return block;
}

void
cfg_t::set_next_block(bblock_t *block)
{
   if (cur) {
      assert(cur->end->next == block->start);
      cur->end_ip = ip - 1;
   }

   block->start_ip = ip;
   block->block_num = num_blocks++;
   block_list.push_tail(block->make_list(mem_ctx));
   cur = block;
}

void
cfg_t::make_block_array()
{
   blocks = ralloc_array(mem_ctx, bblock_t *, num_blocks);

   int i = 0;
   foreach_list(block_node, &block_list) {
      bblock_link *link = (bblock_link *)block_node;
      blocks[i++] = link->block;
   }
   assert(i == num_blocks);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 1
d31 1
a31 1
/** @@file brw_cfg.cpp
d47 1
a47 2
bblock_t::bblock_t() :
   start_ip(0), end_ip(0), block_num(0)
a53 4

   if_inst = NULL;
   else_inst = NULL;
   endif_inst = NULL;
d59 13
a71 2
   successor->parents.push_tail(new(mem_ctx) bblock_link(this));
   children.push_tail(new(mem_ctx) bblock_link(successor));
d74 1
a74 2
void
bblock_t::dump(backend_visitor *v)
d76 1
a76 8
   int ip = this->start_ip;
   for (backend_instruction *inst = (backend_instruction *)this->start;
	inst != this->end->next;
	inst = (backend_instruction *) inst->next) {
      fprintf(stderr, "%5d: ", ip);
      v->dump_instruction(inst);
      ip++;
   }
d79 2
a80 1
cfg_t::cfg_t(exec_list *instructions)
d82 1
a82 1
   mem_ctx = ralloc_context(NULL);
a83 1
   blocks = NULL;
d85 2
a86 3

   bblock_t *cur = NULL;
   int ip = 0;
d89 3
a91 6
   bblock_t *cur_if = NULL;    /**< BB ending with IF. */
   bblock_t *cur_else = NULL;  /**< BB ending with ELSE. */
   bblock_t *cur_endif = NULL; /**< BB starting with ENDIF. */
   bblock_t *cur_do = NULL;    /**< BB ending with DO. */
   bblock_t *cur_while = NULL; /**< BB immediately following WHILE. */
   exec_list if_stack, else_stack, do_stack, while_stack;
d94 1
a94 1
   set_next_block(&cur, entry, ip);
d111 3
a113 2
	 if_stack.push_tail(new(mem_ctx) bblock_link(cur_if));
	 else_stack.push_tail(new(mem_ctx) bblock_link(cur_else));
d117 4
a120 1
         cur_endif = NULL;
d129 1
a129 1
	 set_next_block(&cur, next, ip);
d133 1
a133 1
         cur_else = cur;
d138 1
d140 1
a140 1
	 set_next_block(&cur, next, ip);
d143 7
a149 40
      case BRW_OPCODE_ENDIF: {
         if (cur->start == inst) {
            /* New block was just created; use it. */
            cur_endif = cur;
         } else {
            cur_endif = new_block();
            cur_endif->start = inst;

            cur->end = (backend_instruction *)inst->prev;
            cur->add_successor(mem_ctx, cur_endif);

            set_next_block(&cur, cur_endif, ip - 1);
         }

         backend_instruction *else_inst = NULL;
         if (cur_else) {
            else_inst = (backend_instruction *)cur_else->end;

            cur_else->add_successor(mem_ctx, cur_endif);
         } else {
            cur_if->add_successor(mem_ctx, cur_endif);
         }

         assert(cur_if->end->opcode == BRW_OPCODE_IF);
         assert(!else_inst || else_inst->opcode == BRW_OPCODE_ELSE);
         assert(inst->opcode == BRW_OPCODE_ENDIF);

         cur_if->if_inst = cur_if->end;
         cur_if->else_inst = else_inst;
         cur_if->endif_inst = inst;

	 if (cur_else) {
            cur_else->if_inst = cur_if->end;
            cur_else->else_inst = else_inst;
            cur_else->endif_inst = inst;
         }

         cur->if_inst = cur_if->end;
         cur->else_inst = else_inst;
         cur->endif_inst = inst;
d154 1
d156 1
a156 1
      }
d161 2
a162 2
	 do_stack.push_tail(new(mem_ctx) bblock_link(cur_do));
	 while_stack.push_tail(new(mem_ctx) bblock_link(cur_while));
d177 1
a177 1
	 set_next_block(&cur, next, ip);
d188 1
a188 1
	 set_next_block(&cur, next, ip);
d199 1
a199 1
	 set_next_block(&cur, next, ip);
d206 1
a206 1
	 set_next_block(&cur, cur_while, ip);
d237 1
a237 1
cfg_t::set_next_block(bblock_t **cur, bblock_t *block, int ip)
d239 3
a241 3
   if (*cur) {
      assert((*cur)->end->next == block->start);
      (*cur)->end_ip = ip - 1;
d246 2
a247 2
   block_list.push_tail(new(mem_ctx) bblock_link(block));
   *cur = block;
a260 23
}

void
cfg_t::dump(backend_visitor *v)
{
   for (int b = 0; b < this->num_blocks; b++) {
        bblock_t *block = this->blocks[b];
      fprintf(stderr, "START B%d", b);
      foreach_list(node, &block->parents) {
         bblock_link *link = (bblock_link *)node;
         fprintf(stderr, " <-B%d",
                 link->block->block_num);
      }
      fprintf(stderr, "\n");
      block->dump(v);
      fprintf(stderr, "END B%d", b);
      foreach_list(node, &block->children) {
         bblock_link *link = (bblock_link *)node;
         fprintf(stderr, " ->B%d",
                 link->block->block_num);
      }
      fprintf(stderr, "\n");
   }
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d41 1
a41 1
   link->link.remove();
d46 2
a47 2
static exec_node *
link(void *mem_ctx, bblock_t *block)
d49 2
a50 3
   bblock_link *l = new(mem_ctx) bblock_link(block);
   return &l->link;
}
a51 4
bblock_t::bblock_t(cfg_t *cfg) :
   cfg(cfg), start_ip(0), end_ip(0), num(0)
{
   instructions.make_empty();
d54 4
d63 2
a64 60
   successor->parents.push_tail(::link(mem_ctx, this));
   children.push_tail(::link(mem_ctx, successor));
}

bool
bblock_t::is_predecessor_of(const bblock_t *block) const
{
   foreach_list_typed_safe (bblock_link, parent, link, &block->parents) {
      if (parent->block == this) {
         return true;
      }
   }

   return false;
}

bool
bblock_t::is_successor_of(const bblock_t *block) const
{
   foreach_list_typed_safe (bblock_link, child, link, &block->children) {
      if (child->block == this) {
         return true;
      }
   }

   return false;
}

static bool
ends_block(const backend_instruction *inst)
{
   enum opcode op = inst->opcode;

   return op == BRW_OPCODE_IF ||
          op == BRW_OPCODE_ELSE ||
          op == BRW_OPCODE_CONTINUE ||
          op == BRW_OPCODE_BREAK ||
          op == BRW_OPCODE_WHILE;
}

static bool
starts_block(const backend_instruction *inst)
{
   enum opcode op = inst->opcode;

   return op == BRW_OPCODE_DO ||
          op == BRW_OPCODE_ENDIF;
}

bool
bblock_t::can_combine_with(const bblock_t *that) const
{
   if ((const bblock_t *)this->link.next != that)
      return false;

   if (ends_block(this->end()) ||
       starts_block(that->start()))
      return false;

   return true;
d68 1
a68 18
bblock_t::combine_with(bblock_t *that)
{
   assert(this->can_combine_with(that));
   foreach_list_typed (bblock_link, link, link, &this->children) {
      assert(link->block == that);
   }
   foreach_list_typed (bblock_link, link, link, &that->parents) {
      assert(link->block == this);
   }

   this->end_ip = that->end_ip;
   this->instructions.append_list(&that->instructions);

   this->cfg->remove_block(that);
}

void
bblock_t::dump(backend_visitor *v) const
d71 3
a73 1
   foreach_inst_in_block(backend_instruction, inst, this) {
d94 1
a94 1
   bblock_t *cur_do = NULL;    /**< BB starting with DO. */
d101 7
a107 1
   foreach_in_list_safe(backend_instruction, inst, instructions) {
a112 3
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);

d116 2
a117 2
	 if_stack.push_tail(link(mem_ctx, cur_if));
	 else_stack.push_tail(link(mem_ctx, cur_else));
d127 1
a133 3
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);

d137 1
d144 1
a144 1
         if (cur->instructions.is_empty()) {
d149 1
d151 1
d157 3
a159 2
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);
a160 1
         if (cur_else) {
d166 17
a182 2
         assert(cur_if->end()->opcode == BRW_OPCODE_IF);
         assert(!cur_else || cur_else->end()->opcode == BRW_OPCODE_ELSE);
d193 2
a194 2
	 do_stack.push_tail(link(mem_ctx, cur_do));
	 while_stack.push_tail(link(mem_ctx, cur_while));
d201 7
a207 5
         if (cur->instructions.is_empty()) {
            /* New block was just created; use it. */
            cur_do = cur;
         } else {
            cur_do = new_block();
d209 1
a209 7
            cur->add_successor(mem_ctx, cur_do);

            set_next_block(&cur, cur_do, ip - 1);
         }

         inst->exec_node::remove();
         cur->instructions.push_tail(inst);
a212 3
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);

d216 1
a223 3
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);

d227 1
d235 1
a235 2
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);
a245 2
         inst->exec_node::remove();
         cur->instructions.push_tail(inst);
a259 52
void
cfg_t::remove_block(bblock_t *block)
{
   foreach_list_typed_safe (bblock_link, predecessor, link, &block->parents) {
      /* Remove block from all of its predecessors' successor lists. */
      foreach_list_typed_safe (bblock_link, successor, link,
                               &predecessor->block->children) {
         if (block == successor->block) {
            successor->link.remove();
            ralloc_free(successor);
         }
      }

      /* Add removed-block's successors to its predecessors' successor lists. */
      foreach_list_typed (bblock_link, successor, link, &block->children) {
         if (!successor->block->is_successor_of(predecessor->block)) {
            predecessor->block->children.push_tail(link(mem_ctx,
                                                        successor->block));
         }
      }
   }

   foreach_list_typed_safe (bblock_link, successor, link, &block->children) {
      /* Remove block from all of its childrens' parents lists. */
      foreach_list_typed_safe (bblock_link, predecessor, link,
                               &successor->block->parents) {
         if (block == predecessor->block) {
            predecessor->link.remove();
            ralloc_free(predecessor);
         }
      }

      /* Add removed-block's predecessors to its successors' predecessor lists. */
      foreach_list_typed (bblock_link, predecessor, link, &block->parents) {
         if (!predecessor->block->is_predecessor_of(successor->block)) {
            successor->block->parents.push_tail(link(mem_ctx,
                                                     predecessor->block));
         }
      }
   }

   block->link.remove();

   for (int b = block->num; b < this->num_blocks - 1; b++) {
      this->blocks[b] = this->blocks[b + 1];
      this->blocks[b]->num = b;
   }

   this->blocks[this->num_blocks - 1]->num = this->num_blocks - 2;
   this->num_blocks--;
}

d263 1
a263 1
   bblock_t *block = new(mem_ctx) bblock_t(this);
d272 1
d277 2
a278 2
   block->num = num_blocks++;
   block_list.push_tail(&block->link);
d288 3
a290 2
   foreach_block (block, this) {
      blocks[i++] = block;
d296 1
a296 1
cfg_t::dump(backend_visitor *v) const
d298 5
a302 3
   foreach_block (block, this) {
      fprintf(stderr, "START B%d", block->num);
      foreach_list_typed(bblock_link, link, link, &block->parents) {
d304 1
a304 1
                 link->block->num);
d308 3
a310 2
      fprintf(stderr, "END B%d", block->num);
      foreach_list_typed(bblock_link, link, link, &block->children) {
d312 1
a312 1
                 link->block->num);
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d41 1
a41 1
   link->remove();
d46 2
a47 2
bblock_t::bblock_t() :
   start_ip(0), end_ip(0), block_num(0)
d49 3
a51 2
   start = NULL;
   end = NULL;
d53 4
d59 29
d89 35
a123 3
   if_inst = NULL;
   else_inst = NULL;
   endif_inst = NULL;
d127 1
a127 1
bblock_t::add_successor(void *mem_ctx, bblock_t *successor)
d129 12
a140 2
   successor->parents.push_tail(new(mem_ctx) bblock_link(this));
   children.push_tail(new(mem_ctx) bblock_link(successor));
d144 1
a144 1
bblock_t::dump(backend_visitor *v)
d147 1
a147 3
   for (backend_instruction *inst = (backend_instruction *)this->start;
	inst != this->end->next;
	inst = (backend_instruction *) inst->next) {
d168 1
a168 1
   bblock_t *cur_do = NULL;    /**< BB ending with DO. */
d175 1
a175 7
   entry->start = (backend_instruction *) instructions->get_head();

   foreach_list(node, instructions) {
      backend_instruction *inst = (backend_instruction *)node;

      cur->end = inst;

d181 3
d187 2
a188 2
	 if_stack.push_tail(new(mem_ctx) bblock_link(cur_if));
	 else_stack.push_tail(new(mem_ctx) bblock_link(cur_else));
a197 1
	 next->start = (backend_instruction *)inst->next;
d204 3
a209 1
	 next->start = (backend_instruction *)inst->next;
d216 1
a216 1
         if (cur->start == inst) {
a220 1
            cur_endif->start = inst;
a221 1
            cur->end = (backend_instruction *)inst->prev;
d227 3
a229 1
         backend_instruction *else_inst = NULL;
a230 2
            else_inst = (backend_instruction *)cur_else->end;

d236 2
a237 17
         assert(cur_if->end->opcode == BRW_OPCODE_IF);
         assert(!else_inst || else_inst->opcode == BRW_OPCODE_ELSE);
         assert(inst->opcode == BRW_OPCODE_ENDIF);

         cur_if->if_inst = cur_if->end;
         cur_if->else_inst = else_inst;
         cur_if->endif_inst = inst;

	 if (cur_else) {
            cur_else->if_inst = cur_if->end;
            cur_else->else_inst = else_inst;
            cur_else->endif_inst = inst;
         }

         cur->if_inst = cur_if->end;
         cur->else_inst = else_inst;
         cur->endif_inst = inst;
d248 2
a249 2
	 do_stack.push_tail(new(mem_ctx) bblock_link(cur_do));
	 while_stack.push_tail(new(mem_ctx) bblock_link(cur_while));
d256 10
a265 7
	 /* Set up our immediately following block, full of "then"
	  * instructions.
	  */
	 next = new_block();
	 next->start = (backend_instruction *)inst->next;
	 cur->add_successor(mem_ctx, next);
	 cur_do = next;
d267 2
a268 1
	 set_next_block(&cur, next, ip);
d272 3
a277 1
	 next->start = (backend_instruction *)inst->next;
d285 3
a290 1
	 next->start = (backend_instruction *)inst->next;
d298 2
a299 1
	 cur_while->start = (backend_instruction *)inst->next;
d310 2
d326 52
d381 1
a381 1
   bblock_t *block = new(mem_ctx) bblock_t();
a389 1
      assert((*cur)->end->next == block->start);
d394 2
a395 2
   block->block_num = num_blocks++;
   block_list.push_tail(new(mem_ctx) bblock_link(block));
d405 2
a406 3
   foreach_list(block_node, &block_list) {
      bblock_link *link = (bblock_link *)block_node;
      blocks[i++] = link->block;
d412 1
a412 1
cfg_t::dump(backend_visitor *v)
d414 3
a416 5
   for (int b = 0; b < this->num_blocks; b++) {
        bblock_t *block = this->blocks[b];
      fprintf(stderr, "START B%d", b);
      foreach_list(node, &block->parents) {
         bblock_link *link = (bblock_link *)node;
d418 1
a418 1
                 link->block->block_num);
d422 2
a423 3
      fprintf(stderr, "END B%d", b);
      foreach_list(node, &block->children) {
         bblock_link *link = (bblock_link *)node;
d425 1
a425 1
                 link->block->block_num);
@


