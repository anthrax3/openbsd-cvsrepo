head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.14.04.24;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.15;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.39;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.56;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_context.h"
#include "brw_state.h"
#include "brw_defines.h"
#include "brw_util.h"
#include "brw_wm.h"
#include "program/program.h"
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
#include "intel_batchbuffer.h"

static void
gen6_upload_wm_push_constants(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   /* BRW_NEW_FRAGMENT_PROGRAM */
   const struct brw_fragment_program *fp =
      brw_fragment_program_const(brw->fragment_program);
   /* CACHE_NEW_WM_PROG */
   const struct brw_wm_prog_data *prog_data = brw->wm.prog_data;

   /* Updates the ParameterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

   if (prog_data->base.nr_params == 0) {
      brw->wm.base.push_const_size = 0;
   } else {
      float *constants;
      unsigned int i;

      constants = brw_state_batch(brw, AUB_TRACE_WM_CONSTANTS,
				  prog_data->base.nr_params * sizeof(float),
				  32, &brw->wm.base.push_const_offset);

      for (i = 0; i < prog_data->base.nr_params; i++) {
	 constants[i] = *prog_data->base.param[i];
      }

      if (0) {
	 fprintf(stderr, "WM constants:\n");
	 for (i = 0; i < prog_data->base.nr_params; i++) {
	    if ((i & 7) == 0)
	       fprintf(stderr, "g%d: ", prog_data->first_curbe_grf + i / 8);
	    fprintf(stderr, "%8f ", constants[i]);
	    if ((i & 7) == 7)
	       fprintf(stderr, "\n");
	 }
	 if ((i & 7) != 0)
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
      }

      brw->wm.base.push_const_size = ALIGN(prog_data->base.nr_params, 8) / 8;
   }

   if (brw->gen >= 7) {
      gen7_upload_constant_state(brw, &brw->wm.base, true,
                                 _3DSTATE_CONSTANT_PS);
   }
}

const struct brw_tracked_state gen6_wm_push_constants = {
   .dirty = {
      .mesa  = _NEW_PROGRAM_CONSTANTS,
      .brw   = (BRW_NEW_BATCH |
                BRW_NEW_FRAGMENT_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = CACHE_NEW_WM_PROG,
   },
   .emit = gen6_upload_wm_push_constants,
};

static void
upload_wm_state(struct brw_context *brw)
{
   struct gl_context *ctx = &brw->ctx;
   const struct brw_fragment_program *fp =
      brw_fragment_program_const(brw->fragment_program);
   uint32_t dw2, dw4, dw5, dw6;

   /* _NEW_BUFFERS */
   bool multisampled_fbo = ctx->DrawBuffer->Visual.samples > 1;

    /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->base.nr_params == 0) {
      /* Disable the push constant buffers. */
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 | (5 - 2));
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   } else {
      BEGIN_BATCH(5);
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 |
		GEN6_CONSTANT_BUFFER_0_ENABLE |
		(5 - 2));
      /* Pointer to the WM constant buffer.  Covered by the set of
       * state flags from gen6_upload_wm_push_constants.
       */
      OUT_BATCH(brw->wm.base.push_const_offset +
		brw->wm.base.push_const_size - 1);
      OUT_BATCH(0);
      OUT_BATCH(0);
      OUT_BATCH(0);
      ADVANCE_BATCH();
   }

   dw2 = dw4 = dw5 = dw6 = 0;
   dw4 |= GEN6_WM_STATISTICS_ENABLE;
   dw5 |= GEN6_WM_LINE_AA_WIDTH_1_0;
   dw5 |= GEN6_WM_LINE_END_CAP_AA_WIDTH_0_5;

   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
    */
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
      dw2 |= GEN6_WM_FLOATING_POINT_MODE_ALT;

   dw2 |= (ALIGN(brw->wm.base.sampler_count, 4) / 4) <<
           GEN6_WM_SAMPLER_COUNT_SHIFT;

   /* CACHE_NEW_WM_PROG */
   dw2 |= ((brw->wm.prog_data->base.binding_table.size_bytes / 4) <<
           GEN6_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT);

   dw5 |= (brw->max_wm_threads - 1) << GEN6_WM_MAX_THREADS_SHIFT;

   /* CACHE_NEW_WM_PROG */

   /* In case of non 1x per sample shading, only one of SIMD8 and SIMD16
    * should be enabled. We do 'SIMD16 only' dispatch if a SIMD16 shader
    * is successfully compiled. In majority of the cases that bring us
    * better performance than 'SIMD8 only' dispatch.
    */
   int min_inv_per_frag =
      _mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false);
   assert(min_inv_per_frag >= 1);

   if (brw->wm.prog_data->prog_offset_16) {
      dw5 |= GEN6_WM_16_DISPATCH_ENABLE;

      if (min_inv_per_frag == 1) {
         dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
         dw4 |= (brw->wm.prog_data->first_curbe_grf <<
                 GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN6_WM_DISPATCH_START_GRF_SHIFT_2);
      } else
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
   }
   else {
      dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
      dw4 |= (brw->wm.prog_data->first_curbe_grf <<
              GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
   }

   /* CACHE_NEW_WM_PROG | _NEW_COLOR */
   if (brw->wm.prog_data->dual_src_blend &&
       (ctx->Color.BlendEnabled & 1) &&
       ctx->Color.Blend[0]._UsesDualSrc) {
      dw5 |= GEN6_WM_DUAL_SOURCE_BLEND_ENABLE;
   }

   /* _NEW_LINE */
   if (ctx->Line.StippleFlag)
      dw5 |= GEN6_WM_LINE_STIPPLE_ENABLE;

   /* _NEW_POLYGON */
   if (ctx->Polygon.StippleFlag)
      dw5 |= GEN6_WM_POLYGON_STIPPLE_ENABLE;

   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (fp->program.Base.InputsRead & VARYING_BIT_POS)
      dw5 |= GEN6_WM_USES_SOURCE_DEPTH | GEN6_WM_USES_SOURCE_W;
   if (fp->program.Base.OutputsWritten & BITFIELD64_BIT(FRAG_RESULT_DEPTH))
      dw5 |= GEN6_WM_COMPUTED_DEPTH;
   /* CACHE_NEW_WM_PROG */
   dw6 |= brw->wm.prog_data->barycentric_interp_modes <<
      GEN6_WM_BARYCENTRIC_INTERPOLATION_MODE_SHIFT;

   /* _NEW_COLOR, _NEW_MULTISAMPLE */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled ||
       ctx->Multisample.SampleAlphaToCoverage ||
       brw->wm.prog_data->uses_omask)
      dw5 |= GEN6_WM_KILL_ENABLE;

   /* _NEW_BUFFERS | _NEW_COLOR */
   if (brw_color_buffer_write_enabled(brw) ||
       dw5 & (GEN6_WM_KILL_ENABLE | GEN6_WM_COMPUTED_DEPTH)) {
      dw5 |= GEN6_WM_DISPATCH_ENABLE;
   }

   /* From the SNB PRM, volume 2 part 1, page 278:
    * "This bit is inserted in the PS payload header and made available to
    * the DataPort (either via the message header or via header bypass) to
    * indicate that oMask data (one or two phases) is included in Render
    * Target Write messages. If present, the oMask data is used to mask off
    * samples."
    */
    if(brw->wm.prog_data->uses_omask)
      dw5 |= GEN6_WM_OMASK_TO_RENDER_TARGET;

   /* CACHE_NEW_WM_PROG */
   dw6 |= brw->wm.prog_data->num_varying_inputs <<
      GEN6_WM_NUM_SF_OUTPUTS_SHIFT;
   if (multisampled_fbo) {
      /* _NEW_MULTISAMPLE */
      if (ctx->Multisample.Enabled)
         dw6 |= GEN6_WM_MSRAST_ON_PATTERN;
      else
         dw6 |= GEN6_WM_MSRAST_OFF_PIXEL;

      if (min_inv_per_frag > 1)
         dw6 |= GEN6_WM_MSDISPMODE_PERSAMPLE;
      else {
         dw6 |= GEN6_WM_MSDISPMODE_PERPIXEL;

         /* From the Sandy Bridge PRM, Vol 2 part 1, 7.7.1 ("Pixel Grouping
          * (Dispatch Size) Control"), p.334:
          *
          *     Note: in the table below, the Valid column indicates which
          *     products that combination is supported on. Combinations of
          *     dispatch enables not listed in the table are not available on
          *     any product.
          *
          *     A: Valid on all products
          *
          *     B: Not valid on [DevSNB] if 4x PERPIXEL mode with pixel shader
          *     computed depth.
          *
          *     D: Valid on all products, except when in non-1x PERSAMPLE mode
          *     (applies to [DevSNB+] only). Not valid on [DevSNB] if 4x
          *     PERPIXEL mode with pixel shader computed depth.
          *
          *     E: Not valid on [DevSNB] if 4x PERPIXEL mode with pixel shader
          *     computed depth.
          *
          *     F: Valid on all products, except not valid on [DevSNB] if 4x
          *     PERPIXEL mode with pixel shader computed depth.
          *
          * In the table that follows, the only entry with "A" in the Valid
          * column is the entry where only 8 pixel dispatch is enabled.
          * Therefore, when we are in PERPIXEL mode with pixel shader computed
          * depth, we need to disable SIMD16 dispatch.
          */
         if (dw5 & GEN6_WM_COMPUTED_DEPTH)
            dw5 &= ~GEN6_WM_16_DISPATCH_ENABLE;
      }
   } else {
      dw6 |= GEN6_WM_MSRAST_OFF_PIXEL;
      dw6 |= GEN6_WM_MSDISPMODE_PERSAMPLE;
   }

   /* From the SNB PRM, volume 2 part 1, page 281:
    * "If the PS kernel does not need the Position XY Offsets
    * to compute a Position XY value, then this field should be
    * programmed to POSOFFSET_NONE."
    *
    * "SW Recommendation: If the PS kernel needs the Position Offsets
    * to compute a Position XY value, this field should match Position
    * ZW Interpolation Mode to ensure a consistent position.xyzw
    * computation."
    * We only require XY sample offsets. So, this recommendation doesn't
    * look useful at the moment. We might need this in future.
    */
   if (brw->wm.prog_data->uses_pos_offset)
      dw6 |= GEN6_WM_POSOFFSET_SAMPLE;
   else
      dw6 |= GEN6_WM_POSOFFSET_NONE;

   BEGIN_BATCH(9);
   OUT_BATCH(_3DSTATE_WM << 16 | (9 - 2));
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
   OUT_BATCH(dw2);
   if (brw->wm.prog_data->total_scratch) {
      OUT_RELOC(brw->wm.base.scratch_bo,
                I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->wm.prog_data->total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }
   OUT_BATCH(dw4);
   OUT_BATCH(dw5);
   OUT_BATCH(dw6);
   OUT_BATCH(0); /* kernel 1 pointer */
   /* kernel 2 pointer */
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   ADVANCE_BATCH();
}

const struct brw_tracked_state gen6_wm_state = {
   .dirty = {
      .mesa  = (_NEW_LINE |
		_NEW_COLOR |
		_NEW_BUFFERS |
		_NEW_PROGRAM_CONSTANTS |
		_NEW_POLYGON |
                _NEW_MULTISAMPLE),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
		BRW_NEW_BATCH |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = (CACHE_NEW_WM_PROG)
   },
   .emit = upload_wm_state,
};
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d41 1
a41 1
   struct brw_stage_state *stage_state = &brw->wm.base;
d48 36
a83 2
   gen6_upload_push_constants(brw, &fp->program.Base, &prog_data->base,
                              stage_state, AUB_TRACE_WM_CONSTANTS);
d108 1
a108 1
   uint32_t dw2, dw4, dw5, dw6, ksp0, ksp2;
d113 1
a113 8
   /* CACHE_NEW_WM_PROG
    *
    * We can't fold this into gen6_upload_wm_push_constants(), because
    * according to the SNB PRM, vol 2 part 1 section 7.2.2
    * (3DSTATE_CONSTANT_PS [DevSNB]):
    *
    *     "[DevSNB]: This packet must be followed by WM_STATE."
    */
d139 1
a139 1
   dw2 = dw4 = dw5 = dw6 = ksp2 = 0;
d172 1
a172 1
   if (brw->wm.prog_data->prog_offset_16 || brw->wm.prog_data->no_8) {
d175 1
a175 1
      if (!brw->wm.prog_data->no_8 && min_inv_per_frag == 1) {
d177 1
a177 1
         dw4 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
d179 1
a179 1
         dw4 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
d181 2
a182 4
         ksp0 = brw->wm.base.prog_offset;
         ksp2 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      } else {
         dw4 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
a183 2
         ksp0 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      }
d187 1
a187 1
      dw4 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
a188 1
      ksp0 = brw->wm.base.prog_offset;
d307 4
a310 1
   OUT_BATCH(ksp0);
d312 1
a312 1
   if (brw->wm.prog_data->base.total_scratch) {
d315 1
a315 1
		ffs(brw->wm.prog_data->base.total_scratch) - 11);
d323 2
a324 1
   OUT_BATCH(ksp2);
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d41 1
a41 1
   struct gl_context *ctx = &brw->ctx;
d48 2
a49 36
   /* Updates the ParameterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

   if (prog_data->base.nr_params == 0) {
      brw->wm.base.push_const_size = 0;
   } else {
      float *constants;
      unsigned int i;

      constants = brw_state_batch(brw, AUB_TRACE_WM_CONSTANTS,
				  prog_data->base.nr_params * sizeof(float),
				  32, &brw->wm.base.push_const_offset);

      for (i = 0; i < prog_data->base.nr_params; i++) {
	 constants[i] = *prog_data->base.param[i];
      }

      if (0) {
	 fprintf(stderr, "WM constants:\n");
	 for (i = 0; i < prog_data->base.nr_params; i++) {
	    if ((i & 7) == 0)
	       fprintf(stderr, "g%d: ", prog_data->first_curbe_grf + i / 8);
	    fprintf(stderr, "%8f ", constants[i]);
	    if ((i & 7) == 7)
	       fprintf(stderr, "\n");
	 }
	 if ((i & 7) != 0)
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
      }

      brw->wm.base.push_const_size = ALIGN(prog_data->base.nr_params, 8) / 8;
   }
d74 1
a74 1
   uint32_t dw2, dw4, dw5, dw6;
d79 8
a86 1
    /* CACHE_NEW_WM_PROG */
d112 1
a112 1
   dw2 = dw4 = dw5 = dw6 = 0;
d145 1
a145 1
   if (brw->wm.prog_data->prog_offset_16) {
d148 1
a148 1
      if (min_inv_per_frag == 1) {
d150 1
a150 1
         dw4 |= (brw->wm.prog_data->first_curbe_grf <<
d152 1
a152 1
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d154 4
a157 2
      } else
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d159 2
d164 1
a164 1
      dw4 |= (brw->wm.prog_data->first_curbe_grf <<
d166 1
d285 1
a285 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d287 1
a287 1
   if (brw->wm.prog_data->total_scratch) {
d290 1
a290 1
		ffs(brw->wm.prog_data->total_scratch) - 11);
d298 1
a298 2
   /* kernel 2 pointer */
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d33 1
d45 2
d54 3
a56 2
   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->nr_params != 0) {
d61 2
a62 3
				  brw->wm.prog_data->nr_params *
				  sizeof(float),
				  32, &brw->wm.push_const_offset);
d64 2
a65 2
      for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
	 constants[i] = *brw->wm.prog_data->param[i];
d69 2
a70 2
	 printf("WM constants:\n");
	 for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
d72 2
a73 2
	       printf("g%d: ", brw->wm.prog_data->first_curbe_grf + i / 8);
	    printf("%8f ", constants[i]);
d75 1
a75 1
	       printf("\n");
d78 2
a79 2
	    printf("\n");
	 printf("\n");
d81 7
d95 2
a96 1
		BRW_NEW_FRAGMENT_PROGRAM),
d114 1
a114 1
   if (brw->wm.prog_data->nr_params == 0) {
d131 2
a132 3
      OUT_BATCH(brw->wm.push_const_offset +
		ALIGN(brw->wm.prog_data->nr_params,
		      brw->wm.prog_data->dispatch_width) / 8 - 1);
d146 2
a147 2
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
d149 1
a149 1
   if (ctx->Shader.CurrentFragmentProgram == NULL)
d152 6
a157 6
   /* CACHE_NEW_SAMPLER */
   dw2 |= (ALIGN(brw->sampler.count, 4) / 4) << GEN6_WM_SAMPLER_COUNT_SHIFT;
   dw4 |= (brw->wm.prog_data->first_curbe_grf <<
	   GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
   dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
	   GEN6_WM_DISPATCH_START_GRF_SHIFT_2);
d162 11
a172 2
   dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
   if (brw->wm.prog_data->prog_offset_16)
d175 16
d217 2
a218 1
       ctx->Multisample.SampleAlphaToCoverage)
d221 1
d227 12
a238 1
   dw6 |= _mesa_bitcount_64(brw->fragment_program->Base.InputsRead) <<
d246 37
a282 1
      dw6 |= GEN6_WM_MSDISPMODE_PERPIXEL;
d288 17
d307 4
a310 1
   OUT_BATCH(brw->wm.prog_offset);
d313 2
a314 1
      OUT_RELOC(brw->wm.scratch_bo, I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
d324 1
a324 1
   OUT_BATCH(brw->wm.prog_offset + brw->wm.prog_data->prog_offset_16);
d337 3
a339 3
		BRW_NEW_BATCH),
      .cache = (CACHE_NEW_SAMPLER |
		CACHE_NEW_WM_PROG)
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d38 1
a38 1
gen6_prepare_wm_push_constants(struct brw_context *brw)
d40 1
a40 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d51 1
a51 1
   /* CACHE_NEW_VS_PROG */
d56 1
a56 1
      constants = brw_state_batch(brw,
d62 1
a62 2
	 constants[i] = convert_param(brw->wm.prog_data->param_convert[i],
				      *brw->wm.prog_data->param[i]);
d81 1
a81 1
const struct brw_tracked_state gen6_wm_constants = {
d86 1
a86 1
      .cache = CACHE_NEW_VS_PROG,
d88 1
a88 1
   .prepare = gen6_prepare_wm_push_constants,
d94 1
a94 2
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
d99 3
d118 1
a118 1
       * state flags from gen6_prepare_wm_constants
d134 7
a140 5
   /* OpenGL non-ieee floating point mode */
   dw2 |= GEN6_WM_FLOATING_POINT_MODE_ALT;

   /* BRW_NEW_NR_WM_SURFACES */
   dw2 |= brw->wm.nr_surfaces << GEN6_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT;
d143 1
a143 1
   dw2 |= (ALIGN(brw->wm.sampler_count, 4) / 4) << GEN6_WM_SAMPLER_COUNT_SHIFT;
d149 1
a149 1
   dw5 |= (brw->wm_max_threads - 1) << GEN6_WM_MAX_THREADS_SHIFT;
d152 2
a153 5
   if (brw->wm.prog_data->dispatch_width == 8) {
      dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
      if (brw->wm.prog_data->prog_offset_16)
	 dw5 |= GEN6_WM_16_DISPATCH_ENABLE;
   } else {
d155 6
d172 1
a172 1
   if (fp->program.Base.InputsRead & (1 << FRAG_ATTRIB_WPOS))
d176 3
d180 3
a182 2
   /* _NEW_COLOR */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled)
d190 1
a190 3
   dw6 |= GEN6_WM_PERSPECTIVE_PIXEL_BARYCENTRIC;

   dw6 |= brw_count_bits(brw->fragment_program->Base.InputsRead) <<
d192 11
d229 2
a230 1
		_NEW_POLYGON),
a231 2
                BRW_NEW_NR_WM_SURFACES |
		BRW_NEW_URB_FENCE |
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d38 1
a38 1
prepare_wm_constants(struct brw_context *brw)
d42 1
d46 1
a46 4
   drm_intel_bo_unreference(brw->wm.push_const_bo);
   brw->wm.push_const_bo = NULL;

   /* Updates the ParamaterValues[i] pointers for all parameters of the
d52 1
d57 5
a61 7
      brw->wm.push_const_bo = drm_intel_bo_alloc(intel->bufmgr,
						 "WM constant_bo",
						 brw->wm.prog_data->nr_params *
						 sizeof(float),
						 4096);
      drm_intel_gem_bo_map_gtt(brw->wm.push_const_bo);
      constants = brw->wm.push_const_bo->virtual;
a79 2

      drm_intel_gem_bo_unmap_gtt(brw->wm.push_const_bo);
d86 3
a88 2
      .brw   = BRW_NEW_FRAGMENT_PROGRAM,
      .cache = 0,
d90 1
a90 1
   .prepare = prepare_wm_constants,
d102 1
a102 1
   /* CACHE_NEW_WM_PROG */
d117 4
a120 2
      OUT_RELOC(brw->wm.push_const_bo,
		I915_GEM_DOMAIN_RENDER, 0, /* XXX: bad domain */
d144 2
d150 1
a150 1
   if (brw->wm.prog_data->dispatch_width == 8)
d152 3
a154 1
   else
d156 1
d162 1
a162 1
   /* _NEW_POLYGONSTIPPLE */
d188 1
a188 1
   OUT_RELOC(brw->wm.prog_bo, I915_GEM_DOMAIN_INSTRUCTION, 0, 0);
d190 6
a195 1
   OUT_BATCH(0); /* scratch space base offset */
d200 2
a201 1
   OUT_BATCH(0); /* kernel 2 pointer */
d207 6
a212 4
      .mesa  = (_NEW_LINE | _NEW_POLYGONSTIPPLE | _NEW_COLOR | _NEW_BUFFERS |
		_NEW_PROGRAM_CONSTANTS | _NEW_POLYGON),
      .brw   = (BRW_NEW_CURBE_OFFSETS |
		BRW_NEW_FRAGMENT_PROGRAM |
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d32 3
a34 2
#include "shader/prog_parameter.h"
#include "shader/prog_statevars.h"
d38 60
d101 1
a101 1
   GLcontext *ctx = &intel->ctx;
a103 3
   unsigned int nr_params = fp->program.Base.Parameters->NumParameters;
   drm_intel_bo *constant_bo;
   int i;
d106 2
a107 1
   if (fp->use_const_buffer || nr_params == 0) {
d110 1
a110 1
      OUT_BATCH(CMD_3D_CONSTANT_PS_STATE << 16 | (5 - 2));
a116 16
      /* Updates the ParamaterValues[i] pointers for all parameters of the
       * basic type of PROGRAM_STATE_VAR.
       */
      _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

      constant_bo = drm_intel_bo_alloc(intel->bufmgr, "WM constant_bo",
				       nr_params * 4 * sizeof(float),
				       4096);
      drm_intel_gem_bo_map_gtt(constant_bo);
      for (i = 0; i < nr_params; i++) {
	 memcpy((char *)constant_bo->virtual + i * 4 * sizeof(float),
		fp->program.Base.Parameters->ParameterValues[i],
		4 * sizeof(float));
      }
      drm_intel_gem_bo_unmap_gtt(constant_bo);

d118 1
a118 1
      OUT_BATCH(CMD_3D_CONSTANT_PS_STATE << 16 |
d121 1
a121 1
      OUT_RELOC(constant_bo,
d123 2
a124 1
		ALIGN(nr_params, 2) / 2 - 1);
a128 2

      drm_intel_bo_unreference(constant_bo);
a130 2
   intel_batchbuffer_emit_mi_flush(intel->batch);

d136 4
a139 1
   /* BRW_NEW_NR_SURFACES */
d144 2
a145 1
   dw4 |= (1 << GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
d147 1
a147 2
   dw5 |= (40 - 1) << GEN6_WM_MAX_THREADS_SHIFT;
   dw5 |= GEN6_WM_DISPATCH_ENABLE;
d149 2
a150 2
   /* BRW_NEW_FRAGMENT_PROGRAM */
   if (fp->isGLSL)
d173 8
a180 2
   /* This should probably be FS inputs read */
   dw6 |= brw_count_bits(brw->vs.prog_data->outputs_written) <<
d184 1
a184 1
   OUT_BATCH(CMD_3D_WM_STATE << 16 | (9 - 2));
a193 2

   intel_batchbuffer_emit_mi_flush(intel->batch);
d198 2
a199 1
      .mesa  = _NEW_LINE | _NEW_POLYGONSTIPPLE | _NEW_COLOR,
d205 2
a206 1
      .cache = CACHE_NEW_SAMPLER
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d32 2
a33 3
#include "brw_wm.h"
#include "program/prog_parameter.h"
#include "program/prog_statevars.h"
a36 60
prepare_wm_constants(struct brw_context *brw)
{
   struct intel_context *intel = &brw->intel;
   struct gl_context *ctx = &intel->ctx;
   const struct brw_fragment_program *fp =
      brw_fragment_program_const(brw->fragment_program);

   drm_intel_bo_unreference(brw->wm.push_const_bo);
   brw->wm.push_const_bo = NULL;

   /* Updates the ParamaterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

   if (brw->wm.prog_data->nr_params != 0) {
      float *constants;
      unsigned int i;

      brw->wm.push_const_bo = drm_intel_bo_alloc(intel->bufmgr,
						 "WM constant_bo",
						 brw->wm.prog_data->nr_params *
						 sizeof(float),
						 4096);
      drm_intel_gem_bo_map_gtt(brw->wm.push_const_bo);
      constants = brw->wm.push_const_bo->virtual;
      for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
	 constants[i] = convert_param(brw->wm.prog_data->param_convert[i],
				      *brw->wm.prog_data->param[i]);
      }

      if (0) {
	 printf("WM constants:\n");
	 for (i = 0; i < brw->wm.prog_data->nr_params; i++) {
	    if ((i & 7) == 0)
	       printf("g%d: ", brw->wm.prog_data->first_curbe_grf + i / 8);
	    printf("%8f ", constants[i]);
	    if ((i & 7) == 7)
	       printf("\n");
	 }
	 if ((i & 7) != 0)
	    printf("\n");
	 printf("\n");
      }

      drm_intel_gem_bo_unmap_gtt(brw->wm.push_const_bo);
   }
}

const struct brw_tracked_state gen6_wm_constants = {
   .dirty = {
      .mesa  = _NEW_PROGRAM_CONSTANTS,
      .brw   = BRW_NEW_FRAGMENT_PROGRAM,
      .cache = 0,
   },
   .prepare = prepare_wm_constants,
};

static void
d40 1
a40 1
   struct gl_context *ctx = &intel->ctx;
d43 3
d48 1
a48 2
   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->nr_params == 0) {
d51 1
a51 1
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 | (5 - 2));
d58 16
d75 1
a75 1
      OUT_BATCH(_3DSTATE_CONSTANT_PS << 16 |
d78 1
a78 1
      OUT_RELOC(brw->wm.push_const_bo,
d80 1
a80 2
		ALIGN(brw->wm.prog_data->nr_params,
		      brw->wm.prog_data->dispatch_width) / 8 - 1);
d85 2
d89 2
d96 1
a96 4
   /* OpenGL non-ieee floating point mode */
   dw2 |= GEN6_WM_FLOATING_POINT_MODE_ALT;

   /* BRW_NEW_NR_WM_SURFACES */
d101 1
a101 2
   dw4 |= (brw->wm.prog_data->first_curbe_grf <<
	   GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
d103 2
a104 1
   dw5 |= (brw->wm_max_threads - 1) << GEN6_WM_MAX_THREADS_SHIFT;
d106 2
a107 2
   /* CACHE_NEW_WM_PROG */
   if (brw->wm.prog_data->dispatch_width == 8)
d130 2
a131 8
   if (brw_color_buffer_write_enabled(brw) ||
       dw5 & (GEN6_WM_KILL_ENABLE | GEN6_WM_COMPUTED_DEPTH)) {
      dw5 |= GEN6_WM_DISPATCH_ENABLE;
   }

   dw6 |= GEN6_WM_PERSPECTIVE_PIXEL_BARYCENTRIC;

   dw6 |= brw_count_bits(brw->fragment_program->Base.InputsRead) <<
d135 1
a135 1
   OUT_BATCH(_3DSTATE_WM << 16 | (9 - 2));
d145 2
d151 1
a151 2
      .mesa  = (_NEW_LINE | _NEW_POLYGONSTIPPLE | _NEW_COLOR | _NEW_BUFFERS |
		_NEW_PROGRAM_CONSTANTS | _NEW_POLYGON),
d157 1
a157 2
      .cache = (CACHE_NEW_SAMPLER |
		CACHE_NEW_WM_PROG)
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d38 1
a38 1
gen6_upload_wm_push_constants(struct brw_context *brw)
d40 2
a41 2
   struct gl_context *ctx = &brw->ctx;
   /* BRW_NEW_FRAGMENT_PROGRAM */
d45 4
a48 1
   /* Updates the ParameterValues[i] pointers for all parameters of the
a53 1
   /* CACHE_NEW_WM_PROG */
d58 7
a64 5
      constants = brw_state_batch(brw, AUB_TRACE_WM_CONSTANTS,
				  brw->wm.prog_data->nr_params *
				  sizeof(float),
				  32, &brw->wm.push_const_offset);

d66 2
a67 1
	 constants[i] = *brw->wm.prog_data->param[i];
d83 2
d88 1
a88 1
const struct brw_tracked_state gen6_wm_push_constants = {
d91 2
a92 3
      .brw   = (BRW_NEW_BATCH |
		BRW_NEW_FRAGMENT_PROGRAM),
      .cache = CACHE_NEW_WM_PROG,
d94 1
a94 1
   .emit = gen6_upload_wm_push_constants,
d100 2
a101 1
   struct gl_context *ctx = &brw->ctx;
d106 1
a106 4
   /* _NEW_BUFFERS */
   bool multisampled_fbo = ctx->DrawBuffer->Visual.samples > 1;

    /* CACHE_NEW_WM_PROG */
d121 2
a122 4
      /* Pointer to the WM constant buffer.  Covered by the set of
       * state flags from gen6_upload_wm_push_constants.
       */
      OUT_BATCH(brw->wm.push_const_offset +
d136 5
a140 7
   /* Use ALT floating point mode for ARB fragment programs, because they
    * require 0^0 == 1.  Even though _CurrentFragmentProgram is used for
    * rendering, CurrentFragmentProgram is used for this check to
    * differentiate between the GLSL and non-GLSL cases.
    */
   if (ctx->Shader.CurrentFragmentProgram == NULL)
      dw2 |= GEN6_WM_FLOATING_POINT_MODE_ALT;
d143 1
a143 1
   dw2 |= (ALIGN(brw->sampler.count, 4) / 4) << GEN6_WM_SAMPLER_COUNT_SHIFT;
a145 2
   dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
	   GEN6_WM_DISPATCH_START_GRF_SHIFT_2);
d147 1
a147 1
   dw5 |= (brw->max_wm_threads - 1) << GEN6_WM_MAX_THREADS_SHIFT;
d150 3
a152 2
   dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
   if (brw->wm.prog_data->prog_offset_16)
a154 7
   /* CACHE_NEW_WM_PROG | _NEW_COLOR */
   if (brw->wm.prog_data->dual_src_blend &&
       (ctx->Color.BlendEnabled & 1) &&
       ctx->Color.Blend[0]._UsesDualSrc) {
      dw5 |= GEN6_WM_DUAL_SOURCE_BLEND_ENABLE;
   }

d159 1
a159 1
   /* _NEW_POLYGON */
d164 1
a164 1
   if (fp->program.Base.InputsRead & VARYING_BIT_POS)
a167 3
   /* CACHE_NEW_WM_PROG */
   dw6 |= brw->wm.prog_data->barycentric_interp_modes <<
      GEN6_WM_BARYCENTRIC_INTERPOLATION_MODE_SHIFT;
d169 2
a170 3
   /* _NEW_COLOR, _NEW_MULTISAMPLE */
   if (fp->program.UsesKill || ctx->Color.AlphaEnabled ||
       ctx->Multisample.SampleAlphaToCoverage)
d178 3
a180 1
   dw6 |= _mesa_bitcount_64(brw->fragment_program->Base.InputsRead) <<
a181 11
   if (multisampled_fbo) {
      /* _NEW_MULTISAMPLE */
      if (ctx->Multisample.Enabled)
         dw6 |= GEN6_WM_MSRAST_ON_PATTERN;
      else
         dw6 |= GEN6_WM_MSRAST_OFF_PIXEL;
      dw6 |= GEN6_WM_MSDISPMODE_PERPIXEL;
   } else {
      dw6 |= GEN6_WM_MSRAST_OFF_PIXEL;
      dw6 |= GEN6_WM_MSDISPMODE_PERSAMPLE;
   }
d185 1
a185 1
   OUT_BATCH(brw->wm.prog_offset);
d187 1
a187 6
   if (brw->wm.prog_data->total_scratch) {
      OUT_RELOC(brw->wm.scratch_bo, I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
		ffs(brw->wm.prog_data->total_scratch) - 11);
   } else {
      OUT_BATCH(0);
   }
d192 1
a192 2
   /* kernel 2 pointer */
   OUT_BATCH(brw->wm.prog_offset + brw->wm.prog_data->prog_offset_16);
d198 6
a203 7
      .mesa  = (_NEW_LINE |
		_NEW_COLOR |
		_NEW_BUFFERS |
		_NEW_PROGRAM_CONSTANTS |
		_NEW_POLYGON |
                _NEW_MULTISAMPLE),
      .brw   = (BRW_NEW_FRAGMENT_PROGRAM |
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a32 1
#include "program/program.h"
a43 2
   /* CACHE_NEW_WM_PROG */
   const struct brw_wm_prog_data *prog_data = brw->wm.prog_data;
d51 2
a52 3
   if (prog_data->base.nr_params == 0) {
      brw->wm.base.push_const_size = 0;
   } else {
d57 3
a59 2
				  prog_data->base.nr_params * sizeof(float),
				  32, &brw->wm.base.push_const_offset);
d61 2
a62 2
      for (i = 0; i < prog_data->base.nr_params; i++) {
	 constants[i] = *prog_data->base.param[i];
d66 2
a67 2
	 fprintf(stderr, "WM constants:\n");
	 for (i = 0; i < prog_data->base.nr_params; i++) {
d69 2
a70 2
	       fprintf(stderr, "g%d: ", prog_data->first_curbe_grf + i / 8);
	    fprintf(stderr, "%8f ", constants[i]);
d72 1
a72 1
	       fprintf(stderr, "\n");
d75 2
a76 2
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
a77 7

      brw->wm.base.push_const_size = ALIGN(prog_data->base.nr_params, 8) / 8;
   }

   if (brw->gen >= 7) {
      gen7_upload_constant_state(brw, &brw->wm.base, true,
                                 _3DSTATE_CONSTANT_PS);
d85 1
a85 2
                BRW_NEW_FRAGMENT_PROGRAM |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
d103 1
a103 1
   if (brw->wm.prog_data->base.nr_params == 0) {
d120 3
a122 2
      OUT_BATCH(brw->wm.base.push_const_offset +
		brw->wm.base.push_const_size - 1);
d136 2
a137 2
    * rendering, CurrentProgram[MESA_SHADER_FRAGMENT] is used for this check
    * to differentiate between the GLSL and non-GLSL cases.
d139 1
a139 1
   if (ctx->_Shader->CurrentProgram[MESA_SHADER_FRAGMENT] == NULL)
d142 6
a147 6
   dw2 |= (ALIGN(brw->wm.base.sampler_count, 4) / 4) <<
           GEN6_WM_SAMPLER_COUNT_SHIFT;

   /* CACHE_NEW_WM_PROG */
   dw2 |= ((brw->wm.prog_data->base.binding_table.size_bytes / 4) <<
           GEN6_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT);
d152 2
a153 11

   /* In case of non 1x per sample shading, only one of SIMD8 and SIMD16
    * should be enabled. We do 'SIMD16 only' dispatch if a SIMD16 shader
    * is successfully compiled. In majority of the cases that bring us
    * better performance than 'SIMD8 only' dispatch.
    */
   int min_inv_per_frag =
      _mesa_get_min_invocations_per_fragment(ctx, brw->fragment_program, false);
   assert(min_inv_per_frag >= 1);

   if (brw->wm.prog_data->prog_offset_16) {
a155 16
      if (min_inv_per_frag == 1) {
         dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
         dw4 |= (brw->wm.prog_data->first_curbe_grf <<
                 GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                 GEN6_WM_DISPATCH_START_GRF_SHIFT_2);
      } else
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
                GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
   }
   else {
      dw5 |= GEN6_WM_8_DISPATCH_ENABLE;
      dw4 |= (brw->wm.prog_data->first_curbe_grf <<
              GEN6_WM_DISPATCH_START_GRF_SHIFT_0);
   }

d182 1
a182 2
       ctx->Multisample.SampleAlphaToCoverage ||
       brw->wm.prog_data->uses_omask)
a184 1
   /* _NEW_BUFFERS | _NEW_COLOR */
d190 1
a190 12
   /* From the SNB PRM, volume 2 part 1, page 278:
    * "This bit is inserted in the PS payload header and made available to
    * the DataPort (either via the message header or via header bypass) to
    * indicate that oMask data (one or two phases) is included in Render
    * Target Write messages. If present, the oMask data is used to mask off
    * samples."
    */
    if(brw->wm.prog_data->uses_omask)
      dw5 |= GEN6_WM_OMASK_TO_RENDER_TARGET;

   /* CACHE_NEW_WM_PROG */
   dw6 |= brw->wm.prog_data->num_varying_inputs <<
d198 1
a198 37

      if (min_inv_per_frag > 1)
         dw6 |= GEN6_WM_MSDISPMODE_PERSAMPLE;
      else {
         dw6 |= GEN6_WM_MSDISPMODE_PERPIXEL;

         /* From the Sandy Bridge PRM, Vol 2 part 1, 7.7.1 ("Pixel Grouping
          * (Dispatch Size) Control"), p.334:
          *
          *     Note: in the table below, the Valid column indicates which
          *     products that combination is supported on. Combinations of
          *     dispatch enables not listed in the table are not available on
          *     any product.
          *
          *     A: Valid on all products
          *
          *     B: Not valid on [DevSNB] if 4x PERPIXEL mode with pixel shader
          *     computed depth.
          *
          *     D: Valid on all products, except when in non-1x PERSAMPLE mode
          *     (applies to [DevSNB+] only). Not valid on [DevSNB] if 4x
          *     PERPIXEL mode with pixel shader computed depth.
          *
          *     E: Not valid on [DevSNB] if 4x PERPIXEL mode with pixel shader
          *     computed depth.
          *
          *     F: Valid on all products, except not valid on [DevSNB] if 4x
          *     PERPIXEL mode with pixel shader computed depth.
          *
          * In the table that follows, the only entry with "A" in the Valid
          * column is the entry where only 8 pixel dispatch is enabled.
          * Therefore, when we are in PERPIXEL mode with pixel shader computed
          * depth, we need to disable SIMD16 dispatch.
          */
         if (dw5 & GEN6_WM_COMPUTED_DEPTH)
            dw5 &= ~GEN6_WM_16_DISPATCH_ENABLE;
      }
a203 17
   /* From the SNB PRM, volume 2 part 1, page 281:
    * "If the PS kernel does not need the Position XY Offsets
    * to compute a Position XY value, then this field should be
    * programmed to POSOFFSET_NONE."
    *
    * "SW Recommendation: If the PS kernel needs the Position Offsets
    * to compute a Position XY value, this field should match Position
    * ZW Interpolation Mode to ensure a consistent position.xyzw
    * computation."
    * We only require XY sample offsets. So, this recommendation doesn't
    * look useful at the moment. We might need this in future.
    */
   if (brw->wm.prog_data->uses_pos_offset)
      dw6 |= GEN6_WM_POSOFFSET_SAMPLE;
   else
      dw6 |= GEN6_WM_POSOFFSET_NONE;

d206 1
a206 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d209 1
a209 2
      OUT_RELOC(brw->wm.base.scratch_bo,
                I915_GEM_DOMAIN_RENDER, I915_GEM_DOMAIN_RENDER,
d219 1
a219 1
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
d232 3
a234 3
		BRW_NEW_BATCH |
                BRW_NEW_PUSH_CONSTANT_ALLOCATION),
      .cache = (CACHE_NEW_WM_PROG)
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d41 1
a41 1
   struct brw_stage_state *stage_state = &brw->wm.base;
d48 36
a83 2
   gen6_upload_push_constants(brw, &fp->program.Base, &prog_data->base,
                              stage_state, AUB_TRACE_WM_CONSTANTS);
d108 1
a108 1
   uint32_t dw2, dw4, dw5, dw6, ksp0, ksp2;
d113 1
a113 8
   /* CACHE_NEW_WM_PROG
    *
    * We can't fold this into gen6_upload_wm_push_constants(), because
    * according to the SNB PRM, vol 2 part 1 section 7.2.2
    * (3DSTATE_CONSTANT_PS [DevSNB]):
    *
    *     "[DevSNB]: This packet must be followed by WM_STATE."
    */
d139 1
a139 1
   dw2 = dw4 = dw5 = dw6 = ksp2 = 0;
d172 1
a172 1
   if (brw->wm.prog_data->prog_offset_16 || brw->wm.prog_data->no_8) {
d175 1
a175 1
      if (!brw->wm.prog_data->no_8 && min_inv_per_frag == 1) {
d177 1
a177 1
         dw4 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
d179 1
a179 1
         dw4 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
d181 2
a182 4
         ksp0 = brw->wm.base.prog_offset;
         ksp2 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      } else {
         dw4 |= (brw->wm.prog_data->dispatch_grf_start_reg_16 <<
a183 2
         ksp0 = brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16;
      }
d187 1
a187 1
      dw4 |= (brw->wm.prog_data->base.dispatch_grf_start_reg <<
a188 1
      ksp0 = brw->wm.base.prog_offset;
d307 4
a310 1
   OUT_BATCH(ksp0);
d312 1
a312 1
   if (brw->wm.prog_data->base.total_scratch) {
d315 1
a315 1
		ffs(brw->wm.prog_data->base.total_scratch) - 11);
d323 2
a324 1
   OUT_BATCH(ksp2);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d41 1
a41 1
   struct gl_context *ctx = &brw->ctx;
d48 2
a49 36
   /* Updates the ParameterValues[i] pointers for all parameters of the
    * basic type of PROGRAM_STATE_VAR.
    */
   /* XXX: Should this happen somewhere before to get our state flag set? */
   _mesa_load_state_parameters(ctx, fp->program.Base.Parameters);

   if (prog_data->base.nr_params == 0) {
      brw->wm.base.push_const_size = 0;
   } else {
      float *constants;
      unsigned int i;

      constants = brw_state_batch(brw, AUB_TRACE_WM_CONSTANTS,
				  prog_data->base.nr_params * sizeof(float),
				  32, &brw->wm.base.push_const_offset);

      for (i = 0; i < prog_data->base.nr_params; i++) {
	 constants[i] = *prog_data->base.param[i];
      }

      if (0) {
	 fprintf(stderr, "WM constants:\n");
	 for (i = 0; i < prog_data->base.nr_params; i++) {
	    if ((i & 7) == 0)
	       fprintf(stderr, "g%d: ", prog_data->first_curbe_grf + i / 8);
	    fprintf(stderr, "%8f ", constants[i]);
	    if ((i & 7) == 7)
	       fprintf(stderr, "\n");
	 }
	 if ((i & 7) != 0)
	    fprintf(stderr, "\n");
	 fprintf(stderr, "\n");
      }

      brw->wm.base.push_const_size = ALIGN(prog_data->base.nr_params, 8) / 8;
   }
d74 1
a74 1
   uint32_t dw2, dw4, dw5, dw6;
d79 8
a86 1
    /* CACHE_NEW_WM_PROG */
d112 1
a112 1
   dw2 = dw4 = dw5 = dw6 = 0;
d145 1
a145 1
   if (brw->wm.prog_data->prog_offset_16) {
d148 1
a148 1
      if (min_inv_per_frag == 1) {
d150 1
a150 1
         dw4 |= (brw->wm.prog_data->first_curbe_grf <<
d152 1
a152 1
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d154 4
a157 2
      } else
         dw4 |= (brw->wm.prog_data->first_curbe_grf_16 <<
d159 2
d164 1
a164 1
      dw4 |= (brw->wm.prog_data->first_curbe_grf <<
d166 1
d285 1
a285 4
   if (brw->wm.prog_data->prog_offset_16 && min_inv_per_frag > 1)
      OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
   else
      OUT_BATCH(brw->wm.base.prog_offset);
d287 1
a287 1
   if (brw->wm.prog_data->total_scratch) {
d290 1
a290 1
		ffs(brw->wm.prog_data->total_scratch) - 11);
d298 1
a298 2
   /* kernel 2 pointer */
   OUT_BATCH(brw->wm.base.prog_offset + brw->wm.prog_data->prog_offset_16);
@


