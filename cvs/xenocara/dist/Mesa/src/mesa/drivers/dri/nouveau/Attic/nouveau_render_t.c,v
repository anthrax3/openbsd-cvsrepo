head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2015.01.25.14.41.21;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2013.09.05.14.04.49;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.39;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.51;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.01.25.14.11.59;	author jsg;	state Exp;
branches;
next	;
commitid	ce2W5rH5aF7VS9gi;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright (C) 2009-2010 Francisco Jerez.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/*
 * Vertex submission helper definitions shared among the software and
 * hardware TnL paths.
 */

#include "nouveau_gldefs.h"

#include "main/light.h"
#include "vbo/vbo.h"
#include "tnl/tnl.h"

#define OUT_INDICES_L(r, i, d, n)		\
	BATCH_OUT_L(i + d, n);			\
	(void)r
#define OUT_INDICES_I16(r, i, d, n)				\
	BATCH_OUT_I16(r->ib.extract_u(&r->ib, 0, i) + d,	\
		      r->ib.extract_u(&r->ib, 0, i + 1) + d)
#define OUT_INDICES_I32(r, i, d, n)			\
	BATCH_OUT_I32(r->ib.extract_u(&r->ib, 0, i) + d)

/*
 * Emit <n> vertices using BATCH_OUT_<out>, MAX_OUT_<out> at a time,
 * grouping them in packets of length MAX_PACKET.
 *
 * out:   hardware index data type.
 * ctx:   GL context.
 * start: element within the index buffer to begin with.
 * delta: integer correction that will be added to each index found in
 *        the index buffer.
 */
#define EMIT_VBO(out, ctx, start, delta, n) do {			\
		struct nouveau_render_state *render = to_render_state(ctx); \
		int _npush = n;						\
									\
		while (_npush) {						\
			int _npack = MIN2(_npush, MAX_PACKET * MAX_OUT_##out); \
			_npush -= _npack;					\
									\
			BATCH_PACKET_##out((_npack + MAX_OUT_##out - 1)	\
					   / MAX_OUT_##out);		\
			while (_npack) {				\
				int _nout = MIN2(_npack, MAX_OUT_##out);\
				_npack -= _nout;			\
									\
				OUT_INDICES_##out(render, start, delta, \
						  _nout);		\
				start += _nout;				\
			}						\
		}							\
	} while (0)

/*
 * Emit the <n>-th element of the array <a>, using IMM_OUT.
 */
#define EMIT_IMM(ctx, a, n) do {					\
		struct nouveau_attr_info *info =			\
			&TAG(vertex_attrs)[(a)->attr];			\
		int m;							\
									\
		if (!info->emit) {					\
			IMM_PACKET(info->imm_method, info->imm_fields);	\
									\
			for (m = 0; m < (a)->fields; m++)		\
				IMM_OUT((a)->extract_f(a, n, m));	\
									\
			for (m = (a)->fields; m < info->imm_fields; m++) \
				IMM_OUT(((float []){0, 0, 0, 1})[m]);	\
									\
		} else {						\
			info->emit(ctx, a, (a)->buf + n * (a)->stride);	\
		}							\
	} while (0)

static void
dispatch_l(struct gl_context *ctx, unsigned int start, int delta,
	   unsigned int n)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);

	EMIT_VBO(L, ctx, start, delta, n);
}

static void
dispatch_i32(struct gl_context *ctx, unsigned int start, int delta,
	     unsigned int n)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);

	EMIT_VBO(I32, ctx, start, delta, n);
}

static void
dispatch_i16(struct gl_context *ctx, unsigned int start, int delta,
	     unsigned int n)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);

	EMIT_VBO(I32, ctx, start, delta, n & 1);
	EMIT_VBO(I16, ctx, start, delta, n & ~1);
}

/*
 * Select an appropriate dispatch function for the given index buffer.
 */
static dispatch_t
get_array_dispatch(struct nouveau_array *a)
{
	if (!a->fields)
		return dispatch_l;
	else if (a->type == GL_UNSIGNED_INT)
		return dispatch_i32;
	else
		return dispatch_i16;
}

/*
 * Returns how many vertices you can draw using <n> pushbuf dwords.
 */
static inline unsigned
get_max_vertices(struct gl_context *ctx, const struct _mesa_index_buffer *ib,
		 int n)
{
	struct nouveau_render_state *render = to_render_state(ctx);

	if (render->mode == IMM) {
		return MAX2(0, n - 4) / (render->vertex_size / 4 +
					 render->attr_count);
	} else {
		unsigned max_out;

		if (ib) {
			switch (ib->type) {
			case GL_UNSIGNED_INT:
				max_out = MAX_OUT_I32;
				break;

			case GL_UNSIGNED_SHORT:
				max_out = MAX_OUT_I16;
				break;

			case GL_UNSIGNED_BYTE:
				max_out = MAX_OUT_I16;
				break;

			default:
				assert(0);
				max_out = 0;
				break;
			}
		} else {
			max_out = MAX_OUT_L;
		}

		return MAX2(0, n - 7) * max_out * MAX_PACKET / (1 + MAX_PACKET);
	}
}

static void
TAG(emit_material)(struct gl_context *ctx, struct nouveau_array *a,
		   const void *v)
{
	int attr = a->attr - VERT_ATTRIB_GENERIC0;
	int state = ((int []) {
			NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
			NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
			NOUVEAU_STATE_MATERIAL_FRONT_DIFFUSE,
			NOUVEAU_STATE_MATERIAL_BACK_DIFFUSE,
			NOUVEAU_STATE_MATERIAL_FRONT_SPECULAR,
			NOUVEAU_STATE_MATERIAL_BACK_SPECULAR,
			NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
			NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
			NOUVEAU_STATE_MATERIAL_FRONT_SHININESS,
			NOUVEAU_STATE_MATERIAL_BACK_SHININESS
		}) [attr];

	COPY_4V(ctx->Light.Material.Attrib[attr], (float *)v);
	_mesa_update_material(ctx, 1 << attr);

	context_drv(ctx)->emit[state](ctx, state);
}
@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d59 1
a59 1
		int npush = n;						\
d61 3
a63 3
		while (npush) {						\
			int npack = MIN2(npush, MAX_PACKET * MAX_OUT_##out); \
			npush -= npack;					\
d65 1
a65 1
			BATCH_PACKET_##out((npack + MAX_OUT_##out - 1)	\
d67 3
a69 3
			while (npack) {					\
				int nout = MIN2(npack, MAX_OUT_##out);	\
				npack -= nout;				\
d72 2
a73 2
						  nout);		\
				start += nout;				\
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d100 3
a102 5
/*
 * Select an appropriate dispatch function for the given index buffer.
 */
static dispatch_t
get_array_dispatch(struct nouveau_array *a)
d104 2
a105 2
	if (!a->fields) {
		auto void f(struct gl_context *, unsigned int, int, unsigned int);
d107 2
a108 4
		void f(struct gl_context *ctx, unsigned int start, int delta,
		       unsigned int n) {
			struct nouveau_channel *chan = context_chan(ctx);
			RENDER_LOCALS(ctx);
d110 6
a115 2
			EMIT_VBO(L, ctx, start, delta, n);
		};
d117 2
a118 1
		return f;
d120 6
a125 2
	} else if (a->type == GL_UNSIGNED_INT) {
		auto void f(struct gl_context *, unsigned int, int, unsigned int);
d127 3
a129 4
		void f(struct gl_context *ctx, unsigned int start, int delta,
		       unsigned int n) {
			struct nouveau_channel *chan = context_chan(ctx);
			RENDER_LOCALS(ctx);
d131 12
a142 19
			EMIT_VBO(I32, ctx, start, delta, n);
		};

		return f;

	} else {
		auto void f(struct gl_context *, unsigned int, int, unsigned int);

		void f(struct gl_context *ctx, unsigned int start, int delta,
		       unsigned int n) {
			struct nouveau_channel *chan = context_chan(ctx);
			RENDER_LOCALS(ctx);

			EMIT_VBO(I32, ctx, start, delta, n & 1);
			EMIT_VBO(I16, ctx, start, delta, n & ~1);
		};

		return f;
	}
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d103 2
a104 2
static void
get_array_dispatch(struct nouveau_array_state *a, dispatch_t *dispatch)
d107 1
a107 1
		auto void f(GLcontext *, unsigned int, int, unsigned int);
d109 1
a109 1
		void f(GLcontext *ctx, unsigned int start, int delta,
d117 1
a117 1
		*dispatch = f;
d120 1
a120 1
		auto void f(GLcontext *, unsigned int, int, unsigned int);
d122 1
a122 1
		void f(GLcontext *ctx, unsigned int start, int delta,
d130 1
a130 1
		*dispatch = f;
d133 1
a133 1
		auto void f(GLcontext *, unsigned int, int, unsigned int);
d135 1
a135 1
		void f(GLcontext *ctx, unsigned int start, int delta,
d144 1
a144 1
		*dispatch = f;
a148 104
 * Select appropriate element extraction functions for the given
 * array.
 */
static void
get_array_extract(struct nouveau_array_state *a,
		  extract_u_t *extract_u, extract_f_t *extract_f)
{
#define EXTRACT(in_t, out_t, k)						\
	({								\
		auto out_t f(struct nouveau_array_state *, int, int);	\
		out_t f(struct nouveau_array_state *a, int i, int j) {	\
			in_t x = ((in_t *)(a->buf + i * a->stride))[j];	\
									\
			return (out_t)x / (k);				\
		};							\
		f;							\
	});

	switch (a->type) {
	case GL_BYTE:
		*extract_u = EXTRACT(char, unsigned, 1);
		*extract_f = EXTRACT(char, float, SCHAR_MAX);
		break;
	case GL_UNSIGNED_BYTE:
		*extract_u = EXTRACT(unsigned char, unsigned, 1);
		*extract_f = EXTRACT(unsigned char, float, UCHAR_MAX);
		break;
	case GL_SHORT:
		*extract_u = EXTRACT(short, unsigned, 1);
		*extract_f = EXTRACT(short, float, SHRT_MAX);
		break;
	case GL_UNSIGNED_SHORT:
		*extract_u = EXTRACT(unsigned short, unsigned, 1);
		*extract_f = EXTRACT(unsigned short, float, USHRT_MAX);
		break;
	case GL_INT:
		*extract_u = EXTRACT(int, unsigned, 1);
		*extract_f = EXTRACT(int, float, INT_MAX);
		break;
	case GL_UNSIGNED_INT:
		*extract_u = EXTRACT(unsigned int, unsigned, 1);
		*extract_f = EXTRACT(unsigned int, float, UINT_MAX);
		break;
	case GL_FLOAT:
		*extract_u = EXTRACT(float, unsigned, 1.0 / UINT_MAX);
		*extract_f = EXTRACT(float, float, 1);
		break;

	default:
		assert(0);
	}
}

/*
 * Returns a pointer to a chunk of <size> bytes long GART memory. <bo>
 * will be updated with the buffer object the memory is located in.
 *
 * If <offset> is provided, it will be updated with the offset within
 * <bo> of the allocated memory. Otherwise the returned memory will
 * always be located right at the beginning of <bo>.
 */
static inline void *
get_scratch_vbo(GLcontext *ctx, unsigned size, struct nouveau_bo **bo,
		unsigned *offset)
{
	struct nouveau_scratch_state *scratch = &to_render_state(ctx)->scratch;
	void *buf;

	if (scratch->buf && offset &&
	    size <= RENDER_SCRATCH_SIZE - scratch->offset) {
		nouveau_bo_ref(scratch->bo[scratch->index], bo);

		buf = scratch->buf + scratch->offset;
		*offset = scratch->offset;
		scratch->offset += size;

	} else if (size <= RENDER_SCRATCH_SIZE) {
		scratch->index = (scratch->index + 1) % RENDER_SCRATCH_COUNT;
		nouveau_bo_ref(scratch->bo[scratch->index], bo);

		nouveau_bo_map(*bo, NOUVEAU_BO_WR);
		buf = scratch->buf = (*bo)->map;
		nouveau_bo_unmap(*bo);

		if (offset)
			*offset = 0;
		scratch->offset = size;

	} else {
		nouveau_bo_new(context_dev(ctx),
			       NOUVEAU_BO_MAP | NOUVEAU_BO_GART, 0, size, bo);

		nouveau_bo_map(*bo, NOUVEAU_BO_WR);
		buf = (*bo)->map;
		nouveau_bo_unmap(*bo);

		if (offset)
			*offset = 0;
	}

	return buf;
}

/*
d152 2
a153 2
get_max_vertices(GLcontext *ctx, const struct _mesa_index_buffer *ib,
		 unsigned n)
d176 5
a189 3
#include "nouveau_vbo_t.c"
#include "nouveau_swtnl_t.c"

d191 1
a191 1
TAG(emit_material)(GLcontext *ctx, struct nouveau_array_state *a,
d194 13
a206 13
	const int attr = a->attr - VERT_ATTRIB_GENERIC0;
	const int state = ((int []) {
				NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
				NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
				NOUVEAU_STATE_MATERIAL_FRONT_DIFFUSE,
				NOUVEAU_STATE_MATERIAL_BACK_DIFFUSE,
				NOUVEAU_STATE_MATERIAL_FRONT_SPECULAR,
				NOUVEAU_STATE_MATERIAL_BACK_SPECULAR,
				NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
				NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
				NOUVEAU_STATE_MATERIAL_FRONT_SHININESS,
				NOUVEAU_STATE_MATERIAL_BACK_SHININESS
			}) [attr];
a211 47
}

static void
TAG(render_prims)(GLcontext *ctx, const struct gl_client_array **arrays,
		  const struct _mesa_prim *prims, GLuint nr_prims,
		  const struct _mesa_index_buffer *ib,
		  GLboolean index_bounds_valid,
		  GLuint min_index, GLuint max_index)
{
	struct nouveau_context *nctx = to_nouveau_context(ctx);

	nouveau_validate_framebuffer(ctx);

	if (nctx->fallback == HWTNL)
		TAG(vbo_render_prims)(ctx, arrays, prims, nr_prims, ib,
				      index_bounds_valid, min_index, max_index);

	if (nctx->fallback == SWTNL)
		_tnl_vbo_draw_prims(ctx, arrays, prims, nr_prims, ib,
				    index_bounds_valid, min_index, max_index);
}

void
TAG(render_init)(GLcontext *ctx)
{
	struct nouveau_render_state *render = to_render_state(ctx);
	struct nouveau_scratch_state *scratch = &render->scratch;
	int ret, i;

	for (i = 0; i < RENDER_SCRATCH_COUNT; i++) {
		ret = nouveau_bo_new(context_dev(ctx),
				     NOUVEAU_BO_MAP | NOUVEAU_BO_GART,
				     0, RENDER_SCRATCH_SIZE, &scratch->bo[i]);
		assert(!ret);
	}

	for (i = 0; i < VERT_ATTRIB_MAX; i++)
		render->map[i] = -1;

	TAG(swtnl_init)(ctx);
	vbo_set_draw_func(ctx, TAG(render_prims));
}

void
TAG(render_destroy)(GLcontext *ctx)
{
	TAG(swtnl_destroy)(ctx);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d103 2
a104 2
static dispatch_t
get_array_dispatch(struct nouveau_array *a)
d107 1
a107 1
		auto void f(struct gl_context *, unsigned int, int, unsigned int);
d109 1
a109 1
		void f(struct gl_context *ctx, unsigned int start, int delta,
d117 1
a117 1
		return f;
d120 1
a120 1
		auto void f(struct gl_context *, unsigned int, int, unsigned int);
d122 1
a122 1
		void f(struct gl_context *ctx, unsigned int start, int delta,
d130 1
a130 1
		return f;
d133 1
a133 1
		auto void f(struct gl_context *, unsigned int, int, unsigned int);
d135 1
a135 1
		void f(struct gl_context *ctx, unsigned int start, int delta,
d144 1
a144 1
		return f;
d149 104
d256 2
a257 2
get_max_vertices(struct gl_context *ctx, const struct _mesa_index_buffer *ib,
		 int n)
a279 5

			default:
				assert(0);
				max_out = 0;
				break;
d289 3
d293 1
a293 1
TAG(emit_material)(struct gl_context *ctx, struct nouveau_array *a,
d296 13
a308 13
	int attr = a->attr - VERT_ATTRIB_GENERIC0;
	int state = ((int []) {
			NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
			NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
			NOUVEAU_STATE_MATERIAL_FRONT_DIFFUSE,
			NOUVEAU_STATE_MATERIAL_BACK_DIFFUSE,
			NOUVEAU_STATE_MATERIAL_FRONT_SPECULAR,
			NOUVEAU_STATE_MATERIAL_BACK_SPECULAR,
			NOUVEAU_STATE_MATERIAL_FRONT_AMBIENT,
			NOUVEAU_STATE_MATERIAL_BACK_AMBIENT,
			NOUVEAU_STATE_MATERIAL_FRONT_SHININESS,
			NOUVEAU_STATE_MATERIAL_BACK_SHININESS
		}) [attr];
d314 47
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d100 5
a104 3
static void
dispatch_l(struct gl_context *ctx, unsigned int start, int delta,
	   unsigned int n)
d106 15
a120 2
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);
d122 4
a125 2
	EMIT_VBO(L, ctx, start, delta, n);
}
d127 4
a130 6
static void
dispatch_i32(struct gl_context *ctx, unsigned int start, int delta,
	     unsigned int n)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);
d132 2
a133 2
	EMIT_VBO(I32, ctx, start, delta, n);
}
d135 4
a138 6
static void
dispatch_i16(struct gl_context *ctx, unsigned int start, int delta,
	     unsigned int n)
{
	struct nouveau_pushbuf *push = context_push(ctx);
	RENDER_LOCALS(ctx);
d140 3
a142 3
	EMIT_VBO(I32, ctx, start, delta, n & 1);
	EMIT_VBO(I16, ctx, start, delta, n & ~1);
}
d144 2
a145 12
/*
 * Select an appropriate dispatch function for the given index buffer.
 */
static dispatch_t
get_array_dispatch(struct nouveau_array *a)
{
	if (!a->fields)
		return dispatch_l;
	else if (a->type == GL_UNSIGNED_INT)
		return dispatch_i32;
	else
		return dispatch_i16;
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d59 1
a59 1
		int _npush = n;						\
d61 3
a63 3
		while (_npush) {						\
			int _npack = MIN2(_npush, MAX_PACKET * MAX_OUT_##out); \
			_npush -= _npack;					\
d65 1
a65 1
			BATCH_PACKET_##out((_npack + MAX_OUT_##out - 1)	\
d67 3
a69 3
			while (_npack) {				\
				int _nout = MIN2(_npack, MAX_OUT_##out);\
				_npack -= _nout;			\
d72 2
a73 2
						  _nout);		\
				start += _nout;				\
@


