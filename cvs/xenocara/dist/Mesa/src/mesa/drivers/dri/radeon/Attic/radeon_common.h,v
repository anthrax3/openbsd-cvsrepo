head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.4;
commitid	TnlogFl9nOv2eaRf;

1.4
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.05.30;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.06.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.16.03;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.56;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.5
log
@remove the now unused Mesa 10.2.9 code
@
text
@#ifndef COMMON_MISC_H
#define COMMON_MISC_H

#include "radeon_common_context.h"
#include "radeon_dma.h"
#include "radeon_texture.h"

void radeonUserClear(struct gl_context *ctx, GLuint mask);
void radeonSetCliprects(radeonContextPtr radeon);
void radeonUpdateScissor( struct gl_context *ctx );
void radeonScissor(struct gl_context *ctx);

extern uint32_t radeonGetAge(radeonContextPtr radeon);

void radeonFlush(struct gl_context *ctx);
void radeonFinish(struct gl_context * ctx);
void radeonEmitState(radeonContextPtr radeon);
GLuint radeonCountStateEmitSize(radeonContextPtr radeon);

void radeon_clear_tris(struct gl_context *ctx, GLbitfield mask);

void radeon_window_moved(radeonContextPtr radeon);
void radeon_draw_buffer(struct gl_context *ctx, struct gl_framebuffer *fb);
void radeonDrawBuffer( struct gl_context *ctx, GLenum mode );
void radeonReadBuffer( struct gl_context *ctx, GLenum mode );
void radeon_viewport(struct gl_context *ctx);
void radeon_fbo_init(struct radeon_context *radeon);
void
radeon_renderbuffer_set_bo(struct radeon_renderbuffer *rb,
			   struct radeon_bo *bo);
struct radeon_renderbuffer *
radeon_create_renderbuffer(mesa_format format, __DRIdrawable *driDrawPriv);

void
radeonReadPixels(struct gl_context * ctx,
				GLint x, GLint y, GLsizei width, GLsizei height,
				GLenum format, GLenum type,
				const struct gl_pixelstore_attrib *pack, GLvoid * pixels);

void radeon_check_front_buffer_rendering(struct gl_context *ctx);
static inline struct radeon_renderbuffer *radeon_renderbuffer(struct gl_renderbuffer *rb)
{
	struct radeon_renderbuffer *rrb = (struct radeon_renderbuffer *)rb;
	radeon_print(RADEON_MEMORY, RADEON_TRACE,
		"%s(rb %p)\n",
		__func__, (void *) rb);
	if (rrb && rrb->base.Base.ClassID == RADEON_RB_CLASS)
		return rrb;
	else
		return NULL;
}

static inline struct radeon_renderbuffer *radeon_get_renderbuffer(struct gl_framebuffer *fb, int att_index)
{
	radeon_print(RADEON_MEMORY, RADEON_TRACE,
		"%s(fb %p, index %d)\n",
		__func__, (void *) fb, att_index);

	if (att_index >= 0)
		return radeon_renderbuffer(fb->Attachment[att_index].Renderbuffer);
	else
		return NULL;
}

static inline struct radeon_renderbuffer *radeon_get_depthbuffer(radeonContextPtr rmesa)
{
	struct radeon_renderbuffer *rrb;
	rrb = radeon_renderbuffer(rmesa->state.depth.rb);
	if (!rrb)
		return NULL;

	return rrb;
}

static inline struct radeon_renderbuffer *radeon_get_colorbuffer(radeonContextPtr rmesa)
{
	struct radeon_renderbuffer *rrb;

	rrb = radeon_renderbuffer(rmesa->state.color.rb);
	if (!rrb)
		return NULL;
	return rrb;
}

#include "radeon_cmdbuf.h"


#endif
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@d11 1
a11 1
void radeonScissor(struct gl_context* ctx, GLint x, GLint y, GLsizei w, GLsizei h);
d26 1
a26 1
void radeon_viewport(struct gl_context *ctx, GLint x, GLint y, GLsizei width, GLsizei height);
d32 1
a32 1
radeon_create_renderbuffer(gl_format format, __DRIdrawable *driDrawPriv);
@


1.2
log
@Merge Mesa 7.10.3
@
text
@a8 1
void radeonRecalcScissorRects(radeonContextPtr radeon);
a12 1
void radeonWaitForIdleLocked(radeonContextPtr radeon);
a13 7
void radeonCopyBuffer( __DRIdrawable *dPriv,
		       const drm_clip_rect_t	  *rect);
void radeonSwapBuffers(__DRIdrawable * dPriv);
void radeonCopySubBuffer(__DRIdrawable * dPriv,
			 int x, int y, int w, int h );

void radeonUpdatePageFlipping(radeonContextPtr rmesa);
a26 4
void radeon_get_cliprects(radeonContextPtr radeon,
			  struct drm_clip_rect **cliprects,
			  unsigned int *num_cliprects,
			  int *x_off, int *y_off);
d46 2
a47 2
		__func__, rb);
	if (rrb && rrb->base.ClassID == RADEON_RB_CLASS)
d57 1
a57 1
		__func__, fb, att_index);
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d8 1
a8 1
void radeonUserClear(GLcontext *ctx, GLuint mask);
d11 2
a12 2
void radeonUpdateScissor( GLcontext *ctx );
void radeonScissor(GLcontext* ctx, GLint x, GLint y, GLsizei w, GLsizei h);
d24 2
a25 2
void radeonFlush(GLcontext *ctx);
void radeonFinish(GLcontext * ctx);
d29 1
a29 1
void radeon_clear_tris(GLcontext *ctx, GLbitfield mask);
d32 4
a35 4
void radeon_draw_buffer(GLcontext *ctx, struct gl_framebuffer *fb);
void radeonDrawBuffer( GLcontext *ctx, GLenum mode );
void radeonReadBuffer( GLcontext *ctx, GLenum mode );
void radeon_viewport(GLcontext *ctx, GLint x, GLint y, GLsizei width, GLsizei height);
d47 7
a53 1
void radeon_check_front_buffer_rendering(GLcontext *ctx);
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d8 1
a8 1
void radeonUserClear(struct gl_context *ctx, GLuint mask);
d11 2
a12 2
void radeonUpdateScissor( struct gl_context *ctx );
void radeonScissor(struct gl_context* ctx, GLint x, GLint y, GLsizei w, GLsizei h);
d24 2
a25 2
void radeonFlush(struct gl_context *ctx);
void radeonFinish(struct gl_context * ctx);
d29 1
a29 1
void radeon_clear_tris(struct gl_context *ctx, GLbitfield mask);
d32 4
a35 4
void radeon_draw_buffer(struct gl_context *ctx, struct gl_framebuffer *fb);
void radeonDrawBuffer( struct gl_context *ctx, GLenum mode );
void radeonReadBuffer( struct gl_context *ctx, GLenum mode );
void radeon_viewport(struct gl_context *ctx, GLint x, GLint y, GLsizei width, GLsizei height);
d47 1
a47 7
void
radeonReadPixels(struct gl_context * ctx,
				GLint x, GLint y, GLsizei width, GLsizei height,
				GLenum format, GLenum type,
				const struct gl_pixelstore_attrib *pack, GLvoid * pixels);

void radeon_check_front_buffer_rendering(struct gl_context *ctx);
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d9 1
d14 1
d16 7
d36 4
d59 2
a60 2
		__func__, (void *) rb);
	if (rrb && rrb->base.Base.ClassID == RADEON_RB_CLASS)
d70 1
a70 1
		__func__, (void *) fb, att_index);
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d11 1
a11 1
void radeonScissor(struct gl_context *ctx);
d26 1
a26 1
void radeon_viewport(struct gl_context *ctx);
d32 1
a32 1
radeon_create_renderbuffer(mesa_format format, __DRIdrawable *driDrawPriv);
@


