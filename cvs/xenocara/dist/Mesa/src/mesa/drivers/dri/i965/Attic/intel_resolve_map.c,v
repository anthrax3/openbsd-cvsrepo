head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	v10_2_3:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.50;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.15.48;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.48;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2015.01.25.14.11.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.3
date	2015.02.20.22.49.03;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "intel_resolve_map.h"

#include <assert.h>
#include <stdlib.h>

/**
 * \brief Set that the miptree slice at (level, layer) needs a resolve.
 *
 * If a map element already exists with the given key, then the value is
 * changed to the given value of \c need.
 */
void
intel_resolve_map_set(struct intel_resolve_map *head,
		      uint32_t level,
		      uint32_t layer,
		      enum gen6_hiz_op need)
{
   struct intel_resolve_map **tail = &head->next;
   struct intel_resolve_map *prev = head;

   while (*tail) {
      if ((*tail)->level == level && (*tail)->layer == layer) {
         (*tail)->need = need;
	 return;
      }
      prev = *tail;
      tail = &(*tail)->next;
   }

   *tail = malloc(sizeof(**tail));
   (*tail)->prev = prev;
   (*tail)->next = NULL;
   (*tail)->level = level;
   (*tail)->layer = layer;
   (*tail)->need = need;
}

/**
 * \brief Get an element from the map.
 * \return null if element is not contained in map.
 */
struct intel_resolve_map*
intel_resolve_map_get(struct intel_resolve_map *head,
		      uint32_t level,
		      uint32_t layer)
{
   struct intel_resolve_map *item = head->next;

   while (item) {
      if (item->level == level && item->layer == layer)
	 break;
      else
	 item = item->next;
   }

   return item;
}

/**
 * \brief Remove and free an element from the map.
 */
void
intel_resolve_map_remove(struct intel_resolve_map *elem)
{
   if (elem->prev)
      elem->prev->next = elem->next;
   if (elem->next)
      elem->next->prev = elem->prev;
   free(elem);
}

/**
 * \brief Remove and free all elements of the map.
 */
void
intel_resolve_map_clear(struct intel_resolve_map *head)
{
   struct intel_resolve_map *next = head->next;
   struct intel_resolve_map *trash;

   while (next) {
      trash = next;
      next = next->next;
      free(trash);
   }

   head->next = NULL;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.4.3
@
text
@d36 1
a36 1
intel_resolve_map_set(struct exec_list *resolve_map,
d41 6
a46 3
   foreach_list_typed(struct intel_resolve_map, map, link, resolve_map) {
      if (map->level == level && map->layer == layer) {
         map->need = need;
d49 2
d53 6
a58 7
   struct intel_resolve_map *m = malloc(sizeof(struct intel_resolve_map));
   exec_node_init(&m->link);
   m->level = level;
   m->layer = layer;
   m->need = need;

   exec_list_push_tail(resolve_map, &m->link);
d65 2
a66 2
struct intel_resolve_map *
intel_resolve_map_get(struct exec_list *resolve_map,
d70 7
a76 3
   foreach_list_typed(struct intel_resolve_map, map, link, resolve_map) {
      if (map->level == level && map->layer == layer)
         return map;
d79 1
a79 1
   return NULL;
d88 4
a91 1
   exec_node_remove(&elem->link);
d99 1
a99 1
intel_resolve_map_clear(struct exec_list *resolve_map)
d101 7
a107 2
   foreach_in_list_safe(struct exec_node, node, resolve_map) {
      free(node);
d110 1
a110 1
   exec_list_make_empty(resolve_map);
@


1.1.1.3
log
@Import Mesa 10.2.9
@
text
@d36 1
a36 1
intel_resolve_map_set(struct intel_resolve_map *head,
d41 3
a43 6
   struct intel_resolve_map **tail = &head->next;
   struct intel_resolve_map *prev = head;

   while (*tail) {
      if ((*tail)->level == level && (*tail)->layer == layer) {
         (*tail)->need = need;
a45 2
      prev = *tail;
      tail = &(*tail)->next;
d48 7
a54 6
   *tail = malloc(sizeof(**tail));
   (*tail)->prev = prev;
   (*tail)->next = NULL;
   (*tail)->level = level;
   (*tail)->layer = layer;
   (*tail)->need = need;
d61 2
a62 2
struct intel_resolve_map*
intel_resolve_map_get(struct intel_resolve_map *head,
d66 3
a68 7
   struct intel_resolve_map *item = head->next;

   while (item) {
      if (item->level == level && item->layer == layer)
	 break;
      else
	 item = item->next;
d71 1
a71 1
   return item;
d80 1
a80 4
   if (elem->prev)
      elem->prev->next = elem->next;
   if (elem->next)
      elem->next->prev = elem->prev;
d88 1
a88 1
intel_resolve_map_clear(struct intel_resolve_map *head)
d90 2
a91 7
   struct intel_resolve_map *next = head->next;
   struct intel_resolve_map *trash;

   while (next) {
      trash = next;
      next = next->next;
      free(trash);
d94 1
a94 1
   head->next = NULL;
@


