head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.49;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.48;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.29;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.37;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#include "brw_fs.h"

class bblock_link : public exec_node {
public:
   bblock_link(bblock_t *block)
      : block(block)
   {
   }

   bblock_t *block;
};

class bblock_t {
public:
   static void* operator new(size_t size, void *ctx)
   {
      void *node;

      node = rzalloc_size(ctx, size);
      assert(node != NULL);

      return node;
   }

   bblock_link *make_list(void *mem_ctx);

   bblock_t();

   void add_successor(void *mem_ctx, bblock_t *successor);

   backend_instruction *start;
   backend_instruction *end;

   int start_ip;
   int end_ip;

   exec_list parents;
   exec_list children;
   int block_num;
};

class cfg_t {
public:
   static void* operator new(size_t size, void *ctx)
   {
      void *node;

      node = rzalloc_size(ctx, size);
      assert(node != NULL);

      return node;
   }

   cfg_t(backend_visitor *v);
   cfg_t(void *mem_ctx, exec_list *instructions);
   ~cfg_t();

   void create(void *mem_ctx, exec_list *instructions);

   bblock_t *new_block();
   void set_next_block(bblock_t *block);
   void make_block_array();

   /** @@{
    *
    * Used while generating the block list.
    */
   bblock_t *cur;
   int ip;
   /** @@} */

   void *mem_ctx;

   /** Ordered list (by ip) of basic blocks */
   exec_list block_list;
   bblock_t **blocks;
   int num_blocks;
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d28 1
a28 3
#include "brw_shader.h"

class bblock_t;
d42 11
a52 1
   DECLARE_RALLOC_CXX_OPERATORS(bblock_t)
a56 1
   void dump(backend_visitor *v);
a66 10

   /* If the current basic block ends in an IF, ELSE, or ENDIF instruction,
    * these pointers will hold the locations of the other associated control
    * flow instructions.
    *
    * Otherwise they are NULL.
    */
   backend_instruction *if_inst;
   backend_instruction *else_inst;
   backend_instruction *endif_inst;
d71 9
a79 1
   DECLARE_RALLOC_CXX_OPERATORS(cfg_t)
d81 2
a82 1
   cfg_t(exec_list *instructions);
d85 2
d88 1
a88 1
   void set_next_block(bblock_t **cur, bblock_t *block, int ip);
d91 7
a97 1
   void dump(backend_visitor *v);
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@a27 4
#pragma once
#ifndef BRW_CFG_H
#define BRW_CFG_H

d30 1
a30 5
struct bblock_t;

struct bblock_link {
#ifdef __cplusplus
   DECLARE_RALLOC_CXX_OPERATORS(bblock_link)
d32 2
a37 1
#endif
d39 1
a39 2
   struct exec_node link;
   struct bblock_t *block;
d42 2
a43 4
struct backend_instruction;

struct bblock_t {
#ifdef __cplusplus
d46 1
a46 1
   explicit bblock_t(cfg_t *cfg);
d49 1
a49 22
   bool is_predecessor_of(const bblock_t *block) const;
   bool is_successor_of(const bblock_t *block) const;
   bool can_combine_with(const bblock_t *that) const;
   void combine_with(bblock_t *that);
   void dump(backend_visitor *v) const;

   backend_instruction *start();
   const backend_instruction *start() const;
   backend_instruction *end();
   const backend_instruction *end() const;

   bblock_t *next();
   const bblock_t *next() const;
   bblock_t *prev();
   const bblock_t *prev() const;

   bool starts_with_control_flow() const;
   bool ends_with_control_flow() const;

   backend_instruction *first_non_control_flow_inst();
   backend_instruction *last_non_control_flow_inst();
#endif
d51 2
a52 2
   struct exec_node link;
   struct cfg_t *cfg;
d57 13
a69 4
   struct exec_list instructions;
   struct exec_list parents;
   struct exec_list children;
   int num;
d72 2
a73 168
static inline struct backend_instruction *
bblock_start(struct bblock_t *block)
{
   return (struct backend_instruction *)exec_list_get_head(&block->instructions);
}

static inline const struct backend_instruction *
bblock_start_const(const struct bblock_t *block)
{
   return (const struct backend_instruction *)exec_list_get_head_const(&block->instructions);
}

static inline struct backend_instruction *
bblock_end(struct bblock_t *block)
{
   return (struct backend_instruction *)exec_list_get_tail(&block->instructions);
}

static inline const struct backend_instruction *
bblock_end_const(const struct bblock_t *block)
{
   return (const struct backend_instruction *)exec_list_get_tail_const(&block->instructions);
}

static inline struct bblock_t *
bblock_next(struct bblock_t *block)
{
   return (struct bblock_t *)block->link.next;
}

static inline const struct bblock_t *
bblock_next_const(const struct bblock_t *block)
{
   return (const struct bblock_t *)block->link.next;
}

static inline struct bblock_t *
bblock_prev(struct bblock_t *block)
{
   return (struct bblock_t *)block->link.prev;
}

static inline const struct bblock_t *
bblock_prev_const(const struct bblock_t *block)
{
   return (const struct bblock_t *)block->link.prev;
}

static inline bool
bblock_starts_with_control_flow(const struct bblock_t *block)
{
   enum opcode op = bblock_start_const(block)->opcode;
   return op == BRW_OPCODE_DO || op == BRW_OPCODE_ENDIF;
}

static inline bool
bblock_ends_with_control_flow(const struct bblock_t *block)
{
   enum opcode op = bblock_end_const(block)->opcode;
   return op == BRW_OPCODE_IF ||
          op == BRW_OPCODE_ELSE ||
          op == BRW_OPCODE_WHILE ||
          op == BRW_OPCODE_BREAK ||
          op == BRW_OPCODE_CONTINUE;
}

static inline struct backend_instruction *
bblock_first_non_control_flow_inst(struct bblock_t *block)
{
   struct backend_instruction *inst = bblock_start(block);
   if (bblock_starts_with_control_flow(block))
#ifdef __cplusplus
      inst = (struct backend_instruction *)inst->next;
#else
      inst = (struct backend_instruction *)inst->link.next;
#endif
   return inst;
}

static inline struct backend_instruction *
bblock_last_non_control_flow_inst(struct bblock_t *block)
{
   struct backend_instruction *inst = bblock_end(block);
   if (bblock_ends_with_control_flow(block))
#ifdef __cplusplus
      inst = (struct backend_instruction *)inst->prev;
#else
      inst = (struct backend_instruction *)inst->link.prev;
#endif
   return inst;
}

#ifdef __cplusplus
inline backend_instruction *
bblock_t::start()
{
   return bblock_start(this);
}

inline const backend_instruction *
bblock_t::start() const
{
   return bblock_start_const(this);
}

inline backend_instruction *
bblock_t::end()
{
   return bblock_end(this);
}

inline const backend_instruction *
bblock_t::end() const
{
   return bblock_end_const(this);
}

inline bblock_t *
bblock_t::next()
{
   return bblock_next(this);
}

inline const bblock_t *
bblock_t::next() const
{
   return bblock_next_const(this);
}

inline bblock_t *
bblock_t::prev()
{
   return bblock_prev(this);
}

inline const bblock_t *
bblock_t::prev() const
{
   return bblock_prev_const(this);
}

inline bool
bblock_t::starts_with_control_flow() const
{
   return bblock_starts_with_control_flow(this);
}

inline bool
bblock_t::ends_with_control_flow() const
{
   return bblock_ends_with_control_flow(this);
}

inline backend_instruction *
bblock_t::first_non_control_flow_inst()
{
   return bblock_first_non_control_flow_inst(this);
}

inline backend_instruction *
bblock_t::last_non_control_flow_inst()
{
   return bblock_last_non_control_flow_inst(this);
}
#endif

struct cfg_t {
#ifdef __cplusplus
a78 2
   void remove_block(bblock_t *block);

d83 2
a84 2
   void dump(backend_visitor *v) const;
#endif
d88 2
a89 2
   struct exec_list block_list;
   struct bblock_t **blocks;
a91 46

/* Note that this is implemented with a double for loop -- break will
 * break from the inner loop only!
 */
#define foreach_block_and_inst(__block, __type, __inst, __cfg) \
   foreach_block (__block, __cfg)                              \
      foreach_inst_in_block (__type, __inst, __block)

/* Note that this is implemented with a double for loop -- break will
 * break from the inner loop only!
 */
#define foreach_block_and_inst_safe(__block, __type, __inst, __cfg) \
   foreach_block_safe (__block, __cfg)                              \
      foreach_inst_in_block_safe (__type, __inst, __block)

#define foreach_block(__block, __cfg)                          \
   foreach_list_typed (bblock_t, __block, link, &(__cfg)->block_list)

#define foreach_block_safe(__block, __cfg)                     \
   foreach_list_typed_safe (bblock_t, __block, link, &(__cfg)->block_list)

#define foreach_inst_in_block(__type, __inst, __block)         \
   foreach_in_list(__type, __inst, &(__block)->instructions)

#define foreach_inst_in_block_safe(__type, __inst, __block)    \
   for (__type *__inst = (__type *)__block->instructions.head, \
               *__next = (__type *)__inst->next,               \
               *__end = (__type *)__block->instructions.tail;  \
        __next != __end;                                       \
        __inst = __next,                                       \
        __next = (__type *)__next->next)

#define foreach_inst_in_block_reverse(__type, __inst, __block) \
   foreach_in_list_reverse(__type, __inst, &(__block)->instructions)

#define foreach_inst_in_block_starting_from(__type, __scan_inst, __inst, __block) \
   for (__type *__scan_inst = (__type *)__inst->next;          \
        !__scan_inst->is_tail_sentinel();                      \
        __scan_inst = (__type *)__scan_inst->next)

#define foreach_inst_in_block_reverse_starting_from(__type, __scan_inst, __inst, __block) \
   for (__type *__scan_inst = (__type *)__inst->prev;          \
        !__scan_inst->is_head_sentinel();                      \
        __scan_inst = (__type *)__scan_inst->prev)

#endif /* BRW_CFG_H */
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d28 4
d34 5
a38 1
class bblock_t;
a39 2
class bblock_link : public exec_node {
public:
d44 1
d46 2
a47 1
   bblock_t *block;
d50 4
a53 2
class bblock_t {
public:
d56 1
a56 1
   bblock_t();
d59 22
a80 1
   void dump(backend_visitor *v);
d82 2
a83 2
   backend_instruction *start;
   backend_instruction *end;
d88 4
a91 13
   exec_list parents;
   exec_list children;
   int block_num;

   /* If the current basic block ends in an IF, ELSE, or ENDIF instruction,
    * these pointers will hold the locations of the other associated control
    * flow instructions.
    *
    * Otherwise they are NULL.
    */
   backend_instruction *if_inst;
   backend_instruction *else_inst;
   backend_instruction *endif_inst;
d94 168
a261 2
class cfg_t {
public:
d267 2
d273 2
a274 2
   void dump(backend_visitor *v);

d278 2
a279 2
   exec_list block_list;
   bblock_t **blocks;
d282 46
@


