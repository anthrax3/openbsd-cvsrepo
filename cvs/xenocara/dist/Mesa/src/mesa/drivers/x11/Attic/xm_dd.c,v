head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.23.05.17.51;	author jsg;	state dead;
branches;
next	1.10;
commitid	TnlogFl9nOv2eaRf;

1.10
date	2014.07.09.21.09.00;	author jsg;	state Exp;
branches;
next	1.9;
commitid	WPD6rgPryPkvXOr9;

1.9
date	2013.09.05.14.06.11;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.17.13.58.17;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.23.13.37.41;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.22.20.06.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.17.20.26.41;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.14.58.20;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.48;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.52.03;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.52.03;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.57.01;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.30.28;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.45;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.16.13;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.34.57;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.11
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file xm_dd.h
 * General device driver functions for Xlib driver.
 */

#include "glxheader.h"
#include "main/bufferobj.h"
#include "main/context.h"
#include "main/colormac.h"
#include "main/fbobject.h"
#include "main/macros.h"
#include "main/mipmap.h"
#include "main/image.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/pbo.h"
#include "main/texformat.h"
#include "swrast/swrast.h"
#include "swrast/s_context.h"
#include "swrast_setup/swrast_setup.h"
#include "tnl/tnl.h"
#include "tnl/t_context.h"
#include "drivers/common/meta.h"
#include "xmesaP.h"


static void
finish_or_flush( struct gl_context *ctx )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   if (xmesa) {
      mtx_lock(&_xmesa_lock);
      XSync( xmesa->display, False );
      mtx_unlock(&_xmesa_lock);
   }
}


/* Implements glColorMask() */
static void
color_mask(struct gl_context *ctx,
           GLboolean rmask, GLboolean gmask, GLboolean bmask, GLboolean amask)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   XMesaBuffer xmbuf;
   const int xclass = xmesa->xm_visual->visualType;
   (void) amask;

   if (_mesa_is_user_fbo(ctx->DrawBuffer))
      return;

   xmbuf = XMESA_BUFFER(ctx->DrawBuffer);

   if (xclass == GLX_TRUE_COLOR || xclass == GLX_DIRECT_COLOR) {
      unsigned long m;
      if (rmask && gmask && bmask) {
         m = ((unsigned long)~0L);
      }
      else {
         m = 0;
         if (rmask)   m |= GET_REDMASK(xmesa->xm_visual);
         if (gmask)   m |= GET_GREENMASK(xmesa->xm_visual);
         if (bmask)   m |= GET_BLUEMASK(xmesa->xm_visual);
      }
      XMesaSetPlaneMask( xmesa->display, xmbuf->cleargc, m );
   }
}



/**********************************************************************/
/*** glClear implementations                                        ***/
/**********************************************************************/


/**
 * Clear the front or back color buffer, if it's implemented with a pixmap.
 */
static void
clear_pixmap(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
             GLint x, GLint y, GLint width, GLint height)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);

   assert(xmbuf);
   assert(xrb->pixmap);
   assert(xmesa);
   assert(xmesa->display);
   assert(xrb->pixmap);
   assert(xmbuf->cleargc);

   XMesaFillRectangle( xmesa->display, xrb->pixmap, xmbuf->cleargc,
                       x, xrb->Base.Base.Height - y - height,
                       width, height );
}


static void
clear_16bit_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                    GLint x, GLint y, GLint width, GLint height)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   GLuint pixel = (GLuint) xmesa->clearpixel;
   GLint i, j;

   if (xmesa->swapbytes) {
      pixel = ((pixel >> 8) & 0x00ff) | ((pixel << 8) & 0xff00);
   }

   for (j = 0; j < height; j++) {
      GLushort *ptr2 = PIXEL_ADDR2(xrb, x, y + j);
      for (i = 0; i < width; i++) {
         ptr2[i] = pixel;
      }
   }
}


/* Optimized code provided by Nozomi Ytow <noz@@xfree86.org> */
static void
clear_24bit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                   GLint x, GLint y, GLint width, GLint height)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   const GLubyte r = xmesa->clearcolor[0];
   const GLubyte g = xmesa->clearcolor[1];
   const GLubyte b = xmesa->clearcolor[2];

   if (r == g && g == b) {
      /* same value for all three components (gray) */
      GLint j;
      for (j = 0; j < height; j++) {
         bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
         memset(ptr3, r, 3 * width);
      }
   }
   else {
      /* non-gray clear color */
      GLint i, j;
      for (j = 0; j < height; j++) {
         bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
         for (i = 0; i < width; i++) {
            ptr3->r = r;
            ptr3->g = g;
            ptr3->b = b;
            ptr3++;
         }
      }
   }
}


static void
clear_32bit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                   GLint x, GLint y, GLint width, GLint height)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   register GLuint pixel = (GLuint) xmesa->clearpixel;

   if (!xrb->ximage)
      return;

   if (xmesa->swapbytes) {
      pixel = ((pixel >> 24) & 0x000000ff)
            | ((pixel >> 8)  & 0x0000ff00)
            | ((pixel << 8)  & 0x00ff0000)
            | ((pixel << 24) & 0xff000000);
   }

   if (width == xrb->Base.Base.Width && height == xrb->Base.Base.Height) {
      /* clearing whole buffer */
      const GLuint n = xrb->Base.Base.Width * xrb->Base.Base.Height;
      GLuint *ptr4 = (GLuint *) xrb->ximage->data;
      if (pixel == 0) {
         /* common case */
         memset(ptr4, pixel, 4 * n);
      }
      else {
         GLuint i;
         for (i = 0; i < n; i++)
            ptr4[i] = pixel;
      }
   }
   else {
      /* clearing scissored region */
      GLint i, j;
      for (j = 0; j < height; j++) {
         GLuint *ptr4 = PIXEL_ADDR4(xrb, x, y + j);
         for (i = 0; i < width; i++) {
            ptr4[i] = pixel;
         }
      }
   }
}


static void
clear_nbit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                  GLint x, GLint y, GLint width, GLint height)
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   XMesaImage *img = xrb->ximage;
   GLint i, j;

   /* TODO: optimize this */
   y = YFLIP(xrb, y);
   for (j = 0; j < height; j++) {
      for (i = 0; i < width; i++) {
         XMesaPutPixel(img, x+i, y-j, xmesa->clearpixel);
      }
   }
}



static void
clear_buffers(struct gl_context *ctx, GLbitfield buffers)
{
   if (_mesa_is_winsys_fbo(ctx->DrawBuffer)) {
      /* this is a window system framebuffer */
      const GLuint *colorMask = (GLuint *) &ctx->Color.ColorMask[0];
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaBuffer b = XMESA_BUFFER(ctx->DrawBuffer);
      const GLint x = ctx->DrawBuffer->_Xmin;
      const GLint y = ctx->DrawBuffer->_Ymin;
      const GLint width = ctx->DrawBuffer->_Xmax - x;
      const GLint height = ctx->DrawBuffer->_Ymax - y;

      _mesa_unclamped_float_rgba_to_ubyte(xmesa->clearcolor,
                                          ctx->Color.ClearColor.f);
      xmesa->clearpixel = xmesa_color_to_pixel(ctx,
                                               xmesa->clearcolor[0],
                                               xmesa->clearcolor[1],
                                               xmesa->clearcolor[2],
                                               xmesa->clearcolor[3],
                                               xmesa->xm_visual->undithered_pf);
      XMesaSetForeground(xmesa->display, b->cleargc, xmesa->clearpixel);

      /* we can't handle color or index masking */
      if (*colorMask == 0xffffffff && ctx->Color.IndexMask == 0xffffffff) {
         if (buffers & BUFFER_BIT_FRONT_LEFT) {
            /* clear front color buffer */
            struct gl_renderbuffer *frontRb
               = ctx->DrawBuffer->Attachment[BUFFER_FRONT_LEFT].Renderbuffer;
            if (b->frontxrb == xmesa_renderbuffer(frontRb)) {
               /* renderbuffer is not wrapped - great! */
               b->frontxrb->clearFunc(ctx, b->frontxrb, x, y, width, height);
               buffers &= ~BUFFER_BIT_FRONT_LEFT;
            }
            else {
               /* we can't directly clear an alpha-wrapped color buffer */
            }
         }
         if (buffers & BUFFER_BIT_BACK_LEFT) {
            /* clear back color buffer */
            struct gl_renderbuffer *backRb
               = ctx->DrawBuffer->Attachment[BUFFER_BACK_LEFT].Renderbuffer;
            if (b->backxrb == xmesa_renderbuffer(backRb)) {
               /* renderbuffer is not wrapped - great! */
               b->backxrb->clearFunc(ctx, b->backxrb, x, y, width, height);
               buffers &= ~BUFFER_BIT_BACK_LEFT;
            }
         }
      }
   }
   if (buffers)
      _swrast_Clear(ctx, buffers);
}


/* XXX these functions haven't been tested in the Xserver environment */


/**
 * Check if we can do an optimized glDrawPixels into an 8R8G8B visual.
 */
static GLboolean
can_do_DrawPixels_8R8G8B(struct gl_context *ctx, GLenum format, GLenum type)
{
   if (format == GL_BGRA &&
       type == GL_UNSIGNED_BYTE &&
       ctx->DrawBuffer &&
       _mesa_is_winsys_fbo(ctx->DrawBuffer) &&
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->_ImageTransferState == 0 /* no color tables, scale/bias, etc */) {
      const SWcontext *swrast = SWRAST_CONTEXT(ctx);

      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
      if ((swrast->_RasterMask & ~CLIP_BIT) == 0) /* no blend, z-test, etc */ {
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         if (rb) {
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb);
            if (xrb &&
                xrb->pixmap && /* drawing to pixmap or window */
                _mesa_get_format_bits(xrb->Base.Base.Format, GL_ALPHA_BITS) == 0) {
               return GL_TRUE;
            }
         }
      }
   }
   return GL_FALSE;
}


/**
 * This function implements glDrawPixels() with an XPutImage call when
 * drawing to the front buffer (X Window drawable).
 * The image format must be GL_BGRA to match the PF_8R8G8B pixel format.
 */
static void
xmesa_DrawPixels_8R8G8B( struct gl_context *ctx,
                         GLint x, GLint y, GLsizei width, GLsizei height,
                         GLenum format, GLenum type,
                         const struct gl_pixelstore_attrib *unpack,
                         const GLvoid *pixels )
{
   if (can_do_DrawPixels_8R8G8B(ctx, format, type)) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
      int dstX = x;
      int dstY = y;
      int w = width;
      int h = height;

      if (swrast->NewState)
         _swrast_validate_derived( ctx );

      if (_mesa_is_bufferobj(unpack->BufferObj)) {
         /* unpack from PBO */
         GLubyte *buf;
         if (!_mesa_validate_pbo_access(2, unpack, width, height, 1,
                                        format, type, INT_MAX, pixels)) {
            _mesa_error(ctx, GL_INVALID_OPERATION,
                        "glDrawPixels(invalid PBO access)");
            return;
         }
         buf = (GLubyte *) ctx->Driver.MapBufferRange(ctx, 0,
						      unpack->BufferObj->Size,
						      GL_MAP_READ_BIT,
						      unpack->BufferObj,
                                                      MAP_INTERNAL);
         if (!buf) {
            return; /* error */
         }
         pixels = ADD_POINTERS(buf, pixels);
      }

      if (_mesa_clip_drawpixels(ctx, &dstX, &dstY, &w, &h, &clippedUnpack)) {
         const XMesaContext xmesa = XMESA_CONTEXT(ctx);
         XMesaDisplay *dpy = xmesa->xm_visual->display;
         XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
         const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
         struct xmesa_renderbuffer *xrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
         const int srcX = clippedUnpack.SkipPixels;
         const int srcY = clippedUnpack.SkipRows;
         const int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;

         ASSERT(xmesa->xm_visual->dithered_pf == PF_8R8G8B);
         ASSERT(xmesa->xm_visual->undithered_pf == PF_8R8G8B);
         ASSERT(dpy);
         ASSERT(gc);

         /* This is a little tricky since all coordinates up to now have
          * been in the OpenGL bottom-to-top orientation.  X is top-to-bottom
          * so we have to carefully compute the Y coordinates/addresses here.
          */
         memset(&ximage, 0, sizeof(XMesaImage));
         ximage.width = width;
         ximage.height = height;
         ximage.format = ZPixmap;
         ximage.data = (char *) pixels
            + ((srcY + h - 1) * rowLength + srcX) * 4;
         ximage.byte_order = LSBFirst;
         ximage.bitmap_unit = 32;
         ximage.bitmap_bit_order = LSBFirst;
         ximage.bitmap_pad = 32;
         ximage.depth = 32;
         ximage.bits_per_pixel = 32;
         ximage.bytes_per_line = -rowLength * 4; /* negative to flip image */
         /* it seems we don't need to set the ximage.red/green/blue_mask fields */
         /* flip Y axis for dest position */
         dstY = YFLIP(xrb, dstY) - h + 1;
         XPutImage(dpy, xrb->pixmap, gc, &ximage, 0, 0, dstX, dstY, w, h);
      }

      if (_mesa_is_bufferobj(unpack->BufferObj)) {
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj, MAP_INTERNAL);
      }
   }
   else {
      /* software fallback */
      _swrast_DrawPixels(ctx, x, y, width, height,
                         format, type, unpack, pixels);
   }
}



/**
 * Check if we can do an optimized glDrawPixels into an 5R6G5B visual.
 */
static GLboolean
can_do_DrawPixels_5R6G5B(struct gl_context *ctx, GLenum format, GLenum type)
{
   if (format == GL_RGB &&
       type == GL_UNSIGNED_SHORT_5_6_5 &&
       !ctx->Color.DitherFlag &&  /* no dithering */
       ctx->DrawBuffer &&
       _mesa_is_winsys_fbo(ctx->DrawBuffer) &&
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->_ImageTransferState == 0 /* no color tables, scale/bias, etc */) {
      const SWcontext *swrast = SWRAST_CONTEXT(ctx);

      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
      if ((swrast->_RasterMask & ~CLIP_BIT) == 0) /* no blend, z-test, etc */ {
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         if (rb) {
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb);
            if (xrb &&
                xrb->pixmap && /* drawing to pixmap or window */
                _mesa_get_format_bits(xrb->Base.Base.Format, GL_ALPHA_BITS) == 0) {
               return GL_TRUE;
            }
         }
      }
   }
   return GL_FALSE;
}


/**
 * This function implements glDrawPixels() with an XPutImage call when
 * drawing to the front buffer (X Window drawable).  The image format
 * must be GL_RGB and image type must be GL_UNSIGNED_SHORT_5_6_5 to
 * match the PF_5R6G5B pixel format.
 */
static void
xmesa_DrawPixels_5R6G5B( struct gl_context *ctx,
                         GLint x, GLint y, GLsizei width, GLsizei height,
                         GLenum format, GLenum type,
                         const struct gl_pixelstore_attrib *unpack,
                         const GLvoid *pixels )
{
   if (can_do_DrawPixels_5R6G5B(ctx, format, type)) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
      int dstX = x;
      int dstY = y;
      int w = width;
      int h = height;

      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
      if (_mesa_is_bufferobj(unpack->BufferObj)) {
         /* unpack from PBO */
         GLubyte *buf;
         if (!_mesa_validate_pbo_access(2, unpack, width, height, 1,
                                        format, type, INT_MAX, pixels)) {
            _mesa_error(ctx, GL_INVALID_OPERATION,
                        "glDrawPixels(invalid PBO access)");
            return;
         }
         buf = (GLubyte *) ctx->Driver.MapBufferRange(ctx, 0,
						      unpack->BufferObj->Size,
						      GL_MAP_READ_BIT,
						      unpack->BufferObj,
                                                      MAP_INTERNAL);
         if (!buf) {
            return; /* error */
         }
         pixels = ADD_POINTERS(buf, pixels);
      }

      if (_mesa_clip_drawpixels(ctx, &dstX, &dstY, &w, &h, &clippedUnpack)) {
         const XMesaContext xmesa = XMESA_CONTEXT(ctx);
         XMesaDisplay *dpy = xmesa->xm_visual->display;
         XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
         const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
         struct xmesa_renderbuffer *xrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
         const int srcX = clippedUnpack.SkipPixels;
         const int srcY = clippedUnpack.SkipRows;
         const int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;

         ASSERT(xmesa->xm_visual->undithered_pf == PF_5R6G5B);
         ASSERT(dpy);
         ASSERT(gc);

         /* This is a little tricky since all coordinates up to now have
          * been in the OpenGL bottom-to-top orientation.  X is top-to-bottom
          * so we have to carefully compute the Y coordinates/addresses here.
          */
         memset(&ximage, 0, sizeof(XMesaImage));
         ximage.width = width;
         ximage.height = height;
         ximage.format = ZPixmap;
         ximage.data = (char *) pixels
            + ((srcY + h - 1) * rowLength + srcX) * 2;
         ximage.byte_order = LSBFirst;
         ximage.bitmap_unit = 16;
         ximage.bitmap_bit_order = LSBFirst;
         ximage.bitmap_pad = 16;
         ximage.depth = 16;
         ximage.bits_per_pixel = 16;
         ximage.bytes_per_line = -rowLength * 2; /* negative to flip image */
         /* it seems we don't need to set the ximage.red/green/blue_mask fields */
         /* flip Y axis for dest position */
         dstY = YFLIP(xrb, dstY) - h + 1;
         XPutImage(dpy, xrb->pixmap, gc, &ximage, 0, 0, dstX, dstY, w, h);
      }

      if (unpack->BufferObj->Name) {
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj, MAP_INTERNAL);
      }
   }
   else {
      /* software fallback */
      _swrast_DrawPixels(ctx, x, y, width, height,
                         format, type, unpack, pixels);
   }
}


/**
 * Determine if we can do an optimized glCopyPixels.
 */
static GLboolean
can_do_CopyPixels(struct gl_context *ctx, GLenum type)
{
   if (type == GL_COLOR &&
       ctx->_ImageTransferState == 0 &&  /* no color tables, scale/bias, etc */
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->Color.DrawBuffer[0] == GL_FRONT &&  /* copy to front buf */
       ctx->Pixel.ReadBuffer == GL_FRONT &&    /* copy from front buf */
       ctx->ReadBuffer->_ColorReadBuffer &&
       ctx->DrawBuffer->_ColorDrawBuffers[0]) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );

      if (swrast->NewState)
         _swrast_validate_derived( ctx );

      if ((swrast->_RasterMask & ~CLIP_BIT) == 0x0 &&
          ctx->ReadBuffer &&
          ctx->ReadBuffer->_ColorReadBuffer &&
          ctx->DrawBuffer &&
          ctx->DrawBuffer->_ColorDrawBuffers[0]) {
         struct xmesa_renderbuffer *srcXrb
            = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
         struct xmesa_renderbuffer *dstXrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
         if (srcXrb->pixmap && dstXrb->pixmap) {
            return GL_TRUE;
         }
      }
   }
   return GL_FALSE;
}


/**
 * Implement glCopyPixels for the front color buffer (or back buffer Pixmap)
 * for the color buffer.  Don't support zooming, pixel transfer, etc.
 * We do support copying from one window to another, ala glXMakeCurrentRead.
 */
static void
xmesa_CopyPixels( struct gl_context *ctx,
                  GLint srcx, GLint srcy, GLsizei width, GLsizei height,
                  GLint destx, GLint desty, GLenum type )
{
   if (can_do_CopyPixels(ctx, type)) {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaDisplay *dpy = xmesa->xm_visual->display;
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
      struct xmesa_renderbuffer *srcXrb
         = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
      struct xmesa_renderbuffer *dstXrb
         = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);

      ASSERT(dpy);
      ASSERT(gc);

      /* Note: we don't do any special clipping work here.  We could,
       * but X will do it for us.
       */
      srcy = YFLIP(srcXrb, srcy) - height + 1;
      desty = YFLIP(dstXrb, desty) - height + 1;
      XCopyArea(dpy, srcXrb->pixmap, dstXrb->pixmap, gc,
                srcx, srcy, width, height, destx, desty);
   }
   else {
      _swrast_CopyPixels(ctx, srcx, srcy, width, height, destx, desty, type );
   }
}




/*
 * Every driver should implement a GetString function in order to
 * return a meaningful GL_RENDERER string.
 */
static const GLubyte *
get_string( struct gl_context *ctx, GLenum name )
{
   (void) ctx;
   switch (name) {
      case GL_RENDERER:
         return (const GLubyte *) "Mesa X11";
      case GL_VENDOR:
         return NULL;
      default:
         return NULL;
   }
}


/*
 * We implement the glEnable function only because we care about
 * dither enable/disable.
 */
static void
enable( struct gl_context *ctx, GLenum pname, GLboolean state )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);

   switch (pname) {
      case GL_DITHER:
         if (state)
            xmesa->pixelformat = xmesa->xm_visual->dithered_pf;
         else
            xmesa->pixelformat = xmesa->xm_visual->undithered_pf;
         break;
      default:
         ;  /* silence compiler warning */
   }
}


/**
 * Called when the driver should update its state, based on the new_state
 * flags.
 */
void
xmesa_update_state( struct gl_context *ctx, GLbitfield new_state )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);

   /* Propagate statechange information to swrast and swrast_setup
    * modules.  The X11 driver has no internal GL-dependent state.
    */
   _swrast_InvalidateState( ctx, new_state );
   _tnl_InvalidateState( ctx, new_state );
   _vbo_InvalidateState( ctx, new_state );
   _swsetup_InvalidateState( ctx, new_state );

   if (_mesa_is_user_fbo(ctx->DrawBuffer))
      return;

   /*
    * GL_DITHER, GL_READ/DRAW_BUFFER, buffer binding state, etc. effect
    * renderbuffer span/clear funcs.
    * Check _NEW_COLOR to detect dither enable/disable.
    */
   if (new_state & (_NEW_COLOR | _NEW_BUFFERS)) {
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      struct xmesa_renderbuffer *front_xrb, *back_xrb;

      front_xrb = xmbuf->frontxrb;
      if (front_xrb) {
         front_xrb->clearFunc = clear_pixmap;
      }

      back_xrb = xmbuf->backxrb;
      if (back_xrb) {
         if (xmbuf->backxrb->pixmap) {
            back_xrb->clearFunc = clear_pixmap;
         }
         else {
            switch (xmesa->xm_visual->BitsPerPixel) {
            case 16:
               back_xrb->clearFunc = clear_16bit_ximage;
               break;
            case 24:
               back_xrb->clearFunc = clear_24bit_ximage;
               break;
            case 32:
               back_xrb->clearFunc = clear_32bit_ximage;
               break;
            default:
               back_xrb->clearFunc = clear_nbit_ximage;
               break;
            }
         }
      }
   }
}


/**
 * Called by glViewport.
 * This is a good time for us to poll the current X window size and adjust
 * our renderbuffers to match the current window size.
 * Remember, we have no opportunity to respond to conventional
 * X Resize/StructureNotify events since the X driver has no event loop.
 * Thus, we poll.
 * Note that this trick isn't fool-proof.  If the application never calls
 * glViewport, our notion of the current window size may be incorrect.
 * That problem led to the GLX_MESA_resize_buffers extension.
 */
static void
xmesa_viewport(struct gl_context *ctx)
{
   XMesaContext xmctx = XMESA_CONTEXT(ctx);
   XMesaBuffer xmdrawbuf = XMESA_BUFFER(ctx->WinSysDrawBuffer);
   XMesaBuffer xmreadbuf = XMESA_BUFFER(ctx->WinSysReadBuffer);
   xmesa_check_and_update_buffer_size(xmctx, xmdrawbuf);
   xmesa_check_and_update_buffer_size(xmctx, xmreadbuf);
}


#if ENABLE_EXT_timer_query

/*
 * The GL_EXT_timer_query extension is not enabled for the XServer
 * indirect renderer.  Not sure about how/if wrapping of gettimeofday()
 * is done, etc.
 */

struct xmesa_query_object
{
   struct gl_query_object Base;
   struct timeval StartTime;
};


static struct gl_query_object *
xmesa_new_query_object(struct gl_context *ctx, GLuint id)
{
   struct xmesa_query_object *q = CALLOC_STRUCT(xmesa_query_object);
   if (q) {
      q->Base.Id = id;
      q->Base.Ready = GL_TRUE;
   }
   return &q->Base;
}


static void
xmesa_begin_query(struct gl_context *ctx, struct gl_query_object *q)
{
   if (q->Target == GL_TIME_ELAPSED_EXT) {
      struct xmesa_query_object *xq = (struct xmesa_query_object *) q;
      (void) gettimeofday(&xq->StartTime, NULL);
   }
}


/**
 * Return the difference between the two given times in microseconds.
 */
static GLuint64EXT
time_diff(const struct timeval *t0, const struct timeval *t1)
{
   GLuint64EXT seconds0 = t0->tv_sec & 0xff;  /* 0 .. 255 seconds */
   GLuint64EXT seconds1 = t1->tv_sec & 0xff;  /* 0 .. 255 seconds */
   GLuint64EXT nanosec0 = (seconds0 * 1000000 + t0->tv_usec) * 1000;
   GLuint64EXT nanosec1 = (seconds1 * 1000000 + t1->tv_usec) * 1000;
   return nanosec1 - nanosec0;
}


static void
xmesa_end_query(struct gl_context *ctx, struct gl_query_object *q)
{
   if (q->Target == GL_TIME_ELAPSED_EXT) {
      struct xmesa_query_object *xq = (struct xmesa_query_object *) q;
      struct timeval endTime;
      (void) gettimeofday(&endTime, NULL);
      /* result is in nanoseconds! */
      q->Result = time_diff(&xq->StartTime, &endTime);
   }
   q->Ready = GL_TRUE;
}

#endif /* ENABLE_timer_query */


/**
 * Initialize the device driver function table with the functions
 * we implement in this driver.
 */
void
xmesa_init_driver_functions( XMesaVisual xmvisual,
                             struct dd_function_table *driver )
{
   driver->GetString = get_string;
   driver->UpdateState = xmesa_update_state;
   driver->Flush = finish_or_flush;
   driver->Finish = finish_or_flush;
   driver->ColorMask = color_mask;
   driver->Enable = enable;
   driver->Viewport = xmesa_viewport;
   if (TEST_META_FUNCS) {
      driver->Clear = _mesa_meta_Clear;
      driver->CopyPixels = _mesa_meta_CopyPixels;
      driver->BlitFramebuffer = _mesa_meta_and_swrast_BlitFramebuffer;
      driver->DrawPixels = _mesa_meta_DrawPixels;
      driver->Bitmap = _mesa_meta_Bitmap;
   }
   else {
      driver->Clear = clear_buffers;
      driver->CopyPixels = xmesa_CopyPixels;
      if (xmvisual->undithered_pf == PF_8R8G8B &&
          xmvisual->dithered_pf == PF_8R8G8B &&
          xmvisual->BitsPerPixel == 32) {
         driver->DrawPixels = xmesa_DrawPixels_8R8G8B;
      }
      else if (xmvisual->undithered_pf == PF_5R6G5B) {
         driver->DrawPixels = xmesa_DrawPixels_5R6G5B;
      }
   }

   driver->MapRenderbuffer = xmesa_MapRenderbuffer;
   driver->UnmapRenderbuffer = xmesa_UnmapRenderbuffer;

   driver->GenerateMipmap = _mesa_generate_mipmap;

#if ENABLE_EXT_timer_query
   driver->NewQueryObject = xmesa_new_query_object;
   driver->BeginQuery = xmesa_begin_query;
   driver->EndQuery = xmesa_end_query;
#endif
}


#define XMESA_NEW_POINT  (_NEW_POINT | \
                          _NEW_RENDERMODE | \
                          _SWRAST_NEW_RASTERMASK)

#define XMESA_NEW_LINE   (_NEW_LINE | \
                          _NEW_TEXTURE | \
                          _NEW_LIGHT | \
                          _NEW_DEPTH | \
                          _NEW_RENDERMODE | \
                          _SWRAST_NEW_RASTERMASK)

#define XMESA_NEW_TRIANGLE (_NEW_POLYGON | \
                            _NEW_TEXTURE | \
                            _NEW_LIGHT | \
                            _NEW_DEPTH | \
                            _NEW_RENDERMODE | \
                            _SWRAST_NEW_RASTERMASK)


/**
 * Extend the software rasterizer with our line/point/triangle
 * functions.
 * Called during context creation only.
 */
void xmesa_register_swrast_functions( struct gl_context *ctx )
{
   SWcontext *swrast = SWRAST_CONTEXT( ctx );

   swrast->choose_point = xmesa_choose_point;
   swrast->choose_line = xmesa_choose_line;
   swrast->choose_triangle = xmesa_choose_triangle;

   /* XXX these lines have no net effect.  Remove??? */
   swrast->InvalidatePointMask |= XMESA_NEW_POINT;
   swrast->InvalidateLineMask |= XMESA_NEW_LINE;
   swrast->InvalidateTriangleMask |= XMESA_NEW_TRIANGLE;
}
@


1.10
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.9
log
@Merge Mesa 9.2.0
@
text
@d57 1
a57 1
      _glthread_LOCK_MUTEX(_xmesa_lock);
d59 1
a59 1
      _glthread_UNLOCK_MUTEX(_xmesa_lock);
d369 2
a370 1
						      unpack->BufferObj);
d372 1
a372 4
            /* buffer is already mapped - that's an error */
            _mesa_error(ctx, GL_INVALID_OPERATION,
                        "glDrawPixels(PBO is mapped)");
            return;
d418 1
a418 1
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj);
d501 2
a502 1
						      unpack->BufferObj);
d504 1
a504 4
            /* buffer is already mapped - that's an error */
            _mesa_error(ctx, GL_INVALID_OPERATION,
                        "glDrawPixels(PBO is mapped)");
            return;
d549 1
a549 1
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj);
d749 1
a749 1
xmesa_viewport(struct gl_context *ctx, GLint x, GLint y, GLsizei w, GLsizei h)
a755 4
   (void) x;
   (void) y;
   (void) w;
   (void) h;
d844 1
a844 1
      driver->BlitFramebuffer = _mesa_meta_BlitFramebuffer;
@


1.8
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.5.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
a32 1
#include "main/buffers.h"
d35 1
a35 4
#include "main/depth.h"
#include "main/drawpix.h"
#include "main/extensions.h"
#include "main/framebuffer.h"
d37 1
a41 4
#include "main/state.h"
#include "main/texobj.h"
#include "main/teximage.h"
#include "main/texstore.h"
a51 35

/*
 * Dithering kernels and lookup tables.
 */

const int xmesa_kernel8[DITH_DY * DITH_DX] = {
    0 * MAXC,  8 * MAXC,  2 * MAXC, 10 * MAXC,
   12 * MAXC,  4 * MAXC, 14 * MAXC,  6 * MAXC,
    3 * MAXC, 11 * MAXC,  1 * MAXC,  9 * MAXC,
   15 * MAXC,  7 * MAXC, 13 * MAXC,  5 * MAXC,
};

const short xmesa_HPCR_DRGB[3][2][16] = {
   {
      { 16, -4,  1,-11, 14, -6,  3, -9, 15, -5,  2,-10, 13, -7,  4, -8},
      {-15,  5,  0, 12,-13,  7, -2, 10,-14,  6, -1, 11,-12,  8, -3,  9}
   },
   {
      {-11, 15, -7,  3, -8, 14, -4,  2,-10, 16, -6,  4, -9, 13, -5,  1},
      { 12,-14,  8, -2,  9,-13,  5, -1, 11,-15,  7, -3, 10,-12,  6,  0}
   },
   {
      {  6,-18, 26,-14,  2,-22, 30,-10,  8,-16, 28,-12,  4,-20, 32, -8},
      { -4, 20,-24, 16,  0, 24,-28, 12, -6, 18,-26, 14, -2, 22,-30, 10}
   }
};

const int xmesa_kernel1[16] = {
   0*47,  9*47,  4*47, 12*47,     /* 47 = (255*3)/16 */
   6*47,  2*47, 14*47,  8*47,
  10*47,  1*47,  5*47, 11*47,
   7*47, 13*47,  3*47, 15*47
};


a63 26
static void
clear_color( struct gl_context *ctx, const GLfloat color[4] )
{
   if (ctx->DrawBuffer->Name == 0) {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);

      CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[0], color[0]);
      CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[1], color[1]);
      CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[2], color[2]);
      CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[3], color[3]);
      xmesa->clearpixel = xmesa_color_to_pixel( ctx,
                                                xmesa->clearcolor[0],
                                                xmesa->clearcolor[1],
                                                xmesa->clearcolor[2],
                                                xmesa->clearcolor[3],
                                                xmesa->xm_visual->undithered_pf );
      _glthread_LOCK_MUTEX(_xmesa_lock);
      XMesaSetForeground( xmesa->display, xmbuf->cleargc,
                          xmesa->clearpixel );
      _glthread_UNLOCK_MUTEX(_xmesa_lock);
   }
}



d74 1
a74 1
   if (ctx->DrawBuffer->Name != 0)
d119 1
a119 1
                       x, xrb->Base.Height - y - height,
a124 34
clear_8bit_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                   GLint x, GLint y, GLint width, GLint height )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   GLint i;
   for (i = 0; i < height; i++) {
      GLubyte *ptr = PIXEL_ADDR1(xrb, x, y + i);
      memset( ptr, xmesa->clearpixel, width );
   }
}


static void
clear_HPCR_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
                   GLint x, GLint y, GLint width, GLint height )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   GLint i;
   for (i = y; i < y + height; i++) {
      GLubyte *ptr = PIXEL_ADDR1( xrb, x, i );
      int j;
      const GLubyte *sptr = xmesa->xm_visual->hpcr_clear_ximage_pattern[0];
      if (i & 1) {
         sptr += 16;
      }
      for (j = x; j < x + width; j++) {
         *ptr = sptr[j&15];
         ptr++;
      }
   }
}


static void
d196 1
a196 1
   if (width == xrb->Base.Width && height == xrb->Base.Height) {
d198 1
a198 1
      const GLuint n = xrb->Base.Width * xrb->Base.Height;
d245 1
a245 1
   if (ctx->DrawBuffer->Name == 0) {
d248 1
d255 10
d309 1
a309 1
       ctx->DrawBuffer->Name == 0 &&
d321 1
a321 1
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);
d324 1
a324 1
                _mesa_get_format_bits(xrb->Base.Format, GL_ALPHA_BITS) == 0) {
d366 4
a369 4
         buf = (GLubyte *) ctx->Driver.MapBuffer(ctx,
                                                 GL_PIXEL_UNPACK_BUFFER_EXT,
                                                 GL_READ_ONLY_ARB,
                                                 unpack->BufferObj);
d385 1
a385 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
d420 1
a420 2
         ctx->Driver.UnmapBuffer(ctx, GL_PIXEL_UNPACK_BUFFER_EXT,
                                 unpack->BufferObj);
d442 1
a442 1
       ctx->DrawBuffer->Name == 0 &&
d454 1
a454 1
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);
d457 1
a457 1
                _mesa_get_format_bits(xrb->Base.Format, GL_ALPHA_BITS) == 0) {
d500 4
a503 4
         buf = (GLubyte *) ctx->Driver.MapBuffer(ctx,
                                                 GL_PIXEL_UNPACK_BUFFER_EXT,
                                                 GL_READ_ONLY_ARB,
                                                 unpack->BufferObj);
d519 1
a519 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
d553 1
a553 2
         ctx->Driver.UnmapBuffer(ctx, GL_PIXEL_UNPACK_BUFFER_EXT,
                                 unpack->BufferObj);
d589 1
a589 1
            = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
d591 1
a591 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
d617 1
a617 1
         = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
d619 1
a619 1
         = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
a680 74
static void
clear_color_HPCR_ximage( struct gl_context *ctx, const GLfloat color[4] )
{
   int i;
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);

   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[0], color[0]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[1], color[1]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[2], color[2]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[3], color[3]);

   if (color[0] == 0.0 && color[1] == 0.0 && color[2] == 0.0) {
      /* black is black */
      memset( xmesa->xm_visual->hpcr_clear_ximage_pattern, 0x0 ,
              sizeof(xmesa->xm_visual->hpcr_clear_ximage_pattern));
   }
   else {
      /* build clear pattern */
      for (i=0; i<16; i++) {
         xmesa->xm_visual->hpcr_clear_ximage_pattern[0][i] =
            DITHER_HPCR(i, 0,
                        xmesa->clearcolor[0],
                        xmesa->clearcolor[1],
                        xmesa->clearcolor[2]);
         xmesa->xm_visual->hpcr_clear_ximage_pattern[1][i]    =
            DITHER_HPCR(i, 1,
                        xmesa->clearcolor[0],
                        xmesa->clearcolor[1],
                        xmesa->clearcolor[2]);
      }
   }
}


static void
clear_color_HPCR_pixmap( struct gl_context *ctx, const GLfloat color[4] )
{
   int i;
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);

   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[0], color[0]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[1], color[1]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[2], color[2]);
   CLAMPED_FLOAT_TO_UBYTE(xmesa->clearcolor[3], color[3]);

   if (color[0] == 0.0 && color[1] == 0.0 && color[2] == 0.0) {
      /* black is black */
      for (i=0; i<16; i++) {
         XMesaPutPixel(xmesa->xm_visual->hpcr_clear_ximage, i, 0, 0);
         XMesaPutPixel(xmesa->xm_visual->hpcr_clear_ximage, i, 1, 0);
      }
   }
   else {
      for (i=0; i<16; i++) {
         XMesaPutPixel(xmesa->xm_visual->hpcr_clear_ximage, i, 0,
                       DITHER_HPCR(i, 0,
                                   xmesa->clearcolor[0],
                                   xmesa->clearcolor[1],
                                   xmesa->clearcolor[2]));
         XMesaPutPixel(xmesa->xm_visual->hpcr_clear_ximage, i, 1,
                       DITHER_HPCR(i, 1,
                                   xmesa->clearcolor[0],
                                   xmesa->clearcolor[1],
                                   xmesa->clearcolor[2]));
      }
   }
   /* change tile pixmap content */
   XMesaPutImage(xmesa->display,
		 (XMesaDrawable)xmesa->xm_visual->hpcr_clear_pixmap,
		 XMESA_BUFFER(ctx->DrawBuffer)->cleargc,
		 xmesa->xm_visual->hpcr_clear_ximage, 0, 0, 0, 0, 16, 2);
}


d698 1
a698 1
   if (ctx->DrawBuffer->Name != 0)
a711 2
         xmesa_set_renderbuffer_funcs(front_xrb, xmesa->pixelformat,
                                      xmesa->xm_visual->BitsPerPixel);
a716 2
         xmesa_set_renderbuffer_funcs(back_xrb, xmesa->pixelformat,
                                      xmesa->xm_visual->BitsPerPixel);
a721 8
            case 8:
               if (xmesa->xm_visual->hpcr_clear_flag) {
                  back_xrb->clearFunc = clear_HPCR_ximage;
               }
               else {
                  back_xrb->clearFunc = clear_8bit_ximage;
               }
               break;
a737 35

   if (xmesa->xm_visual->hpcr_clear_flag) {
      /* this depends on whether we're drawing to the front or back buffer */
      /* XXX FIX THIS! */
#if 0
      if (pixmap) {
         ctx->Driver.ClearColor = clear_color_HPCR_pixmap;
      }
      else {
         ctx->Driver.ClearColor = clear_color_HPCR_ximage;
      }
#else
      (void) clear_color_HPCR_pixmap;
      (void) clear_color_HPCR_ximage;
#endif
   }
}



/**
 * In SW, we don't really compress GL_COMPRESSED_RGB[A] textures!
 */
static gl_format
choose_tex_format( struct gl_context *ctx, GLint internalFormat,
                   GLenum format, GLenum type )
{
   switch (internalFormat) {
      case GL_COMPRESSED_RGB_ARB:
         return MESA_FORMAT_RGB888;
      case GL_COMPRESSED_RGBA_ARB:
         return MESA_FORMAT_RGBA8888;
      default:
         return _mesa_choose_tex_format(ctx, internalFormat, format, type);
   }
a806 3
#ifdef __VMS
#define suseconds_t unsigned int
#endif
a843 1
   driver->GetBufferSize = NULL; /* OBSOLETE */
a845 1
   driver->ClearColor = clear_color;
d869 4
a872 5
#if ENABLE_EXT_texure_compression_s3tc
   driver->ChooseTextureFormat = choose_tex_format;
#else
   (void) choose_tex_format;
#endif
@


1.7
log
@Merge Mesa 7.10.3
@
text
@d44 1
d448 1
a448 1
      if (unpack->BufferObj->Name) {
d452 1
a452 1
                                        format, type, pixels)) {
d510 1
a510 1
      if (unpack->BufferObj->Name) {
d583 1
a583 1
      if (unpack->BufferObj->Name) {
d587 1
a587 1
                                        format, type, pixels)) {
@


1.6
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d94 1
a94 1
finish_or_flush( GLcontext *ctx )
a95 3
#ifdef XFree86Server
      /* NOT_NEEDED */
#else
a101 1
#endif
d106 1
a106 1
clear_color( GLcontext *ctx, const GLfloat color[4] )
d133 1
a133 1
color_mask(GLcontext *ctx,
d138 1
a138 1
   const int xclass = xmesa->xm_visual->mesa_visual.visualType;
d172 1
a172 1
clear_pixmap(GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d192 1
a192 1
clear_8bit_ximage( GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d205 1
a205 1
clear_HPCR_ximage( GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d226 1
a226 1
clear_16bit_ximage( GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d248 1
a248 1
clear_24bit_ximage(GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d281 1
a281 1
clear_32bit_ximage(GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d325 1
a325 1
clear_nbit_ximage(GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d344 1
a344 1
clear_buffers(GLcontext *ctx, GLbitfield buffers)
a386 1
#ifndef XFree86Server
d394 1
a394 1
can_do_DrawPixels_8R8G8B(GLcontext *ctx, GLenum format, GLenum type)
d430 1
a430 1
xmesa_DrawPixels_8R8G8B( GLcontext *ctx,
d527 1
a527 1
can_do_DrawPixels_5R6G5B(GLcontext *ctx, GLenum format, GLenum type)
d565 1
a565 1
xmesa_DrawPixels_5R6G5B( GLcontext *ctx,
d660 1
a660 1
can_do_CopyPixels(GLcontext *ctx, GLenum type)
d699 1
a699 1
xmesa_CopyPixels( GLcontext *ctx,
a728 1
#endif /* XFree86Server */
d737 1
a737 1
get_string( GLcontext *ctx, GLenum name )
a741 3
#ifdef XFree86Server
         return (const GLubyte *) "Mesa GLX Indirect";
#else
a742 1
#endif
a743 3
#ifdef XFree86Server
         return (const GLubyte *) "Mesa project: www.mesa3d.org";
#else
a744 1
#endif
d756 1
a756 1
enable( GLcontext *ctx, GLenum pname, GLboolean state )
d774 1
a774 1
clear_color_HPCR_ximage( GLcontext *ctx, const GLfloat color[4] )
d808 1
a808 1
clear_color_HPCR_pixmap( GLcontext *ctx, const GLfloat color[4] )
d852 1
a852 1
xmesa_update_state( GLcontext *ctx, GLbitfield new_state )
a936 37
 * Called via ctx->Driver.TestProxyTeximage().  Normally, we'd just use
 * the _mesa_test_proxy_teximage() fallback function, but we're going to
 * special-case the 3D texture case to allow textures up to 512x512x32
 * texels.
 */
static GLboolean
test_proxy_teximage(GLcontext *ctx, GLenum target, GLint level,
                    GLint internalFormat, GLenum format, GLenum type,
                    GLint width, GLint height, GLint depth, GLint border)
{
   if (target == GL_PROXY_TEXTURE_3D) {
      /* special case for 3D textures */
      if (width * height * depth > 512 * 512 * 64 ||
          width  < 2 * border ||
          (!ctx->Extensions.ARB_texture_non_power_of_two &&
           _mesa_bitcount(width  - 2 * border) != 1) ||
          height < 2 * border ||
          (!ctx->Extensions.ARB_texture_non_power_of_two &&
           _mesa_bitcount(height - 2 * border) != 1) ||
          depth  < 2 * border ||
          (!ctx->Extensions.ARB_texture_non_power_of_two &&
           _mesa_bitcount(depth  - 2 * border) != 1)) {
         /* Bad size, or too many texels */
         return GL_FALSE;
      }
      return GL_TRUE;
   }
   else {
      /* use the fallback routine for 1D, 2D, cube and rect targets */
      return _mesa_test_proxy_teximage(ctx, target, level, internalFormat,
                                       format, type, width, height, depth,
                                       border);
   }
}


/**
d940 1
a940 1
choose_tex_format( GLcontext *ctx, GLint internalFormat,
d966 1
a966 1
xmesa_viewport(GLcontext *ctx, GLint x, GLint y, GLsizei w, GLsizei h)
d996 1
a996 1
xmesa_new_query_object(GLcontext *ctx, GLuint id)
d1008 1
a1008 1
xmesa_begin_query(GLcontext *ctx, struct gl_query_object *q)
d1035 1
a1035 1
xmesa_end_query(GLcontext *ctx, struct gl_query_object *q)
a1075 1
#ifndef XFree86Server
a1084 1
#endif
d1086 1
a1086 1
   driver->TestProxyTexImage = test_proxy_teximage;
d1125 1
a1125 1
void xmesa_register_swrast_functions( GLcontext *ctx )
@


1.5
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d54 1
a109 12
clear_index( GLcontext *ctx, GLuint index )
{
   if (ctx->DrawBuffer->Name == 0) {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      xmesa->clearpixel = (unsigned long) index;
      XMesaSetForeground( xmesa->display, xmbuf->cleargc, (unsigned long) index );
   }
}


static void
a134 20
/* Set index mask ala glIndexMask */
static void
index_mask( GLcontext *ctx, GLuint mask )
{
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
   /* not sure this conditional is really needed */
   if (xmbuf->backxrb && xmbuf->backxrb->pixmap) {
      unsigned long m;
      if (mask==0xffffffff) {
	 m = ((unsigned long)~0L);
      }
      else {
         m = (unsigned long) mask;
      }
      XMesaSetPlaneMask( xmesa->display, xmbuf->cleargc, m );
   }
}


d203 1
a203 1
      MEMSET( ptr, xmesa->clearpixel, width );
d265 1
a265 1
         MEMSET(ptr3, r, 3 * width);
d307 1
a307 1
         _mesa_memset(ptr4, pixel, 4 * n);
d352 1
a352 1
      const GLuint *colorMask = (GLuint *) &ctx->Color.ColorMask;
d419 1
a419 1
                xrb->Base.AlphaBits == 0) {
d495 1
a495 1
         MEMSET(&ximage, 0, sizeof(XMesaImage));
d553 1
a553 1
                xrb->Base.AlphaBits == 0) {
d629 1
a629 1
         MEMSET(&ximage, 0, sizeof(XMesaImage));
d800 1
a800 1
      MEMSET( xmesa->xm_visual->hpcr_clear_ximage_pattern, 0x0 ,
d884 1
d886 1
a886 1
   if (new_state & (_NEW_COLOR | _NEW_PIXEL | _NEW_BUFFERS)) {
d990 1
a990 1
static const struct gl_texture_format *
d996 1
a996 1
         return &_mesa_texformat_rgb;
d998 1
a998 1
         return &_mesa_texformat_rgba;
a1113 1
   driver->ClearIndex = clear_index;
a1114 1
   driver->IndexMask = index_mask;
a1116 1
   driver->Clear = clear_buffers;
d1118 9
d1128 10
a1137 8
   driver->CopyPixels = xmesa_CopyPixels;
   if (xmvisual->undithered_pf == PF_8R8G8B &&
       xmvisual->dithered_pf == PF_8R8G8B &&
       xmvisual->BitsPerPixel == 32) {
      driver->DrawPixels = xmesa_DrawPixels_8R8G8B;
   }
   else if (xmvisual->undithered_pf == PF_5R6G5B) {
      driver->DrawPixels = xmesa_DrawPixels_5R6G5B;
a1138 1
#endif
@


1.4
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d32 17
a48 18
#include "bufferobj.h"
#include "buffers.h"
#include "context.h"
#include "colormac.h"
#include "depth.h"
#include "drawpix.h"
#include "extensions.h"
#include "framebuffer.h"
#include "macros.h"
#include "image.h"
#include "imports.h"
#include "mtypes.h"
#include "state.h"
#include "texobj.h"
#include "teximage.h"
#include "texstore.h"
#include "texformat.h"
#include "xmesaP.h"
d54 1
d1089 1
a1089 1
xmesa_begin_query(GLcontext *ctx, GLenum target, struct gl_query_object *q)
d1091 1
a1091 1
   if (target == GL_TIME_ELAPSED_EXT) {
d1116 1
a1116 1
xmesa_end_query(GLcontext *ctx, GLenum target, struct gl_query_object *q)
d1118 1
a1118 1
   if (target == GL_TIME_ELAPSED_EXT) {
@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d445 1
a445 1
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0][0];
d511 1
a511 1
          = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
d579 1
a579 1
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0][0];
d646 1
a646 1
          = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
d705 1
a705 1
       ctx->DrawBuffer->_ColorDrawBuffers[0][0]) {
d717 1
a717 1
          = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
d719 1
a719 1
          = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
d747 1
a747 1
         = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d423 36
a458 1
/* XXX this was never tested in the Xserver environment */
d472 3
a474 21
   const SWcontext *swrast = SWRAST_CONTEXT( ctx );
   struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0][0];
   struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);

   if (swrast->NewState)
      _swrast_validate_derived( ctx );

   if (ctx->DrawBuffer->Name == 0 &&
       format == GL_BGRA &&
       type == GL_UNSIGNED_BYTE &&
       (swrast->_RasterMask & ~CLIP_BIT) == 0 && /* no blend, z-test, etc */
       ctx->_ImageTransferState == 0 &&  /* no color tables, scale/bias, etc */
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       xrb->pixmap &&                    /* drawing to pixmap or window */
       xrb->Base.AlphaBits == 0)
   {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      XMesaDisplay *dpy = xmesa->xm_visual->display;
      const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
a478 1
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
d480 2
a481 4
      ASSERT(xmesa->xm_visual->dithered_pf == PF_8R8G8B);
      ASSERT(xmesa->xm_visual->undithered_pf == PF_8R8G8B);
      ASSERT(dpy);
      ASSERT(gc);
d506 16
a525 4
         int srcX = clippedUnpack.SkipPixels;
         int srcY = clippedUnpack.SkipRows;
         int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;
d536 2
a537 1
         ximage.depth = 24;
a538 1
         ximage.bits_per_pixel = 32;
d560 35
d607 3
a609 23
   struct xmesa_renderbuffer *xrb
      = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   const SWcontext *swrast = SWRAST_CONTEXT( ctx );
   XMesaDisplay *dpy = xmesa->xm_visual->display;
   XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
   const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */

   ASSERT(dpy);
   ASSERT(gc);
   ASSERT(xmesa->xm_visual->undithered_pf == PF_5R6G5B);

   if (swrast->NewState)
      _swrast_validate_derived( ctx );

   if (xrb->pixmap &&       /* drawing to pixmap or window */
       format == GL_RGB &&
       type == GL_UNSIGNED_SHORT_5_6_5 &&
       !ctx->Color.DitherFlag &&  /* no dithering */
       (swrast->_RasterMask & ~CLIP_BIT) == 0 && /* no blend, z-test, etc */
       ctx->_ImageTransferState == 0 &&  /* no color tables, scale/bias, etc */
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0) {
a613 1
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
d615 3
d641 15
a659 4
         int srcX = clippedUnpack.SkipPixels;
         int srcY = clippedUnpack.SkipRows;
         int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;
d671 1
a672 1
         ximage.bits_per_pixel = 16;
d692 36
d739 13
a751 25
   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
   const SWcontext *swrast = SWRAST_CONTEXT( ctx );
   XMesaDisplay *dpy = xmesa->xm_visual->display;
   XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
   const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
   struct xmesa_renderbuffer *srcXrb
      = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
   struct xmesa_renderbuffer *dstXrb
      = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);

   ASSERT(dpy);
   ASSERT(gc);

   if (swrast->NewState)
      _swrast_validate_derived( ctx );

   if (ctx->Color.DrawBuffer[0] == GL_FRONT &&
       ctx->Pixel.ReadBuffer == GL_FRONT &&
       srcXrb->pixmap &&
       dstXrb->pixmap &&
       type == GL_COLOR &&
       (swrast->_RasterMask & ~CLIP_BIT) == 0 && /* no blend, z-test, etc */
       ctx->_ImageTransferState == 0 &&  /* no color tables, scale/bias, etc */
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0) {
d764 1
d1154 2
a1155 1
       xmvisual->dithered_pf == PF_8R8G8B) {
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5.1
d26 5
a49 1
#include "array_cache/acache.h"
a55 4
#ifdef XFree86Server
#include <GL/glxtokens.h>
#endif

a91 44
/*
 * Return the size (width, height) of the X window for the given GLframebuffer.
 * Output:  width - width of buffer in pixels.
 *          height - height of buffer in pixels.
 */
static void
get_buffer_size( GLframebuffer *buffer, GLuint *width, GLuint *height )
{
   /* We can do this cast because the first field in the XMesaBuffer
    * struct is a GLframebuffer struct.  If this weren't true, we'd
    * need a pointer from the GLframebuffer to the XMesaBuffer.
    */
   const XMesaBuffer xmBuffer = (XMesaBuffer) buffer;
   unsigned int winwidth, winheight;
#ifdef XFree86Server
   /* XFree86 GLX renderer */
   winwidth = MIN2(xmBuffer->frontxrb->drawable->width, MAX_WIDTH);
   winheight = MIN2(xmBuffer->frontxrb->drawable->height, MAX_HEIGHT);
#else
   Window root;
   Status stat;
   int winx, winy;
   unsigned int bw, d;

   _glthread_LOCK_MUTEX(_xmesa_lock);
   XSync(xmBuffer->xm_visual->display, 0); /* added for Chromium */

   stat = XGetGeometry( xmBuffer->xm_visual->display, xmBuffer->frontxrb->pixmap,
                 &root, &winx, &winy, &winwidth, &winheight, &bw, &d );
   _glthread_UNLOCK_MUTEX(_xmesa_lock);

   if (!stat) {
      /* probably querying a window that's recently been destroyed */
      _mesa_warning(NULL, "XGetGeometry failed!\n");
      *width = *height = 1;
      return;
   }
#endif

   *width = winwidth;
   *height = winheight;
}


a161 1
      XMesaSetPlaneMask( xmesa->display, xmbuf->gc, m );
a192 1
      XMesaSetPlaneMask( xmesa->display, xmbuf->gc, m );
d207 1
a207 1
clear_pixmap(GLcontext *ctx, struct xmesa_renderbuffer *xrb, GLboolean all,
d220 3
a222 9
   if (all) {
      XMesaFillRectangle( xmesa->display, xrb->pixmap, xmbuf->cleargc,
                          0, 0, xrb->Base.Width + 1, xrb->Base.Height + 1 );
   }
   else {
      XMesaFillRectangle( xmesa->display, xrb->pixmap, xmbuf->cleargc,
                          x, xrb->Base.Height - y - height,
                          width, height );
   }
d228 1
a228 1
                   GLboolean all, GLint x, GLint y, GLint width, GLint height )
d231 4
a234 11

   if (all) {
      const size_t n = xrb->ximage->bytes_per_line * xrb->Base.Height;
      MEMSET( xrb->ximage->data, xmesa->clearpixel, n );
   }
   else {
      GLint i;
      for (i=0;i<height;i++) {
         GLubyte *ptr = PIXEL_ADDR1(xrb, x, y + i);
         MEMSET( ptr, xmesa->clearpixel, width );
      }
d241 1
a241 1
                   GLboolean all, GLint x, GLint y, GLint width, GLint height )
d244 11
a254 49

   if (all) {
      const GLuint c16 = xrb->ximage->bytes_per_line & ~0xf;
      GLuint i;
      GLubyte *ptr  = (GLubyte *) xrb->ximage->data;
      for (i = 0; i < xrb->Base.Height; i++) {
         GLuint j;
         const GLubyte *sptr = xmesa->xm_visual->hpcr_clear_ximage_pattern[0];
         if (i&1) {
            sptr += 16;
         }
         for (j=0; j<c16; j+=16) {
            ptr[0] = sptr[0];
            ptr[1] = sptr[1];
            ptr[2] = sptr[2];
            ptr[3] = sptr[3];
            ptr[4] = sptr[4];
            ptr[5] = sptr[5];
            ptr[6] = sptr[6];
            ptr[7] = sptr[7];
            ptr[8] = sptr[8];
            ptr[9] = sptr[9];
            ptr[10] = sptr[10];
            ptr[11] = sptr[11];
            ptr[12] = sptr[12];
            ptr[13] = sptr[13];
            ptr[14] = sptr[14];
            ptr[15] = sptr[15];
            ptr += 16;
         }
         for (; j < (GLuint) xrb->ximage->bytes_per_line; j++) {
            *ptr = sptr[j&15];
            ptr++;
         }
      }
   }
   else {
      GLint i;
      for (i=y; i<y+height; i++) {
         GLubyte *ptr = PIXEL_ADDR1( xrb, x, i );
         int j;
         const GLubyte *sptr = xmesa->xm_visual->hpcr_clear_ximage_pattern[0];
         if (i&1) {
            sptr += 16;
         }
         for (j=x; j<x+width; j++) {
            *ptr = sptr[j&15];
            ptr++;
         }
d262 1
a262 1
                    GLboolean all, GLint x, GLint y, GLint width, GLint height)
d265 2
a266 1
   register GLuint pixel = (GLuint) xmesa->clearpixel;
d272 4
a275 27
   if (all) {
      GLuint *ptr4 = (GLuint *) xrb->ximage->data;
      if ((pixel & 0xff) == ((pixel >> 8) & 0xff)) {
         /* low and high bytes are equal so use memset() */
         const GLuint n = xrb->ximage->bytes_per_line * xrb->Base.Height;
         MEMSET( ptr4, pixel & 0xff, n );
      }
      else {
         const GLuint n = xrb->ximage->bytes_per_line * xrb->Base.Height / 4;
         GLuint i;
         pixel = pixel | (pixel<<16);
         for (i = 0; i < n; i++) {
            ptr4[i] = pixel;
         }
         ptr4 += n;
         /* might be one last GLushort to set */
         if ((xrb->ximage->bytes_per_line * xrb->Base.Height) & 0x2)
            *(GLushort *)ptr4 = pixel & 0xffff;
      }
   }
   else {
      GLint i, j;
      for (j=0;j<height;j++) {
         GLushort *ptr2 = PIXEL_ADDR2(xrb, x, y + j);
         for (i=0;i<width;i++) {
            *ptr2++ = pixel;
         }
d284 1
a284 1
                   GLboolean all, GLint x, GLint y, GLint width, GLint height)
d291 6
a296 25
   if (all) {
      if (r == g && g == b) {
         /* same value for all three components (gray) */
         const GLint w3 = xrb->Base.Width * 3;
         const GLint h = xrb->Base.Height;
         GLint i;
         for (i = 0; i < h; i++) {
            bgr_t *ptr3 = PIXEL_ADDR3(xrb, 0, i);
            MEMSET(ptr3, r, w3);
         }
      }
      else {
         /* the usual case */
         const GLint w = xrb->Base.Width;
         const GLint h = xrb->Base.Height;
         GLint i, j;
         for (i = 0; i < h; i++) {
            bgr_t *ptr3 = PIXEL_ADDR3(xrb, 0, i);
            for (j = 0; j < w; j++) {
               ptr3->r = r;
               ptr3->g = g;
               ptr3->b = b;
               ptr3++;
            }
         }
d300 9
a308 20
      /* only clear subrect of color buffer */
      if (r == g && g == b) {
         /* same value for all three components (gray) */
         GLint j;
         for (j=0;j<height;j++) {
            bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
            MEMSET(ptr3, r, 3 * width);
         }
      }
      else {
         /* non-gray clear color */
         GLint i, j;
         for (j = 0; j < height; j++) {
            bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
            for (i = 0; i < width; i++) {
               ptr3->r = r;
               ptr3->g = g;
               ptr3->b = b;
               ptr3++;
            }
d317 1
a317 1
                   GLboolean all, GLint x, GLint y, GLint width, GLint height)
d332 2
a333 1
   if (all) {
d337 1
d347 1
d361 1
a361 1
                  GLboolean all, GLint x, GLint y, GLint width, GLint height)
a366 3
   /* We can ignore 'all' here - x, y, width, height are always right */
   (void) all;

d379 1
a379 2
clear_buffers( GLcontext *ctx, GLbitfield mask,
               GLboolean all, GLint x, GLint y, GLint width, GLint height )
d385 4
d392 1
a392 1
         if (mask & BUFFER_BIT_FRONT_LEFT) {
d398 2
a399 3
               b->frontxrb->clearFunc(ctx, b->frontxrb, all, x, y,
                                      width, height);
               mask &= ~BUFFER_BIT_FRONT_LEFT;
d405 1
a405 1
         if (mask & BUFFER_BIT_BACK_LEFT) {
d411 2
a412 3
               b->backxrb->clearFunc(ctx, b->backxrb, all, x, y,
                                     width, height);
               mask &= ~BUFFER_BIT_BACK_LEFT;
d417 2
a418 22
   if (mask)
      _swrast_Clear( ctx, mask, all, x, y, width, height );
}


/**
 * Called by ctx->Driver.ResizeBuffers()
 * Resize the front/back colorbuffers to match the latest window size.
 */
void
xmesa_resize_buffers(GLcontext *ctx, GLframebuffer *buffer,
                     GLuint width, GLuint height)
{
   /* We can do this cast because the first field in the XMesaBuffer
    * struct is a GLframebuffer struct.  If this weren't true, we'd
    * need a pointer from the GLframebuffer to the XMesaBuffer.
    */
   XMesaBuffer xmBuffer = (XMesaBuffer) buffer;

   xmesa_alloc_back_buffer(xmBuffer, width, height);

   _mesa_resize_framebuffer(ctx, buffer, width, height);
a436 4
   struct xmesa_renderbuffer *xrb
      = (struct xmesa_renderbuffer *) ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped;

   const XMesaContext xmesa = XMESA_CONTEXT(ctx);
d438 2
a439 8
   XMesaDisplay *dpy = xmesa->xm_visual->display;
   XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
   const XMesaGC gc = xmbuf->gc;

   ASSERT(dpy);
   ASSERT(gc);
   ASSERT(xmesa->xm_visual->dithered_pf == PF_8R8G8B);
   ASSERT(xmesa->xm_visual->undithered_pf == PF_8R8G8B);
d444 1
a444 2
   if (xrb->pixmap &&
       xrb->Base.AlphaBits == 0 &&
d450 8
a457 1
       ctx->Pixel.ZoomY == 1.0) {
d464 5
d547 1
a547 1
      = (struct xmesa_renderbuffer *) ctx->DrawBuffer->_ColorDrawBuffers[0][0];
d552 1
a552 1
   const XMesaGC gc = xmbuf->gc;
d561 1
a561 1
   if (xrb->pixmap &&
d652 6
a657 5
   const XMesaGC gc = ((XMesaBuffer) ctx->DrawBuffer)->gc;
   struct xmesa_renderbuffer *srcXrb = (struct xmesa_renderbuffer *)
      ctx->ReadBuffer->_ColorReadBuffer;
   struct xmesa_renderbuffer *dstXrb = (struct xmesa_renderbuffer *)
      ctx->DrawBuffer->_ColorDrawBuffers[0][0];
a825 1
   _ac_InvalidateState( ctx, new_state );
d827 1
a956 27
 * Get the current drawing (and reading) window's size and update the
 * corresponding gl_framebuffer(s) if needed.
 */
static void
update_framebuffer_size(GLcontext *ctx)
{
   struct gl_framebuffer *fb = ctx->WinSysDrawBuffer;
   GLuint newWidth, newHeight;
   get_buffer_size(fb, &newWidth, &newHeight);
   if (newWidth != fb->Width || newHeight != fb->Height) {
      xmesa_resize_buffers(ctx, fb, newWidth, newHeight);
   }

   if (ctx->WinSysReadBuffer != ctx->WinSysDrawBuffer) {
      /* Update readbuffer's size */
      struct gl_framebuffer *fb = ctx->WinSysReadBuffer;
      GLuint newWidth, newHeight;
      get_buffer_size(fb, &newWidth, &newHeight);
      if (newWidth != fb->Width || newHeight != fb->Height) {
         xmesa_resize_buffers(ctx, fb, newWidth, newHeight);
         ctx->NewState |= _NEW_BUFFERS;
      }
   }
}


/**
d970 5
a978 1
   update_framebuffer_size(ctx);
d1062 1
a1062 1
   driver->GetBufferSize = get_buffer_size;
a1070 1
   driver->ResizeBuffers = xmesa_resize_buffers;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
a25 5
/**
 * \file xm_dd.h
 * General device driver functions for Xlib driver.
 */

d92 44
d253 1
a253 1
clear_pixmap(GLcontext *ctx, struct xmesa_renderbuffer *xrb,
d266 9
a274 3
   XMesaFillRectangle( xmesa->display, xrb->pixmap, xmbuf->cleargc,
                       x, xrb->Base.Height - y - height,
                       width, height );
d280 1
a280 1
                   GLint x, GLint y, GLint width, GLint height )
d283 11
a293 4
   GLint i;
   for (i = 0; i < height; i++) {
      GLubyte *ptr = PIXEL_ADDR1(xrb, x, y + i);
      MEMSET( ptr, xmesa->clearpixel, width );
d300 1
a300 1
                   GLint x, GLint y, GLint width, GLint height )
d303 49
a351 11
   GLint i;
   for (i = y; i < y + height; i++) {
      GLubyte *ptr = PIXEL_ADDR1( xrb, x, i );
      int j;
      const GLubyte *sptr = xmesa->xm_visual->hpcr_clear_ximage_pattern[0];
      if (i & 1) {
         sptr += 16;
      }
      for (j = x; j < x + width; j++) {
         *ptr = sptr[j&15];
         ptr++;
d359 1
a359 1
                    GLint x, GLint y, GLint width, GLint height)
d362 1
a362 2
   GLuint pixel = (GLuint) xmesa->clearpixel;
   GLint i, j;
d368 27
a394 4
   for (j = 0; j < height; j++) {
      GLushort *ptr2 = PIXEL_ADDR2(xrb, x, y + j);
      for (i = 0; i < width; i++) {
         ptr2[i] = pixel;
d403 1
a403 1
                   GLint x, GLint y, GLint width, GLint height)
d410 25
a434 6
   if (r == g && g == b) {
      /* same value for all three components (gray) */
      GLint j;
      for (j = 0; j < height; j++) {
         bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
         MEMSET(ptr3, r, 3 * width);
d438 20
a457 9
      /* non-gray clear color */
      GLint i, j;
      for (j = 0; j < height; j++) {
         bgr_t *ptr3 = PIXEL_ADDR3(xrb, x, y + j);
         for (i = 0; i < width; i++) {
            ptr3->r = r;
            ptr3->g = g;
            ptr3->b = b;
            ptr3++;
d466 1
a466 1
                   GLint x, GLint y, GLint width, GLint height)
d481 1
a481 2
   if (width == xrb->Base.Width && height == xrb->Base.Height) {
      /* clearing whole buffer */
a484 1
         /* common case */
a493 1
      /* clearing scissored region */
d507 1
a507 1
                  GLint x, GLint y, GLint width, GLint height)
d513 3
d528 2
a529 1
clear_buffers(GLcontext *ctx, GLbitfield buffers)
a534 4
      const GLint x = ctx->DrawBuffer->_Xmin;
      const GLint y = ctx->DrawBuffer->_Ymin;
      const GLint width = ctx->DrawBuffer->_Xmax - x;
      const GLint height = ctx->DrawBuffer->_Ymax - y;
d538 1
a538 1
         if (buffers & BUFFER_BIT_FRONT_LEFT) {
d544 3
a546 2
               b->frontxrb->clearFunc(ctx, b->frontxrb, x, y, width, height);
               buffers &= ~BUFFER_BIT_FRONT_LEFT;
d552 1
a552 1
         if (buffers & BUFFER_BIT_BACK_LEFT) {
d558 3
a560 2
               b->backxrb->clearFunc(ctx, b->backxrb, x, y, width, height);
               buffers &= ~BUFFER_BIT_BACK_LEFT;
d565 22
a586 2
   if (buffers)
      _swrast_Clear(ctx, buffers);
d605 4
d610 8
a617 2
   struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0][0];
   struct xmesa_renderbuffer *xrb = (struct xmesa_renderbuffer *) rb->Wrapped;
d622 2
a623 1
   if (ctx->DrawBuffer->Name == 0 &&
d629 1
a629 8
       ctx->Pixel.ZoomY == 1.0 &&
       xrb->pixmap &&
       xrb->Base.AlphaBits == 0)
   {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      XMesaDisplay *dpy = xmesa->xm_visual->display;
      const XMesaGC gc = xmbuf->gc;
a635 5
      ASSERT(xmesa->xm_visual->dithered_pf == PF_8R8G8B);
      ASSERT(xmesa->xm_visual->undithered_pf == PF_8R8G8B);
      ASSERT(dpy);
      ASSERT(gc);

d1123 27
a1162 5
   XMesaContext xmctx = XMESA_CONTEXT(ctx);
   XMesaBuffer xmdrawbuf = XMESA_BUFFER(ctx->WinSysDrawBuffer);
   XMesaBuffer xmreadbuf = XMESA_BUFFER(ctx->WinSysReadBuffer);
   xmesa_check_and_update_buffer_size(xmctx, xmdrawbuf);
   xmesa_check_and_update_buffer_size(xmctx, xmreadbuf);
d1167 1
d1251 1
a1251 1
   driver->GetBufferSize = NULL; /* OBSOLETE */
d1260 1
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d50 1
d57 4
d446 1
a446 1
   struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);
d554 1
a554 1
      = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
d660 4
a663 4
   struct xmesa_renderbuffer *srcXrb
      = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
   struct xmesa_renderbuffer *dstXrb
      = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0][0]->Wrapped);
d832 1
a833 1
   _vbo_InvalidateState( ctx, new_state );
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d32 18
a49 17
#include "main/bufferobj.h"
#include "main/buffers.h"
#include "main/context.h"
#include "main/colormac.h"
#include "main/depth.h"
#include "main/drawpix.h"
#include "main/extensions.h"
#include "main/framebuffer.h"
#include "main/macros.h"
#include "main/image.h"
#include "main/imports.h"
#include "main/mtypes.h"
#include "main/state.h"
#include "main/texobj.h"
#include "main/teximage.h"
#include "main/texstore.h"
#include "main/texformat.h"
a54 2
#include "drivers/common/meta.h"
#include "xmesaP.h"
d93 1
a93 1
finish_or_flush( struct gl_context *ctx )
d95 3
d104 13
d121 1
a121 1
clear_color( struct gl_context *ctx, const GLfloat color[4] )
d146 21
d169 1
a169 1
color_mask(struct gl_context *ctx,
d174 1
a174 1
   const int xclass = xmesa->xm_visual->visualType;
d194 1
d209 1
a209 1
clear_pixmap(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d229 1
a229 1
clear_8bit_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d236 1
a236 1
      memset( ptr, xmesa->clearpixel, width );
d242 1
a242 1
clear_HPCR_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d263 1
a263 1
clear_16bit_ximage( struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d285 1
a285 1
clear_24bit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d298 1
a298 1
         memset(ptr3, r, 3 * width);
d318 1
a318 1
clear_32bit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d340 1
a340 1
         memset(ptr4, pixel, 4 * n);
d362 1
a362 1
clear_nbit_ximage(struct gl_context *ctx, struct xmesa_renderbuffer *xrb,
d381 1
a381 1
clear_buffers(struct gl_context *ctx, GLbitfield buffers)
d385 1
a385 1
      const GLuint *colorMask = (GLuint *) &ctx->Color.ColorMask[0];
d424 2
a425 36
/* XXX these functions haven't been tested in the Xserver environment */


/**
 * Check if we can do an optimized glDrawPixels into an 8R8G8B visual.
 */
static GLboolean
can_do_DrawPixels_8R8G8B(struct gl_context *ctx, GLenum format, GLenum type)
{
   if (format == GL_BGRA &&
       type == GL_UNSIGNED_BYTE &&
       ctx->DrawBuffer &&
       ctx->DrawBuffer->Name == 0 &&
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->_ImageTransferState == 0 /* no color tables, scale/bias, etc */) {
      const SWcontext *swrast = SWRAST_CONTEXT(ctx);

      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
      if ((swrast->_RasterMask & ~CLIP_BIT) == 0) /* no blend, z-test, etc */ {
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         if (rb) {
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);
            if (xrb &&
                xrb->pixmap && /* drawing to pixmap or window */
                _mesa_get_format_bits(xrb->Base.Format, GL_ALPHA_BITS) == 0) {
               return GL_TRUE;
            }
         }
      }
   }
   return GL_FALSE;
}

d433 1
a433 1
xmesa_DrawPixels_8R8G8B( struct gl_context *ctx,
d439 21
a459 3
   if (can_do_DrawPixels_8R8G8B(ctx, format, type)) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
d464 1
d466 4
a469 2
      if (swrast->NewState)
         _swrast_validate_derived( ctx );
a493 16
         const XMesaContext xmesa = XMESA_CONTEXT(ctx);
         XMesaDisplay *dpy = xmesa->xm_visual->display;
         XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
         const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
         struct xmesa_renderbuffer *xrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
         const int srcX = clippedUnpack.SkipPixels;
         const int srcY = clippedUnpack.SkipRows;
         const int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;

         ASSERT(xmesa->xm_visual->dithered_pf == PF_8R8G8B);
         ASSERT(xmesa->xm_visual->undithered_pf == PF_8R8G8B);
         ASSERT(dpy);
         ASSERT(gc);

d498 5
a502 1
         memset(&ximage, 0, sizeof(XMesaImage));
d512 2
a513 1
         ximage.depth = 32;
a514 1
         ximage.bytes_per_line = -rowLength * 4; /* negative to flip image */
a535 35
 * Check if we can do an optimized glDrawPixels into an 5R6G5B visual.
 */
static GLboolean
can_do_DrawPixels_5R6G5B(struct gl_context *ctx, GLenum format, GLenum type)
{
   if (format == GL_RGB &&
       type == GL_UNSIGNED_SHORT_5_6_5 &&
       !ctx->Color.DitherFlag &&  /* no dithering */
       ctx->DrawBuffer &&
       ctx->DrawBuffer->Name == 0 &&
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->_ImageTransferState == 0 /* no color tables, scale/bias, etc */) {
      const SWcontext *swrast = SWRAST_CONTEXT(ctx);

      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
      if ((swrast->_RasterMask & ~CLIP_BIT) == 0) /* no blend, z-test, etc */ {
         struct gl_renderbuffer *rb = ctx->DrawBuffer->_ColorDrawBuffers[0];
         if (rb) {
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb->Wrapped);
            if (xrb &&
                xrb->pixmap && /* drawing to pixmap or window */
                _mesa_get_format_bits(xrb->Base.Format, GL_ALPHA_BITS) == 0) {
               return GL_TRUE;
            }
         }
      }
   }
   return GL_FALSE;
}


/**
d542 1
a542 1
xmesa_DrawPixels_5R6G5B( struct gl_context *ctx,
d548 23
a570 3
   if (can_do_DrawPixels_5R6G5B(ctx, format, type)) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );
      struct gl_pixelstore_attrib clippedUnpack = *unpack;
d575 1
a576 3
      if (swrast->NewState)
         _swrast_validate_derived( ctx );
      
a599 15
         const XMesaContext xmesa = XMESA_CONTEXT(ctx);
         XMesaDisplay *dpy = xmesa->xm_visual->display;
         XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
         const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
         struct xmesa_renderbuffer *xrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
         const int srcX = clippedUnpack.SkipPixels;
         const int srcY = clippedUnpack.SkipRows;
         const int rowLength = clippedUnpack.RowLength;
         XMesaImage ximage;

         ASSERT(xmesa->xm_visual->undithered_pf == PF_5R6G5B);
         ASSERT(dpy);
         ASSERT(gc);

d604 5
a608 1
         memset(&ximage, 0, sizeof(XMesaImage));
d619 1
a620 1
         ximage.bytes_per_line = -rowLength * 2; /* negative to flip image */
a639 36
/**
 * Determine if we can do an optimized glCopyPixels.
 */
static GLboolean
can_do_CopyPixels(struct gl_context *ctx, GLenum type)
{
   if (type == GL_COLOR &&
       ctx->_ImageTransferState == 0 &&  /* no color tables, scale/bias, etc */
       ctx->Pixel.ZoomX == 1.0 &&        /* no zooming */
       ctx->Pixel.ZoomY == 1.0 &&
       ctx->Color.DrawBuffer[0] == GL_FRONT &&  /* copy to front buf */
       ctx->Pixel.ReadBuffer == GL_FRONT &&    /* copy from front buf */
       ctx->ReadBuffer->_ColorReadBuffer &&
       ctx->DrawBuffer->_ColorDrawBuffers[0]) {
      const SWcontext *swrast = SWRAST_CONTEXT( ctx );

      if (swrast->NewState)
         _swrast_validate_derived( ctx );

      if ((swrast->_RasterMask & ~CLIP_BIT) == 0x0 &&
          ctx->ReadBuffer &&
          ctx->ReadBuffer->_ColorReadBuffer &&
          ctx->DrawBuffer &&
          ctx->DrawBuffer->_ColorDrawBuffers[0]) {
         struct xmesa_renderbuffer *srcXrb
            = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
         struct xmesa_renderbuffer *dstXrb
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);
         if (srcXrb->pixmap && dstXrb->pixmap) {
            return GL_TRUE;
         }
      }
   }
   return GL_FALSE;
}

d647 1
a647 1
xmesa_CopyPixels( struct gl_context *ctx,
d651 24
a674 13
   if (can_do_CopyPixels(ctx, type)) {
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
      XMesaDisplay *dpy = xmesa->xm_visual->display;
      XMesaBuffer xmbuf = XMESA_BUFFER(ctx->DrawBuffer);
      const XMesaGC gc = xmbuf->cleargc;  /* effected by glColorMask */
      struct xmesa_renderbuffer *srcXrb
         = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer->Wrapped);
      struct xmesa_renderbuffer *dstXrb
         = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]->Wrapped);

      ASSERT(dpy);
      ASSERT(gc);

d687 1
a687 1

d696 1
a696 1
get_string( struct gl_context *ctx, GLenum name )
d701 3
d705 1
d707 3
d711 1
d723 1
a723 1
enable( struct gl_context *ctx, GLenum pname, GLboolean state )
d741 1
a741 1
clear_color_HPCR_ximage( struct gl_context *ctx, const GLfloat color[4] )
d753 1
a753 1
      memset( xmesa->xm_visual->hpcr_clear_ximage_pattern, 0x0 ,
d775 1
a775 1
clear_color_HPCR_pixmap( struct gl_context *ctx, const GLfloat color[4] )
d819 1
a819 1
xmesa_update_state( struct gl_context *ctx, GLbitfield new_state )
a836 1
    * Check _NEW_COLOR to detect dither enable/disable.
d838 1
a838 1
   if (new_state & (_NEW_COLOR | _NEW_BUFFERS)) {
d903 37
d942 2
a943 2
static gl_format
choose_tex_format( struct gl_context *ctx, GLint internalFormat,
d948 1
a948 1
         return MESA_FORMAT_RGB888;
d950 1
a950 1
         return MESA_FORMAT_RGBA8888;
d969 1
a969 1
xmesa_viewport(struct gl_context *ctx, GLint x, GLint y, GLsizei w, GLsizei h)
d999 1
a999 1
xmesa_new_query_object(struct gl_context *ctx, GLuint id)
d1011 1
a1011 1
xmesa_begin_query(struct gl_context *ctx, struct gl_query_object *q)
d1013 1
a1013 1
   if (q->Target == GL_TIME_ELAPSED_EXT) {
d1038 1
a1038 1
xmesa_end_query(struct gl_context *ctx, struct gl_query_object *q)
d1040 1
a1040 1
   if (q->Target == GL_TIME_ELAPSED_EXT) {
d1066 1
d1068 1
d1071 1
d1073 5
a1077 6
   if (TEST_META_FUNCS) {
      driver->Clear = _mesa_meta_Clear;
      driver->CopyPixels = _mesa_meta_CopyPixels;
      driver->BlitFramebuffer = _mesa_meta_BlitFramebuffer;
      driver->DrawPixels = _mesa_meta_DrawPixels;
      driver->Bitmap = _mesa_meta_Bitmap;
d1079 2
a1080 11
   else {
      driver->Clear = clear_buffers;
      driver->CopyPixels = xmesa_CopyPixels;
      if (xmvisual->undithered_pf == PF_8R8G8B &&
          xmvisual->dithered_pf == PF_8R8G8B &&
          xmvisual->BitsPerPixel == 32) {
         driver->DrawPixels = xmesa_DrawPixels_8R8G8B;
      }
      else if (xmvisual->undithered_pf == PF_5R6G5B) {
         driver->DrawPixels = xmesa_DrawPixels_5R6G5B;
      }
d1082 2
a1083 1

d1122 1
a1122 1
void xmesa_register_swrast_functions( struct gl_context *ctx )
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d33 1
d36 4
a39 1
#include "main/fbobject.h"
a40 1
#include "main/mipmap.h"
d44 4
a47 1
#include "main/pbo.h"
d58 35
d105 26
d141 1
a141 1
   if (_mesa_is_user_fbo(ctx->DrawBuffer))
d186 1
a186 1
                       x, xrb->Base.Base.Height - y - height,
d192 34
d297 1
a297 1
   if (width == xrb->Base.Base.Width && height == xrb->Base.Base.Height) {
d299 1
a299 1
      const GLuint n = xrb->Base.Base.Width * xrb->Base.Base.Height;
d346 1
a346 1
   if (_mesa_is_winsys_fbo(ctx->DrawBuffer)) {
a348 1
      const XMesaContext xmesa = XMESA_CONTEXT(ctx);
a354 10
      _mesa_unclamped_float_rgba_to_ubyte(xmesa->clearcolor,
                                          ctx->Color.ClearColor.f);
      xmesa->clearpixel = xmesa_color_to_pixel(ctx,
                                               xmesa->clearcolor[0],
                                               xmesa->clearcolor[1],
                                               xmesa->clearcolor[2],
                                               xmesa->clearcolor[3],
                                               xmesa->xm_visual->undithered_pf);
      XMesaSetForeground(xmesa->display, b->cleargc, xmesa->clearpixel);

d399 1
a399 1
       _mesa_is_winsys_fbo(ctx->DrawBuffer) &&
d411 1
a411 1
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb);
d414 1
a414 1
                _mesa_get_format_bits(xrb->Base.Base.Format, GL_ALPHA_BITS) == 0) {
d447 1
a447 1
      if (_mesa_is_bufferobj(unpack->BufferObj)) {
d451 1
a451 1
                                        format, type, INT_MAX, pixels)) {
d456 4
a459 4
         buf = (GLubyte *) ctx->Driver.MapBufferRange(ctx, 0,
						      unpack->BufferObj->Size,
						      GL_MAP_READ_BIT,
						      unpack->BufferObj);
d475 1
a475 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
d509 3
a511 2
      if (_mesa_is_bufferobj(unpack->BufferObj)) {
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj);
d533 1
a533 1
       _mesa_is_winsys_fbo(ctx->DrawBuffer) &&
d545 1
a545 1
            struct xmesa_renderbuffer *xrb = xmesa_renderbuffer(rb);
d548 1
a548 1
                _mesa_get_format_bits(xrb->Base.Base.Format, GL_ALPHA_BITS) == 0) {
d582 1
a582 1
      if (_mesa_is_bufferobj(unpack->BufferObj)) {
d586 1
a586 1
                                        format, type, INT_MAX, pixels)) {
d591 4
a594 4
         buf = (GLubyte *) ctx->Driver.MapBufferRange(ctx, 0,
						      unpack->BufferObj->Size,
						      GL_MAP_READ_BIT,
						      unpack->BufferObj);
d610 1
a610 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
d644 2
a645 1
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj);
d681 1
a681 1
            = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
d683 1
a683 1
            = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
d709 1
a709 1
         = xmesa_renderbuffer(ctx->ReadBuffer->_ColorReadBuffer);
d711 1
a711 1
         = xmesa_renderbuffer(ctx->DrawBuffer->_ColorDrawBuffers[0]);
d773 74
d864 1
a864 1
   if (_mesa_is_user_fbo(ctx->DrawBuffer))
d878 2
d885 2
d892 8
d916 35
d1020 3
d1060 1
d1063 1
d1087 5
a1091 4
   driver->MapRenderbuffer = xmesa_MapRenderbuffer;
   driver->UnmapRenderbuffer = xmesa_UnmapRenderbuffer;

   driver->GenerateMipmap = _mesa_generate_mipmap;
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d57 1
a57 1
      mtx_lock(&_xmesa_lock);
d59 1
a59 1
      mtx_unlock(&_xmesa_lock);
d369 1
a369 2
						      unpack->BufferObj,
                                                      MAP_INTERNAL);
d371 4
a374 1
            return; /* error */
d420 1
a420 1
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj, MAP_INTERNAL);
d503 1
a503 2
						      unpack->BufferObj,
                                                      MAP_INTERNAL);
d505 4
a508 1
            return; /* error */
d553 1
a553 1
         ctx->Driver.UnmapBuffer(ctx, unpack->BufferObj, MAP_INTERNAL);
d753 1
a753 1
xmesa_viewport(struct gl_context *ctx)
d760 4
d852 1
a852 1
      driver->BlitFramebuffer = _mesa_meta_and_swrast_BlitFramebuffer;
@


