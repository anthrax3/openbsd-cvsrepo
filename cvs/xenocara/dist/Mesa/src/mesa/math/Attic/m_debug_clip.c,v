head	1.8;
access;
symbols
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.12.23.05.17.53;	author jsg;	state dead;
branches;
next	1.7;
commitid	TnlogFl9nOv2eaRf;

1.7
date	2015.02.20.23.09.59;	author jsg;	state Exp;
branches;
next	1.6;
commitid	4ry2gvZGMXkCUD2n;

1.6
date	2015.01.25.14.41.22;	author jsg;	state Exp;
branches;
next	1.5;
commitid	mcxB0JvoI9gTDYXU;

1.5
date	2013.09.05.14.06.34;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.44;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.22.20.06.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.50.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.50.49;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.16;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2015.01.25.14.13.06;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.13;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.8
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Gareth Hughes
 */

#include "main/glheader.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/imports.h"

#include "m_matrix.h"
#include "m_xform.h"

#include "m_debug.h"
#include "m_debug_util.h"

#ifdef __UNIXOS2__
/* The linker doesn't like empty files */
static char dummy;
#endif

#ifdef DEBUG_MATH  /* This code only used for debugging */

static clip_func *clip_tab[2] = {
   _mesa_clip_tab,
   _mesa_clip_np_tab
};
static char *cnames[2] = {
   "_mesa_clip_tab",
   "_mesa_clip_np_tab"
};
#ifdef RUN_DEBUG_BENCHMARK
static char *cstrings[2] = {
   "clip, perspective divide",
   "clip, no divide"
};
#endif


/* =============================================================
 * Reference cliptests
 */

static GLvector4f *ref_cliptest_points4( GLvector4f *clip_vec,
					 GLvector4f *proj_vec,
					 GLubyte clipMask[],
					 GLubyte *orMask,
					 GLubyte *andMask,
					 GLboolean viewport_z_clip )
{
   const GLuint stride = clip_vec->stride;
   const GLuint count = clip_vec->count;
   const GLfloat *from = (GLfloat *)clip_vec->start;
   GLuint c = 0;
   GLfloat (*vProj)[4] = (GLfloat (*)[4])proj_vec->start;
   GLubyte tmpAndMask = *andMask;
   GLubyte tmpOrMask = *orMask;
   GLuint i;
   for ( i = 0 ; i < count ; i++, STRIDE_F(from, stride) ) {
      const GLfloat cx = from[0];
      const GLfloat cy = from[1];
      const GLfloat cz = from[2];
      const GLfloat cw = from[3];
      GLubyte mask = 0;
      if ( -cx + cw < 0 ) mask |= CLIP_RIGHT_BIT;
      if (  cx + cw < 0 ) mask |= CLIP_LEFT_BIT;
      if ( -cy + cw < 0 ) mask |= CLIP_TOP_BIT;
      if (  cy + cw < 0 ) mask |= CLIP_BOTTOM_BIT;
      if (viewport_z_clip) {
	 if ( -cz + cw < 0 ) mask |= CLIP_FAR_BIT;
	 if (  cz + cw < 0 ) mask |= CLIP_NEAR_BIT;
      }
      clipMask[i] = mask;
      if ( mask ) {
	 c++;
	 tmpAndMask &= mask;
	 tmpOrMask |= mask;
	 vProj[i][0] = 0;
	 vProj[i][1] = 0;
	 vProj[i][2] = 0;
	 vProj[i][3] = 1;
      } else {
	 GLfloat oow = 1.0F / cw;
	 vProj[i][0] = cx * oow;
	 vProj[i][1] = cy * oow;
	 vProj[i][2] = cz * oow;
	 vProj[i][3] = oow;
      }
   }

   *orMask = tmpOrMask;
   *andMask = (GLubyte) (c < count ? 0 : tmpAndMask);

   proj_vec->flags |= VEC_SIZE_4;
   proj_vec->size = 4;
   proj_vec->count = clip_vec->count;
   return proj_vec;
}

/* Keep these here for now, even though we don't use them...
 */
static GLvector4f *ref_cliptest_points3( GLvector4f *clip_vec,
					 GLvector4f *proj_vec,
					 GLubyte clipMask[],
					 GLubyte *orMask,
					 GLubyte *andMask,
                                         GLboolean viewport_z_clip )
{
   const GLuint stride = clip_vec->stride;
   const GLuint count = clip_vec->count;
   const GLfloat *from = (GLfloat *)clip_vec->start;

   GLubyte tmpOrMask = *orMask;
   GLubyte tmpAndMask = *andMask;
   GLuint i;
   for ( i = 0 ; i < count ; i++, STRIDE_F(from, stride) ) {
      const GLfloat cx = from[0], cy = from[1], cz = from[2];
      GLubyte mask = 0;
      if ( cx >  1.0 )		mask |= CLIP_RIGHT_BIT;
      else if ( cx < -1.0 )	mask |= CLIP_LEFT_BIT;
      if ( cy >  1.0 )		mask |= CLIP_TOP_BIT;
      else if ( cy < -1.0 )	mask |= CLIP_BOTTOM_BIT;
      if (viewport_z_clip) {
         if ( cz >  1.0 )		mask |= CLIP_FAR_BIT;
         else if ( cz < -1.0 )	mask |= CLIP_NEAR_BIT;
      }
      clipMask[i] = mask;
      tmpOrMask |= mask;
      tmpAndMask &= mask;
   }

   *orMask = tmpOrMask;
   *andMask = tmpAndMask;
   return clip_vec;
}

static GLvector4f * ref_cliptest_points2( GLvector4f *clip_vec,
					  GLvector4f *proj_vec,
					  GLubyte clipMask[],
					  GLubyte *orMask,
					  GLubyte *andMask,
                                          GLboolean viewport_z_clip )
{
   const GLuint stride = clip_vec->stride;
   const GLuint count = clip_vec->count;
   const GLfloat *from = (GLfloat *)clip_vec->start;

   GLubyte tmpOrMask = *orMask;
   GLubyte tmpAndMask = *andMask;
   GLuint i;

   (void) viewport_z_clip;

   for ( i = 0 ; i < count ; i++, STRIDE_F(from, stride) ) {
      const GLfloat cx = from[0], cy = from[1];
      GLubyte mask = 0;
      if ( cx >  1.0 )		mask |= CLIP_RIGHT_BIT;
      else if ( cx < -1.0 )	mask |= CLIP_LEFT_BIT;
      if ( cy >  1.0 )		mask |= CLIP_TOP_BIT;
      else if ( cy < -1.0 )	mask |= CLIP_BOTTOM_BIT;
      clipMask[i] = mask;
      tmpOrMask |= mask;
      tmpAndMask &= mask;
   }

   *orMask = tmpOrMask;
   *andMask = tmpAndMask;
   return clip_vec;
}

static clip_func ref_cliptest[5] = {
   0,
   0,
   ref_cliptest_points2,
   ref_cliptest_points3,
   ref_cliptest_points4
};


/* =============================================================
 * Cliptest tests
 */

ALIGN16(static GLfloat, s[TEST_COUNT][4]);
ALIGN16(static GLfloat, d[TEST_COUNT][4]);
ALIGN16(static GLfloat, r[TEST_COUNT][4]);


/**
 * Check if X, Y or Z component of the coordinate is close to W, in terms
 * of the clip test.
 */
static GLboolean
xyz_close_to_w(const GLfloat c[4])
{
   float k = 0.0001;
   return (fabs(c[0] - c[3]) < k ||
           fabs(c[1] - c[3]) < k ||
           fabs(c[2] - c[3]) < k ||
           fabs(-c[0] - c[3]) < k ||
           fabs(-c[1] - c[3]) < k ||
           fabs(-c[2] - c[3]) < k);
}



static int test_cliptest_function( clip_func func, int np,
				   int psize, long *cycles )
{
   GLvector4f source[1], dest[1], ref[1];
   GLubyte dm[TEST_COUNT], dco, dca;
   GLubyte rm[TEST_COUNT], rco, rca;
   int i, j;
#ifdef  RUN_DEBUG_BENCHMARK
   int cycle_i;                /* the counter for the benchmarks we run */
#endif
   GLboolean viewport_z_clip = GL_TRUE;

   (void) cycles;

   if ( psize > 4 ) {
      _mesa_problem( NULL, "test_cliptest_function called with psize > 4\n" );
      return 0;
   }

   for ( i = 0 ; i < TEST_COUNT ; i++) {
      ASSIGN_4V( d[i], 0.0, 0.0, 0.0, 1.0 );
      ASSIGN_4V( s[i], 0.0, 0.0, 0.0, 1.0 );
      for ( j = 0 ; j < psize ; j++ )
         s[i][j] = rnd();
   }

   source->data = (GLfloat(*)[4])s;
   source->start = (GLfloat *)s;
   source->count = TEST_COUNT;
   source->stride = sizeof(s[0]);
   source->size = 4;
   source->flags = 0;

   dest->data = (GLfloat(*)[4])d;
   dest->start = (GLfloat *)d;
   dest->count = TEST_COUNT;
   dest->stride = sizeof(float[4]);
   dest->size = 0;
   dest->flags = 0;

   ref->data = (GLfloat(*)[4])r;
   ref->start = (GLfloat *)r;
   ref->count = TEST_COUNT;
   ref->stride = sizeof(float[4]);
   ref->size = 0;
   ref->flags = 0;

   dco = rco = 0;
   dca = rca = CLIP_FRUSTUM_BITS;

   ref_cliptest[psize]( source, ref, rm, &rco, &rca, viewport_z_clip );

   if ( mesa_profile ) {
      BEGIN_RACE( *cycles );
      func( source, dest, dm, &dco, &dca, viewport_z_clip );
      END_RACE( *cycles );
   }
   else {
      func( source, dest, dm, &dco, &dca, viewport_z_clip );
   }

   if ( dco != rco ) {
      printf( "\n-----------------------------\n" );
      printf( "dco = 0x%02x   rco = 0x%02x\n", dco, rco );
      return 0;
   }
   if ( dca != rca ) {
      printf( "\n-----------------------------\n" );
      printf( "dca = 0x%02x   rca = 0x%02x\n", dca, rca );
      return 0;
   }
   for ( i = 0 ; i < TEST_COUNT ; i++ ) {
      if ( dm[i] != rm[i] ) {
         GLfloat *c = source->start;
         STRIDE_F(c, source->stride * i);
         if (psize == 4 && xyz_close_to_w(c)) {
            /* The coordinate is very close to the clip plane.  The clipmask
             * may vary depending on code path, but that's OK.
             */
            continue;
         }
	 printf( "\n-----------------------------\n" );
	 printf( "mask[%d] = 0x%02x   ref mask[%d] = 0x%02x\n", i, dm[i], i,rm[i] );
         printf(" coord = %f, %f, %f, %f\n",
                c[0], c[1], c[2], c[3]);
	 return 0;
      }
   }

   /* Only verify output on projected points4 case.  FIXME: Do we need
    * to test other cases?
    */
   if ( np || psize < 4 )
      return 1;

   for ( i = 0 ; i < TEST_COUNT ; i++ ) {
      for ( j = 0 ; j < 4 ; j++ ) {
         if ( significand_match( d[i][j], r[i][j] ) < REQUIRED_PRECISION ) {
            printf( "\n-----------------------------\n" );
            printf( "(i = %i, j = %i)  dm = 0x%02x   rm = 0x%02x\n",
		    i, j, dm[i], rm[i] );
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
		    d[i][0], r[i][0], r[i][0]-d[i][0],
		    MAX_PRECISION - significand_match( d[i][0], r[i][0] ) );
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
		    d[i][1], r[i][1], r[i][1]-d[i][1],
		    MAX_PRECISION - significand_match( d[i][1], r[i][1] ) );
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
		    d[i][2], r[i][2], r[i][2]-d[i][2],
		    MAX_PRECISION - significand_match( d[i][2], r[i][2] ) );
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
		    d[i][3], r[i][3], r[i][3]-d[i][3],
		    MAX_PRECISION - significand_match( d[i][3], r[i][3] ) );
            return 0;
         }
      }
   }

   return 1;
}

void _math_test_all_cliptest_functions( char *description )
{
   int np, psize;
   long benchmark_tab[2][4];
   static int first_time = 1;

   if ( first_time ) {
      first_time = 0;
      mesa_profile = _mesa_getenv( "MESA_PROFILE" );
   }

#ifdef RUN_DEBUG_BENCHMARK
   if ( mesa_profile ) {
      if ( !counter_overhead ) {
	 INIT_COUNTER();
	 printf( "counter overhead: %ld cycles\n\n", counter_overhead );
      }
      printf( "cliptest results after hooking in %s functions:\n", description );
   }
#endif

#ifdef RUN_DEBUG_BENCHMARK
   if ( mesa_profile ) {
      printf( "\n\t" );
      for ( psize = 2 ; psize <= 4 ; psize++ ) {
	 printf( " p%d\t", psize );
      }
      printf( "\n--------------------------------------------------------\n\t" );
   }
#endif

   for ( np = 0 ; np < 2 ; np++ ) {
      for ( psize = 2 ; psize <= 4 ; psize++ ) {
	 clip_func func = clip_tab[np][psize];
	 long *cycles = &(benchmark_tab[np][psize-1]);

	 if ( test_cliptest_function( func, np, psize, cycles ) == 0 ) {
	    char buf[100];
	    sprintf( buf, "%s[%d] failed test (%s)",
		     cnames[np], psize, description );
	    _mesa_problem( NULL, "%s", buf );
	 }
#ifdef RUN_DEBUG_BENCHMARK
	 if ( mesa_profile )
	    printf( " %li\t", benchmark_tab[np][psize-1] );
#endif
      }
#ifdef RUN_DEBUG_BENCHMARK
      if ( mesa_profile )
	 printf( " | [%s]\n\t", cstrings[np] );
#endif
   }
#ifdef RUN_DEBUG_BENCHMARK
   if ( mesa_profile )
      printf( "\n" );
#endif
}


#endif /* DEBUG_MATH */
@


1.7
log
@Merge Mesa 10.2.9
@
text
@@


1.6
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d358 1
a358 1
      mesa_profile = getenv( "MESA_PROFILE" );
@


1.5
log
@Merge Mesa 9.2.0
@
text
@d358 1
a358 1
      mesa_profile = _mesa_getenv( "MESA_PROFILE" );
@


1.4
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.1
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d211 18
d302 8
d311 3
a313 2
	 printf( "(i = %i)\n", i );
	 printf( "dm = 0x%02x   rm = 0x%02x\n", dm[i], rm[i] );
d390 1
a390 1
	    _mesa_problem( NULL, buf );
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d70 2
a71 1
					 GLubyte *andMask )
d91 4
a94 2
      if ( -cz + cw < 0 ) mask |= CLIP_FAR_BIT;
      if (  cz + cw < 0 ) mask |= CLIP_NEAR_BIT;
d128 2
a129 1
					 GLubyte *andMask )
d145 4
a148 2
      if ( cz >  1.0 )		mask |= CLIP_FAR_BIT;
      else if ( cz < -1.0 )	mask |= CLIP_NEAR_BIT;
d163 2
a164 1
					  GLubyte *andMask )
d173 3
d221 1
d261 1
a261 1
   ref_cliptest[psize]( source, ref, rm, &rco, &rca );
d265 1
a265 1
      func( source, dest, dm, &dco, &dca );
d269 1
a269 1
      func( source, dest, dm, &dco, &dca );
d273 2
a274 2
      _mesa_printf( "\n-----------------------------\n" );
      _mesa_printf( "dco = 0x%02x   rco = 0x%02x\n", dco, rco );
d278 2
a279 2
      _mesa_printf( "\n-----------------------------\n" );
      _mesa_printf( "dca = 0x%02x   rca = 0x%02x\n", dca, rca );
d284 3
a286 3
	 _mesa_printf( "\n-----------------------------\n" );
	 _mesa_printf( "(i = %i)\n", i );
	 _mesa_printf( "dm = 0x%02x   rm = 0x%02x\n", dm[i], rm[i] );
d300 2
a301 2
            _mesa_printf( "\n-----------------------------\n" );
            _mesa_printf( "(i = %i, j = %i)  dm = 0x%02x   rm = 0x%02x\n",
d303 1
a303 1
            _mesa_printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d306 1
a306 1
            _mesa_printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d309 1
a309 1
            _mesa_printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d312 1
a312 1
            _mesa_printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d338 1
a338 1
	 _mesa_printf( "counter overhead: %ld cycles\n\n", counter_overhead );
d340 1
a340 1
      _mesa_printf( "cliptest results after hooking in %s functions:\n", description );
d346 1
a346 1
      _mesa_printf( "\n\t" );
d348 1
a348 1
	 _mesa_printf( " p%d\t", psize );
d350 1
a350 1
      _mesa_printf( "\n--------------------------------------------------------\n\t" );
d361 1
a361 1
	    _mesa_sprintf( buf, "%s[%d] failed test (%s)",
d367 1
a367 1
	    _mesa_printf( " %li\t", benchmark_tab[np][psize-1] );
d372 1
a372 1
	 _mesa_printf( " | [%s]\n\t", cstrings[np] );
d377 1
a377 1
      _mesa_printf( "\n" );
@


1.1
log
@Initial revision
@
text
@d28 4
a31 4
#include "glheader.h"
#include "context.h"
#include "macros.h"
#include "imports.h"
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d28 4
a31 4
#include "main/glheader.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/imports.h"
d70 1
a70 2
					 GLubyte *andMask,
					 GLboolean viewport_z_clip )
d90 2
a91 4
      if (viewport_z_clip) {
	 if ( -cz + cw < 0 ) mask |= CLIP_FAR_BIT;
	 if (  cz + cw < 0 ) mask |= CLIP_NEAR_BIT;
      }
d125 1
a125 2
					 GLubyte *andMask,
                                         GLboolean viewport_z_clip )
d141 2
a142 4
      if (viewport_z_clip) {
         if ( cz >  1.0 )		mask |= CLIP_FAR_BIT;
         else if ( cz < -1.0 )	mask |= CLIP_NEAR_BIT;
      }
d157 1
a157 2
					  GLubyte *andMask,
                                          GLboolean viewport_z_clip )
a165 3

   (void) viewport_z_clip;

a200 18
/**
 * Check if X, Y or Z component of the coordinate is close to W, in terms
 * of the clip test.
 */
static GLboolean
xyz_close_to_w(const GLfloat c[4])
{
   float k = 0.0001;
   return (fabs(c[0] - c[3]) < k ||
           fabs(c[1] - c[3]) < k ||
           fabs(c[2] - c[3]) < k ||
           fabs(-c[0] - c[3]) < k ||
           fabs(-c[1] - c[3]) < k ||
           fabs(-c[2] - c[3]) < k);
}



a210 1
   GLboolean viewport_z_clip = GL_TRUE;
d250 1
a250 1
   ref_cliptest[psize]( source, ref, rm, &rco, &rca, viewport_z_clip );
d254 1
a254 1
      func( source, dest, dm, &dco, &dca, viewport_z_clip );
d258 1
a258 1
      func( source, dest, dm, &dco, &dca, viewport_z_clip );
d262 2
a263 2
      printf( "\n-----------------------------\n" );
      printf( "dco = 0x%02x   rco = 0x%02x\n", dco, rco );
d267 2
a268 2
      printf( "\n-----------------------------\n" );
      printf( "dca = 0x%02x   rca = 0x%02x\n", dca, rca );
d273 3
a275 12
         GLfloat *c = source->start;
         STRIDE_F(c, source->stride * i);
         if (psize == 4 && xyz_close_to_w(c)) {
            /* The coordinate is very close to the clip plane.  The clipmask
             * may vary depending on code path, but that's OK.
             */
            continue;
         }
	 printf( "\n-----------------------------\n" );
	 printf( "mask[%d] = 0x%02x   ref mask[%d] = 0x%02x\n", i, dm[i], i,rm[i] );
         printf(" coord = %f, %f, %f, %f\n",
                c[0], c[1], c[2], c[3]);
d289 2
a290 2
            printf( "\n-----------------------------\n" );
            printf( "(i = %i, j = %i)  dm = 0x%02x   rm = 0x%02x\n",
d292 1
a292 1
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d295 1
a295 1
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d298 1
a298 1
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d301 1
a301 1
            printf( "%f \t %f \t [diff = %e - %i bit missed]\n",
d327 1
a327 1
	 printf( "counter overhead: %ld cycles\n\n", counter_overhead );
d329 1
a329 1
      printf( "cliptest results after hooking in %s functions:\n", description );
d335 1
a335 1
      printf( "\n\t" );
d337 1
a337 1
	 printf( " p%d\t", psize );
d339 1
a339 1
      printf( "\n--------------------------------------------------------\n\t" );
d350 1
a350 1
	    sprintf( buf, "%s[%d] failed test (%s)",
d352 1
a352 1
	    _mesa_problem( NULL, "%s", buf );
d356 1
a356 1
	    printf( " %li\t", benchmark_tab[np][psize-1] );
d361 1
a361 1
	 printf( " | [%s]\n\t", cstrings[np] );
d366 1
a366 1
      printf( "\n" );
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d358 1
a358 1
      mesa_profile = getenv( "MESA_PROFILE" );
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d358 1
a358 1
      mesa_profile = _mesa_getenv( "MESA_PROFILE" );
@


