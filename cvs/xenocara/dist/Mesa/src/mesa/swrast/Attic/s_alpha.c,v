head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.54;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.06.47;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.05;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.28;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \file swrast/s_alpha.c
 * \brief Functions to apply alpha test.
 */

#include "main/glheader.h"
#include "main/context.h"
#include "main/colormac.h"
#include "main/macros.h"

#include "s_alpha.h"
#include "s_context.h"


#define ALPHA_TEST(ALPHA, LOOP_CODE)		\
do {						\
   switch (ctx->Color.AlphaFunc) {		\
      case GL_LESS:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA < ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_LEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA <= ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_GEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA >= ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_GREATER:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA > ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_NOTEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA != ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_EQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA == ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      default:					\
         _mesa_problem(ctx, "Invalid alpha test in _swrast_alpha_test" ); \
         return 0;				\
   }						\
} while (0)



/**
 * Perform the alpha test for an array of pixels.
 * For pixels that fail the test, mask[i] will be set to 0.
 * \return  0 if all pixels in the span failed the alpha test,
 *          1 if one or more pixels passed the alpha test.
 */
GLint
_swrast_alpha_test(const struct gl_context *ctx, SWspan *span)
{
   const GLuint n = span->end;
   GLubyte *mask = span->array->mask;
   GLuint i;

   if (ctx->Color.AlphaFunc == GL_ALWAYS) {
      /* do nothing */
      return 1;
   }
   else if (ctx->Color.AlphaFunc == GL_NEVER) {
      /* All pixels failed - caller should check for this return value and
       * act accordingly.
       */
      span->writeAll = GL_FALSE;
      return 0;
   }

   if (span->arrayMask & SPAN_RGBA) {
      /* Use array's alpha values */
      if (span->array->ChanType == GL_UNSIGNED_BYTE) {
         GLubyte (*rgba)[4] = span->array->rgba8;
         GLubyte ref;
         CLAMPED_FLOAT_TO_UBYTE(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(rgba[i][ACOMP], ;);
      }
      else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
         GLushort (*rgba)[4] = span->array->rgba16;
         GLushort ref;
         CLAMPED_FLOAT_TO_USHORT(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(rgba[i][ACOMP], ;);
      }
      else {
         GLfloat (*rgba)[4] = span->array->attribs[VARYING_SLOT_COL0];
         const GLfloat ref = ctx->Color.AlphaRef;
         ALPHA_TEST(rgba[i][ACOMP], ;);
      }
   }
   else {
      /* Interpolate alpha values */
      ASSERT(span->interpMask & SPAN_RGBA);
      if (span->array->ChanType == GL_UNSIGNED_BYTE) {
         const GLfixed alphaStep = span->alphaStep;
         GLfixed alpha = span->alpha;
         GLubyte ref;
         CLAMPED_FLOAT_TO_UBYTE(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(FixedToInt(alpha), alpha += alphaStep);
      }
      else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
         const GLfixed alphaStep = span->alphaStep;
         GLfixed alpha = span->alpha;
         GLushort ref;
         CLAMPED_FLOAT_TO_USHORT(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(FixedToInt(alpha), alpha += alphaStep);
      }
      else {
         const GLfloat alphaStep = FixedToFloat(span->alphaStep);
         GLfloat alpha = FixedToFloat(span->alpha);
         const GLfloat ref = ctx->Color.AlphaRef;
         ALPHA_TEST(alpha, alpha += alphaStep);
      }
   }

   span->writeAll = GL_FALSE;

   /* XXX examine mask[] values? */
   return 1;
}
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.5.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d126 1
a126 1
         GLfloat (*rgba)[4] = span->array->attribs[FRAG_ATTRIB_COL0];
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d93 1
a93 1
_swrast_alpha_test(const GLcontext *ctx, SWspan *span)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d149 2
a150 2
         const GLfloat alphaStep = span->alphaStep;
         GLfloat alpha = span->alpha;
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d30 4
a33 4
#include "glheader.h"
#include "context.h"
#include "colormac.h"
#include "macros.h"
@


1.1
log
@Initial revision
@
text
@a0 1

d3 1
a3 1
 * Version:  4.1
d5 1
a5 1
 * Copyright (C) 1999-2002  Brian Paul   All Rights Reserved.
d39 47
d87 4
a90 5
 * \fn GLint _swrast_alpha_test( const GLcontext *ctx, struct sw_span *span )
 * \brief Apply the alpha test to a span of pixels.
 * \return
 *      - "0" = all pixels in the span failed the alpha test.
 *      - "1" = one or more pixels passed the alpha test.
d93 1
a93 1
_swrast_alpha_test( const GLcontext *ctx, struct sw_span *span )
a94 2
   const GLchan (*rgba)[4] = (const GLchan (*)[4]) span->array->rgba;
   GLchan ref;
d99 11
a109 1
   CLAMPED_FLOAT_TO_CHAN(ref, ctx->Color.AlphaRef);
d112 17
a128 36
      /* Use the array values */
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] < ref);
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] <= ref);
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] >= ref);
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] > ref);
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] != ref);
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++)
               mask[i] &= (rgba[i][ACOMP] == ref);
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in _swrast_alpha_test" );
            return 0;
d132 1
a132 4
      /* Use the interpolation values */
#if CHAN_TYPE == GL_FLOAT
      const GLfloat alphaStep = span->alphaStep;
      GLfloat alpha = span->alpha;
d134 19
a152 100
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (alpha == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
      }
#else
      /* 8 or 16-bit channel interpolation */
      const GLfixed alphaStep = span->alphaStep;
      GLfixed alpha = span->alpha;
      ASSERT(span->interpMask & SPAN_RGBA);
      switch (ctx->Color.AlphaFunc) {
         case GL_LESS:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) < ref);
               alpha += alphaStep;
            }
            break;
         case GL_LEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) <= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) >= ref);
               alpha += alphaStep;
            }
            break;
         case GL_GREATER:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) > ref);
               alpha += alphaStep;
            }
            break;
         case GL_NOTEQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) != ref);
               alpha += alphaStep;
            }
            break;
         case GL_EQUAL:
            for (i = 0; i < n; i++) {
               mask[i] &= (FixedToChan(alpha) == ref);
               alpha += alphaStep;
            }
            break;
         case GL_ALWAYS:
            /* do nothing */
            return 1;
         case GL_NEVER:
            /* caller should check for zero! */
            span->writeAll = GL_FALSE;
            return 0;
         default:
            _mesa_problem( ctx, "Invalid alpha test in gl_alpha_test" );
            return 0;
a153 1
#endif /* CHAN_TYPE */
a155 11
#if 0
   /* XXXX This causes conformance failures!!!! */
   while ((span->start <= span->end)  &&
          (mask[span->start] == 0))
     span->start ++;

   while ((span->end >= span->start)  &&
          (mask[span->end] == 0))
     span->end --;
#endif

d158 2
a159 4
   if (span->start >= span->end)
     return 0;
   else
     return 1;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d1 1
d4 1
a4 1
 * Version:  6.5.2
d6 1
a6 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
a39 47
#define ALPHA_TEST(ALPHA, LOOP_CODE)		\
do {						\
   switch (ctx->Color.AlphaFunc) {		\
      case GL_LESS:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA < ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_LEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA <= ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_GEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA >= ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_GREATER:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA > ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_NOTEQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA != ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      case GL_EQUAL:				\
         for (i = 0; i < n; i++) {		\
            mask[i] &= (ALPHA == ref);		\
            LOOP_CODE;				\
         }					\
         break;					\
      default:					\
         _mesa_problem(ctx, "Invalid alpha test in _swrast_alpha_test" ); \
         return 0;				\
   }						\
} while (0)



d41 5
a45 4
 * Perform the alpha test for an array of pixels.
 * For pixels that fail the test, mask[i] will be set to 0.
 * \return  0 if all pixels in the span failed the alpha test,
 *          1 if one or more pixels passed the alpha test.
d48 1
a48 1
_swrast_alpha_test(const GLcontext *ctx, SWspan *span)
d50 2
d56 1
a56 11
   if (ctx->Color.AlphaFunc == GL_ALWAYS) {
      /* do nothing */
      return 1;
   }
   else if (ctx->Color.AlphaFunc == GL_NEVER) {
      /* All pixels failed - caller should check for this return value and
       * act accordingly.
       */
      span->writeAll = GL_FALSE;
      return 0;
   }
d59 36
a94 17
      /* Use array's alpha values */
      if (span->array->ChanType == GL_UNSIGNED_BYTE) {
         GLubyte (*rgba)[4] = span->array->color.sz1.rgba;
         GLubyte ref;
         CLAMPED_FLOAT_TO_UBYTE(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(rgba[i][ACOMP], ;);
      }
      else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
         GLushort (*rgba)[4] = span->array->color.sz2.rgba;
         GLushort ref;
         CLAMPED_FLOAT_TO_USHORT(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(rgba[i][ACOMP], ;);
      }
      else {
         GLfloat (*rgba)[4] = span->array->color.sz4.rgba;
         const GLfloat ref = ctx->Color.AlphaRef;
         ALPHA_TEST(rgba[i][ACOMP], ;);
d98 57
a154 1
      /* Interpolate alpha values */
d156 47
a202 19
      if (span->array->ChanType == GL_UNSIGNED_BYTE) {
         const GLfixed alphaStep = span->alphaStep;
         GLfixed alpha = span->alpha;
         GLubyte ref;
         CLAMPED_FLOAT_TO_UBYTE(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(FixedToInt(alpha), alpha += alphaStep);
      }
      else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
         const GLfixed alphaStep = span->alphaStep;
         GLfixed alpha = span->alpha;
         GLushort ref;
         CLAMPED_FLOAT_TO_USHORT(ref, ctx->Color.AlphaRef);
         ALPHA_TEST(FixedToInt(alpha), alpha += alphaStep);
      }
      else {
         const GLfloat alphaStep = span->alphaStep;
         GLfloat alpha = span->alpha;
         const GLfloat ref = ctx->Color.AlphaRef;
         ALPHA_TEST(alpha, alpha += alphaStep);
d204 1
d207 11
d220 4
a223 2
   /* XXX examine mask[] values? */
   return 1;
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d126 1
a126 1
         GLfloat (*rgba)[4] = span->array->attribs[FRAG_ATTRIB_COL0];
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d30 4
a33 4
#include "main/glheader.h"
#include "main/context.h"
#include "main/colormac.h"
#include "main/macros.h"
d93 1
a93 1
_swrast_alpha_test(const struct gl_context *ctx, SWspan *span)
d114 1
a114 1
         GLubyte (*rgba)[4] = span->array->rgba8;
d120 1
a120 1
         GLushort (*rgba)[4] = span->array->rgba16;
d149 2
a150 2
         const GLfloat alphaStep = FixedToFloat(span->alphaStep);
         GLfloat alpha = FixedToFloat(span->alpha);
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d126 1
a126 1
         GLfloat (*rgba)[4] = span->array->attribs[VARYING_SLOT_COL0];
@


