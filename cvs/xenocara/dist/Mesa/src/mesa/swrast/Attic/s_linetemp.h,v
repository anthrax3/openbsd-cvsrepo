head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.06.49;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.09;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.31;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/*
 * Line Rasterizer Template
 *
 * This file is #include'd to generate custom line rasterizers.
 *
 * The following macros may be defined to indicate what auxillary information
 * must be interplated along the line:
 *    INTERP_Z        - if defined, interpolate Z values
 *    INTERP_ATTRIBS  - if defined, interpolate attribs (texcoords, varying, etc)
 *
 * When one can directly address pixels in the color buffer the following
 * macros can be defined and used to directly compute pixel addresses during
 * rasterization (see pixelPtr):
 *    PIXEL_TYPE          - the datatype of a pixel (GLubyte, GLushort, GLuint)
 *    BYTES_PER_ROW       - number of bytes per row in the color buffer
 *    PIXEL_ADDRESS(X,Y)  - returns the address of pixel at (X,Y) where
 *                          Y==0 at bottom of screen and increases upward.
 *
 * Similarly, for direct depth buffer access, this type is used for depth
 * buffer addressing:
 *    DEPTH_TYPE          - either GLushort or GLuint
 *
 * Optionally, one may provide one-time setup code
 *    SETUP_CODE    - code which is to be executed once per line
 *
 * To actually "plot" each pixel the PLOT macro must be defined...
 *    PLOT(X,Y) - code to plot a pixel.  Example:
 *                if (Z < *zPtr) {
 *                   *zPtr = Z;
 *                   color = pack_rgb( FixedToInt(r0), FixedToInt(g0),
 *                                     FixedToInt(b0) );
 *                   put_pixel( X, Y, color );
 *                }
 *
 * This code was designed for the origin to be in the lower-left corner.
 *
 */


static void
NAME( struct gl_context *ctx, const SWvertex *vert0, const SWvertex *vert1 )
{
   const SWcontext *swrast = SWRAST_CONTEXT(ctx);
   SWspan span;
   GLuint interpFlags = 0;
   GLint x0 = (GLint) vert0->attrib[VARYING_SLOT_POS][0];
   GLint x1 = (GLint) vert1->attrib[VARYING_SLOT_POS][0];
   GLint y0 = (GLint) vert0->attrib[VARYING_SLOT_POS][1];
   GLint y1 = (GLint) vert1->attrib[VARYING_SLOT_POS][1];
   GLint dx, dy;
   GLint numPixels;
   GLint xstep, ystep;
#if defined(DEPTH_TYPE)
   const GLint depthBits = ctx->DrawBuffer->Visual.depthBits;
   const GLint fixedToDepthShift = depthBits <= 16 ? FIXED_SHIFT : 0;
   struct gl_renderbuffer *zrb = ctx->DrawBuffer->Attachment[BUFFER_DEPTH].Renderbuffer;
#define FixedToDepth(F)  ((F) >> fixedToDepthShift)
   GLint zPtrXstep, zPtrYstep;
   DEPTH_TYPE *zPtr;
#elif defined(INTERP_Z)
   const GLint depthBits = ctx->DrawBuffer->Visual.depthBits;
#endif
#ifdef PIXEL_ADDRESS
   PIXEL_TYPE *pixelPtr;
   GLint pixelXstep, pixelYstep;
#endif

#ifdef SETUP_CODE
   SETUP_CODE
#endif

   (void) swrast;

   /* Cull primitives with malformed coordinates.
    */
   {
      GLfloat tmp = vert0->attrib[VARYING_SLOT_POS][0] + vert0->attrib[VARYING_SLOT_POS][1]
                  + vert1->attrib[VARYING_SLOT_POS][0] + vert1->attrib[VARYING_SLOT_POS][1];
      if (IS_INF_OR_NAN(tmp))
	 return;
   }

   /*
   printf("%s():\n", __FUNCTION__);
   printf(" (%f, %f, %f) -> (%f, %f, %f)\n",
          vert0->attrib[VARYING_SLOT_POS][0],
          vert0->attrib[VARYING_SLOT_POS][1],
          vert0->attrib[VARYING_SLOT_POS][2],
          vert1->attrib[VARYING_SLOT_POS][0],
          vert1->attrib[VARYING_SLOT_POS][1],
          vert1->attrib[VARYING_SLOT_POS][2]);
   printf(" (%d, %d, %d) -> (%d, %d, %d)\n",
          vert0->color[0], vert0->color[1], vert0->color[2], 
          vert1->color[0], vert1->color[1], vert1->color[2]);
   printf(" (%d, %d, %d) -> (%d, %d, %d)\n",
          vert0->specular[0], vert0->specular[1], vert0->specular[2], 
          vert1->specular[0], vert1->specular[1], vert1->specular[2]);
   */

/*
 * Despite being clipped to the view volume, the line's window coordinates
 * may just lie outside the window bounds.  That is, if the legal window
 * coordinates are [0,W-1][0,H-1], it's possible for x==W and/or y==H.
 * This quick and dirty code nudges the endpoints inside the window if
 * necessary.
 */
#ifdef CLIP_HACK
   {
      GLint w = ctx->DrawBuffer->Width;
      GLint h = ctx->DrawBuffer->Height;
      if ((x0==w) | (x1==w)) {
         if ((x0==w) & (x1==w))
           return;
         x0 -= x0==w;
         x1 -= x1==w;
      }
      if ((y0==h) | (y1==h)) {
         if ((y0==h) & (y1==h))
           return;
         y0 -= y0==h;
         y1 -= y1==h;
      }
   }
#endif

   dx = x1 - x0;
   dy = y1 - y0;
   if (dx == 0 && dy == 0)
      return;

   /*
   printf("%s %d,%d  %g %g %g %g  %g %g %g %g\n", __FUNCTION__, dx, dy,
          vert0->attrib[VARYING_SLOT_COL1][0],
          vert0->attrib[VARYING_SLOT_COL1][1],
          vert0->attrib[VARYING_SLOT_COL1][2],
          vert0->attrib[VARYING_SLOT_COL1][3],
          vert1->attrib[VARYING_SLOT_COL1][0],
          vert1->attrib[VARYING_SLOT_COL1][1],
          vert1->attrib[VARYING_SLOT_COL1][2],
          vert1->attrib[VARYING_SLOT_COL1][3]);
   */

#ifdef DEPTH_TYPE
   zPtr = (DEPTH_TYPE *) _swrast_pixel_address(zrb, x0, y0);
#endif
#ifdef PIXEL_ADDRESS
   pixelPtr = (PIXEL_TYPE *) PIXEL_ADDRESS(x0,y0);
#endif

   if (dx<0) {
      dx = -dx;   /* make positive */
      xstep = -1;
#ifdef DEPTH_TYPE
      zPtrXstep = -((GLint)sizeof(DEPTH_TYPE));
#endif
#ifdef PIXEL_ADDRESS
      pixelXstep = -((GLint)sizeof(PIXEL_TYPE));
#endif
   }
   else {
      xstep = 1;
#ifdef DEPTH_TYPE
      zPtrXstep = ((GLint)sizeof(DEPTH_TYPE));
#endif
#ifdef PIXEL_ADDRESS
      pixelXstep = ((GLint)sizeof(PIXEL_TYPE));
#endif
   }

   if (dy<0) {
      dy = -dy;   /* make positive */
      ystep = -1;
#ifdef DEPTH_TYPE
      zPtrYstep = -((GLint) (ctx->DrawBuffer->Width * sizeof(DEPTH_TYPE)));
#endif
#ifdef PIXEL_ADDRESS
      pixelYstep = BYTES_PER_ROW;
#endif
   }
   else {
      ystep = 1;
#ifdef DEPTH_TYPE
      zPtrYstep = (GLint) (ctx->DrawBuffer->Width * sizeof(DEPTH_TYPE));
#endif
#ifdef PIXEL_ADDRESS
      pixelYstep = -(BYTES_PER_ROW);
#endif
   }

   ASSERT(dx >= 0);
   ASSERT(dy >= 0);

   numPixels = MAX2(dx, dy);

   /*
    * Span setup: compute start and step values for all interpolated values.
    */
   interpFlags |= SPAN_RGBA;
   if (ctx->Light.ShadeModel == GL_SMOOTH) {
      span.red   = ChanToFixed(vert0->color[0]);
      span.green = ChanToFixed(vert0->color[1]);
      span.blue  = ChanToFixed(vert0->color[2]);
      span.alpha = ChanToFixed(vert0->color[3]);
      span.redStep   = (ChanToFixed(vert1->color[0]) - span.red  ) / numPixels;
      span.greenStep = (ChanToFixed(vert1->color[1]) - span.green) / numPixels;
      span.blueStep  = (ChanToFixed(vert1->color[2]) - span.blue ) / numPixels;
      span.alphaStep = (ChanToFixed(vert1->color[3]) - span.alpha) / numPixels;
   }
   else {
      span.red   = ChanToFixed(vert1->color[0]);
      span.green = ChanToFixed(vert1->color[1]);
      span.blue  = ChanToFixed(vert1->color[2]);
      span.alpha = ChanToFixed(vert1->color[3]);
      span.redStep   = 0;
      span.greenStep = 0;
      span.blueStep  = 0;
      span.alphaStep = 0;
   }
#if defined(INTERP_Z) || defined(DEPTH_TYPE)
   interpFlags |= SPAN_Z;
   {
      if (depthBits <= 16) {
         span.z = FloatToFixed(vert0->attrib[VARYING_SLOT_POS][2]) + FIXED_HALF;
         span.zStep = FloatToFixed(  vert1->attrib[VARYING_SLOT_POS][2]
                                   - vert0->attrib[VARYING_SLOT_POS][2]) / numPixels;
      }
      else {
         /* don't use fixed point */
         span.z = (GLuint) vert0->attrib[VARYING_SLOT_POS][2];
         span.zStep = (GLint) ((  vert1->attrib[VARYING_SLOT_POS][2]
                                - vert0->attrib[VARYING_SLOT_POS][2]) / numPixels);
      }
   }
#endif
#if defined(INTERP_ATTRIBS)
   {
      const GLfloat invLen = 1.0F / numPixels;
      const GLfloat invw0 = vert0->attrib[VARYING_SLOT_POS][3];
      const GLfloat invw1 = vert1->attrib[VARYING_SLOT_POS][3];

      span.attrStart[VARYING_SLOT_POS][3] = invw0;
      span.attrStepX[VARYING_SLOT_POS][3] = (invw1 - invw0) * invLen;
      span.attrStepY[VARYING_SLOT_POS][3] = 0.0;

      ATTRIB_LOOP_BEGIN
         if (swrast->_InterpMode[attr] == GL_FLAT) {
            COPY_4V(span.attrStart[attr], vert1->attrib[attr]);
            ASSIGN_4V(span.attrStepX[attr], 0.0, 0.0, 0.0, 0.0);
         }
         else {
            GLuint c;
            for (c = 0; c < 4; c++) {
               float da;
               span.attrStart[attr][c] = invw0 * vert0->attrib[attr][c];
               da = (invw1 * vert1->attrib[attr][c]) - span.attrStart[attr][c];
               span.attrStepX[attr][c] = da * invLen;
            }
         }
         ASSIGN_4V(span.attrStepY[attr], 0.0, 0.0, 0.0, 0.0);
      ATTRIB_LOOP_END
   }
#endif

   INIT_SPAN(span, GL_LINE);
   span.end = numPixels;
   span.interpMask = interpFlags;
   span.arrayMask = SPAN_XY;

   span.facing = swrast->PointLineFacing;


   /*
    * Draw
    */

   if (dx > dy) {
      /*** X-major line ***/
      GLint i;
      GLint errorInc = dy+dy;
      GLint error = errorInc-dx;
      GLint errorDec = error-dx;

      for (i = 0; i < dx; i++) {
#ifdef DEPTH_TYPE
         GLuint Z = FixedToDepth(span.z);
#endif
#ifdef PLOT
         PLOT( x0, y0 );
#else
         span.array->x[i] = x0;
         span.array->y[i] = y0;
#endif
         x0 += xstep;
#ifdef DEPTH_TYPE
         zPtr = (DEPTH_TYPE *) ((GLubyte*) zPtr + zPtrXstep);
         span.z += span.zStep;
#endif
#ifdef PIXEL_ADDRESS
         pixelPtr = (PIXEL_TYPE*) ((GLubyte*) pixelPtr + pixelXstep);
#endif
         if (error < 0) {
            error += errorInc;
         }
         else {
            error += errorDec;
            y0 += ystep;
#ifdef DEPTH_TYPE
            zPtr = (DEPTH_TYPE *) ((GLubyte*) zPtr + zPtrYstep);
#endif
#ifdef PIXEL_ADDRESS
            pixelPtr = (PIXEL_TYPE*) ((GLubyte*) pixelPtr + pixelYstep);
#endif
         }
      }
   }
   else {
      /*** Y-major line ***/
      GLint i;
      GLint errorInc = dx+dx;
      GLint error = errorInc-dy;
      GLint errorDec = error-dy;

      for (i=0;i<dy;i++) {
#ifdef DEPTH_TYPE
         GLuint Z = FixedToDepth(span.z);
#endif
#ifdef PLOT
         PLOT( x0, y0 );
#else
         span.array->x[i] = x0;
         span.array->y[i] = y0;
#endif
         y0 += ystep;
#ifdef DEPTH_TYPE
         zPtr = (DEPTH_TYPE *) ((GLubyte*) zPtr + zPtrYstep);
         span.z += span.zStep;
#endif
#ifdef PIXEL_ADDRESS
         pixelPtr = (PIXEL_TYPE*) ((GLubyte*) pixelPtr + pixelYstep);
#endif
         if (error<0) {
            error += errorInc;
         }
         else {
            error += errorDec;
            x0 += xstep;
#ifdef DEPTH_TYPE
            zPtr = (DEPTH_TYPE *) ((GLubyte*) zPtr + zPtrXstep);
#endif
#ifdef PIXEL_ADDRESS
            pixelPtr = (PIXEL_TYPE*) ((GLubyte*) pixelPtr + pixelXstep);
#endif
         }
      }
   }

#ifdef RENDER_SPAN
   RENDER_SPAN( span );
#endif

   (void)span;

}


#undef NAME
#undef INTERP_Z
#undef INTERP_ATTRIBS
#undef PIXEL_ADDRESS
#undef PIXEL_TYPE
#undef DEPTH_TYPE
#undef BYTES_PER_ROW
#undef SETUP_CODE
#undef PLOT
#undef CLIP_HACK
#undef FixedToDepth
#undef RENDER_SPAN
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  7.0
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d71 4
a74 4
   GLint x0 = (GLint) vert0->attrib[FRAG_ATTRIB_WPOS][0];
   GLint x1 = (GLint) vert1->attrib[FRAG_ATTRIB_WPOS][0];
   GLint y0 = (GLint) vert0->attrib[FRAG_ATTRIB_WPOS][1];
   GLint y1 = (GLint) vert1->attrib[FRAG_ATTRIB_WPOS][1];
d102 2
a103 2
      GLfloat tmp = vert0->attrib[FRAG_ATTRIB_WPOS][0] + vert0->attrib[FRAG_ATTRIB_WPOS][1]
                  + vert1->attrib[FRAG_ATTRIB_WPOS][0] + vert1->attrib[FRAG_ATTRIB_WPOS][1];
d111 6
a116 6
          vert0->attrib[FRAG_ATTRIB_WPOS][0],
          vert0->attrib[FRAG_ATTRIB_WPOS][1],
          vert0->attrib[FRAG_ATTRIB_WPOS][2],
          vert1->attrib[FRAG_ATTRIB_WPOS][0],
          vert1->attrib[FRAG_ATTRIB_WPOS][1],
          vert1->attrib[FRAG_ATTRIB_WPOS][2]);
d158 8
a165 8
          vert0->attrib[FRAG_ATTRIB_COL1][0],
          vert0->attrib[FRAG_ATTRIB_COL1][1],
          vert0->attrib[FRAG_ATTRIB_COL1][2],
          vert0->attrib[FRAG_ATTRIB_COL1][3],
          vert1->attrib[FRAG_ATTRIB_COL1][0],
          vert1->attrib[FRAG_ATTRIB_COL1][1],
          vert1->attrib[FRAG_ATTRIB_COL1][2],
          vert1->attrib[FRAG_ATTRIB_COL1][3]);
d169 1
a169 1
   zPtr = (DEPTH_TYPE *) zrb->GetPointer(ctx, zrb, x0, y0);
d248 3
a250 3
         span.z = FloatToFixed(vert0->attrib[FRAG_ATTRIB_WPOS][2]) + FIXED_HALF;
         span.zStep = FloatToFixed(  vert1->attrib[FRAG_ATTRIB_WPOS][2]
                                   - vert0->attrib[FRAG_ATTRIB_WPOS][2]) / numPixels;
d254 3
a256 3
         span.z = (GLuint) vert0->attrib[FRAG_ATTRIB_WPOS][2];
         span.zStep = (GLint) ((  vert1->attrib[FRAG_ATTRIB_WPOS][2]
                                - vert0->attrib[FRAG_ATTRIB_WPOS][2]) / numPixels);
d263 2
a264 2
      const GLfloat invw0 = vert0->attrib[FRAG_ATTRIB_WPOS][3];
      const GLfloat invw1 = vert1->attrib[FRAG_ATTRIB_WPOS][3];
d266 3
a268 3
      span.attrStart[FRAG_ATTRIB_WPOS][3] = invw0;
      span.attrStepX[FRAG_ATTRIB_WPOS][3] = (invw1 - invw0) * invLen;
      span.attrStepY[FRAG_ATTRIB_WPOS][3] = 0.0;
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d66 1
a66 1
NAME( GLcontext *ctx, const SWvertex *vert0, const SWvertex *vert1 )
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a33 2
 *    INTERP_RGBA     - if defined, interpolate RGBA values
 *    INTERP_INDEX    - if defined, interpolate color index values
a86 1
/*ctx->Visual.depthBits;*/
a222 1
#ifdef INTERP_RGBA
a243 13
#endif
#ifdef INTERP_INDEX
   interpFlags |= SPAN_INDEX;
   if (ctx->Light.ShadeModel == GL_SMOOTH) {
      span.index = FloatToFixed(vert0->attrib[FRAG_ATTRIB_CI][0]);
      span.indexStep = FloatToFixed(  vert1->attrib[FRAG_ATTRIB_CI][0]
                                    - vert0->attrib[FRAG_ATTRIB_CI][0]) / numPixels;
   }
   else {
      span.index = FloatToFixed(vert1->attrib[FRAG_ATTRIB_CI][0]);
      span.indexStep = 0;
   }
#endif
a392 1
#undef INTERP_RGBA
a393 1
#undef INTERP_INDEX
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d3 1
a3 1
 * Version:  6.5.3
a33 1
 *    INTERP_FOG      - if defined, interpolate FOG values
a34 1
 *    INTERP_SPEC     - if defined, interpolate specular RGB values
d73 4
a76 4
   GLint x0 = (GLint) vert0->win[0];
   GLint x1 = (GLint) vert1->win[0];
   GLint y0 = (GLint) vert0->win[1];
   GLint y1 = (GLint) vert1->win[1];
d105 2
a106 2
      GLfloat tmp = vert0->win[0] + vert0->win[1]
                  + vert1->win[0] + vert1->win[1];
d114 6
a119 2
          vert0->win[0], vert0->win[1], vert0->win[2],
          vert1->win[0], vert1->win[1], vert1->win[2]);
d159 12
a248 19
#ifdef INTERP_SPEC
   interpFlags |= SPAN_SPEC;
   if (ctx->Light.ShadeModel == GL_SMOOTH) {
      span.specRed       = ChanToFixed(vert0->specular[0]);
      span.specGreen     = ChanToFixed(vert0->specular[1]);
      span.specBlue      = ChanToFixed(vert0->specular[2]);
      span.specRedStep   = (ChanToFixed(vert1->specular[0]) - span.specRed) / numPixels;
      span.specGreenStep = (ChanToFixed(vert1->specular[1]) - span.specBlue) / numPixels;
      span.specBlueStep  = (ChanToFixed(vert1->specular[2]) - span.specGreen) / numPixels;
   }
   else {
      span.specRed       = ChanToFixed(vert1->specular[0]);
      span.specGreen     = ChanToFixed(vert1->specular[1]);
      span.specBlue      = ChanToFixed(vert1->specular[2]);
      span.specRedStep   = 0;
      span.specGreenStep = 0;
      span.specBlueStep  = 0;
   }
#endif
d252 3
a254 2
      span.index = FloatToFixed(vert0->index);
      span.indexStep = FloatToFixed(vert1->index - vert0->index) / numPixels;
d257 1
a257 1
      span.index = FloatToFixed(vert1->index);
d265 3
a267 2
         span.z = FloatToFixed(vert0->win[2]) + FIXED_HALF;
         span.zStep = FloatToFixed(vert1->win[2] - vert0->win[2]) / numPixels;
d271 3
a273 2
         span.z = (GLuint) vert0->win[2];
         span.zStep = (GLint) ((vert1->win[2] - vert0->win[2]) / numPixels);
a276 6
#ifdef INTERP_FOG
   interpFlags |= SPAN_FOG;
   span.attrStart[FRAG_ATTRIB_FOGC][0] = vert0->attrib[FRAG_ATTRIB_FOGC][0];
   span.attrStepX[FRAG_ATTRIB_FOGC][0] = (vert1->attrib[FRAG_ATTRIB_FOGC][0]
                                          - vert0->attrib[FRAG_ATTRIB_FOGC][0]) / numPixels;
#endif
a277 1
   interpFlags |= (SPAN_TEXTURE | SPAN_VARYING);
d280 7
a286 2
      const GLfloat invw0 = vert0->win[3];
      const GLfloat invw1 = vert1->win[3];
d288 14
a301 17
         GLfloat ds, dt, dr, dq;
         span.attrStart[attr][0] = invw0 * vert0->attrib[attr][0];
         span.attrStart[attr][1] = invw0 * vert0->attrib[attr][1];
         span.attrStart[attr][2] = invw0 * vert0->attrib[attr][2];
         span.attrStart[attr][3] = invw0 * vert0->attrib[attr][3];
         ds = (invw1 * vert1->attrib[attr][0]) - span.attrStart[attr][0];
         dt = (invw1 * vert1->attrib[attr][1]) - span.attrStart[attr][1];
         dr = (invw1 * vert1->attrib[attr][2]) - span.attrStart[attr][2];
         dq = (invw1 * vert1->attrib[attr][3]) - span.attrStart[attr][3];
         span.attrStepX[attr][0] = ds * invLen;
         span.attrStepX[attr][1] = dt * invLen;
         span.attrStepX[attr][2] = dr * invLen;
         span.attrStepX[attr][3] = dq * invLen;
         span.attrStepY[attr][0] = 0.0F;
         span.attrStepY[attr][1] = 0.0F;
         span.attrStepY[attr][2] = 0.0F;
         span.attrStepY[attr][3] = 0.0F;
d306 4
a309 6
   INIT_SPAN(span, GL_LINE, numPixels, interpFlags, SPAN_XY);

   /* Need these for fragment prog texcoord interpolation */
   span.attrStart[FRAG_ATTRIB_WPOS][3] = 1.0F;
   span.attrStepX[FRAG_ATTRIB_WPOS][3] = 0.0F;
   span.attrStepY[FRAG_ATTRIB_WPOS][3] = 0.0F;
d343 1
a343 1
         if (error<0) {
a409 1
#undef INTERP_FOG
a410 1
#undef INTERP_SPEC
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
d38 1
a38 2
 *    INTERP_TEX      - if defined, interpolate unit 0 texcoords
 *    INTERP_MULTITEX - if defined, interpolate multi-texcoords
d72 2
a73 1
   struct sw_span span;
d83 1
a83 1
   const GLint depthBits = ctx->Visual.depthBits;
d90 2
a91 1
   const GLint depthBits = ctx->Visual.depthBits;
d102 2
d274 1
a274 1
         span.z = (GLint) vert0->win[2];
d281 3
a283 2
   span.fog = vert0->fog;
   span.fogStep = (vert1->fog - vert0->fog) / numPixels;
d285 2
a286 2
#ifdef INTERP_TEX
   interpFlags |= SPAN_TEXTURE;
d288 1
d291 19
a309 48
      const GLfloat invLen = 1.0F / numPixels;
      GLfloat ds, dt, dr, dq;
      span.tex[0][0] = invw0 * vert0->texcoord[0][0];
      span.tex[0][1] = invw0 * vert0->texcoord[0][1];
      span.tex[0][2] = invw0 * vert0->texcoord[0][2];
      span.tex[0][3] = invw0 * vert0->texcoord[0][3];
      ds = (invw1 * vert1->texcoord[0][0]) - span.tex[0][0];
      dt = (invw1 * vert1->texcoord[0][1]) - span.tex[0][1];
      dr = (invw1 * vert1->texcoord[0][2]) - span.tex[0][2];
      dq = (invw1 * vert1->texcoord[0][3]) - span.tex[0][3];
      span.texStepX[0][0] = ds * invLen;
      span.texStepX[0][1] = dt * invLen;
      span.texStepX[0][2] = dr * invLen;
      span.texStepX[0][3] = dq * invLen;
      span.texStepY[0][0] = 0.0F;
      span.texStepY[0][1] = 0.0F;
      span.texStepY[0][2] = 0.0F;
      span.texStepY[0][3] = 0.0F;
   }
#endif
#ifdef INTERP_MULTITEX
   interpFlags |= SPAN_TEXTURE;
   {
      const GLfloat invLen = 1.0F / numPixels;
      GLuint u;
      for (u = 0; u < ctx->Const.MaxTextureUnits; u++) {
         if (ctx->Texture.Unit[u]._ReallyEnabled) {
            const GLfloat invw0 = vert0->win[3];
            const GLfloat invw1 = vert1->win[3];
            GLfloat ds, dt, dr, dq;
            span.tex[u][0] = invw0 * vert0->texcoord[u][0];
            span.tex[u][1] = invw0 * vert0->texcoord[u][1];
            span.tex[u][2] = invw0 * vert0->texcoord[u][2];
            span.tex[u][3] = invw0 * vert0->texcoord[u][3];
            ds = (invw1 * vert1->texcoord[u][0]) - span.tex[u][0];
            dt = (invw1 * vert1->texcoord[u][1]) - span.tex[u][1];
            dr = (invw1 * vert1->texcoord[u][2]) - span.tex[u][2];
            dq = (invw1 * vert1->texcoord[u][3]) - span.tex[u][3];
            span.texStepX[u][0] = ds * invLen;
            span.texStepX[u][1] = dt * invLen;
            span.texStepX[u][2] = dr * invLen;
            span.texStepX[u][3] = dq * invLen;
            span.texStepY[u][0] = 0.0F;
            span.texStepY[u][1] = 0.0F;
            span.texStepY[u][2] = 0.0F;
            span.texStepY[u][3] = 0.0F;
	 }
      }
d316 6
a321 3
   span.w = 1.0F;
   span.dwdx = 0.0F;
   span.dwdy = 0.0F;
d422 1
a422 2
#undef INTERP_TEX
#undef INTERP_MULTITEX
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d73 1
a73 1
   SWspan span;
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d3 1
a3 1
 * Version:  6.5.3
d5 1
a5 1
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
d38 2
a39 1
 *    INTERP_ATTRIBS  - if defined, interpolate attribs (texcoords, varying, etc)
a72 1
   const SWcontext *swrast = SWRAST_CONTEXT(ctx);
d83 1
a83 1
   const GLint depthBits = ctx->DrawBuffer->Visual.depthBits;
d90 1
a90 2
   const GLint depthBits = ctx->DrawBuffer->Visual.depthBits;
/*ctx->Visual.depthBits;*/
a100 2
   (void) swrast;

d271 1
a271 1
         span.z = (GLuint) vert0->win[2];
d278 2
a279 3
   span.attrStart[FRAG_ATTRIB_FOGC][0] = vert0->attrib[FRAG_ATTRIB_FOGC][0];
   span.attrStepX[FRAG_ATTRIB_FOGC][0] = (vert1->attrib[FRAG_ATTRIB_FOGC][0]
                                          - vert0->attrib[FRAG_ATTRIB_FOGC][0]) / numPixels;
d281 2
a282 2
#if defined(INTERP_ATTRIBS)
   interpFlags |= (SPAN_TEXTURE | SPAN_VARYING);
a283 1
      const GLfloat invLen = 1.0F / numPixels;
d286 48
a333 19
      ATTRIB_LOOP_BEGIN
         GLfloat ds, dt, dr, dq;
         span.attrStart[attr][0] = invw0 * vert0->attrib[attr][0];
         span.attrStart[attr][1] = invw0 * vert0->attrib[attr][1];
         span.attrStart[attr][2] = invw0 * vert0->attrib[attr][2];
         span.attrStart[attr][3] = invw0 * vert0->attrib[attr][3];
         ds = (invw1 * vert1->attrib[attr][0]) - span.attrStart[attr][0];
         dt = (invw1 * vert1->attrib[attr][1]) - span.attrStart[attr][1];
         dr = (invw1 * vert1->attrib[attr][2]) - span.attrStart[attr][2];
         dq = (invw1 * vert1->attrib[attr][3]) - span.attrStart[attr][3];
         span.attrStepX[attr][0] = ds * invLen;
         span.attrStepX[attr][1] = dt * invLen;
         span.attrStepX[attr][2] = dr * invLen;
         span.attrStepX[attr][3] = dq * invLen;
         span.attrStepY[attr][0] = 0.0F;
         span.attrStepY[attr][1] = 0.0F;
         span.attrStepY[attr][2] = 0.0F;
         span.attrStepY[attr][3] = 0.0F;
      ATTRIB_LOOP_END
d340 3
a342 3
   span.attrStart[FRAG_ATTRIB_WPOS][3] = 1.0F;
   span.attrStepX[FRAG_ATTRIB_WPOS][3] = 0.0F;
   span.attrStepY[FRAG_ATTRIB_WPOS][3] = 0.0F;
d443 2
a444 1
#undef INTERP_ATTRIBS
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
 * Version:  7.0
d34 4
d70 1
a70 1
NAME( struct gl_context *ctx, const SWvertex *vert0, const SWvertex *vert1 )
d75 4
a78 4
   GLint x0 = (GLint) vert0->attrib[FRAG_ATTRIB_WPOS][0];
   GLint x1 = (GLint) vert1->attrib[FRAG_ATTRIB_WPOS][0];
   GLint y0 = (GLint) vert0->attrib[FRAG_ATTRIB_WPOS][1];
   GLint y1 = (GLint) vert1->attrib[FRAG_ATTRIB_WPOS][1];
d91 1
d107 2
a108 2
      GLfloat tmp = vert0->attrib[FRAG_ATTRIB_WPOS][0] + vert0->attrib[FRAG_ATTRIB_WPOS][1]
                  + vert1->attrib[FRAG_ATTRIB_WPOS][0] + vert1->attrib[FRAG_ATTRIB_WPOS][1];
d116 2
a117 6
          vert0->attrib[FRAG_ATTRIB_WPOS][0],
          vert0->attrib[FRAG_ATTRIB_WPOS][1],
          vert0->attrib[FRAG_ATTRIB_WPOS][2],
          vert1->attrib[FRAG_ATTRIB_WPOS][0],
          vert1->attrib[FRAG_ATTRIB_WPOS][1],
          vert1->attrib[FRAG_ATTRIB_WPOS][2]);
a156 12
   /*
   printf("%s %d,%d  %g %g %g %g  %g %g %g %g\n", __FUNCTION__, dx, dy,
          vert0->attrib[FRAG_ATTRIB_COL1][0],
          vert0->attrib[FRAG_ATTRIB_COL1][1],
          vert0->attrib[FRAG_ATTRIB_COL1][2],
          vert0->attrib[FRAG_ATTRIB_COL1][3],
          vert1->attrib[FRAG_ATTRIB_COL1][0],
          vert1->attrib[FRAG_ATTRIB_COL1][1],
          vert1->attrib[FRAG_ATTRIB_COL1][2],
          vert1->attrib[FRAG_ATTRIB_COL1][3]);
   */

d212 1
d234 31
d269 2
a270 3
         span.z = FloatToFixed(vert0->attrib[FRAG_ATTRIB_WPOS][2]) + FIXED_HALF;
         span.zStep = FloatToFixed(  vert1->attrib[FRAG_ATTRIB_WPOS][2]
                                   - vert0->attrib[FRAG_ATTRIB_WPOS][2]) / numPixels;
d274 2
a275 3
         span.z = (GLuint) vert0->attrib[FRAG_ATTRIB_WPOS][2];
         span.zStep = (GLint) ((  vert1->attrib[FRAG_ATTRIB_WPOS][2]
                                - vert0->attrib[FRAG_ATTRIB_WPOS][2]) / numPixels);
d279 6
d286 1
d289 2
a290 7
      const GLfloat invw0 = vert0->attrib[FRAG_ATTRIB_WPOS][3];
      const GLfloat invw1 = vert1->attrib[FRAG_ATTRIB_WPOS][3];

      span.attrStart[FRAG_ATTRIB_WPOS][3] = invw0;
      span.attrStepX[FRAG_ATTRIB_WPOS][3] = (invw1 - invw0) * invLen;
      span.attrStepY[FRAG_ATTRIB_WPOS][3] = 0.0;

d292 17
a308 14
         if (swrast->_InterpMode[attr] == GL_FLAT) {
            COPY_4V(span.attrStart[attr], vert1->attrib[attr]);
            ASSIGN_4V(span.attrStepX[attr], 0.0, 0.0, 0.0, 0.0);
         }
         else {
            GLuint c;
            for (c = 0; c < 4; c++) {
               float da;
               span.attrStart[attr][c] = invw0 * vert0->attrib[attr][c];
               da = (invw1 * vert1->attrib[attr][c]) - span.attrStart[attr][c];
               span.attrStepX[attr][c] = da * invLen;
            }
         }
         ASSIGN_4V(span.attrStepY[attr], 0.0, 0.0, 0.0, 0.0);
d313 1
a313 6
   INIT_SPAN(span, GL_LINE);
   span.end = numPixels;
   span.interpMask = interpFlags;
   span.arrayMask = SPAN_XY;

   span.facing = swrast->PointLineFacing;
d315 4
d349 1
a349 1
         if (error < 0) {
d416 3
d420 1
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d71 4
a74 4
   GLint x0 = (GLint) vert0->attrib[VARYING_SLOT_POS][0];
   GLint x1 = (GLint) vert1->attrib[VARYING_SLOT_POS][0];
   GLint y0 = (GLint) vert0->attrib[VARYING_SLOT_POS][1];
   GLint y1 = (GLint) vert1->attrib[VARYING_SLOT_POS][1];
d102 2
a103 2
      GLfloat tmp = vert0->attrib[VARYING_SLOT_POS][0] + vert0->attrib[VARYING_SLOT_POS][1]
                  + vert1->attrib[VARYING_SLOT_POS][0] + vert1->attrib[VARYING_SLOT_POS][1];
d111 6
a116 6
          vert0->attrib[VARYING_SLOT_POS][0],
          vert0->attrib[VARYING_SLOT_POS][1],
          vert0->attrib[VARYING_SLOT_POS][2],
          vert1->attrib[VARYING_SLOT_POS][0],
          vert1->attrib[VARYING_SLOT_POS][1],
          vert1->attrib[VARYING_SLOT_POS][2]);
d158 8
a165 8
          vert0->attrib[VARYING_SLOT_COL1][0],
          vert0->attrib[VARYING_SLOT_COL1][1],
          vert0->attrib[VARYING_SLOT_COL1][2],
          vert0->attrib[VARYING_SLOT_COL1][3],
          vert1->attrib[VARYING_SLOT_COL1][0],
          vert1->attrib[VARYING_SLOT_COL1][1],
          vert1->attrib[VARYING_SLOT_COL1][2],
          vert1->attrib[VARYING_SLOT_COL1][3]);
d169 1
a169 1
   zPtr = (DEPTH_TYPE *) _swrast_pixel_address(zrb, x0, y0);
d248 3
a250 3
         span.z = FloatToFixed(vert0->attrib[VARYING_SLOT_POS][2]) + FIXED_HALF;
         span.zStep = FloatToFixed(  vert1->attrib[VARYING_SLOT_POS][2]
                                   - vert0->attrib[VARYING_SLOT_POS][2]) / numPixels;
d254 3
a256 3
         span.z = (GLuint) vert0->attrib[VARYING_SLOT_POS][2];
         span.zStep = (GLint) ((  vert1->attrib[VARYING_SLOT_POS][2]
                                - vert0->attrib[VARYING_SLOT_POS][2]) / numPixels);
d263 2
a264 2
      const GLfloat invw0 = vert0->attrib[VARYING_SLOT_POS][3];
      const GLfloat invw1 = vert1->attrib[VARYING_SLOT_POS][3];
d266 3
a268 3
      span.attrStart[VARYING_SLOT_POS][3] = invw0;
      span.attrStepX[VARYING_SLOT_POS][3] = (invw1 - invw0) * invLen;
      span.attrStepY[VARYING_SLOT_POS][3] = 0.0;
@


