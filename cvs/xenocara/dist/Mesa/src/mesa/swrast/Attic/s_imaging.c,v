head	1.3;
access;
symbols
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.05.22.20.06.34;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/* KW:  Moved these here to remove knowledge of swrast from core mesa.
 * Should probably pull the entire software implementation of these
 * extensions into either swrast or a sister module.  
 */

#include "main/glheader.h"
#include "main/colortab.h"
#include "main/convolve.h"
#include "s_context.h"
#include "s_span.h"


void
_swrast_CopyColorTable( GLcontext *ctx, 
			GLenum target, GLenum internalformat,
			GLint x, GLint y, GLsizei width)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLchan data[MAX_WIDTH][4];
   struct gl_buffer_object *bufferSave;

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no readbuffer - OK */
      return;
   }

   if (width > MAX_WIDTH)
      width = MAX_WIDTH;

   RENDER_START( swrast, ctx );

   /* read the data from framebuffer */
   _swrast_read_rgba_span( ctx, ctx->ReadBuffer->_ColorReadBuffer,
                           width, x, y, CHAN_TYPE, data );

   RENDER_FINISH(swrast,ctx);

   /* save PBO binding */
   bufferSave = ctx->Unpack.BufferObj;
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;

   _mesa_ColorTable(target, internalformat, width, GL_RGBA, CHAN_TYPE, data);

   /* restore PBO binding */
   ctx->Unpack.BufferObj = bufferSave;
}


void
_swrast_CopyColorSubTable( GLcontext *ctx,GLenum target, GLsizei start,
			   GLint x, GLint y, GLsizei width)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLchan data[MAX_WIDTH][4];
   struct gl_buffer_object *bufferSave;

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no readbuffer - OK */
      return;
   }

   if (width > MAX_WIDTH)
      width = MAX_WIDTH;

   RENDER_START( swrast, ctx );

   /* read the data from framebuffer */
   _swrast_read_rgba_span( ctx, ctx->ReadBuffer->_ColorReadBuffer,
                           width, x, y, CHAN_TYPE, data );

   RENDER_FINISH(swrast,ctx);

   /* save PBO binding */
   bufferSave = ctx->Unpack.BufferObj;
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;

   _mesa_ColorSubTable(target, start, width, GL_RGBA, CHAN_TYPE, data);

   /* restore PBO binding */
   ctx->Unpack.BufferObj = bufferSave;
}


void
_swrast_CopyConvolutionFilter1D(GLcontext *ctx, GLenum target, 
				GLenum internalFormat, 
				GLint x, GLint y, GLsizei width)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLchan rgba[MAX_CONVOLUTION_WIDTH][4];
   struct gl_buffer_object *bufferSave;

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no readbuffer - OK */
      return;
   }

   RENDER_START( swrast, ctx );

   /* read the data from framebuffer */
   _swrast_read_rgba_span( ctx, ctx->ReadBuffer->_ColorReadBuffer,
                           width, x, y, CHAN_TYPE, rgba );
   
   RENDER_FINISH( swrast, ctx );

   /* save PBO binding */
   bufferSave = ctx->Unpack.BufferObj;
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;

   /* store as convolution filter */
   _mesa_ConvolutionFilter1D(target, internalFormat, width,
                             GL_RGBA, CHAN_TYPE, rgba);

   /* restore PBO binding */
   ctx->Unpack.BufferObj = bufferSave;
}


void
_swrast_CopyConvolutionFilter2D(GLcontext *ctx, GLenum target, 
				GLenum internalFormat, 
				GLint x, GLint y, GLsizei width, GLsizei height)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_pixelstore_attrib packSave;
   GLchan rgba[MAX_CONVOLUTION_HEIGHT][MAX_CONVOLUTION_WIDTH][4];
   GLint i;
   struct gl_buffer_object *bufferSave;

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no readbuffer - OK */
      return;
   }

   RENDER_START(swrast,ctx);
   
   /* read pixels from framebuffer */
   for (i = 0; i < height; i++) {
      _swrast_read_rgba_span( ctx, ctx->ReadBuffer->_ColorReadBuffer,
                              width, x, y + i, CHAN_TYPE, rgba[i] );
   }

   RENDER_FINISH(swrast,ctx);

   /*
    * HACK: save & restore context state so we can store this as a
    * convolution filter via the GL api.  Doesn't call any callbacks
    * hanging off ctx->Unpack statechanges.
    */

   packSave = ctx->Unpack;  /* save pixel packing params */

   ctx->Unpack.Alignment = 1;
   ctx->Unpack.RowLength = MAX_CONVOLUTION_WIDTH;
   ctx->Unpack.SkipPixels = 0;
   ctx->Unpack.SkipRows = 0;
   ctx->Unpack.ImageHeight = 0;
   ctx->Unpack.SkipImages = 0;
   ctx->Unpack.SwapBytes = GL_FALSE;
   ctx->Unpack.LsbFirst = GL_FALSE;
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;
   ctx->NewState |= _NEW_PACKUNPACK;

   /* save PBO binding */
   bufferSave = ctx->Unpack.BufferObj;
   ctx->Unpack.BufferObj = ctx->Array.NullBufferObj;

   _mesa_ConvolutionFilter2D(target, internalFormat, width, height,
                             GL_RGBA, CHAN_TYPE, rgba);

   /* restore PBO binding */
   ctx->Unpack.BufferObj = bufferSave;

   ctx->Unpack = packSave;  /* restore pixel packing params */
   ctx->NewState |= _NEW_PACKUNPACK; 
}
@


1.2
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@@


1.1
log
@Initial revision
@
text
@d30 3
a34 2
#include "colortab.h"
#include "convolve.h"
d58 1
a58 1
                           width, x, y, data );
d93 1
a93 1
                           width, x, y, data );
d126 1
a126 1
                           width, x, y, (GLchan (*)[4]) rgba );
d164 1
a164 1
                              width, x, y + i, (GLchan (*)[4]) rgba[i] );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d57 1
a57 1
                           width, x, y, CHAN_TYPE, data );
d92 1
a92 1
                           width, x, y, CHAN_TYPE, data );
d125 1
a125 1
                           width, x, y, CHAN_TYPE, rgba );
d163 1
a163 1
                              width, x, y + i, CHAN_TYPE, rgba[i] );
@

