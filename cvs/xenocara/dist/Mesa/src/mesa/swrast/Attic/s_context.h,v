head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.48;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.18;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.18;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.07;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.29;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.35.12;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * \file swrast/s_context.h
 * \brief Software rasterization context and private types.
 * \author Keith Whitwell <keithw@@vmware.com>
 */

/**
 * \mainpage swrast module
 *
 * This module, software rasterization, contains the software fallback
 * routines for drawing points, lines, triangles, bitmaps and images.
 * All rendering boils down to writing spans (arrays) of pixels with
 * particular colors.  The span-writing routines must be implemented
 * by the device driver.
 */


#ifndef S_CONTEXT_H
#define S_CONTEXT_H

#include "main/compiler.h"
#include "main/mtypes.h"
#include "main/texcompress.h"
#include "program/prog_execute.h"
#include "swrast.h"
#include "s_fragprog.h"
#include "s_span.h"


typedef void (*texture_sample_func)(struct gl_context *ctx,
                                    const struct gl_sampler_object *samp,
                                    const struct gl_texture_object *tObj,
                                    GLuint n, const GLfloat texcoords[][4],
                                    const GLfloat lambda[], GLfloat rgba[][4]);

typedef void (_ASMAPIP blend_func)( struct gl_context *ctx, GLuint n,
                                    const GLubyte mask[],
                                    GLvoid *src, const GLvoid *dst,
                                    GLenum chanType);

typedef void (*swrast_point_func)( struct gl_context *ctx, const SWvertex *);

typedef void (*swrast_line_func)( struct gl_context *ctx,
                                  const SWvertex *, const SWvertex *);

typedef void (*swrast_tri_func)( struct gl_context *ctx, const SWvertex *,
                                 const SWvertex *, const SWvertex *);


typedef void (*validate_texture_image_func)(struct gl_context *ctx,
                                            struct gl_texture_object *texObj,
                                            GLuint face, GLuint level);


/**
 * \defgroup Bitmasks
 * Bitmasks to indicate which rasterization options are enabled
 * (RasterMask)
 */
/*@@{*/
#define ALPHATEST_BIT		0x001	/**< Alpha-test pixels */
#define BLEND_BIT		0x002	/**< Blend pixels */
#define DEPTH_BIT		0x004	/**< Depth-test pixels */
#define FOG_BIT			0x008	/**< Fog pixels */
#define LOGIC_OP_BIT		0x010	/**< Apply logic op in software */
#define CLIP_BIT		0x020	/**< Scissor or window clip pixels */
#define STENCIL_BIT		0x040	/**< Stencil pixels */
#define MASKING_BIT		0x080	/**< Do glColorMask or glIndexMask */
#define MULTI_DRAW_BIT		0x400	/**< Write to more than one color- */
                                        /**< buffer or no buffers. */
#define OCCLUSION_BIT           0x800   /**< GL_HP_occlusion_test enabled */
#define TEXTURE_BIT		0x1000	/**< Texturing really enabled */
#define FRAGPROG_BIT            0x2000  /**< Fragment program enabled */
#define ATIFRAGSHADER_BIT       0x4000  /**< ATI Fragment shader enabled */
#define CLAMPING_BIT            0x8000  /**< Clamp colors to [0,1] */
/*@@}*/

#define _SWRAST_NEW_RASTERMASK (_NEW_BUFFERS|	\
			        _NEW_SCISSOR|	\
			        _NEW_COLOR|	\
			        _NEW_DEPTH|	\
			        _NEW_FOG|	\
                                _NEW_PROGRAM|   \
			        _NEW_STENCIL|	\
			        _NEW_TEXTURE|	\
			        _NEW_VIEWPORT|	\
			        _NEW_DEPTH)


struct swrast_texture_image;


/**
 * Fetch a texel from texture image at given position.
 */
typedef void (*FetchTexelFunc)(const struct swrast_texture_image *texImage,
                               GLint col, GLint row, GLint img,
                               GLfloat *texelOut);


/**
 * Subclass of gl_texture_image.
 * We need extra fields/info to keep tracking of mapped texture buffers,
 * strides and Fetch functions.
 */
struct swrast_texture_image
{
   struct gl_texture_image Base;

   GLboolean _IsPowerOfTwo;  /**< Are all dimensions powers of two? */

   /** used for mipmap LOD computation */
   GLfloat WidthScale, HeightScale, DepthScale;

   /**
    * Byte stride between rows in ImageSlices.
    *
    * For compressed textures, this is the byte stride between one row of
    * blocks and the next row of blocks.
    *
    * Only valid while one of the ImageSlices is mapped, and must be the same
    * between all slices.
    */
   GLint RowStride;
   /**
    * When a texture image is mapped for swrast, this array contains pointers
    * to the beginning of each slice.
    *
    * For swrast-allocated textures, these pointers will always stay
    * initialized to point within Buffer.
    */
   void **ImageSlices;

   /** Malloc'd texture memory */
   GLubyte *Buffer;

   FetchTexelFunc FetchTexel;

   /** For fetching texels from compressed textures */
   compressed_fetch_func FetchCompressedTexel;
};


/** cast wrapper */
static inline struct swrast_texture_image *
swrast_texture_image(struct gl_texture_image *img)
{
   return (struct swrast_texture_image *) img;
}

/** cast wrapper */
static inline const struct swrast_texture_image *
swrast_texture_image_const(const struct gl_texture_image *img)
{
   return (const struct swrast_texture_image *) img;
}


/**
 * Subclass of gl_renderbuffer with extra fields needed for software
 * rendering.
 */
struct swrast_renderbuffer
{
   struct gl_renderbuffer Base;

   GLubyte *Buffer;     /**< The malloc'd memory for buffer */

   /** These fields are only valid while buffer is mapped for rendering */
   GLubyte *Map;
   GLint RowStride;    /**< in bytes */

   /** For span rendering */
   GLenum ColorType;
};


/** cast wrapper */
static inline struct swrast_renderbuffer *
swrast_renderbuffer(struct gl_renderbuffer *img)
{
   return (struct swrast_renderbuffer *) img;
}



/**
 * \struct SWcontext
 * \brief  Per-context state that's private to the software rasterizer module.
 */
typedef struct
{
   /** Driver interface:
    */
   struct swrast_device_driver Driver;

   /** Configuration mechanisms to make software rasterizer match
    * characteristics of the hardware rasterizer (if present):
    */
   GLboolean AllowVertexFog;
   GLboolean AllowPixelFog;

   /** Derived values, invalidated on statechanges, updated from
    * _swrast_validate_derived():
    */
   GLbitfield _RasterMask;
   GLfloat _BackfaceSign;      /** +1 or -1 */
   GLfloat _BackfaceCullSign;  /** +1, 0, or -1 */
   GLboolean _PreferPixelFog;    /* Compute fog blend factor per fragment? */
   GLboolean _TextureCombinePrimary;
   GLboolean _FogEnabled;
   GLboolean _DeferredTexture;

   /** List/array of the fragment attributes to interpolate */
   GLuint _ActiveAttribs[VARYING_SLOT_MAX];
   /** Same info, but as a bitmask of VARYING_BIT_x bits */
   GLbitfield64 _ActiveAttribMask;
   /** Number of fragment attributes to interpolate */
   GLuint _NumActiveAttribs;
   /** Indicates how each attrib is to be interpolated (lines/tris) */
   GLenum _InterpMode[VARYING_SLOT_MAX]; /* GL_FLAT or GL_SMOOTH (for now) */

   /* Working values:
    */
   GLuint StippleCounter;    /**< Line stipple counter */
   GLuint PointLineFacing;
   GLbitfield NewState;
   GLuint StateChanges;
   GLenum Primitive;    /* current primitive being drawn (ala glBegin) */
   GLboolean SpecularVertexAdd; /**< Add specular/secondary color per vertex */

   void (*InvalidateState)( struct gl_context *ctx, GLbitfield new_state );

   /**
    * When the NewState mask intersects these masks, we invalidate the
    * Point/Line/Triangle function pointers below.
    */
   /*@@{*/
   GLbitfield InvalidatePointMask;
   GLbitfield InvalidateLineMask;
   GLbitfield InvalidateTriangleMask;
   /*@@}*/

   /**
    * Device drivers plug in functions for these callbacks.
    * Will be called when the GL state change mask intersects the above masks.
    */
   /*@@{*/
   void (*choose_point)( struct gl_context * );
   void (*choose_line)( struct gl_context * );
   void (*choose_triangle)( struct gl_context * );
   /*@@}*/

   /**
    * Current point, line and triangle drawing functions.
    */
   /*@@{*/
   swrast_point_func Point;
   swrast_line_func Line;
   swrast_tri_func Triangle;
   /*@@}*/

   /**
    * Placeholders for when separate specular (or secondary color) is
    * enabled but texturing is not.
    */
   /*@@{*/
   swrast_point_func SpecPoint;
   swrast_line_func SpecLine;
   swrast_tri_func SpecTriangle;
   /*@@}*/

   /**
    * Typically, we'll allocate a sw_span structure as a local variable
    * and set its 'array' pointer to point to this object.  The reason is
    * this object is big and causes problems when allocated on the stack
    * on some systems.
    */
   SWspanarrays *SpanArrays;
   SWspanarrays *ZoomedArrays;  /**< For pixel zooming */

   /**
    * Used to buffer N GL_POINTS, instead of rendering one by one.
    */
   SWspan PointSpan;

   /** Internal hooks, kept up to date by the same mechanism as above.
    */
   blend_func BlendFunc;
   texture_sample_func TextureSample[MAX_COMBINED_TEXTURE_IMAGE_UNITS];

   /** Buffer for saving the sampled texture colors.
    * Needed for GL_ARB_texture_env_crossbar implementation.
    */
   GLfloat *TexelBuffer;

   validate_texture_image_func ValidateTextureImage;

   /** State used during execution of fragment programs */
   struct gl_program_machine FragProgMachine;

   /** Temporary arrays for stencil operations.  To avoid large stack
    * allocations.
    */
   struct {
      GLubyte *buf1, *buf2, *buf3, *buf4;
   } stencil_temp;

} SWcontext;


extern void
_swrast_validate_derived( struct gl_context *ctx );

extern void
_swrast_update_texture_samplers(struct gl_context *ctx);


/** Return SWcontext for the given struct gl_context */
static inline SWcontext *
SWRAST_CONTEXT(struct gl_context *ctx)
{
   return (SWcontext *) ctx->swrast_context;
}

/** const version of above */
static inline const SWcontext *
CONST_SWRAST_CONTEXT(const struct gl_context *ctx)
{
   return (const SWcontext *) ctx->swrast_context;
}


/**
 * Called prior to framebuffer reading/writing.
 * For drivers that rely on swrast for fallback rendering, this is the
 * driver's opportunity to map renderbuffers and textures.
 */
static inline void
swrast_render_start(struct gl_context *ctx)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.SpanRenderStart)
      swrast->Driver.SpanRenderStart(ctx);
}


/** Called after framebuffer reading/writing */
static inline void
swrast_render_finish(struct gl_context *ctx)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.SpanRenderFinish)
      swrast->Driver.SpanRenderFinish(ctx);
}


extern void
_swrast_span_render_start(struct gl_context *ctx);

extern void
_swrast_span_render_finish(struct gl_context *ctx);

extern void
_swrast_map_textures(struct gl_context *ctx);

extern void
_swrast_unmap_textures(struct gl_context *ctx);

extern unsigned int
_swrast_teximage_slice_height(struct gl_texture_image *texImage);

extern void
_swrast_map_texture(struct gl_context *ctx, struct gl_texture_object *texObj);

extern void
_swrast_unmap_texture(struct gl_context *ctx, struct gl_texture_object *texObj);


extern void
_swrast_map_renderbuffers(struct gl_context *ctx);

extern void
_swrast_unmap_renderbuffers(struct gl_context *ctx);


/**
 * Size of an RGBA pixel, in bytes, for given datatype.
 */
#define RGBA_PIXEL_SIZE(TYPE)                                     \
         ((TYPE == GL_UNSIGNED_BYTE) ? 4 * sizeof(GLubyte) :      \
          ((TYPE == GL_UNSIGNED_SHORT) ? 4 * sizeof(GLushort)     \
           : 4 * sizeof(GLfloat)))



/*
 * Fixed point arithmetic macros
 */
#ifndef FIXED_FRAC_BITS
#define FIXED_FRAC_BITS 11
#endif

#define FIXED_SHIFT     FIXED_FRAC_BITS
#define FIXED_ONE       (1 << FIXED_SHIFT)
#define FIXED_HALF      (1 << (FIXED_SHIFT-1))
#define FIXED_FRAC_MASK (FIXED_ONE - 1)
#define FIXED_INT_MASK  (~FIXED_FRAC_MASK)
#define FIXED_EPSILON   1
#define FIXED_SCALE     ((float) FIXED_ONE)
#define FIXED_DBL_SCALE ((double) FIXED_ONE)
#define FloatToFixed(X) (IROUND((X) * FIXED_SCALE))
#define FixedToDouble(X) ((X) * (1.0 / FIXED_DBL_SCALE))
#define IntToFixed(I)   ((I) << FIXED_SHIFT)
#define FixedToInt(X)   ((X) >> FIXED_SHIFT)
#define FixedToUns(X)   (((unsigned int)(X)) >> FIXED_SHIFT)
#define FixedCeil(X)    (((X) + FIXED_ONE - FIXED_EPSILON) & FIXED_INT_MASK)
#define FixedFloor(X)   ((X) & FIXED_INT_MASK)
#define FixedToFloat(X) ((X) * (1.0F / FIXED_SCALE))
#define PosFloatToFixed(X)      FloatToFixed(X)
#define SignedFloatToFixed(X)   FloatToFixed(X)



/*
 * XXX these macros are just bandages for now in order to make
 * CHAN_BITS==32 compile cleanly.
 * These should probably go elsewhere at some point.
 */
#if CHAN_TYPE == GL_FLOAT
#define ChanToFixed(X)  (X)
#define FixedToChan(X)  (X)
#else
#define ChanToFixed(X)  IntToFixed(X)
#define FixedToChan(X)  FixedToInt(X)
#endif


/**
 * For looping over fragment attributes in the pointe, line
 * triangle rasterizers.
 */
#define ATTRIB_LOOP_BEGIN                                \
   {                                                     \
      GLuint a;                                          \
      for (a = 0; a < swrast->_NumActiveAttribs; a++) {  \
         const GLuint attr = swrast->_ActiveAttribs[a];

#define ATTRIB_LOOP_END } }


/**
 * Return the address of a pixel value in a mapped renderbuffer.
 */
static inline GLubyte *
_swrast_pixel_address(struct gl_renderbuffer *rb, GLint x, GLint y)
{
   struct swrast_renderbuffer *srb = swrast_renderbuffer(rb);
   const GLint bpp = _mesa_get_format_bytes(rb->Format);
   const GLint rowStride = srb->RowStride;
   assert(x >= 0);
   assert(y >= 0);
   /* NOTE: using <= only because of s_tritemp.h which gets a pixel
    * address but doesn't necessarily access it.
    */
   assert(x <= (GLint) rb->Width);
   assert(y <= (GLint) rb->Height);
   assert(srb->Map);
   return (GLubyte *) srb->Map + y * rowStride + x * bpp;
}



#endif
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d29 1
a29 1
 * \author Keith Whitwell <keith@@tungstengraphics.com>
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.5.3
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d48 1
d51 1
d56 1
d115 97
d240 3
a242 3
   GLuint _ActiveAttribs[FRAG_ATTRIB_MAX];
   /** Same info, but as a bitmask */
   GLbitfield _ActiveAttribMask;
d246 1
a246 6
   GLenum _InterpMode[FRAG_ATTRIB_MAX]; /* GL_FLAT or GL_SMOOTH (for now) */

   /* Accum buffer temporaries.
    */
   GLboolean _IntegerAccumMode;	/**< Storing unscaled integers? */
   GLfloat _IntegerAccumScaler;	/**< Implicit scale factor */
d315 1
a315 1
   texture_sample_func TextureSample[MAX_TEXTURE_IMAGE_UNITS];
d327 7
d345 1
a345 1
static INLINE SWcontext *
d352 1
a352 1
static INLINE const SWcontext *
d364 1
a364 1
static INLINE void
d374 1
a374 1
static INLINE void
d383 28
d475 21
@


1.5
log
@Merge Mesa 7.10.3
@
text
@a137 1
   GLenum _FogMode;  /* either GL_FOG_MODE or fragment program's fog mode */
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d46 1
d48 1
a48 1
#include "shader/prog_execute.h"
d53 1
a53 1
typedef void (*texture_sample_func)(GLcontext *ctx,
d58 1
a58 1
typedef void (_ASMAPIP blend_func)( GLcontext *ctx, GLuint n,
d63 1
a63 1
typedef void (*swrast_point_func)( GLcontext *ctx, const SWvertex *);
d65 1
a65 1
typedef void (*swrast_line_func)( GLcontext *ctx,
d68 1
a68 1
typedef void (*swrast_tri_func)( GLcontext *ctx, const SWvertex *,
d72 1
a72 1
typedef void (*validate_texture_image_func)(GLcontext *ctx,
d163 1
a163 1
   void (*InvalidateState)( GLcontext *ctx, GLbitfield new_state );
d180 3
a182 3
   void (*choose_point)( GLcontext * );
   void (*choose_line)( GLcontext * );
   void (*choose_triangle)( GLcontext * );
d237 1
a237 1
_swrast_validate_derived( GLcontext *ctx );
d240 1
a240 1
_swrast_update_texture_samplers(GLcontext *ctx);
d243 1
a243 1
/** Return SWcontext for the given GLcontext */
d245 1
a245 1
SWRAST_CONTEXT(GLcontext *ctx)
d252 1
a252 1
CONST_SWRAST_CONTEXT(const GLcontext *ctx)
d264 1
a264 1
swrast_render_start(GLcontext *ctx)
d274 1
a274 1
swrast_render_finish(GLcontext *ctx)
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d55 1
a55 1
                                    const GLfloat lambda[], GLchan rgba[][4]);
d134 1
a134 1
   GLboolean _AnyTextureCombine;
d160 1
d225 1
a225 1
   GLchan *TexelBuffer;
d242 28
a269 1
#define SWRAST_CONTEXT(ctx) ((SWcontext *)ctx->swrast_context)
d271 8
a278 13
#define RENDER_START(SWctx, GLctx)			\
   do {							\
      if ((SWctx)->Driver.SpanRenderStart) {		\
         (*(SWctx)->Driver.SpanRenderStart)(GLctx);	\
      }							\
   } while (0)

#define RENDER_FINISH(SWctx, GLctx)			\
   do {							\
      if ((SWctx)->Driver.SpanRenderFinish) {		\
         (*(SWctx)->Driver.SpanRenderFinish)(GLctx);	\
      }							\
   } while (0)
d289 28
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d46 2
a47 1
#include "mtypes.h"
a49 1
#include "prog_execute.h"
d136 1
a138 4
   /** Multiple render targets */
   GLbitfield _ColorOutputsMask;
   GLuint _NumColorOutputs;

d141 2
d145 2
d209 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d48 2
a49 166


/**
 * \defgroup SpanFlags SPAN_XXX-flags
 * Bitmasks to indicate which span_arrays need to be computed
 * (sw_span::interpMask) or have already been filled in (sw_span::arrayMask)
 */
/*@@{*/
#define SPAN_RGBA         0x001
#define SPAN_SPEC         0x002
#define SPAN_INDEX        0x004
#define SPAN_Z            0x008
#define SPAN_W            0x010
#define SPAN_FOG          0x020
#define SPAN_TEXTURE      0x040
#define SPAN_INT_TEXTURE  0x080
#define SPAN_LAMBDA       0x100
#define SPAN_COVERAGE     0x200
#define SPAN_FLAT         0x400  /**< flat shading? */
#define SPAN_XY           0x800
#define SPAN_MASK        0x1000
#define SPAN_VARYING     0x2000
/*@@}*/


/**
 * \struct span_arrays 
 * \brief Arrays of fragment values.
 *
 * These will either be computed from the x/xStep values above or
 * filled in by glDraw/CopyPixels, etc.
 * These arrays are separated out of sw_span to conserve memory.
 */
struct span_arrays {
   /* XXX the next three fields could go into a union */
   GLchan  rgb[MAX_WIDTH][3];
   GLchan  rgba[MAX_WIDTH][4];
   GLuint  index[MAX_WIDTH];
   GLchan  spec[MAX_WIDTH][4]; /* specular color */
   GLint   x[MAX_WIDTH];  /**< X/Y used for point/line rendering only */
   GLint   y[MAX_WIDTH];  /**< X/Y used for point/line rendering only */
   GLuint  z[MAX_WIDTH];
   GLfloat fog[MAX_WIDTH];
   GLfloat texcoords[MAX_TEXTURE_COORD_UNITS][MAX_WIDTH][4];
   GLfloat lambda[MAX_TEXTURE_COORD_UNITS][MAX_WIDTH];
   GLfloat coverage[MAX_WIDTH];
   GLfloat varying[MAX_WIDTH][MAX_VARYING_VECTORS][VARYINGS_PER_VECTOR];

   /** This mask indicates which fragments are alive or culled */
   GLubyte mask[MAX_WIDTH];
};


/**
 * \struct sw_span
 * \brief Contains data for either a horizontal line or a set of
 * pixels that are passed through a pipeline of functions before being
 * drawn.
 *
 * The sw_span structure describes the colors, Z, fogcoord, texcoords,
 * etc for either a horizontal run or an array of independent pixels.
 * We can either specify a base/step to indicate interpolated values, or
 * fill in arrays of values.  The interpMask and arrayMask bitfields
 * indicate which are active.
 *
 * With this structure it's easy to hand-off span rasterization to
 * subroutines instead of doing it all inline in the triangle functions
 * like we used to do.
 * It also cleans up the local variable namespace a great deal.
 *
 * It would be interesting to experiment with multiprocessor rasterization
 * with this structure.  The triangle rasterizer could simply emit a
 * stream of these structures which would be consumed by one or more
 * span-processing threads which could run in parallel.
 */
struct sw_span {
   GLint x, y;

   /** Only need to process pixels between start <= i < end */
   /** At this time, start is always zero. */
   GLuint start, end;

   /** This flag indicates that mask[] array is effectively filled with ones */
   GLboolean writeAll;

   /** either GL_POLYGON, GL_LINE, GL_POLYGON, GL_BITMAP */
   GLenum primitive;

   /** 0 = front-facing span, 1 = back-facing span (for two-sided stencil) */
   GLuint facing;

   /**
    * This bitmask (of  \link SpanFlags SPAN_* flags\endlink) indicates
    * which of the x/xStep variables are relevant.
    */
   GLbitfield interpMask;

   /* For horizontal spans, step is the partial derivative wrt X.
    * For lines, step is the delta from one fragment to the next.
    */
#if CHAN_TYPE == GL_FLOAT
   GLfloat red, redStep;
   GLfloat green, greenStep;
   GLfloat blue, blueStep;
   GLfloat alpha, alphaStep;
   GLfloat specRed, specRedStep;
   GLfloat specGreen, specGreenStep;
   GLfloat specBlue, specBlueStep;
#else /* CHAN_TYPE == GL_UNSIGNED_BYTE or GL_UNSIGNED_SHORT */
   GLfixed red, redStep;
   GLfixed green, greenStep;
   GLfixed blue, blueStep;
   GLfixed alpha, alphaStep;
   GLfixed specRed, specRedStep;
   GLfixed specGreen, specGreenStep;
   GLfixed specBlue, specBlueStep;
#endif
   GLfixed index, indexStep;
   GLfixed z, zStep;    /* XXX z should probably be GLuint */
   GLfloat fog, fogStep;
   GLfloat tex[MAX_TEXTURE_COORD_UNITS][4];  /* s, t, r, q */
   GLfloat texStepX[MAX_TEXTURE_COORD_UNITS][4];
   GLfloat texStepY[MAX_TEXTURE_COORD_UNITS][4];
   GLfixed intTex[2], intTexStep[2];  /* s, t only */
   GLfloat var[MAX_VARYING_VECTORS][VARYINGS_PER_VECTOR];
   GLfloat varStepX[MAX_VARYING_VECTORS][VARYINGS_PER_VECTOR];
   GLfloat varStepY[MAX_VARYING_VECTORS][VARYINGS_PER_VECTOR];

   /* partial derivatives wrt X and Y. */
   GLfloat dzdx, dzdy;
   GLfloat w, dwdx, dwdy;
   GLfloat drdx, drdy;
   GLfloat dgdx, dgdy;
   GLfloat dbdx, dbdy;
   GLfloat dadx, dady;
   GLfloat dsrdx, dsrdy;
   GLfloat dsgdx, dsgdy;
   GLfloat dsbdx, dsbdy;
   GLfloat dfogdx, dfogdy;

   /**
    * This bitmask (of \link SpanFlags SPAN_* flags\endlink) indicates
    * which of the fragment arrays in the span_arrays struct are relevant.
    */
   GLbitfield arrayMask;

   /**
    * We store the arrays of fragment values in a separate struct so
    * that we can allocate sw_span structs on the stack without using
    * a lot of memory.  The span_arrays struct is about 400KB while the
    * sw_span struct is only about 512 bytes.
    */
   struct span_arrays *array;
};


#define INIT_SPAN(S, PRIMITIVE, END, INTERP_MASK, ARRAY_MASK)	\
do {								\
   (S).primitive = (PRIMITIVE);					\
   (S).interpMask = (INTERP_MASK);				\
   (S).arrayMask = (ARRAY_MASK);				\
   (S).start = 0;						\
   (S).end = (END);						\
   (S).facing = 0;						\
   (S).array = SWRAST_CONTEXT(ctx)->SpanArrays;			\
} while (0)
d59 2
a60 1
                                    GLchan src[][4], CONST GLchan dst[][4] );
d76 2
a77 1
/** \defgroup Bitmasks
d113 1
a113 1
 * \brief SWContext?
d131 2
a132 1
   GLfloat _BackfaceSign;
a134 1
   GLchan _FogColor[3];
d138 9
d155 1
d207 1
a207 1
   struct span_arrays *SpanArrays;
d212 1
a212 1
   struct sw_span PointSpan;
d226 3
d235 3
d257 10
d279 15
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d52 1
a52 1
 * Bitmasks to indicate which sw_span_arrays need to be computed
a71 16
#if 0
/* alternate arrangement for code below */
struct arrays2 {
   union {
      GLubyte  sz1[MAX_WIDTH][4]; /* primary color */
      GLushort sz2[MAX_WIDTH][4];
      GLfloat  sz4[MAX_WIDTH][4];
   } rgba;
   union {
      GLubyte  sz1[MAX_WIDTH][4]; /* specular color and temp storage */
      GLushort sz2[MAX_WIDTH][4];
      GLfloat  sz4[MAX_WIDTH][4];
   } spec;
};
#endif

d74 1
a74 1
 * \sw_span_arrays 
d81 4
a84 20
typedef struct sw_span_arrays {
   GLenum ChanType; /**< Color channel type, GL_UNSIGNED_BYTE, GL_FLOAT */
   union {
      struct {
         GLubyte rgba[MAX_WIDTH][4]; /**< primary color */
         GLubyte spec[MAX_WIDTH][4]; /**< specular color and temp storage */
      } sz1;
      struct {
         GLushort rgba[MAX_WIDTH][4];
         GLushort spec[MAX_WIDTH][4];
      } sz2;
      struct {
         GLfloat rgba[MAX_WIDTH][4];
         GLfloat spec[MAX_WIDTH][4];
      } sz4;
   } color;
   /** XXX these are temporary fields, pointing into above color arrays */
   GLchan (*rgba)[4];
   GLchan (*spec)[4];

d86 1
d98 1
a98 1
} SWspanarrays;
d102 1
a102 1
 * \SWspan
d123 1
a123 1
typedef struct sw_span {
d200 2
a201 3
   SWspanarrays *array;
} SWspan;

d223 1
a223 2
                                    GLvoid *src, const GLvoid *dst,
                                    GLenum chanType);
d275 1
a275 1
 * \brief  Per-context state that's private to the software rasterizer module.
d296 1
d359 1
a359 1
   SWspanarrays *SpanArrays;
d364 1
a364 1
   SWspan PointSpan;
a399 10



/**
 * Size of an RGBA pixel, in bytes, for given datatype.
 */
#define RGBA_PIXEL_SIZE(TYPE)                                     \
         ((TYPE == GL_UNSIGNED_BYTE) ? 4 * sizeof(GLubyte) :      \
          ((TYPE == GL_UNSIGNED_SHORT) ? 4 * sizeof(GLushort)     \
           : 4 * sizeof(GLfloat)))
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d3 1
a3 1
 * Version:  6.5.3
d5 1
a5 1
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
d48 198
a245 2
#include "s_span.h"
#include "prog_execute.h"
d272 1
a272 2
/**
 * \defgroup Bitmasks
a331 9
   /** Multiple render targets */
   GLbitfield _ColorOutputsMask;
   GLuint _NumColorOutputs;

   /** List/array of the fragment attributes to interpolate */
   GLuint _ActiveAttribs[FRAG_ATTRIB_MAX];
   /** Number of fragment attributes to interpolate */
   GLuint _NumActiveAttribs;

a409 3
   /** State used during execution of fragment programs */
   struct gl_program_machine FragProgMachine;

a415 3
extern void
_swrast_update_texture_samplers(GLcontext *ctx);

a456 15


/**
 * For looping over fragment attributes in the pointe, line
 * triangle rasterizers.
 */
#define ATTRIB_LOOP_BEGIN                                \
   {                                                     \
      GLuint a;                                          \
      for (a = 0; a < swrast->_NumActiveAttribs; a++) {  \
         const GLuint attr = swrast->_ActiveAttribs[a];

#define ATTRIB_LOOP_END } }


@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d46 1
a46 3
#include "main/compiler.h"
#include "main/mtypes.h"
#include "program/prog_execute.h"
d49 1
d52 1
a52 1
typedef void (*texture_sample_func)(struct gl_context *ctx,
d55 1
a55 1
                                    const GLfloat lambda[], GLfloat rgba[][4]);
d57 1
a57 1
typedef void (_ASMAPIP blend_func)( struct gl_context *ctx, GLuint n,
d62 1
a62 1
typedef void (*swrast_point_func)( struct gl_context *ctx, const SWvertex *);
d64 1
a64 1
typedef void (*swrast_line_func)( struct gl_context *ctx,
d67 1
a67 1
typedef void (*swrast_tri_func)( struct gl_context *ctx, const SWvertex *,
d71 1
a71 1
typedef void (*validate_texture_image_func)(struct gl_context *ctx,
d131 1
a131 2
   GLfloat _BackfaceSign;      /** +1 or -1 */
   GLfloat _BackfaceCullSign;  /** +1, 0, or -1 */
d133 1
a133 1
   GLboolean _TextureCombinePrimary;
a134 1
   GLboolean _DeferredTexture;
d137 4
a142 2
   /** Same info, but as a bitmask */
   GLbitfield _ActiveAttribMask;
a144 2
   /** Indicates how each attrib is to be interpolated (lines/tris) */
   GLenum _InterpMode[FRAG_ATTRIB_MAX]; /* GL_FLAT or GL_SMOOTH (for now) */
a153 1
   GLuint PointLineFacing;
a156 1
   GLboolean SpecularVertexAdd; /**< Add specular/secondary color per vertex */
d158 1
a158 1
   void (*InvalidateState)( struct gl_context *ctx, GLbitfield new_state );
d175 3
a177 3
   void (*choose_point)( struct gl_context * );
   void (*choose_line)( struct gl_context * );
   void (*choose_triangle)( struct gl_context * );
a205 1
   SWspanarrays *ZoomedArrays;  /**< For pixel zooming */
d220 1
a220 1
   GLfloat *TexelBuffer;
d231 1
a231 1
_swrast_validate_derived( struct gl_context *ctx );
d234 1
a234 2
_swrast_update_texture_samplers(struct gl_context *ctx);

a235 6
/** Return SWcontext for the given struct gl_context */
static INLINE SWcontext *
SWRAST_CONTEXT(struct gl_context *ctx)
{
   return (SWcontext *) ctx->swrast_context;
}
d237 1
a237 6
/** const version of above */
static INLINE const SWcontext *
CONST_SWRAST_CONTEXT(const struct gl_context *ctx)
{
   return (const SWcontext *) ctx->swrast_context;
}
d239 13
a251 23

/**
 * Called prior to framebuffer reading/writing.
 * For drivers that rely on swrast for fallback rendering, this is the
 * driver's opportunity to map renderbuffers and textures.
 */
static INLINE void
swrast_render_start(struct gl_context *ctx)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.SpanRenderStart)
      swrast->Driver.SpanRenderStart(ctx);
}


/** Called after framebuffer reading/writing */
static INLINE void
swrast_render_finish(struct gl_context *ctx)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   if (swrast->Driver.SpanRenderFinish)
      swrast->Driver.SpanRenderFinish(ctx);
}
a261 28



/*
 * Fixed point arithmetic macros
 */
#ifndef FIXED_FRAC_BITS
#define FIXED_FRAC_BITS 11
#endif

#define FIXED_SHIFT     FIXED_FRAC_BITS
#define FIXED_ONE       (1 << FIXED_SHIFT)
#define FIXED_HALF      (1 << (FIXED_SHIFT-1))
#define FIXED_FRAC_MASK (FIXED_ONE - 1)
#define FIXED_INT_MASK  (~FIXED_FRAC_MASK)
#define FIXED_EPSILON   1
#define FIXED_SCALE     ((float) FIXED_ONE)
#define FIXED_DBL_SCALE ((double) FIXED_ONE)
#define FloatToFixed(X) (IROUND((X) * FIXED_SCALE))
#define FixedToDouble(X) ((X) * (1.0 / FIXED_DBL_SCALE))
#define IntToFixed(I)   ((I) << FIXED_SHIFT)
#define FixedToInt(X)   ((X) >> FIXED_SHIFT)
#define FixedToUns(X)   (((unsigned int)(X)) >> FIXED_SHIFT)
#define FixedCeil(X)    (((X) + FIXED_ONE - FIXED_EPSILON) & FIXED_INT_MASK)
#define FixedFloor(X)   ((X) & FIXED_INT_MASK)
#define FixedToFloat(X) ((X) * (1.0F / FIXED_SCALE))
#define PosFloatToFixed(X)      FloatToFixed(X)
#define SignedFloatToFixed(X)   FloatToFixed(X)
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a47 1
#include "main/texcompress.h"
a49 1
#include "s_fragprog.h"
a53 1
                                    const struct gl_sampler_object *samp,
a111 97
struct swrast_texture_image;


/**
 * Fetch a texel from texture image at given position.
 */
typedef void (*FetchTexelFunc)(const struct swrast_texture_image *texImage,
                               GLint col, GLint row, GLint img,
                               GLfloat *texelOut);


/**
 * Subclass of gl_texture_image.
 * We need extra fields/info to keep tracking of mapped texture buffers,
 * strides and Fetch functions.
 */
struct swrast_texture_image
{
   struct gl_texture_image Base;

   GLboolean _IsPowerOfTwo;  /**< Are all dimensions powers of two? */

   /** used for mipmap LOD computation */
   GLfloat WidthScale, HeightScale, DepthScale;

   /**
    * Byte stride between rows in ImageSlices.
    *
    * For compressed textures, this is the byte stride between one row of
    * blocks and the next row of blocks.
    *
    * Only valid while one of the ImageSlices is mapped, and must be the same
    * between all slices.
    */
   GLint RowStride;
   /**
    * When a texture image is mapped for swrast, this array contains pointers
    * to the beginning of each slice.
    *
    * For swrast-allocated textures, these pointers will always stay
    * initialized to point within Buffer.
    */
   void **ImageSlices;

   /** Malloc'd texture memory */
   GLubyte *Buffer;

   FetchTexelFunc FetchTexel;

   /** For fetching texels from compressed textures */
   compressed_fetch_func FetchCompressedTexel;
};


/** cast wrapper */
static inline struct swrast_texture_image *
swrast_texture_image(struct gl_texture_image *img)
{
   return (struct swrast_texture_image *) img;
}

/** cast wrapper */
static inline const struct swrast_texture_image *
swrast_texture_image_const(const struct gl_texture_image *img)
{
   return (const struct swrast_texture_image *) img;
}


/**
 * Subclass of gl_renderbuffer with extra fields needed for software
 * rendering.
 */
struct swrast_renderbuffer
{
   struct gl_renderbuffer Base;

   GLubyte *Buffer;     /**< The malloc'd memory for buffer */

   /** These fields are only valid while buffer is mapped for rendering */
   GLubyte *Map;
   GLint RowStride;    /**< in bytes */

   /** For span rendering */
   GLenum ColorType;
};


/** cast wrapper */
static inline struct swrast_renderbuffer *
swrast_renderbuffer(struct gl_renderbuffer *img)
{
   return (struct swrast_renderbuffer *) img;
}



d138 1
d141 3
a143 3
   GLuint _ActiveAttribs[VARYING_SLOT_MAX];
   /** Same info, but as a bitmask of VARYING_BIT_x bits */
   GLbitfield64 _ActiveAttribMask;
d147 6
a152 1
   GLenum _InterpMode[VARYING_SLOT_MAX]; /* GL_FLAT or GL_SMOOTH (for now) */
d221 1
a221 1
   texture_sample_func TextureSample[MAX_COMBINED_TEXTURE_IMAGE_UNITS];
a232 7
   /** Temporary arrays for stencil operations.  To avoid large stack
    * allocations.
    */
   struct {
      GLubyte *buf1, *buf2, *buf3, *buf4;
   } stencil_temp;

d244 1
a244 1
static inline SWcontext *
d251 1
a251 1
static inline const SWcontext *
d263 1
a263 1
static inline void
d273 1
a273 1
static inline void
a281 28
extern void
_swrast_span_render_start(struct gl_context *ctx);

extern void
_swrast_span_render_finish(struct gl_context *ctx);

extern void
_swrast_map_textures(struct gl_context *ctx);

extern void
_swrast_unmap_textures(struct gl_context *ctx);

extern unsigned int
_swrast_teximage_slice_height(struct gl_texture_image *texImage);

extern void
_swrast_map_texture(struct gl_context *ctx, struct gl_texture_object *texObj);

extern void
_swrast_unmap_texture(struct gl_context *ctx, struct gl_texture_object *texObj);


extern void
_swrast_map_renderbuffers(struct gl_context *ctx);

extern void
_swrast_unmap_renderbuffers(struct gl_context *ctx);

a345 21


/**
 * Return the address of a pixel value in a mapped renderbuffer.
 */
static inline GLubyte *
_swrast_pixel_address(struct gl_renderbuffer *rb, GLint x, GLint y)
{
   struct swrast_renderbuffer *srb = swrast_renderbuffer(rb);
   const GLint bpp = _mesa_get_format_bytes(rb->Format);
   const GLint rowStride = srb->RowStride;
   assert(x >= 0);
   assert(y >= 0);
   /* NOTE: using <= only because of s_tritemp.h which gets a pixel
    * address but doesn't necessarily access it.
    */
   assert(x <= (GLint) rb->Width);
   assert(y <= (GLint) rb->Height);
   assert(srb->Map);
   return (GLubyte *) srb->Map + y * rowStride + x * bpp;
}
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d29 1
a29 1
 * \author Keith Whitwell <keithw@@vmware.com>
@


