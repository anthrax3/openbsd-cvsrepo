head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.6
	v10_2_7:1.1.1.6
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.6
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.09.01;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.14.06.52;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.52;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.16;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.49;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.36;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.07.09.20.35.13;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * \file swrast/swrast.h
 * \brief Public interface to the software rasterization functions.
 * \author Keith Whitwell <keithw@@vmware.com>
 */

#ifndef SWRAST_H
#define SWRAST_H

#include "main/mtypes.h"
#include "swrast/s_chan.h"


/**
 * If non-zero use GLdouble for walking triangle edges, for better accuracy.
 */
#define TRIANGLE_WALK_DOUBLE 0


/**
 * Bits per depth buffer value (max is 32).
 */
#ifndef DEFAULT_SOFTWARE_DEPTH_BITS
#define DEFAULT_SOFTWARE_DEPTH_BITS 16
#endif
/** Depth buffer data type */
#if DEFAULT_SOFTWARE_DEPTH_BITS <= 16
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLushort
#else
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLuint
#endif


/**
 * Max image/surface/texture size.
 */
#define SWRAST_MAX_WIDTH 16384
#define SWRAST_MAX_HEIGHT 16384


/**
 * \struct SWvertex
 * \brief Data-structure to handle vertices in the software rasterizer.
 * 
 * The software rasterizer now uses this format for vertices.  Thus a
 * 'RasterSetup' stage or other translation is required between the
 * tnl module and the swrast rasterization functions.  This serves to
 * isolate the swrast module from the internals of the tnl module, and
 * improve its usefulness as a fallback mechanism for hardware
 * drivers.
 *
 * wpos = attr[VARYING_SLOT_POS] and MUST BE THE FIRST values in the
 * vertex because of the tnl clipping code.

 * wpos[0] and [1] are the screen-coords of SWvertex.
 * wpos[2] is the z-buffer coord (if 16-bit Z buffer, in range [0,65535]).
 * wpos[3] is 1/w where w is the clip-space W coord.  This is the value
 * that clip{XYZ} were multiplied by to get ndc{XYZ}.
 *
 * Full software drivers:
 *   - Register the rastersetup and triangle functions from
 *     utils/software_helper.
 *   - On statechange, update the rasterization pointers in that module.
 *
 * Rasterization hardware drivers:
 *   - Keep native rastersetup.
 *   - Implement native twoside,offset and unfilled triangle setup.
 *   - Implement a translator from native vertices to swrast vertices.
 *   - On partial fallback (mix of accelerated and unaccelerated
 *   prims), call a pass-through function which translates native
 *   vertices to SWvertices and calls the appropriate swrast function.
 *   - On total fallback (vertex format insufficient for state or all
 *     primitives unaccelerated), hook in swrast_setup instead.
 */
typedef struct {
   GLfloat attrib[VARYING_SLOT_MAX][4];
   GLchan color[4];   /** integer color */
   GLfloat pointSize;
} SWvertex;


#define VARYING_SLOT_CI VARYING_SLOT_COL0


struct swrast_device_driver;


/* These are the public-access functions exported from swrast.
 */

extern GLboolean
_swrast_CreateContext( struct gl_context *ctx );

extern void
_swrast_DestroyContext( struct gl_context *ctx );

/* Get a (non-const) reference to the device driver struct for swrast.
 */
extern struct swrast_device_driver *
_swrast_GetDeviceDriverReference( struct gl_context *ctx );

extern void
_swrast_Bitmap( struct gl_context *ctx,
		GLint px, GLint py,
		GLsizei width, GLsizei height,
		const struct gl_pixelstore_attrib *unpack,
		const GLubyte *bitmap );

extern void
_swrast_CopyPixels( struct gl_context *ctx,
		    GLint srcx, GLint srcy,
		    GLint destx, GLint desty,
		    GLsizei width, GLsizei height,
		    GLenum type );

extern GLboolean
swrast_fast_copy_pixels(struct gl_context *ctx,
			GLint srcX, GLint srcY, GLsizei width, GLsizei height,
			GLint dstX, GLint dstY, GLenum type);

extern void
_swrast_DrawPixels( struct gl_context *ctx,
		    GLint x, GLint y,
		    GLsizei width, GLsizei height,
		    GLenum format, GLenum type,
		    const struct gl_pixelstore_attrib *unpack,
		    const GLvoid *pixels );

extern void
_swrast_BlitFramebuffer(struct gl_context *ctx,
                        GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
                        GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
                        GLbitfield mask, GLenum filter);

extern void
_swrast_Clear(struct gl_context *ctx, GLbitfield buffers);



/* Reset the stipple counter
 */
extern void
_swrast_ResetLineStipple( struct gl_context *ctx );

/**
 * Indicates front/back facing for subsequent points/lines when drawing
 * unfilled polygons.  Needed for two-side stencil.
 */
extern void
_swrast_SetFacing(struct gl_context *ctx, GLuint facing);

/* These will always render the correct point/line/triangle for the
 * current state.
 *
 * For flatshaded primitives, the provoking vertex is the final one.
 */
extern void
_swrast_Point( struct gl_context *ctx, const SWvertex *v );

extern void
_swrast_Line( struct gl_context *ctx, const SWvertex *v0, const SWvertex *v1 );

extern void
_swrast_Triangle( struct gl_context *ctx, const SWvertex *v0,
                  const SWvertex *v1, const SWvertex *v2 );

extern void
_swrast_Quad( struct gl_context *ctx,
              const SWvertex *v0, const SWvertex *v1,
	      const SWvertex *v2,  const SWvertex *v3);

extern void
_swrast_flush( struct gl_context *ctx );

extern void
_swrast_render_primitive( struct gl_context *ctx, GLenum mode );

extern void
_swrast_render_start( struct gl_context *ctx );

extern void
_swrast_render_finish( struct gl_context *ctx );

extern struct gl_texture_image *
_swrast_new_texture_image( struct gl_context *ctx );

extern void
_swrast_delete_texture_image(struct gl_context *ctx,
                             struct gl_texture_image *texImage);

extern GLboolean
_swrast_alloc_texture_image_buffer(struct gl_context *ctx,
                                   struct gl_texture_image *texImage);

extern GLboolean
_swrast_init_texture_image(struct gl_texture_image *texImage);

extern void
_swrast_free_texture_image_buffer(struct gl_context *ctx,
                                  struct gl_texture_image *texImage);

extern void
_swrast_map_teximage(struct gl_context *ctx,
		     struct gl_texture_image *texImage,
		     GLuint slice,
		     GLuint x, GLuint y, GLuint w, GLuint h,
		     GLbitfield mode,
		     GLubyte **mapOut,
		     GLint *rowStrideOut);

extern void
_swrast_unmap_teximage(struct gl_context *ctx,
		       struct gl_texture_image *texImage,
		       GLuint slice);

/* Tell the software rasterizer about core state changes.
 */
extern void
_swrast_InvalidateState( struct gl_context *ctx, GLbitfield new_state );

/* Configure software rasterizer to match hardware rasterizer characteristics:
 */
extern void
_swrast_allow_vertex_fog( struct gl_context *ctx, GLboolean value );

extern void
_swrast_allow_pixel_fog( struct gl_context *ctx, GLboolean value );

/* Debug:
 */
extern void
_swrast_print_vertex( struct gl_context *ctx, const SWvertex *v );



extern void
_swrast_eject_texture_images(struct gl_context *ctx);


extern void
_swrast_render_texture(struct gl_context *ctx,
                       struct gl_framebuffer *fb,
                       struct gl_renderbuffer_attachment *att);

extern void
_swrast_finish_render_texture(struct gl_context *ctx,
                              struct gl_renderbuffer *rb);


/**
 * The driver interface for the software rasterizer.
 * XXX this may go away.
 * We may move these functions to ctx->Driver.RenderStart, RenderEnd.
 */
struct swrast_device_driver {
   /*
    * These are called before and after accessing renderbuffers during
    * software rasterization.
    *
    * These are a suitable place for grabbing/releasing hardware locks.
    *
    * NOTE: The swrast triangle/line/point routines *DO NOT* call
    * these functions.  Locking in that case must be organized by the
    * driver by other mechanisms.
    */
   void (*SpanRenderStart)(struct gl_context *ctx);
   void (*SpanRenderFinish)(struct gl_context *ctx);
};



#endif
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d29 1
a29 1
 * \author Keith Whitwell <keith@@tungstengraphics.com>
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@a2 1
 * Version:  6.5
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d36 29
d77 1
a77 1
 * wpos = attr[FRAG_ATTRIB_WPOS] and MUST BE THE FIRST values in the
d101 1
a101 1
   GLfloat attrib[FRAG_ATTRIB_MAX][4];
d107 1
a107 1
#define FRAG_ATTRIB_CI FRAG_ATTRIB_COL0
d141 5
a154 7
_swrast_ReadPixels( struct gl_context *ctx,
		    GLint x, GLint y, GLsizei width, GLsizei height,
		    GLenum format, GLenum type,
		    const struct gl_pixelstore_attrib *unpack,
		    GLvoid *pixels );

extern void
a162 3
extern void
_swrast_Accum(struct gl_context *ctx, GLenum op, GLfloat value);

d209 32
d272 1
a272 2
                              struct gl_renderbuffer_attachment *att);

@


1.5
log
@Merge Mesa 7.10.3
@
text
@d209 10
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d88 1
a88 1
_swrast_CreateContext( GLcontext *ctx );
d91 1
a91 1
_swrast_DestroyContext( GLcontext *ctx );
d96 1
a96 1
_swrast_GetDeviceDriverReference( GLcontext *ctx );
d99 1
a99 1
_swrast_Bitmap( GLcontext *ctx,
d106 1
a106 1
_swrast_CopyPixels( GLcontext *ctx,
d113 1
a113 1
_swrast_DrawPixels( GLcontext *ctx,
d121 1
a121 1
_swrast_ReadPixels( GLcontext *ctx,
d128 1
a128 1
_swrast_BlitFramebuffer(GLcontext *ctx,
d134 1
a134 1
_swrast_Clear(GLcontext *ctx, GLbitfield buffers);
d137 1
a137 1
_swrast_Accum(GLcontext *ctx, GLenum op, GLfloat value);
d144 1
a144 1
_swrast_ResetLineStipple( GLcontext *ctx );
d151 1
a151 1
_swrast_SetFacing(GLcontext *ctx, GLuint facing);
d159 1
a159 1
_swrast_Point( GLcontext *ctx, const SWvertex *v );
d162 1
a162 1
_swrast_Line( GLcontext *ctx, const SWvertex *v0, const SWvertex *v1 );
d165 1
a165 1
_swrast_Triangle( GLcontext *ctx, const SWvertex *v0,
d169 1
a169 1
_swrast_Quad( GLcontext *ctx,
d174 1
a174 1
_swrast_flush( GLcontext *ctx );
d177 1
a177 1
_swrast_render_primitive( GLcontext *ctx, GLenum mode );
d180 1
a180 1
_swrast_render_start( GLcontext *ctx );
d183 1
a183 1
_swrast_render_finish( GLcontext *ctx );
d188 1
a188 1
_swrast_InvalidateState( GLcontext *ctx, GLbitfield new_state );
d193 1
a193 1
_swrast_allow_vertex_fog( GLcontext *ctx, GLboolean value );
d196 1
a196 1
_swrast_allow_pixel_fog( GLcontext *ctx, GLboolean value );
d201 1
a201 1
_swrast_print_vertex( GLcontext *ctx, const SWvertex *v );
d206 1
a206 1
_swrast_eject_texture_images(GLcontext *ctx);
d226 2
a227 2
   void (*SpanRenderStart)(GLcontext *ctx);
   void (*SpanRenderFinish)(GLcontext *ctx);
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@a203 54
/*
 * Imaging fallbacks (a better solution should be found, perhaps
 * moving all the imaging fallback code to a new module) 
 */
extern void
_swrast_CopyConvolutionFilter2D(GLcontext *ctx, GLenum target, 
				GLenum internalFormat, 
				GLint x, GLint y, GLsizei width, 
				GLsizei height);
extern void
_swrast_CopyConvolutionFilter1D(GLcontext *ctx, GLenum target, 
				GLenum internalFormat, 
				GLint x, GLint y, GLsizei width);
extern void
_swrast_CopyColorSubTable( GLcontext *ctx,GLenum target, GLsizei start,
			   GLint x, GLint y, GLsizei width);
extern void
_swrast_CopyColorTable( GLcontext *ctx, 
			GLenum target, GLenum internalformat,
			GLint x, GLint y, GLsizei width);


/*
 * Texture fallbacks.  Could also live in a new module
 * with the rest of the texture store fallbacks?
 */
extern void
_swrast_copy_teximage1d(GLcontext *ctx, GLenum target, GLint level,
                        GLenum internalFormat,
                        GLint x, GLint y, GLsizei width, GLint border);

extern void
_swrast_copy_teximage2d(GLcontext *ctx, GLenum target, GLint level,
                        GLenum internalFormat,
                        GLint x, GLint y, GLsizei width, GLsizei height,
                        GLint border);


extern void
_swrast_copy_texsubimage1d(GLcontext *ctx, GLenum target, GLint level,
                           GLint xoffset, GLint x, GLint y, GLsizei width);

extern void
_swrast_copy_texsubimage2d(GLcontext *ctx,
                           GLenum target, GLint level,
                           GLint xoffset, GLint yoffset,
                           GLint x, GLint y, GLsizei width, GLsizei height);

extern void
_swrast_copy_texsubimage3d(GLcontext *ctx,
                           GLenum target, GLint level,
                           GLint xoffset, GLint yoffset, GLint zoffset,
                           GLint x, GLint y, GLsizei width, GLsizei height);

a207 6

#if FEATURE_MESA_program_debug
extern void
_swrast_get_program_register(GLcontext *, enum register_file file,
                             GLuint index, GLfloat val[4]);
#endif /* FEATURE_MESA_program_debug */
@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d35 1
a35 1
#include "mtypes.h"
d48 8
d72 2
a73 9
   /** win[0], win[1] are the screen-coords of SWvertex.
    * win[2] is the z-buffer coord (if 16-bit Z buffer, in range [0,65535]).
    * win[3] is 1/w where w is the clip-space W coord.  This is the value
    * that clip{XYZ} were multiplied by to get ndc{XYZ}.
    */
   GLfloat win[4];
   GLchan color[4];
   GLchan specular[4];
   GLfloat index;
a74 1
   GLfloat attrib[FRAG_ATTRIB_MAX][4]; /**< texcoords & varying, more to come */
d76 3
@


1.1
log
@Initial revision
@
text
@a69 1
   GLfloat texcoord[MAX_TEXTURE_COORD_UNITS][4];
a71 1
   GLfloat fog;
d74 1
a74 1
   GLfloat attribute[MAX_VERTEX_ATTRIBS][4];
d131 1
a131 2
_swrast_Clear( GLcontext *ctx, GLbitfield mask, GLboolean all,
	       GLint x, GLint y, GLint width, GLint height );
d134 1
a134 3
_swrast_Accum( GLcontext *ctx, GLenum op,
	       GLfloat value, GLint xpos, GLint ypos,
	       GLint width, GLint height );
d143 7
d258 7
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d133 2
a134 1
_swrast_Clear(GLcontext *ctx, GLbitfield buffers);
d137 3
a139 1
_swrast_Accum(GLcontext *ctx, GLenum op, GLfloat value);
a255 7


#if FEATURE_MESA_program_debug
extern void
_swrast_get_program_register(GLcontext *, enum register_file file,
                             GLuint index, GLfloat val[4]);
#endif /* FEATURE_MESA_program_debug */
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d70 1
d73 1
d76 1
a76 1
   GLfloat attrib[FRAG_ATTRIB_MAX][4]; /**< texcoords & varying, more to come */
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d35 1
a35 1
#include "main/mtypes.h"
a47 8
 * wpos = attr[FRAG_ATTRIB_WPOS] and MUST BE THE FIRST values in the
 * vertex because of the tnl clipping code.

 * wpos[0] and [1] are the screen-coords of SWvertex.
 * wpos[2] is the z-buffer coord (if 16-bit Z buffer, in range [0,65535]).
 * wpos[3] is 1/w where w is the clip-space W coord.  This is the value
 * that clip{XYZ} were multiplied by to get ndc{XYZ}.
 *
d64 9
a72 2
   GLfloat attrib[FRAG_ATTRIB_MAX][4];
   GLchan color[4];   /** integer color */
d74 1
a77 3
#define FRAG_ATTRIB_CI FRAG_ATTRIB_COL0


d85 1
a85 1
_swrast_CreateContext( struct gl_context *ctx );
d88 1
a88 1
_swrast_DestroyContext( struct gl_context *ctx );
d93 1
a93 1
_swrast_GetDeviceDriverReference( struct gl_context *ctx );
d96 1
a96 1
_swrast_Bitmap( struct gl_context *ctx,
d103 1
a103 1
_swrast_CopyPixels( struct gl_context *ctx,
d110 1
a110 1
_swrast_DrawPixels( struct gl_context *ctx,
d118 1
a118 1
_swrast_ReadPixels( struct gl_context *ctx,
d125 1
a125 1
_swrast_BlitFramebuffer(struct gl_context *ctx,
d131 1
a131 1
_swrast_Clear(struct gl_context *ctx, GLbitfield buffers);
d134 1
a134 1
_swrast_Accum(struct gl_context *ctx, GLenum op, GLfloat value);
d141 1
a141 8
_swrast_ResetLineStipple( struct gl_context *ctx );

/**
 * Indicates front/back facing for subsequent points/lines when drawing
 * unfilled polygons.  Needed for two-side stencil.
 */
extern void
_swrast_SetFacing(struct gl_context *ctx, GLuint facing);
d149 1
a149 1
_swrast_Point( struct gl_context *ctx, const SWvertex *v );
d152 1
a152 1
_swrast_Line( struct gl_context *ctx, const SWvertex *v0, const SWvertex *v1 );
d155 1
a155 1
_swrast_Triangle( struct gl_context *ctx, const SWvertex *v0,
d159 1
a159 1
_swrast_Quad( struct gl_context *ctx,
d164 1
a164 1
_swrast_flush( struct gl_context *ctx );
d167 1
a167 1
_swrast_render_primitive( struct gl_context *ctx, GLenum mode );
d170 1
a170 1
_swrast_render_start( struct gl_context *ctx );
d173 1
a173 1
_swrast_render_finish( struct gl_context *ctx );
d178 1
a178 1
_swrast_InvalidateState( struct gl_context *ctx, GLbitfield new_state );
d183 1
a183 1
_swrast_allow_vertex_fog( struct gl_context *ctx, GLboolean value );
d186 1
a186 1
_swrast_allow_pixel_fog( struct gl_context *ctx, GLboolean value );
d191 39
a229 1
_swrast_print_vertex( struct gl_context *ctx, const SWvertex *v );
d232 3
d237 4
a240 1
_swrast_eject_texture_images(struct gl_context *ctx);
d242 16
d276 2
a277 2
   void (*SpanRenderStart)(struct gl_context *ctx);
   void (*SpanRenderFinish)(struct gl_context *ctx);
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
a35 29
#include "swrast/s_chan.h"


/**
 * If non-zero use GLdouble for walking triangle edges, for better accuracy.
 */
#define TRIANGLE_WALK_DOUBLE 0


/**
 * Bits per depth buffer value (max is 32).
 */
#ifndef DEFAULT_SOFTWARE_DEPTH_BITS
#define DEFAULT_SOFTWARE_DEPTH_BITS 16
#endif
/** Depth buffer data type */
#if DEFAULT_SOFTWARE_DEPTH_BITS <= 16
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLushort
#else
#define DEFAULT_SOFTWARE_DEPTH_TYPE GLuint
#endif


/**
 * Max image/surface/texture size.
 */
#define SWRAST_MAX_WIDTH 16384
#define SWRAST_MAX_HEIGHT 16384

d48 1
a48 1
 * wpos = attr[VARYING_SLOT_POS] and MUST BE THE FIRST values in the
d72 1
a72 1
   GLfloat attrib[VARYING_SLOT_MAX][4];
d78 1
a78 1
#define VARYING_SLOT_CI VARYING_SLOT_COL0
a111 5
extern GLboolean
swrast_fast_copy_pixels(struct gl_context *ctx,
			GLint srcX, GLint srcY, GLsizei width, GLsizei height,
			GLint dstX, GLint dstY, GLenum type);

d121 7
d136 3
a184 32
extern struct gl_texture_image *
_swrast_new_texture_image( struct gl_context *ctx );

extern void
_swrast_delete_texture_image(struct gl_context *ctx,
                             struct gl_texture_image *texImage);

extern GLboolean
_swrast_alloc_texture_image_buffer(struct gl_context *ctx,
                                   struct gl_texture_image *texImage);

extern GLboolean
_swrast_init_texture_image(struct gl_texture_image *texImage);

extern void
_swrast_free_texture_image_buffer(struct gl_context *ctx,
                                  struct gl_texture_image *texImage);

extern void
_swrast_map_teximage(struct gl_context *ctx,
		     struct gl_texture_image *texImage,
		     GLuint slice,
		     GLuint x, GLuint y, GLuint w, GLuint h,
		     GLbitfield mode,
		     GLubyte **mapOut,
		     GLint *rowStrideOut);

extern void
_swrast_unmap_teximage(struct gl_context *ctx,
		       struct gl_texture_image *texImage,
		       GLuint slice);

a207 9

extern void
_swrast_render_texture(struct gl_context *ctx,
                       struct gl_framebuffer *fb,
                       struct gl_renderbuffer_attachment *att);

extern void
_swrast_finish_render_texture(struct gl_context *ctx,
                              struct gl_renderbuffer *rb);
@


1.1.1.6
log
@Import Mesa 10.2.3
@
text
@d29 1
a29 1
 * \author Keith Whitwell <keithw@@vmware.com>
@


