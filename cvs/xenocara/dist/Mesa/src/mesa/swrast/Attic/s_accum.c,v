head	1.7;
access;
symbols
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.09.05.14.06.47;	author jsg;	state dead;
branches;
next	1.6;

1.6
date	2012.08.17.13.58.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.49;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.05;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.2
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#include "main/glheader.h"
#include "main/condrender.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/imports.h"

#include "s_accum.h"
#include "s_context.h"
#include "s_masking.h"
#include "s_span.h"


/* XXX this would have to change for accum buffers with more or less
 * than 16 bits per color channel.
 */
#define ACCUM_SCALE16 32767.0F


/*
 * Accumulation buffer notes
 *
 * Normally, accumulation buffer values are GLshorts with values in
 * [-32767, 32767] which represent floating point colors in [-1, 1],
 * as defined by the OpenGL specification.
 *
 * We optimize for the common case used for full-scene antialiasing:
 *    // start with accum buffer cleared to zero
 *    glAccum(GL_LOAD, w);   // or GL_ACCUM the first image
 *    glAccum(GL_ACCUM, w);
 *    ...
 *    glAccum(GL_ACCUM, w);
 *    glAccum(GL_RETURN, 1.0);
 * That is, we start with an empty accumulation buffer and accumulate
 * n images, each with weight w = 1/n.
 * In this scenario, we can simply store unscaled integer values in
 * the accum buffer instead of scaled integers.  We'll also keep track
 * of the w value so when we do GL_RETURN we simply divide the accumulated
 * values by n (n=1/w).
 * This lets us avoid _many_ int->float->int conversions.
 */


#if CHAN_BITS == 8
/* enable the optimization */
#define USE_OPTIMIZED_ACCUM  1
#else
#define USE_OPTIMIZED_ACCUM  0
#endif


/**
 * This is called when we fall out of optimized/unscaled accum buffer mode.
 * That is, we convert each unscaled accum buffer value into a scaled value
 * representing the range[-1, 1].
 */
static void
rescale_accum( struct gl_context *ctx )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_renderbuffer *rb
      = ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer;
   const GLfloat s = swrast->_IntegerAccumScaler * (32767.0F / CHAN_MAXF);

   assert(rb);
   assert(rb->_BaseFormat == GL_RGBA);
   /* add other types in future? */
   assert(rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT);
   assert(swrast->_IntegerAccumMode);

   if (rb->GetPointer(ctx, rb, 0, 0)) {
      /* directly-addressable memory */
      GLuint y;
      for (y = 0; y < rb->Height; y++) {
         GLuint i;
         GLshort *acc = (GLshort *) rb->GetPointer(ctx, rb, 0, y);
         for (i = 0; i < 4 * rb->Width; i++) {
            acc[i] = (GLshort) (acc[i] * s);
         }
      }
   }
   else {
      /* use get/put row funcs */
      GLuint y;
      for (y = 0; y < rb->Height; y++) {
         GLshort accRow[MAX_WIDTH * 4];
         GLuint i;
         rb->GetRow(ctx, rb, rb->Width, 0, y, accRow);
         for (i = 0; i < 4 * rb->Width; i++) {
            accRow[i] = (GLshort) (accRow[i] * s);
         }
         rb->PutRow(ctx, rb, rb->Width, 0, y, accRow, NULL);
      }
   }

   swrast->_IntegerAccumMode = GL_FALSE;
}



/**
 * Clear the accumulation Buffer.
 */
void
_swrast_clear_accum_buffer( struct gl_context *ctx, struct gl_renderbuffer *rb )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLuint x, y, width, height;

   /* No accumulation buffer! Not an error. */
   if (!rb || !rb->Data)
      return;

   assert(rb->_BaseFormat == GL_RGBA);
   /* add other types in future? */
   assert(rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT);

   /* bounds, with scissor */
   x = ctx->DrawBuffer->_Xmin;
   y = ctx->DrawBuffer->_Ymin;
   width = ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
   height = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;

   if (rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT) {
      const GLfloat accScale = 32767.0;
      GLshort clearVal[4];
      GLuint i;

      clearVal[0] = (GLshort) (ctx->Accum.ClearColor[0] * accScale);
      clearVal[1] = (GLshort) (ctx->Accum.ClearColor[1] * accScale);
      clearVal[2] = (GLshort) (ctx->Accum.ClearColor[2] * accScale);
      clearVal[3] = (GLshort) (ctx->Accum.ClearColor[3] * accScale);

      for (i = 0; i < height; i++) {
         rb->PutMonoRow(ctx, rb, width, x, y + i, clearVal, NULL);
      }
   }
   else {
      /* someday support other sizes */
   }

   /* update optimized accum state vars */
   if (ctx->Accum.ClearColor[0] == 0.0 && ctx->Accum.ClearColor[1] == 0.0 &&
       ctx->Accum.ClearColor[2] == 0.0 && ctx->Accum.ClearColor[3] == 0.0) {
#if USE_OPTIMIZED_ACCUM
      swrast->_IntegerAccumMode = GL_TRUE;
#else
      swrast->_IntegerAccumMode = GL_FALSE;
#endif
      swrast->_IntegerAccumScaler = 0.0;  /* denotes empty accum buffer */
   }
   else {
      swrast->_IntegerAccumMode = GL_FALSE;
   }
}


static void
accum_add(struct gl_context *ctx, GLfloat value,
          GLint xpos, GLint ypos, GLint width, GLint height )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_renderbuffer *rb
      = ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer;

   assert(rb);

   /* Leave optimized accum buffer mode */
   if (swrast->_IntegerAccumMode)
      rescale_accum(ctx);

   if (rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT) {
      const GLshort incr = (GLshort) (value * ACCUM_SCALE16);
      if (rb->GetPointer(ctx, rb, 0, 0)) {
         GLint i, j;
         for (i = 0; i < height; i++) {
            GLshort *acc = (GLshort *) rb->GetPointer(ctx, rb, xpos, ypos + i);
            for (j = 0; j < 4 * width; j++) {
               acc[j] += incr;
            }
         }
      }
      else {
         GLint i, j;
         for (i = 0; i < height; i++) {
            GLshort accRow[4 * MAX_WIDTH];
            rb->GetRow(ctx, rb, width, xpos, ypos + i, accRow);
            for (j = 0; j < 4 * width; j++) {
               accRow[j] += incr;
            }
            rb->PutRow(ctx, rb, width, xpos, ypos + i, accRow, NULL);
         }
      }
   }
   else {
      /* other types someday */
   }
}


static void
accum_mult(struct gl_context *ctx, GLfloat mult,
           GLint xpos, GLint ypos, GLint width, GLint height )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_renderbuffer *rb
      = ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer;

   assert(rb);

   /* Leave optimized accum buffer mode */
   if (swrast->_IntegerAccumMode)
      rescale_accum(ctx);

   if (rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT) {
      if (rb->GetPointer(ctx, rb, 0, 0)) {
         GLint i, j;
         for (i = 0; i < height; i++) {
            GLshort *acc = (GLshort *) rb->GetPointer(ctx, rb, xpos, ypos + i);
            for (j = 0; j < 4 * width; j++) {
               acc[j] = (GLshort) (acc[j] * mult);
            }
         }
      }
      else {
         GLint i, j;
         for (i = 0; i < height; i++) {
            GLshort accRow[4 * MAX_WIDTH];
            rb->GetRow(ctx, rb, width, xpos, ypos + i, accRow);
            for (j = 0; j < 4 * width; j++) {
               accRow[j] = (GLshort) (accRow[j] * mult);
            }
            rb->PutRow(ctx, rb, width, xpos, ypos + i, accRow, NULL);
         }
      }
   }
   else {
      /* other types someday */
   }
}



static void
accum_accum(struct gl_context *ctx, GLfloat value,
            GLint xpos, GLint ypos, GLint width, GLint height )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_renderbuffer *rb
      = ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer;
   const GLboolean directAccess = (rb->GetPointer(ctx, rb, 0, 0) != NULL);

   assert(rb);

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no read buffer - OK */
      return;
   }

   /* May have to leave optimized accum buffer mode */
   if (swrast->_IntegerAccumScaler == 0.0 && value > 0.0 && value <= 1.0)
      swrast->_IntegerAccumScaler = value;
   if (swrast->_IntegerAccumMode && value != swrast->_IntegerAccumScaler)
      rescale_accum(ctx);

   if (rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT) {
      const GLfloat scale = value * ACCUM_SCALE16 / CHAN_MAXF;
      GLshort accumRow[4 * MAX_WIDTH];
      GLchan rgba[MAX_WIDTH][4];
      GLint i;

      for (i = 0; i < height; i++) {
         GLshort *acc;
         if (directAccess) {
            acc = (GLshort *) rb->GetPointer(ctx, rb, xpos, ypos + i);
         }
         else {
            rb->GetRow(ctx, rb, width, xpos, ypos + i, accumRow);
            acc = accumRow;
         }

         /* read colors from color buffer */
         _swrast_read_rgba_span(ctx, ctx->ReadBuffer->_ColorReadBuffer, width,
                                xpos, ypos + i, CHAN_TYPE, rgba);

         /* do accumulation */
         if (swrast->_IntegerAccumMode) {
            /* simply add integer color values into accum buffer */
            GLint j;
            for (j = 0; j < width; j++) {
               acc[j * 4 + 0] += rgba[j][RCOMP];
               acc[j * 4 + 1] += rgba[j][GCOMP];
               acc[j * 4 + 2] += rgba[j][BCOMP];
               acc[j * 4 + 3] += rgba[j][ACOMP];
            }
         }
         else {
            /* scaled integer (or float) accum buffer */
            GLint j;
            for (j = 0; j < width; j++) {
               acc[j * 4 + 0] += (GLshort) ((GLfloat) rgba[j][RCOMP] * scale);
               acc[j * 4 + 1] += (GLshort) ((GLfloat) rgba[j][GCOMP] * scale);
               acc[j * 4 + 2] += (GLshort) ((GLfloat) rgba[j][BCOMP] * scale);
               acc[j * 4 + 3] += (GLshort) ((GLfloat) rgba[j][ACOMP] * scale);
            }
         }

         if (!directAccess) {
            rb->PutRow(ctx, rb, width, xpos, ypos + i, accumRow, NULL);
         }
      }
   }
   else {
      /* other types someday */
   }
}



static void
accum_load(struct gl_context *ctx, GLfloat value,
           GLint xpos, GLint ypos, GLint width, GLint height )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_renderbuffer *rb
      = ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer;
   const GLboolean directAccess = (rb->GetPointer(ctx, rb, 0, 0) != NULL);

   assert(rb);

   if (!ctx->ReadBuffer->_ColorReadBuffer) {
      /* no read buffer - OK */
      return;
   }

   /* This is a change to go into optimized accum buffer mode */
   if (value > 0.0 && value <= 1.0) {
#if USE_OPTIMIZED_ACCUM
      swrast->_IntegerAccumMode = GL_TRUE;
#else
      swrast->_IntegerAccumMode = GL_FALSE;
#endif
      swrast->_IntegerAccumScaler = value;
   }
   else {
      swrast->_IntegerAccumMode = GL_FALSE;
      swrast->_IntegerAccumScaler = 0.0;
   }

   if (rb->DataType == GL_SHORT || rb->DataType == GL_UNSIGNED_SHORT) {
      const GLfloat scale = value * ACCUM_SCALE16 / CHAN_MAXF;
      GLshort accumRow[4 * MAX_WIDTH];
      GLchan rgba[MAX_WIDTH][4];
      GLint i;

      for (i = 0; i < height; i++) {
         GLshort *acc;
         if (directAccess) {
            acc = (GLshort *) rb->GetPointer(ctx, rb, xpos, ypos + i);
         }
         else {
            rb->GetRow(ctx, rb, width, xpos, ypos + i, accumRow);
            acc = accumRow;
         }

         /* read colors from color buffer */
         _swrast_read_rgba_span(ctx, ctx->ReadBuffer->_ColorReadBuffer, width,
                                xpos, ypos + i, CHAN_TYPE, rgba);

         /* do load */
         if (swrast->_IntegerAccumMode) {
            /* just copy values in */
            GLint j;
            assert(swrast->_IntegerAccumScaler > 0.0);
            assert(swrast->_IntegerAccumScaler <= 1.0);
            for (j = 0; j < width; j++) {
               acc[j * 4 + 0] = rgba[j][RCOMP];
               acc[j * 4 + 1] = rgba[j][GCOMP];
               acc[j * 4 + 2] = rgba[j][BCOMP];
               acc[j * 4 + 3] = rgba[j][ACOMP];
            }
         }
         else {
            /* scaled integer (or float) accum buffer */
            GLint j;
            for (j = 0; j < width; j++) {
               acc[j * 4 + 0] = (GLshort) ((GLfloat) rgba[j][RCOMP] * scale);
               acc[j * 4 + 1] = (GLshort) ((GLfloat) rgba[j][GCOMP] * scale);
               acc[j * 4 + 2] = (GLshort) ((GLfloat) rgba[j][BCOMP] * scale);
               acc[j * 4 + 3] = (GLshort) ((GLfloat) rgba[j][ACOMP] * scale);
            }
         }

         if (!directAccess) {
            rb->PutRow(ctx, rb, width, xpos, ypos + i, accumRow, NULL);
         }
      }
   }
}


static void
accum_return(struct gl_context *ctx, GLfloat value,
             GLint xpos, GLint ypos, GLint width, GLint height )
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   struct gl_framebuffer *fb = ctx->DrawBuffer;
   struct gl_renderbuffer *accumRb = fb->Attachment[BUFFER_ACCUM].Renderbuffer;
   const GLboolean directAccess
      = (accumRb->GetPointer(ctx, accumRb, 0, 0) != NULL);

   static GLchan multTable[32768];
   static GLfloat prevMult = 0.0;
   const GLfloat mult = swrast->_IntegerAccumScaler;
   const GLint max = MIN2((GLint) (256 / mult), 32767);

   /* May have to leave optimized accum buffer mode */
   if (swrast->_IntegerAccumMode && value != 1.0)
      rescale_accum(ctx);

   if (swrast->_IntegerAccumMode && swrast->_IntegerAccumScaler > 0) {
      /* build lookup table to avoid many floating point multiplies */
      GLint j;
      assert(swrast->_IntegerAccumScaler <= 1.0);
      if (mult != prevMult) {
         for (j = 0; j < max; j++)
            multTable[j] = IROUND((GLfloat) j * mult);
         prevMult = mult;
      }
   }

   if (accumRb->DataType == GL_SHORT ||
       accumRb->DataType == GL_UNSIGNED_SHORT) {
      const GLfloat scale = value * CHAN_MAXF / ACCUM_SCALE16;
      GLuint buffer;
      GLint i;

      /* XXX maybe transpose the 'i' and 'buffer' loops??? */
      for (i = 0; i < height; i++) {
         GLshort accumRow[4 * MAX_WIDTH];
         GLshort *acc;
         SWspan span;

         /* init color span */
         INIT_SPAN(span, GL_BITMAP);
         span.end = width;
         span.arrayMask = SPAN_RGBA;
         span.x = xpos;
         span.y = ypos + i;

         if (directAccess) {
            acc = (GLshort *) accumRb->GetPointer(ctx, accumRb, xpos, ypos +i);
         }
         else {
            accumRb->GetRow(ctx, accumRb, width, xpos, ypos + i, accumRow);
            acc = accumRow;
         }

         /* get the colors to return */
         if (swrast->_IntegerAccumMode) {
            GLint j;
            for (j = 0; j < width; j++) {
               ASSERT(acc[j * 4 + 0] < max);
               ASSERT(acc[j * 4 + 1] < max);
               ASSERT(acc[j * 4 + 2] < max);
               ASSERT(acc[j * 4 + 3] < max);
               span.array->rgba[j][RCOMP] = multTable[acc[j * 4 + 0]];
               span.array->rgba[j][GCOMP] = multTable[acc[j * 4 + 1]];
               span.array->rgba[j][BCOMP] = multTable[acc[j * 4 + 2]];
               span.array->rgba[j][ACOMP] = multTable[acc[j * 4 + 3]];
            }
         }
         else {
            /* scaled integer (or float) accum buffer */
            GLint j;
            for (j = 0; j < width; j++) {
#if CHAN_BITS==32
               GLchan r = acc[j * 4 + 0] * scale;
               GLchan g = acc[j * 4 + 1] * scale;
               GLchan b = acc[j * 4 + 2] * scale;
               GLchan a = acc[j * 4 + 3] * scale;
#else
               GLint r = IROUND( (GLfloat) (acc[j * 4 + 0]) * scale );
               GLint g = IROUND( (GLfloat) (acc[j * 4 + 1]) * scale );
               GLint b = IROUND( (GLfloat) (acc[j * 4 + 2]) * scale );
               GLint a = IROUND( (GLfloat) (acc[j * 4 + 3]) * scale );
#endif
               span.array->rgba[j][RCOMP] = CLAMP( r, 0, CHAN_MAX );
               span.array->rgba[j][GCOMP] = CLAMP( g, 0, CHAN_MAX );
               span.array->rgba[j][BCOMP] = CLAMP( b, 0, CHAN_MAX );
               span.array->rgba[j][ACOMP] = CLAMP( a, 0, CHAN_MAX );
            }
         }

         /* store colors */
         for (buffer = 0; buffer < fb->_NumColorDrawBuffers; buffer++) {
            struct gl_renderbuffer *rb = fb->_ColorDrawBuffers[buffer];
            const GLboolean masking = (!ctx->Color.ColorMask[buffer][RCOMP] ||
                                       !ctx->Color.ColorMask[buffer][GCOMP] ||
                                       !ctx->Color.ColorMask[buffer][BCOMP] ||
                                       !ctx->Color.ColorMask[buffer][ACOMP]);
            if (masking) {
               _swrast_mask_rgba_span(ctx, rb, &span, buffer);
            }
            rb->PutRow(ctx, rb, width, xpos, ypos + i, span.array->rgba, NULL);
         }
      }
   }
   else {
      /* other types someday */
   }
}



/**
 * Software fallback for glAccum.
 */
void
_swrast_Accum(struct gl_context *ctx, GLenum op, GLfloat value)
{
   SWcontext *swrast = SWRAST_CONTEXT(ctx);
   GLint xpos, ypos, width, height;

   if (swrast->NewState)
      _swrast_validate_derived( ctx );

   if (!ctx->DrawBuffer->Attachment[BUFFER_ACCUM].Renderbuffer) {
      _mesa_warning(ctx, "Calling glAccum() without an accumulation buffer");
      return;
   }

   if (!_mesa_check_conditional_render(ctx))
      return;

   swrast_render_start(ctx);

   /* Compute region after calling swrast_render_start() so that we know the
    * drawbuffer's size/bounds are up to date.
    */
   xpos = ctx->DrawBuffer->_Xmin;
   ypos = ctx->DrawBuffer->_Ymin;
   width =  ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
   height = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;

   switch (op) {
      case GL_ADD:
         if (value != 0.0F) {
            accum_add(ctx, value, xpos, ypos, width, height);
	 }
	 break;
      case GL_MULT:
         if (value != 1.0F) {
            accum_mult(ctx, value, xpos, ypos, width, height);
	 }
	 break;
      case GL_ACCUM:
         if (value != 0.0F) {
            accum_accum(ctx, value, xpos, ypos, width, height);
         }
	 break;
      case GL_LOAD:
         accum_load(ctx, value, xpos, ypos, width, height);
	 break;
      case GL_RETURN:
         accum_return(ctx, value, xpos, ypos, width, height);
	 break;
      default:
         _mesa_problem(ctx, "invalid mode in _swrast_Accum()");
         break;
   }

   swrast_render_finish(ctx);
}
@


1.6
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@d27 1
d556 3
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d81 1
a81 1
rescale_accum( GLcontext *ctx )
d128 1
a128 1
_swrast_clear_accum_buffer( GLcontext *ctx, struct gl_renderbuffer *rb )
d182 1
a182 1
accum_add(GLcontext *ctx, GLfloat value,
d225 1
a225 1
accum_mult(GLcontext *ctx, GLfloat mult,
d268 1
a268 1
accum_accum(GLcontext *ctx, GLfloat value,
d344 1
a344 1
accum_load(GLcontext *ctx, GLfloat value,
d426 1
a426 1
accum_return(GLcontext *ctx, GLfloat value,
d543 1
a543 1
_swrast_Accum(GLcontext *ctx, GLenum op, GLfloat value)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a29 1
#include "main/fbobject.h"
d40 1
a40 1
#define ACCUM_SCALE16 32767.0
d133 1
a133 5
   if (ctx->Visual.accumRedBits == 0) {
      /* No accumulation buffer! Not an error. */
      return;
   }

a433 4
   const GLboolean masking = (!ctx->Color.ColorMask[RCOMP] ||
                              !ctx->Color.ColorMask[GCOMP] ||
                              !ctx->Color.ColorMask[BCOMP] ||
                              !ctx->Color.ColorMask[ACOMP]);
d521 4
d526 1
a526 1
               _swrast_mask_rgba_span(ctx, rb, &span);
d548 1
a548 1
   if (SWRAST_CONTEXT(ctx)->NewState)
d556 1
a556 1
   RENDER_START(swrast, ctx);
d558 1
a558 1
   /* Compute region after calling RENDER_START so that we know the
d593 1
a593 1
   RENDER_FINISH(swrast, ctx);
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d26 5
a30 5
#include "glheader.h"
#include "context.h"
#include "macros.h"
#include "imports.h"
#include "fbobject.h"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.5.1
d139 3
a141 1
   assert(rb);
d312 1
a312 1
                                xpos, ypos + i, rgba);
d396 1
a396 1
                                xpos, ypos + i, rgba);
a471 1
         GLchan rgba[MAX_WIDTH][4];
d474 8
d499 4
a502 4
               rgba[j][RCOMP] = multTable[acc[j * 4 + 0]];
               rgba[j][GCOMP] = multTable[acc[j * 4 + 1]];
               rgba[j][BCOMP] = multTable[acc[j * 4 + 2]];
               rgba[j][ACOMP] = multTable[acc[j * 4 + 3]];
d520 4
a523 4
               rgba[j][RCOMP] = CLAMP( r, 0, CHAN_MAX );
               rgba[j][GCOMP] = CLAMP( g, 0, CHAN_MAX );
               rgba[j][BCOMP] = CLAMP( b, 0, CHAN_MAX );
               rgba[j][ACOMP] = CLAMP( a, 0, CHAN_MAX );
d528 2
a529 2
         for (buffer = 0; buffer < fb->_NumColorDrawBuffers[0]; buffer++) {
            struct gl_renderbuffer *rb = fb->_ColorDrawBuffers[0][buffer];
d531 1
a531 1
               _swrast_mask_rgba_array(ctx, rb, width, xpos, ypos + i, rgba);
d533 1
a533 1
            rb->PutRow(ctx, rb, width, xpos, ypos + i, rgba, NULL);
d548 1
a548 4
_swrast_Accum( GLcontext *ctx, GLenum op, GLfloat value,
	       GLint xpos, GLint ypos,
	       GLint width, GLint height )

d551 1
d562 8
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d310 1
a310 1
                                xpos, ypos + i, CHAN_TYPE, rgba);
d394 1
a394 1
                                xpos, ypos + i, CHAN_TYPE, rgba);
d470 1
a472 6
         SWspan span;

         /* init color span */
         INIT_SPAN(span, GL_BITMAP, width, 0, SPAN_RGBA);
         span.x = xpos;
         span.y = ypos + i;
d490 4
a493 4
               span.array->rgba[j][RCOMP] = multTable[acc[j * 4 + 0]];
               span.array->rgba[j][GCOMP] = multTable[acc[j * 4 + 1]];
               span.array->rgba[j][BCOMP] = multTable[acc[j * 4 + 2]];
               span.array->rgba[j][ACOMP] = multTable[acc[j * 4 + 3]];
d511 4
a514 4
               span.array->rgba[j][RCOMP] = CLAMP( r, 0, CHAN_MAX );
               span.array->rgba[j][GCOMP] = CLAMP( g, 0, CHAN_MAX );
               span.array->rgba[j][BCOMP] = CLAMP( b, 0, CHAN_MAX );
               span.array->rgba[j][ACOMP] = CLAMP( a, 0, CHAN_MAX );
d522 1
a522 1
               _swrast_mask_rgba_span(ctx, rb, &span);
d524 1
a524 1
            rb->PutRow(ctx, rb, width, xpos, ypos + i, span.array->rgba, NULL);
d539 4
a542 1
_swrast_Accum(GLcontext *ctx, GLenum op, GLfloat value)
a544 1
   GLint xpos, ypos, width, height;
a554 8

   /* Compute region after calling RENDER_START so that we know the
    * drawbuffer's size/bounds are up to date.
    */
   xpos = ctx->DrawBuffer->_Xmin;
   ypos = ctx->DrawBuffer->_Ymin;
   width =  ctx->DrawBuffer->_Xmax - ctx->DrawBuffer->_Xmin;
   height = ctx->DrawBuffer->_Ymax - ctx->DrawBuffer->_Ymin;
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d139 1
a139 3
   if (!rb || !rb->Data)
      return;

@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d26 5
a30 4
#include "main/glheader.h"
#include "main/context.h"
#include "main/macros.h"
#include "main/imports.h"
d41 1
a41 1
#define ACCUM_SCALE16 32767.0F
d82 1
a82 1
rescale_accum( struct gl_context *ctx )
d129 1
a129 1
_swrast_clear_accum_buffer( struct gl_context *ctx, struct gl_renderbuffer *rb )
d134 5
a138 1
   /* No accumulation buffer! Not an error. */
d187 1
a187 1
accum_add(struct gl_context *ctx, GLfloat value,
d230 1
a230 1
accum_mult(struct gl_context *ctx, GLfloat mult,
d273 1
a273 1
accum_accum(struct gl_context *ctx, GLfloat value,
d349 1
a349 1
accum_load(struct gl_context *ctx, GLfloat value,
d431 1
a431 1
accum_return(struct gl_context *ctx, GLfloat value,
d439 4
d477 1
a477 3
         INIT_SPAN(span, GL_BITMAP);
         span.end = width;
         span.arrayMask = SPAN_RGBA;
d526 2
a527 6
         for (buffer = 0; buffer < fb->_NumColorDrawBuffers; buffer++) {
            struct gl_renderbuffer *rb = fb->_ColorDrawBuffers[buffer];
            const GLboolean masking = (!ctx->Color.ColorMask[buffer][RCOMP] ||
                                       !ctx->Color.ColorMask[buffer][GCOMP] ||
                                       !ctx->Color.ColorMask[buffer][BCOMP] ||
                                       !ctx->Color.ColorMask[buffer][ACOMP]);
d529 1
a529 1
               _swrast_mask_rgba_span(ctx, rb, &span, buffer);
d546 1
a546 1
_swrast_Accum(struct gl_context *ctx, GLenum op, GLfloat value)
d551 1
a551 1
   if (swrast->NewState)
d559 1
a559 1
   swrast_render_start(ctx);
d561 1
a561 1
   /* Compute region after calling swrast_render_start() so that we know the
d596 1
a596 1
   swrast_render_finish(ctx);
@


