head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.4
	v9_2_3:1.1.1.4
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.4
	v9_2_0:1.1.1.4
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.06.49;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.32.05;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.05.13.17.30;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include "main/glheader.h"
#include "main/colormac.h"
#include "main/feedback.h"
#include "main/macros.h"

#include "s_context.h"
#include "s_feedback.h"
#include "s_triangle.h"



static void
feedback_vertex(struct gl_context * ctx, const SWvertex * v, const SWvertex * pv)
{
   GLfloat win[4];
   const GLfloat *vtc = v->attrib[VARYING_SLOT_TEX0];
   const GLfloat *color = v->attrib[VARYING_SLOT_COL0];

   win[0] = v->attrib[VARYING_SLOT_POS][0];
   win[1] = v->attrib[VARYING_SLOT_POS][1];
   win[2] = v->attrib[VARYING_SLOT_POS][2] / ctx->DrawBuffer->_DepthMaxF;
   win[3] = 1.0F / v->attrib[VARYING_SLOT_POS][3];

   _mesa_feedback_vertex(ctx, win, color, vtc);
}


/*
 * Put triangle in feedback buffer.
 */
void
_swrast_feedback_triangle(struct gl_context *ctx, const SWvertex *v0,
                          const SWvertex *v1, const SWvertex *v2)
{
   if (!_swrast_culltriangle(ctx, v0, v1, v2)) {
      _mesa_feedback_token(ctx, (GLfloat) (GLint) GL_POLYGON_TOKEN);
      _mesa_feedback_token(ctx, (GLfloat) 3); /* three vertices */

      if (ctx->Light.ShadeModel == GL_SMOOTH) {
         feedback_vertex(ctx, v0, v0);
         feedback_vertex(ctx, v1, v1);
         feedback_vertex(ctx, v2, v2);
      }
      else {
         feedback_vertex(ctx, v0, v2);
         feedback_vertex(ctx, v1, v2);
         feedback_vertex(ctx, v2, v2);
      }
   }
}


void
_swrast_feedback_line(struct gl_context *ctx, const SWvertex *v0,
                      const SWvertex *v1)
{
   GLenum token = GL_LINE_TOKEN;
   SWcontext *swrast = SWRAST_CONTEXT(ctx);

   if (swrast->StippleCounter == 0)
      token = GL_LINE_RESET_TOKEN;

   _mesa_feedback_token(ctx, (GLfloat) (GLint) token);

   if (ctx->Light.ShadeModel == GL_SMOOTH) {
      feedback_vertex(ctx, v0, v0);
      feedback_vertex(ctx, v1, v1);
   }
   else {
      feedback_vertex(ctx, v0, v1);
      feedback_vertex(ctx, v1, v1);
   }

   swrast->StippleCounter++;
}


void
_swrast_feedback_point(struct gl_context *ctx, const SWvertex *v)
{
   _mesa_feedback_token(ctx, (GLfloat) (GLint) GL_POINT_TOKEN);
   feedback_vertex(ctx, v, v);
}


void
_swrast_select_triangle(struct gl_context *ctx, const SWvertex *v0,
                        const SWvertex *v1, const SWvertex *v2)
{
   if (!_swrast_culltriangle(ctx, v0, v1, v2)) {
      const GLfloat zs = 1.0F / ctx->DrawBuffer->_DepthMaxF;

      _mesa_update_hitflag( ctx, v0->attrib[VARYING_SLOT_POS][2] * zs );
      _mesa_update_hitflag( ctx, v1->attrib[VARYING_SLOT_POS][2] * zs );
      _mesa_update_hitflag( ctx, v2->attrib[VARYING_SLOT_POS][2] * zs );
   }
}


void
_swrast_select_line(struct gl_context *ctx, const SWvertex *v0, const SWvertex *v1)
{
   const GLfloat zs = 1.0F / ctx->DrawBuffer->_DepthMaxF;
   _mesa_update_hitflag( ctx, v0->attrib[VARYING_SLOT_POS][2] * zs );
   _mesa_update_hitflag( ctx, v1->attrib[VARYING_SLOT_POS][2] * zs );
}


void
_swrast_select_point(struct gl_context *ctx, const SWvertex *v)
{
   const GLfloat zs = 1.0F / ctx->DrawBuffer->_DepthMaxF;
   _mesa_update_hitflag( ctx, v->attrib[VARYING_SLOT_POS][2] * zs );
}
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  7.0
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d40 2
a41 2
   const GLfloat *vtc = v->attrib[FRAG_ATTRIB_TEX0];
   const GLfloat *color = v->attrib[FRAG_ATTRIB_COL0];
d43 4
a46 4
   win[0] = v->attrib[FRAG_ATTRIB_WPOS][0];
   win[1] = v->attrib[FRAG_ATTRIB_WPOS][1];
   win[2] = v->attrib[FRAG_ATTRIB_WPOS][2] / ctx->DrawBuffer->_DepthMaxF;
   win[3] = 1.0F / v->attrib[FRAG_ATTRIB_WPOS][3];
d117 3
a119 3
      _mesa_update_hitflag( ctx, v0->attrib[FRAG_ATTRIB_WPOS][2] * zs );
      _mesa_update_hitflag( ctx, v1->attrib[FRAG_ATTRIB_WPOS][2] * zs );
      _mesa_update_hitflag( ctx, v2->attrib[FRAG_ATTRIB_WPOS][2] * zs );
d128 2
a129 2
   _mesa_update_hitflag( ctx, v0->attrib[FRAG_ATTRIB_WPOS][2] * zs );
   _mesa_update_hitflag( ctx, v1->attrib[FRAG_ATTRIB_WPOS][2] * zs );
d137 1
a137 1
   _mesa_update_hitflag( ctx, v->attrib[FRAG_ATTRIB_WPOS][2] * zs );
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@a26 1
#include "main/context.h"
d37 1
a37 1
feedback_vertex(GLcontext * ctx, const SWvertex * v, const SWvertex * pv)
d56 1
a56 1
_swrast_feedback_triangle(GLcontext *ctx, const SWvertex *v0,
d78 1
a78 1
_swrast_feedback_line(GLcontext *ctx, const SWvertex *v0,
d103 1
a103 1
_swrast_feedback_point(GLcontext *ctx, const SWvertex *v)
d111 1
a111 1
_swrast_select_triangle(GLcontext *ctx, const SWvertex *v0,
d125 1
a125 1
_swrast_select_line(GLcontext *ctx, const SWvertex *v0, const SWvertex *v1)
d134 1
a134 1
_swrast_select_point(GLcontext *ctx, const SWvertex *v)
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a27 1
#include "main/enums.h"
d49 1
a49 1
   _mesa_feedback_vertex(ctx, win, color, v->attrib[FRAG_ATTRIB_CI][0], vtc);
d60 3
a62 3
   if (_swrast_culltriangle(ctx, v0, v1, v2)) {
      FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) GL_POLYGON_TOKEN);
      FEEDBACK_TOKEN(ctx, (GLfloat) 3); /* three vertices */
d88 1
a88 1
   FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) token);
d106 1
a106 1
   FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) GL_POINT_TOKEN);
d115 1
a115 1
   if (_swrast_culltriangle(ctx, v0, v1, v2)) {
@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d25 6
a30 6
#include "glheader.h"
#include "colormac.h"
#include "context.h"
#include "enums.h"
#include "feedback.h"
#include "macros.h"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.3
d5 1
a5 1
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
a36 5
#define FB_3D		0x01
#define FB_4D		0x02
#define FB_INDEX	0x04
#define FB_COLOR	0x08
#define FB_TEXTURE	0X10
d38 2
a39 5



static void feedback_vertex( GLcontext *ctx,
                             const SWvertex *v, const SWvertex *pv )
a40 1
   const GLuint texUnit = 0;  /* See section 5.3 of 1.2.1 spec */
d42 2
a43 2
   GLfloat color[4];
   GLfloat tc[4];
d45 4
a48 21
   win[0] = v->win[0];
   win[1] = v->win[1];
   win[2] = v->win[2] / ctx->DrawBuffer->_DepthMaxF;
   win[3] = 1.0F / v->win[3];

   color[0] = CHAN_TO_FLOAT(pv->color[0]);
   color[1] = CHAN_TO_FLOAT(pv->color[1]);
   color[2] = CHAN_TO_FLOAT(pv->color[2]);
   color[3] = CHAN_TO_FLOAT(pv->color[3]);

   if (v->texcoord[texUnit][3] != 1.0 &&
       v->texcoord[texUnit][3] != 0.0) {
      GLfloat invq = 1.0F / v->texcoord[texUnit][3];
      tc[0] = v->texcoord[texUnit][0] * invq;
      tc[1] = v->texcoord[texUnit][1] * invq;
      tc[2] = v->texcoord[texUnit][2] * invq;
      tc[3] = v->texcoord[texUnit][3];
   }
   else {
      COPY_4V(tc, v->texcoord[texUnit]);
   }
d50 1
a50 1
   _mesa_feedback_vertex( ctx, win, color, (GLfloat) v->index, tc );
d57 7
a63 8
void _swrast_feedback_triangle( GLcontext *ctx,
                           const SWvertex *v0,
                           const SWvertex *v1,
			   const SWvertex *v2)
{
   if (_swrast_culltriangle( ctx, v0, v1, v2 )) {
      FEEDBACK_TOKEN( ctx, (GLfloat) (GLint) GL_POLYGON_TOKEN );
      FEEDBACK_TOKEN( ctx, (GLfloat) 3 );        /* three vertices */
d66 8
a73 7
	 feedback_vertex( ctx, v0, v0 );
	 feedback_vertex( ctx, v1, v1 );
	 feedback_vertex( ctx, v2, v2 );
      } else {
	 feedback_vertex( ctx, v0, v2 );
	 feedback_vertex( ctx, v1, v2 );
	 feedback_vertex( ctx, v2, v2 );
d79 3
a81 1
void _swrast_feedback_line( GLcontext *ctx, const SWvertex *v0, const SWvertex *v1 )
d86 1
a86 1
   if (swrast->StippleCounter==0)
d89 1
a89 1
   FEEDBACK_TOKEN( ctx, (GLfloat) (GLint) token );
d92 6
a97 5
      feedback_vertex( ctx, v0, v0 );
      feedback_vertex( ctx, v1, v1 );
   } else {
      feedback_vertex( ctx, v0, v1 );
      feedback_vertex( ctx, v1, v1 );
d104 2
a105 1
void _swrast_feedback_point( GLcontext *ctx, const SWvertex *v )
d107 2
a108 2
   FEEDBACK_TOKEN( ctx, (GLfloat) (GLint) GL_POINT_TOKEN );
   feedback_vertex( ctx, v, v );
d112 3
a114 4
void _swrast_select_triangle( GLcontext *ctx,
                         const SWvertex *v0,
                         const SWvertex *v1,
			 const SWvertex *v2)
d116 1
a116 1
   if (_swrast_culltriangle( ctx, v0, v1, v2 )) {
d119 3
a121 3
      _mesa_update_hitflag( ctx, v0->win[2] * zs );
      _mesa_update_hitflag( ctx, v1->win[2] * zs );
      _mesa_update_hitflag( ctx, v2->win[2] * zs );
d126 2
a127 1
void _swrast_select_line( GLcontext *ctx, const SWvertex *v0, const SWvertex *v1 )
d130 2
a131 2
   _mesa_update_hitflag( ctx, v0->win[2] * zs );
   _mesa_update_hitflag( ctx, v1->win[2] * zs );
d135 2
a136 1
void _swrast_select_point( GLcontext *ctx, const SWvertex *v )
d139 1
a139 1
   _mesa_update_hitflag( ctx, v->win[2] * zs );
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d3 1
a3 1
 * Version:  7.0
d5 1
a5 1
 * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
d37 5
d43 5
a47 2
static void
feedback_vertex(GLcontext * ctx, const SWvertex * v, const SWvertex * pv)
d49 1
d52 1
a52 1
   const GLfloat *vtc = v->attrib[FRAG_ATTRIB_TEX0];
d64 13
a76 1
   _mesa_feedback_vertex(ctx, win, color, (GLfloat) v->index, vtc);
d83 8
a90 7
void
_swrast_feedback_triangle(GLcontext *ctx, const SWvertex *v0,
                          const SWvertex *v1, const SWvertex *v2)
{
   if (_swrast_culltriangle(ctx, v0, v1, v2)) {
      FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) GL_POLYGON_TOKEN);
      FEEDBACK_TOKEN(ctx, (GLfloat) 3); /* three vertices */
d93 7
a99 8
         feedback_vertex(ctx, v0, v0);
         feedback_vertex(ctx, v1, v1);
         feedback_vertex(ctx, v2, v2);
      }
      else {
         feedback_vertex(ctx, v0, v2);
         feedback_vertex(ctx, v1, v2);
         feedback_vertex(ctx, v2, v2);
d105 1
a105 3
void
_swrast_feedback_line(GLcontext *ctx, const SWvertex *v0,
                      const SWvertex *v1)
d110 1
a110 1
   if (swrast->StippleCounter == 0)
d113 1
a113 1
   FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) token);
d116 5
a120 6
      feedback_vertex(ctx, v0, v0);
      feedback_vertex(ctx, v1, v1);
   }
   else {
      feedback_vertex(ctx, v0, v1);
      feedback_vertex(ctx, v1, v1);
d127 1
a127 2
void
_swrast_feedback_point(GLcontext *ctx, const SWvertex *v)
d129 2
a130 2
   FEEDBACK_TOKEN(ctx, (GLfloat) (GLint) GL_POINT_TOKEN);
   feedback_vertex(ctx, v, v);
d134 4
a137 3
void
_swrast_select_triangle(GLcontext *ctx, const SWvertex *v0,
                        const SWvertex *v1, const SWvertex *v2)
d139 1
a139 1
   if (_swrast_culltriangle(ctx, v0, v1, v2)) {
d141 4
a144 3
      _mesa_update_hitflag(ctx, v0->win[2] * zs);
      _mesa_update_hitflag(ctx, v1->win[2] * zs);
      _mesa_update_hitflag(ctx, v2->win[2] * zs);
d149 1
a149 2
void
_swrast_select_line(GLcontext *ctx, const SWvertex *v0, const SWvertex *v1)
d152 2
a153 2
   _mesa_update_hitflag(ctx, v0->win[2] * zs);
   _mesa_update_hitflag(ctx, v1->win[2] * zs);
d157 1
a157 2
void
_swrast_select_point(GLcontext *ctx, const SWvertex *v)
d160 1
a160 1
   _mesa_update_hitflag(ctx, v->win[2] * zs);
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d25 6
a30 4
#include "main/glheader.h"
#include "main/colormac.h"
#include "main/feedback.h"
#include "main/macros.h"
d39 1
a39 1
feedback_vertex(struct gl_context * ctx, const SWvertex * v, const SWvertex * pv)
d42 1
a43 1
   const GLfloat *color = v->attrib[FRAG_ATTRIB_COL0];
d45 9
a53 4
   win[0] = v->attrib[FRAG_ATTRIB_WPOS][0];
   win[1] = v->attrib[FRAG_ATTRIB_WPOS][1];
   win[2] = v->attrib[FRAG_ATTRIB_WPOS][2] / ctx->DrawBuffer->_DepthMaxF;
   win[3] = 1.0F / v->attrib[FRAG_ATTRIB_WPOS][3];
d55 1
a55 1
   _mesa_feedback_vertex(ctx, win, color, vtc);
d63 1
a63 1
_swrast_feedback_triangle(struct gl_context *ctx, const SWvertex *v0,
d66 3
a68 3
   if (!_swrast_culltriangle(ctx, v0, v1, v2)) {
      _mesa_feedback_token(ctx, (GLfloat) (GLint) GL_POLYGON_TOKEN);
      _mesa_feedback_token(ctx, (GLfloat) 3); /* three vertices */
d85 1
a85 1
_swrast_feedback_line(struct gl_context *ctx, const SWvertex *v0,
d94 1
a94 1
   _mesa_feedback_token(ctx, (GLfloat) (GLint) token);
d110 1
a110 1
_swrast_feedback_point(struct gl_context *ctx, const SWvertex *v)
d112 1
a112 1
   _mesa_feedback_token(ctx, (GLfloat) (GLint) GL_POINT_TOKEN);
d118 1
a118 1
_swrast_select_triangle(struct gl_context *ctx, const SWvertex *v0,
d121 1
a121 1
   if (!_swrast_culltriangle(ctx, v0, v1, v2)) {
d123 3
a125 4

      _mesa_update_hitflag( ctx, v0->attrib[FRAG_ATTRIB_WPOS][2] * zs );
      _mesa_update_hitflag( ctx, v1->attrib[FRAG_ATTRIB_WPOS][2] * zs );
      _mesa_update_hitflag( ctx, v2->attrib[FRAG_ATTRIB_WPOS][2] * zs );
d131 1
a131 1
_swrast_select_line(struct gl_context *ctx, const SWvertex *v0, const SWvertex *v1)
d134 2
a135 2
   _mesa_update_hitflag( ctx, v0->attrib[FRAG_ATTRIB_WPOS][2] * zs );
   _mesa_update_hitflag( ctx, v1->attrib[FRAG_ATTRIB_WPOS][2] * zs );
d140 1
a140 1
_swrast_select_point(struct gl_context *ctx, const SWvertex *v)
d143 1
a143 1
   _mesa_update_hitflag( ctx, v->attrib[FRAG_ATTRIB_WPOS][2] * zs );
@


1.1.1.4
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d40 2
a41 2
   const GLfloat *vtc = v->attrib[VARYING_SLOT_TEX0];
   const GLfloat *color = v->attrib[VARYING_SLOT_COL0];
d43 4
a46 4
   win[0] = v->attrib[VARYING_SLOT_POS][0];
   win[1] = v->attrib[VARYING_SLOT_POS][1];
   win[2] = v->attrib[VARYING_SLOT_POS][2] / ctx->DrawBuffer->_DepthMaxF;
   win[3] = 1.0F / v->attrib[VARYING_SLOT_POS][3];
d117 3
a119 3
      _mesa_update_hitflag( ctx, v0->attrib[VARYING_SLOT_POS][2] * zs );
      _mesa_update_hitflag( ctx, v1->attrib[VARYING_SLOT_POS][2] * zs );
      _mesa_update_hitflag( ctx, v2->attrib[VARYING_SLOT_POS][2] * zs );
d128 2
a129 2
   _mesa_update_hitflag( ctx, v0->attrib[VARYING_SLOT_POS][2] * zs );
   _mesa_update_hitflag( ctx, v1->attrib[VARYING_SLOT_POS][2] * zs );
d137 1
a137 1
   _mesa_update_hitflag( ctx, v->attrib[VARYING_SLOT_POS][2] * zs );
@


