head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.5
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	v10_2_3:1.1.1.5
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	v9_2_5:1.1.1.5
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.5
	v9_2_1:1.1.1.5
	v9_2_0:1.1.1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	v7_10_3:1.1.1.4
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v7_0_1:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v6_5_2:1.1.1.2
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.23.05.17.55;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2013.09.05.14.06.49;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.23.13.37.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.22.20.06.34;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.17.20.26.42;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.14.58.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.51.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.51.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.03.03.11.56.50;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.17.32.09;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2011.10.23.13.29.48;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.09.05.13.17.31;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#include "main/glheader.h"
#include "main/context.h"
#include "main/imports.h"
#include "main/macros.h"

#include "s_context.h"
#include "s_logic.h"
#include "s_span.h"


/**
 * We do all logic ops on 4-byte GLuints.
 * Depending on bytes per pixel, the mask array elements correspond to
 * 1, 2 or 4 GLuints.
 */
#define LOGIC_OP_LOOP(MODE, MASKSTRIDE)		\
do {						\
   GLuint i;					\
   switch (MODE) {				\
      case GL_CLEAR:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = 0;			\
	    }					\
	 }					\
	 break;					\
      case GL_SET:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~0;			\
	    }					\
	 }					\
	 break;					\
      case GL_COPY:				\
	 /* do nothing */			\
	 break;					\
      case GL_COPY_INVERTED:			\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~src[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_NOOP:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = dest[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_INVERT:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~dest[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_AND:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] &= dest[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_NAND:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~(src[i] & dest[i]);	\
	    }					\
	 }					\
	 break;					\
      case GL_OR:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] |= dest[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_NOR:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~(src[i] | dest[i]);	\
	    }					\
	 }					\
	 break;					\
      case GL_XOR:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] ^= dest[i];		\
	    }					\
	 }					\
	 break;					\
      case GL_EQUIV:				\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~(src[i] ^ dest[i]);	\
	    }					\
	 }					\
	 break;					\
      case GL_AND_REVERSE:			\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = src[i] & ~dest[i];	\
	    }					\
	 }					\
	 break;					\
      case GL_AND_INVERTED:			\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~src[i] & dest[i];	\
	    }					\
	 }					\
	 break;					\
      case GL_OR_REVERSE:			\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = src[i] | ~dest[i];	\
	    }					\
	 }					\
	 break;					\
      case GL_OR_INVERTED:			\
         for (i = 0; i < n; i++) {		\
	    if (mask[i / MASKSTRIDE]) {		\
	       src[i] = ~src[i] | dest[i];	\
	    }					\
	 }					\
	 break;					\
      default:					\
	 _mesa_problem(ctx, "bad logicop mode");\
   }						\
} while (0)



static inline void
logicop_uint1(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
              const GLubyte mask[])
{
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 1);
}


static inline void
logicop_uint2(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
              const GLubyte mask[])
{
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 2);
}


static inline void
logicop_uint4(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
              const GLubyte mask[])
{
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 4);
}



/**
 * Apply the current logic operator to a span of RGBA pixels.
 * We can handle horizontal runs of pixels (spans) or arrays of x/y
 * pixel coordinates.
 */
void
_swrast_logicop_rgba_span(struct gl_context *ctx, struct gl_renderbuffer *rb,
                          SWspan *span)
{
   void *rbPixels;

   ASSERT(span->end < SWRAST_MAX_WIDTH);
   ASSERT(span->arrayMask & SPAN_RGBA);

   rbPixels = _swrast_get_dest_rgba(ctx, rb, span);

   if (span->array->ChanType == GL_UNSIGNED_BYTE) {
      /* treat 4*GLubyte as GLuint */
      logicop_uint1(ctx, span->end,
                    (GLuint *) span->array->rgba8,
                    (const GLuint *) rbPixels, span->array->mask);
   }
   else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
      /* treat 2*GLushort as GLuint */
      logicop_uint2(ctx, 2 * span->end,
                    (GLuint *) span->array->rgba16,
                    (const GLuint *) rbPixels, span->array->mask);
   }
   else {
      logicop_uint4(ctx, 4 * span->end,
                    (GLuint *) span->array->attribs[VARYING_SLOT_COL0],
                    (const GLuint *) rbPixels, span->array->mask);
   }
}
@


1.6
log
@Merge Mesa 9.2.0
@
text
@@


1.5
log
@Merge Mesa 7.10.3
@
text
@a2 1
 * Version:  6.5.2
d19 4
a22 3
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
d160 1
a160 1
static INLINE void
d168 1
a168 1
static INLINE void
d176 1
a176 1
static INLINE void
d196 1
a196 1
   ASSERT(span->end < MAX_WIDTH);
a197 1
   ASSERT(rb->DataType == span->array->ChanType);
d215 1
a215 1
                    (GLuint *) span->array->attribs[FRAG_ATTRIB_COL0],
@


1.4
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d161 1
a161 1
logicop_uint1(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
d169 1
a169 1
logicop_uint2(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
d177 1
a177 1
logicop_uint4(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
d191 1
a191 1
_swrast_logicop_rgba_span(GLcontext *ctx, struct gl_renderbuffer *rb,
@


1.3
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a184 27
/*
 * Apply the current logic operator to a span of CI pixels.  This is only
 * used if the device driver can't do logic ops.
 */
void
_swrast_logicop_ci_span(GLcontext *ctx, struct gl_renderbuffer *rb,
                        SWspan *span)
{
   GLuint dest[MAX_WIDTH];
   GLuint *index = span->array->index;

   ASSERT(span->end < MAX_WIDTH);
   ASSERT(rb->DataType == GL_UNSIGNED_INT);

   /* Read dest values from frame buffer */
   if (span->arrayMask & SPAN_XY) {
      _swrast_get_values(ctx, rb, span->end, span->array->x, span->array->y,
                         dest, sizeof(GLuint));
   }
   else {
      rb->GetRow(ctx, rb, span->end, span->x, span->y, dest);
   }

   logicop_uint1(ctx, span->end, index, dest, span->array->mask);
}


@


1.2
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d26 4
a29 4
#include "glheader.h"
#include "context.h"
#include "imports.h"
#include "macros.h"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Version:  6.3
d5 1
a5 1
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
d36 6
a41 1
#define LOGIC_OP_LOOP(MODE)			\
d47 1
a47 1
	    if (mask[i]) {			\
d54 1
a54 1
	    if (mask[i]) {			\
d64 1
a64 1
	    if (mask[i]) {			\
d71 1
a71 1
	    if (mask[i]) {			\
d78 1
a78 1
	    if (mask[i]) {			\
d85 1
a85 1
	    if (mask[i]) {			\
d92 1
a92 1
	    if (mask[i]) {			\
d99 1
a99 1
	    if (mask[i]) {			\
d106 1
a106 1
	    if (mask[i]) {			\
d113 1
a113 1
	    if (mask[i]) {			\
d120 1
a120 1
	    if (mask[i]) {			\
d127 1
a127 1
	    if (mask[i]) {			\
d134 1
a134 1
	    if (mask[i]) {			\
d141 1
a141 1
	    if (mask[i]) {			\
d148 1
a148 1
	    if (mask[i]) {			\
d160 2
a161 2
static void
logicop_ubyte(GLcontext *ctx, GLuint n, GLubyte src[], const GLubyte dest[],
d164 1
a164 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp);
d168 3
a170 3
static void
logicop_ushort(GLcontext *ctx, GLuint n, GLushort src[], const GLushort dest[],
               const GLubyte mask[])
d172 1
a172 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp);
d176 3
a178 3
static void
logicop_uint(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
             const GLubyte mask[])
d180 1
a180 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp);
d191 1
a191 1
                        const struct sw_span *span, GLuint index[])
d194 1
d208 1
a208 1
   logicop_uint(ctx, span->end, index, dest, span->array->mask);
d219 1
a219 1
                          const struct sw_span *span, GLchan rgba[][4])
d221 1
a221 1
   GLchan dest[MAX_WIDTH][4];
d225 3
a227 1
   ASSERT(rb->DataType == CHAN_TYPE);
d229 11
a239 3
   if (span->arrayMask & SPAN_XY) {
      _swrast_get_values(ctx, rb, span->end, span->array->x, span->array->y,
                         dest, 4 * sizeof(GLchan));
d242 3
a244 1
      _swrast_read_rgba_span(ctx, rb, span->end, span->x, span->y, dest);
a245 16

   /* XXX make this a runtime test */
#if CHAN_TYPE == GL_UNSIGNED_BYTE
   /* treat 4*GLubyte as GLuint */
   logicop_uint(ctx, span->end, (GLuint *) rgba,
                (const GLuint *) dest, span->array->mask);
#elif CHAN_TYPE == GL_UNSIGNED_SHORT
   logicop_ushort(ctx, 4 * span->end, (GLushort *) rgba,
                  (const GLushort *) dest, span->array->mask);
#elif CHAN_TYPE == GL_FLOAT
   logicop_uint(ctx, 4 * span->end, (GLuint *) rgba,
                (const GLuint *) dest, span->array->mask);
#endif
   (void) logicop_ubyte;
   (void) logicop_ushort;
   (void) logicop_uint;
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@import MesaLibs version 6.5.2
@
text
@d3 1
a3 1
 * Version:  6.5.2
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d36 1
a36 6
/**
 * We do all logic ops on 4-byte GLuints.
 * Depending on bytes per pixel, the mask array elements correspond to
 * 1, 2 or 4 GLuints.
 */
#define LOGIC_OP_LOOP(MODE, MASKSTRIDE)		\
d42 1
a42 1
	    if (mask[i / MASKSTRIDE]) {		\
d49 1
a49 1
	    if (mask[i / MASKSTRIDE]) {		\
d59 1
a59 1
	    if (mask[i / MASKSTRIDE]) {		\
d66 1
a66 1
	    if (mask[i / MASKSTRIDE]) {		\
d73 1
a73 1
	    if (mask[i / MASKSTRIDE]) {		\
d80 1
a80 1
	    if (mask[i / MASKSTRIDE]) {		\
d87 1
a87 1
	    if (mask[i / MASKSTRIDE]) {		\
d94 1
a94 1
	    if (mask[i / MASKSTRIDE]) {		\
d101 1
a101 1
	    if (mask[i / MASKSTRIDE]) {		\
d108 1
a108 1
	    if (mask[i / MASKSTRIDE]) {		\
d115 1
a115 1
	    if (mask[i / MASKSTRIDE]) {		\
d122 1
a122 1
	    if (mask[i / MASKSTRIDE]) {		\
d129 1
a129 1
	    if (mask[i / MASKSTRIDE]) {		\
d136 1
a136 1
	    if (mask[i / MASKSTRIDE]) {		\
d143 1
a143 1
	    if (mask[i / MASKSTRIDE]) {		\
d155 2
a156 2
static INLINE void
logicop_uint1(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
d159 1
a159 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 1);
d163 3
a165 3
static INLINE void
logicop_uint2(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
              const GLubyte mask[])
d167 1
a167 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 2);
d171 3
a173 3
static INLINE void
logicop_uint4(GLcontext *ctx, GLuint n, GLuint src[], const GLuint dest[],
              const GLubyte mask[])
d175 1
a175 1
   LOGIC_OP_LOOP(ctx->Color.LogicOp, 4);
d186 1
a186 1
                        SWspan *span)
a188 1
   GLuint *index = span->array->index;
d202 1
a202 1
   logicop_uint1(ctx, span->end, index, dest, span->array->mask);
d213 1
a213 1
                          SWspan *span)
d215 1
a215 1
   void *rbPixels;
d219 1
a219 1
   ASSERT(rb->DataType == span->array->ChanType);
d221 3
a223 13
   rbPixels = _swrast_get_dest_rgba(ctx, rb, span);

   if (span->array->ChanType == GL_UNSIGNED_BYTE) {
      /* treat 4*GLubyte as GLuint */
      logicop_uint1(ctx, span->end,
                    (GLuint *) span->array->color.sz1.rgba,
                    (const GLuint *) rbPixels, span->array->mask);
   }
   else if (span->array->ChanType == GL_UNSIGNED_SHORT) {
      /* treat 2*GLushort as GLuint */
      logicop_uint2(ctx, 2 * span->end,
                    (GLuint *) span->array->color.sz2.rgba,
                    (const GLuint *) rbPixels, span->array->mask);
d226 1
a226 3
      logicop_uint4(ctx, 4 * span->end,
                    (GLuint *) span->array->color.sz4.rgba,
                    (const GLuint *) rbPixels, span->array->mask);
d228 16
@


1.1.1.3
log
@Mesa 7.0.1
@
text
@d243 1
a243 1
                    (GLuint *) span->array->attribs[FRAG_ATTRIB_COL0],
@


1.1.1.4
log
@Import Mesa 7.10.3
@
text
@d26 4
a29 4
#include "main/glheader.h"
#include "main/context.h"
#include "main/imports.h"
#include "main/macros.h"
d161 1
a161 1
logicop_uint1(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
d169 1
a169 1
logicop_uint2(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
d177 1
a177 1
logicop_uint4(struct gl_context *ctx, GLuint n, GLuint src[], const GLuint dest[],
d185 27
d218 1
a218 1
_swrast_logicop_rgba_span(struct gl_context *ctx, struct gl_renderbuffer *rb,
d232 1
a232 1
                    (GLuint *) span->array->rgba8,
d238 1
a238 1
                    (GLuint *) span->array->rgba16,
@


1.1.1.5
log
@Import Mesa 9.2.0
@
text
@d3 1
d20 3
a22 4
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
d160 1
a160 1
static inline void
d168 1
a168 1
static inline void
d176 1
a176 1
static inline void
d196 1
a196 1
   ASSERT(span->end < SWRAST_MAX_WIDTH);
d198 1
d216 1
a216 1
                    (GLuint *) span->array->attribs[VARYING_SLOT_COL0],
@


