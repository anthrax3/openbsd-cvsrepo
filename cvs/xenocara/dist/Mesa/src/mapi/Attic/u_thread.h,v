head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.2
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2013.09.05.13.14.57;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.14.57;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.40;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/*
 * Thread support for gl dispatch.
 *
 * Initial version by John Stone (j.stone@@acm.org) (johns@@cs.umr.edu)
 *                and Christoph Poliwoda (poliwoda@@volumegraphics.com)
 * Revised by Keith Whitwell
 * Adapted for new gl dispatcher by Brian Paul
 * Modified for use in mapi by Chia-I Wu
 */

/*
 * If this file is accidentally included by a non-threaded build,
 * it should not cause the build to fail, or otherwise cause problems.
 * In general, it should only be included when needed however.
 */

#ifndef _U_THREAD_H_
#define _U_THREAD_H_

#include <stdio.h>
#include <stdlib.h>
#include "u_compiler.h"

#if defined(HAVE_PTHREAD)
#include <pthread.h> /* POSIX threads headers */
#endif
#ifdef _WIN32
#include <windows.h>
#endif

#if defined(HAVE_PTHREAD) || defined(_WIN32)
#ifndef THREADS
#define THREADS
#endif
#endif

/*
 * Error messages
 */
#define INIT_TSD_ERROR "_glthread_: failed to allocate key for thread specific data"
#define GET_TSD_ERROR "_glthread_: failed to get thread specific data"
#define SET_TSD_ERROR "_glthread_: thread failed to set thread specific data"


/*
 * Magic number to determine if a TSD object has been initialized.
 * Kind of a hack but there doesn't appear to be a better cross-platform
 * solution.
 */
#define INIT_MAGIC 0xff8adc98

#ifdef __cplusplus
extern "C" {
#endif


/*
 * POSIX threads. This should be your choice in the Unix world
 * whenever possible.  When building with POSIX threads, be sure
 * to enable any compiler flags which will cause the MT-safe
 * libc (if one exists) to be used when linking, as well as any
 * header macros for MT-safe errno, etc.  For Solaris, this is the -mt
 * compiler flag.  On Solaris with gcc, use -D_REENTRANT to enable
 * proper compiling for MT-safe libc etc.
 */
#if defined(HAVE_PTHREAD)

struct u_tsd {
   pthread_key_t key;
   unsigned initMagic;
};

typedef pthread_mutex_t u_mutex;

#define u_mutex_declare_static(name) \
   static u_mutex name = PTHREAD_MUTEX_INITIALIZER

#define u_mutex_init(name)    pthread_mutex_init(&(name), NULL)
#define u_mutex_destroy(name) pthread_mutex_destroy(&(name))
#define u_mutex_lock(name)    (void) pthread_mutex_lock(&(name))
#define u_mutex_unlock(name)  (void) pthread_mutex_unlock(&(name))

static INLINE unsigned long
u_thread_self(void)
{
   return (unsigned long) pthread_self();
}


static INLINE void
u_tsd_init(struct u_tsd *tsd)
{
   if (pthread_key_create(&tsd->key, NULL/*free*/) != 0) {
      perror(INIT_TSD_ERROR);
      exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
}


static INLINE void *
u_tsd_get(struct u_tsd *tsd)
{
   if (tsd->initMagic != INIT_MAGIC) {
      u_tsd_init(tsd);
   }
   return pthread_getspecific(tsd->key);
}


static INLINE void
u_tsd_set(struct u_tsd *tsd, void *ptr)
{
   if (tsd->initMagic != INIT_MAGIC) {
      u_tsd_init(tsd);
   }
   if (pthread_setspecific(tsd->key, ptr) != 0) {
      perror(SET_TSD_ERROR);
      exit(-1);
   }
}

#endif /* HAVE_PTHREAD */


/*
 * Windows threads. Should work with Windows NT and 95.
 * IMPORTANT: Link with multithreaded runtime library when THREADS are
 * used!
 */
#ifdef _WIN32

struct u_tsd {
   DWORD key;
   unsigned initMagic;
};

typedef CRITICAL_SECTION u_mutex;

/* http://locklessinc.com/articles/pthreads_on_windows/ */
#define u_mutex_declare_static(name) \
   static u_mutex name = {(PCRITICAL_SECTION_DEBUG)-1, -1, 0, 0, 0, 0}

#define u_mutex_init(name)    InitializeCriticalSection(&name)
#define u_mutex_destroy(name) DeleteCriticalSection(&name)
#define u_mutex_lock(name)    EnterCriticalSection(&name)
#define u_mutex_unlock(name)  LeaveCriticalSection(&name)

static INLINE unsigned long
u_thread_self(void)
{
   return GetCurrentThreadId();
}


static INLINE void
u_tsd_init(struct u_tsd *tsd)
{
   tsd->key = TlsAlloc();
   if (tsd->key == TLS_OUT_OF_INDEXES) {
      perror(INIT_TSD_ERROR);
      exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
}


static INLINE void
u_tsd_destroy(struct u_tsd *tsd)
{
   if (tsd->initMagic != INIT_MAGIC) {
      return;
   }
   TlsFree(tsd->key);
   tsd->initMagic = 0x0;
}


static INLINE void *
u_tsd_get(struct u_tsd *tsd)
{
   if (tsd->initMagic != INIT_MAGIC) {
      u_tsd_init(tsd);
   }
   return TlsGetValue(tsd->key);
}


static INLINE void
u_tsd_set(struct u_tsd *tsd, void *ptr)
{
   /* the following code assumes that the struct u_tsd has been initialized
      to zero at creation */
   if (tsd->initMagic != INIT_MAGIC) {
      u_tsd_init(tsd);
   }
   if (TlsSetValue(tsd->key, ptr) == 0) {
      perror(SET_TSD_ERROR);
      exit(-1);
   }
}

#endif /* _WIN32 */


/*
 * THREADS not defined
 */
#ifndef THREADS

struct u_tsd {
   unsigned initMagic;
};

typedef unsigned u_mutex;

#define u_mutex_declare_static(name)   static u_mutex name = 0
#define u_mutex_init(name)             (void) name
#define u_mutex_destroy(name)          (void) name
#define u_mutex_lock(name)             (void) name
#define u_mutex_unlock(name)           (void) name

/*
 * no-op functions
 */

static INLINE unsigned long
u_thread_self(void)
{
   return 0;
}


static INLINE void
u_tsd_init(struct u_tsd *tsd)
{
   (void) tsd;
}


static INLINE void *
u_tsd_get(struct u_tsd *tsd)
{
   (void) tsd;
   return NULL;
}


static INLINE void
u_tsd_set(struct u_tsd *tsd, void *ptr)
{
   (void) tsd;
   (void) ptr;
}
#endif /* THREADS */


#ifdef __cplusplus
}
#endif

#endif /* _U_THREAD_H_ */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d49 6
a54 1
#include "c11/threads.h"
d65 3
a67 3
#define INIT_TSD_ERROR "Mesa: failed to allocate key for thread specific data"
#define GET_TSD_ERROR "Mesa: failed to get thread specific data"
#define SET_TSD_ERROR "Mesa: thread failed to set thread specific data"
d82 11
d94 1
a94 1
   tss_t key;
d98 9
d111 1
a111 18
   /*
    * XXX: Callers of u_thread_self assume it is a lightweight function,
    * returning a numeric value.  But unfortunately C11's thrd_current() gives
    * no such guarantees.  In fact, it's pretty hard to have a compliant
    * implementation of thrd_current() on Windows with such characteristics.
    * So for now, we side-step this mess and use Windows thread primitives
    * directly here.
    *
    * FIXME: On the other hand, u_thread_self() is a bad
    * abstraction.  Even with pthreads, there is no guarantee that
    * pthread_self() will return numeric IDs -- we should be using
    * pthread_equal() instead of assuming we can compare thread ids...
    */
#ifdef _WIN32
   return GetCurrentThreadId();
#else
   return (unsigned long) (uintptr_t) thrd_current();
#endif
d118 1
a118 1
   if (tss_create(&tsd->key, NULL/*free*/) != 0) {
d132 1
a132 1
   return tss_get(tsd->key);
d142 1
a142 1
   if (tss_set(tsd->key, ptr) != 0) {
d148 44
d199 1
a199 1
   tss_delete(tsd->key);
d202 79
@

