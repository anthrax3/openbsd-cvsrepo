head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.14.03.58;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.14;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge Mesa 9.2.0
@
text
@#ifndef _U_CURRENT_H_
#define _U_CURRENT_H_

#if defined(MAPI_MODE_UTIL) || defined(MAPI_MODE_GLAPI) || \
    defined(MAPI_MODE_BRIDGE)

#include "glapi/glapi.h"

/* ugly renames to match glapi.h */
#define mapi_table _glapi_table

#ifdef GLX_USE_TLS
#define u_current_table _glapi_tls_Dispatch
#define u_current_user _glapi_tls_Context
#else
#define u_current_table _glapi_Dispatch
#define u_current_user _glapi_Context
#endif

#define u_current_get_internal _glapi_get_dispatch
#define u_current_get_user_internal _glapi_get_context

#define u_current_table_tsd _gl_DispatchTSD

#else /* MAPI_MODE_UTIL || MAPI_MODE_GLAPI || MAPI_MODE_BRIDGE */

#include "u_compiler.h"

struct mapi_table;

#ifdef GLX_USE_TLS

extern __thread struct mapi_table *u_current_table
    __attribute__((tls_model("initial-exec")));

extern __thread void *u_current_user
    __attribute__((tls_model("initial-exec")));

#else /* GLX_USE_TLS */

extern struct mapi_table *u_current_table;
extern void *u_current_user;

#endif /* GLX_USE_TLS */

#endif /* MAPI_MODE_UTIL || MAPI_MODE_GLAPI || MAPI_MODE_BRIDGE */

void
u_current_init(void);

void
u_current_destroy(void);

void
u_current_set(const struct mapi_table *tbl);

struct mapi_table *
u_current_get_internal(void);

void
u_current_set_user(const void *ptr);

void *
u_current_get_user_internal(void);

static INLINE const struct mapi_table *
u_current_get(void)
{
#ifdef GLX_USE_TLS
   return u_current_table;
#else
   return (likely(u_current_table) ?
         u_current_table : u_current_get_internal());
#endif
}

static INLINE const void *
u_current_get_user(void)
{
#ifdef GLX_USE_TLS
   return u_current_user;
#else
   return likely(u_current_user) ? u_current_user : u_current_get_user_internal();
#endif
}

#endif /* _U_CURRENT_H_ */
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.1
log
@Initial revision
@
text
@d4 2
a5 1
#ifdef MAPI_GLAPI_CURRENT
d12 4
a15 2
#define u_current_table_tls _glapi_tls_Dispatch
#define u_current_user_tls _glapi_tls_Context
d18 1
a19 3
#define u_current_destroy _glapi_destroy_multithread
#define u_current_init _glapi_check_multithread
#define u_current_set_internal _glapi_set_dispatch
a20 1
#define u_current_set_user_internal _glapi_set_context
d25 1
a25 1
#else /* MAPI_GLAPI_CURRENT */
d33 1
a33 1
extern __thread struct mapi_table *u_current_table_tls
d36 1
a36 1
extern __thread void *u_current_user_tls
a38 3
extern const struct mapi_table *u_current_table;
extern const void *u_current_user;

d46 2
d55 1
a55 1
u_current_set_internal(struct mapi_table *tbl);
d61 1
a61 1
u_current_set_user_internal(void *ptr);
a65 6
static INLINE void
u_current_set(const struct mapi_table *tbl)
{
   u_current_set_internal((struct mapi_table *) tbl);
}

d70 1
a70 1
   return (const struct mapi_table *) u_current_table_tls;
d73 1
a73 1
         (const struct mapi_table *) u_current_table : u_current_get_internal());
d77 1
a77 7
static INLINE void
u_current_set_user(void *ptr)
{
   u_current_set_internal(ptr);
}

static INLINE void *
d81 1
a81 1
   return u_current_user_tls;
a85 2

#endif /* MAPI_GLAPI_CURRENT */
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@
