head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.03.53;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.14;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.09;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.11;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.17;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/usr/bin/python2
# -*- Mode: Python; py-indent-offset: 8 -*-

# (C) Copyright Zack Rusin 2005
# All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# on the rights to use, copy, modify, merge, publish, distribute, sub
# license, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Authors:
#    Zack Rusin <zack@@kde.org>

import license
import gl_XML
import sys, getopt

class PrintGlEnums(gl_XML.gl_print_base):

    def __init__(self):
        gl_XML.gl_print_base.__init__(self)

        self.name = "gl_enums.py (from Mesa)"
        self.license = license.bsd_license_template % ( \
"""Copyright (C) 1999-2005 Brian Paul All Rights Reserved.""", "BRIAN PAUL")
        self.enum_table = {}


    def printRealHeader(self):
        print '#include "main/glheader.h"'
        print '#include "main/enums.h"'
        print '#include "main/imports.h"'
        print '#include "main/mtypes.h"'
        print ''
        print 'typedef struct PACKED {'
        print '   uint16_t offset;'
        print '   int n;'
        print '} enum_elt;'
        print ''
        return

    def print_code(self):
        print """
typedef int (*cfunc)(const void *, const void *);

/**
 * Compare a key enum value to an element in the \c enum_string_table_offsets array.
 *
 * \c bsearch always passes the key as the first parameter and the pointer
 * to the array element as the second parameter.  We can elimiate some
 * extra work by taking advantage of that fact.
 *
 * \param a  Pointer to the desired enum name.
 * \param b  Pointer into the \c enum_string_table_offsets array.
 */
static int compar_nr( const int *a, enum_elt *b )
{
   return a[0] - b->n;
}


static char token_tmp[20];

const char *_mesa_lookup_enum_by_nr( int nr )
{
   enum_elt *elt;

   STATIC_ASSERT(sizeof(enum_string_table) < (1 << 16));

   elt = _mesa_bsearch(& nr, enum_string_table_offsets,
                       Elements(enum_string_table_offsets),
                       sizeof(enum_string_table_offsets[0]),
                       (cfunc) compar_nr);

   if (elt != NULL) {
      return &enum_string_table[elt->offset];
   }
   else {
      /* this is not re-entrant safe, no big deal here */
      _mesa_snprintf(token_tmp, sizeof(token_tmp) - 1, "0x%x", nr);
      token_tmp[sizeof(token_tmp) - 1] = '\\0';
      return token_tmp;
   }
}

/**
 * Primitive names
 */
static const char *prim_names[PRIM_MAX+3] = {
   "GL_POINTS",
   "GL_LINES",
   "GL_LINE_LOOP",
   "GL_LINE_STRIP",
   "GL_TRIANGLES",
   "GL_TRIANGLE_STRIP",
   "GL_TRIANGLE_FAN",
   "GL_QUADS",
   "GL_QUAD_STRIP",
   "GL_POLYGON",
   "GL_LINES_ADJACENCY",
   "GL_LINE_STRIP_ADJACENCY",
   "GL_TRIANGLES_ADJACENCY",
   "GL_TRIANGLE_STRIP_ADJACENCY",
   "outside begin/end",
   "unknown state"
};


/* Get the name of an enum given that it is a primitive type.  Avoids
 * GL_FALSE/GL_POINTS ambiguity and others.
 */
const char *
_mesa_lookup_prim_by_nr(GLuint nr)
{
   if (nr < Elements(prim_names))
      return prim_names[nr];
   else
      return "invalid mode";
}


"""
        return


    def printBody(self, api_list):
        self.enum_table = {}
        for api in api_list:
            self.process_enums( api )

        enum_table = []

        for enum in sorted(self.enum_table.keys()):
            low_pri = 9
            best_name = ''
            for [name, pri] in self.enum_table[ enum ]:
                if pri < low_pri:
                    low_pri = pri
                    best_name = name

            enum_table.append((enum, best_name))

        string_offsets = {}
        i = 0;
        print 'LONGSTRING static const char enum_string_table[] = '
        for enum, name in enum_table:
            print '   "%s\\0"' % (name)
            string_offsets[ enum ] = i
            i += len(name) + 1

        print '   ;'
        print ''


        print 'static const enum_elt enum_string_table_offsets[%u] =' % (len(enum_table))
        print '{'
        for enum, name in enum_table:
            print '   { %5u, 0x%08X }, /* %s */' % (string_offsets[enum], enum, name)
        print '};'
        print ''

        self.print_code()
        return


    def process_enums(self, api):
        for obj in api.enumIterateByName():
            if obj.value not in self.enum_table:
                self.enum_table[ obj.value ] = []


            enum = self.enum_table[ obj.value ]
            name = "GL_" + obj.name
            priority = obj.priority()
            already_in = False;
            for n, p in enum:
                if n == name:
                    already_in = True
            if not already_in:
                enum.append( [name, priority] )


def show_usage():
    print "Usage: %s [-f input_file_name]" % sys.argv[0]
    sys.exit(1)

if __name__ == '__main__':
    try:
        (args, trail) = getopt.getopt(sys.argv[1:], "f:")
    except Exception,e:
        show_usage()

    api_list = []
    for (arg,val) in args:
        if arg == "-f":
            api = gl_XML.parse_GL_API( val )
            api_list.append(api);

    printer = PrintGlEnums()
    printer.Print( api_list )
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d85 4
a88 4
   elt = bsearch(& nr, enum_string_table_offsets,
                 Elements(enum_string_table_offsets),
                 sizeof(enum_string_table_offsets[0]),
                 (cfunc) compar_nr);
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d85 4
a88 4
   elt = _mesa_bsearch(& nr, enum_string_table_offsets,
                       Elements(enum_string_table_offsets),
                       sizeof(enum_string_table_offsets[0]),
                       (cfunc) compar_nr);
@


1.3
log
@Merge Mesa 9.2.0
@
text
@d50 2
a51 2
        print 'typedef struct {'
        print '   size_t offset;'
d62 1
a62 1
 * Compare a key name to an element in the \c all_enums array.
d69 1
a69 1
 * \param b  Pointer to an element of the \c all_enums array.
d71 1
a71 1
static int compar_name( const char *a, const enum_elt *b )
d73 1
a73 16
   return strcmp( a, & enum_string_table[ b->offset ] );
}

/**
 * Compare a key enum value to an element in the \c all_enums array.
 *
 * \c bsearch always passes the key as the first parameter and the pointer
 * to the array element as the second parameter.  We can elimiate some
 * extra work by taking advantage of that fact.
 *
 * \param a  Pointer to the desired enum name.
 * \param b  Pointer to an index into the \c all_enums array.
 */
static int compar_nr( const int *a, const unsigned *b )
{
   return a[0] - all_enums[*b].n;
d81 3
a83 1
   unsigned * i;
d85 4
a88 4
   i = (unsigned *) _mesa_bsearch(& nr, reduced_enums,
                                  Elements(reduced_enums),
                                  sizeof(reduced_enums[0]),
                                  (cfunc) compar_nr);
d90 2
a91 2
   if ( i != NULL ) {
      return & enum_string_table[ all_enums[ *i ].offset ];
a136 14
int _mesa_lookup_enum_by_name( const char *symbol )
{
   enum_elt * f = NULL;

   if ( symbol != NULL ) {
      f = (enum_elt *) _mesa_bsearch(symbol, all_enums,
                                     Elements(all_enums),
                                     sizeof( enum_elt ),
                                     (cfunc) compar_name);
   }

   return (f != NULL) ? f->n : -1;
}

d146 1
a146 5
        keys = self.enum_table.keys()
        keys.sort()

        name_table = []
        enum_table = {}
d148 1
a148 1
        for enum in keys:
d150 1
a151 2
                name_table.append( [name, enum] )

d154 1
a154 1
                    enum_table[enum] = name
d156 1
a156 2

        name_table.sort()
d161 1
a161 1
        for [name, enum] in name_table:
d163 1
a163 1
            string_offsets[ name ] = i
d170 1
a170 1
        print 'static const enum_elt all_enums[%u] =' % (len(name_table))
d172 2
a173 2
        for [name, enum] in name_table:
            print '   { %5u, 0x%08X }, /* %s */' % (string_offsets[name], enum, name)
a175 13

        print 'static const unsigned reduced_enums[%u] =' % (len(keys))
        print '{'
        for enum in keys:
            name = enum_table[ enum ]
            if [name, enum] not in name_table:
                print '      /* Error! %s, 0x%04x */ 0,' % (name, enum)
            else:
                i = name_table.index( [name, enum] )

                print '      %4u, /* %s */' % (i, name)
        print '};'

@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d35 2
a36 2
	def __init__(self):
		gl_XML.gl_print_base.__init__(self)
d38 2
a39 2
		self.name = "gl_enums.py (from Mesa)"
		self.license = license.bsd_license_template % ( \
d41 1
a41 1
		self.enum_table = {}
d44 12
a55 13
	def printRealHeader(self):
		print '#include "main/glheader.h"'
		print '#include "main/mfeatures.h"'
		print '#include "main/enums.h"'
		print '#include "main/imports.h"'
		print '#include "main/mtypes.h"'
		print ''
		print 'typedef struct {'
		print '   size_t offset;'
		print '   int n;'
		print '} enum_elt;'
		print ''
		return
d57 2
a58 2
	def print_code(self):
		print """
d117 1
a117 1
static const char *prim_names[PRIM_UNKNOWN + 1] = {
d128 4
a132 1
   "inside unknown primitive",
d165 1
a165 1
		return
d168 74
a241 74
	def printBody(self, api_list):
		self.enum_table = {}
		for api in api_list:
			self.process_enums( api )

		keys = self.enum_table.keys()
		keys.sort()

		name_table = []
		enum_table = {}

		for enum in keys:
			low_pri = 9
			for [name, pri] in self.enum_table[ enum ]:
				name_table.append( [name, enum] )

				if pri < low_pri:
					low_pri = pri
					enum_table[enum] = name
						

		name_table.sort()

		string_offsets = {}
		i = 0;
		print 'LONGSTRING static const char enum_string_table[] = '
		for [name, enum] in name_table:
			print '   "%s\\0"' % (name)
			string_offsets[ name ] = i
			i += len(name) + 1

		print '   ;'
		print ''


		print 'static const enum_elt all_enums[%u] =' % (len(name_table))
		print '{'
		for [name, enum] in name_table:
			print '   { %5u, 0x%08X }, /* %s */' % (string_offsets[name], enum, name)
		print '};'
		print ''

		print 'static const unsigned reduced_enums[%u] =' % (len(keys))
		print '{'
		for enum in keys:
			name = enum_table[ enum ]
			if [name, enum] not in name_table:
				print '      /* Error! %s, 0x%04x */ 0,' % (name, enum)
			else:
				i = name_table.index( [name, enum] )

				print '      %4u, /* %s */' % (i, name)
		print '};'


		self.print_code()
		return


	def process_enums(self, api):
		for obj in api.enumIterateByName():
			if obj.value not in self.enum_table:
				self.enum_table[ obj.value ] = []


			enum = self.enum_table[ obj.value ]
			name = "GL_" + obj.name
			priority = obj.priority()
			already_in = False;
			for n, p in enum:
				if n == name:
					already_in = True
			if not already_in:
				enum.append( [name, priority] )
d245 2
a246 2
	print "Usage: %s [-f input_file_name]" % sys.argv[0]
	sys.exit(1)
d249 10
a258 10
	try:
		(args, trail) = getopt.getopt(sys.argv[1:], "f:")
	except Exception,e:
		show_usage()

	api_list = []
	for (arg,val) in args:
		if arg == "-f":
			api = gl_XML.parse_GL_API( val )
			api_list.append(api);
d260 2
a261 2
	printer = PrintGlEnums()
	printer.Print( api_list )
@


1.1
log
@Initial revision
@
text
@d49 1
d115 20
d138 2
a139 1
const char *_mesa_lookup_prim_by_nr( int nr )
d141 4
a144 14
   switch (nr) {
   case GL_POINTS: return "GL_POINTS";
   case GL_LINES: return "GL_LINES";
   case GL_LINE_STRIP: return "GL_LINE_STRIP";
   case GL_LINE_LOOP: return "GL_LINE_LOOP";
   case GL_TRIANGLES: return "GL_TRIANGLES";
   case GL_TRIANGLE_STRIP: return "GL_TRIANGLE_STRIP";
   case GL_TRIANGLE_FAN: return "GL_TRIANGLE_FAN";
   case GL_QUADS: return "GL_QUADS";
   case GL_QUAD_STRIP: return "GL_QUAD_STRIP";
   case GL_POLYGON: return "GL_POLYGON";
   case GL_POLYGON+1: return "OUTSIDE_BEGIN_END";
   default: return "<invalid>";
   }
a145 1

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d35 2
a36 2
    def __init__(self):
        gl_XML.gl_print_base.__init__(self)
d38 2
a39 2
        self.name = "gl_enums.py (from Mesa)"
        self.license = license.bsd_license_template % ( \
d41 1
a41 1
        self.enum_table = {}
d44 12
a55 12
    def printRealHeader(self):
        print '#include "main/glheader.h"'
        print '#include "main/enums.h"'
        print '#include "main/imports.h"'
        print '#include "main/mtypes.h"'
        print ''
        print 'typedef struct {'
        print '   size_t offset;'
        print '   int n;'
        print '} enum_elt;'
        print ''
        return
d57 2
a58 2
    def print_code(self):
        print """
a113 23
/**
 * Primitive names
 */
static const char *prim_names[PRIM_MAX+3] = {
   "GL_POINTS",
   "GL_LINES",
   "GL_LINE_LOOP",
   "GL_LINE_STRIP",
   "GL_TRIANGLES",
   "GL_TRIANGLE_STRIP",
   "GL_TRIANGLE_FAN",
   "GL_QUADS",
   "GL_QUAD_STRIP",
   "GL_POLYGON",
   "GL_LINES_ADJACENCY",
   "GL_LINE_STRIP_ADJACENCY",
   "GL_TRIANGLES_ADJACENCY",
   "GL_TRIANGLE_STRIP_ADJACENCY",
   "outside begin/end",
   "unknown state"
};


d117 1
a117 2
const char *
_mesa_lookup_prim_by_nr(GLuint nr)
d119 14
a132 4
   if (nr < Elements(prim_names))
      return prim_names[nr];
   else
      return "invalid mode";
d136 1
d152 1
a152 66
        return


    def printBody(self, api_list):
        self.enum_table = {}
        for api in api_list:
            self.process_enums( api )

        keys = self.enum_table.keys()
        keys.sort()

        name_table = []
        enum_table = {}

        for enum in keys:
            low_pri = 9
            for [name, pri] in self.enum_table[ enum ]:
                name_table.append( [name, enum] )

                if pri < low_pri:
                    low_pri = pri
                    enum_table[enum] = name


        name_table.sort()

        string_offsets = {}
        i = 0;
        print 'LONGSTRING static const char enum_string_table[] = '
        for [name, enum] in name_table:
            print '   "%s\\0"' % (name)
            string_offsets[ name ] = i
            i += len(name) + 1

        print '   ;'
        print ''


        print 'static const enum_elt all_enums[%u] =' % (len(name_table))
        print '{'
        for [name, enum] in name_table:
            print '   { %5u, 0x%08X }, /* %s */' % (string_offsets[name], enum, name)
        print '};'
        print ''

        print 'static const unsigned reduced_enums[%u] =' % (len(keys))
        print '{'
        for enum in keys:
            name = enum_table[ enum ]
            if [name, enum] not in name_table:
                print '      /* Error! %s, 0x%04x */ 0,' % (name, enum)
            else:
                i = name_table.index( [name, enum] )

                print '      %4u, /* %s */' % (i, name)
        print '};'


        self.print_code()
        return


    def process_enums(self, api):
        for obj in api.enumIterateByName():
            if obj.value not in self.enum_table:
                self.enum_table[ obj.value ] = []
d155 74
a228 9
            enum = self.enum_table[ obj.value ]
            name = "GL_" + obj.name
            priority = obj.priority()
            already_in = False;
            for n, p in enum:
                if n == name:
                    already_in = True
            if not already_in:
                enum.append( [name, priority] )
d232 2
a233 2
    print "Usage: %s [-f input_file_name]" % sys.argv[0]
    sys.exit(1)
d236 10
a245 10
    try:
        (args, trail) = getopt.getopt(sys.argv[1:], "f:")
    except Exception,e:
        show_usage()

    api_list = []
    for (arg,val) in args:
        if arg == "-f":
            api = gl_XML.parse_GL_API( val )
            api_list.append(api);
d247 2
a248 2
    printer = PrintGlEnums()
    printer.Print( api_list )
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d50 2
a51 2
        print 'typedef struct PACKED {'
        print '   uint16_t offset;'
d62 1
a62 1
 * Compare a key enum value to an element in the \c enum_string_table_offsets array.
d69 1
a69 1
 * \param b  Pointer into the \c enum_string_table_offsets array.
d71 1
a71 1
static int compar_nr( const int *a, enum_elt *b )
d73 16
a88 1
   return a[0] - b->n;
d96 1
a96 3
   enum_elt *elt;

   STATIC_ASSERT(sizeof(enum_string_table) < (1 << 16));
d98 4
a101 4
   elt = _mesa_bsearch(& nr, enum_string_table_offsets,
                       Elements(enum_string_table_offsets),
                       sizeof(enum_string_table_offsets[0]),
                       (cfunc) compar_nr);
d103 2
a104 2
   if (elt != NULL) {
      return &enum_string_table[elt->offset];
d150 14
d173 5
a177 1
        enum_table = []
d179 1
a179 1
        for enum in sorted(self.enum_table.keys()):
a180 1
            best_name = ''
d182 2
d186 1
a186 1
                    best_name = name
d188 2
a189 1
            enum_table.append((enum, best_name))
d194 1
a194 1
        for enum, name in enum_table:
d196 1
a196 1
            string_offsets[ enum ] = i
d203 1
a203 1
        print 'static const enum_elt enum_string_table_offsets[%u] =' % (len(enum_table))
d205 2
a206 2
        for enum, name in enum_table:
            print '   { %5u, 0x%08X }, /* %s */' % (string_offsets[enum], enum, name)
d209 13
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d85 4
a88 4
   elt = bsearch(& nr, enum_string_table_offsets,
                 Elements(enum_string_table_offsets),
                 sizeof(enum_string_table_offsets[0]),
                 (cfunc) compar_nr);
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d85 4
a88 4
   elt = _mesa_bsearch(& nr, enum_string_table_offsets,
                       Elements(enum_string_table_offsets),
                       sizeof(enum_string_table_offsets[0]),
                       (cfunc) compar_nr);
@


