head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.1
	v9_2_3:1.1.1.1
	v9_2_2:1.1.1.1
	v9_2_1:1.1.1.1
	v9_2_0:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.58;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.59;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.14.03.53;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.17.13.58.14;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.09.05.13.15.09;	author jsg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.07.09.20.34.44;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.3
date	2015.01.25.14.11.11;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.4
date	2015.02.20.22.48.17;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/usr/bin/env python

# (C) Copyright IBM Corporation 2004, 2005
# (C) Copyright Apple Inc. 2011
# All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# on the rights to use, copy, modify, merge, publish, distribute, sub
# license, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Authors:
#    Jeremy Huddleston <jeremyhu@@apple.com>
#
# Based on code ogiginally by:
#    Ian Romanick <idr@@us.ibm.com>

import license
import gl_XML, glX_XML
import sys, getopt

header = """/* GLXEXT is the define used in the xserver when the GLX extension is being
 * built.  Hijack this to determine whether this file is being built for the
 * server or the client.
 */
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#if (defined(GLXEXT) && defined(HAVE_BACKTRACE)) \\
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__))
#define USE_BACKTRACE
#endif

#ifdef USE_BACKTRACE
#include <execinfo.h>
#endif

#ifndef _WIN32
#include <dlfcn.h>
#endif
#include <stdlib.h>
#include <stdio.h>

#include "main/glheader.h"

#include "glapi.h"
#include "glapitable.h"

#ifdef GLXEXT
#include "os.h"
#endif

static void
__glapi_gentable_NoOp(void) {
    const char *fstr = "Unknown";

    /* Silence potential GCC warning for some #ifdef paths.
     */
    (void) fstr;
#if defined(USE_BACKTRACE)
#if !defined(GLXEXT)
    if (getenv("MESA_DEBUG") || getenv("LIBGL_DEBUG"))
#endif
    {
        void *frames[2];

        if(backtrace(frames, 2) == 2) {
            Dl_info info;
            dladdr(frames[1], &info);
            if(info.dli_sname)
                fstr = info.dli_sname;
        }

#if !defined(GLXEXT)
        fprintf(stderr, "Call to unimplemented API: %s\\n", fstr);
#endif
    }
#endif
#if defined(GLXEXT)
    LogMessage(X_ERROR, "GLX: Call to unimplemented API: %s\\n", fstr);
#endif
}

static void
__glapi_gentable_set_remaining_noop(struct _glapi_table *disp) {
    GLuint entries = _glapi_get_dispatch_table_size();
    void **dispatch = (void **) disp;
    int i;

    /* ISO C is annoying sometimes */
    union {_glapi_proc p; void *v;} p;
    p.p = __glapi_gentable_NoOp;

    for(i=0; i < entries; i++)
        if(dispatch[i] == NULL)
            dispatch[i] = p.v;
}

struct _glapi_table *
_glapi_create_table_from_handle(void *handle, const char *symbol_prefix) {
    struct _glapi_table *disp = calloc(1, _glapi_get_dispatch_table_size() * sizeof(_glapi_proc));
    char symboln[512];

    if(!disp)
        return NULL;

    if(symbol_prefix == NULL)
        symbol_prefix = "";
"""

footer = """
    __glapi_gentable_set_remaining_noop(disp);

    return disp;
}
"""

body_template = """
    if(!disp->%(name)s) {
        void ** procp = (void **) &disp->%(name)s;
        snprintf(symboln, sizeof(symboln), "%%s%(entry_point)s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }
"""

class PrintCode(gl_XML.gl_print_base):

    def __init__(self):
        gl_XML.gl_print_base.__init__(self)

        self.name = "gl_gen_table.py (from Mesa)"
        self.license = license.bsd_license_template % ( \
"""Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
(C) Copyright IBM Corporation 2004, 2005
(C) Copyright Apple Inc 2011""", "BRIAN PAUL, IBM")

        return


    def get_stack_size(self, f):
        size = 0
        for p in f.parameterIterator():
            if p.is_padding:
                continue

            size += p.get_stack_size()

        return size


    def printRealHeader(self):
        print header
        return


    def printRealFooter(self):
        print footer
        return


    def printBody(self, api):
        for f in api.functionIterateByOffset():
            for entry_point in f.entry_points:
                vars = { 'entry_point' : entry_point,
                         'name' : f.name }

                print body_template % vars
        return

def show_usage():
    print "Usage: %s [-f input_file_name]" % sys.argv[0]
    sys.exit(1)

if __name__ == '__main__':
    file_name = "gl_API.xml"

    try:
        (args, trail) = getopt.getopt(sys.argv[1:], "m:f:")
    except Exception,e:
        show_usage()

    for (arg,val) in args:
        if arg == "-f":
            file_name = val

    printer = PrintCode()

    api = gl_XML.parse_GL_API(file_name, glX_XML.glx_item_factory())
    printer.Print(api)
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__DragonFly__))
d103 1
a103 1
    unsigned i;
d116 1
a116 1
    struct _glapi_table *disp = calloc(_glapi_get_dispatch_table_size(), sizeof(_glapi_proc));
a136 3
#ifdef _WIN32
        *procp = GetProcAddress(handle, symboln);
#else
a137 1
#endif
d146 1
a146 1
        self.name = "gl_gentable.py (from Mesa)"
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__))
d103 1
a103 1
    int i;
d116 1
a116 1
    struct _glapi_table *disp = calloc(1, _glapi_get_dispatch_table_size() * sizeof(_glapi_proc));
d137 3
d141 1
d150 1
a150 1
        self.name = "gl_gen_table.py (from Mesa)"
@


1.2
log
@Merge Mesa 9.2.0
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__))
d53 1
d55 1
d116 1
a116 1
    struct _glapi_table *disp = calloc(1, sizeof(struct _glapi_table));
@


1.1
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d36 14
a49 2
header = """
#if defined(DEBUG) && !defined(_WIN32_WCE)
d57 1
a57 1
#include <GL/gl.h>
d62 4
d68 10
a77 3
#if defined(DEBUG) && !defined(_WIN32_WCE)
    if (getenv("MESA_DEBUG") || getenv("LIBGL_DEBUG")) {
        const char *fstr = "Unknown";
d87 1
d89 1
d92 3
d141 2
a142 2
	def __init__(self):
		gl_XML.gl_print_base.__init__(self)
d144 2
a145 2
		self.name = "gl_gen_table.py (from Mesa)"
		self.license = license.bsd_license_template % ( \
d150 1
a150 1
		return
d153 5
a157 5
	def get_stack_size(self, f):
		size = 0
		for p in f.parameterIterator():
			if p.is_padding:
				continue
d159 1
a159 1
			size += p.get_stack_size()
d161 1
a161 1
		return size
d164 3
a166 3
	def printRealHeader(self):
		print header
		return
d169 3
a171 3
	def printRealFooter(self):
		print footer
		return
d174 5
a178 5
	def printBody(self, api):
		for f in api.functionIterateByOffset():
			for entry_point in f.entry_points:
				vars = { 'entry_point' : entry_point,
				         'name' : f.name }
d180 2
a181 2
				print body_template % vars
		return
d184 2
a185 2
	print "Usage: %s [-f input_file_name]" % sys.argv[0]
	sys.exit(1)
d188 1
a188 1
	file_name = "gl_API.xml"
d190 4
a193 4
	try:
		(args, trail) = getopt.getopt(sys.argv[1:], "m:f:")
	except Exception,e:
		show_usage()
d195 3
a197 3
	for (arg,val) in args:
		if arg == "-f":
			file_name = val
d199 1
a199 1
	printer = PrintCode()
d201 2
a202 2
	api = gl_XML.parse_GL_API(file_name, glX_XML.glx_item_factory())
	printer.Print(api)
@


1.1.1.1
log
@Import Mesa 9.2.0
@
text
@d36 2
a37 14
header = """/* GLXEXT is the define used in the xserver when the GLX extension is being
 * built.  Hijack this to determine whether this file is being built for the
 * server or the client.
 */
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#if (defined(GLXEXT) && defined(HAVE_BACKTRACE)) \\
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__))
#define USE_BACKTRACE
#endif

#ifdef USE_BACKTRACE
d45 1
a45 1
#include "main/glheader.h"
a49 4
#ifdef GLXEXT
#include "os.h"
#endif

d52 3
a54 10
    const char *fstr = "Unknown";

    /* Silence potential GCC warning for some #ifdef paths.
     */
    (void) fstr;
#if defined(USE_BACKTRACE)
#if !defined(GLXEXT)
    if (getenv("MESA_DEBUG") || getenv("LIBGL_DEBUG"))
#endif
    {
a63 1
#if !defined(GLXEXT)
a64 1
#endif
a66 3
#if defined(GLXEXT)
    LogMessage(X_ERROR, "GLX: Call to unimplemented API: %s\\n", fstr);
#endif
d113 2
a114 2
    def __init__(self):
        gl_XML.gl_print_base.__init__(self)
d116 2
a117 2
        self.name = "gl_gen_table.py (from Mesa)"
        self.license = license.bsd_license_template % ( \
d122 1
a122 1
        return
d125 5
a129 5
    def get_stack_size(self, f):
        size = 0
        for p in f.parameterIterator():
            if p.is_padding:
                continue
d131 1
a131 1
            size += p.get_stack_size()
d133 1
a133 1
        return size
d136 3
a138 3
    def printRealHeader(self):
        print header
        return
d141 3
a143 3
    def printRealFooter(self):
        print footer
        return
d146 5
a150 5
    def printBody(self, api):
        for f in api.functionIterateByOffset():
            for entry_point in f.entry_points:
                vars = { 'entry_point' : entry_point,
                         'name' : f.name }
d152 2
a153 2
                print body_template % vars
        return
d156 2
a157 2
    print "Usage: %s [-f input_file_name]" % sys.argv[0]
    sys.exit(1)
d160 1
a160 1
    file_name = "gl_API.xml"
d162 4
a165 4
    try:
        (args, trail) = getopt.getopt(sys.argv[1:], "m:f:")
    except Exception,e:
        show_usage()
d167 3
a169 3
    for (arg,val) in args:
        if arg == "-f":
            file_name = val
d171 1
a171 1
    printer = PrintCode()
d173 2
a174 2
    api = gl_XML.parse_GL_API(file_name, glX_XML.glx_item_factory())
    printer.Print(api)
@


1.1.1.2
log
@Import Mesa 10.2.3
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__))
a52 1
#ifndef _WIN32
a53 1
#endif
d114 1
a114 1
    struct _glapi_table *disp = calloc(1, _glapi_get_dispatch_table_size() * sizeof(_glapi_proc));
@


1.1.1.3
log
@Import Mesa 10.4.3
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__) && !defined(__DragonFly__))
d103 1
a103 1
    unsigned i;
d116 1
a116 1
    struct _glapi_table *disp = calloc(_glapi_get_dispatch_table_size(), sizeof(_glapi_proc));
a136 3
#ifdef _WIN32
        *procp = GetProcAddress(handle, symboln);
#else
a137 1
#endif
d146 1
a146 1
        self.name = "gl_gentable.py (from Mesa)"
@


1.1.1.4
log
@Import Mesa 10.2.9
@
text
@d45 1
a45 1
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE) && !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__OpenBSD__) && !defined(__NetBSD__))
d103 1
a103 1
    int i;
d116 1
a116 1
    struct _glapi_table *disp = calloc(1, _glapi_get_dispatch_table_size() * sizeof(_glapi_proc));
d137 3
d141 1
d150 1
a150 1
        self.name = "gl_gen_table.py (from Mesa)"
@


