head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.4
	OPENBSD_5_7_BASE:1.1.1.3
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.2
	OPENBSD_5_6_BASE:1.1.1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.02;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.42;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/usr/bin/env python

# (C) Copyright IBM Corporation 2004, 2005
# All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# on the rights to use, copy, modify, merge, publish, distribute, sub
# license, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Authors:
#    Ian Romanick <idr@@us.ibm.com>

import gl_XML, glX_XML
import string


class glx_proto_item_factory(glX_XML.glx_item_factory):
	"""Factory to create GLX protocol oriented objects derived from gl_item."""
    
	def create_item(self, name, element, context):
		if name == "type":
			return glx_proto_type(element, context)
		else:
			return glX_XML.glx_item_factory.create_item(self, name, element, context)


class glx_proto_type(gl_XML.gl_type):
	def __init__(self, element, context):
		gl_XML.gl_type.__init__(self, element, context)

		self.glx_name = element.nsProp( "glx_name", None )
		return


class glx_print_proto(gl_XML.gl_print_base):
	def size_call(self, func, outputs_also = 0):
		"""Create C code to calculate 'compsize'.

		Creates code to calculate 'compsize'.  If the function does
		not need 'compsize' to be calculated, None will be
		returned."""
	
		compsize = None

		for param in func.parameterIterator():
			if outputs_also or not param.is_output:
				if param.is_image():
					[dim, w, h, d, junk] = param.get_dimensions()

					compsize = '__glImageSize(%s, %s, %s, %s, %s, %s)' % (w, h, d, param.img_format, param.img_type, param.img_target)
					if not param.img_send_null:
						compsize = '(%s != NULL) ? %s : 0' % (param.name, compsize)

					return compsize

				elif len(param.count_parameter_list):
					parameters = string.join( param.count_parameter_list, "," )
					compsize = "__gl%s_size(%s)" % (func.name, parameters)

					return compsize

		return None


	def emit_packet_size_calculation(self, f, bias):
		# compsize is only used in the command size calculation if
		# the function has a non-output parameter that has a non-empty
		# counter_parameter_list.

		compsize = self.size_call(f)
		if compsize:
			print '    const GLuint compsize = %s;' % (compsize)

		if bias:
			print '    const GLuint cmdlen = %s - %u;' % (f.command_length(), bias)
		else:
			print '    const GLuint cmdlen = %s;' % (f.command_length())

		#print ''
		return compsize
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d33 7
a39 7
    """Factory to create GLX protocol oriented objects derived from gl_item."""

    def create_item(self, name, element, context):
        if name == "type":
            return glx_proto_type(element, context)
        else:
            return glX_XML.glx_item_factory.create_item(self, name, element, context)
d43 2
a44 2
    def __init__(self, element, context):
        gl_XML.gl_type.__init__(self, element, context)
d46 2
a47 2
        self.glx_name = element.nsProp( "glx_name", None )
        return
d51 2
a52 6
    def size_call(self, func, outputs_also = 0):
        """Create C code to calculate 'compsize'.

        Creates code to calculate 'compsize'.  If the function does
        not need 'compsize' to be calculated, None will be
        returned."""
d54 5
a58 1
        compsize = None
d60 4
a63 4
        for param in func.parameterIterator():
            if outputs_also or not param.is_output:
                if param.is_image():
                    [dim, w, h, d, junk] = param.get_dimensions()
d65 3
a67 3
                    compsize = '__glImageSize(%s, %s, %s, %s, %s, %s)' % (w, h, d, param.img_format, param.img_type, param.img_target)
                    if not param.img_send_null:
                        compsize = '(%s != NULL) ? %s : 0' % (param.name, compsize)
d69 1
a69 1
                    return compsize
d71 3
a73 3
                elif len(param.count_parameter_list):
                    parameters = string.join( param.count_parameter_list, "," )
                    compsize = "__gl%s_size(%s)" % (func.name, parameters)
d75 1
a75 1
                    return compsize
d77 1
a77 1
        return None
d80 4
a83 4
    def emit_packet_size_calculation(self, f, bias):
        # compsize is only used in the command size calculation if
        # the function has a non-output parameter that has a non-empty
        # counter_parameter_list.
d85 3
a87 3
        compsize = self.size_call(f)
        if compsize:
            print '    const GLuint compsize = %s;' % (compsize)
d89 4
a92 4
        if bias:
            print '    const GLuint cmdlen = %s - %u;' % (f.command_length(), bias)
        else:
            print '    const GLuint cmdlen = %s;' % (f.command_length())
d94 2
a95 2
        #print ''
        return compsize
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d35 5
a39 2
    def create_type(self, element, context, category):
        return glx_proto_type(element, context, category)
d43 2
a44 2
    def __init__(self, element, context, category):
        gl_XML.gl_type.__init__(self, element, context, category)
d46 1
a46 1
        self.glx_name = element.get( "glx_name" )
@


