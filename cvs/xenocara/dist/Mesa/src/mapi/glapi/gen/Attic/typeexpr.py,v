head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.6
	OPENBSD_5_7_BASE:1.1.1.2
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.2
	OPENBSD_5_5_BASE:1.1.1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.1;
commitid	TnlogFl9nOv2eaRf;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.09;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the now unused Mesa 10.2.9 code
@
text
@#!/usr/bin/env python

# (C) Copyright IBM Corporation 2005
# All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# on the rights to use, copy, modify, merge, publish, distribute, sub
# license, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
# IBM AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Authors:
#    Ian Romanick <idr@@us.ibm.com>

import string, copy

class type_node:
	def __init__(self):
		self.pointer = 0  # bool
		self.const = 0    # bool
		self.signed = 1   # bool
		self.integer = 1  # bool

		# If elements is set to non-zero, then field is an array.
		self.elements = 0

		self.name = None
		self.size = 0     # type's size in bytes
		return


	def string(self):
		"""Return string representation of this type_node."""
		s = ""
		
		if self.pointer:
			s = "* "

		if self.const:
			s += "const "

		if not self.pointer:
			if self.integer:
				if self.signed:
					s += "signed "
				else:
					s += "unsigned "

			if self.name:
				s += "%s " % (self.name)

		return s


class type_table:
	def __init__(self):
		self.types_by_name = {}
		return


	def add_type(self, type_expr):
		self.types_by_name[ type_expr.get_base_name() ] = type_expr
		return


	def find_type(self, name):
		if name in self.types_by_name:
			return self.types_by_name[ name ]
		else:
			return None


def create_initial_types():
	tt = type_table()

	basic_types = [
		("char",   1, 1),
		("short",  2, 1),
		("int",    4, 1),
		("long",   4, 1),
		("float",  4, 0),
		("double", 8, 0),
		("enum",   4, 1)
	]

	for (type_name, type_size, integer) in basic_types:
		te = type_expression(None)
		tn = type_node()
		tn.name = type_name
		tn.size = type_size
		tn.integer = integer
		te.expr.append(tn)
		tt.add_type( te )

	type_expression.built_in_types = tt
	return


class type_expression:
	built_in_types = None

	def __init__(self, type_string, extra_types = None):
		self.expr = []

		if not type_string:
			return

		self.original_string = type_string

		if not type_expression.built_in_types:
			raise RuntimeError("create_initial_types must be called before creating type_expression objects.")

		# Replace '*' with ' * ' in type_string.  Then, split the string
		# into tokens, separated by spaces.
		tokens = string.split( string.replace( type_string, "*", " * " ) )

		const = 0
		t = None
		signed = 0
		unsigned = 0

		for i in tokens:
			if i == "const":
				if t and t.pointer:
					t.const = 1
				else:
					const = 1
			elif i == "signed":
				signed = 1
			elif i == "unsigned":
				unsigned = 1
			elif i == "*":
				# This is a quirky special-case because of the
				# way the C works for types.  If 'unsigned' is
				# specified all by itself, it is treated the
				# same as "unsigned int".

				if unsigned:
					self.set_base_type( "int", signed, unsigned, const, extra_types )
					const = 0
					signed = 0
					unsigned = 0

				if not self.expr:
					raise RuntimeError("Invalid type expression (dangling pointer)")

				if signed:
					raise RuntimeError("Invalid type expression (signed / unsigned applied to pointer)")

				t = type_node()
				t.pointer = 1
				self.expr.append( t )
			else:
				if self.expr:
					raise RuntimeError('Invalid type expression (garbage after pointer qualifier -> "%s")' % (self.original_string))

				self.set_base_type( i, signed, unsigned, const, extra_types )
				const = 0
				signed = 0
				unsigned = 0

			if signed and unsigned:
				raise RuntimeError("Invalid type expression (both signed and unsigned specified)")
				

		if const:
			raise RuntimeError("Invalid type expression (dangling const)")

		if unsigned:
			raise RuntimeError("Invalid type expression (dangling signed)")

		if signed:
			raise RuntimeError("Invalid type expression (dangling unsigned)")

		return


	def set_base_type(self, type_name, signed, unsigned, const, extra_types):
		te = type_expression.built_in_types.find_type( type_name )
		if not te:
			te = extra_types.find_type( type_name )

		if not te:
			raise RuntimeError('Unknown base type "%s".' % (type_name))

		self.expr = copy.deepcopy(te.expr)

		t = self.expr[ len(self.expr) - 1 ]
		t.const = const
		if signed:
			t.signed = 1
		elif unsigned:
			t.signed = 0


	def set_base_type_node(self, tn):
		self.expr = [tn]
		return


	def set_elements(self, count):
		tn = self.expr[0]

		tn.elements = count
		return


	def string(self):
		s = ""
		for t in self.expr:
			s += t.string()

		return s


	def get_base_type_node(self):
		return self.expr[0]


	def get_base_name(self):
		if len(self.expr):
			return self.expr[0].name
		else:
			return None


	def get_element_size(self):
		tn = self.expr[0]

		if tn.elements:
			return tn.elements * tn.size
		else:
			return tn.size


	def get_element_count(self):
		tn = self.expr[0]
		return tn.elements


	def get_stack_size(self):
		tn = self.expr[ len(self.expr) - 1 ]

		if tn.elements or tn.pointer:
			return 4
		elif not tn.integer:
			return tn.size
		else:
			return 4


	def is_pointer(self):
		tn = self.expr[ len(self.expr) - 1 ]
		return tn.pointer


	def format_string(self):
		tn = self.expr[ len(self.expr) - 1 ]
		if tn.pointer:
			return "%p"
		elif not tn.integer:
			return "%f"
		else:
			return "%d"



if __name__ == '__main__':
	
	types_to_try = [ "int", "int *", "const int *", "int * const", "const int * const", \
	                 "unsigned * const *", \
			 "float", "const double", "double * const"]

	create_initial_types()

	for t in types_to_try:
		print 'Trying "%s"...' % (t)
		te = type_expression( t )
		print 'Got "%s" (%u, %u).' % (te.string(), te.get_stack_size(), te.get_element_size())
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d30 6
a35 6
class type_node(object):
    def __init__(self):
        self.pointer = 0  # bool
        self.const = 0    # bool
        self.signed = 1   # bool
        self.integer = 1  # bool
d37 2
a38 2
        # If elements is set to non-zero, then field is an array.
        self.elements = 0
d40 3
a42 3
        self.name = None
        self.size = 0     # type's size in bytes
        return
d45 6
a50 3
    def string(self):
        """Return string representation of this type_node."""
        s = ""
d52 2
a53 2
        if self.pointer:
            s = "* "
d55 6
a60 2
        if self.const:
            s += "const "
d62 2
a63 6
        if not self.pointer:
            if self.integer:
                if self.signed:
                    s += "signed "
                else:
                    s += "unsigned "
d65 1
a65 2
            if self.name:
                s += "%s " % (self.name)
a66 1
        return s
d68 4
a72 4
class type_table(object):
    def __init__(self):
        self.types_by_name = {}
        return
d74 3
a77 3
    def add_type(self, type_expr):
        self.types_by_name[ type_expr.get_base_name() ] = type_expr
        return
d79 5
a83 6

    def find_type(self, name):
        if name in self.types_by_name:
            return self.types_by_name[ name ]
        else:
            return None
d87 1
a87 11
    tt = type_table()

    basic_types = [
            ("char",   1, 1),
            ("short",  2, 1),
            ("int",    4, 1),
            ("long",   4, 1),
            ("float",  4, 0),
            ("double", 8, 0),
            ("enum",   4, 1)
    ]
d89 9
a97 8
    for (type_name, type_size, integer) in basic_types:
        te = type_expression(None)
        tn = type_node()
        tn.name = type_name
        tn.size = type_size
        tn.integer = integer
        te.expr.append(tn)
        tt.add_type( te )
d99 8
a106 2
    type_expression.built_in_types = tt
    return
d108 2
a110 2
class type_expression(object):
    built_in_types = None
d112 2
a113 2
    def __init__(self, type_string, extra_types = None):
        self.expr = []
d115 2
a116 2
        if not type_string:
            return
d118 2
a119 1
        self.original_string = type_string
d121 1
a121 2
        if not type_expression.built_in_types:
            raise RuntimeError("create_initial_types must be called before creating type_expression objects.")
d123 2
a124 3
        # Replace '*' with ' * ' in type_string.  Then, split the string
        # into tokens, separated by spaces.
        tokens = string.split( string.replace( type_string, "*", " * " ) )
d126 3
a128 4
        const = 0
        t = None
        signed = 0
        unsigned = 0
d130 4
a133 15
        for i in tokens:
            if i == "const":
                if t and t.pointer:
                    t.const = 1
                else:
                    const = 1
            elif i == "signed":
                signed = 1
            elif i == "unsigned":
                unsigned = 1
            elif i == "*":
                # This is a quirky special-case because of the
                # way the C works for types.  If 'unsigned' is
                # specified all by itself, it is treated the
                # same as "unsigned int".
d135 15
a149 5
                if unsigned:
                    self.set_base_type( "int", signed, unsigned, const, extra_types )
                    const = 0
                    signed = 0
                    unsigned = 0
d151 5
a155 2
                if not self.expr:
                    raise RuntimeError("Invalid type expression (dangling pointer)")
d157 2
a158 2
                if signed:
                    raise RuntimeError("Invalid type expression (signed / unsigned applied to pointer)")
d160 2
a161 6
                t = type_node()
                t.pointer = 1
                self.expr.append( t )
            else:
                if self.expr:
                    raise RuntimeError('Invalid type expression (garbage after pointer qualifier -> "%s")' % (self.original_string))
d163 6
a168 4
                self.set_base_type( i, signed, unsigned, const, extra_types )
                const = 0
                signed = 0
                unsigned = 0
d170 4
a173 2
            if signed and unsigned:
                raise RuntimeError("Invalid type expression (both signed and unsigned specified)")
d175 3
d179 2
a180 2
        if const:
            raise RuntimeError("Invalid type expression (dangling const)")
d182 2
a183 2
        if unsigned:
            raise RuntimeError("Invalid type expression (dangling signed)")
d185 2
a186 2
        if signed:
            raise RuntimeError("Invalid type expression (dangling unsigned)")
d188 1
a188 1
        return
d191 4
a194 4
    def set_base_type(self, type_name, signed, unsigned, const, extra_types):
        te = type_expression.built_in_types.find_type( type_name )
        if not te:
            te = extra_types.find_type( type_name )
d196 2
a197 2
        if not te:
            raise RuntimeError('Unknown base type "%s".' % (type_name))
d199 1
a199 1
        self.expr = copy.deepcopy(te.expr)
d201 6
a206 6
        t = self.expr[ len(self.expr) - 1 ]
        t.const = const
        if signed:
            t.signed = 1
        elif unsigned:
            t.signed = 0
d209 3
a211 3
    def set_base_type_node(self, tn):
        self.expr = [tn]
        return
d214 2
a215 2
    def set_elements(self, count):
        tn = self.expr[0]
d217 2
a218 2
        tn.elements = count
        return
d221 4
a224 4
    def string(self):
        s = ""
        for t in self.expr:
            s += t.string()
d226 1
a226 1
        return s
d229 2
a230 2
    def get_base_type_node(self):
        return self.expr[0]
d233 5
a237 5
    def get_base_name(self):
        if len(self.expr):
            return self.expr[0].name
        else:
            return None
d240 2
a241 2
    def get_element_size(self):
        tn = self.expr[0]
d243 4
a246 4
        if tn.elements:
            return tn.elements * tn.size
        else:
            return tn.size
d249 3
a251 3
    def get_element_count(self):
        tn = self.expr[0]
        return tn.elements
d254 2
a255 2
    def get_stack_size(self):
        tn = self.expr[ -1 ]
d257 6
a262 6
        if tn.elements or tn.pointer:
            return 4
        elif not tn.integer:
            return tn.size
        else:
            return 4
d265 3
a267 3
    def is_pointer(self):
        tn = self.expr[ -1 ]
        return tn.pointer
d270 8
a277 8
    def format_string(self):
        tn = self.expr[ -1 ]
        if tn.pointer:
            return "%p"
        elif not tn.integer:
            return "%f"
        else:
            return "%d"
d282 11
a292 11

    types_to_try = [ "int", "int *", "const int *", "int * const", "const int * const", \
                     "unsigned * const *", \
                     "float", "const double", "double * const"]

    create_initial_types()

    for t in types_to_try:
        print 'Trying "%s"...' % (t)
        te = type_expression( t )
        print 'Got "%s" (%u, %u).' % (te.string(), te.get_stack_size(), te.get_element_size())
@

