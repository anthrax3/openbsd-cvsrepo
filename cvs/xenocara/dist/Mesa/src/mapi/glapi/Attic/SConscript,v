head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2015.12.23.05.17.47;	author jsg;	state dead;
branches;
next	1.6;
commitid	TnlogFl9nOv2eaRf;

1.6
date	2015.02.20.23.09.57;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4ry2gvZGMXkCUD2n;

1.5
date	2015.01.25.14.41.20;	author jsg;	state Exp;
branches;
next	1.4;
commitid	mcxB0JvoI9gTDYXU;

1.4
date	2014.07.09.21.08.58;	author jsg;	state Exp;
branches;
next	1.3;
commitid	WPD6rgPryPkvXOr9;

1.3
date	2013.09.05.14.03.48;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.14;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.14.59;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.34.41;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.11.01;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.48.07;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.7
log
@remove the now unused Mesa 10.2.9 code
@
text
@#######################################################################
# SConscript for glapi


from sys import executable as python_cmd

Import('*')

env = env.Clone()

env.Append(CPPDEFINES = [
    'MAPI_MODE_UTIL',
])

if env['platform'] == 'windows':
    env.Append(CPPDEFINES = [
        '_GDI32_', # prevent gl* being declared __declspec(dllimport) in MS headers
        'BUILD_GL32', # declare gl* as __declspec(dllexport) in Mesa headers
    ])
    if env['gles']:
        env.Append(CPPDEFINES = ['_GLAPI_DLL_EXPORTS'])
    else:
        # prevent _glapi_* from being declared __declspec(dllimport)
        env.Append(CPPDEFINES = ['_GLAPI_NO_EXPORTS'])

env.Append(CPPPATH = [
    '#/src/mapi',
    '#/src/mesa',
    Dir('..'), # src/mapi build path
])

glapi_sources = [
    'glapi_dispatch.c',
    'glapi_entrypoint.c',
    'glapi_getproc.c',
    'glapi_nop.c',
    'glapi.c',
]

mapi_sources = [
    'u_current.c',
    'u_execmem.c',
]
for s in mapi_sources:
    o = env.SharedObject(s[:-2], '../' + s)
    glapi_sources.append(o)

#
# Assembly sources
#
if (env['gcc'] or env['clang']) and \
   env['platform'] not in ('cygwin', 'darwin', 'windows'):
    GLAPI = '#src/mapi/glapi/'
    sources = [GLAPI + 'gen/gl_and_es_API.xml'] + env.Glob(GLAPI + 'gen/*.xml')

    if env['machine'] == 'x86':
        env.Append(CPPDEFINES = [
            'USE_X86_ASM',
        ])
        glapi_sources += [
            'glapi_x86.S',
        ]
        env.CodeGenerate(
            target = 'glapi_x86.S',
            script = GLAPI + 'gen/gl_x86_asm.py',
            source = sources,
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    elif env['machine'] == 'x86_64':
        env.Append(CPPDEFINES = [
            'USE_X86_64_ASM',
        ])
        glapi_sources += [
            'glapi_x86-64.S'
        ]
        env.CodeGenerate(
            target = 'glapi_x86-64.S',
            script = GLAPI + 'gen/gl_x86-64_asm.py',
            source = sources,
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    elif env['machine'] == 'sparc':
        env.Append(CPPDEFINES = [
            'USE_SPARC_ASM',
        ])
        glapi_sources += [
            'glapi_sparc.S'
        ]
        env.CodeGenerate(
            target = 'glapi_sparc.S',
            script = GLAPI + 'gen/gl_SPARC_asm.py',
            source = sources,
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    else:
        pass

glapi = env.ConvenienceLibrary(
    target = 'glapi',
    source = glapi_sources,
)
Export('glapi')
@


1.6
log
@Merge Mesa 10.2.9
@
text
@@


1.5
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a18 1
        'KHRONOS_DLL_EXPORTS', # declare gl* as __declspec(dllexport) in Khronos headers
@


1.4
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d19 1
@


1.3
log
@Merge Mesa 9.2.0
@
text
@a36 1
    'glthread.c',
d54 1
d66 1
a66 1
            source = GLAPI + 'gen/gl_and_es_API.xml',
d79 1
a79 1
            source = GLAPI + 'gen/gl_and_es_API.xml',
d92 1
a92 1
            source = GLAPI + 'gen/gl_and_es_API.xml',
@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d5 2
d9 5
a13 1
if env['platform'] != 'winddk':
d15 1
a15 2
    env = env.Clone()
    
d17 2
a18 1
        'MAPI_MODE_UTIL',
d20 35
d56 1
a56 1
    if env['platform'] == 'windows':
d58 1
a58 2
            '_GDI32_', # prevent gl* being declared __declspec(dllimport) in MS headers
            'BUILD_GL32', # declare gl* as __declspec(dllexport) in Mesa headers
d60 43
a102 62
        if env['gles']:
            env.Append(CPPDEFINES = ['_GLAPI_DLL_EXPORTS'])
        else:
            # prevent _glapi_* from being declared __declspec(dllimport)
            env.Append(CPPDEFINES = ['_GLAPI_NO_EXPORTS'])

    env.Append(CPPPATH = [
        '#/src/mapi',
        '#/src/mesa',
    ])
    
    glapi_sources = [
        'glapi_dispatch.c',
        'glapi_entrypoint.c',
        'glapi_getproc.c',
        'glapi_nop.c',
        'glthread.c',
        'glapi.c',
    ]
    
    mapi_sources = [
        'u_current.c',
        'u_execmem.c',
        'u_thread.c',
    ]
    for s in mapi_sources:
        o = env.SharedObject(s[:-2], '../mapi/' + s)
        glapi_sources.append(o)

    #
    # Assembly sources
    #
    if env['gcc'] and env['platform'] != 'windows':
        if env['machine'] == 'x86':
            env.Append(CPPDEFINES = [
                'USE_X86_ASM',
            ])
            glapi_sources += [
                'glapi_x86.S',
            ]
        elif env['machine'] == 'x86_64':
            env.Append(CPPDEFINES = [
                'USE_X86_64_ASM',
            ])
            glapi_sources += [
                'glapi_x86-64.S'
            ]
        elif env['machine'] == 'sparc':
            env.Append(CPPDEFINES = [
                'USE_SPARC_ASM',
            ])
            glapi_sources += [
                'glapi_sparc.S'
            ]
        else:
            pass
    
    glapi = env.ConvenienceLibrary(
        target = 'glapi',
        source = glapi_sources,
    )
    Export('glapi')
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
        'MAPI_GLAPI_CURRENT',
d20 5
d37 1
d55 1
a55 4
                'USE_X86_ASM', 
                'USE_MMX_ASM',
                'USE_3DNOW_ASM',
                'USE_SSE_ASM',
d62 1
a62 1
                'USE_X86_64_ASM', 
d67 1
a67 1
        elif env['machine'] == 'ppc':
d69 1
a69 2
                'USE_PPC_ASM', 
                'USE_VMX_ASM', 
a70 3
            glapi_sources += [
            ]
        elif env['machine'] == 'sparc':
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a4 2
from sys import executable as python_cmd

d7 1
a7 5
env = env.Clone()

env.Append(CPPDEFINES = [
    'MAPI_MODE_UTIL',
])
d9 2
a10 1
if env['platform'] == 'windows':
d12 1
a12 2
        '_GDI32_', # prevent gl* being declared __declspec(dllimport) in MS headers
        'BUILD_GL32', # declare gl* as __declspec(dllexport) in Mesa headers
a13 35
    if env['gles']:
        env.Append(CPPDEFINES = ['_GLAPI_DLL_EXPORTS'])
    else:
        # prevent _glapi_* from being declared __declspec(dllimport)
        env.Append(CPPDEFINES = ['_GLAPI_NO_EXPORTS'])

env.Append(CPPPATH = [
    '#/src/mapi',
    '#/src/mesa',
    Dir('..'), # src/mapi build path
])

glapi_sources = [
    'glapi_dispatch.c',
    'glapi_entrypoint.c',
    'glapi_getproc.c',
    'glapi_nop.c',
    'glthread.c',
    'glapi.c',
]

mapi_sources = [
    'u_current.c',
    'u_execmem.c',
]
for s in mapi_sources:
    o = env.SharedObject(s[:-2], '../' + s)
    glapi_sources.append(o)

#
# Assembly sources
#
if (env['gcc'] or env['clang']) and \
   env['platform'] not in ('cygwin', 'darwin', 'windows'):
    GLAPI = '#src/mapi/glapi/'
d15 1
a15 1
    if env['machine'] == 'x86':
d17 2
a18 1
            'USE_X86_ASM',
a19 37
        glapi_sources += [
            'glapi_x86.S',
        ]
        env.CodeGenerate(
            target = 'glapi_x86.S',
            script = GLAPI + 'gen/gl_x86_asm.py',
            source = GLAPI + 'gen/gl_and_es_API.xml',
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    elif env['machine'] == 'x86_64':
        env.Append(CPPDEFINES = [
            'USE_X86_64_ASM',
        ])
        glapi_sources += [
            'glapi_x86-64.S'
        ]
        env.CodeGenerate(
            target = 'glapi_x86-64.S',
            script = GLAPI + 'gen/gl_x86-64_asm.py',
            source = GLAPI + 'gen/gl_and_es_API.xml',
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    elif env['machine'] == 'sparc':
        env.Append(CPPDEFINES = [
            'USE_SPARC_ASM',
        ])
        glapi_sources += [
            'glapi_sparc.S'
        ]
        env.CodeGenerate(
            target = 'glapi_sparc.S',
            script = GLAPI + 'gen/gl_SPARC_asm.py',
            source = GLAPI + 'gen/gl_and_es_API.xml',
            command = python_cmd + ' $SCRIPT -f $SOURCE > $TARGET'
            )
    else:
        pass
d21 62
a82 5
glapi = env.ConvenienceLibrary(
    target = 'glapi',
    source = glapi_sources,
)
Export('glapi')
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d37 1
a54 1
    sources = [GLAPI + 'gen/gl_and_es_API.xml'] + env.Glob(GLAPI + 'gen/*.xml')
d66 1
a66 1
            source = sources,
d79 1
a79 1
            source = sources,
d92 1
a92 1
            source = sources,
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@a18 1
        'KHRONOS_DLL_EXPORTS', # declare gl* as __declspec(dllexport) in Khronos headers
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d19 1
@


