head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	v10_2_9:1.1.1.2
	v10_4_3:1.1.1.2
	v10_2_7:1.1.1.2
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.2
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.12.23.05.17.48;	author jsg;	state dead;
branches;
next	1.3;
commitid	TnlogFl9nOv2eaRf;

1.3
date	2013.09.05.14.04.00;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.14;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.35;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.15.12;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove the now unused Mesa 10.2.9 code
@
text
@#######################################################################
# SConscript for vgapi

from sys import executable as python_cmd

Import('*')

env = env.Clone()

vgapi_header, = env.CodeGenerate(
    target = 'vgapi_tmp.h',
    script = '../mapi_abi.py',
    source = 'vgapi.csv',
    command = python_cmd + ' $SCRIPT --printer vgapi --mode lib $SOURCE > $TARGET'
)

env.Append(CPPDEFINES = [
    'MAPI_ABI_HEADER=\\"vgapi/vgapi_tmp.h\\"',
    'MAPI_DLL_EXPORTS',
    'KHRONOS_DLL_EXPORTS',
])

env.Append(CPPPATH = [
    '#/include',
    '#/src/mapi',
    Dir('..'), # vgapi/vgapi_tmp.h build path
])

mapi_sources = [
    'entry.c',
    'mapi.c',
    'stub.c',
    'table.c',
    'u_current.c',
    'u_execmem.c',
]

vgapi_objects = []
for s in mapi_sources:
    o = env.SharedObject(s[:-2], '../' + s)
    vgapi_objects.append(o)

env.Depends(vgapi_objects, vgapi_header)

# libOpenVG.dll
env['LIBPREFIX'] = 'lib'
env['SHLIBPREFIX'] = 'lib'

openvg = env.SharedLibrary(
    target = 'OpenVG',
    source = vgapi_objects,
)

env.InstallSharedLibrary(openvg, version=(1, 0, 0))

if env['platform'] == 'windows':
    openvg = env.FindIxes(openvg, 'LIBPREFIX', 'LIBSUFFIX')
else:
    openvg = env.FindIxes(openvg, 'SHLIBPREFIX', 'SHLIBSUFFIX')

Export(['openvg'])
@


1.3
log
@Merge Mesa 9.2.0
@
text
@@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d8 1
a8 1
if env['platform'] != 'winddk':
d10 50
a59 1
	env = env.Clone()
d61 1
a61 52
	vgapi_header = env.CodeGenerate(
		target = '#src/mapi/vgapi/vgapi_tmp.h',
		script = '../mapi/mapi_abi.py',
		source = 'vgapi.csv',
		command = python_cmd + ' $SCRIPT --printer vgapi --mode lib $SOURCE > $TARGET'
	)

	env.Append(CPPDEFINES = [
		'MAPI_ABI_HEADER=\\"vgapi/vgapi_tmp.h\\"',
		'MAPI_DLL_EXPORTS',
		'KHRONOS_DLL_EXPORTS',
	])

	env.Append(CPPPATH = [
		'#/include',
		'#/src/mapi',
	])

	mapi_sources = [
		'entry.c',
		'mapi.c',
		'stub.c',
		'table.c',
		'u_current.c',
		'u_execmem.c',
		'u_thread.c',
	]

	vgapi_objects = []
	for s in mapi_sources:
		o = env.SharedObject(s[:-2], '../mapi/' + s)
		vgapi_objects.append(o)

	env.Depends(vgapi_objects, vgapi_header)

	# libOpenVG.dll
	env['LIBPREFIX'] = 'lib'
	env['SHLIBPREFIX'] = 'lib'

	openvg = env.SharedLibrary(
		target = 'OpenVG',
		source = vgapi_objects,
	)

	env.InstallSharedLibrary(openvg, version=(1, 0, 0))

	if env['platform'] == 'windows':
	    openvg = env.FindIxes(openvg, 'LIBPREFIX', 'LIBSUFFIX')
	else:
	    openvg = env.FindIxes(openvg, 'SHLIBPREFIX', 'SHLIBSUFFIX')

	Export(['openvg'])
@


1.1
log
@Initial revision
@
text
@d47 4
d52 1
a52 1
		target = 'libOpenVG',
d58 4
a61 1
	vgapi = [env.FindIxes(openvg, 'LIBPREFIX', 'LIBSUFFIX')]
d63 1
a63 1
	Export(['vgapi'])
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d8 1
a8 1
env = env.Clone()
d10 1
a10 50
vgapi_header, = env.CodeGenerate(
    target = 'vgapi_tmp.h',
    script = '../mapi_abi.py',
    source = 'vgapi.csv',
    command = python_cmd + ' $SCRIPT --printer vgapi --mode lib $SOURCE > $TARGET'
)

env.Append(CPPDEFINES = [
    'MAPI_ABI_HEADER=\\"vgapi/vgapi_tmp.h\\"',
    'MAPI_DLL_EXPORTS',
    'KHRONOS_DLL_EXPORTS',
])

env.Append(CPPPATH = [
    '#/include',
    '#/src/mapi',
    Dir('..'), # vgapi/vgapi_tmp.h build path
])

mapi_sources = [
    'entry.c',
    'mapi.c',
    'stub.c',
    'table.c',
    'u_current.c',
    'u_execmem.c',
]

vgapi_objects = []
for s in mapi_sources:
    o = env.SharedObject(s[:-2], '../' + s)
    vgapi_objects.append(o)

env.Depends(vgapi_objects, vgapi_header)

# libOpenVG.dll
env['LIBPREFIX'] = 'lib'
env['SHLIBPREFIX'] = 'lib'

openvg = env.SharedLibrary(
    target = 'OpenVG',
    source = vgapi_objects,
)

env.InstallSharedLibrary(openvg, version=(1, 0, 0))

if env['platform'] == 'windows':
    openvg = env.FindIxes(openvg, 'LIBPREFIX', 'LIBSUFFIX')
else:
    openvg = env.FindIxes(openvg, 'SHLIBPREFIX', 'SHLIBSUFFIX')
d12 45
a56 1
Export(['openvg'])
@

