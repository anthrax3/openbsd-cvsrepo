head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.3
	v10_4_3:1.1.1.3
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.23.05.17.22;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2014.07.09.21.08.50;	author jsg;	state Exp;
branches;
next	1.4;
commitid	WPD6rgPryPkvXOr9;

1.4
date	2013.09.05.13.58.30;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.05.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.08.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.33.38;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@#######################################################################
# Common SCons code

import os
import os.path
import re
import subprocess
import sys
import platform as _platform

import SCons.Script.SConscript


#######################################################################
# Defaults

host_platform = _platform.system().lower()
if host_platform.startswith('cygwin'):
    host_platform = 'cygwin'

# Search sys.argv[] for a "platform=foo" argument since we don't have
# an 'env' variable at this point.
if 'platform' in SCons.Script.ARGUMENTS:
    target_platform = SCons.Script.ARGUMENTS['platform']
else:
    target_platform = host_platform

_machine_map = {
	'x86': 'x86',
	'i386': 'x86',
	'i486': 'x86',
	'i586': 'x86',
	'i686': 'x86',
	'BePC': 'x86',
	'Intel': 'x86',
	'ppc' : 'ppc',
	'BeBox': 'ppc',
	'BeMac': 'ppc',
	'AMD64': 'x86_64',
	'x86_64': 'x86_64',
	'sparc': 'sparc',
	'sun4u': 'sparc',
}


# find host_machine value
if 'PROCESSOR_ARCHITECTURE' in os.environ:
	host_machine = os.environ['PROCESSOR_ARCHITECTURE']
else:
	host_machine = _platform.machine()
host_machine = _machine_map.get(host_machine, 'generic')

default_machine = host_machine
default_toolchain = 'default'

if target_platform == 'windows' and host_platform != 'windows':
    default_machine = 'x86'
    default_toolchain = 'crossmingw'


# find default_llvm value
if 'LLVM' in os.environ:
    default_llvm = 'yes'
else:
    default_llvm = 'no'
    try:
        if target_platform != 'windows' and \
           subprocess.call(['llvm-config', '--version'], stdout=subprocess.PIPE) == 0:
            default_llvm = 'yes'
    except:
        pass


#######################################################################
# Common options

def AddOptions(opts):
	try:
		from SCons.Variables.BoolVariable import BoolVariable as BoolOption
	except ImportError:
		from SCons.Options.BoolOption import BoolOption
	try:
		from SCons.Variables.EnumVariable import EnumVariable as EnumOption
	except ImportError:
		from SCons.Options.EnumOption import EnumOption
	opts.Add(EnumOption('build', 'build type', 'debug',
	                  allowed_values=('debug', 'checked', 'profile', 'release')))
	opts.Add(BoolOption('verbose', 'verbose output', 'no'))
	opts.Add(EnumOption('machine', 'use machine-specific assembly code', default_machine,
											 allowed_values=('generic', 'ppc', 'x86', 'x86_64')))
	opts.Add(EnumOption('platform', 'target platform', host_platform,
											 allowed_values=('cygwin', 'darwin', 'freebsd', 'haiku', 'linux', 'sunos', 'windows')))
	opts.Add(BoolOption('embedded', 'embedded build', 'no'))
	opts.Add(BoolOption('analyze', 'enable static code analysis where available', 'no'))
	opts.Add('toolchain', 'compiler toolchain', default_toolchain)
	opts.Add(BoolOption('gles', 'EXPERIMENTAL: enable OpenGL ES support', 'no'))
	opts.Add(BoolOption('llvm', 'use LLVM', default_llvm))
	opts.Add(BoolOption('openmp', 'EXPERIMENTAL: compile with openmp (swrast)', 'no'))
	opts.Add(BoolOption('debug', 'DEPRECATED: debug build', 'yes'))
	opts.Add(BoolOption('profile', 'DEPRECATED: profile build', 'no'))
	opts.Add(BoolOption('quiet', 'DEPRECATED: profile build', 'yes'))
	opts.Add(BoolOption('texture_float', 'enable floating-point textures and renderbuffers', 'no'))
	if host_platform == 'windows':
		opts.Add('MSVC_VERSION', 'Microsoft Visual C/C++ version')
@


1.5
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.4
log
@Merge Mesa 9.2.0
@
text
@d94 1
d104 1
a104 1
		opts.Add(EnumOption('MSVC_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0', '10.0', '11.0')))
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d34 2
d37 2
d41 2
d92 1
a92 1
											 allowed_values=('linux', 'cell', 'windows', 'winddk', 'wince', 'darwin', 'cygwin', 'sunos', 'freebsd8')))
d97 1
d100 2
a101 1
	opts.Add(BoolOption('quiet', 'DEPRECATED: quiet command lines', 'yes'))
d103 1
a103 1
		opts.Add(EnumOption('MSVS_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0')))
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d17 3
a19 7
_platform_map = {
	'linux2': 'linux',
	'win32': 'windows',
}

default_platform = sys.platform
default_platform = _platform_map.get(default_platform, default_platform)
d24 1
a24 1
    selected_platform = SCons.Script.ARGUMENTS['platform']
d26 1
a26 3
    selected_platform = default_platform

cross_compiling = selected_platform != default_platform
d35 1
d40 1
a40 1
# find default_machine value
d42 1
a42 1
	default_machine = os.environ['PROCESSOR_ARCHITECTURE']
d44 4
a47 2
	default_machine = _platform.machine()
default_machine = _machine_map.get(default_machine, 'generic')
d50 1
a50 1
if selected_platform == 'windows' and cross_compiling:
d61 1
a61 1
        if selected_platform != 'windows' and \
d82 1
a82 1
	opts.Add(BoolOption('quiet', 'quiet command lines', 'yes'))
d85 3
a87 2
	opts.Add(EnumOption('platform', 'target platform', default_platform,
											 allowed_values=('linux', 'cell', 'windows', 'winddk', 'wince', 'darwin', 'embedded', 'cygwin', 'sunos5', 'freebsd8')))
d89 1
d93 3
a95 1
	opts.Add(EnumOption('MSVS_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0')))
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d6 2
d11 2
d25 9
d43 3
d51 6
d58 3
a60 4
if default_platform in ('linux', 'freebsd'):
	default_dri = 'yes'
elif default_platform in ('winddk', 'windows', 'wince', 'darwin'):
	default_dri = 'no'
d62 7
a68 1
	default_dri = 'no'
d83 2
a84 2
	opts.Add(BoolOption('debug', 'debug build', 'no'))
	opts.Add(BoolOption('profile', 'profile build', 'no'))
d89 6
a94 5
											 allowed_values=('linux', 'cell', 'windows', 'winddk', 'wince', 'darwin', 'embedded')))
	opts.Add(EnumOption('toolchain', 'compiler toolchain', 'default',
											 allowed_values=('default', 'crossmingw', 'winsdk', 'winddk')))
	opts.Add(BoolOption('llvm', 'use LLVM', 'no'))
	opts.Add(BoolOption('dri', 'build DRI drivers', default_dri))
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@a5 2
import re
import subprocess
a8 2
import SCons.Script.SConscript

a20 9
# Search sys.argv[] for a "platform=foo" argument since we don't have
# an 'env' variable at this point.
if 'platform' in SCons.Script.ARGUMENTS:
    selected_platform = SCons.Script.ARGUMENTS['platform']
else:
    selected_platform = default_platform

cross_compiling = selected_platform != default_platform

a29 3


# find default_machine value
a34 6
default_toolchain = 'default'

if selected_platform == 'windows' and cross_compiling:
    default_machine = 'x86'
    default_toolchain = 'crossmingw'

d36 4
a39 3
# find default_llvm value
if 'LLVM' in os.environ:
    default_llvm = 'yes'
d41 1
a41 7
    default_llvm = 'no'
    try:
        if selected_platform != 'windows' and \
           subprocess.call(['llvm-config', '--version'], stdout=subprocess.PIPE) == 0:
            default_llvm = 'yes'
    except:
        pass
d56 2
a57 2
	opts.Add(EnumOption('build', 'build type', 'debug',
	                  allowed_values=('debug', 'checked', 'profile', 'release')))
d62 5
a66 6
											 allowed_values=('linux', 'cell', 'windows', 'winddk', 'wince', 'darwin', 'embedded', 'cygwin', 'sunos5', 'freebsd8')))
	opts.Add('toolchain', 'compiler toolchain', default_toolchain)
	opts.Add(BoolOption('llvm', 'use LLVM', default_llvm))
	opts.Add(BoolOption('debug', 'DEPRECATED: debug build', 'yes'))
	opts.Add(BoolOption('profile', 'DEPRECATED: profile build', 'no'))
	opts.Add(EnumOption('MSVS_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0')))
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d17 7
a23 3
host_platform = _platform.system().lower()
if host_platform.startswith('cygwin'):
    host_platform = 'cygwin'
d28 1
a28 1
    target_platform = SCons.Script.ARGUMENTS['platform']
d30 3
a32 1
    target_platform = host_platform
a39 2
	'BePC': 'x86',
	'Intel': 'x86',
a40 3
	'BeBox': 'ppc',
	'BeMac': 'ppc',
	'AMD64': 'x86_64',
a41 2
	'sparc': 'sparc',
	'sun4u': 'sparc',
d45 1
a45 1
# find host_machine value
d47 1
a47 1
	host_machine = os.environ['PROCESSOR_ARCHITECTURE']
d49 2
a50 4
	host_machine = _platform.machine()
host_machine = _machine_map.get(host_machine, 'generic')

default_machine = host_machine
d53 1
a53 1
if target_platform == 'windows' and host_platform != 'windows':
d64 1
a64 1
        if target_platform != 'windows' and \
d85 1
a85 1
	opts.Add(BoolOption('verbose', 'verbose output', 'no'))
d88 2
a89 3
	opts.Add(EnumOption('platform', 'target platform', host_platform,
											 allowed_values=('cygwin', 'darwin', 'freebsd', 'haiku', 'linux', 'sunos', 'windows')))
	opts.Add(BoolOption('embedded', 'embedded build', 'no'))
a90 1
	opts.Add(BoolOption('gles', 'EXPERIMENTAL: enable OpenGL ES support', 'no'))
a91 1
	opts.Add(BoolOption('openmp', 'EXPERIMENTAL: compile with openmp (swrast)', 'no'))
d94 1
a94 4
	opts.Add(BoolOption('quiet', 'DEPRECATED: profile build', 'yes'))
	opts.Add(BoolOption('texture_float', 'enable floating-point textures and renderbuffers', 'no'))
	if host_platform == 'windows':
		opts.Add(EnumOption('MSVC_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0', '10.0', '11.0')))
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@a93 1
	opts.Add(BoolOption('analyze', 'enable static code analysis where available', 'no'))
d103 1
a103 1
		opts.Add('MSVC_VERSION', 'Microsoft Visual C/C++ version')
@


