head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	v10_2_9:1.1.1.7
	v10_4_3:1.1.1.7
	v10_2_7:1.1.1.7
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.7
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.6
	v9_2_3:1.1.1.5
	v9_2_2:1.1.1.4
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2015.12.23.05.17.22;	author jsg;	state dead;
branches;
next	1.9;
commitid	TnlogFl9nOv2eaRf;

1.9
date	2014.07.09.21.08.50;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2014.01.19.03.13.15;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.24.06.19.52;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.09.02.46.54;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.05.09.53.49;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.05.13.58.30;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.23.13.37.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.22.20.05.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.08.55;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.10.05.09.19.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.11.09.02.25.51;	author jsg;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.11.24.05.52.36;	author jsg;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.01.19.03.03.22;	author jsg;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.07.09.20.33.38;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.10
log
@remove the now unused Mesa 10.2.9 code
@
text
@#######################################################################
# Top-level SConstruct
#
# For example, invoke scons as 
#
#   scons build=debug llvm=yes machine=x86
#
# to set configuration variables. Or you can write those options to a file
# named config.py:
#
#   # config.py
#   build='debug'
#   llvm=True
#   machine='x86'
# 
# Invoke
#
#   scons -h
#
# to get the full list of options. See scons manpage for more info.
#  

import os
import os.path
import sys
import SCons.Util

import common

#######################################################################
# Configuration options

opts = Variables('config.py')
common.AddOptions(opts)

env = Environment(
	options = opts,
	tools = ['gallium'],
	toolpath = ['#scons'],	
	ENV = os.environ,
)

# XXX: This creates a many problems as it saves...
#opts.Save('config.py', env)

# Backwards compatability with old target configuration variable
try:
    targets = ARGUMENTS['targets']
except KeyError:
    pass
else:
    targets = targets.split(',')
    print 'scons: warning: targets option is deprecated; pass the targets on their own such as'
    print
    print '  scons %s' % ' '.join(targets)
    print 
    COMMAND_LINE_TARGETS.append(targets)


Help(opts.GenerateHelpText(env))

#######################################################################
# Environment setup

with open("VERSION") as f:
  mesa_version = f.read().strip()
env.Append(CPPDEFINES = [
    ('PACKAGE_VERSION', '\\"%s\\"' % mesa_version),
    ('PACKAGE_BUGREPORT', '\\"https://bugs.freedesktop.org/enter_bug.cgi?product=Mesa\\"'),
])

# Includes
env.Prepend(CPPPATH = [
	'#/include',
])
env.Append(CPPPATH = [
	'#/src/gallium/include',
	'#/src/gallium/auxiliary',
	'#/src/gallium/drivers',
	'#/src/gallium/winsys',
])

# for debugging
#print env.Dump()


#######################################################################
# Invoke host SConscripts 
# 
# For things that are meant to be run on the native host build machine, instead
# of the target machine.
#

# Create host environent
if env['crosscompile'] and not env['embedded']:
    host_env = Environment(
        options = opts,
        # no tool used
        tools = [],
        toolpath = ['#scons'],
        ENV = os.environ,
    )

    # Override options
    host_env['platform'] = common.host_platform
    host_env['machine'] = common.host_machine
    host_env['toolchain'] = 'default'
    host_env['llvm'] = False

    host_env.Tool('gallium')

    host_env['hostonly'] = True
    assert host_env['crosscompile'] == False

    target_env = env
    env = host_env
    Export('env')

    SConscript(
        'src/SConscript',
        variant_dir = host_env['build_dir'],
        duplicate = 0, # http://www.scons.org/doc/0.97/HTML/scons-user/x2261.html
    )

    env = target_env

Export('env')

#######################################################################
# Invoke SConscripts

# TODO: Build several variants at the same time?
# http://www.scons.org/wiki/SimultaneousVariantBuilds

SConscript(
	'src/SConscript',
	variant_dir = env['build_dir'],
	duplicate = 0 # http://www.scons.org/doc/0.97/HTML/scons-user/x2261.html
)


########################################################################
# List all aliases

try:
    from SCons.Node.Alias import default_ans
except ImportError:
    pass
else:
    aliases = default_ans.keys()
    aliases.sort()
    env.Help('\n')
    env.Help('Recognized targets:\n')
    for alias in aliases:
        env.Help('    %s\n' % alias)
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.8
log
@Merge Mesa 9.2.5
@
text
@a61 7
# fail early for a common error on windows
if env['gles']:
    try:
        import libxml2
    except ImportError:
        raise SCons.Errors.UserError, "GLES requires libxml2-python to build"

d65 2
d68 1
a68 1
    ('PACKAGE_VERSION', '\\"9.2.5\\"'),
a82 3
if env['msvc']:
    env.Append(CPPPATH = ['#include/c99'])

a113 3

    if host_env['msvc']:
        host_env.Append(CPPPATH = ['#include/c99'])
@


1.7
log
@Merge Mesa 9.2.3
ok mpi@@ kettenis@@
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.3\\"'),
@


1.6
log
@Merge Mesa 9.2.2
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.2\\"'),
@


1.5
log
@Merge Mesa 9.2.1
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.1\\"'),
@


1.4
log
@Merge Mesa 9.2.0
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.0\\"'),
@


1.3
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d43 2
a44 1
opts.Save('config.py', env)
d71 5
@


1.2
log
@Merge Mesa 7.10.3
@
text
@d43 2
d61 6
a84 38
# Embedded
if env['platform'] == 'embedded':
	env.Append(CPPDEFINES = [
		'_POSIX_SOURCE',
		('_POSIX_C_SOURCE', '199309L'), 
		'_SVID_SOURCE',
		'_BSD_SOURCE', 
		'_GNU_SOURCE',
		
		'PTHREADS',
	])
	env.Append(LIBS = [
		'm',
		'pthread',
		'dl',
	])

# Posix
if env['platform'] in ('posix', 'linux', 'freebsd', 'darwin'):
	env.Append(CPPDEFINES = [
		'_POSIX_SOURCE',
		('_POSIX_C_SOURCE', '199309L'), 
		'_SVID_SOURCE',
		'_BSD_SOURCE', 
		'_GNU_SOURCE',
		'PTHREADS',
		'HAVE_POSIX_MEMALIGN',
	])
	if env['gcc']:
		env.Append(CFLAGS = ['-fvisibility=hidden'])
	if env['platform'] == 'darwin':
		env.Append(CPPDEFINES = ['_DARWIN_C_SOURCE'])
	env.Append(LIBS = [
		'm',
		'pthread',
		'dl',
	])

d88 44
a133 1

d146 15
@


1.1
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d6 1
a6 1
#   scons debug=1 dri=0 machine=x86
d12 2
a13 2
#   debug=1
#   dri=0
a32 15
default_statetrackers = 'mesa'

if common.default_platform in ('linux', 'freebsd', 'darwin'):
	default_drivers = 'softpipe,failover,svga,i915,i965,trace,identity,llvmpipe'
	default_winsys = 'xlib'
elif common.default_platform in ('winddk',):
	default_drivers = 'softpipe,svga,i915,i965,trace,identity'
	default_winsys = 'all'
elif common.default_platform in ('embedded',):
	default_drivers = 'softpipe,llvmpipe'
	default_winsys = 'xlib'
else:
	default_drivers = 'all'
	default_winsys = 'all'

a34 8
opts.Add(ListVariable('statetrackers', 'state trackers to build', default_statetrackers,
                     ['mesa', 'python', 'xorg']))
opts.Add(ListVariable('drivers', 'pipe drivers to build', default_drivers,
                     ['softpipe', 'failover', 'svga', 'i915', 'i965', 'trace', 'r300', 'identity', 'llvmpipe']))
opts.Add(ListVariable('winsys', 'winsys drivers to build', default_winsys,
                     ['xlib', 'vmware', 'intel', 'i965', 'gdi', 'radeon']))

opts.Add(EnumVariable('MSVS_VERSION', 'MS Visual C++ version', None, allowed_values=('7.1', '8.0', '9.0')))
d43 13
a55 10
if os.environ.has_key('CC'):
	env['CC'] = os.environ['CC']
if os.environ.has_key('CFLAGS'):
	env['CCFLAGS'] += SCons.Util.CLVar(os.environ['CFLAGS'])
if os.environ.has_key('CXX'):
	env['CXX'] = os.environ['CXX']
if os.environ.has_key('CXXFLAGS'):
	env['CXXFLAGS'] += SCons.Util.CLVar(os.environ['CXXFLAGS'])
if os.environ.has_key('LDFLAGS'):
	env['LINKFLAGS'] += SCons.Util.CLVar(os.environ['LDFLAGS'])
a58 30
# replicate options values in local variables
debug = env['debug']
dri = env['dri']
machine = env['machine']
platform = env['platform']
drawllvm = 'llvmpipe' in env['drivers']

# LLVM support in the Draw module
if drawllvm:
        env.Tool('llvm')
        if not env.has_key('LLVM_VERSION'):
           drawllvm = False

# derived options
x86 = machine == 'x86'
ppc = machine == 'ppc'
gcc = platform in ('linux', 'freebsd', 'darwin', 'embedded')
msvc = platform in ('windows', 'winddk')

Export([
	'debug', 
	'x86', 
	'ppc', 
	'dri', 
	'drawllvm',
	'platform',
	'gcc',
	'msvc',
])

a62 4
# Always build trace driver
if 'trace' not in env['drivers']:
    env['drivers'].append('trace')

d64 3
a67 1
	'#/include',
d71 1
d78 1
a78 1
if platform == 'embedded':
d95 1
a95 1
if platform in ('posix', 'linux', 'freebsd', 'darwin'):
a101 1
		
d105 3
a107 1
	if platform == 'darwin':
a108 2
	env.Append(CPPPATH = ['/usr/X11R6/include'])
	env.Append(LIBPATH = ['/usr/X11R6/lib'])
a111 1
		'expat',
a114 24
# DRI
if dri:
	env.ParseConfig('pkg-config --cflags --libs libdrm')
	env.Append(CPPDEFINES = [
		('USE_EXTERNAL_DXTN_LIB', '1'), 
		'IN_DRI_DRIVER',
		'GLX_DIRECT_RENDERING',
		'GLX_INDIRECT_RENDERING',
	])

# LLVM support in the Draw module
if drawllvm:
    env.Append(CPPDEFINES = ['DRAW_LLVM'])

# libGL
if platform in ('linux', 'freebsd', 'darwin'):
	env.Append(LIBS = [
		'X11',
		'Xext',
		'Xxf86vm',
		'Xdamage',
		'Xfixes',
	])

a126 22
if env['platform'] != common.default_platform:
    # GLSL code has to be built twice -- one for the host OS, another for the target OS...

    host_env = Environment(
        # options are ignored
        # default tool is used
        tools = ['default', 'custom'],
        toolpath = ['#scons'],	
        ENV = os.environ,
    )

    host_env['platform'] = common.default_platform
    host_env['machine'] = common.default_machine
    host_env['debug'] = env['debug']

    SConscript(
        'src/glsl/SConscript',
        variant_dir = os.path.join(env['build'], 'host'),
        duplicate = 0, # http://www.scons.org/doc/0.97/HTML/scons-user/x2261.html
        exports={'env':host_env},
    )

d129 1
a129 1
	variant_dir = env['build'],
a132 7
env.Default('src')

SConscript(
    'progs/SConscript',
    variant_dir = os.path.join('progs', env['build']),
    duplicate = 0 # http://www.scons.org/doc/0.97/HTML/scons-user/x2261.html
)
@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@d6 1
a6 1
#   scons build=debug llvm=yes machine=x86
d12 2
a13 2
#   build='debug'
#   llvm=True
d33 15
d50 8
d66 10
a75 12
# Backwards compatability with old target configuration variable
try:
    targets = ARGUMENTS['targets']
except KeyError:
    pass
else:
    targets = targets.split(',')
    print 'scons: warning: targets option is deprecated; pass the targets on their own such as'
    print
    print '  scons %s' % ' '.join(targets)
    print 
    COMMAND_LINE_TARGETS.append(targets)
d77 1
d79 29
a107 1
Help(opts.GenerateHelpText(env))
d113 4
d118 1
a118 1
env.Prepend(CPPPATH = [
a119 2
])
env.Append(CPPPATH = [
a122 1
	'#/src/gallium/winsys',
d129 1
a129 1
if env['platform'] == 'embedded':
d146 1
a146 1
if env['platform'] in ('posix', 'linux', 'freebsd', 'darwin'):
d153 1
d157 1
a157 3
	if env['gcc']:
		env.Append(CFLAGS = ['-fvisibility=hidden'])
	if env['platform'] == 'darwin':
d159 2
d164 1
d168 24
d204 22
d228 1
a228 1
	variant_dir = env['build_dir'],
d232 7
@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@a42 3
# XXX: This creates a many problems as it saves...
#opts.Save('config.py', env)

a58 6
# fail early for a common error on windows
if env['gles']:
    try:
        import libxml2
    except ImportError:
        raise SCons.Errors.UserError, "GLES requires libxml2-python to build"
a62 5
env.Append(CPPDEFINES = [
    ('PACKAGE_VERSION', '\\"9.2.0\\"'),
    ('PACKAGE_BUGREPORT', '\\"https://bugs.freedesktop.org/enter_bug.cgi?product=Mesa\\"'),
])

d77 38
d118 1
a119 44
#######################################################################
# Invoke host SConscripts 
# 
# For things that are meant to be run on the native host build machine, instead
# of the target machine.
#

# Create host environent
if env['crosscompile'] and not env['embedded']:
    host_env = Environment(
        options = opts,
        # no tool used
        tools = [],
        toolpath = ['#scons'],
        ENV = os.environ,
    )

    # Override options
    host_env['platform'] = common.host_platform
    host_env['machine'] = common.host_machine
    host_env['toolchain'] = 'default'
    host_env['llvm'] = False

    host_env.Tool('gallium')

    host_env['hostonly'] = True
    assert host_env['crosscompile'] == False

    if host_env['msvc']:
        host_env.Append(CPPPATH = ['#include/c99'])

    target_env = env
    env = host_env
    Export('env')

    SConscript(
        'src/SConscript',
        variant_dir = host_env['build_dir'],
        duplicate = 0, # http://www.scons.org/doc/0.97/HTML/scons-user/x2261.html
    )

    env = target_env

Export('env')
a132 15

########################################################################
# List all aliases

try:
    from SCons.Node.Alias import default_ans
except ImportError:
    pass
else:
    aliases = default_ans.keys()
    aliases.sort()
    env.Help('\n')
    env.Help('Recognized targets:\n')
    for alias in aliases:
        env.Help('    %s\n' % alias)
@


1.1.1.3
log
@Import Mesa 9.2.1
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.1\\"'),
@


1.1.1.4
log
@Import Mesa 9.2.2
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.2\\"'),
@


1.1.1.5
log
@Import Mesa 9.2.3
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.3\\"'),
@


1.1.1.6
log
@Import Mesa 9.2.5
@
text
@d73 1
a73 1
    ('PACKAGE_VERSION', '\\"9.2.5\\"'),
@


1.1.1.7
log
@Import Mesa 10.2.3
@
text
@d62 7
a71 2
with open("VERSION") as f:
  mesa_version = f.read().strip()
d73 1
a73 1
    ('PACKAGE_VERSION', '\\"%s\\"' % mesa_version),
d88 3
d122 3
@


