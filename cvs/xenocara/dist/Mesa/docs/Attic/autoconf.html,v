head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	v10_2_9:1.1.1.5
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	v10_2_3:1.1.1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	v9_2_5:1.1.1.2
	v9_2_3:1.1.1.2
	v9_2_2:1.1.1.2
	v9_2_1:1.1.1.2
	v9_2_0:1.1.1.2
	OPENBSD_5_4:1.1.0.20
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	v7_10_3:1.1.1.1
	mesa:1.1.1
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.23.05.17.22;	author jsg;	state dead;
branches;
next	1.5;
commitid	TnlogFl9nOv2eaRf;

1.5
date	2015.02.20.23.09.50;	author jsg;	state Exp;
branches;
next	1.4;
commitid	4ry2gvZGMXkCUD2n;

1.4
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.3;
commitid	mcxB0JvoI9gTDYXU;

1.3
date	2014.07.09.21.08.50;	author jsg;	state Exp;
branches;
next	1.2;
commitid	WPD6rgPryPkvXOr9;

1.2
date	2013.09.05.13.58.58;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.14.58.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.23.13.29.22;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.09.05.13.17.49;	author jsg;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.07.09.20.35.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.4
date	2015.01.25.14.13.49;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.5
date	2015.02.20.22.50.49;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.6
log
@remove the now unused Mesa 10.2.9 code
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Compilation and Installation using Autoconf</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>

<iframe src="contents.html"></iframe>
<div class="content">

<h1>Compilation and Installation using Autoconf</h1>

<ol>
<li><p><a href="#basic">Basic Usage</a></li>
<li><p><a href="#driver">Driver Options</a>
  <ul>
  <li><a href="#xlib">Xlib Driver Options</a></li>
  <li><a href="#dri">DRI Driver Options</a></li>
  <li><a href="#osmesa">OSMesa Driver Options</a></li>
  </ul>
</ol>


<h2 id="basic">1. Basic Usage</h2>

<p>
The autoconf generated configure script can be used to guess your
platform and change various options for building Mesa. To use the
configure script, type:
</p>

<pre>
    ./configure
</pre>

<p>
To see a short description of all the options, type <code>./configure
--help</code>. If you are using a development snapshot and the configure
script does not exist, type <code>./autogen.sh</code> to generate it
first. If you know the options you want to pass to
<code>configure</code>, you can pass them to <code>autogen.sh</code>. It
will run <code>configure</code> with these options after it is
generated. Once you have run <code>configure</code> and set the options
to your preference, type:
</p>

<pre>
    make
</pre>

<p>
This will produce libGL.so and several other libraries depending on the
options you have chosen. Later, if you want to rebuild for a different
configuration run <code>make realclean</code> before rebuilding.
</p>

<p>
Some of the generic autoconf options are used with Mesa:
</p>
<dl>
<dt><code>--prefix=PREFIX</code></dt>
<dd><p>This is the root directory where
files will be installed by <code>make install</code>. The default is
<code>/usr/local</code>.</p>
</dd>

<dt><code>--exec-prefix=EPREFIX</code></dt>
<dd><p>This is the root directory
where architecture-dependent files will be installed. In Mesa, this is
only used to derive the directory for the libraries. The default is
<code>${prefix}</code>.</p>
</dd>

<dt><code>--libdir=LIBDIR</code></dt>
<dd><p>This option specifies the directory
where the GL libraries will be installed. The default is
<code>${exec_prefix}/lib</code>. It also serves as the name of the
library staging area in the source tree. For instance, if the option
<code>--libdir=/usr/local/lib64</code> is used, the libraries will be
created in a <code>lib64</code> directory at the top of the Mesa source
tree.</p>
</dd>

<dt><code>--enable-static, --disable-shared</code></dt>
<dd><p>By default, Mesa
will build shared libraries. Either of these options will force static
libraries to be built. It is not currently possible to build static and
shared libraries in a single pass.</p>
</dd>

<dt><code>CC, CFLAGS, CXX, CXXFLAGS</code></dt>
<dd><p>These environment variables
control the C and C++ compilers used during the build. By default,
<code>gcc</code> and <code>g++</code> are used with the options
<code>"-g -O2"</code>.</p>
</dd>

<dt><code>LDFLAGS</code></dt>
<dd><p>An environment variable specifying flags to
pass when linking programs. These are normally empty, but can be used
to direct the linker to use libraries in nonstandard directories. For
example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
</dd>

<dt><code>PKG_CONFIG_PATH</code></dt>
<dd><p>When available, the
<code>pkg-config</code> utility is used to search for external libraries
on the system. This environment variable is used to control the search
path for <code>pkg-config</code>. For instance, setting
<code>PKG_CONFIG_PATH=/usr/X11R6/lib/pkgconfig</code> will search for
package metadata in <code>/usr/X11R6</code> before the standard
directories.</p>
</dd>
</dl>

<p>
There are also a few general options for altering the Mesa build:
</p>
<dl>
<dt><code>--enable-debug</code></dt>
<dd><p>This option will enable compiler
options and macros to aid in debugging the Mesa libraries.</p>
</dd>

<dt><code>--disable-asm</code></dt>
<dd><p>There are assembly routines
available for a few architectures. These will be used by default if
one of these architectures is detected. This option ensures that
assembly will not be used.</p>
</dd>

<dt><code>--enable-32-bit</code></dt>
<dt><code>--enable-64-bit</code></dt>
<dd><p>By default, the build will compile code as directed by the environment
variables
<code>CC</code>, <code>CFLAGS</code>, etc. If the compiler is
<code>gcc</code>, these options offer a helper to add the compiler flags
to force 32- or 64-bit code generation as used on the x86 and x86_64
architectures. Note that these options are mutually exclusive.</p>
</dd>
</dl>


<h2 id="driver">2. Driver Options</h2>

<p>
There are several different driver modes that Mesa can use. These are
described in more detail in the <a href="install.html">basic
installation instructions</a>. The Mesa driver is controlled through the
configure options <code>--enable-xlib-glx</code>, <code>--enable-osmesa</code>,
and <code>--enable-dri</code>.
</p>

<h3 id="xlib">Xlib</h3><p>
It uses Xlib as a software renderer to do all rendering. It corresponds
to the option <code>--enable-xlib-glx</code>. The libX11 and libXext
libraries, as well as the X11 development headers, will be need to
support the Xlib driver.

<h3 id="dri">DRI</h3><p>This mode uses the DRI hardware drivers for
accelerated OpenGL rendering. Enable the DRI drivers with the option
<code>--enable-dri</code>. See the <a href="install.html">basic
installation instructions</a> for details on prerequisites for the DRI
drivers.

<!-- DRI specific options -->
<dl>
<dt><code>--with-dri-driverdir=DIR</code>
<dd><p> This option specifies the
location the DRI drivers will be installed to and the location libGL
will search for DRI drivers. The default is <code>${libdir}/dri</code>.
<dt><code>--with-dri-drivers=DRIVER,DRIVER,...</code>
<dd><p> This option
allows a specific set of DRI drivers to be built. For example,
<code>--with-dri-drivers="swrast,i965,radeon,nouveau"</code>. By
default, the drivers will be chosen depending on the target platform.
See the directory <code>src/mesa/drivers/dri</code> in the source tree
for available drivers. Beware that the swrast DRI driver is used by both
libGL and the X.Org xserver GLX module to do software rendering, so you
may run into problems if it is not available.
<!-- This explanation might be totally bogus. Kristian? -->
<dt><code>--disable-driglx-direct</code>
<dd><p> Disable direct rendering in
GLX. Normally, direct hardware rendering through the DRI drivers and
indirect software rendering are enabled in GLX. This option disables
direct rendering entirely. It can be useful on architectures where
kernel DRM modules are not available.
<dt><code>--enable-glx-tls</code> <dd><p>
Enable Thread Local Storage (TLS) in
GLX.
<dt><code>--with-expat=DIR</code> <dd> The DRI-enabled libGL uses expat to
parse the DRI configuration files in <code>/etc/drirc</code> and
<code>~/.drirc</code>. This option allows a specific expat installation
to be used. For example, <code>--with-expat=/usr/local</code> will
search for expat headers and libraries in <code>/usr/local/include</code>
and <code>/usr/local/lib</code>, respectively.
</dl>

<h3 id="osmesa">OSMesa </h3><p> No libGL is built in this
mode. Instead, the driver code is built into the Off-Screen Mesa
(OSMesa) library. See the <a href="osmesa.html">Off-Screen Rendering</a>
page for more details.  It corresponds to the option
<code>--enable-osmesa</code>.

<!-- OSMesa specific options -->
<dl>
<dt><code>--with-osmesa-bits=BITS</code>
<dd><p> This option allows the size
of the color channel in bits to be specified. By default, an 8-bit
channel will be used, and the driver will be named libOSMesa. Other
options are 16- and 32-bit color channels, which will add the bit size
to the library name. For example, <code>--with-osmesa-bits=16</code>
will create the libOSMesa16 library with a 16-bit color channel.
</dl>


<h2 id="library">3. Library Options</h2>

<p>
The configure script provides more fine grained control over the GL
libraries that will be built. More details on the specific GL libraries
can be found in the <a href="install.html">basic installation
instructions</a>.

</div>
</body>
</html>
@


1.5
log
@Merge Mesa 10.2.9
@
text
@@


1.4
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@d100 2
a101 2
<code>gcc</code> and <code>g++</code> are used and the debug/optimisation
level is left unchanged.</p>
d106 3
a108 4
pass when linking programs. These should be empty and
<code>PKG_CONFIG_PATH</code> is recommended to be used instead. If needed
it can be used to direct the linker to use libraries in nonstandard
directories. For example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
d112 2
a113 3
<dd><p>The
<code>pkg-config</code> utility is a hard requirement for cofiguring and
building mesa. It is used to search for external libraries
d138 8
a145 26
<dt><code>--build=</code></dt>
<dt><code>--host=</code></dt>
<dd><p>By default, the build will compile code for the architecture that
it's running on. In order to build cross-compile Mesa on a x86-64 machine
that is to run on a i686, one would need to set the options to:</p>

<p><code>--build=x86_64-pc-linux-gnu --host=i686-pc-linux-gnu</code></p>

Note that these can vary from distribution to distribution. For more
information check with the
<a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Specifying-Target-Triplets.html">
autoconf manual</a>.
Note that you will need to correctly set <code>PKG_CONFIG_PATH</code> as well.


<p>In some cases a single compiler is capable of handling both architectures
(multilib) in that case one would need to set the <code>CC,CXX</code> variables
appending the correct machine options. Seek your compiler documentation for
further information -
<a href="https://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html"> gcc
machine dependent options</a></p>

<p>In addition to specifying correct <code>PKG_CONFIG_PATH</code> for the target
architecture, the following should be sufficient to configure multilib Mesa</p>

<code>./configure CC="gcc -m32" CXX="g++ -m32" --build=x86_64-pc-linux-gnu --host=i686-pc-linux-gnu ...</code>
d197 1
a197 3
<dt><code>--with-expat=DIR</code>
<dd><p><strong>DEPRECATED</strong>, use <code>PKG_CONFIG_PATH</code> instead.</p>
<p>The DRI-enabled libGL uses expat to
@


1.3
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d100 2
a101 2
<code>gcc</code> and <code>g++</code> are used with the options
<code>"-g -O2"</code>.</p>
d106 4
a109 3
pass when linking programs. These are normally empty, but can be used
to direct the linker to use libraries in nonstandard directories. For
example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
d113 3
a115 2
<dd><p>When available, the
<code>pkg-config</code> utility is used to search for external libraries
d140 26
a165 8
<dt><code>--enable-32-bit</code></dt>
<dt><code>--enable-64-bit</code></dt>
<dd><p>By default, the build will compile code as directed by the environment
variables
<code>CC</code>, <code>CFLAGS</code>, etc. If the compiler is
<code>gcc</code>, these options offer a helper to add the compiler flags
to force 32- or 64-bit code generation as used on the x86 and x86_64
architectures. Note that these options are mutually exclusive.</p>
d217 3
a219 1
<dt><code>--with-expat=DIR</code> <dd> The DRI-enabled libGL uses expat to
@


1.2
log
@Merge Mesa 9.2.0
@
text
@a125 18
<dt><code>--with-x</code></dt>
<dd><p>When the X11 development libraries are
needed, the <code>pkg-config</code> utility <a href="#pkg-config">will
be used</a> for locating them. If they cannot be found through
<code>pkg-config</code> a fallback routing using <code>imake</code> will
be used. In this case, the <code>--with-x</code>,
<code>--x-includes</code> and <code>--x-libraries</code> options can
control the use of X for Mesa.</p>
</dd>

<dt><code>--enable-gl-osmesa</code></dt>
<dd><p>The <a href="osmesa.html">OSMesa
library</a> can be built on top of libGL for drivers that provide it.
This option controls whether to build libOSMesa. By default, this is
enabled for the Xlib driver and disabled otherwise. Note that this
option is different than using OSMesa as the driver.</p>
</dd>

d140 2
a141 2
<dd><p>By default, the
build will compile code as directed by the environment variables
d145 1
a145 1
architectures.</p>
d156 2
a157 2
configure option --with-driver. There are currently three supported
options in the configure script.
d160 1
a160 1
<h3 id="xlib">Xlib</h3><p>This is the default mode for building Mesa.
d162 1
a162 1
to the option <code>--with-driver=xlib</code>. The libX11 and libXext
d168 1
a168 1
<code>--with-driver=dri</code>. See the <a href="install.html">basic
d208 2
a209 1
page for more details.
@


1.1
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d1 8
a8 3
<html>

<title>Compilation and Installation using Autoconf</title>
d10 3
a12 3
<link rel="stylesheet" type="text/css" href="mesa.css"></head>

<body>
d14 2
d20 2
a21 2
<li><a href="#basic">Basic Usage</a></li>
<li><a href="#driver">Driver Options</a></li>
a26 7
<li><a href="#library">Library Options</a></li>
  <ul>
  <li><a href="#glu">GLU</a></li>
  <li><a href="#glw">GLw</a></li>
  <li><a href="#glut">GLUT</a></li>
  </ul>
<li><a href="#demos">Demo Program Options</a></li>
d30 1
a30 2
<a name="basic">
<h2>1. Basic Usage</h2>
d65 7
d73 2
a74 6
<ul>
<li><code>--prefix=PREFIX</code> - This is the root directory where
files will be installed by <code>make install</code>. The default is
<code>/usr/local</code>.
</li>
<li><code>--exec-prefix=EPREFIX</code> - This is the root directory
d77 5
a81 3
<code>${prefix}</code>.
</li>
<li><code>--libdir=LIBDIR</code> - This option specifies the directory
d87 5
a91 3
tree.
</li>
<li><code>--enable-static, --disable-shared</code> - By default, Mesa
d94 5
a98 3
shared libraries in a single pass.
</li>
<li><code>CC, CFLAGS, CXX, CXXFLAGS</code> - These environment variables
d101 5
a105 3
<code>"-g -O2"</code>.
</li>
<li><code>LDFLAGS</code> - An environment variable specifying flags to
d108 5
a112 3
example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.
</li>
<li><code>PKG_CONFIG_PATH</code> - When available, the
d118 3
a120 4
directories.
</li>
</ul>
</p>
d124 4
a127 2
<ul>
<li><code>--with-x</code> - When the X11 development libraries are
d133 5
a137 3
control the use of X for Mesa.
</li>
<li><code>--enable-gl-osmesa</code> - The <a href="osmesa.html">OSMesa
d141 10
a150 6
option is different than using OSMesa as the driver.
</li>
<li><code>--enable-debug</code> - This option will enable compiler
options and macros to aid in debugging the Mesa libraries.
</li>
<li><code>--disable-asm</code> - There are assembly routines
d153 6
a158 3
assembly will not be used.
</li>
<li><code>--enable-32-bit, --enable-64-bit</code> - By default, the
d163 3
a165 4
architectures.
</li>
</ul>
</p>
d168 1
a168 2
<a name="driver">
<h2>2. Driver Options</h2>
d178 1
a178 4
<ul>

<a name="xlib">
<li><b><em>Xlib</em></b> - This is the default mode for building Mesa.
a182 1
</li>
d184 1
a184 2
<a name="dri">
<li><b><em>DRI</em></b> - This mode uses the DRI hardware drivers for
a188 1
</li>
d191 3
a193 3
<p>
<ul>
<li><code>--with-dri-driverdir=DIR</code> - This option specifies the
d196 2
a197 2
</li>
<li><code>--with-dri-drivers=DRIVER,DRIVER,...</code> - This option
d204 1
a204 1
may run into problems if it is not available.</li>
d206 2
a207 1
<li><code>--disable-driglx-direct</code> - Disable direct rendering in
d212 2
a213 2
</li>
<li><code>--enable-glx-tls</code> - Enable Thread Local Storage (TLS) in
d215 1
a215 2
</li>
<li><code>--with-expat=DIR</code> - The DRI-enabled libGL uses expat to
d221 1
a221 3
</li>
</ul>
</p>
d223 1
a223 2
<a name="osmesa">
<li><b><em>OSMesa</em></b> - No libGL is built in this
a226 1
</li>
d229 3
a231 3
<p>
<ul>
<li><code>--with-osmesa-bits=BITS</code> - This option allows the size
d237 1
a237 3
</li>
</ul>
</p>
a238 1
</ul>
d240 1
a240 3

<a name="library">
<h2>3. Library Options</h2>
d248 1
a248 45
<ul>
<a name="glu">
<li><b><em>GLU</em></b> - The libGLU library will be built by default
on all drivers. This can be disable with the option
<code>--disable-glu</code>.
</li>

<a name="glw">
<li><b><em>GLw</em></b> - The libGLw library will be built by default
if libGLU has been enabled. This can be disable with the option
<code>--disable-glw</code>.
</li>

<a name="glut">
<li><b><em>GLUT</em></b> - The libglut library will be built by default
if libGLU has been enabled and the glut source code from the MesaGLUT
tarball is available. This can be disable with the option
<code>--disable-glut</code>.
</li>
</ul>
</p>


<a name="demos">
<h2>4. Demo Program Options</h2>

<p>
There are many demonstration programs in the MesaDemos tarball. If the
programs are available when <code>./configure</code> is run, a subset of
the programs will be built depending on the driver and library options
chosen. See the directory <code>progs</code> for the full set of demos.

<ul>
<li><code>--with-demos=DEMOS,DEMOS,...</code> - This option allows a
specific set of demo programs to be built. For example,
<code>--with-demos="xdemos,slang"</code>. Beware that if this option is
used, it will not be ensured that the necessary GL libraries will be
available.
</li>
<li><code>--without-demos</code> - This completely disables building the
demo programs. It is equivalent to <code>--with-demos=no</code>.
</li>
</ul>
</p>

@


1.1.1.1
log
@Import Mesa 7.10.3
@
text
@@


1.1.1.2
log
@Import Mesa 9.2.0
@
text
@d1 6
a6 7
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Compilation and Installation using Autoconf</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
a8 6
<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>

<iframe src="contents.html"></iframe>
<div class="content">
d13 2
a14 2
<li><p><a href="#basic">Basic Usage</a></li>
<li><p><a href="#driver">Driver Options</a>
d20 7
d30 2
a31 1
<h2 id="basic">1. Basic Usage</h2>
d66 3
a68 4
</p>
<dl>
<dt><code>--prefix=PREFIX</code></dt>
<dd><p>This is the root directory where
d70 3
a72 5
<code>/usr/local</code>.</p>
</dd>

<dt><code>--exec-prefix=EPREFIX</code></dt>
<dd><p>This is the root directory
d75 3
a77 5
<code>${prefix}</code>.</p>
</dd>

<dt><code>--libdir=LIBDIR</code></dt>
<dd><p>This option specifies the directory
d83 3
a85 5
tree.</p>
</dd>

<dt><code>--enable-static, --disable-shared</code></dt>
<dd><p>By default, Mesa
d88 3
a90 5
shared libraries in a single pass.</p>
</dd>

<dt><code>CC, CFLAGS, CXX, CXXFLAGS</code></dt>
<dd><p>These environment variables
d93 3
a95 5
<code>"-g -O2"</code>.</p>
</dd>

<dt><code>LDFLAGS</code></dt>
<dd><p>An environment variable specifying flags to
d98 3
a100 5
example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
</dd>

<dt><code>PKG_CONFIG_PATH</code></dt>
<dd><p>When available, the
d106 4
a109 3
directories.</p>
</dd>
</dl>
d113 2
a114 4
</p>
<dl>
<dt><code>--with-x</code></dt>
<dd><p>When the X11 development libraries are
d120 3
a122 5
control the use of X for Mesa.</p>
</dd>

<dt><code>--enable-gl-osmesa</code></dt>
<dd><p>The <a href="osmesa.html">OSMesa
d126 6
a131 10
option is different than using OSMesa as the driver.</p>
</dd>

<dt><code>--enable-debug</code></dt>
<dd><p>This option will enable compiler
options and macros to aid in debugging the Mesa libraries.</p>
</dd>

<dt><code>--disable-asm</code></dt>
<dd><p>There are assembly routines
d134 3
a136 6
assembly will not be used.</p>
</dd>

<dt><code>--enable-32-bit</code></dt>
<dt><code>--enable-64-bit</code></dt>
<dd><p>By default, the
d141 4
a144 3
architectures.</p>
</dd>
</dl>
d147 2
a148 1
<h2 id="driver">2. Driver Options</h2>
d158 4
a161 1
<h3 id="xlib">Xlib</h3><p>This is the default mode for building Mesa.
d166 1
d168 2
a169 1
<h3 id="dri">DRI</h3><p>This mode uses the DRI hardware drivers for
d174 1
d177 3
a179 3
<dl>
<dt><code>--with-dri-driverdir=DIR</code>
<dd><p> This option specifies the
d182 2
a183 2
<dt><code>--with-dri-drivers=DRIVER,DRIVER,...</code>
<dd><p> This option
d190 1
a190 1
may run into problems if it is not available.
d192 1
a192 2
<dt><code>--disable-driglx-direct</code>
<dd><p> Disable direct rendering in
d197 2
a198 2
<dt><code>--enable-glx-tls</code> <dd><p>
Enable Thread Local Storage (TLS) in
d200 2
a201 1
<dt><code>--with-expat=DIR</code> <dd> The DRI-enabled libGL uses expat to
d207 3
a209 1
</dl>
d211 2
a212 1
<h3 id="osmesa">OSMesa </h3><p> No libGL is built in this
d216 1
d219 3
a221 3
<dl>
<dt><code>--with-osmesa-bits=BITS</code>
<dd><p> This option allows the size
d227 3
a229 1
</dl>
d231 1
d233 3
a235 1
<h2 id="library">3. Library Options</h2>
d243 45
a287 1
</div>
@


1.1.1.3
log
@Import Mesa 10.2.3
@
text
@d126 18
d158 2
a159 2
<dd><p>By default, the build will compile code as directed by the environment
variables
d163 1
a163 1
architectures. Note that these options are mutually exclusive.</p>
d174 2
a175 2
configure options <code>--enable-xlib-glx</code>, <code>--enable-osmesa</code>,
and <code>--enable-dri</code>.
d178 1
a178 1
<h3 id="xlib">Xlib</h3><p>
d180 1
a180 1
to the option <code>--enable-xlib-glx</code>. The libX11 and libXext
d186 1
a186 1
<code>--enable-dri</code>. See the <a href="install.html">basic
d226 1
a226 2
page for more details.  It corresponds to the option
<code>--enable-osmesa</code>.
@


1.1.1.4
log
@Import Mesa 10.4.3
@
text
@d100 2
a101 2
<code>gcc</code> and <code>g++</code> are used and the debug/optimisation
level is left unchanged.</p>
d106 3
a108 4
pass when linking programs. These should be empty and
<code>PKG_CONFIG_PATH</code> is recommended to be used instead. If needed
it can be used to direct the linker to use libraries in nonstandard
directories. For example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
d112 2
a113 3
<dd><p>The
<code>pkg-config</code> utility is a hard requirement for cofiguring and
building mesa. It is used to search for external libraries
d138 8
a145 26
<dt><code>--build=</code></dt>
<dt><code>--host=</code></dt>
<dd><p>By default, the build will compile code for the architecture that
it's running on. In order to build cross-compile Mesa on a x86-64 machine
that is to run on a i686, one would need to set the options to:</p>

<p><code>--build=x86_64-pc-linux-gnu --host=i686-pc-linux-gnu</code></p>

Note that these can vary from distribution to distribution. For more
information check with the
<a href="https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Specifying-Target-Triplets.html">
autoconf manual</a>.
Note that you will need to correctly set <code>PKG_CONFIG_PATH</code> as well.


<p>In some cases a single compiler is capable of handling both architectures
(multilib) in that case one would need to set the <code>CC,CXX</code> variables
appending the correct machine options. Seek your compiler documentation for
further information -
<a href="https://gcc.gnu.org/onlinedocs/gcc/Submodel-Options.html"> gcc
machine dependent options</a></p>

<p>In addition to specifying correct <code>PKG_CONFIG_PATH</code> for the target
architecture, the following should be sufficient to configure multilib Mesa</p>

<code>./configure CC="gcc -m32" CXX="g++ -m32" --build=x86_64-pc-linux-gnu --host=i686-pc-linux-gnu ...</code>
d197 1
a197 3
<dt><code>--with-expat=DIR</code>
<dd><p><strong>DEPRECATED</strong>, use <code>PKG_CONFIG_PATH</code> instead.</p>
<p>The DRI-enabled libGL uses expat to
@


1.1.1.5
log
@Import Mesa 10.2.9
@
text
@d100 2
a101 2
<code>gcc</code> and <code>g++</code> are used with the options
<code>"-g -O2"</code>.</p>
d106 4
a109 3
pass when linking programs. These are normally empty, but can be used
to direct the linker to use libraries in nonstandard directories. For
example, <code>LDFLAGS="-L/usr/X11R6/lib"</code>.</p>
d113 3
a115 2
<dd><p>When available, the
<code>pkg-config</code> utility is used to search for external libraries
d140 26
a165 8
<dt><code>--enable-32-bit</code></dt>
<dt><code>--enable-64-bit</code></dt>
<dd><p>By default, the build will compile code as directed by the environment
variables
<code>CC</code>, <code>CFLAGS</code>, etc. If the compiler is
<code>gcc</code>, these options offer a helper to add the compiler flags
to force 32- or 64-bit code generation as used on the x86 and x86_64
architectures. Note that these options are mutually exclusive.</p>
d217 3
a219 1
<dt><code>--with-expat=DIR</code> <dd> The DRI-enabled libGL uses expat to
@


