head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	v10_2_9:1.1.1.4
	v10_4_3:1.1.1.4
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v7_0_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2015.12.23.05.17.22;	author jsg;	state dead;
branches;
next	1.8;
commitid	TnlogFl9nOv2eaRf;

1.8
date	2014.07.09.21.08.50;	author jsg;	state Exp;
branches;
next	1.7;
commitid	WPD6rgPryPkvXOr9;

1.7
date	2013.09.05.13.59.10;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.05.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.06;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.31.16.36.47;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.25.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.25.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.22;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.52;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.15;	author jsg;	state Exp;
branches;
next	;
commitid	3JhLfwcuBALP0ZR7;


desc
@@


1.9
log
@remove the now unused Mesa 10.2.9 code
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Shading Language Support</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>

<iframe src="contents.html"></iframe>
<div class="content">

<h1>Shading Language Support</h1>

<p>
This page describes the features and status of Mesa's support for the
<a href="http://opengl.org/documentation/glsl/">
OpenGL Shading Language</a>.
</p>

<p>
Contents
</p>
<ul>
<li><a href="#envvars">Environment variables</a>
<li><a href="#support">GLSL 1.40 support</a>
<li><a href="#unsup">Unsupported Features</a>
<li><a href="#notes">Implementation Notes</a>
<li><a href="#hints">Programming Hints</a>
<li><a href="#standalone">Stand-alone GLSL Compiler</a>
<li><a href="#implementation">Compiler Implementation</a>
<li><a href="#validation">Compiler Validation</a>
</ul>


<h2 id="envvars">Environment Variables</h2>

<p>
The <b>MESA_GLSL</b> environment variable can be set to a comma-separated
list of keywords to control some aspects of the GLSL compiler and shader
execution.  These are generally used for debugging.
</p>
<ul>
<li><b>dump</b> - print GLSL shader code to stdout at link time
<li><b>log</b> - log all GLSL shaders to files.
    The filenames will be "shader_X.vert" or "shader_X.frag" where X
    the shader ID.
<li><b>nopt</b> - disable compiler optimizations
<li><b>opt</b> - force compiler optimizations
<li><b>uniform</b> - print message to stdout when glUniform is called
<li><b>nopvert</b> - force vertex shaders to be a simple shader that just transforms
    the vertex position with ftransform() and passes through the color and
    texcoord[0] attributes.
<li><b>nopfrag</b> - force fragment shader to be a simple shader that passes
    through the color attribute.
<li><b>useprog</b> - log glUseProgram calls to stderr
</ul>
<p>
Example:  export MESA_GLSL=dump,nopt
</p>


<h2 id="support">GLSL Version</h2>

<p>
The GLSL compiler currently supports version 3.30 of the shading language.
</p>

<p>
Several GLSL extensions are also supported:
</p>
<ul>
<li>GL_ARB_draw_buffers
<li>GL_ARB_fragment_coord_conventions
<li>GL_ARB_shader_bit_encoding
</ul>


<h2 id="unsup">Unsupported Features</h2>

<p>XXX update this section</p>

<p>
The following features of the shading language are not yet fully supported
in Mesa:
</p>

<ul>
<li>Linking of multiple shaders does not always work.  Currently, linking
    is implemented through shader concatenation and re-compiling.  This
    doesn't always work because of some #pragma and preprocessor issues.
<li>The gl_Color and gl_SecondaryColor varying vars are interpolated
    without perspective correction
</ul>

<p>
All other major features of the shading language should function.
</p>


<h2 id="notes">Implementation Notes</h2>

<ul>
<li>Shading language programs are compiled into low-level programs
    very similar to those of GL_ARB_vertex/fragment_program.
<li>All vector types (vec2, vec3, vec4, bvec2, etc) currently occupy full
    float[4] registers.
<li>Float constants and variables are packed so that up to four floats
    can occupy one program parameter/register.
<li>All function calls are inlined.
<li>Shaders which use too many registers will not compile.
<li>The quality of generated code is pretty good, register usage is fair.
<li>Shader error detection and reporting of errors (InfoLog) is not
    very good yet.
<li>The ftransform() function doesn't necessarily match the results of
    fixed-function transformation.
</ul>

<p>
These issues will be addressed/resolved in the future.
</p>


<h2 id="hints">Programming Hints</h2>

<ul>
<li>Use the built-in library functions whenever possible.
    For example, instead of writing this:
<pre>
        float x = 1.0 / sqrt(y);
</pre>
    Write this:
<pre>
        float x = inversesqrt(y);
</pre>
</li>
</ul>


<h2 id="standalone">Stand-alone GLSL Compiler</h2>

<p>
The stand-alone GLSL compiler program can be used to compile GLSL shaders
into low-level GPU code.
</p>

<p>
This tool is useful for:
</p>
<ul>
<li>Inspecting GPU code to gain insight into compilation
<li>Generating initial GPU code for subsequent hand-tuning
<li>Debugging the GLSL compiler itself
</ul>

<p>
After building Mesa, the compiler can be found at src/glsl/glsl_compiler
</p>

<p>
Here's an example of using the compiler to compile a vertex shader and
emit GL_ARB_vertex_program-style instructions:
</p>
<pre>
    src/glsl/glsl_compiler --dump-ast myshader.vert
</pre>

Options include
<ul>
<li><b>--dump-ast</b> - dump GPU code
<li><b>--dump-hir</b> - dump high-level IR code
<li><b>--dump-lir</b> - dump low-level IR code
<li><b>--link</b> - ???
</ul>


<h2 id="implementation">Compiler Implementation</h2>

<p>
The source code for Mesa's shading language compiler is in the
<code>src/glsl/</code> directory.
</p>

<p>
XXX provide some info about the compiler....
</p>

<p>
The final vertex and fragment programs may be interpreted in software
(see prog_execute.c) or translated into a specific hardware architecture
(see drivers/dri/i915/i915_fragprog.c for example).
</p>

<h3>Code Generation Options</h3>

<p>
Internally, there are several options that control the compiler's code
generation and instruction selection.
These options are seen in the gl_shader_state struct and may be set
by the device driver to indicate its preferences:

<pre>
struct gl_shader_state
{
   ...
   /** Driver-selectable options: */
   GLboolean EmitHighLevelInstructions;
   GLboolean EmitCondCodes;
   GLboolean EmitComments;
};
</pre>

<dl>
<dt>EmitHighLevelInstructions</dt>
<dd>
This option controls instruction selection for loops and conditionals.
If the option is set high-level IF/ELSE/ENDIF, LOOP/ENDLOOP, CONT/BRK
instructions will be emitted.
Otherwise, those constructs will be implemented with BRA instructions.
</dd>

<dt>EmitCondCodes</dt>
<dd>
If set, condition codes (ala GL_NV_fragment_program) will be used for
branching and looping.
Otherwise, ordinary registers will be used (the IF instruction will
examine the first operand's X component and do the if-part if non-zero).
This option is only relevant if EmitHighLevelInstructions is set.
</dd>

<dt>EmitComments</dt>
<dd>
If set, instructions will be annotated with comments to help with debugging.
Extra NOP instructions will also be inserted.
</dd>
</dl>


<h2 id="validation">Compiler Validation</h2>

<p>
Developers working on the GLSL compiler should test frequently to avoid
regressions.
</p>

<p>
The <a href="http://piglit.freedesktop.org/">Piglit</a> project
has many GLSL tests.
</p>

<p>
The Mesa demos repository also has some good GLSL tests.
</p>

</div>
</body>
</html>
@


1.8
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@@


1.7
log
@Merge Mesa 9.2.0
@
text
@d70 1
a70 1
The GLSL compiler currently supports version 1.40 of the shading language.
d237 1
a237 1
If set, instructions will be annoted with comments to help with debugging.
@


1.6
log
@Merge Mesa 7.10.3
@
text
@d1 12
a12 1
<HTML>
d14 2
a15 1
<TITLE>Shading Language Support</TITLE>
d17 1
a17 5
<link rel="stylesheet" type="text/css" href="mesa.css"></head>

<BODY>

<H1>Shading Language Support</H1>
d21 1
a21 1
<a href="http://opengl.org/documentation/glsl/" target="_parent">
d30 1
a30 1
<li><a href="#120">GLSL 1.20 support</a>
d40 1
a40 3

<a name="envvars">
<h2>Environment Variables</h2>
d67 1
a67 2
<a name="120">
<h2>GLSL Version</h2>
d70 1
a70 1
The GLSL compiler currently supports version 1.20 of the shading language.
a77 1
<li>GL_ARB_texture_rectangle
d79 1
a79 1
<li>GL_EXT_texture_array
d83 1
a83 2
<a name="unsup">
<h2>Unsupported Features</h2>
a95 1
<li>gl_ClipVertex
d105 1
a105 2
<a name="notes">
<h2>Implementation Notes</h2>
d128 1
a128 2
<a name="hints">
<h2>Programming Hints</h2>
d144 1
a144 2
<a name="standalone">
<h2>Stand-alone GLSL Compiler</h2>
d153 1
a153 1
<p>
d181 1
a181 4


<a name="implementation">
<h2>Compiler Implementation</h2>
d217 3
a219 3
<ul>
<li>EmitHighLevelInstructions
<br>
d224 1
a224 1
</li>
d226 2
a227 2
<li>EmitCondCodes
<br>
d233 1
a233 1
</li>
d235 2
a236 2
<li>EmitComments
<br>
d239 2
a240 3
</br>

</ul>
d243 1
a243 2
<a name="validation">
<h2>Compiler Validation</h2>
d251 2
a252 4
The <a href="http://people.freedesktop.org/~nh/piglit/">Piglit</a> project
has many GLSL tests and the
<a href="http://glean.sf.net" target="_parent">Glean</a> glsl1 test 
tests GLSL features.
d259 3
a261 2
</BODY>
</HTML>
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d42 2
a43 2
<li>dump - print GLSL shader code to stdout at link time
<li>log - log all GLSL shaders to files.
d46 4
a49 4
<li>nopt - disable compiler optimizations
<li>opt - force compiler optimizations
<li>uniform - print message to stdout when glUniform is called
<li>nopvert - force vertex shaders to be a simple shader that just transforms
d52 1
a52 1
<li>nopfrag - force fragment shader to be a simple shader that passes
d54 1
a54 1
<li>useprog - log glUseProgram calls to stderr
d62 1
a62 1
<h2>GLSL 1.20 support</h2>
d65 6
a70 2
GLSL version 1.20 is supported in Mesa 7.3 and later.
Among the features/differences of GLSL 1.20 are:
d72 4
a75 11
<li><code>mat2x3, mat2x4</code>, etc. types and functions
<li><code>transpose(), outerProduct(), matrixCompMult()</code> functions
(but untested)
<li>precision qualifiers (lowp, mediump, highp)
<li><code>invariant</code> qualifier
<li><code>array.length()</code> method
<li><code>float[5] a;</code> array syntax
<li><code>centroid</code> qualifier
<li>unsized array constructors
<li>initializers for uniforms
<li>const initializers calling built-in functions
a78 1

d82 2
a130 33
<li>Declare <em>in</em> function parameters as <em>const</em> whenever possible.
    This improves the efficiency of function inlining.
</li>
<br>
<li>To reduce register usage, declare variables within smaller scopes.
    For example, the following code:
<pre>
    void main()
    {
       vec4 a1, a2, b1, b2;
       gl_Position = expression using a1, a2.
       gl_Color = expression using b1, b2;
    }
</pre>
    Can be rewritten as follows to use half as many registers:
<pre>
    void main()
    {
       {
          vec4 a1, a2;
          gl_Position = expression using a1, a2.
       }
       {
          vec4 b1, b2;
          gl_Color = expression using b1, b2;
       }
    }
</pre>
    Alternately, rather than using several float variables, use
    a vec4 instead.  Use swizzling and writemasks to access the
    components of the vec4 as floats.
</li>
<br>
a139 2
<li>
   Use ++i when possible as it's more efficient than i++
d148 2
a149 7
A unique stand-alone GLSL compiler driver has been added to Mesa.
<p>

<p>
The stand-alone compiler (like a conventional command-line compiler)
is a tool that accepts Shading Language programs and emits low-level
GPU programs.
d162 1
a162 1
After building Mesa, the glslcompiler can be built by manually running:
a163 7
<pre>
    make realclean
    make linux
    cd src/mesa/drivers/glslcompiler
    make
</pre>

d170 1
a170 25
    bin/glslcompiler --debug --numbers --fs progs/glsl/CH06-brick.frag.txt
</pre>
<p>
results in:
</p>
<pre>
# Fragment Program/Shader
  0: RCP TEMP[4].x, UNIFORM[2].xxxx;
  1: RCP TEMP[4].y, UNIFORM[2].yyyy;
  2: MUL TEMP[3].xy, VARYING[0], TEMP[4];
  3: MOV TEMP[1], TEMP[3];
  4: MUL TEMP[0].w, TEMP[1].yyyy, CONST[4].xxxx;
  5: FRC TEMP[1].z, TEMP[0].wwww;
  6: SGT.C TEMP[0].w, TEMP[1].zzzz, CONST[4].xxxx;
  7: IF (NE.wwww); # (if false, goto 9);
  8:    ADD TEMP[1].x, TEMP[1].xxxx, CONST[4].xxxx;
  9: ENDIF;
 10: FRC TEMP[1].xy, TEMP[1];
 11: SGT TEMP[2].xy, UNIFORM[3], TEMP[1];
 12: MUL TEMP[1].z, TEMP[2].xxxx, TEMP[2].yyyy;
 13: LRP TEMP[0], TEMP[1].zzzz, UNIFORM[0], UNIFORM[1];
 14: MUL TEMP[0].xyz, TEMP[0], VARYING[1].xxxx;
 15: MOV OUTPUT[0].xyz, TEMP[0];
 16: MOV OUTPUT[0].w, CONST[4].yyyy;
 17: END
d173 8
a180 11
<p>
Note that some shading language constructs (such as uniform and varying
variables) aren't expressible in ARB or NV-style programs.
Therefore, the resulting output is not always legal by definition of
those program languages.
</p>
<p>
Also note that this compiler driver is still under development.
Over time, the correctness of the GPU programs, with respect to the ARB
and NV languagues, should improve.
</p>
d189 1
a189 1
<code>src/mesa/shader/slang/</code> directory.
d193 1
a193 1
The compiler follows a fairly standard design and basically works as follows:
a194 26
<ul>
<li>The input string is tokenized (see grammar.c) and parsed
(see slang_compiler_*.c) to produce an Abstract Syntax Tree (AST).
The nodes in this tree are slang_operation structures
(see slang_compile_operation.h).
The nodes are decorated with symbol table, scoping and datatype information.
<li>The AST is converted into an Intermediate representation (IR) tree
(see the slang_codegen.c file).
The IR nodes represent basic GPU instructions, like add, dot product,
move, etc. 
The IR tree is mostly a binary tree, but a few nodes have three or four
children.
In principle, the IR tree could be executed by doing an in-order traversal.
<li>The IR tree is traversed in-order to emit code (see slang_emit.c).
This is also when registers are allocated to store variables and temps.
<li>In the future, a pattern-matching code generator-generator may be
used for code generation.
Programs such as L-BURG (Bottom-Up Rewrite Generator) and Twig look for
patterns in IR trees, compute weights for subtrees and use the weights
to select the best instructions to represent the sub-tree.
<li>The emitted GPU instructions (see prog_instruction.h) are stored in a
gl_program object (see mtypes.h).
<li>When a fragment shader and vertex shader are linked (see slang_link.c)
the varying vars are matched up, uniforms are merged, and vertex
attributes are resolved (rewriting instructions as needed).
</ul>
d252 2
a253 2
A <a href="http://glean.sf.net" target="_parent">Glean</a> test has
been create to exercise the GLSL compiler.
d255 1
d257 4
a260 4
The <em>glsl1</em> test runs over 170 sub-tests to check that the language
features and built-in functions work properly.
This test should be run frequently while working on the compiler to catch
regressions.
d262 1
d264 1
a264 2
The test coverage is reasonably broad and complete but additional tests
should be added.
a265 1

@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@a17 4
Last updated on 15 December 2008.
</p>

<p>
d21 1
d33 28
d65 1
a65 1
GLSL version 1.20 is supported in Mesa 7.3.
d87 1
a87 1
The following features of the shading language are not yet supported
d92 3
a94 1
<li>Linking of multiple shaders is not supported
d207 2
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d18 1
a18 1
Last updated on 28 March 2007.
d25 1
a31 1
<li><a href="#120">GLSL 1.20 support</a>
d35 23
a66 2
<li>Dereferencing arrays with non-constant indexes
<li>Comparison of user-defined structs
a68 2
<li>The derivative functions such as dFdx() are not implemented
<li>The inverse trig functions asin(), acos(), and atan() are not implemented
a70 1
<li>Floating point literal suffixes 'f' and 'F' aren't allowed.
d325 1
a325 1
A new <a href="http://glean.sf.net" target="_parent">Glean</a> test has
d329 1
a329 1
The <em>glsl1</em> test runs over 150 sub-tests to check that the language
a337 34



<a name="120">
<h2>GLSL 1.20 support</h2>

<p>
Support for GLSL version 1.20 is underway.  Status as follows.
</p>

<h3>Supported</h3>
<ul>
<li><code>mat2x3, mat2x4</code>, etc. types and functions
<li><code>transpose(), outerProduct(), matrixCompMult()</code> functions
(but untested)
<li>precision qualifiers (lowp, mediump, highp)
</ul>

<h3>Partially Complete</h3>
<ul>
<li><code>invariant</code> qualifier
</ul>

<h3>Not Completed</h3>
<ul>
<li><code>array.length()</code> method
<li><code>float[5] a;</code> array syntax
<li><code>centroid</code> qualifier
<li>unsized array constructors
<li>initializers for uniforms
<li>const initializers calling built-in functions
</ul>


@


1.2
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d28 1
a28 1
<li><a href="#standalone">Stand-alone Compiler</a>
d31 1
d137 1
a137 1
<h2>Stand-alone Compiler</h2>
d159 1
a159 1
To build the glslcompiler program (this will be improved someday):
d162 1
a162 3
    cd src/mesa
    make libmesa.a
    cd drivers/glslcompiler
d172 1
a172 1
    glslcompiler --arb --linenumbers --vs vertshader.txt
d175 1
a175 1
The output may look similar to this:
d178 19
a196 8
!!ARBvp1.0
  0: MOV result.texcoord[0], vertex.texcoord[0];
  1: DP4 temp0.x, state.matrix.mvp.row[0], vertex.position;
  2: DP4 temp0.y, state.matrix.mvp.row[1], vertex.position;
  3: DP4 temp0.z, state.matrix.mvp.row[2], vertex.position;
  4: DP4 temp0.w, state.matrix.mvp.row[3], vertex.position;
  5: MOV result.position, temp0;
  6: END
d320 34
@


1.1
log
@Initial revision
@
text
@d51 1
@


1.1.1.1
log
@Mesa 7.0.1
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d18 4
a24 2
<li><a href="#envvars">Environment variables</a>
<li><a href="#120">GLSL 1.20 support</a>
d28 1
a28 1
<li><a href="#standalone">Stand-alone GLSL Compiler</a>
a33 47

<a name="envvars">
<h2>Environment Variables</h2>

<p>
The <b>MESA_GLSL</b> environment variable can be set to a comma-separated
list of keywords to control some aspects of the GLSL compiler and shader
execution.  These are generally used for debugging.
</p>
<ul>
<li><b>dump</b> - print GLSL shader code to stdout at link time
<li><b>log</b> - log all GLSL shaders to files.
    The filenames will be "shader_X.vert" or "shader_X.frag" where X
    the shader ID.
<li><b>nopt</b> - disable compiler optimizations
<li><b>opt</b> - force compiler optimizations
<li><b>uniform</b> - print message to stdout when glUniform is called
<li><b>nopvert</b> - force vertex shaders to be a simple shader that just transforms
    the vertex position with ftransform() and passes through the color and
    texcoord[0] attributes.
<li><b>nopfrag</b> - force fragment shader to be a simple shader that passes
    through the color attribute.
<li><b>useprog</b> - log glUseProgram calls to stderr
</ul>
<p>
Example:  export MESA_GLSL=dump,nopt
</p>


<a name="120">
<h2>GLSL Version</h2>

<p>
The GLSL compiler currently supports version 1.20 of the shading language.
</p>

<p>
Several GLSL extensions are also supported:
</p>
<ul>
<li>GL_ARB_draw_buffers
<li>GL_ARB_texture_rectangle
<li>GL_ARB_fragment_coord_conventions
<li>GL_EXT_texture_array
</ul>


a36 2
<p>XXX update this section</p>

d38 1
a38 1
The following features of the shading language are not yet fully supported
d43 3
a45 3
<li>Linking of multiple shaders does not always work.  Currently, linking
    is implemented through shader concatenation and re-compiling.  This
    doesn't always work because of some #pragma and preprocessor issues.
d47 2
d86 33
d128 2
d135 5
a139 1
<h2>Stand-alone GLSL Compiler</h2>
d142 3
a144 2
The stand-alone GLSL compiler program can be used to compile GLSL shaders
into low-level GPU code.
d157 1
a157 1
After building Mesa, the compiler can be found at src/glsl/glsl_compiler
d159 7
d172 14
a185 1
    src/glsl/glsl_compiler --dump-ast myshader.vert
d188 11
a198 8
Options include
<ul>
<li><b>--dump-ast</b> - dump GPU code
<li><b>--dump-hir</b> - dump high-level IR code
<li><b>--dump-lir</b> - dump low-level IR code
<li><b>--link</b> - ???
</ul>

d207 1
a207 1
<code>src/glsl/</code> directory.
d211 1
a211 1
XXX provide some info about the compiler....
d213 26
d296 7
a302 1
Developers working on the GLSL compiler should test frequently to avoid
a304 1

d306 2
a307 4
The <a href="http://people.freedesktop.org/~nh/piglit/">Piglit</a> project
has many GLSL tests and the
<a href="http://glean.sf.net" target="_parent">Glean</a> glsl1 test 
tests GLSL features.
a309 3
<p>
The Mesa demos repository also has some good GLSL tests.
</p>
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 12
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Shading Language Support</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>
d3 1
a3 2
<iframe src="contents.html"></iframe>
<div class="content">
d5 5
a9 1
<h1>Shading Language Support</h1>
d13 1
a13 1
<a href="http://opengl.org/documentation/glsl/">
d22 1
a22 1
<li><a href="#support">GLSL 1.40 support</a>
d32 3
a34 1
<h2 id="envvars">Environment Variables</h2>
d61 2
a62 1
<h2 id="support">GLSL Version</h2>
d65 1
a65 1
The GLSL compiler currently supports version 1.40 of the shading language.
d73 1
d75 1
a75 1
<li>GL_ARB_shader_bit_encoding
d79 2
a80 1
<h2 id="unsup">Unsupported Features</h2>
d93 1
d103 2
a104 1
<h2 id="notes">Implementation Notes</h2>
d127 2
a128 1
<h2 id="hints">Programming Hints</h2>
d144 2
a145 1
<h2 id="standalone">Stand-alone GLSL Compiler</h2>
d154 1
a154 1
</p>
d182 4
a185 1
<h2 id="implementation">Compiler Implementation</h2>
d221 3
a223 3
<dl>
<dt>EmitHighLevelInstructions</dt>
<dd>
d228 1
a228 1
</dd>
d230 2
a231 2
<dt>EmitCondCodes</dt>
<dd>
d237 1
a237 1
</dd>
d239 2
a240 2
<dt>EmitComments</dt>
<dd>
d243 3
a245 2
</dd>
</dl>
d248 2
a249 1
<h2 id="validation">Compiler Validation</h2>
d257 4
a260 2
The <a href="http://piglit.freedesktop.org/">Piglit</a> project
has many GLSL tests.
d267 2
a268 3
</div>
</body>
</html>
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d70 1
a70 1
The GLSL compiler currently supports version 3.30 of the shading language.
d237 1
a237 1
If set, instructions will be annotated with comments to help with debugging.
@


