head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	v10_2_9:1.1.1.6
	v10_4_3:1.1.1.5
	v10_2_7:1.1.1.4
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	v10_2_3:1.1.1.4
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	v9_2_5:1.1.1.3
	v9_2_3:1.1.1.3
	v9_2_2:1.1.1.3
	v9_2_1:1.1.1.3
	v9_2_0:1.1.1.3
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	v7_10_3:1.1.1.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2015.12.23.05.17.22;	author jsg;	state dead;
branches;
next	1.11;
commitid	TnlogFl9nOv2eaRf;

1.11
date	2015.02.20.23.09.50;	author jsg;	state Exp;
branches;
next	1.10;
commitid	4ry2gvZGMXkCUD2n;

1.10
date	2015.01.25.14.41.14;	author jsg;	state Exp;
branches;
next	1.9;
commitid	mcxB0JvoI9gTDYXU;

1.9
date	2014.07.09.21.08.50;	author jsg;	state Exp;
branches;
next	1.8;
commitid	WPD6rgPryPkvXOr9;

1.8
date	2013.09.05.13.59.01;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.22.20.05.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.17.20.26.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.14.58.06;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.10.23.13.29.22;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.05.13.17.51;	author jsg;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.07.09.20.35.15;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	3JhLfwcuBALP0ZR7;

1.1.1.5
date	2015.01.25.14.13.51;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	ce2W5rH5aF7VS9gi;

1.1.1.6
date	2015.02.20.22.50.51;	author jsg;	state Exp;
branches;
next	;
commitid	F54a1i0WXHMxq7kE;


desc
@@


1.12
log
@remove the now unused Mesa 10.2.9 code
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Compiling and Installing</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>

<iframe src="contents.html"></iframe>
<div class="content">

<h1>Compiling and Installing</h1>

<ol>
<li><a href="#prereq-general">Prerequisites for building</a>
  <ul>
  <li><a href="#prereq-general">General prerequisites</a>
  <li><a href="#prereq-dri">For DRI and hardware acceleration</a>
  </ul>
<li><a href="#autoconf">Building with autoconf (Linux/Unix/X11)</a>
<li><a href="#scons">Building with SCons (Windows/Linux)</a>
<li><a href="#other">Building for other systems</a>
<li><a href="#libs">Library Information</a>
<li><a href="#pkg-config">Building OpenGL programs with pkg-config</a>
</ol>


<h1 id="prereq-general">1. Prerequisites for building</h1>

<h2>1.1 General</h2>
<ul>
<li>lex / yacc - for building the GLSL compiler.
On Linux systems, flex and bison are used.
Versions 2.5.35 and 2.4.1, respectively, (or later) should work.
<br>
<br>
On Windows with MinGW, install flex and bison with:
<pre>mingw-get install msys-flex msys-bison</pre>
</li>
<li>python - Python is needed for building the Gallium components.
Version 2.6.4 or later should work.
</li>
</ul>


<h3 id="prereq-dri">1.2 For DRI and hardware acceleration</h3>

<p>
The following are required for DRI-based hardware acceleration with Mesa:
</p>

<ul>
<li><a href="http://xorg.freedesktop.org/releases/individual/proto/">
dri2proto</a> version 2.6 or later
<li><a href="http://dri.freedesktop.org/libdrm/">libDRM</a>
version 2.4.33 or later
<li>Xorg server version 1.5 or later
<li>Linux 2.6.28 or later
</ul>
<p>
If you're using a fedora distro the following command should install all
the needed dependencies:
</p>
<pre>
  sudo yum install flex bison imake libtool xorg-x11-proto-devel libdrm-devel \
  gcc-c++ xorg-x11-server-devel libXi-devel libXmu-devel libXdamage-devel git \
  expat-devel llvm-devel
</pre>



<h1 id="autoconf">2. Building with autoconf (Linux/Unix/X11)</h1>

<p>
The primary method to build Mesa on Unix systems is with autoconf.
</p>

<p>
The general approach is the standard:
</p>
<pre>
  ./configure
  make
  sudo make install
</pre>
<p>
But please read the <a href="autoconf.html">detailed autoconf instructions</a>
for more details.
</p>



<h1 id="scons">3. Building with SCons (Windows/Linux)</h1>

<p>
To build Mesa with SCons on Linux or Windows do
</p>
<pre>
    scons
</pre>
<p>
The build output will be placed in
build/<i>platform</i>-<i>machine</i>-<i>debug</i>/..., where <i>platform</i> is for
example linux or windows, <i>machine</i> is x86 or x86_64, optionally followed
by -debug for debug builds.
</p>

<p>
To build Mesa with SCons for Windows on Linux using the MinGW crosscompiler toolchain do
</p>
<pre>
    scons platform=windows toolchain=crossmingw machine=x86 mesagdi libgl-gdi
</pre>
<p>
This will create:
</p>
<ul>
<li>build/windows-x86-debug/mesa/drivers/windows/gdi/opengl32.dll &mdash; Mesa + swrast, binary compatible with Windows's opengl32.dll
<li>build/windows-x86-debug/gallium/targets/libgl-gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe, binary compatible with Windows's opengl32.dll
</ul>
<p>
Put them all in the same directory to test them.
</p>



<h1 id="other">4. Building for other systems</h1>

<p>
Documentation for other environments (some may be very out of date):
</p>

<ul>
<li><a href="README.VMS">README.VMS</a> - VMS
<li><a href="README.CYGWIN">README.CYGWIN</a> - Cygwin
<li><a href="README.WIN32">README.WIN32</a> - Win32
</ul>



<h1 id="libs">5. Library Information</h1>

<p>
When compilation has finished, look in the top-level <code>lib/</code>
(or <code>lib64/</code>) directory.
You'll see a set of library files similar to this:
</p>
<pre>
lrwxrwxrwx    1 brian    users          10 Mar 26 07:53 libGL.so -> libGL.so.1*
lrwxrwxrwx    1 brian    users          19 Mar 26 07:53 libGL.so.1 -> libGL.so.1.5.060100*
-rwxr-xr-x    1 brian    users     3375861 Mar 26 07:53 libGL.so.1.5.060100*
lrwxrwxrwx    1 brian    users          14 Mar 26 07:53 libOSMesa.so -> libOSMesa.so.6*
lrwxrwxrwx    1 brian    users          23 Mar 26 07:53 libOSMesa.so.6 -> libOSMesa.so.6.1.060100*
-rwxr-xr-x    1 brian    users       23871 Mar 26 07:53 libOSMesa.so.6.1.060100*
</pre>

<p>
<b>libGL</b> is the main OpenGL library (i.e. Mesa).
<br>
<b>libOSMesa</b> is the OSMesa (Off-Screen) interface library.
</p>

<p>
If you built the DRI hardware drivers, you'll also see the DRI drivers:
</p>
<pre>
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i915_dri.so
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i965_dri.so
-rwxr-xr-x   1 brian users 11849858 Jul 21 12:12 r200_dri.so
-rwxr-xr-x   1 brian users 11757388 Jul 21 12:12 radeon_dri.so
</pre>

<p>
If you built with Gallium support, look in lib/gallium/ for Gallium-based
versions of libGL and device drivers.
</p>


<h1 id="pkg-config">6. Building OpenGL programs with pkg-config</h1>

<p>
Running <code>make install</code> will install package configuration files
for the pkg-config utility.
</p>

<p>
When compiling your OpenGL application you can use pkg-config to determine
the proper compiler and linker flags.
</p>

<p>
For example, compiling and linking a GLUT application can be done with:
</p>
<pre>
   gcc `pkg-config --cflags --libs glut` mydemo.c -o mydemo
</pre>

<br>

</div>
</body>
</html>
@


1.11
log
@Merge Mesa 10.2.9
@
text
@@


1.10
log
@Merge Mesa 10.4.3
Tested by matthieu@@ mpi@@ and myself.  landry@@ ran a ports bulk build.
kettenis@@ tracked down the cause of an alignment fault on archs
that require strict eight byte pointer alignment.
@
text
@a36 8
<li><a href="http://www.python.org/">Python</a> - Python is required.
Version 2.6.4 or later should work.
</li>
<br>
<li><a href="http://www.scons.org/">SCons</a> is required for building on
Windows and optional for Linux (it's an alternative to autoconf/automake.)
</li>
<br>
a37 2
<br>
<br>
d44 3
a46 2
For MSVC on Windows, you can find flex/bison programs on the
<a href="ftp://ftp.freedesktop.org/pub/mesa/windows-utils/">Mesa ftp site</a>.
@


1.9
log
@Merge Mesa 10.2.3
tested by matthieu@@ kettenis@@ mpi@@ brett@@ and myself across a
diverse range of hardware
@
text
@d37 8
d46 2
d54 2
a55 3
</li>
<li>python - Python is needed for building the Gallium components.
Version 2.6.4 or later should work.
@


1.8
log
@Merge Mesa 9.2.0
@
text
@a46 4
<br>
<br>
To build OpenGL ES 1.1 and 2.0 you'll also need
<a href="http://xmlsoft.org/sources/win32/python/libxml2-python-2.7.7.win32-py2.7.exe">libxml2-python</a>.
@


1.7
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 12
a12 1
<HTML>
d14 2
a15 1
<TITLE>Compiling and Installing</TITLE>
d17 1
a17 6
<link rel="stylesheet" type="text/css" href="mesa.css"></head>

<BODY>


<H1>Compiling and Installing</H1>
d20 1
a20 1
<li><a href="#unix-x11">Unix / X11</a>
d22 2
a23 7
  <li><a href="#prereq-general">General prerequisites for building</a>
  <li><a href="#prereq-dri">Prerequisites for DRI and hardware acceleration</a>
  <li><a href="#autoconf">Building with autoconf</a>
  <li><a href="#traditional">Building with traditional Makefiles</a>
  <li><a href="#libs">The Libraries</a>
  <li><a href="#install">Installing the header and library files
  <li><a href="#pkg-config">Building OpenGL programs with pkg-config
d25 5
a29 3
<li><a href="#windows">Windows</a>
<li><a href="#scons">Building with SCons</a>
<li><a href="#other">Other</a>
a30 1
<br>
d33 1
a33 6
<a name="unix-x11">
<H2>1. Unix/X11 Compilation and Installation</H1>


<a name="prereq-general">
<h3>1.1 General prerequisites for building</h3>
d35 1
d40 4
d47 4
d55 1
a55 2
<a name="prereq-dri">
<h3>1.2 Prerequisites for DRI and hardware acceleration</h3>
d62 4
a65 4
<li><a href="http://xorg.freedesktop.org/releases/individual/proto/">dri2proto</a> version 1.99.3 or later
<li>Linux 2.6.28
<li><a href="http://dri.freedesktop.org/libdrm/" target="_parent">libDRM</a>
version 2.4.15 or later
d67 1
d69 3
d73 6
d81 1
a81 2
<a name="autoconf">
<h3>1.3 Building with Autoconf</h3>
d84 2
a85 8
Mesa may be <a href="autoconf.html">built using autoconf</a>.
This should work well on most GNU-based systems.
If that fails the traditional Mesa build system is available.



<a name="traditional">
<h3>1.4 Building with traditional Makefiles</h3>
d88 1
a88 2
The traditional Mesa build system is based on a collection of pre-defined
system configurations.
d90 5
d96 2
a97 3
To see the list of configurations, just type <code>make</code>.
Then choose a configuration from the list and type <code>make</code>
<em>configname</em>.
d100 4
d105 1
a105 13
Mesa may be built in several different ways using the predefined configurations:
</p>
<ul>
<li><b><em>Stand-alone/Xlib mode</em></b> - Mesa will be compiled as
a software renderer using Xlib to do all rendering.
The libGL.so library will be a self-contained rendering library that will
allow you to run OpenGL/GLX applications on any X server (regardless of
whether it supports the GLX X server extension).
You will <em>not</em> be able to use hardware 3D acceleration.
<p>
To compile stand-alone Mesa type <code>make</code> in the top-level directory.
You'll see a list of supported system configurations.
Choose one from the list (such as linux-x86), and type:
d108 1
a108 1
    make linux-x86
d110 6
a115 8
<p>This will produce libGL.so and several other libraries</p>
</li>

<li><b><em>DRI/accelerated</em></b> - The DRI hardware drivers for
accelerated OpenGL rendering (for ATI, Intel, Matrox, etc) will be built.
The libGL.so library will support the GLX extension and will load/use
the DRI hardware drivers.

d118 1
a118 1
Build Mesa and the DRI hardware drivers by running
d121 1
a121 1
   make linux-dri
d124 1
a124 3
There are also <code>linux-dri-x86</code>, <code>linux-dri-x86-64</code>, 
and <code>linux-ppc</code> configurations which are optimized for those
architectures.
d126 4
d131 1
a131 2
Make sure you have the prerequisite versions of DRM and Xserver mentioned
above.
a133 1
</li>
a134 1
</ul>
d136 1
d139 1
a139 2
Later, if you want to rebuild for a different configuration run
<code>make realclean</code> before rebuilding.
d142 6
d149 2
a150 2
<a name="libs">
<h3>1.5 The libraries</h3>
a160 9
lrwxrwxrwx    1 brian    users          11 Mar 26 07:53 libGLU.so -> libGLU.so.1*
lrwxrwxrwx    1 brian    users          20 Mar 26 07:53 libGLU.so.1 -> libGLU.so.1.3.060100*
-rwxr-xr-x    1 brian    users      549269 Mar 26 07:53 libGLU.so.1.3.060100*
lrwxrwxrwx    1 brian    users          12 Mar 26 07:53 libglut.so -> libglut.so.3*
lrwxrwxrwx    1 brian    users          16 Mar 26 07:53 libglut.so.3 -> libglut.so.3.7.1*
-rwxr-xr-x    1 brian    users      597754 Mar 26 07:53 libglut.so.3.7.1*
lrwxrwxrwx    1 brian    users          11 Mar 26 08:04 libGLw.so -> libGLw.so.1*
lrwxrwxrwx    1 brian    users          15 Mar 26 08:04 libGLw.so.1 -> libGLw.so.1.0.0*
-rwxr-xr-x    1 brian    users       20750 Mar 26 08:04 libGLw.so.1.0.0*
a168 6
<b>libGLU</b> is the OpenGL Utility library.
<br>
<b>libglut</b> is the GLUT library.
<br>
<b>libGLw</b> is the Xt/Motif OpenGL drawing area widget library.
<br>
a175 3
-rwxr-xr-x   1 brian users 15607851 Jul 21 12:11 ffb_dri.so
-rwxr-xr-x   1 brian users 15148747 Jul 21 12:11 i810_dri.so
-rwxr-xr-x   1 brian users 14497814 Jul 21 12:11 i830_dri.so
d177 1
a177 3
-rwxr-xr-x   1 brian users 11320803 Jul 21 12:11 mach64_dri.so
-rwxr-xr-x   1 brian users 11418014 Jul 21 12:12 mga_dri.so
-rwxr-xr-x   1 brian users 11064426 Jul 21 12:12 r128_dri.so
a178 1
-rwxr-xr-x   1 brian users 16050488 Jul 21 12:11 r300_dri.so
a179 6
-rwxr-xr-x   1 brian users 11232304 Jul 21 12:13 s3v_dri.so
-rwxr-xr-x   1 brian users 11062970 Jul 21 12:13 savage_dri.so
-rwxr-xr-x   1 brian users 11214212 Jul 21 12:13 sis_dri.so
-rwxr-xr-x   1 brian users 11368736 Jul 21 12:13 tdfx_dri.so
-rwxr-xr-x   1 brian users 10598868 Jul 21 12:13 trident_dri.so
-rwxr-xr-x   1 brian users 10997120 Jul 21 12:13 unichrome_dri.so
d188 1
a188 44

<a name="install">
<H3>1.6 Installing the header and library files</H3>

<p>
The standard location for the OpenGL header files on Unix-type systems is
in <code>/usr/include/GL/</code>.
The standard location for the libraries is <code>/usr/lib/</code>.
For more information see, the
<a href="http://oss.sgi.com/projects/ogl-sample/ABI/" target="_parent">
Linux/OpenGL ABI specification</a>.
</p>

<p>
If you'd like Mesa to co-exist with another implementation of OpenGL that's
already installed, you'll have to choose different directories, like
<code>/usr/local/include/GL/</code> and <code>/usr/local/lib/</code>.
</p>

<p>
To install Mesa's headers and libraries, run <code>make install</code>.
But first, check the Mesa/configs/default file and examine the values
of the <b>INSTALL_DIR</b> and <b>DRI_DRIVER_INSTALL_DIR</b> variables.
Change them if needed, then run <code>make install</code>.
</p>

<p>
The variable
<b>DESTDIR</b> may also be used to install the contents to a temporary
staging directory.
This can be useful for package management.
For example: <code>make install DESTDIR=/somepath/</code>
</p>

<p>
Note: at runtime you can use the LD_LIBRARY_PATH environment variable
(on Linux at least) to switch
between the Mesa libraries and other vendor's libraries whenever you want.
This is a handy way to compare multiple OpenGL implementations.
</p>


<a name="pkg-config">
<H3>1.7 Building OpenGL programs with pkg-config</H3>
d209 1
a209 72
<a name="windows">
<H2>2. Windows Compilation and Installation</H1>

<p>
Please see the <a href="#scons">instructions on building with SCons</a>.
</p>



<a name="scons">
<H2>3. Building with SCons</H1>

<p>
To build Mesa with SCons on Linux or Windows do
</p>
<pre>
    scons
</pre>
<p>
The build output will be placed in
build/<i>platform</i>-<i>machine</i>-<i>debug</i>/..., where <i>platform</i> is for
example linux or windows, <i>machine</i> is x86 or x86_64, optionally followed
by -debug for debug builds.
</p>

<p>
To build Mesa with SCons for Windows on Linux using the MinGW crosscompiler toolchain do
</p>
<pre>
    scons platform=windows toolchain=crossmingw machine=x86 statetrackers=mesa drivers=softpipe,trace winsys=gdi
</pre>
<p>
This will create:
</p>
<ul>
<li>build/windows-x86-debug/gallium/targets/libgl-gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe, binary compatible with Windows's opengl32.dll 
<li>build/windows-x86-debug/glut/glx/glut32.dll
<li>progs/build/windows-x86-debug/wgl/wglinfo.exe
<li>progs/build/windows-x86-debug/trivial/tri.exe
<li>and many other samples in progs/build/windows-x86-debug/...
</ul>
<p>
Put them all in the same directory to test them.
</p>


<a name="other">
<H2>4. Other systems</H1>

<p>
Documentation for other environments (some may be very out of date):
</p>

<UL>
<li><A HREF="README.VMS">README.VMS</A> - VMS
<LI><A HREF="README.GGI">README.GGI</A> - GGI
<LI><A HREF="README.3DFX">README.3DFX</A> - 3Dfx/Glide driver
<LI><A HREF="README.AMIWIN">README.AMIWIN</A> - Amiga Amiwin
<LI><A HREF="README.BEOS">README.BEOS</A> - BeOS
<LI><A HREF="README.D3D">README.D3D</A> - Direct3D driver
<LI><A HREF="README.DJ">README.DJ</A> - DJGPP
<LI><A HREF="README.LYNXOS">README.LYNXOS</A> - LynxOS
<LI><A HREF="README.MINGW32">README.MINGW32</A> - Mingw32
<LI><A HREF="README.NeXT">README.NeXT</A> - NeXT
<LI><A HREF="README.OpenStep">README.OpenStep</A> - OpenStep
<LI><A HREF="README.OS2">README.OS2</A> - OS/2
<LI><A HREF="README.WINDML">README.WINDML</A> - WindML
</UL>




@


1.6
log
@Merge Mesa 7.10.3
@
text
@a276 1
Alternatively see <a href="README.WIN32">README.WIN32</a> file.
@


1.5
log
@Update to Mesa 7.8.1. Tested on a bulk ports build by naddy@@, ok oga@@.
@
text
@d15 2
a16 1
  <li><a href="#prereq">Prerequisites for DRI and hardware acceleration</a>
a19 1
  <li><a href="#demos">Running the demos
d24 1
a24 1
<li><a href="#scons">SCons</a>
d34 16
a49 2
<a name="prereq">
<h3>1.1 Prerequisites for DRI and hardware acceleration</h3>
d66 1
a66 1
<h3>1.2 Building with Autoconf</h3>
d76 1
a76 1
<h3>1.3 Building with traditional Makefiles</h3>
d143 1
a143 1
<h3>1.4 The libraries</h3>
a201 22

<a name="demos">
<h3>1.5 Running the demos</h3>

<p>
If you downloaded/unpacked the MesaDemos-x.y.z.tar.gz archive or
obtained Mesa from CVS, the <b>progs/</b> directory will contain a
bunch of demonstration programs.
</p>

<p>
Before running a demo, you'll probably have to set two environment variables
to indicate where the libraries are located.  For example:
<p>
<blockquote>
<b>cd lib/</b>
<br>
<b>export LD_LIBRARY_PATH=${PWD}</b>
<br>
<b>export LIBGL_DRIVERS_PATH=${PWD}</b> (if using DRI drivers)
</blockquote>

d203 2
a204 1
Next, change to the Mesa/demos/ directory:
a205 3
<blockquote>
<b>cd ../progs/demos</b>
</blockquote>
a206 46
<p>
Run a demo such as gears:
</p>
<blockquote>
<b>./gears</b>
</blockquote>

<p>
If this doesn't work, try the <b>Mesa/progs/xdemos/glxinfo</b> program
and see that it prints the expected Mesa version number.
</p>

<p>
If you're using Linux or a similar OS, verify that the demo program is
being linked with the proper library files:
</p>
<blockquote>
<b>ldd gears</b>
</blockquote>

<p>
You should see something like this:
</p>
<pre>
        libglut.so.3 => /home/brian/Mesa/lib/libglut.so.3 (0x40013000)
        libGLU.so.1 => /home/brian/Mesa/lib/libGLU.so.1 (0x40051000)
        libGL.so.1 => /home/brian/Mesa/lib/libGL.so.1 (0x400e0000)
        libc.so.6 => /lib/i686/libc.so.6 (0x42000000)
        libm.so.6 => /lib/i686/libm.so.6 (0x403da000)
        libX11.so.6 => /usr/X11R6/lib/libX11.so.6 (0x403fc000)
        libXmu.so.6 => /usr/X11R6/lib/libXmu.so.6 (0x404da000)
        libXt.so.6 => /usr/X11R6/lib/libXt.so.6 (0x404f1000)
        libXi.so.6 => /usr/X11R6/lib/libXi.so.6 (0x40543000)
        libstdc++.so.5 => /usr/lib/libstdc++.so.5 (0x4054b000)
        libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x405fd000)
        libXext.so.6 => /usr/X11R6/lib/libXext.so.6 (0x40605000)
        libpthread.so.0 => /lib/i686/libpthread.so.0 (0x40613000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
        libdl.so.2 => /lib/libdl.so.2 (0x40644000)
        libSM.so.6 => /usr/X11R6/lib/libSM.so.6 (0x40647000)
        libICE.so.6 => /usr/X11R6/lib/libICE.so.6 (0x40650000)
</pre>

<p>
Retrace your steps if this doesn't look right.
</p>
d308 1
a308 1
<li>build/windows-x86-debug/gallium/winsys/gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe, binary compatible with Windows's opengl32.dll 
@


1.4
log
@Update to Mesa 7.4.2. Tested by oga@@, ckuethe@@ and naddy@@.
@
text
@d24 1
d38 1
a38 1
The following are required for DRI-based hardware acceleration with Mesa 7.3:
d45 1
a45 1
version 2.4.3 or later
d332 2
a333 1
Please see the <a href="README.WIN32">README.WIN32</a> file.
d338 37
d376 1
a376 1
<H2>3. Other systems</H1>
@


1.3
log
@Mesa 7.2, Tested by ckuethe@@, naddy@@, oga@@, and others.
@
text
@d3 1
a3 1
<TITLE>Compilation and Installation</TITLE>
d10 1
a10 1
<H1>Compilation and Installation</H1>
d14 9
a23 1
<li><a href="#vms">VMS</a>
d26 1
a26 1

d33 2
a34 1
<h3>1.1 Prerequisites for DRI and Hardware Acceleration</h3>
d37 1
a37 2
To build Mesa 7.1 with DRI-based hardware acceleration you must first have
the <a href="http://dri.freedesktop.org/libdrm/" target="_parent">DRM version 2.3.1</a>.
d40 7
a46 2
<p>
You should also be using the Xorg server version 1.4 or 1.5.
d50 2
a51 2

<h3>1.2 Autoconf Compilation</h3>
d56 1
a56 1
When that fails, the traditional Mesa build system is available.
d60 2
a61 1
<h3>1.3 Traditional Compilation</h3>
d68 3
a70 2
To see the list of configurations, type <b>make</b> alone.
Then choose a configuration from the list and type <b>make configname</b>.
d84 1
a84 1
To compile stand-alone Mesa type <b>make</b> in the top-level directory.
d127 1
d188 1
d264 1
d305 2
a306 1
<H3>1.7 Building OpenGL Programs With pkg-config</H3>
a335 11

<a name="vms">
<H2>3. VMS Compilation and Installation</H1>

<p>
Please see the <a href="README.VMS">README.VMS</a> file.
</p>




d337 1
a337 1
<H2>4. Other systems</H1>
d344 1
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@a23 1
<h3>1.1 Compilation</h3>
d25 28
d54 6
a59 1
Mesa may be compiled in several different ways:
a83 37
<p>
<b>Prerequisites:</b>
</p>

<ol>

<li>
<p>
For Mesa 7.0.2 <a href="http://dri.freedesktop.org/libdrm/">
DRM version 2.3</a> is required.
</p>
<p>
To check if you already have it, run:
<br>
<code>pkg-config --modversion libdrm</code>
</p>
<p>
You can download and install a <a href="http://dri.freedesktop.org/libdrm/">
tarball release</a> or get the code from git with:
<br>
<code>git clone git://anongit.freedesktop.org/git/mesa/drm</code>
<br>
Then revert to the drm-2.3.0 tag with:
<br>
<code>git-reset --hard drm-2.3.0</code>
</p>
</li>

<li>
Relatively recent
<a href="http://freedesktop.org/wiki/Software_2fXserver" target="_parent">
X.org</a> release.
Mesa depends on a number of X header and library files.
</li>

</ol>

d96 4
d102 1
d112 1
a112 1
<h3>1.2 The libraries</h3>
d153 4
a156 4
-rwxr-xr-x   1 brian users 15607851 Jul 21 12:11 ffb_dri.so*
-rwxr-xr-x   1 brian users 15148747 Jul 21 12:11 i810_dri.so*
-rwxr-xr-x   1 brian users 14497814 Jul 21 12:11 i830_dri.so*
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i915_dri.so*
d161 1
a161 1
-rwxr-xr-x   1 brian users 16050488 Jul 21 12:11 r300_dri.so*
d172 1
a172 1
<h3>1.3 Running the demos</h3>
d181 2
a182 3
Before running a demo, you may have to set an environment variable
(such as <b>LD_LIBRARY_PATH</b> on Linux) to indicate where the
libraries are located.  For example:
d185 1
a185 3
<b>cd</b> into the Mesa <b>lib/</b> directory.
<br>
<b>setenv LD_LIBRARY_PATH ${cwd}</b>   (if using csh or tcsh shell)
d187 1
a187 1
or,
d189 1
a189 1
<b>export LD_LIBRARY_PATH=${PWD}</b>   (if using bash or sh shell)
d247 1
a247 1
<H3>1.4 Installing the header and library files</H3>
d287 1
a287 1
<H3>1.5 pkg-config support</H3>
@


1.1
log
@Initial revision
@
text
@d60 2
a61 2
DRM kernel modules and header files from the
<a href="http://dri.sf.net/" target="_parent">DRI</a> project.
a62 1

d64 4
a67 5
If you don't already have the DRM file, you can get the sources from
CVS by doing:
<pre>
cvs -z3 -d:pserver:anonymous@@anoncvs.freedesktop.org:/cvs/dri co drm
</pre>
d69 8
a76 3
See the <a href="http://dri.freedesktop.org/wiki/Building" target="_parent">
DRI Building Instructions</a> for the steps to build the DRM modules.  Mesa
6.5 requires at least libdrm 2.0.1 or greater.
a77 4
<p>
You can verify that the DRM files have been properly installed by
running <code>pkg-config --modversion libdrm</code>

d81 1
a81 18
Recent /usr/include/GL/glxproto.h file.
<p>You'll need this if you get any errors about _GLXvop_BindTexImageEXT
being undefined.
</p>
<p>
Download/install the
<a href="http://gitweb.freedesktop.org/?p=xorg/proto/glproto.git">glproto</a>
module from X.org git, or grab the
<A href="http://webcvs.freedesktop.org/*checkout*/xorg/proto/GL/glxproto.h?rev=1.9&content-type=text%2Fplain">glxproto.h file</a> and put it in the
Mesa/include/GL/ directory.
</p>

</li>

<li>DRI-enabled X server.
<p>Visit
<a href="http://www.xfree86.org" target="_parent">XFree86</a>
or
d83 2
a84 3
X.org</a>
for more information.
</p>
d271 9
a279 1
Change them if needed, then run <code>make install</code>
d290 20
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Import Mesa 7.10.3
@
text
@d3 1
a3 1
<TITLE>Compiling and Installing</TITLE>
d10 1
a10 1
<H1>Compiling and Installing</H1>
a13 9
  <ul>
  <li><a href="#prereq-general">General prerequisites for building</a>
  <li><a href="#prereq-dri">Prerequisites for DRI and hardware acceleration</a>
  <li><a href="#autoconf">Building with autoconf</a>
  <li><a href="#traditional">Building with traditional Makefiles</a>
  <li><a href="#libs">The Libraries</a>
  <li><a href="#install">Installing the header and library files
  <li><a href="#pkg-config">Building OpenGL programs with pkg-config
  </ul>
d15 1
a15 1
<li><a href="#scons">Building with SCons</a>
d18 1
a18 1
<br>
d24 1
a24 34

<a name="prereq-general">
<h3>1.1 General prerequisites for building</h3>

<ul>
<li>lex / yacc - for building the GLSL compiler.
On Linux systems, flex and bison are used.
Versions 2.5.35 and 2.4.1, respectively, (or later) should work.
</li>
<li>python - Python is needed for building the Gallium components.
Version 2.6.4 or later should work.
</li>
</ul>


<a name="prereq-dri">
<h3>1.2 Prerequisites for DRI and hardware acceleration</h3>

<p>
The following are required for DRI-based hardware acceleration with Mesa:
</p>

<ul>
<li><a href="http://xorg.freedesktop.org/releases/individual/proto/">dri2proto</a> version 1.99.3 or later
<li>Linux 2.6.28
<li><a href="http://dri.freedesktop.org/libdrm/" target="_parent">libDRM</a>
version 2.4.15 or later
<li>Xorg server version 1.5 or later
</ul>
</p>


<a name="autoconf">
<h3>1.3 Building with Autoconf</h3>
d27 1
a27 21
Mesa may be <a href="autoconf.html">built using autoconf</a>.
This should work well on most GNU-based systems.
If that fails the traditional Mesa build system is available.



<a name="traditional">
<h3>1.4 Building with traditional Makefiles</h3>

<p>
The traditional Mesa build system is based on a collection of pre-defined
system configurations.
</p>
<p>
To see the list of configurations, just type <code>make</code>.
Then choose a configuration from the list and type <code>make</code>
<em>configname</em>.
</p>

<p>
Mesa may be built in several different ways using the predefined configurations:
d37 1
a37 1
To compile stand-alone Mesa type <code>make</code> in the top-level directory.
d52 56
a119 4
<p>
Make sure you have the prerequisite versions of DRM and Xserver mentioned
above.
</p>
a121 1

d131 1
a131 2
<a name="libs">
<h3>1.5 The libraries</h3>
d172 4
a175 4
-rwxr-xr-x   1 brian users 15607851 Jul 21 12:11 ffb_dri.so
-rwxr-xr-x   1 brian users 15148747 Jul 21 12:11 i810_dri.so
-rwxr-xr-x   1 brian users 14497814 Jul 21 12:11 i830_dri.so
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i915_dri.so
d180 1
a180 1
-rwxr-xr-x   1 brian users 16050488 Jul 21 12:11 r300_dri.so
d190 38
d229 2
a230 2
If you built with Gallium support, look in lib/gallium/ for Gallium-based
versions of libGL and device drivers.
d233 7
d241 22
d264 6
a269 2
<a name="install">
<H3>1.6 Installing the header and library files</H3>
d290 1
a290 9
Change them if needed, then run <code>make install</code>.
</p>

<p>
The variable
<b>DESTDIR</b> may also be used to install the contents to a temporary
staging directory.
This can be useful for package management.
For example: <code>make install DESTDIR=/somepath/</code>
a300 21
<a name="pkg-config">
<H3>1.7 Building OpenGL programs with pkg-config</H3>

<p>
Running <code>make install</code> will install package configuration files
for the pkg-config utility.
</p>

<p>
When compiling your OpenGL application you can use pkg-config to determine
the proper compiler and linker flags.
</p>

<p>
For example, compiling and linking a GLUT application can be done with:
</p>
<pre>
   gcc `pkg-config --cflags --libs glut` mydemo.c -o mydemo
</pre>

<br>
d306 1
a306 2
Please see the <a href="#scons">instructions on building with SCons</a>.
Alternatively see <a href="README.WIN32">README.WIN32</a> file.
d311 3
a313 2
<a name="scons">
<H2>3. Building with SCons</H1>
d316 1
a316 10
To build Mesa with SCons on Linux or Windows do
</p>
<pre>
    scons
</pre>
<p>
The build output will be placed in
build/<i>platform</i>-<i>machine</i>-<i>debug</i>/..., where <i>platform</i> is for
example linux or windows, <i>machine</i> is x86 or x86_64, optionally followed
by -debug for debug builds.
d319 1
a319 19
<p>
To build Mesa with SCons for Windows on Linux using the MinGW crosscompiler toolchain do
</p>
<pre>
    scons platform=windows toolchain=crossmingw machine=x86 statetrackers=mesa drivers=softpipe,trace winsys=gdi
</pre>
<p>
This will create:
</p>
<ul>
<li>build/windows-x86-debug/gallium/targets/libgl-gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe, binary compatible with Windows's opengl32.dll 
<li>build/windows-x86-debug/glut/glx/glut32.dll
<li>progs/build/windows-x86-debug/wgl/wglinfo.exe
<li>progs/build/windows-x86-debug/trivial/tri.exe
<li>and many other samples in progs/build/windows-x86-debug/...
</ul>
<p>
Put them all in the same directory to test them.
</p>
a329 1
<li><A HREF="README.VMS">README.VMS</A> - VMS
@


1.1.1.3
log
@Import Mesa 9.2.0
@
text
@d1 1
a1 12
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Compiling and Installing</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>
d3 1
a3 2
<iframe src="contents.html"></iframe>
<div class="content">
d5 6
a10 1
<h1>Compiling and Installing</h1>
d13 1
a13 1
<li><a href="#prereq-general">Prerequisites for building</a>
d15 7
a21 2
  <li><a href="#prereq-general">General prerequisites</a>
  <li><a href="#prereq-dri">For DRI and hardware acceleration</a>
d23 3
a25 5
<li><a href="#autoconf">Building with autoconf (Linux/Unix/X11)</a>
<li><a href="#scons">Building with SCons (Windows/Linux)</a>
<li><a href="#other">Building for other systems</a>
<li><a href="#libs">Library Information</a>
<li><a href="#pkg-config">Building OpenGL programs with pkg-config</a>
d27 1
d30 6
a35 1
<h1 id="prereq-general">1. Prerequisites for building</h1>
a36 1
<h2>1.1 General</h2>
a40 4
<br>
<br>
On Windows with MinGW, install flex and bison with:
<pre>mingw-get install msys-flex msys-bison</pre>
a43 4
<br>
<br>
To build OpenGL ES 1.1 and 2.0 you'll also need
<a href="http://xmlsoft.org/sources/win32/python/libxml2-python-2.7.7.win32-py2.7.exe">libxml2-python</a>.
d48 2
a49 1
<h3 id="prereq-dri">1.2 For DRI and hardware acceleration</h3>
d56 4
a59 4
<li><a href="http://xorg.freedesktop.org/releases/individual/proto/">
dri2proto</a> version 2.6 or later
<li><a href="http://dri.freedesktop.org/libdrm/">libDRM</a>
version 2.4.33 or later
a60 1
<li>Linux 2.6.28 or later
a61 3
<p>
If you're using a fedora distro the following command should install all
the needed dependencies:
a62 5
<pre>
  sudo yum install flex bison imake libtool xorg-x11-proto-devel libdrm-devel \
  gcc-c++ xorg-x11-server-devel libXi-devel libXmu-devel libXdamage-devel git \
  expat-devel llvm-devel
</pre>
d65 7
a72 1
<h1 id="autoconf">2. Building with autoconf (Linux/Unix/X11)</h1>
d74 3
a76 3
<p>
The primary method to build Mesa on Unix systems is with autoconf.
</p>
d79 2
a80 1
The general approach is the standard:
a81 5
<pre>
  ./configure
  make
  sudo make install
</pre>
d83 3
a85 2
But please read the <a href="autoconf.html">detailed autoconf instructions</a>
for more details.
a87 4


<h1 id="scons">3. Building with SCons (Windows/Linux)</h1>

d89 13
a101 1
To build Mesa with SCons on Linux or Windows do
d104 1
a104 1
    scons
d106 8
a113 6
<p>
The build output will be placed in
build/<i>platform</i>-<i>machine</i>-<i>debug</i>/..., where <i>platform</i> is for
example linux or windows, <i>machine</i> is x86 or x86_64, optionally followed
by -debug for debug builds.
</p>
d116 1
a116 1
To build Mesa with SCons for Windows on Linux using the MinGW crosscompiler toolchain do
d119 1
a119 1
    scons platform=windows toolchain=crossmingw machine=x86 mesagdi libgl-gdi
d122 3
a124 1
This will create:
a125 4
<ul>
<li>build/windows-x86-debug/mesa/drivers/windows/gdi/opengl32.dll &mdash; Mesa + swrast, binary compatible with Windows's opengl32.dll
<li>build/windows-x86-debug/gallium/targets/libgl-gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe, binary compatible with Windows's opengl32.dll
</ul>
d127 2
a128 1
Put them all in the same directory to test them.
d131 1
d133 1
a134 1
<h1 id="other">4. Building for other systems</h1>
d137 2
a138 1
Documentation for other environments (some may be very out of date):
a140 6
<ul>
<li><a href="README.VMS">README.VMS</a> - VMS
<li><a href="README.CYGWIN">README.CYGWIN</a> - Cygwin
<li><a href="README.WIN32">README.WIN32</a> - Win32
</ul>

d142 2
a143 2

<h1 id="libs">5. Library Information</h1>
d154 9
d171 6
d184 3
d188 3
a190 1
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i965_dri.so
d192 1
d194 6
d208 44
a251 1
<h1 id="pkg-config">6. Building OpenGL programs with pkg-config</h1>
d272 73
a344 1
</div>
@


1.1.1.4
log
@Import Mesa 10.2.3
@
text
@d47 4
@


1.1.1.5
log
@Import Mesa 10.4.3
@
text
@a36 8
<li><a href="http://www.python.org/">Python</a> - Python is required.
Version 2.6.4 or later should work.
</li>
<br>
<li><a href="http://www.scons.org/">SCons</a> is required for building on
Windows and optional for Linux (it's an alternative to autoconf/automake.)
</li>
<br>
a37 2
<br>
<br>
d44 3
a46 2
For MSVC on Windows, you can find flex/bison programs on the
<a href="ftp://ftp.freedesktop.org/pub/mesa/windows-utils/">Mesa ftp site</a>.
@


1.1.1.6
log
@Import Mesa 10.2.9
@
text
@d37 8
d46 2
d54 2
a55 3
</li>
<li>python - Python is needed for building the Gallium components.
Version 2.6.4 or later should work.
@


