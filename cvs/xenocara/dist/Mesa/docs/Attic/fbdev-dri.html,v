head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	v7_10_3:1.1.1.3
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v7_0_1:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_5_2:1.1.1.1
	v6_5_1:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2013.09.05.13.59.00;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2011.10.23.13.37.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.12.21.09.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.49.20;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.49.20;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.25.36;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.10.23.13.29.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge Mesa 9.2.0
@
text
@<html><head><title>Mesa fbdev/DRI Environment</title>



<link rel="stylesheet" type="text/css" href="mesa.css"></head>

<body>

<center><h1>Mesa fbdev/DRI Drivers</h1></center>
<br>

<h1><center>NOTE: this information is obsolete and will be removed at
a future date</center></h1>

<h1>1. Introduction</h1>

<p>
The fbdev/DRI environment supports hardware-accelerated 3D rendering without
the X window system.  This is typically used for embedded applications.
</p>

<p>
Contributors to this project include Jon Smirl, Keith Whitwell and Dave Airlie.
</p>

<p>
Applications in the fbdev/DRI environment use
the MiniGLX interface to choose pixel
formats, create rendering contexts, etc.  It's a subset of the GLX and
Xlib interfaces allowing some degree of application portability between
the X and X-less environments.
</p>

<p>
Note that this environment is not well-supported and these instructions
may not be completely up to date.
</p>
<br>



<h1>2. Compilation</h1>
<p>

<h2>2.1 glxproto</h2>

Get <a href="http://cvsweb.xfree86.org/cvsweb/*checkout*/xc/include/GL/glxproto.h?rev=1.9">glxproto.h</a>. Copy it to the /mesa/include/GL/ directory.
</p>

<h2>2.2 libpciaccess</h2>
<p>
Check if you have libpciaccess installed:
</p>

<pre>pkg-config --modversion pciaccess
</pre>
<p>
If not you can download the latest code from:
</p>
<pre>   git clone git://anongit.freedesktop.org/git/xorg/lib/libpciaccess
</pre>
<p>
Run autogen.sh to generate a configure file. autogen.sh uses autoconf
utility. This utility may not be installed with your linux distro,
check if it is available. if not you can use your package manager or
type:
</p>
<pre>sudo apt-get install autoconf
</pre>
The next step is to install the libpciaccess library. 
<pre>make
make install
</pre>
<p> Now your libpciaccess.a file is saved into /usr/local/lib
directory. If you have a libpciaccess.a in /usr/lib you may simply copy
and overwrite these files. Don't forget to copy libpciaccess.pc file to
/usr/lib/pkgconfig, which is also located in /usr/local/lib/pkgconfig/.
Or you may use the following system variables:
</p>
<pre>export LD_LIBRARY_PATH=/usr/local/lib
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
</pre>

<h2>2.3 drm</h2>

<p>The next step is to compile the drm. DRM consists of two seperate parts,
the DRM client library(lindrm.so) and kernel device module(such as
radeon.ko). We need to make a small change in kernel device module. So
you need to download the kernel source. You may choose the nearest
mirror from www.kernel.org, or you are using Fedora Core 5, for
example, you may need to install RPMs such as:
kernel-smp-devel-2.16.15-1.2054_FC5.i686.rpm
kernel-devel-2.6.15-1.2054_FC5.i686.rpm
etc. You can find a detailed information <a href="http://www.howtoforge.com/kernel_compilation_fedora">here.</a>
</p>

<p>You will find drm_drv.c at /usr/src/LINUX-VERSION/drivers/char/drm/. Edit this code and comment out the following part:
</p>

<pre>
   /* ||
   ((ioctl-&gt;flags &amp; DRM_MASTER) &amp;&amp; !priv-&gt;master)*/
</pre>
Now you are ready to compile your kernel. If your kernel version is
identical to the version you have compiled, you can simply over write
your new "ko" files over older ones. If you have compiled a different
kernel, you must configure your grub or lilo to be able to boot your
new kernel. <p>
You'll need fbdev header files.  Check with:
</p>
<pre>
   ls -l /usr/include/linux/fb.
</pre>
<p>This file may be missing if you have not installed linux header files.


<h2>2.4 Mesa</h2>

</p><p>Get latest development Mesa sources from git repository
(currently 7.1-prerelease)
</p>
<pre>
   git clone git://anongit.freedesktop.org/git/mesa/mesa
</pre>

<p>You will need the makedepend utility which is a part of mesa project
to build your linux-solo. You probably wont have this utility. You can
download its source from following git repulsitory:
</p>
<pre>
   git clone git://anongit.freedesktop.org/git/xorg/util/makedepend
</pre>

<p>Get the latest stable mesa version from SourceForge (currently 7.0.3)
<a href="http://sourceforge.net/project/showfiles.php?group_id=3">http://sourceforge.net/project/showfiles.php?group_id=3</a>
</p>

<p>Copy the miniglx folder from 7.1-prerelease to 7.0.3.
You may also extract GLUT to 7.0.3 version at this step. 
</p>

<p>Edit linux-solo.conf at /conf directory, just only compile the
graphics driver you need, delete the unwanted drivers names from the
list(some drivers are causing problems...)
</p>
<pre>
   while(build==0)
   {
     make linux-solo

     There will be some missing header files, copy them from 7.1-prerelease
   }
</pre>

<p>
When complete you should have the following:
</p>
<ul>
<li>lib/libGL.so - the GL library which applications link with
</li><li>lib/*_dri_so - DRI drivers
</li><li>lib/miniglx.conf - sample MiniGLX config file
</li><li>progs/miniglx/* - several MiniGLX sample programs
</li></ul>

To install these files into appropriate locations in system:
<pre>
   make install
</pre>

Now your openGL libraries are copied to /usr/local/lib and
miniglx.conf is copied to /etc. You may copy them to /usr/lib and
overwrite your old GL libraries. Or you may export following variable:

<pre>
   export LIBGL_DRIVERS_PATH=/usr/local/lib
</pre>
<br>


<h1>3. Using fbdev/DRI</h1>

<p>
If an X server currently running, exit/stop it so you're working from
the console. Following command shuts down the x window and also the multi user support.
</p>
<pre>
   init 1
</pre>

<p>Also you may define the runlevel as 1 in "/etc/inittab". Your system
will always start in single user mode and without x-window with this
option set.
</p><h2>3.1 Load Kernel Modules</h2>

<p>
You'll need to load the kernel modules specific to your graphics hardware.
Typically, this consists of the agpgart module, an fbdev driver module
and the DRM kernel module.
</p>
<p>
As root, the kernel modules can be loaded as follows:
</p>

<p>
If you have Intel i915/i945 hardware:
</p>
<pre>   modprobe agpgart            # the AGP GART module
   modprobe intelfb            # the Intel fbdev driver
   modprobe i915               # the i915/945 DRI kernel module
</pre>

<p>
If you have ATI Radeon/R200 hardware:
</p>
<pre>   modprobe agpgart            # the AGP GART module
   modprobe radeonfb           # the Radeon fbdev driver
   modprobe radeon             # the Radeon DRI kernel module
</pre>

<p>
If you have ATI Rage 128 hardware:
</p>
<pre>   modprobe agpgart            # the AGP GART module
   modprobe aty128fb           # the Rage 128 fbdev driver
   modprobe r128               # the Rage 128 DRI kernel module
</pre>

<p>
If you have Matrox G200/G400 hardware:
</p>
<pre>   modprobe agpgart            # the AGP GART module
   modprobe mgafb              # the Matrox fbdev driver
   modprobe mga                # the Matrox DRI kernel module
</pre>

<p>
To verify that the agpgart, fbdev and drm modules are loaded:
</p>
<pre>   ls -l /dev/agpgart /dev/fb* /dev/dri
</pre>
<p>
Alternately, use lsmod to inspect the currently installed modules.
If you have problems, look at the output of dmesg.
</p>


<h2>3.2 Configuration File</h2>

<p>
review/edit /etc/miniglx.conf.
Alternately, the MINIGLX_CONF environment variable can be used to
indicate the location of miniglx.conf
</p>

To determine the pciBusID value, run lspci and examine the output.
For example:
<p></p>
<pre>   /sbin/lspci:
   00:02.0 VGA compatible controller: Intel Corporation 82915G/GV/910GL Express Chipset Family Graphics Controller (rev 04)
</pre>
<p>
00:02.0 indicates that pciBusID should be PCI:0:2:0
</p>




<h2>3.3 Running fbdev/DRI Programs</h2>

<p>
Make sure your LD_LIBRARY_PATH environment variable is set to the
location of the libGL.so library.  You may need to append other paths
to LD_LIBRARY_PATH if libpciaccess.so is in a non-standard location,
for example.
</p>

<p>
Change to the <code>Mesa/progs/miniglx/</code> directory and
start the sample_server program in the background:
</p>
<pre>   ./sample_server &amp;
</pre>

<p>
Then try running the <code>miniglxtest</code> program:
</p>
<pre>   ./miniglxtest
</pre>
<p>
You should see a rotating quadrilateral which changes color as it rotates.
It will exit automatically after a bit.
</p>

<p>
If you run other tests in the miniglx/ directory, you may want to run
them from a remote shell so that you can stop them with ctrl-C.
</p>
<br>


<h1>4.0 Troubleshooting</h1>

<ol>
<li>
If you try to run miniglxtest and get the following:
<br>
<pre>   [miniglx] failed to probe chipset
   connect: Connection refused
   server connection lost
</pre>
It means that the sample_server process is not running.
<br>
<br>
</li>
</ol>


<h1>5.0 Programming Information</h1>

<p>
OpenGL/Mesa is interfaced to fbdev via the MiniGLX interface.
MiniGLX is a subset of Xlib and GLX API functions which provides just
enough functionality to setup OpenGL rendering and respond to simple
input events.
</p>

<p>
Since MiniGLX is a subset of the usual Xlib and GLX APIs, programs written
to the MiniGLX API can also be run on full Xlib/GLX implementations.
This allows some degree of flexibility for software development and testing.
</p>

<p>
However, the MiniGLX API is not binary-compatible with full Xlib/GLX.
Some of the structures are different and some macros/functions work
differently.
See the GL/miniglx.h header file for details.
</p>



</body>
</html>
@


1.4
log
@Merge Mesa 7.10.3
@
text
@@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d12 3
d28 1
a28 1
the <a href="http://www.nabble.com/file/p15480666/MiniGXL.html"> MiniGLX</a> interface to choose pixel
d321 1
a321 2
OpenGL/Mesa is interfaced to fbdev via the <a href="http://www.nabble.com/file/p15480666/MiniGLX.html">MiniGLX</a>
interface.
d337 1
a337 1
See the <code>GL/miniglx.h</code> header file for details.
@


1.2
log
@Update to Mesa 7.0.2. Tested by naddy@@ (full ports build), simon@@
and oga@@ (with dri enabled).
@
text
@d1 2
a2 1
<html>
a3 1
<TITLE>Mesa fbdev/DRI Environment</TITLE>
d7 1
a7 1
<BODY>
d9 2
a10 1
<center><H1>Mesa fbdev/DRI Drivers</H1></center>
d12 1
a12 2

<H1>1. Introduction</H1>
d25 1
a25 1
the <a href="MiniGXL.html"> MiniGLX</a> interface to choose pixel
d32 2
a33 3
Some of the files needed for building this configuration are not included
in the normal Mesa releases so you'll need to get the latest sources
sources from the <a href="repository.html">git repository</a>.
d35 2
d40 11
d52 2
d55 1
a55 1
You'll need the DRM and pciaccess libraries.  Check with:
d57 1
a57 3
<pre>
   pkg-config --modversion libdrm
   pkg-config --modversion pciaccess
a58 1

d60 16
a75 1
You can get them from the git repository with:
d77 2
a78 3
<pre>
   git clone git://anongit.freedesktop.org/git/mesa/drm
   git clone git://anongit.freedesktop.org/git/xorg/lib/libpciaccess
d81 11
a91 2
<p>
See the README files in those projects for build/install instructions.
d94 2
d97 9
a105 1
<p>
d109 20
a128 1
   ls -l /usr/include/linux/fb.h
d131 11
a141 2
<p>
Compile Mesa with the 'linux-solo' configuration:
d144 6
a149 1
   make linux-solo
d157 9
a165 4
<li>lib/*_dri_so - DRI drivers
<li>lib/miniglx.conf - sample MiniGLX config file
<li>progs/miniglx/* - several MiniGLX sample programs
</ul>
d167 8
d181 1
a181 1
the console.
d183 3
d187 4
a190 2

<h2>3.1 Load Kernel Modules</h2>
d204 1
a204 2
<pre>
   modprobe agpgart            # the AGP GART module
d212 1
a212 2
<pre>
   modprobe agpgart            # the AGP GART module
d220 1
a220 2
<pre>
   modprobe agpgart            # the AGP GART module
d228 1
a228 2
<pre>
   modprobe agpgart            # the AGP GART module
d236 1
a236 2
<pre>
   ls -l /dev/agpgart /dev/fb* /dev/dri
d247 1
a247 1
Copy the sample miniglx.conf to /etc/miniglx.conf and review/edit its contents.
d254 2
a255 3
</p>
<pre>
   /sbin/lspci:
d278 1
a278 2
<pre>
   ./sample_server &amp;
d284 1
a284 2
<pre>
   ./miniglxtest
d295 1
a295 1

d304 1
a304 2
<pre>
   [miniglx] failed to probe chipset
d318 1
a318 1
OpenGL/Mesa is interfaced to fbdev via the <a href="MiniGLX.html">MiniGLX</a>
d337 1
@


1.1
log
@Initial revision
@
text
@d15 2
a16 3
The fbdev/DRI sub-project within Mesa brings hardware accelerated OpenGL
rendering to the Linux fbdev environment.
The X Window System / XFree86 is not needed.
d20 1
a20 4
Basically, the <a href="http://dri.sf.net/">DRI</a> drivers for hardware
accelerated OpenGL for XFree86 have been ported to fbdev so that X is
not needed.
This means fbdev/DRI works in full-screen mode only.
d24 5
a28 2
DRI driver writers may find this simplified environment easier to work in,
compared to the full XFree86/DRI environment.
d32 3
a34 2
Much of the work for this project has been done by Jon Smirl and
Keith Whitwell.
a36 25
<p>
To use fbdev/DRI, you'll need a Linux 2.4 or 2.6 kernel.
</p>

<h3>Background Info</h3>

<p>
The Mesa-based DRI drivers used to be hosted in the DRI tree (which is
basically a copy of the XFree86 tree).
Since the Mesa-based DRI drivers are moreso "Mesa drivers" than "XFree86
drivers" and the fact that with some work, the drivers could be used
without X, the driver code was moved into the Mesa tree.
</p>

<p>
So now the DRI drivers can be compiled for two different environments:
fbdev and XFree86.
To build the drivers for XFree86, one has to download/build the DRI
source tree.
Eventually, we'd like to be able to build the drivers for XFree86 outside
of the XFree86/DRI trees.
</p>



a39 2
<h2>2.1 Compiling the DRM modules</h2>

d41 1
a41 3
First, you'll need the DRM (Direct Rendering Manager) kernel module sources.
They're found in a module of the DRI CVS tree.
To obtain the code do the following:
d44 2
a45 1
   cvs -d:pserver:anonymous@@anoncvs.freedesktop.org:/cvs/dri login
d47 1
d49 1
a49 1
Press Enter/Return when prompted for a password.  Then,
d52 2
a53 1
   cvs -d:pserver:anonymous@@anoncvs.freedesktop.org:/cvs/dri co drm
d57 1
a57 1
Compile the DRM kernel modules:
d59 1
a59 4
<pre>
  cd drm/linux
  make
</pre>
d62 1
a62 5
Note: you may need to be root in order to make a few symlinks.
</p>
<p>
When compilation is done, you should have at least the following
kernel modules:
d65 1
a65 11
  gamma.o
  i810.o
  i830.o
  mach64.o
  mga.o
  r128.o
  radeon.o
  savage.o
  sis.o
  tdfx.o
  via.o
a66 8
<p>
You'll probably want to copy/move them into your kernel module directory
(for example: <code>/lib/modules/2.4.18-14/kernel/drivers/char/drm/</code>).
</p>



<h2>2.2 Compiling the Mesa drivers</h2>
d69 1
a69 10
Begin by editing the <code>Mesa/configs/default</code> file to set
the <code>DRM_SOURCE_PATH</code> variable.
Set it to the location where the DRM module sources are located.
For example, if your current directory in step 2.1 was <code>/home/fred/</code>
set DRM_SOURCE_PATH to <code>/home/fred/drm</code>
</p>

<p>
Next, assuming you're starting with a fresh Mesa CVS checkout,
do the following:
d76 1
a76 7
If you previously built the source tree, run <code>make realclean</code>
first to remove the old object files.
</p>

<p>
When this is finished, check the <code>Mesa/lib/</code> directory
to verify that the following files were made:
a77 1

d79 4
a82 16
<li><code>libGL.so.1.2</code> - the client-side OpenGL library
    (and a few symlinks to it).
<li><code>libGLU.so.1.1</code> - the GLU library (and a few symlinks to it).
<li><code>libglut.so.3.7</code> - the GLUT library (and a few symlinks to it).
<li><code>mga_dri.so</code> - DRI driver for Matrox G200/G400 cards.
<li><code>r128_dri.so</code> - DRI driver for ATI Rage 128 cards.
<li><code>r200_dri.so</code> - DRI driver for ATI R200 Radeon cards.
<li><code>radeon_dri.so</code> - DRI driver for original ATI Radeon cards.
<li><code>i810_dri.so</code> - DRI driver for Intel i810/i815 chips.
<li><code>i830_dri.so</code> - DRI driver for Intel i830/i845 chips.
<li><code>mga_dri.so</code> - DRI driver for Matrox G200/G400 cards.
<li><code>sis_dri.so</code> - DRI driver for SIS cards.
<li><code>tdfx_dri.so</code> - DRI driver for 3dfx Voodoo 3/4/5 cards.
<li><code>gamma_dri.so</code> - DRI driver for 3Dlabs gamma cards.
<li><code>fb_dri.so</code> - software-only fbdev driver.
<li><code>miniglx.conf</code> - configuration file for the MiniGLX interface
d86 1
d90 2
a91 2
If XFree86 is currently running, exit/stop the X server so you're
working from the console.
d100 4
a103 1
and the DRM kernel module (from step 2.1).
d106 8
d116 1
a116 1
If you have ATI Radeon/R200 hardware, run as root:
d125 1
a125 1
If you have ATI Rage 128 hardware, run as root:
d134 1
a134 1
If you have Matrox G200/G400 hardware, run as root:
d143 1
a143 2
Then run <code>lsmod</code> to be sure the modules are loaded.
For a Radeon card, you should see something like this:
d146 1
a146 4
Module                  Size  Used by    Not tainted
radeon                110308   0  (unused)
radeonfb               21900   0  (unused)
agpgart                43072   1 
d148 4
a151 1

d157 3
a159 2
The <code>Mesa/lib/miniglx.conf</code> file should be installed
in <code>/etc/</code>.
d162 7
d170 1
a170 3
Edit <code>/etc/miniglx.conf</code> to be sure it's set up correctly
for your hardware.
Comments in the file explain the options.
d174 2
d180 3
a182 1
<code>Mesa/lib/</code> directory.
d190 1
a190 1
   ./sample_server &
d213 2
a214 1
<p>
d216 1
a216 1
</p>
a221 1
<p>
d223 4
a226 3
</p>


a229 4

<p>
The full OpenGL API is available with fbdev/DRI.
</p>
@


1.1.1.1
log
@Import MesaLibs 6.5.1. (in dist/ since its code is shared between lib 
and xserver)...
@
text
@@


1.1.1.2
log
@Mesa 7.0.1
@
text
@d15 3
a17 2
The fbdev/DRI environment supports hardware-accelerated 3D rendering without
the X window system.  This is typically used for embedded applications.
d21 4
a24 1
Contributors to this project include Jon Smirl, Keith Whitwell and Dave Airlie.
d28 2
a29 5
Applications in the fbdev/DRI environment use
the <a href="MiniGXL.html"> MiniGLX</a> interface to choose pixel
formats, create rendering contexts, etc.  It's a subset of the GLX and
Xlib interfaces allowing some degree of application portability between
the X and X-less environments.
d32 30
d65 10
d76 1
a76 1
You'll need the DRM and pciaccess libraries.  Check with:
d79 1
a79 2
   pkg-config --modversion libdrm
   pkg-config --modversion pciaccess
d83 1
a83 1
You can get them from the git repository with:
d86 2
a87 2
   git clone git://anongit.freedesktop.org/git/mesa/drm
   git clone git://anongit.freedesktop.org/git/xorg/lib/libpciaccess
d91 5
a95 1
See the README files in those projects for build/install instructions.
d97 18
d117 2
d120 5
a124 1
You'll need fbdev header files.  Check with:
a125 3
<pre>
   ls -l /usr/include/linux/fb.h
</pre>
d128 2
a129 1
Compile Mesa with the 'linux-solo' configuration:
d136 2
a137 1
When complete you should have the following:
d139 6
d146 16
a161 4
<li>lib/libGL.so - the GL library which applications link with
<li>lib/*_dri_so - DRI drivers
<li>lib/miniglx.conf - sample MiniGLX config file
<li>progs/miniglx/* - several MiniGLX sample programs
a164 1

d168 2
a169 2
If an X server currently running, exit/stop it so you're working from
the console.
d178 1
a178 4
and the DRM kernel module.
</p>
<p>
As root, the kernel modules can be loaded as follows:
a180 8
<p>
If you have Intel i915/i945 hardware:
</p>
<pre>
   modprobe agpgart            # the AGP GART module
   modprobe intelfb            # the Intel fbdev driver
   modprobe i915               # the i915/945 DRI kernel module
</pre>
d183 1
a183 1
If you have ATI Radeon/R200 hardware:
d192 1
a192 1
If you have ATI Rage 128 hardware:
d201 1
a201 1
If you have Matrox G200/G400 hardware:
d210 2
a211 1
To verify that the agpgart, fbdev and drm modules are loaded:
d214 4
a217 1
   ls -l /dev/agpgart /dev/fb* /dev/dri
d219 1
a219 4
<p>
Alternately, use lsmod to inspect the currently installed modules.
If you have problems, look at the output of dmesg.
</p>
d225 2
a226 3
Copy the sample miniglx.conf to /etc/miniglx.conf and review/edit its contents.
Alternately, the MINIGLX_CONF environment variable can be used to
indicate the location of miniglx.conf
a228 7
To determine the pciBusID value, run lspci and examine the output.
For example:
</p>
<pre>
   /sbin/lspci:
   00:02.0 VGA compatible controller: Intel Corporation 82915G/GV/910GL Express Chipset Family Graphics Controller (rev 04)
</pre>
d230 3
a232 1
00:02.0 indicates that pciBusID should be PCI:0:2:0
a235 2


d240 1
a240 3
location of the libGL.so library.  You may need to append other paths
to LD_LIBRARY_PATH if libpciaccess.so is in a non-standard location,
for example.
d248 1
a248 1
   ./sample_server &amp;
d271 1
a271 2
<ol>
<li>
d273 1
a273 1
<br>
d279 1
d281 3
a283 4
<br>
<br>
</li>
</ol>
d287 4
@


1.1.1.3
log
@Import Mesa 7.10.3
@
text
@d1 1
a1 2
<html><head><title>Mesa fbdev/DRI Environment</title>

d3 1
d7 1
a7 1
<body>
d9 1
a9 2
<center><h1>Mesa fbdev/DRI Drivers</h1></center>
<br>
a10 2
<h1><center>NOTE: this information is obsolete and will be removed at
a future date</center></h1>
d12 1
a12 1
<h1>1. Introduction</h1>
d25 1
a25 1
the MiniGLX interface to choose pixel
a30 7
<p>
Note that this environment is not well-supported and these instructions
may not be completely up to date.
</p>
<br>


a32 3
<p>

<h2>2.1 glxproto</h2>
a33 4
Get <a href="http://cvsweb.xfree86.org/cvsweb/*checkout*/xc/include/GL/glxproto.h?rev=1.9">glxproto.h</a>. Copy it to the /mesa/include/GL/ directory.
</p>

<h2>2.2 libpciaccess</h2>
d35 1
a35 1
Check if you have libpciaccess installed:
d37 4
a41 2
<pre>pkg-config --modversion pciaccess
</pre>
d43 1
a43 1
If not you can download the latest code from:
d45 3
a47 1
<pre>   git clone git://anongit.freedesktop.org/git/xorg/lib/libpciaccess
d49 1
d51 1
a51 4
Run autogen.sh to generate a configure file. autogen.sh uses autoconf
utility. This utility may not be installed with your linux distro,
check if it is available. if not you can use your package manager or
type:
a52 15
<pre>sudo apt-get install autoconf
</pre>
The next step is to install the libpciaccess library. 
<pre>make
make install
</pre>
<p> Now your libpciaccess.a file is saved into /usr/local/lib
directory. If you have a libpciaccess.a in /usr/lib you may simply copy
and overwrite these files. Don't forget to copy libpciaccess.pc file to
/usr/lib/pkgconfig, which is also located in /usr/local/lib/pkgconfig/.
Or you may use the following system variables:
</p>
<pre>export LD_LIBRARY_PATH=/usr/local/lib
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
</pre>
a53 1
<h2>2.3 drm</h2>
d55 1
a55 23
<p>The next step is to compile the drm. DRM consists of two seperate parts,
the DRM client library(lindrm.so) and kernel device module(such as
radeon.ko). We need to make a small change in kernel device module. So
you need to download the kernel source. You may choose the nearest
mirror from www.kernel.org, or you are using Fedora Core 5, for
example, you may need to install RPMs such as:
kernel-smp-devel-2.16.15-1.2054_FC5.i686.rpm
kernel-devel-2.6.15-1.2054_FC5.i686.rpm
etc. You can find a detailed information <a href="http://www.howtoforge.com/kernel_compilation_fedora">here.</a>
</p>

<p>You will find drm_drv.c at /usr/src/LINUX-VERSION/drivers/char/drm/. Edit this code and comment out the following part:
</p>

<pre>
   /* ||
   ((ioctl-&gt;flags &amp; DRM_MASTER) &amp;&amp; !priv-&gt;master)*/
</pre>
Now you are ready to compile your kernel. If your kernel version is
identical to the version you have compiled, you can simply over write
your new "ko" files over older ones. If you have compiled a different
kernel, you must configure your grub or lilo to be able to boot your
new kernel. <p>
d59 1
a59 1
   ls -l /usr/include/linux/fb.
a60 1
<p>This file may be missing if you have not installed linux header files.
d62 2
a63 13

<h2>2.4 Mesa</h2>

</p><p>Get latest development Mesa sources from git repository
(currently 7.1-prerelease)
</p>
<pre>
   git clone git://anongit.freedesktop.org/git/mesa/mesa
</pre>

<p>You will need the makedepend utility which is a part of mesa project
to build your linux-solo. You probably wont have this utility. You can
download its source from following git repulsitory:
d66 1
a66 22
   git clone git://anongit.freedesktop.org/git/xorg/util/makedepend
</pre>

<p>Get the latest stable mesa version from SourceForge (currently 7.0.3)
<a href="http://sourceforge.net/project/showfiles.php?group_id=3">http://sourceforge.net/project/showfiles.php?group_id=3</a>
</p>

<p>Copy the miniglx folder from 7.1-prerelease to 7.0.3.
You may also extract GLUT to 7.0.3 version at this step. 
</p>

<p>Edit linux-solo.conf at /conf directory, just only compile the
graphics driver you need, delete the unwanted drivers names from the
list(some drivers are causing problems...)
</p>
<pre>
   while(build==0)
   {
     make linux-solo

     There will be some missing header files, copy them from 7.1-prerelease
   }
d74 4
a77 9
</li><li>lib/*_dri_so - DRI drivers
</li><li>lib/miniglx.conf - sample MiniGLX config file
</li><li>progs/miniglx/* - several MiniGLX sample programs
</li></ul>

To install these files into appropriate locations in system:
<pre>
   make install
</pre>
a78 8
Now your openGL libraries are copied to /usr/local/lib and
miniglx.conf is copied to /etc. You may copy them to /usr/lib and
overwrite your old GL libraries. Or you may export following variable:

<pre>
   export LIBGL_DRIVERS_PATH=/usr/local/lib
</pre>
<br>
d85 1
a85 1
the console. Following command shuts down the x window and also the multi user support.
a86 3
<pre>
   init 1
</pre>
d88 2
a89 4
<p>Also you may define the runlevel as 1 in "/etc/inittab". Your system
will always start in single user mode and without x-window with this
option set.
</p><h2>3.1 Load Kernel Modules</h2>
d103 2
a104 1
<pre>   modprobe agpgart            # the AGP GART module
d112 2
a113 1
<pre>   modprobe agpgart            # the AGP GART module
d121 2
a122 1
<pre>   modprobe agpgart            # the AGP GART module
d130 2
a131 1
<pre>   modprobe agpgart            # the AGP GART module
d139 2
a140 1
<pre>   ls -l /dev/agpgart /dev/fb* /dev/dri
d151 1
a151 1
review/edit /etc/miniglx.conf.
d158 3
a160 2
<p></p>
<pre>   /sbin/lspci:
d183 2
a184 1
<pre>   ./sample_server &amp;
d190 2
a191 1
<pre>   ./miniglxtest
d202 1
a202 1
<br>
d211 2
a212 1
<pre>   [miniglx] failed to probe chipset
d226 2
a227 1
OpenGL/Mesa is interfaced to fbdev via the MiniGLX interface.
d243 1
a243 1
See the GL/miniglx.h header file for details.
a244 1

@


