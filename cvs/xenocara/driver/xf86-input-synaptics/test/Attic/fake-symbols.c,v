head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.05.17.17.18.21;	author shadchin;	state dead;
branches;
next	1.5;

1.5
date	2013.06.02.18.17.24;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.12.18.59.42;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.01.12.18.45;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.23.16.53.49;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.10.12.04.30;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xf86-input-synaptics 1.8.0.

ok matthieu@@, tested claudio@@
@
text
@#include "fake-symbols.h"

_X_EXPORT int
xf86ReadSerial(int fd, void *buf, int count)
{
    return 0;
}

_X_EXPORT int
xf86WriteSerial(int fd, const void *buf, int count)
{
    return 0;
}

_X_EXPORT int
xf86CloseSerial(int fd)
{
    return 0;
}

_X_EXPORT int
xf86WaitForInput(int fd, int timeout)
{
    return 0;
}

_X_EXPORT int
xf86OpenSerial(XF86OptionPtr options)
{
    return 0;
}

_X_EXPORT int
xf86SetSerialSpeed(int fd, int speed)
{
    return 0;
}

_X_EXPORT XF86OptionPtr
xf86ReplaceIntOption(XF86OptionPtr optlist, const char *name, const int val)
{
    return NULL;
}

_X_EXPORT char *
xf86SetStrOption(XF86OptionPtr optlist, const char *name, const char *deflt)
{
    return NULL;
}

_X_EXPORT int
xf86SetBoolOption(XF86OptionPtr optlist, const char *name, int deflt)
{
    return 0;
}

_X_EXPORT XF86OptionPtr
xf86AddNewOption(XF86OptionPtr head, const char *name, const char *val)
{
    return NULL;
}

_X_EXPORT const char *
xf86FindOptionValue(XF86OptionPtr options, const char *name)
{
    return NULL;
}

_X_EXPORT char *
xf86OptionName(XF86OptionPtr opt)
{
    return NULL;
}

_X_EXPORT char *
xf86OptionValue(XF86OptionPtr opt)
{
    return NULL;
}

_X_EXPORT int
xf86NameCmp(const char *s1, const char *s2)
{
    return 0;
}

_X_EXPORT void
xf86AddEnabledDevice(InputInfoPtr pInfo)
{
    return;
}

_X_EXPORT void
xf86RemoveEnabledDevice(InputInfoPtr pInfo)
{
    return;
}

_X_EXPORT Atom
XIGetKnownProperty(char *name)
{
    return None;
}

_X_EXPORT void
xf86AddInputDriver(InputDriverPtr driver, pointer module, int flags)
{
    return;
}

_X_EXPORT int
xf86ScaleAxis(int Cx, int to_max, int to_min, int from_max, int from_min)
{
    int X;
    int64_t to_width = to_max - to_min;
    int64_t from_width = from_max - from_min;

    if (from_width) {
        X = (int) (((to_width * (Cx - from_min)) / from_width) + to_min);
    }
    else {
        X = 0;
        /*ErrorF ("Divide by Zero in xf86ScaleAxis\n"); */
    }

    if (X > to_max)
        X = to_max;
    if (X < to_min)
        X = to_min;

    return X;
}

_X_EXPORT void
DeleteInputDeviceRequest(DeviceIntPtr pDev)
{
    return;
}

_X_EXPORT void
FreeInputAttributes(InputAttributes * attrs)
{
    return;
}

_X_EXPORT void
xf86PostButtonEvent(DeviceIntPtr device,
                    int is_absolute,
                    int button,
                    int is_down, int first_valuator, int num_valuators, ...)
{
    return;
}

_X_EXPORT int
Xasprintf(char **ret, const char *format, ...)
{
    return 0;
}

_X_EXPORT int
XISetDevicePropertyDeletable(DeviceIntPtr dev, Atom property, Bool deletable)
{
    return 0;
}

_X_EXPORT InputInfoPtr
xf86FirstLocalDevice(void)
{
    return NULL;
}

_X_EXPORT void
xf86DeleteInput(InputInfoPtr pInp, int flags)
{
    return;
}

_X_EXPORT XF86OptionPtr
xf86OptionListDuplicate(XF86OptionPtr options)
{
    return NULL;
}

_X_EXPORT Bool
InitButtonClassDeviceStruct(DeviceIntPtr dev, int numButtons, Atom *labels,
                            CARD8 *map)
{
    return FALSE;
}

_X_EXPORT void
InitValuatorAxisStruct(DeviceIntPtr dev, int axnum, Atom label, int minval,
                       int maxval, int resolution, int min_res, int max_res,
                       int mode)
{
    return;
}

_X_EXPORT void
xf86PostKeyboardEvent(DeviceIntPtr device, unsigned int key_code, int is_down)
{
    return;
}

_X_EXPORT int
xf86SetIntOption(XF86OptionPtr optlist, const char *name, int deflt)
{
    return 0;
}

_X_EXPORT void
xf86PostButtonEventP(DeviceIntPtr device,
                     int is_absolute,
                     int button,
                     int is_down, int first_valuator, int num_valuators,
                     const int *valuators)
{
    return;
}

_X_EXPORT Bool
InitPtrFeedbackClassDeviceStruct(DeviceIntPtr dev, PtrCtrlProcPtr controlProc)
{
    return FALSE;
}

_X_EXPORT int
XIChangeDeviceProperty(DeviceIntPtr dev, Atom property, Atom type,
                       int format, int mode, unsigned long len,
                       XF86OptionPtr value, Bool sendevent)
{
    return 0;
}

_X_EXPORT CARD32
GetTimeInMillis(void)
{
    return 0;
}

_X_EXPORT int
NewInputDeviceRequest(InputOption *options,
                      InputAttributes * attrs,
                      DeviceIntPtr *pdev)
{
    return 0;
}

_X_EXPORT Bool
InitLedFeedbackClassDeviceStruct(DeviceIntPtr dev, LedCtrlProcPtr controlProc)
{
    return FALSE;
}

_X_EXPORT InputAttributes *
DuplicateInputAttributes(InputAttributes * attrs)
{
    return NULL;
}

_X_EXPORT int
ValidAtom(Atom atom)
{
    return None;
}

_X_EXPORT Bool
InitKeyboardDeviceStruct(DeviceIntPtr dev, XkbRMLVOSet * rmlvo,
                         BellProcPtr bell_func, KbdCtrlProcPtr ctrl_func)
{
    return FALSE;
}

_X_EXPORT long
XIRegisterPropertyHandler(DeviceIntPtr dev,
                          int (*SetProperty) (DeviceIntPtr dev,
                                              Atom property,
                                              XIPropertyValuePtr prop,
                                              BOOL checkonly),
                          int (*GetProperty) (DeviceIntPtr dev,
                                              Atom property),
                          int (*DeleteProperty) (DeviceIntPtr dev,
                                                 Atom property))
{
    return 0;
}

_X_EXPORT int
InitProximityClassDeviceStruct(DeviceIntPtr dev)
{
    return 0;
}

_X_EXPORT void
xf86Msg(MessageType type, const char *format, ...)
{
    return;
}

_X_EXPORT void
xf86MsgVerb(MessageType type, int verb, const char *format, ...)
{
    return;
}

_X_EXPORT void
xf86IDrvMsg(InputInfoPtr dev, MessageType type, const char *format, ...)
{
    return;
}

_X_EXPORT void
LogMessageVerbSigSafe(MessageType type, int verb, const char *format, ...)
{
    return;
}

_X_EXPORT void
xf86PostMotionEventP(DeviceIntPtr device,
                     int is_absolute, int first_valuator, int num_valuators,
                     const int *valuators)
{
    return;
}

_X_EXPORT Bool
InitValuatorClassDeviceStruct(DeviceIntPtr dev, int numAxes, Atom *labels,
                              int numMotionEvents, int mode)
{
    return FALSE;
}

_X_EXPORT XF86OptionPtr
xf86ReplaceStrOption(XF86OptionPtr optlist, const char *name, const char *val)
{
    return NULL;
}

_X_EXPORT XF86OptionPtr
xf86NextOption(XF86OptionPtr list)
{
    return NULL;
}

_X_EXPORT int
XIGetDeviceProperty(DeviceIntPtr dev, Atom property, XIPropertyValuePtr *value)
{
    return 0;
}

_X_EXPORT Atom
MakeAtom(const char *string, unsigned len, Bool makeit)
{
    return None;
}

_X_EXPORT int
GetMotionHistorySize(void)
{
    return 0;
}

_X_EXPORT void
xf86PostProximityEventP(DeviceIntPtr device,
                        int is_in, int first_valuator, int num_valuators,
                        const int *valuators)
{
    return;
}

_X_EXPORT Bool
InitFocusClassDeviceStruct(DeviceIntPtr dev)
{
    return FALSE;
}

void
xf86ProcessCommonOptions(InputInfoPtr pInfo, XF86OptionPtr list)
{
}

void
xf86CollectInputOptions(InputInfoPtr pInfo,
                        const char **defaultOpts)
{
}

InputInfoPtr
xf86AllocateInput(void)
{
    return NULL;
}

ClientPtr serverClient;

Bool
QueueWorkProc(Bool (*function)
              (ClientPtr /* pClient */ , pointer /* closure */ ),
              ClientPtr client, pointer closure)
{
    return FALSE;
}

_X_EXPORT ValuatorMask *
valuator_mask_new(int num_valuators)
{
    return NULL;
}

_X_EXPORT void
valuator_mask_free(ValuatorMask **mask)
{
}

_X_EXPORT int
valuator_mask_get(const ValuatorMask *mask, int valuator)
{
    return 0;
}

_X_EXPORT void
valuator_mask_set(ValuatorMask *mask, int valuator, int data)
{
}

extern _X_EXPORT void
valuator_mask_unset(ValuatorMask *mask, int bit)
{
}

_X_EXPORT int
valuator_mask_num_valuators(const ValuatorMask *mask)
{
    return 0;
}

_X_EXPORT void
valuator_mask_zero(ValuatorMask *mask)
{
}

_X_EXPORT void
valuator_mask_copy(ValuatorMask *dest, const ValuatorMask *src)
{
}

_X_EXPORT void
xf86PostTouchEvent(DeviceIntPtr dev, uint32_t touchid,
                   uint16_t type, uint32_t flags, const ValuatorMask *mask)
{
}
@


1.5
log
@Update to xf86-input-synaptics 1.7.1.

ok mpi@@ jcs@@ matthieu@@
@
text
@@


1.4
log
@Update to xf86-input-synaptics 1.6.1

ok matthieu@@
@
text
@d3 1
a3 2
_X_EXPORT
    int
d28 1
a28 1
xf86OpenSerial(OPTTYPE options)
d39 2
a40 2
_X_EXPORT OPTTYPE
xf86ReplaceIntOption(OPTTYPE optlist, const char *name, const int val)
d46 1
a46 1
xf86SetStrOption(OPTTYPE optlist, const char *name, CONST char *deflt)
d52 1
a52 1
xf86SetBoolOption(OPTTYPE optlist, const char *name, int deflt)
d57 2
a58 2
_X_EXPORT OPTTYPE
xf86AddNewOption(OPTTYPE head, const char *name, const char *val)
d63 2
a64 2
_X_EXPORT CONST char *
xf86FindOptionValue(OPTTYPE options, const char *name)
d70 1
a70 1
xf86OptionName(OPTTYPE opt)
d76 1
a76 1
xf86OptionValue(OPTTYPE opt)
a86 6
_X_EXPORT char *
xf86CheckStrOption(OPTTYPE optlist, const char *name, char *deflt)
{
    return NULL;
}

a139 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 11
a144 1
#endif
d179 2
a180 2
_X_EXPORT OPTTYPE
xf86OptionListDuplicate(OPTTYPE options)
d207 1
a207 1
xf86SetIntOption(OPTTYPE optlist, const char *name, int deflt)
d217 1
a217 4
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
                     const
#endif
                     int *valuators)
d231 1
a231 1
                       OPTTYPE value, Bool sendevent)
a243 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 11
a244 1
#endif
a255 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 11
a260 1
#endif
d314 6
d322 1
a322 4
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
                     const
#endif
                     int *valuators)
d334 2
a335 2
_X_EXPORT OPTTYPE
xf86ReplaceStrOption(OPTTYPE optlist, const char *name, const char *val)
d340 2
a341 2
_X_EXPORT OPTTYPE
xf86NextOption(OPTTYPE list)
d367 1
a367 4
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
                        const
#endif
                        int *valuators)
a377 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 12
d379 1
a379 1
xf86ProcessCommonOptions(InputInfoPtr pInfo, OPTTYPE list)
d385 1
a385 1
                        const char **defaultOpts, OPTTYPE extraOpts)
d390 1
a390 1
xf86AllocateInput(InputDriverPtr drv, int flags)
a394 2
#endif

a404 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 12
a446 1
#endif
a447 1
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 16
a452 1
#endif
@


1.3
log
@Update to xf86-input-synaptics 1.5.2.

ok matthieu@@
@
text
@d4 2
a5 1
int xf86ReadSerial (int fd, void *buf, int count)
a9 1

d11 1
a11 1
xf86WriteSerial (int fd, const void *buf, int count)
d17 1
a17 1
xf86CloseSerial (int fd)
d23 1
a23 1
xf86WaitForInput (int fd, int timeout)
d29 1
a29 1
xf86OpenSerial (OPTTYPE options)
d35 1
a35 1
xf86SetSerialSpeed (int fd, int speed)
d63 1
d119 1
a119 5
xf86ScaleAxis(int	Cx,
              int	to_max,
              int	to_min,
              int	from_max,
              int	from_min )
d126 1
a126 1
	X = (int)(((to_width * (Cx - from_min)) / from_width) + to_min);
d129 2
a130 2
	X = 0;
        /*ErrorF ("Divide by Zero in xf86ScaleAxis\n");*/
d134 1
a134 1
	X = to_max;
d136 1
a136 1
	X = to_min;
a140 1

a146 1

d149 1
a149 1
FreeInputAttributes(InputAttributes *attrs)
d156 4
a159 7
xf86PostButtonEvent(DeviceIntPtr	device,
                    int			is_absolute,
                    int			button,
                    int			is_down,
                    int			first_valuator,
                    int			num_valuators,
                    ...)
d165 1
a165 1
Xasprintf(char ** ret, const char * format, ...)
a169 1

a175 1

a181 1

d195 1
a195 1
InitButtonClassDeviceStruct(DeviceIntPtr dev, int numButtons, Atom* labels,
d202 3
a204 2
InitValuatorAxisStruct(DeviceIntPtr dev, int axnum, Atom label, int minval, int maxval,
		       int resolution, int min_res, int max_res, int mode)
d210 1
a210 3
xf86PostKeyboardEvent(DeviceIntPtr      device,
                      unsigned int      key_code,
                      int               is_down)
d222 4
a225 6
xf86PostButtonEventP(DeviceIntPtr	device,
                     int		is_absolute,
                     int		button,
                     int		is_down,
                     int		first_valuator,
                     int		num_valuators,
d229 1
a229 1
                           int		*valuators)
d241 3
a243 3
XIChangeDeviceProperty (DeviceIntPtr dev, Atom property, Atom type,
                        int format, int mode, unsigned long len,
                        OPTTYPE value, Bool sendevent)
d249 1
a249 1
GetTimeInMillis (void)
a253 1

d255 1
a255 1
NewInputDeviceRequest (InputOption *options,
d257 1
a257 1
                       InputAttributes *attrs,
d259 1
a259 1
                       DeviceIntPtr *pdev)
a263 1

d265 1
a265 1
InitLedFeedbackClassDeviceStruct (DeviceIntPtr dev, LedCtrlProcPtr controlProc)
a269 1

d271 2
a272 2
_X_EXPORT InputAttributes*
DuplicateInputAttributes(InputAttributes *attrs)
d285 1
a285 1
InitKeyboardDeviceStruct(DeviceIntPtr dev, XkbRMLVOSet *rmlvo,
d292 1
a292 1
XIRegisterPropertyHandler(DeviceIntPtr         dev,
a310 1

a328 1

d330 2
a331 4
xf86PostMotionEventP(DeviceIntPtr	device,
                    int			is_absolute,
                    int			first_valuator,
                    int			num_valuators,
d333 1
a333 1
                    const
d335 1
a335 1
                          int		*valuators)
a339 1

a346 1

d348 1
a348 1
xf86ReplaceStrOption(OPTTYPE optlist, const char *name, const char* val)
a352 1

a358 1

d360 1
a360 1
XIGetDeviceProperty (DeviceIntPtr dev, Atom property, XIPropertyValuePtr *value)
a364 1

a370 1

a376 1

d378 2
a379 4
xf86PostProximityEventP(DeviceIntPtr	device,
                        int		is_in,
                        int		first_valuator,
                        int		num_valuators,
d383 1
a383 1
                           int		*valuators)
a387 1

d402 1
a402 2
                        const char **defaultOpts,
                        OPTTYPE extraOpts)
d406 2
a407 1
InputInfoPtr xf86AllocateInput(InputDriverPtr drv, int flags)
d416 4
a419 3
Bool QueueWorkProc (
    Bool (*function)(ClientPtr /* pClient */, pointer /* closure */),
    ClientPtr client, pointer closure)
d423 53
@


1.2
log
@Update to xf86-input-synaptics 1.5.0.
ok mpi@@, matthieu@@
@
text
@d29 1
a29 1
xf86OpenSerial (pointer options)
d40 2
a41 2
_X_EXPORT pointer
xf86ReplaceIntOption(pointer optlist, const char *name, const int val)
d47 1
a47 1
xf86SetStrOption(pointer optlist, const char *name, char *deflt)
d53 1
a53 1
xf86SetBoolOption(pointer optlist, const char *name, int deflt)
d58 2
a59 2
_X_EXPORT pointer
xf86AddNewOption(pointer head, const char *name, const char *val)
d63 2
a64 2
_X_EXPORT char *
xf86FindOptionValue(pointer options, const char *name)
d70 1
a70 1
xf86OptionName(pointer opt)
d76 1
a76 1
xf86OptionValue(pointer opt)
d88 1
a88 1
xf86CheckStrOption(pointer optlist, const char *name, char *deflt)
d199 2
a200 2
_X_EXPORT pointer
xf86OptionListDuplicate(pointer options)
d228 1
a228 1
xf86SetIntOption(pointer optlist, const char *name, int deflt)
d257 1
a257 1
                        pointer value, Bool sendevent)
d370 2
a371 2
_X_EXPORT pointer
xf86ReplaceStrOption(pointer optlist, const char *name, const char* val)
d377 2
a378 2
_X_EXPORT pointer
xf86NextOption(pointer list)
d427 1
a427 1
xf86ProcessCommonOptions(InputInfoPtr pInfo, pointer list)
d434 1
a434 1
                        pointer extraOpts)
@


1.1
log
@Add support wscons (upstream + implementation)

ok matthieu@@
@
text
@d341 6
@

