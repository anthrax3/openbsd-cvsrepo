head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.2
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	shadchin_2011/home/xenocara/driver/xf86-input-synaptics04:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.01.22.09.54.53;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	CjjEXS1IfivpYe4R;

1.12
date	2015.12.17.06.04.21;	author shadchin;	state Exp;
branches;
next	1.11;
commitid	LCFuHNeMgbArQZM3;

1.11
date	2015.04.11.16.08.42;	author shadchin;	state Exp;
branches;
next	1.10;
commitid	FrUqGb4Ug8crCVhk;

1.10
date	2015.01.24.17.43.59;	author shadchin;	state Exp;
branches;
next	1.9;
commitid	K2hMOP8BdtHA1Vvi;

1.9
date	2014.05.17.17.18.21;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.09.20.05.46;	author shadchin;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.02.18.17.24;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.30.13.31.04;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.12.18.59.42;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.01.12.18.45;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.23.16.53.49;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.12.04.30;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.09.08.38.40;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.09.08.38.40;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to xf86-input-synaptics 1.9.0
@
text
@/*
 * Copyright © 2004-2007 Peter Osterlund
 * Copyright © 2008-2012 Red Hat, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies
 * and that both that copyright notice and this permission notice
 * appear in supporting documentation, and that the name of Red Hat
 * not be used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.  Red
 * Hat makes no representations about the suitability of this software
 * for any purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
 * NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Authors:
 *      Peter Osterlund (petero2@@telia.com)
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <xorg-server.h>
#include <xserver-properties.h>
#include "eventcomm.h"
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "synproto.h"
#include "synapticsstr.h"
#include <xf86.h>
#include <libevdev/libevdev.h>

#ifndef INPUT_PROP_BUTTONPAD
#define INPUT_PROP_BUTTONPAD 0x02
#endif
#ifndef INPUT_PROP_SEMI_MT
#define INPUT_PROP_SEMI_MT 0x03
#endif
#ifndef INPUT_PROP_TOPBUTTONPAD
#define INPUT_PROP_TOPBUTTONPAD 0x04
#endif
#ifndef ABS_MT_TOOL_Y
#define ABS_MT_TOOL_Y 0x3d
#endif

#define SYSCALL(call) while (((call) == -1) && (errno == EINTR))

#define LONG_BITS (sizeof(long) * 8)
#define NBITS(x) (((x) + LONG_BITS - 1) / LONG_BITS)
#define OFF(x)   ((x) % LONG_BITS)
#define LONG(x)  ((x) / LONG_BITS)
#define TEST_BIT(bit, array) ((array[LONG(bit)] >> OFF(bit)) & 1)

#define ABS_MT_MIN ABS_MT_SLOT
#define ABS_MT_MAX ABS_MT_TOOL_Y
#define ABS_MT_CNT (ABS_MT_MAX - ABS_MT_MIN + 1)

/**
 * Protocol-specific data.
 */
struct eventcomm_proto_data {
    /**
     * Do we need to grab the event device?
     * Note that in the current flow, this variable is always false and
     * exists for readability of the code.
     */
    BOOL need_grab;
    int st_to_mt_offset[2];
    double st_to_mt_scale[2];
    int axis_map[ABS_MT_CNT];
    int cur_slot;
    ValuatorMask **last_mt_vals;
    int num_touches;

    struct libevdev *evdev;
    enum libevdev_read_flag read_flag;

    int have_monotonic_clock;
};

#ifdef HAVE_LIBEVDEV_DEVICE_LOG_FUNCS
static void
libevdev_log_func(const struct libevdev *dev,
                  enum libevdev_log_priority priority,
                  void *data,
                  const char *file, int line, const char *func,
                  const char *format, va_list args)
_X_ATTRIBUTE_PRINTF(7, 0);

static void
libevdev_log_func(const struct libevdev *dev,
                  enum libevdev_log_priority priority,
                  void *data,
                  const char *file, int line, const char *func,
                  const char *format, va_list args)
{
    int verbosity;

    switch(priority) {
        case LIBEVDEV_LOG_ERROR: verbosity = 0; break;
        case LIBEVDEV_LOG_INFO: verbosity = 4; break;
        case LIBEVDEV_LOG_DEBUG:
        default:
            verbosity = 10;
            break;
    }

    LogVMessageVerbSigSafe(X_NOTICE, verbosity, format, args);
}
#endif

struct eventcomm_proto_data *
EventProtoDataAlloc(int fd)
{
    struct eventcomm_proto_data *proto_data;
    int rc;


    proto_data = calloc(1, sizeof(struct eventcomm_proto_data));
    if (!proto_data)
        return NULL;

    proto_data->st_to_mt_scale[0] = 1;
    proto_data->st_to_mt_scale[1] = 1;

    proto_data->evdev = libevdev_new();
    if (!proto_data->evdev) {
        rc = -1;
        goto out;
    }

#ifdef HAVE_LIBEVDEV_DEVICE_LOG_FUNCS
    libevdev_set_device_log_function(proto_data->evdev, libevdev_log_func,
                                     LIBEVDEV_LOG_DEBUG, NULL);
#endif

    rc = libevdev_set_fd(proto_data->evdev, fd);
    if (rc < 0) {
        goto out;
    }

    proto_data->read_flag = LIBEVDEV_READ_FLAG_NORMAL;

out:
    if (rc < 0) {
        if (proto_data && proto_data->evdev)
            libevdev_free(proto_data->evdev);
        free(proto_data);
        proto_data = NULL;
    }

    return proto_data;
}

static void
UninitializeTouch(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data =
        (struct eventcomm_proto_data *) priv->proto_data;

    if (!priv->has_touch)
        return;

    if (proto_data->last_mt_vals) {
        int i;

        for (i = 0; i < priv->num_slots; i++)
            valuator_mask_free(&proto_data->last_mt_vals[i]);
        free(proto_data->last_mt_vals);
        proto_data->last_mt_vals = NULL;
    }

    proto_data->num_touches = 0;
}

static void
InitializeTouch(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data =
        (struct eventcomm_proto_data *) priv->proto_data;
    int i;

    if (!priv->has_touch)
        return;

    proto_data->cur_slot = libevdev_get_current_slot(proto_data->evdev);
    proto_data->num_touches = 0;

    proto_data->last_mt_vals = calloc(priv->num_slots, sizeof(ValuatorMask *));
    if (!proto_data->last_mt_vals) {
        xf86IDrvMsg(pInfo, X_WARNING,
                    "failed to allocate MT last values mask array\n");
        UninitializeTouch(pInfo);
        return;
    }

    for (i = 0; i < priv->num_slots; i++) {
        int j;

        proto_data->last_mt_vals[i] = valuator_mask_new(4 + priv->num_mt_axes);
        if (!proto_data->last_mt_vals[i]) {
            xf86IDrvMsg(pInfo, X_WARNING,
                        "failed to allocate MT last values mask\n");
            UninitializeTouch(pInfo);
            return;
        }

        /* Axes 0-4 are for X, Y, and scrolling. num_mt_axes does not include X
         * and Y. */
        valuator_mask_set(proto_data->last_mt_vals[i], 0, 0);
        valuator_mask_set(proto_data->last_mt_vals[i], 1, 0);
        for (j = 0; j < priv->num_mt_axes; j++)
            valuator_mask_set(proto_data->last_mt_vals[i], 4 + j, 0);
    }
}

static Bool
EventDeviceOnHook(InputInfoPtr pInfo, SynapticsParameters * para)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data =
        (struct eventcomm_proto_data *) priv->proto_data;
    int ret;

    if (libevdev_get_fd(proto_data->evdev) != -1) {
        struct input_event ev;

        libevdev_change_fd(proto_data->evdev, pInfo->fd);

        /* re-sync libevdev's state, but we don't care about the actual
           events here */
        libevdev_next_event(proto_data->evdev, LIBEVDEV_READ_FLAG_FORCE_SYNC, &ev);
        while (libevdev_next_event(proto_data->evdev,
                    LIBEVDEV_READ_FLAG_SYNC, &ev) == LIBEVDEV_READ_STATUS_SYNC)
            ;

    } else
        libevdev_set_fd(proto_data->evdev, pInfo->fd);


    if (para->grab_event_device) {
        /* Try to grab the event device so that data don't leak to /dev/input/mice */

        ret = libevdev_grab(proto_data->evdev, LIBEVDEV_GRAB);
        if (ret < 0) {
            xf86IDrvMsg(pInfo, X_WARNING, "can't grab event device, errno=%d\n",
                        -ret);
            return FALSE;
        }
    }

    proto_data->need_grab = FALSE;

    ret = libevdev_set_clock_id(proto_data->evdev, CLOCK_MONOTONIC);
    proto_data->have_monotonic_clock = (ret == 0);

    InitializeTouch(pInfo);

    return TRUE;
}

static Bool
EventDeviceOffHook(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;

    UninitializeTouch(pInfo);
    libevdev_grab(proto_data->evdev, LIBEVDEV_UNGRAB);
    libevdev_set_log_function(NULL, NULL);
    libevdev_set_log_priority(LIBEVDEV_LOG_INFO); /* reset to default */

    return Success;
}

/**
 * Test if the device on the file descriptior is recognized as touchpad
 * device. Required bits for touchpad recognition are:
 * - ABS_X + ABS_Y for absolute axes
 * - ABS_PRESSURE or BTN_TOUCH
 * - BTN_TOOL_FINGER
 * - BTN_TOOL_PEN is _not_ set
 *
 * @@param evdev Libevdev handle
 *
 * @@return TRUE if the device is a touchpad or FALSE otherwise.
 */
static Bool
event_query_is_touchpad(struct libevdev *evdev)
{
    /* Check for ABS_X, ABS_Y, ABS_PRESSURE and BTN_TOOL_FINGER */
    if (!libevdev_has_event_type(evdev, EV_SYN) ||
        !libevdev_has_event_type(evdev, EV_ABS) ||
        !libevdev_has_event_type(evdev, EV_KEY))
        return FALSE;

    if (!libevdev_has_event_code(evdev, EV_ABS, ABS_X) ||
        !libevdev_has_event_code(evdev, EV_ABS, ABS_Y))
        return FALSE;

    /* we expect touchpad either report raw pressure or touches */
    if (!libevdev_has_event_code(evdev, EV_KEY, BTN_TOUCH) &&
        !libevdev_has_event_code(evdev, EV_ABS, ABS_PRESSURE))
        return FALSE;

    /* all Synaptics-like touchpad report BTN_TOOL_FINGER */
    if (!libevdev_has_event_code(evdev, EV_KEY, BTN_TOOL_FINGER) ||
        libevdev_has_event_code(evdev, EV_ABS, BTN_TOOL_PEN)) /* Don't match wacom tablets */
        return FALSE;

    if (libevdev_has_event_code(evdev, EV_ABS, ABS_MT_SLOT)) {
        if (libevdev_get_num_slots(evdev) == -1)
            return FALSE; /* Ignore fake MT devices */

        if (!libevdev_has_event_code(evdev, EV_ABS, ABS_MT_POSITION_X) ||
            !libevdev_has_event_code(evdev, EV_ABS, ABS_MT_POSITION_Y))
            return FALSE;
    }

    return TRUE;
}

#define PRODUCT_ANY 0x0000

struct model_lookup_t {
    short vendor;
    short product_start;
    short product_end;
    enum TouchpadModel model;
};


static struct model_lookup_t model_lookup_table[] = {
    {0x0002, 0x0007, 0x0007, MODEL_SYNAPTICS},
    {0x0002, 0x0008, 0x0008, MODEL_ALPS},
    {0x05ac, PRODUCT_ANY, 0x222, MODEL_APPLETOUCH},
    {0x05ac, 0x223, 0x228, MODEL_UNIBODY_MACBOOK},
    {0x05ac, 0x229, 0x22b, MODEL_APPLETOUCH},
    {0x05ac, 0x22c, PRODUCT_ANY, MODEL_UNIBODY_MACBOOK},
    {0x0002, 0x000e, 0x000e, MODEL_ELANTECH},
    {0x0, 0x0, 0x0, 0x0}
};

/**
 * Check for the vendor/product id on the file descriptor and compare
 * with the built-in model LUT. This information is used in synaptics.c to
 * initialize model-specific dimensions.
 *
 * @@param fd The file descriptor to a event device.
 * @@param[out] model_out The type of touchpad model detected.
 *
 * @@return TRUE on success or FALSE otherwise.
 */
static Bool
event_query_model(struct libevdev *evdev, enum TouchpadModel *model_out,
                  unsigned short *vendor_id, unsigned short *product_id)
{
    int vendor, product;
    struct model_lookup_t *model_lookup;

    vendor = libevdev_get_id_vendor(evdev);
    product = libevdev_get_id_product(evdev);

    for (model_lookup = model_lookup_table; model_lookup->vendor;
         model_lookup++) {
        if (model_lookup->vendor == vendor &&
            (model_lookup->product_start == PRODUCT_ANY ||
             model_lookup->product_start <= product) &&
            (model_lookup->product_end == PRODUCT_ANY ||
             model_lookup->product_end >= product))
            *model_out = model_lookup->model;
    }

    *vendor_id = vendor;
    *product_id = product;

    return TRUE;
}

/**
 * Get absinfo information from the given file descriptor for the given
 * ABS_FOO code and store the information in min, max, fuzz and res.
 *
 * @@param fd File descriptor to an event device
 * @@param code Event code (e.g. ABS_X)
 * @@param[out] min Minimum axis range
 * @@param[out] max Maximum axis range
 * @@param[out] fuzz Fuzz of this axis. If NULL, fuzz is ignored.
 * @@param[out] res Axis resolution. If NULL or the current kernel does not
 * support the resolution field, res is ignored
 *
 * @@return Zero on success, or errno otherwise.
 */
static int
event_get_abs(struct libevdev *evdev, int code,
              int *min, int *max, int *fuzz, int *res)
{
    const struct input_absinfo *abs;

    abs = libevdev_get_abs_info(evdev, code);
    *min = abs->minimum;
    *max = abs->maximum;

    /* We dont trust a zero fuzz as it probably is just a lazy value */
    if (fuzz && abs->fuzz > 0)
        *fuzz = abs->fuzz;
#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,30)
    if (res)
        *res = abs->resolution;
#endif

    return 0;
}

/* Query device for axis ranges */
static void
event_query_axis_ranges(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    char buf[256] = { 0 };

    /* The kernel's fuzziness concept seems a bit weird, but it can more or
     * less be applied as hysteresis directly, i.e. no factor here. */
    event_get_abs(proto_data->evdev, ABS_X, &priv->minx, &priv->maxx,
                  &priv->synpara.hyst_x, &priv->resx);

    event_get_abs(proto_data->evdev, ABS_Y, &priv->miny, &priv->maxy,
                  &priv->synpara.hyst_y, &priv->resy);

    if (priv->minx == priv->maxx || priv->miny == priv->maxy) {
        xf86IDrvMsg(pInfo, X_ERROR, "Kernel bug: min == max on ABS_X/Y\n");
        return;
    }

    priv->has_pressure = libevdev_has_event_code(proto_data->evdev, EV_ABS, ABS_PRESSURE);
    priv->has_width = libevdev_has_event_code(proto_data->evdev, EV_ABS, ABS_TOOL_WIDTH);

    if (priv->has_pressure)
        event_get_abs(proto_data->evdev, ABS_PRESSURE, &priv->minp, &priv->maxp,
                      NULL, NULL);

    if (priv->has_width)
        event_get_abs(proto_data->evdev, ABS_TOOL_WIDTH,
                      &priv->minw, &priv->maxw, NULL, NULL);

    if (priv->has_touch) {
        int st_minx = priv->minx;
        int st_maxx = priv->maxx;
        int st_miny = priv->miny;
        int st_maxy = priv->maxy;

        event_get_abs(proto_data->evdev, ABS_MT_POSITION_X, &priv->minx,
                      &priv->maxx, &priv->synpara.hyst_x, &priv->resx);
        event_get_abs(proto_data->evdev, ABS_MT_POSITION_Y, &priv->miny,
                      &priv->maxy, &priv->synpara.hyst_y, &priv->resy);

        if (priv->minx == priv->maxx || priv->miny == priv->maxy) {
            xf86IDrvMsg(pInfo, X_ERROR, "Kernel bug: min == max on ABS_MT_POSITION_X/Y\n");
            return;
        }

        proto_data->st_to_mt_offset[0] = priv->minx - st_minx;
        proto_data->st_to_mt_scale[0] =
            (priv->maxx - priv->minx) / (st_maxx - st_minx);
        proto_data->st_to_mt_offset[1] = priv->miny - st_miny;
        proto_data->st_to_mt_scale[1] =
            (priv->maxy - priv->miny) / (st_maxy - st_miny);
    }

    priv->has_left = libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_LEFT);
    priv->has_right = libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_RIGHT);
    priv->has_middle = libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_MIDDLE);
    priv->has_double = libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_TOOL_DOUBLETAP);
    priv->has_triple = libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_TOOL_TRIPLETAP);

    if (libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_0) ||
        libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_1) ||
        libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_2) ||
        libevdev_has_event_code(proto_data->evdev, EV_KEY, BTN_3))
        priv->has_scrollbuttons = 1;

    /* Now print the device information */
    xf86IDrvMsg(pInfo, X_PROBED, "x-axis range %d - %d (res %d)\n",
                priv->minx, priv->maxx, priv->resx);
    xf86IDrvMsg(pInfo, X_PROBED, "y-axis range %d - %d (res %d)\n",
                priv->miny, priv->maxy, priv->resy);
    if (priv->has_pressure)
        xf86IDrvMsg(pInfo, X_PROBED, "pressure range %d - %d\n",
                    priv->minp, priv->maxp);
    else
        xf86IDrvMsg(pInfo, X_INFO,
                    "device does not report pressure, will use touch data.\n");
    if (priv->has_width)
        xf86IDrvMsg(pInfo, X_PROBED, "finger width range %d - %d\n",
                    priv->minw, priv->maxw);
    else
        xf86IDrvMsg(pInfo, X_INFO, "device does not report finger width.\n");

    if (priv->has_left)
        strcat(buf, " left");
    if (priv->has_right)
        strcat(buf, " right");
    if (priv->has_middle)
        strcat(buf, " middle");
    if (priv->has_double)
        strcat(buf, " double");
    if (priv->has_triple)
        strcat(buf, " triple");
    if (priv->has_scrollbuttons)
        strcat(buf, " scroll-buttons");

    xf86IDrvMsg(pInfo, X_PROBED, "buttons:%s\n", buf);
}

static Bool
EventQueryHardware(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;

    if (!event_query_is_touchpad(proto_data->evdev))
        return FALSE;

    xf86IDrvMsg(pInfo, X_PROBED, "touchpad found\n");

    return TRUE;
}

static Bool
SynapticsReadEvent(InputInfoPtr pInfo, struct input_event *ev)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    int rc;
    static struct timeval last_event_time;

    rc = libevdev_next_event(proto_data->evdev, proto_data->read_flag, ev);
    if (rc < 0) {
        if (rc != -EAGAIN) {
            LogMessageVerbSigSafe(X_ERROR, 0, "%s: Read error %d\n", pInfo->name,
                    errno);
        } else if (proto_data->read_flag == LIBEVDEV_READ_FLAG_SYNC) {
            proto_data->read_flag = LIBEVDEV_READ_FLAG_NORMAL;
            return SynapticsReadEvent(pInfo, ev);
        }

        return FALSE;
    }

    /* SYN_DROPPED received in normal mode. Create a normal EV_SYN
       so we process what's in the queue atm, then ensure we sync
       next time */
    if (rc == LIBEVDEV_READ_STATUS_SYNC &&
        proto_data->read_flag == LIBEVDEV_READ_FLAG_NORMAL) {
        proto_data->read_flag = LIBEVDEV_READ_FLAG_SYNC;
        ev->type = EV_SYN;
        ev->code = SYN_REPORT;
        ev->value = 0;
        ev->time = last_event_time;
    } else if (ev->type == EV_SYN)
        last_event_time = ev->time;

    return TRUE;
}

static Bool
EventTouchSlotPreviouslyOpen(SynapticsPrivate * priv, int slot)
{
    int i;

    for (i = 0; i < priv->num_active_touches; i++)
        if (priv->open_slots[i] == slot)
            return TRUE;

    return FALSE;
}

static void
EventProcessTouchEvent(InputInfoPtr pInfo, struct SynapticsHwState *hw,
                       struct input_event *ev)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;

    if (!priv->has_touch)
        return;

    if (ev->code == ABS_MT_SLOT) {
        proto_data->cur_slot = ev->value;
    }
    else {
        int slot_index = proto_data->cur_slot;

        if (slot_index < 0)
            return;

        if (hw->slot_state[slot_index] == SLOTSTATE_OPEN_EMPTY)
            hw->slot_state[slot_index] = SLOTSTATE_UPDATE;
        if (ev->code == ABS_MT_TRACKING_ID) {
            if (ev->value >= 0) {
                hw->slot_state[slot_index] = SLOTSTATE_OPEN;
                proto_data->num_touches++;
                valuator_mask_copy(hw->mt_mask[slot_index],
                                   proto_data->last_mt_vals[slot_index]);
            }
            else if (hw->slot_state[slot_index] != SLOTSTATE_EMPTY) {
                hw->slot_state[slot_index] = SLOTSTATE_CLOSE;
                proto_data->num_touches--;
            }

            /* When there are no fingers on the touchpad, set width and
             * pressure to zero as ABS_MT_TOUCH_MAJOR and ABS_MT_PRESSURE
             * are not zero when fingers are released. */
            if (proto_data->num_touches == 0) {
                hw->fingerWidth = 0;
                hw->z = 0;
            }
        }
        else {
            ValuatorMask *mask = proto_data->last_mt_vals[slot_index];
            int map = proto_data->axis_map[ev->code - ABS_MT_TOUCH_MAJOR];
            int last_val = valuator_mask_get(mask, map);

            valuator_mask_set(hw->mt_mask[slot_index], map, ev->value);
            if (EventTouchSlotPreviouslyOpen(priv, slot_index)) {
                if (ev->code == ABS_MT_POSITION_X)
                    hw->cumulative_dx += ev->value - last_val;
                else if (ev->code == ABS_MT_POSITION_Y)
                    hw->cumulative_dy += ev->value - last_val;
                else if (ev->code == ABS_MT_TOUCH_MAJOR &&
                         priv->has_mt_palm_detect)
                    hw->fingerWidth = ev->value;
                else if (ev->code == ABS_MT_PRESSURE &&
                         priv->has_mt_palm_detect)
                    hw->z = ev->value;
            }

            valuator_mask_set(mask, map, ev->value);
        }
    }
}

/**
 * Count the number of fingers based on the CommData information.
 * The CommData struct contains the event information based on previous
 * struct input_events, now we're just counting based on that.
 *
 * @@param comm Assembled information from previous events.
 * @@return The number of fingers currently set.
 */
static int
count_fingers(InputInfoPtr pInfo, const struct CommData *comm)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    int fingers = 0;

    if (comm->oneFinger)
        fingers = 1;
    else if (comm->twoFingers)
        fingers = 2;
    else if (comm->threeFingers)
        fingers = 3;

    if (priv->has_touch && proto_data->num_touches > fingers)
        fingers = proto_data->num_touches;

    return fingers;
}

static inline double
apply_st_scaling(struct eventcomm_proto_data *proto_data, int value, int axis)
{
    return value * proto_data->st_to_mt_scale[axis] +
        proto_data->st_to_mt_offset[axis];
}

Bool
EventReadHwState(InputInfoPtr pInfo,
                 struct CommData *comm, struct SynapticsHwState *hwRet)
{
    struct input_event ev;
    Bool v;
    struct SynapticsHwState *hw = comm->hwState;
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    SynapticsParameters *para = &priv->synpara;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    Bool sync_cumulative = FALSE;

    SynapticsResetTouchHwState(hw, FALSE);

    /* Reset cumulative values if buttons were not previously pressed and no
     * two-finger scrolling is ongoing, or no finger was previously present. */
    if (((!hw->left && !hw->right && !hw->middle) &&
        !(priv->vert_scroll_twofinger_on || priv->horiz_scroll_twofinger_on)) ||
        hw->z < para->finger_low) {
        hw->cumulative_dx = hw->x;
        hw->cumulative_dy = hw->y;
        sync_cumulative = TRUE;
    }

    while (SynapticsReadEvent(pInfo, &ev)) {
        switch (ev.type) {
        case EV_SYN:
            switch (ev.code) {
            case SYN_REPORT:
                hw->numFingers = count_fingers(pInfo, comm);
                if (proto_data->have_monotonic_clock)
                    hw->millis = 1000 * ev.time.tv_sec + ev.time.tv_usec / 1000;
                else
                    hw->millis = GetTimeInMillis();
                SynapticsCopyHwState(hwRet, hw);
                return TRUE;
            }
            break;
        case EV_KEY:
            /* ignore hw repeat events */
            if (ev.value > 1)
                break;

            v = (ev.value ? TRUE : FALSE);
            switch (ev.code) {
            case BTN_LEFT:
                hw->left = v;
                break;
            case BTN_RIGHT:
                hw->right = v;
                break;
            case BTN_MIDDLE:
                hw->middle = v;
                break;
            case BTN_FORWARD:
                hw->up = v;
                break;
            case BTN_BACK:
                hw->down = v;
                break;
            case BTN_0:
                hw->multi[0] = v;
                break;
            case BTN_1:
                hw->multi[1] = v;
                break;
            case BTN_2:
                hw->multi[2] = v;
                break;
            case BTN_3:
                hw->multi[3] = v;
                break;
            case BTN_4:
                hw->multi[4] = v;
                break;
            case BTN_5:
                hw->multi[5] = v;
                break;
            case BTN_6:
                hw->multi[6] = v;
                break;
            case BTN_7:
                hw->multi[7] = v;
                break;
            case BTN_TOOL_FINGER:
                comm->oneFinger = v;
                break;
            case BTN_TOOL_DOUBLETAP:
                comm->twoFingers = v;
                break;
            case BTN_TOOL_TRIPLETAP:
                comm->threeFingers = v;
                break;
            case BTN_TOUCH:
                if (!priv->has_pressure)
                    hw->z = v ? para->finger_high + 1 : 0;
                break;
            }
            break;
        case EV_ABS:
            if (ev.code < ABS_MT_SLOT) {
                switch (ev.code) {
                case ABS_X:
                    hw->x = apply_st_scaling(proto_data, ev.value, 0);
                    if (sync_cumulative)
                        hw->cumulative_dx = hw->x;
                    break;
                case ABS_Y:
                    hw->y = apply_st_scaling(proto_data, ev.value, 1);
                    if (sync_cumulative)
                        hw->cumulative_dy = hw->y;
                    break;
                case ABS_PRESSURE:
                    hw->z = ev.value;
                    break;
                case ABS_TOOL_WIDTH:
                    hw->fingerWidth = ev.value;
                    break;
                }
            }
            else
                EventProcessTouchEvent(pInfo, hw, &ev);
            break;
        }
    }
    return FALSE;
}

/* filter for the AutoDevProbe scandir on /dev/input */
static int
EventDevOnly(const struct dirent *dir)
{
    return strncmp(EVENT_DEV_NAME, dir->d_name, 5) == 0;
}

static void
event_query_touch(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    SynapticsParameters *para = &priv->synpara;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    struct libevdev *dev = proto_data->evdev;
    int axis;

    priv->max_touches = 0;
    priv->num_mt_axes = 0;

#ifdef EVIOCGPROP
    if (libevdev_has_property(dev, INPUT_PROP_SEMI_MT)) {
        xf86IDrvMsg(pInfo, X_INFO,
                    "ignoring touch events for semi-multitouch device\n");
        priv->has_semi_mt = TRUE;
    }

    if (libevdev_has_property(dev, INPUT_PROP_BUTTONPAD)) {
        xf86IDrvMsg(pInfo, X_INFO, "found clickpad property\n");
        para->clickpad = TRUE;
    }

    if (libevdev_has_property(dev, INPUT_PROP_TOPBUTTONPAD)) {
        xf86IDrvMsg(pInfo, X_INFO, "found top buttonpad property\n");
        para->has_secondary_buttons = TRUE;
    }
#endif


    if (libevdev_has_event_code(dev, EV_ABS, ABS_MT_SLOT)) {
        for (axis = ABS_MT_SLOT + 1; axis <= ABS_MT_MAX; axis++) {
            if (!libevdev_has_event_code(dev, EV_ABS, axis))
                continue;

            priv->has_touch = TRUE;

            /* X and Y axis info is handled by synaptics already and we don't
               expose the tracking ID */
            if (axis == ABS_MT_POSITION_X ||
                axis == ABS_MT_POSITION_Y ||
                axis == ABS_MT_TRACKING_ID)
                continue;

            priv->num_mt_axes++;
        }
    }

    if (priv->has_touch) {
        int axnum;

        static const char *labels[ABS_MT_MAX] = {
            AXIS_LABEL_PROP_ABS_MT_TOUCH_MAJOR,
            AXIS_LABEL_PROP_ABS_MT_TOUCH_MINOR,
            AXIS_LABEL_PROP_ABS_MT_WIDTH_MAJOR,
            AXIS_LABEL_PROP_ABS_MT_WIDTH_MINOR,
            AXIS_LABEL_PROP_ABS_MT_ORIENTATION,
            AXIS_LABEL_PROP_ABS_MT_POSITION_X,
            AXIS_LABEL_PROP_ABS_MT_POSITION_Y,
            AXIS_LABEL_PROP_ABS_MT_TOOL_TYPE,
            AXIS_LABEL_PROP_ABS_MT_BLOB_ID,
            AXIS_LABEL_PROP_ABS_MT_TRACKING_ID,
            AXIS_LABEL_PROP_ABS_MT_PRESSURE,
            AXIS_LABEL_PROP_ABS_MT_DISTANCE,
            AXIS_LABEL_PROP_ABS_MT_TOOL_X,
            AXIS_LABEL_PROP_ABS_MT_TOOL_Y,
        };

        priv->max_touches = libevdev_get_num_slots(dev);
        priv->touch_axes = malloc(priv->num_mt_axes *
                                  sizeof(SynapticsTouchAxisRec));
        if (!priv->touch_axes) {
            priv->has_touch = FALSE;
            return;
        }

        if (libevdev_has_event_code(dev, EV_ABS, ABS_MT_TOUCH_MAJOR) &&
            libevdev_has_event_code(dev, EV_ABS, ABS_MT_PRESSURE))
            priv->has_mt_palm_detect = TRUE;

        axnum = 0;
        for (axis = ABS_MT_SLOT + 1; axis <= ABS_MT_MAX; axis++) {
            int axis_idx = axis - ABS_MT_TOUCH_MAJOR;

            if (!libevdev_has_event_code(dev, EV_ABS, axis))
                continue;

            switch (axis) {
                /* X and Y axis info is handled by synaptics already, we just
                 * need to map the evdev codes to the valuator numbers */
                case ABS_MT_POSITION_X:
                    proto_data->axis_map[axis_idx] = 0;
                    break;

                case ABS_MT_POSITION_Y:
                    proto_data->axis_map[axis_idx] = 1;
                    break;

                    /* Skip tracking ID info */
                case ABS_MT_TRACKING_ID:
                    break;

                default:
                    if (axis_idx >= sizeof(labels)/sizeof(labels[0])) {
                        xf86IDrvMsg(pInfo, X_ERROR,
                                    "Axis %d out of label range. This is a bug\n",
                                    axis);
                        priv->touch_axes[axnum].label = NULL;
                    } else
                        priv->touch_axes[axnum].label = labels[axis_idx];
                    priv->touch_axes[axnum].min = libevdev_get_abs_minimum(dev, axis);
                    priv->touch_axes[axnum].max = libevdev_get_abs_maximum(dev, axis);
                    /* Kernel provides units/mm, X wants units/m */
                    priv->touch_axes[axnum].res = libevdev_get_abs_resolution(dev, axis) * 1000;
                    /* Valuators 0-3 are used for X, Y, and scrolling */
                    proto_data->axis_map[axis_idx] = 4 + axnum;
                    axnum++;
                    break;
            }
        }
    }
}

/**
 * Probe the open device for dimensions.
 */
static void
EventReadDevDimensions(InputInfoPtr pInfo)
{
    SynapticsPrivate *priv = (SynapticsPrivate *) pInfo->private;
    struct eventcomm_proto_data *proto_data = priv->proto_data;
    int i;

    proto_data = EventProtoDataAlloc(pInfo->fd);
    priv->proto_data = proto_data;

    for (i = 0; i < ABS_MT_CNT; i++)
        proto_data->axis_map[i] = -1;
    proto_data->cur_slot = -1;

    if (event_query_is_touchpad(proto_data->evdev)) {
        event_query_touch(pInfo);
        event_query_axis_ranges(pInfo);
    }
    event_query_model(proto_data->evdev, &priv->model, &priv->id_vendor,
                      &priv->id_product);

    xf86IDrvMsg(pInfo, X_PROBED, "Vendor %#hx Product %#hx\n",
                priv->id_vendor, priv->id_product);
}

static Bool
EventAutoDevProbe(InputInfoPtr pInfo, const char *device)
{
    /* We are trying to find the right eventX device or fall back to
       the psaux protocol and the given device from XF86Config */
    int i;
    Bool touchpad_found = FALSE;
    struct dirent **namelist;

    if (device) {
        int fd = -1;

        if (pInfo->flags & XI86_SERVER_FD)
            fd = pInfo->fd;
        else
            SYSCALL(fd = open(device, O_RDONLY));

        if (fd >= 0) {
            int rc;
            struct libevdev *evdev;

            rc = libevdev_new_from_fd(fd, &evdev);
            if (rc >= 0) {
                touchpad_found = event_query_is_touchpad(evdev);
                libevdev_free(evdev);
            }

            if (!(pInfo->flags & XI86_SERVER_FD))
                SYSCALL(close(fd));
        }

        /* if a device is set and not a touchpad (or already grabbed),
         * we must return FALSE.  Otherwise, we'll add a device that
         * wasn't requested for and repeat
         * f5687a6741a19ef3081e7fd83ac55f6df8bcd5c2. */
        return touchpad_found;
    }

    i = scandir(DEV_INPUT_EVENT, &namelist, EventDevOnly, alphasort);
    if (i < 0) {
        xf86IDrvMsg(pInfo, X_ERROR, "Couldn't open %s\n", DEV_INPUT_EVENT);
        return FALSE;
    }
    else if (i == 0) {
        xf86IDrvMsg(pInfo, X_ERROR,
                    "The /dev/input/event* device nodes seem to be missing\n");
        free(namelist);
        return FALSE;
    }

    while (i--) {
        char fname[64];
        int fd = -1;

        if (!touchpad_found) {
            int rc;
            struct libevdev *evdev;

            sprintf(fname, "%s/%s", DEV_INPUT_EVENT, namelist[i]->d_name);
            SYSCALL(fd = open(fname, O_RDONLY));
            if (fd < 0)
                continue;

            rc = libevdev_new_from_fd(fd, &evdev);
            if (rc >= 0) {
                touchpad_found = event_query_is_touchpad(evdev);
                libevdev_free(evdev);
                if (touchpad_found) {
                    xf86IDrvMsg(pInfo, X_PROBED, "auto-dev sets device to %s\n",
                                fname);
                    pInfo->options = xf86ReplaceStrOption(pInfo->options,
                                                          "Device",
                                                          fname);
                }
            }
            SYSCALL(close(fd));
        }
        free(namelist[i]);
    }

    free(namelist);

    if (!touchpad_found) {
        xf86IDrvMsg(pInfo, X_ERROR, "no synaptics event device found\n");
        return FALSE;
    }

    return TRUE;
}

struct SynapticsProtocolOperations event_proto_operations = {
    EventDeviceOnHook,
    EventDeviceOffHook,
    EventQueryHardware,
    EventReadHwState,
    EventAutoDevProbe,
    EventReadDevDimensions
};
@


1.12
log
@Update to xf86-input-synaptics 1.8.3.

ok matthieu@@
@
text
@d96 1
d98 2
a99 1
libevdev_log_func(enum libevdev_log_priority priority,
d103 1
a103 1
_X_ATTRIBUTE_PRINTF(6, 0);
d106 2
a107 1
libevdev_log_func(enum libevdev_log_priority priority,
d117 4
a120 1
        case LIBEVDEV_LOG_DEBUG: verbosity = 10; break;
d125 1
a125 8

static void
set_libevdev_log_handler(void)
{
                              /* be quiet, gcc *handwave* */
    libevdev_set_log_function((libevdev_log_func_t)libevdev_log_func, NULL);
    libevdev_set_log_priority(LIBEVDEV_LOG_DEBUG);
}
a132 1
    set_libevdev_log_handler();
d141 12
a152 1
    rc = libevdev_new_from_fd(fd, &proto_data->evdev);
d154 9
d165 1
a165 2
    } else
        proto_data->read_flag = LIBEVDEV_READ_FLAG_NORMAL;
a241 2
    set_libevdev_log_handler();

a301 2
 * @@param test_grab If true, test whether an EVIOCGRAB is possible on the
 * device. A failure to grab the event device returns in a failure.
d306 1
a306 1
event_query_is_touchpad(struct libevdev *evdev, BOOL test_grab)
a307 8
    int ret = FALSE, rc;

    if (test_grab) {
        rc = libevdev_grab(evdev, LIBEVDEV_GRAB);
        if (rc < 0)
            return FALSE;
    }

d312 1
a312 1
        goto unwind;
d316 1
a316 1
        goto unwind;
d321 1
a321 1
        goto unwind;
d326 1
a326 1
        goto unwind;
d330 1
a330 1
            goto unwind; /* Ignore fake MT devices */
d334 1
a334 1
            goto unwind;
d337 1
a337 7
    ret = TRUE;

 unwind:
    if (test_grab)
        libevdev_grab(evdev, LIBEVDEV_UNGRAB);

    return (ret == TRUE);
d539 1
a539 2
    if (!event_query_is_touchpad(proto_data->evdev,
                                 (proto_data) ? proto_data->need_grab : TRUE))
d628 8
d648 6
a707 2
    set_libevdev_log_handler();

d713 1
a713 1
        !(priv->vert_scroll_twofinger_on || priv->vert_scroll_twofinger_on)) ||
d735 4
d908 4
d972 1
a972 1
    if (event_query_is_touchpad(proto_data->evdev, proto_data->need_grab)) {
d1006 1
a1006 1
                touchpad_found = event_query_is_touchpad(evdev, TRUE);
d1012 1
d1014 5
a1018 6
            /* if a device is set and not a touchpad (or already grabbed),
             * we must return FALSE.  Otherwise, we'll add a device that
             * wasn't requested for and repeat
             * f5687a6741a19ef3081e7fd83ac55f6df8bcd5c2. */
            return touchpad_found;
        }
d1048 1
a1048 1
                touchpad_found = event_query_is_touchpad(evdev, TRUE);
@


1.11
log
@Update to xf86-input-synaptics 1.8.2.

ok matthieu@@
@
text
@d700 5
a704 3
    /* Reset cumulative values if buttons were not previously pressed,
     * or no finger was previously present. */
    if ((!hw->left && !hw->right && !hw->middle) || hw->z < para->finger_low) {
@


1.10
log
@Update to xf86-input-synaptics 1.8.1.

ok matthieu@@
@
text
@d323 9
d449 5
d475 5
@


1.9
log
@Update to xf86-input-synaptics 1.8.0.

ok matthieu@@, tested claudio@@
@
text
@d42 1
d92 2
d223 1
a244 1
        int ret;
d256 3
d695 4
a698 1
                hw->millis = 1000 * ev.time.tv_sec + ev.time.tv_usec / 1000;
d848 1
a848 1
        static const char *labels[] = {
d860 3
d896 7
a902 1
                    priv->touch_axes[axnum].label = labels[axis_idx];
@


1.8
log
@Update to xf86-input-synaptics 1.7.5.

ok matthieu@@
@
text
@d45 1
a45 1
#include <mtdev.h>
d53 6
d68 4
d84 1
a84 2
    struct mtdev *mtdev;
    int axis_map[MT_ABS_SIZE];
d88 3
a90 1
    int *tracking_ids;
d93 32
d126 1
a126 1
EventProtoDataAlloc(void)
d129 3
d140 7
a149 10
static int
last_mt_vals_slot(const SynapticsPrivate * priv)
{
    struct eventcomm_proto_data *proto_data =
        (struct eventcomm_proto_data *) priv->proto_data;
    int value = proto_data->cur_slot;

    return value < priv->num_slots ? value : -1;
}

a168 2
    mtdev_close_delete(proto_data->mtdev);
    proto_data->mtdev = NULL;
a169 3

    free(proto_data->tracking_ids);
    proto_data->tracking_ids = NULL;
d183 1
a183 8
    proto_data->mtdev = mtdev_new_open(pInfo->fd);
    if (!proto_data->mtdev) {
        xf86IDrvMsg(pInfo, X_WARNING,
                    "failed to create mtdev instance, ignoring touch events\n");
        return;
    }

    proto_data->cur_slot = proto_data->mtdev->caps.slot.value;
a193 7
    proto_data->tracking_ids = calloc(priv->num_slots, sizeof(int));
    if (!proto_data->tracking_ids) {
        xf86IDrvMsg(pInfo, X_WARNING, "failed to allocate tracking ID array\n");
        UninitializeTouch(pInfo);
        return;
    }

a196 2
        proto_data->tracking_ids[i] = -1;

d221 18
d243 1
a243 1
        SYSCALL(ret = ioctl(pInfo->fd, EVIOCGRAB, (pointer) 1));
d246 1
a246 1
                        errno);
d261 3
d265 3
a267 1
    SYSCALL(ioctl(pInfo->fd, EVIOCGRAB, (pointer) 0));
d280 1
a280 1
 * @@param fd The file descriptor to an event device.
d287 1
a287 1
event_query_is_touchpad(int fd, BOOL test_grab)
a289 3
    unsigned long evbits[NBITS(EV_MAX)] = { 0 };
    unsigned long absbits[NBITS(ABS_MAX)] = { 0 };
    unsigned long keybits[NBITS(KEY_MAX)] = { 0 };
d292 1
a292 1
        SYSCALL(rc = ioctl(fd, EVIOCGRAB, (pointer) 1));
d298 3
a300 6

    SYSCALL(rc = ioctl(fd, EVIOCGBIT(0, sizeof(evbits)), evbits));
    if (rc < 0)
        goto unwind;
    if (!TEST_BIT(EV_SYN, evbits) ||
        !TEST_BIT(EV_ABS, evbits) || !TEST_BIT(EV_KEY, evbits))
d303 2
a304 4
    SYSCALL(rc = ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbits)), absbits));
    if (rc < 0)
        goto unwind;
    if (!TEST_BIT(ABS_X, absbits) || !TEST_BIT(ABS_Y, absbits))
d307 3
a309 2
    SYSCALL(rc = ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybits)), keybits));
    if (rc < 0)
a311 3
    /* we expect touchpad either report raw pressure or touches */
    if (!TEST_BIT(ABS_PRESSURE, absbits) && !TEST_BIT(BTN_TOUCH, keybits))
        goto unwind;
d313 2
a314 1
    if (!TEST_BIT(BTN_TOOL_FINGER, keybits))
a315 2
    if (TEST_BIT(BTN_TOOL_PEN, keybits))
        goto unwind;            /* Don't match wacom tablets */
d321 1
a321 1
        SYSCALL(ioctl(fd, EVIOCGRAB, (pointer) 0));
d340 3
a342 1
    {0x05ac, 0x223, PRODUCT_ANY, MODEL_UNIBODY_MACBOOK},
d358 1
a358 1
event_query_model(int fd, enum TouchpadModel *model_out,
d361 1
a361 2
    struct input_id id;
    int rc;
d364 2
a365 3
    SYSCALL(rc = ioctl(fd, EVIOCGID, &id));
    if (rc < 0)
        return FALSE;
d369 1
a369 1
        if (model_lookup->vendor == id.vendor &&
d371 1
a371 1
             model_lookup->product_start <= id.product) &&
d373 1
a373 1
             model_lookup->product_end >= id.product))
d377 2
a378 2
    *vendor_id = id.vendor;
    *product_id = id.product;
d398 1
a398 1
event_get_abs(InputInfoPtr pInfo, int fd, int code,
d401 1
a401 2
    int rc;
    struct input_absinfo abs = { 0 };
d403 3
a405 6
    SYSCALL(rc = ioctl(fd, EVIOCGABS(code), &abs));
    if (rc < 0) {
        xf86IDrvMsg(pInfo, X_ERROR, "%s EVIOCGABS error on %d (%s)\n",
                    __func__, code, strerror(errno));
        return errno;
    }
a406 2
    *min = abs.minimum;
    *max = abs.maximum;
d408 2
a409 2
    if (fuzz && abs.fuzz > 0)
        *fuzz = abs.fuzz;
d412 1
a412 1
        *res = abs.resolution;
a423 2
    unsigned long absbits[NBITS(ABS_MAX)] = { 0 };
    unsigned long keybits[NBITS(KEY_MAX)] = { 0 };
a424 1
    int rc;
d428 1
a428 1
    event_get_abs(pInfo, pInfo->fd, ABS_X, &priv->minx, &priv->maxx,
d431 1
a431 1
    event_get_abs(pInfo, pInfo->fd, ABS_Y, &priv->miny, &priv->maxy,
d434 2
a435 10
    priv->has_pressure = FALSE;
    priv->has_width = FALSE;
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGBIT(EV_ABS, sizeof(absbits)), absbits));
    if (rc >= 0) {
        priv->has_pressure = (TEST_BIT(ABS_PRESSURE, absbits) != 0);
        priv->has_width = (TEST_BIT(ABS_TOOL_WIDTH, absbits) != 0);
    }
    else
        xf86IDrvMsg(pInfo, X_ERROR, "failed to query ABS bits (%s)\n",
                    strerror(errno));
d438 1
a438 1
        event_get_abs(pInfo, pInfo->fd, ABS_PRESSURE, &priv->minp, &priv->maxp,
d442 1
a442 1
        event_get_abs(pInfo, pInfo->fd, ABS_TOOL_WIDTH,
d451 1
a451 1
        event_get_abs(pInfo, pInfo->fd, ABS_MT_POSITION_X, &priv->minx,
d453 1
a453 1
        event_get_abs(pInfo, pInfo->fd, ABS_MT_POSITION_Y, &priv->miny,
d464 11
a474 13
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGBIT(EV_KEY, sizeof(keybits)), keybits));
    if (rc >= 0) {
        priv->has_left = (TEST_BIT(BTN_LEFT, keybits) != 0);
        priv->has_right = (TEST_BIT(BTN_RIGHT, keybits) != 0);
        priv->has_middle = (TEST_BIT(BTN_MIDDLE, keybits) != 0);
        priv->has_double = (TEST_BIT(BTN_TOOL_DOUBLETAP, keybits) != 0);
        priv->has_triple = (TEST_BIT(BTN_TOOL_TRIPLETAP, keybits) != 0);

        if ((TEST_BIT(BTN_0, keybits) != 0) ||
            (TEST_BIT(BTN_1, keybits) != 0) ||
            (TEST_BIT(BTN_2, keybits) != 0) || (TEST_BIT(BTN_3, keybits) != 0))
            priv->has_scrollbuttons = 1;
    }
d515 2
a516 2
    if (!event_query_is_touchpad
        (pInfo->fd, (proto_data) ? proto_data->need_grab : TRUE))
d529 2
a530 2
    int rc = TRUE;
    ssize_t len;
d532 3
a534 8
    if (proto_data->mtdev)
        len = mtdev_get(proto_data->mtdev, pInfo->fd, ev, 1) *
            sizeof(struct input_event);
    else
        len = read(pInfo->fd, ev, sizeof(*ev));
    if (len <= 0) {
        /* We use X_NONE here because it doesn't alloc */
        if (errno != EAGAIN)
d536 7
a542 2
                                  errno);
        rc = FALSE;
d544 15
a558 6
    else if (len % sizeof(*ev)) {
        LogMessageVerbSigSafe(X_ERROR, 0, "%s: Read error, invalid number of bytes.",
                              pInfo->name);
        rc = FALSE;
    }
    return rc;
d587 1
a587 1
        int slot_index = last_mt_vals_slot(priv);
d595 1
a595 18
            int old_tracking_id = proto_data->tracking_ids[slot_index];

            /* We don't have proper SYN_DROPPED handling in
               synaptics < 1.8. This is a poor man's version that covers the
               worst bug we're seeing: touch points starting/stopping during
               SYN_DROPPED. There can only be one touchpoint per slot,
               identified by the tracking ID. Make sure that we only ever
               have a single touch point open per slot.
             */
            if (ev->value != -1 && old_tracking_id != -1) {
                /* Our touch terminated during SYN_DROPPED, now we have a
                   new touch starting in the same slot but ours is still
                   open. Do nothing, just continue with the old touch */
            } else if (ev->value == -1 && old_tracking_id == -1) {
                /* A new touch started during SYN_DROPPED, now we have that
                   touch terminating. Do nothing, we don't have that touch
                   open */
            } else if (ev->value >= 0) {
a604 2

            proto_data->tracking_ids[slot_index] = ev->value;
d669 3
d675 3
a677 2
    /* Reset cumulative values if buttons were not previously pressed */
    if (!hw->left && !hw->right && !hw->middle) {
d680 1
d756 2
d761 2
d793 2
a794 4
    struct mtdev *mtdev;
    int i;
    int rc;
    uint8_t prop;
d800 1
a800 2
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGPROP(sizeof(prop)), &prop));
    if (rc >= 0 && BitIsOn(&prop, INPUT_PROP_SEMI_MT)) {
d806 1
a806 1
    if (rc >= 0 && BitIsOn(&prop, INPUT_PROP_BUTTONPAD)) {
d810 5
a816 6
    mtdev = mtdev_new_open(pInfo->fd);
    if (!mtdev) {
        xf86IDrvMsg(pInfo, X_WARNING,
                    "failed to open mtdev when querying touch capabilities\n");
        return;
    }
d818 5
a822 13
    for (i = 0; i < MT_ABS_SIZE; i++) {
        if (mtdev->caps.has_abs[i]) {
            switch (i) {
                /* X and Y axis info is handed by synaptics already */
            case ABS_MT_POSITION_X - ABS_MT_TOUCH_MAJOR:
            case ABS_MT_POSITION_Y - ABS_MT_TOUCH_MAJOR:
                /* Skip tracking ID info */
            case ABS_MT_TRACKING_ID - ABS_MT_TOUCH_MAJOR:
                break;
            default:
                priv->num_mt_axes++;
                break;
            }
d824 9
d853 1
a853 3
        if (mtdev->caps.slot.maximum > 0)
            priv->max_touches = mtdev->caps.slot.maximum + 1;

d858 1
a858 1
            goto out;
d862 11
a872 7
        for (i = 0; i < MT_ABS_SIZE; i++) {
            if (mtdev->caps.has_abs[i]) {
                switch (i) {
                    /* X and Y axis info is handed by synaptics already, we just
                     * need to map the evdev codes to the valuator numbers */
                case ABS_MT_POSITION_X - ABS_MT_TOUCH_MAJOR:
                    proto_data->axis_map[i] = 0;
d875 2
a876 2
                case ABS_MT_POSITION_Y - ABS_MT_TOUCH_MAJOR:
                    proto_data->axis_map[i] = 1;
d880 1
a880 1
                case ABS_MT_TRACKING_ID - ABS_MT_TOUCH_MAJOR:
d884 3
a886 3
                    priv->touch_axes[axnum].label = labels[i];
                    priv->touch_axes[axnum].min = mtdev->caps.abs[i].minimum;
                    priv->touch_axes[axnum].max = mtdev->caps.abs[i].maximum;
d888 1
a888 2
                    priv->touch_axes[axnum].res =
                        mtdev->caps.abs[i].resolution * 1000;
d890 1
a890 1
                    proto_data->axis_map[i] = 4 + axnum;
a892 1
                }
a895 3

 out:
    mtdev_close_delete(mtdev);
d908 1
a908 1
    proto_data = EventProtoDataAlloc();
d911 1
a911 1
    for (i = 0; i < MT_ABS_SIZE; i++)
d915 1
a915 1
    if (event_query_is_touchpad(pInfo->fd, proto_data->need_grab)) {
d919 1
a919 1
    event_query_model(pInfo->fd, &priv->model, &priv->id_vendor,
d938 5
a942 1
        SYSCALL(fd = open(device, O_RDONLY));
d944 11
a954 1
            touchpad_found = event_query_is_touchpad(fd, TRUE);
a955 1
            SYSCALL(close(fd));
d981 3
d989 11
a999 6
            if (event_query_is_touchpad(fd, TRUE)) {
                touchpad_found = TRUE;
                xf86IDrvMsg(pInfo, X_PROBED, "auto-dev sets device to %s\n",
                            fname);
                pInfo->options =
                    xf86ReplaceStrOption(pInfo->options, "Device", fname);
@


1.7
log
@Update to xf86-input-synaptics 1.7.1.

ok mpi@@ jcs@@ matthieu@@
@
text
@d79 1
d102 1
a102 1
    int value = proto_data->cur_slot - proto_data->mtdev->caps.slot.minimum;
d129 3
d163 7
d173 2
d222 1
d571 18
a588 1
            if (ev->value >= 0) {
d598 2
d843 1
a843 2
            priv->max_touches = mtdev->caps.slot.maximum -
                mtdev->caps.slot.minimum + 1;
@


1.6
log
@Update to xf86-input-synaptics 1.6.2

ok matthieu@@, mpi@@
@
text
@d3 1
d33 1
a42 1
#include "synaptics.h"
a44 1
#ifdef HAVE_MULTITOUCH
a45 1
#endif
a73 1
#ifdef HAVE_MULTITOUCH
a78 1
#endif
a95 1
#ifdef HAVE_MULTITOUCH
d125 1
a125 1
    mtdev_close(proto_data->mtdev);
a177 1
#endif
a199 1
#ifdef HAVE_MULTITOUCH
a200 1
#endif
a207 1
#ifdef HAVE_MULTITOUCH
a208 1
#endif
d278 3
a280 1
typedef struct {
d282 2
a283 1
    short product;
d285 1
a285 1
} model_lookup_t;
a286 1
#define PRODUCT_ANY 0x0000
d288 7
a294 6
static model_lookup_t model_lookup_table[] = {
    {0x0002, 0x0007, MODEL_SYNAPTICS},
    {0x0002, 0x0008, MODEL_ALPS},
    {0x05ac, PRODUCT_ANY, MODEL_APPLETOUCH},
    {0x0002, 0x000e, MODEL_ELANTECH},
    {0x0, 0x0, 0x0}
d313 1
a313 1
    model_lookup_t *model_lookup;
d322 4
a325 2
            (model_lookup->product == id.product ||
             model_lookup->product == PRODUCT_ANY))
a413 1
#if HAVE_MULTITOUCH
a431 1
#endif
d448 4
a451 4
    xf86IDrvMsg(pInfo, X_PROBED, "x-axis range %d - %d\n",
                priv->minx, priv->maxx);
    xf86IDrvMsg(pInfo, X_PROBED, "y-axis range %d - %d\n",
                priv->miny, priv->maxy);
a497 1
#ifdef HAVE_MULTITOUCH
a499 1
#endif
a502 1
#ifdef HAVE_MULTITOUCH
a506 1
#endif
d511 2
a512 2
            xf86MsgVerb(X_NONE, 0, "%s: Read error %s\n", pInfo->name,
                        strerror(errno));
d516 2
a517 2
        xf86MsgVerb(X_NONE, 0, "%s: Read error, invalid number of bytes.",
                    pInfo->name);
a522 1
#ifdef HAVE_MULTITOUCH
a533 1
#endif
a538 1
#ifdef HAVE_MULTITOUCH
d560 2
a561 8

                if (slot_index >= 0)
                    valuator_mask_copy(hw->mt_mask[slot_index],
                                       proto_data->last_mt_vals[slot_index]);
                else
                    xf86IDrvMsg(pInfo, X_WARNING,
                                "Attempted to copy values from out-of-range "
                                "slot, touch events may be incorrect.\n");
d569 1
d571 1
d574 6
a579 10
            if (slot_index >= 0) {
                ValuatorMask *mask = proto_data->last_mt_vals[slot_index];
                int last_val = valuator_mask_get(mask, map);

                if (EventTouchSlotPreviouslyOpen(priv, slot_index)) {
                    if (ev->code == ABS_MT_POSITION_X)
                        hw->cumulative_dx += ev->value - last_val;
                    else if (ev->code == ABS_MT_POSITION_Y)
                        hw->cumulative_dy += ev->value - last_val;
                }
d581 1
a581 2
                valuator_mask_set(mask, map, ev->value);
            }
a583 1
#endif
a607 1
#ifdef HAVE_MULTITOUCH
a609 1
#endif
a739 1
#ifdef HAVE_MULTITOUCH
d855 1
a855 1
    mtdev_close(mtdev);
a856 1
#endif
a865 2

#ifdef HAVE_MULTITOUCH
a866 1
#endif
a870 1
#ifdef HAVE_MULTITOUCH
a873 1
#endif
d875 1
a875 3
    if (event_query_is_touchpad
        (pInfo->fd, (proto_data) ? proto_data->need_grab : TRUE)) {
#ifdef HAVE_MULTITOUCH
a876 1
#endif
@


1.5
log
@Update to xf86-input-synaptics 1.6.1

ok matthieu@@
@
text
@d567 1
a567 2
        if (hw->slot_state[slot_index] == SLOTSTATE_EMPTY ||
            hw->slot_state[slot_index] == SLOTSTATE_OPEN_EMPTY)
d582 1
a582 1
            else {
@


1.4
log
@Update to xf86-input-synaptics 1.5.2.

ok matthieu@@
@
text
@d44 3
d48 6
d66 1
a66 2
struct eventcomm_proto_data
{
d73 9
d84 26
d111 1
a111 1
EventDeviceOnHook(InputInfoPtr pInfo, SynapticsParameters *para)
d113 6
a118 2
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
    struct eventcomm_proto_data *proto_data = (struct eventcomm_proto_data*)priv->proto_data;
d120 7
a126 3
    if (!proto_data) {
	proto_data = calloc(1, sizeof(struct eventcomm_proto_data));
	priv->proto_data = proto_data;
d129 62
d192 9
a200 7
	/* Try to grab the event device so that data don't leak to /dev/input/mice */
	int ret;
	SYSCALL(ret = ioctl(pInfo->fd, EVIOCGRAB, (pointer)1));
	if (ret < 0) {
	    xf86IDrvMsg(pInfo, X_WARNING, "can't grab event device, errno=%d\n",
			errno);
	}
d204 16
d240 3
a242 3
    unsigned long evbits[NBITS(EV_MAX)] = {0};
    unsigned long absbits[NBITS(ABS_MAX)] = {0};
    unsigned long keybits[NBITS(KEY_MAX)] = {0};
d244 2
a245 3
    if (test_grab)
    {
        SYSCALL(rc = ioctl(fd, EVIOCGRAB, (pointer)1));
d254 1
a254 1
	goto unwind;
d256 2
a257 3
	!TEST_BIT(EV_ABS, evbits) ||
	!TEST_BIT(EV_KEY, evbits))
	goto unwind;
d261 3
a263 4
	goto unwind;
    if (!TEST_BIT(ABS_X, absbits) ||
	!TEST_BIT(ABS_Y, absbits))
	goto unwind;
d267 1
a267 1
	goto unwind;
d271 1
a271 1
	goto unwind;
d274 1
a274 1
	goto unwind;
d276 1
a276 1
	goto unwind;			    /* Don't match wacom tablets */
d280 1
a280 1
unwind:
d282 1
a282 1
        SYSCALL(ioctl(fd, EVIOCGRAB, (pointer)0));
d288 3
a290 3
	short vendor;
	short product;
	enum TouchpadModel model;
d292 1
d296 5
a300 4
	{0x0002, 0x0007, MODEL_SYNAPTICS},
	{0x0002, 0x0008, MODEL_ALPS},
	{0x05ac, PRODUCT_ANY, MODEL_APPLETOUCH},
	{0x0, 0x0, 0x0}
d314 2
a315 1
event_query_model(int fd, enum TouchpadModel *model_out, unsigned short *vendor_id, unsigned short *product_id)
d325 5
a329 3
    for(model_lookup = model_lookup_table; model_lookup->vendor; model_lookup++) {
        if(model_lookup->vendor == id.vendor &&
           (model_lookup->product == id.product|| model_lookup->product == PRODUCT_ANY))
d358 1
a358 1
    struct input_absinfo abs =  {0};
d362 3
a364 3
	xf86IDrvMsg(pInfo, X_ERROR, "%s EVIOCGABS error on %d (%s)\n",
		    __func__, code, strerror(rc));
	return errno;
d371 1
a371 1
	*fuzz = abs.fuzz;
d374 1
a374 1
	*res = abs.resolution;
a379 1

d384 5
a388 5
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
    struct input_absinfo abs = {0};
    unsigned long absbits[NBITS(ABS_MAX)] = {0};
    unsigned long keybits[NBITS(KEY_MAX)] = {0};
    char buf[256] = {0};
d394 1
a394 1
		  &priv->synpara.hyst_x, &priv->resx);
d397 1
a397 1
		  &priv->synpara.hyst_y, &priv->resy);
d402 3
a404 4
    if (rc >= 0)
    {
	priv->has_pressure = (TEST_BIT(ABS_PRESSURE, absbits) != 0);
	priv->has_width = (TEST_BIT(ABS_TOOL_WIDTH, absbits) != 0);
d407 2
a408 1
	xf86IDrvMsg(pInfo, X_ERROR, "failed to query ABS bits (%s)\n", strerror(errno));
d411 2
a412 2
	event_get_abs(pInfo, pInfo->fd, ABS_PRESSURE, &priv->minp, &priv->maxp,
		      NULL, NULL);
d415 23
a437 3
	event_get_abs(pInfo, pInfo->fd, ABS_TOOL_WIDTH,
		      &priv->minw, &priv->maxw,
		      NULL, NULL);
d440 11
a450 13
    if (rc >= 0)
    {
	priv->has_left = (TEST_BIT(BTN_LEFT, keybits) != 0);
	priv->has_right = (TEST_BIT(BTN_RIGHT, keybits) != 0);
	priv->has_middle = (TEST_BIT(BTN_MIDDLE, keybits) != 0);
	priv->has_double = (TEST_BIT(BTN_TOOL_DOUBLETAP, keybits) != 0);
	priv->has_triple = (TEST_BIT(BTN_TOOL_TRIPLETAP, keybits) != 0);

	if ((TEST_BIT(BTN_0, keybits) != 0) ||
	    (TEST_BIT(BTN_1, keybits) != 0) ||
	    (TEST_BIT(BTN_2, keybits) != 0) ||
	    (TEST_BIT(BTN_3, keybits) != 0))
	    priv->has_scrollbuttons = 1;
d455 1
a455 1
		priv->minx, priv->maxx);
d457 1
a457 1
		priv->miny, priv->maxy);
d459 2
a460 2
	xf86IDrvMsg(pInfo, X_PROBED, "pressure range %d - %d\n",
		    priv->minp, priv->maxp);
d462 2
a463 2
	xf86IDrvMsg(pInfo, X_INFO,
		    "device does not report pressure, will use touch data.\n");
d465 2
a466 2
	xf86IDrvMsg(pInfo, X_PROBED, "finger width range %d - %d\n",
		    abs.minimum, abs.maximum);
d468 1
a468 2
	xf86IDrvMsg(pInfo, X_INFO,
		    "device does not report finger width.\n");
d471 1
a471 1
	strcat(buf, " left");
d473 1
a473 1
	strcat(buf, " right");
d475 1
a475 1
	strcat(buf, " middle");
d477 1
a477 1
	strcat(buf, " double");
d479 1
a479 1
	strcat(buf, " triple");
d481 1
a481 1
	strcat(buf, " scroll-buttons");
d489 1
a489 1
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
d492 3
a494 2
    if (!event_query_is_touchpad(pInfo->fd, (proto_data) ? proto_data->need_grab : TRUE))
	return FALSE;
d504 4
d511 8
a518 3
    len = read(pInfo->fd, ev, sizeof(*ev));
    if (len <= 0)
    {
d521 2
a522 1
            xf86MsgVerb(X_NONE, 0, "%s: Read error %s\n", pInfo->name, strerror(errno));
d524 4
a527 2
    } else if (len % sizeof(*ev)) {
        xf86MsgVerb(X_NONE, 0, "%s: Read error, invalid number of bytes.", pInfo->name);
d533 77
d618 2
a619 1
static int count_fingers(const struct CommData *comm)
d621 2
d626 1
a626 1
	fingers = 1;
d628 1
a628 1
	fingers = 2;
d630 6
a635 1
	fingers = 3;
d640 6
d649 1
a649 1
		 struct CommData *comm, struct SynapticsHwState *hwRet)
d653 2
a654 2
    struct SynapticsHwState *hw = &(comm->hwState);
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
d656 9
d667 88
a754 83
	switch (ev.type) {
	case EV_SYN:
	    switch (ev.code) {
	    case SYN_REPORT:
		hw->numFingers = count_fingers(comm);
		*hwRet = *hw;
		return TRUE;
	    }
	    break;
	case EV_KEY:
	    v = (ev.value ? TRUE : FALSE);
	    switch (ev.code) {
	    case BTN_LEFT:
		hw->left = v;
		break;
	    case BTN_RIGHT:
		hw->right = v;
		break;
	    case BTN_MIDDLE:
		hw->middle = v;
		break;
	    case BTN_FORWARD:
		hw->up = v;
		break;
	    case BTN_BACK:
		hw->down = v;
		break;
	    case BTN_0:
		hw->multi[0] = v;
		break;
	    case BTN_1:
		hw->multi[1] = v;
		break;
	    case BTN_2:
		hw->multi[2] = v;
		break;
	    case BTN_3:
		hw->multi[3] = v;
		break;
	    case BTN_4:
		hw->multi[4] = v;
		break;
	    case BTN_5:
		hw->multi[5] = v;
		break;
	    case BTN_6:
		hw->multi[6] = v;
		break;
	    case BTN_7:
		hw->multi[7] = v;
		break;
	    case BTN_TOOL_FINGER:
		comm->oneFinger = v;
		break;
	    case BTN_TOOL_DOUBLETAP:
		comm->twoFingers = v;
		break;
	    case BTN_TOOL_TRIPLETAP:
		comm->threeFingers = v;
		break;
	    case BTN_TOUCH:
		if (!priv->has_pressure)
			hw->z = v ? para->finger_high + 1 : 0;
		break;
	    }
	    break;
	case EV_ABS:
	    switch (ev.code) {
	    case ABS_X:
		hw->x = ev.value;
		break;
	    case ABS_Y:
		hw->y = ev.value;
		break;
	    case ABS_PRESSURE:
		hw->z = ev.value;
		break;
	    case ABS_TOOL_WIDTH:
		hw->fingerWidth = ev.value;
		break;
	    }
	    break;
	}
d760 4
a763 2
static int EventDevOnly(const struct dirent *dir) {
	return strncmp(EVENT_DEV_NAME, dir->d_name, 5) == 0;
d766 120
d892 1
a892 1
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
d895 22
a916 3
    if (event_query_is_touchpad(pInfo->fd, (proto_data) ? proto_data->need_grab : TRUE))
	event_query_axis_ranges(pInfo);
    event_query_model(pInfo->fd, &priv->model, &priv->id_vendor, &priv->id_product);
d932 5
a936 5
	int fd = -1;
	SYSCALL(fd = open(device, O_RDONLY));
	if (fd >= 0)
	{
	    touchpad_found = event_query_is_touchpad(fd, TRUE);
d938 1
a938 1
	    SYSCALL(close(fd));
d943 2
a944 2
	    return touchpad_found;
	}
d949 2
a950 2
		xf86IDrvMsg(pInfo, X_ERROR, "Couldn't open %s\n", DEV_INPUT_EVENT);
		return FALSE;
d953 4
a956 3
		xf86IDrvMsg(pInfo, X_ERROR, "The /dev/input/event* device nodes seem to be missing\n");
		free(namelist);
		return FALSE;
d960 2
a961 2
		char fname[64];
		int fd = -1;
d963 16
a978 16
		if (!touchpad_found) {
			sprintf(fname, "%s/%s", DEV_INPUT_EVENT, namelist[i]->d_name);
			SYSCALL(fd = open(fname, O_RDONLY));
			if (fd < 0)
				continue;

			if (event_query_is_touchpad(fd, TRUE)) {
				touchpad_found = TRUE;
			    xf86IDrvMsg(pInfo, X_PROBED, "auto-dev sets device to %s\n",
					fname);
			    pInfo->options =
			    	xf86ReplaceStrOption(pInfo->options, "Device", fname);
			}
			SYSCALL(close(fd));
		}
		free(namelist[i]);
d984 2
a985 2
	xf86IDrvMsg(pInfo, X_ERROR, "no synaptics event device found\n");
	return FALSE;
d993 1
a993 1
    NULL,
@


1.3
log
@Update to xf86-input-synaptics 1.5.0.
ok mpi@@, matthieu@@
@
text
@d50 3
d125 3
a127 3
    if (!BitIsOn(evbits, EV_SYN) ||
	!BitIsOn(evbits, EV_ABS) ||
	!BitIsOn(evbits, EV_KEY))
d133 2
a134 2
    if (!BitIsOn(absbits, ABS_X) ||
	!BitIsOn(absbits, ABS_Y))
d142 1
a142 1
    if (!BitIsOn(absbits, ABS_PRESSURE) && !BitIsOn(keybits, BTN_TOUCH))
d145 1
a145 1
    if (!BitIsOn(keybits, BTN_TOOL_FINGER))
d147 1
a147 1
    if (BitIsOn(keybits, BTN_TOOL_PEN))
d272 2
a273 2
	priv->has_pressure = (BitIsOn(absbits, ABS_PRESSURE) != 0);
	priv->has_width = (BitIsOn(absbits, ABS_TOOL_WIDTH) != 0);
d290 10
a299 10
	priv->has_left = (BitIsOn(keybits, BTN_LEFT) != 0);
	priv->has_right = (BitIsOn(keybits, BTN_RIGHT) != 0);
	priv->has_middle = (BitIsOn(keybits, BTN_MIDDLE) != 0);
	priv->has_double = (BitIsOn(keybits, BTN_TOOL_DOUBLETAP) != 0);
	priv->has_triple = (BitIsOn(keybits, BTN_TOOL_TRIPLETAP) != 0);

	if ((BitIsOn(keybits, BTN_0) != 0) ||
	    (BitIsOn(keybits, BTN_1) != 0) ||
	    (BitIsOn(keybits, BTN_2) != 0) ||
	    (BitIsOn(keybits, BTN_3) != 0))
@


1.2
log
@Add support wscons (upstream + implementation)

ok matthieu@@
@
text
@d80 2
a81 2
	    xf86Msg(X_WARNING, "%s can't grab event device, errno=%d\n",
		    pInfo->name, errno);
d181 1
a181 1
event_query_model(int fd, enum TouchpadModel *model_out)
d183 1
a183 1
    short id[4];
d187 1
a187 1
    SYSCALL(rc = ioctl(fd, EVIOCGID, id));
d192 2
a193 2
        if(model_lookup->vendor == id[ID_VENDOR] &&
           (model_lookup->product == id[ID_PRODUCT] || model_lookup->product == PRODUCT_ANY))
d197 3
d218 2
a219 1
event_get_abs(int fd, int code, int *min, int *max, int *fuzz, int *res)
d226 2
a227 2
	xf86Msg(X_ERROR, "%s: EVIOCGABS error on %d (%s)\n",
		__func__, code, strerror(rc));
d258 1
a258 1
    event_get_abs(pInfo->fd, ABS_X, &priv->minx, &priv->maxx,
d261 1
a261 1
    event_get_abs(pInfo->fd, ABS_Y, &priv->miny, &priv->maxy,
d273 1
a273 2
	xf86Msg(X_ERROR, "%s: failed to query ABS bits (%s)\n", pInfo->name,
		strerror(errno));
d276 1
a276 1
	event_get_abs(pInfo->fd, ABS_PRESSURE, &priv->minp, &priv->maxp,
d280 1
a280 1
	event_get_abs(pInfo->fd, ABS_TOOL_WIDTH,
d301 4
a304 4
    xf86Msg(X_PROBED, "%s: x-axis range %d - %d\n", pInfo->name,
	    priv->minx, priv->maxx);
    xf86Msg(X_PROBED, "%s: y-axis range %d - %d\n", pInfo->name,
	    priv->miny, priv->maxy);
d306 2
a307 2
	xf86Msg(X_PROBED, "%s: pressure range %d - %d\n", pInfo->name,
		priv->minp, priv->maxp);
d309 2
a310 3
	xf86Msg(X_INFO,
		"%s: device does not report pressure, will use touch data.\n",
		pInfo->name);
d312 2
a313 2
	xf86Msg(X_PROBED, "%s: finger width range %d - %d\n", pInfo->name,
		abs.minimum, abs.maximum);
d315 2
a316 2
	xf86Msg(X_INFO,
		"%s: device does not report finger width.\n", pInfo->name);
d331 1
a331 1
    xf86Msg(X_PROBED, "%s: buttons:%s\n", pInfo->name, buf);
d343 1
a343 1
    xf86Msg(X_PROBED, "%s: touchpad found\n", pInfo->name);
d505 4
a508 1
    event_query_model(pInfo->fd, &priv->model);
d538 1
a538 1
		xf86Msg(X_ERROR, "Couldn't open %s\n", DEV_INPUT_EVENT);
d542 1
a542 2
		xf86Msg(X_ERROR, "%s The /dev/input/event* device nodes seem to be missing\n",
				pInfo->name);
d559 2
a560 2
			    xf86Msg(X_PROBED, "%s auto-dev sets device to %s\n",
				    pInfo->name, fname);
d572 1
a572 1
	xf86Msg(X_ERROR, "%s no synaptics event device found\n", pInfo->name);
@


1.1
log
@Initial revision
@
text
@d50 13
a62 7
#define OFF(x)   ((x) % LONG_BITS)
#define LONG(x)  ((x) / LONG_BITS)
#define TEST_BIT(bit, array) ((array[LONG(bit)] >> OFF(bit)) & 1)

/*****************************************************************************
 *	Function Definitions
 ****************************************************************************/
d68 1
a68 1
    BOOL *need_grab;
d70 4
a73 4
    if (!priv->proto_data)
        priv->proto_data = calloc(1, sizeof(BOOL));

    need_grab = (BOOL*)priv->proto_data;
d85 1
a85 1
    *need_grab = FALSE;
d88 14
d103 1
a103 1
event_query_is_touchpad(int fd, BOOL grab)
d110 1
a110 1
    if (grab)
d122 3
a124 3
    if (!TEST_BIT(EV_SYN, evbits) ||
	!TEST_BIT(EV_ABS, evbits) ||
	!TEST_BIT(EV_KEY, evbits))
d130 2
a131 2
    if (!TEST_BIT(ABS_X, absbits) ||
	!TEST_BIT(ABS_Y, absbits))
d139 1
a139 1
    if (!TEST_BIT(ABS_PRESSURE, absbits) && !TEST_BIT(BTN_TOUCH, keybits))
d142 1
a142 1
    if (!TEST_BIT(BTN_TOOL_FINGER, keybits))
d144 1
a144 1
    if (TEST_BIT(BTN_TOOL_PEN, keybits))
d150 1
a150 1
    if (grab)
d170 12
a181 2
static void
event_query_info(InputInfoPtr pInfo)
a182 1
    SynapticsPrivate *priv = (SynapticsPrivate *)pInfo->private;
d187 1
a187 1
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGID, id));
d189 1
a189 1
        return;
d194 31
a224 1
            priv->model = model_lookup->model;
d226 12
d240 1
d249 1
a249 1
    char buf[256];
d252 4
a255 18
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGABS(ABS_X), &abs));
    if (rc >= 0)
    {
	xf86Msg(X_PROBED, "%s: x-axis range %d - %d\n", pInfo->name,
		abs.minimum, abs.maximum);
	priv->minx = abs.minimum;
	priv->maxx = abs.maximum;
	/* The kernel's fuzziness concept seems a bit weird, but it can more or
	 * less be applied as hysteresis directly, i.e. no factor here. Though,
	 * we don't trust a zero fuzz as it probably is just a lazy value. */
	if (abs.fuzz > 0)
	    priv->synpara.hyst_x = abs.fuzz;
#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,30)
	priv->resx = abs.resolution;
#endif
    } else
	xf86Msg(X_ERROR, "%s: failed to query axis range (%s)\n", pInfo->name,
		strerror(errno));
d257 2
a258 16
    SYSCALL(rc = ioctl(pInfo->fd, EVIOCGABS(ABS_Y), &abs));
    if (rc >= 0)
    {
	xf86Msg(X_PROBED, "%s: y-axis range %d - %d\n", pInfo->name,
		abs.minimum, abs.maximum);
	priv->miny = abs.minimum;
	priv->maxy = abs.maximum;
	/* don't trust a zero fuzz */
	if (abs.fuzz > 0)
	    priv->synpara.hyst_y = abs.fuzz;
#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,30)
	priv->resy = abs.resolution;
#endif
    } else
	xf86Msg(X_ERROR, "%s: failed to query axis range (%s)\n", pInfo->name,
		strerror(errno));
d265 2
a266 2
	priv->has_pressure = (TEST_BIT(ABS_PRESSURE, absbits) != 0);
	priv->has_width = (TEST_BIT(ABS_TOOL_WIDTH, absbits) != 0);
d273 2
a274 13
    {
	SYSCALL(rc = ioctl(pInfo->fd, EVIOCGABS(ABS_PRESSURE), &abs));
	if (rc >= 0)
	{
	    xf86Msg(X_PROBED, "%s: pressure range %d - %d\n", pInfo->name,
		    abs.minimum, abs.maximum);
	    priv->minp = abs.minimum;
	    priv->maxp = abs.maximum;
	}
    } else
	xf86Msg(X_INFO,
		"%s: device does not report pressure, will use touch data.\n",
		pInfo->name);
d277 3
a279 10
    {
	SYSCALL(rc = ioctl(pInfo->fd, EVIOCGABS(ABS_TOOL_WIDTH), &abs));
	if (rc >= 0)
	{
	    xf86Msg(X_PROBED, "%s: finger width range %d - %d\n", pInfo->name,
		    abs.minimum, abs.maximum);
	    priv->minw = abs.minimum;
	    priv->maxw = abs.maximum;
	}
    }
d284 10
a293 17
	buf[0] = 0;
	if ((priv->has_left = (TEST_BIT(BTN_LEFT, keybits) != 0)))
	   strcat(buf, " left");
	if ((priv->has_right = (TEST_BIT(BTN_RIGHT, keybits) != 0)))
	   strcat(buf, " right");
	if ((priv->has_middle = (TEST_BIT(BTN_MIDDLE, keybits) != 0)))
	   strcat(buf, " middle");
	if ((priv->has_double = (TEST_BIT(BTN_TOOL_DOUBLETAP, keybits) != 0)))
	   strcat(buf, " double");
	if ((priv->has_triple = (TEST_BIT(BTN_TOOL_TRIPLETAP, keybits) != 0)))
	   strcat(buf, " triple");

	if ((TEST_BIT(BTN_0, keybits) != 0) ||
	    (TEST_BIT(BTN_1, keybits) != 0) ||
	    (TEST_BIT(BTN_2, keybits) != 0) ||
	    (TEST_BIT(BTN_3, keybits) != 0))
	{
d295 33
a327 2
	    strcat(buf, " scroll-buttons");
	}
d329 1
a329 2
	xf86Msg(X_PROBED, "%s: buttons:%s\n", pInfo->name, buf);
    }
d336 1
a336 1
    BOOL *need_grab = (BOOL*)priv->proto_data;
d338 1
a338 1
    if (!event_query_is_touchpad(pInfo->fd, (need_grab) ? *need_grab : TRUE))
d366 24
a389 1
static Bool
a390 1
		 struct SynapticsProtocolOperations *proto_ops,
d404 1
a404 8
		if (comm->oneFinger)
		    hw->numFingers = 1;
		else if (comm->twoFingers)
		    hw->numFingers = 2;
		else if (comm->threeFingers)
		    hw->numFingers = 3;
		else
		    hw->numFingers = 0;
d408 1
d499 1
a499 1
    BOOL *need_grab = (BOOL*)priv->proto_data;
d501 1
a501 1
    if (event_query_is_touchpad(pInfo->fd, (need_grab) ? *need_grab : TRUE))
d503 1
a503 1
    event_query_info(pInfo);
d507 1
a507 1
EventAutoDevProbe(InputInfoPtr pInfo)
d515 16
a563 1
	free(namelist);
d565 7
a571 4
	if (!touchpad_found) {
		xf86Msg(X_ERROR, "%s no synaptics event device found\n", pInfo->name);
		return FALSE;
	}
@


1.1.1.1
log
@Import xf86-input-synaptics 1.4.0

ok matthieu@@
@
text
@@
