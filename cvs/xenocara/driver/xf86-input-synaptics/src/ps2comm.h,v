head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.12
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.10
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	shadchin_2011/home/xenocara/driver/xf86-input-synaptics04:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.01.24.17.43.59;	author shadchin;	state Exp;
branches;
next	1.4;
commitid	K2hMOP8BdtHA1Vvi;

1.4
date	2012.06.12.18.59.42;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.23.16.53.49;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.12.04.30;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.09.08.38.41;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.09.08.38.41;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-input-synaptics 1.8.1.

ok matthieu@@
@
text
@/*
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies
 * and that both that copyright notice and this permission notice
 * appear in supporting documentation, and that the name of Red Hat
 * not be used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.  Red
 * Hat makes no representations about the suitability of this software
 * for any purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
 * NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _PS2COMM_H_
#define _PS2COMM_H_

#include <xorg-server.h>

#include <unistd.h>
#include <sys/ioctl.h>
#include "xf86_OSproc.h"

/* acknowledge for commands and parameter */
#define PS2_ACK				0xFA
#define PS2_ERROR			0xFC

/* standard PS/2 commands */
#define PS2_CMD_RESET			0xFF
#define PS2_CMD_RESEND			0xFE
#define PS2_CMD_SET_DEFAULT		0xF6
#define PS2_CMD_DISABLE			0xF5
#define PS2_CMD_ENABLE			0xF4
#define PS2_CMD_SET_SAMPLE_RATE		0xF3
#define PS2_CMD_READ_DEVICE_TYPE	0xF2
#define PS2_CMD_SET_REMOTE_MODE		0xF0
#define PS2_CMD_SET_WRAP_MODE		0xEE
#define PS2_CMD_RESET_WRAP_MODE		0xEC
#define PS2_CMD_READ_DATA		0xEB
#define PS2_CMD_SET_STREAM_MODE		0xEA
#define PS2_CMD_STATUS_REQUEST		0xE9
#define PS2_CMD_SET_RESOLUTION		0xE8
#define PS2_CMD_SET_SCALING_2_1		0xE7
#define PS2_CMD_SET_SCALING_1_1		0xE6

/* synaptics modes */
#define SYN_BIT_ABSOLUTE_MODE		(1 << 7)
#define SYN_BIT_HIGH_RATE		(1 << 6)
#define SYN_BIT_SLEEP_MODE		(1 << 3)
#define SYN_BIT_DISABLE_GESTURE		(1 << 2)
#define SYN_BIT_W_MODE			(1 << 0)

/* synaptics model ID bits */
#define SYN_MODEL_ROT180(synhw)		((synhw)->model_id & (1 << 23))
#define SYN_MODEL_PORTRAIT(synhw)	((synhw)->model_id & (1 << 22))
#define SYN_MODEL_SENSOR(synhw)		(((synhw)->model_id >> 16) & 0x3f)
#define SYN_MODEL_HARDWARE(synhw)	(((synhw)->model_id >> 9) & 0x7f)
#define SYN_MODEL_NEWABS(synhw)		((synhw)->model_id & (1 << 7))
#define SYN_MODEL_PEN(synhw)		((synhw)->model_id & (1 << 6))
#define SYN_MODEL_SIMPLIC(synhw)	((synhw)->model_id & (1 << 5))
#define SYN_MODEL_GEOMETRY(synhw)	((synhw)->model_id & 0x0f)

/* synaptics capability bits */
#define SYN_CAP_EXTENDED(synhw)		((synhw)->capabilities & (1 << 23))
#define SYN_CAP_MIDDLE_BUTTON(synhw)	((synhw)->capabilities & (1 << 18))
#define SYN_CAP_PASSTHROUGH(synhw)	((synhw)->capabilities & (1 << 7))
#define SYN_CAP_SLEEP(synhw)		((synhw)->capabilities & (1 << 4))
#define SYN_CAP_FOUR_BUTTON(synhw)	((synhw)->capabilities & (1 << 3))
#define SYN_CAP_MULTIFINGER(synhw)	((synhw)->capabilities & (1 << 1))
#define SYN_CAP_PALMDETECT(synhw)	((synhw)->capabilities & (1 << 0))
#define SYN_CAP_VALID(synhw)		((((synhw)->capabilities & 0x00ff00) >> 8) == 0x47)
#define SYN_EXT_CAP_REQUESTS(synhw)	(((synhw)->capabilities & 0x700000) != 0)
#define SYN_CAP_MULTI_BUTTON_NO(synhw)	(((synhw)->ext_cap & 0x00f000) >> 12)

/* synaptics modes query bits */
#define SYN_MODE_ABSOLUTE(m)		((m) & (1 << 7))
#define SYN_MODE_RATE(m)		((m) & (1 << 6))
#define SYN_MODE_BAUD_SLEEP(m)		((m) & (1 << 3))
#define SYN_MODE_DISABLE_GESTURE(m)	((m) & (1 << 2))
#define SYN_MODE_PACKSIZE(m)		((m) & (1 << 1))
#define SYN_MODE_WMODE(m)		((m) & (1 << 0))
#define SYN_MODE_VALID(m)		(((m) & 0xffff00) == 0x3B47)

/* synaptics identify query bits */
#define SYN_ID_MODEL(synhw)		(((synhw)->identity >> 4) & 0x0f)
#define SYN_ID_MAJOR(synhw)		((synhw)->identity & 0x0f)
#define SYN_ID_MINOR(synhw)		(((synhw)->identity >> 16) & 0xff)
#define SYN_ID_IS_SYNAPTICS(synhw)	((((synhw)->identity >> 8) & 0xff) == 0x47)

typedef unsigned char byte;

struct PS2SynapticsHwInfo {
    unsigned int model_id;      /* Model-ID */
    unsigned int capabilities;  /* Capabilities */
    unsigned int ext_cap;       /* Extended Capabilities */
    unsigned int identity;      /* Identification */
};

Bool ps2_putbyte(int fd, byte b);
void ps2_print_ident(InputInfoPtr pInfo,
                     const struct PS2SynapticsHwInfo *synhw);
Bool PS2ReadHwStateProto(InputInfoPtr pInfo,
                         struct SynapticsProtocolOperations *proto_ops,
                         struct CommData *comm, struct SynapticsHwState *hwRet);

#endif                          /* _PS2COMM_H_ */
@


1.4
log
@Update to xf86-input-synaptics 1.6.1

ok matthieu@@
@
text
@d25 2
@


1.3
log
@Update to xf86-input-synaptics 1.5.0.
ok mpi@@, matthieu@@
@
text
@d30 1
a30 1
#define PS2_ACK 			0xFA
d59 1
a59 1
#define SYN_MODEL_ROT180(synhw) 	((synhw)->model_id & (1 << 23))
d77 1
a77 1
#define SYN_EXT_CAP_REQUESTS(synhw)	(((synhw)->capabilities & 0x700000) == 0x100000)
d98 4
a101 4
    unsigned int model_id;		/* Model-ID */
    unsigned int capabilities;		/* Capabilities */
    unsigned int ext_cap;		/* Extended Capabilities */
    unsigned int identity;		/* Identification */
d105 2
a106 1
void ps2_print_ident(InputInfoPtr pInfo, const struct PS2SynapticsHwInfo *synhw);
d108 2
a109 2
			struct SynapticsProtocolOperations *proto_ops,
			struct CommData *comm, struct SynapticsHwState *hwRet);
d111 1
a111 1
#endif /* _PS2COMM_H_ */
@


1.2
log
@Add support wscons (upstream + implementation)

ok matthieu@@
@
text
@d105 1
a105 1
void ps2_print_ident(const struct PS2SynapticsHwInfo *synhw);
@


1.1
log
@Initial revision
@
text
@d97 6
d105 4
a108 3

struct SynapticsHwInfo;
void ps2_print_ident(const struct SynapticsHwInfo *synhw);
@


1.1.1.1
log
@Import xf86-input-synaptics 1.4.0

ok matthieu@@
@
text
@@
