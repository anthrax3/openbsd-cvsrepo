head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	shadchin_2011/home/xenocara/driver/xf86-input-synaptics04:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.01.22.09.54.53;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	CjjEXS1IfivpYe4R;

1.7
date	2015.01.24.17.43.59;	author shadchin;	state Exp;
branches;
next	1.6;
commitid	K2hMOP8BdtHA1Vvi;

1.6
date	2014.09.27.17.37.32;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	5oQT2RakWIUIQefz;

1.5
date	2014.05.17.17.18.21;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.02.18.17.24;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.12.18.59.42;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.12.04.30;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.09.08.38.41;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.09.08.38.41;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xf86-input-synaptics 1.9.0
@
text
@/*
 * Copyright Â© 2004 Peter Osterlund
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies
 * and that both that copyright notice and this permission notice
 * appear in supporting documentation, and that the name of Red Hat
 * not be used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.  Red
 * Hat makes no representations about the suitability of this software
 * for any purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
 * NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Authors:
 *      Peter Osterlund (petero2@@telia.com)
 */

#ifndef _SYNPROTO_H_
#define _SYNPROTO_H_

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <xorg-server.h>

#include <unistd.h>
#include <sys/ioctl.h>
#include <xf86Xinput.h>
#include <xisb.h>

#ifndef XI86_SERVER_FD
#define XI86_SERVER_FD 0x20
#endif

struct _SynapticsPrivateRec;
typedef struct _SynapticsPrivateRec SynapticsPrivate;

enum SynapticsSlotState {
    SLOTSTATE_EMPTY = 0,        /* no slot in this cycle */
    SLOTSTATE_OPEN,             /* tracking ID received */
    SLOTSTATE_CLOSE,            /* tracking ID -1 received */
    SLOTSTATE_OPEN_EMPTY,       /* previously had tracking id, no events in this read cycle */
    SLOTSTATE_UPDATE,           /* had tracking id, other events in this cycle */
};

/* used to mark emulated hw button state */
#define BTN_EMULATED_FLAG 0x80

/*
 * A structure to describe the state of the touchpad hardware (buttons and pad)
 */
struct SynapticsHwState {
    CARD32 millis;              /* Timestamp in milliseconds */
    int x;                      /* X position of finger */
    int y;                      /* Y position of finger */
    int z;                      /* Finger pressure */
    int cumulative_dx;          /* Cumulative delta X for clickpad dragging */
    int cumulative_dy;          /* Cumulative delta Y for clickpad dragging */
    int numFingers;
    int fingerWidth;

    Bool left;
    Bool right;
    Bool up;
    Bool down;

    Bool multi[8];
    Bool middle;                /* Some ALPS touchpads have a middle button */

    int num_mt_mask;
    ValuatorMask **mt_mask;
    enum SynapticsSlotState *slot_state;
};

struct CommData {
    XISBuffer *buffer;
    unsigned char protoBuf[6];  /* Buffer for Packet */
    unsigned char lastByte;     /* Last read byte. Use for reset sequence detection. */
    int outOfSync;              /* How many consecutive incorrect packets we
                                   have received */
    int protoBufTail;

    /* Used for keeping track of partial HwState updates. */
    struct SynapticsHwState *hwState;
    Bool oneFinger;
    Bool twoFingers;
    Bool threeFingers;
};

struct _SynapticsParameters;

struct SynapticsProtocolOperations {
    Bool (*DeviceOnHook) (InputInfoPtr pInfo,
                          struct _SynapticsParameters * para);
    Bool (*DeviceOffHook) (InputInfoPtr pInfo);
    Bool (*QueryHardware) (InputInfoPtr pInfo);
    Bool (*ReadHwState) (InputInfoPtr pInfo,
                         struct CommData * comm,
                         struct SynapticsHwState * hwRet);
    Bool (*AutoDevProbe) (InputInfoPtr pInfo, const char *device);
    void (*ReadDevDimensions) (InputInfoPtr pInfo);
};

#ifdef BUILD_PS2COMM
extern struct SynapticsProtocolOperations psaux_proto_operations;
extern struct SynapticsProtocolOperations alps_proto_operations;
#endif                          /* BUILD_PS2COMM */
#ifdef BUILD_EVENTCOMM
extern struct SynapticsProtocolOperations event_proto_operations;
#endif                          /* BUILD_EVENTCOMM */
#ifdef BUILD_PSMCOMM
extern struct SynapticsProtocolOperations psm_proto_operations;
#endif                          /* BUILD_PSMCOMM */
#ifdef BUILD_WSCONSCOMM
extern struct SynapticsProtocolOperations wscons_proto_operations;
#endif                          /* BUILD_WSCONSCOMM */

extern struct SynapticsHwState *SynapticsHwStateAlloc(SynapticsPrivate * priv);
extern void SynapticsHwStateFree(struct SynapticsHwState **hw);
extern void SynapticsCopyHwState(struct SynapticsHwState *dst,
                                 const struct SynapticsHwState *src);
extern void SynapticsResetHwState(struct SynapticsHwState *hw);
extern void SynapticsResetTouchHwState(struct SynapticsHwState *hw,
                                       Bool set_slot_empty);

extern Bool SynapticsIsSoftButtonAreasValid(int *values);

#endif                          /* _SYNPROTO_H_ */
@


1.7
log
@Update to xf86-input-synaptics 1.8.1.

ok matthieu@@
@
text
@a37 1
#include <xf86.h>
@


1.6
log
@include <xf86.h> explicitely in preparation for xserver 1.16
@
text
@d34 2
@


1.5
log
@Update to xf86-input-synaptics 1.8.0.

ok matthieu@@, tested claudio@@
@
text
@d36 1
@


1.4
log
@Update to xf86-input-synaptics 1.7.1.

ok mpi@@ jcs@@ matthieu@@
@
text
@d39 4
d47 5
a51 5
    SLOTSTATE_EMPTY = 0,
    SLOTSTATE_OPEN,
    SLOTSTATE_CLOSE,
    SLOTSTATE_OPEN_EMPTY,
    SLOTSTATE_UPDATE,
@


1.3
log
@Update to xf86-input-synaptics 1.6.1

ok matthieu@@
@
text
@d30 4
a38 2
#include "config.h"

a73 1
#ifdef HAVE_MULTITOUCH
a76 1
#endif
d128 1
a128 1
                                       Bool force_empty);
@


1.2
log
@Add support wscons (upstream + implementation)

ok matthieu@@
@
text
@d35 16
d55 6
a60 4
    int millis;			/* Timestamp in milliseconds */
    int x;			/* X position of finger */
    int y;			/* Y position of finger */
    int z;			/* Finger pressure */
d70 7
a76 1
    Bool middle;		/* Some ALPS touchpads have a middle button */
d81 4
a84 4
    unsigned char protoBuf[6];		/* Buffer for Packet */
    unsigned char lastByte;		/* Last read byte. Use for reset sequence detection. */
    int outOfSync;			/* How many consecutive incorrect packets we
					   have received */
d88 1
a88 1
    struct SynapticsHwState hwState;
d97 9
a105 7
    void (*DeviceOnHook)(InputInfoPtr pInfo, struct _SynapticsParameters *para);
    void (*DeviceOffHook)(InputInfoPtr pInfo);
    Bool (*QueryHardware)(InputInfoPtr pInfo);
    Bool (*ReadHwState)(InputInfoPtr pInfo,
			struct CommData *comm, struct SynapticsHwState *hwRet);
    Bool (*AutoDevProbe)(InputInfoPtr pInfo, const char *device);
    void (*ReadDevDimensions)(InputInfoPtr pInfo);
d111 1
a111 1
#endif /* BUILD_PS2COMM */
d114 1
a114 1
#endif /* BUILD_EVENTCOMM */
d117 1
a117 1
#endif /* BUILD_PSMCOMM */
d120 11
a130 1
#endif /* BUILD_WSCONSCOMM */
d132 1
a132 1
#endif /* _SYNPROTO_H_ */
@


1.1
log
@Initial revision
@
text
@a69 11
enum SynapticsProtocol {
    SYN_PROTO_PSAUX,		/* Raw psaux device */
#ifdef BUILD_EVENTCOMM
    SYN_PROTO_EVENT,		/* Linux kernel event interface */
#endif /* BUILD_EVENTCOMM */
#ifdef BUILD_PSMCOMM
    SYN_PROTO_PSM,		/* FreeBSD psm driver */
#endif /* BUILD_PSMCOMM */
    SYN_PROTO_ALPS		/* ALPS touchpad protocol */
};

a70 2
struct SynapticsHwInfo;
struct CommData;
a76 1
			struct SynapticsProtocolOperations *proto_ops,
d78 1
a78 1
    Bool (*AutoDevProbe)(InputInfoPtr pInfo);
d82 1
d84 2
d92 3
a94 2
extern struct SynapticsProtocolOperations alps_proto_operations;

@


1.1.1.1
log
@Import xf86-input-synaptics 1.4.0

ok matthieu@@
@
text
@@
