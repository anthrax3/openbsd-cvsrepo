head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.2
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	shadchin_2011/home/xenocara/driver/xf86-input-synaptics04:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2017.01.22.09.54.53;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	CjjEXS1IfivpYe4R;

1.12
date	2015.12.17.06.04.21;	author shadchin;	state Exp;
branches;
next	1.11;
commitid	LCFuHNeMgbArQZM3;

1.11
date	2015.04.11.16.08.42;	author shadchin;	state Exp;
branches;
next	1.10;
commitid	FrUqGb4Ug8crCVhk;

1.10
date	2015.01.24.17.43.59;	author shadchin;	state Exp;
branches;
next	1.9;
commitid	K2hMOP8BdtHA1Vvi;

1.9
date	2014.05.17.17.18.21;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.09.20.05.46;	author shadchin;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.02.18.17.24;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.30.13.31.04;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.12.18.59.42;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.01.12.18.45;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.23.16.53.49;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.12.04.29;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.09.08.38.27;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.09.08.38.27;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to xf86-input-synaptics 1.9.0
@
text
@#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([xf86-input-synaptics],
        [1.9.0],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        [xf86-input-synaptics])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_AUX_DIR(.)

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Initialize libtool
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

# Initialize X.Org macros 1.13 or later for XORG_ENABLE_UNIT_TESTS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.13 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.13)
XORG_DEFAULT_OPTIONS
XORG_ENABLE_UNIT_TESTS

# Checks for libraries.
AC_CHECK_LIB([m], [rint])

# Store the list of server defined optional extensions in REQUIRED_MODULES
m4_ifndef([XORG_DRIVER_CHECK_EXT],
          [m4_fatal([must install xorg-server development files before running autoconf/autogen])])
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)

# Obtain compiler/linker options for the Synaptics driver dependencies
PKG_CHECK_MODULES(XORG, [inputproto >= 2.1.99.3] [xorg-server >= 1.12] xproto inputproto $REQUIRED_MODULES)

# X Server SDK location is required to install Synaptics header files
# This location is also relayed in the xorg-synaptics.pc file
sdkdir=`$PKG_CONFIG --variable=sdkdir xorg-server`
AC_SUBST([sdkdir])

# -----------------------------------------------------------------------------
#			Configuration options
# -----------------------------------------------------------------------------
# Define a configure option for an alternate input module directory
AC_ARG_WITH(xorg-module-dir,
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])
inputdir=${moduledir}/input
AC_SUBST(inputdir)

# Define a configure option for an alternate X Server configuration directory
sysconfigdir=`$PKG_CONFIG --variable=sysconfigdir xorg-server`
AC_ARG_WITH(xorg-conf-dir,
            AC_HELP_STRING([--with-xorg-conf-dir=DIR],
                           [Default xorg.conf.d directory [[default=from $PKG_CONFIG xorg-server]]]),
            [configdir="$withval"],
            [configdir="$sysconfigdir"])
AC_SUBST(configdir)
AM_CONDITIONAL(HAS_XORG_CONF_DIR, [test "x$sysconfigdir" != "x"])

# Define a configure option to enable code debugging
AC_ARG_ENABLE(debug, AS_HELP_STRING([--enable-debug],
                                    [Enable debugging (default: disabled)]),
                                    [DEBUGGING=$enableval], [DEBUGGING=no])
if test "x$DEBUGGING" = xyes; then
   AC_DEFINE(DEBUG, 1, [Enable debugging code])
fi
AM_CONDITIONAL(DEBUG, [test "x$DEBUGGING" = xyes])

# -----------------------------------------------------------------------------
#		Determine which backend, if any, to build
# -----------------------------------------------------------------------------
AC_MSG_CHECKING([which optional backends will be build])
case "${host}" in
*linux*)
	AC_MSG_RESULT([ps2comm alpscomm eventcomm])
	BUILD_PS2COMM="yes"
	BUILD_EVENTCOMM="yes"
	;;
*freebsd* | *netbsd* | *dragonfly*)
	AC_MSG_RESULT([ps2comm alpscomm psmcomm])
	BUILD_PS2COMM="yes"
	BUILD_PSMCOMM="yes"
	;;
*solaris* | *gnu*)
	AC_MSG_RESULT([ps2comm alpscomm])
	BUILD_PS2COMM="yes"
	;;
*openbsd*)
	AC_MSG_RESULT([wsconscomm])
	BUILD_WSCONSCOMM="yes"
	;;
*)
	AC_MSG_ERROR([Cannot find suitable backends for this platform.])
	;;
esac
if test "x$BUILD_EVENTCOMM" = xyes; then
    AC_DEFINE(BUILD_EVENTCOMM, 1, [Optional backend eventcomm enabled])
    PKG_CHECK_MODULES(LIBEVDEV, [libevdev >= 0.4])
    SAVE_LIBS="$LIBS"
    LIBS="$LIBEVDEV_LIBS"
    AC_CHECK_LIB(evdev, libevdev_set_device_log_function,
                      [AC_DEFINE(HAVE_LIBEVDEV_DEVICE_LOG_FUNCS, 1,
                       [libevdev supports per-device log functions])],
                       [])
    LIBS="$SAVE_LIBS"
fi
if test "x$BUILD_PSMCOMM" = xyes; then
    AC_DEFINE(BUILD_PSMCOMM, 1, [Optional backend psmcomm enabled])
fi
if test "x$BUILD_PS2COMM" = xyes; then
    AC_DEFINE(BUILD_PS2COMM, 1, [Optional backend ps2comm and alpscomm enabled])
fi
if test "x$BUILD_WSCONSCOMM" = xyes; then
    AC_DEFINE(BUILD_WSCONSCOMM, 1, [Optional backend wsconscomm enabled])
fi
AM_CONDITIONAL([BUILD_EVENTCOMM], [test "x${BUILD_EVENTCOMM}" = "xyes"])
AM_CONDITIONAL([BUILD_PSMCOMM], [test "x${BUILD_PSMCOMM}" = "xyes"])
AM_CONDITIONAL([BUILD_PS2COMM], [test "x${BUILD_PS2COMM}" = "xyes"])
AM_CONDITIONAL([BUILD_WSCONSCOMM], [test "x${BUILD_WSCONSCOMM}" = "xyes"])

# -----------------------------------------------------------------------------
#			Dependencies for synclient and syndaemon
# -----------------------------------------------------------------------------
# Obtain compiler/linker options for the Synaptics apps dependencies
PKG_CHECK_MODULES(XI, x11 inputproto [xi >= 1.2])

# The syndaemon program uses an optional XRecord extension implementation
# If libxtst >= 1.0.99 is installed, Cflags contains the path to record.h
# If recordproto < 1.13.99.1 is installed, Cflags contains the path to record.h
PKG_CHECK_MODULES(XTST, xtst recordproto, have_libxtst="yes", have_libxtst="no")
if test "x$have_libxtst" = "xyes" ; then
   # Header record.h may come from the xtst or recordproto package, or may be missing
   SAVE_CPPFLAGS="$CPPFLAGS"
   CPPFLAGS="$CPPFLAGS $XTST_CFLAGS"
   AC_CHECK_HEADERS([X11/extensions/record.h],,,[#include <X11/Xlib.h>])
   CPPFLAGS="$SAVE_CPPFLAGS"
fi
# -----------------------------------------------------------------------------

# Workaround overriding sdkdir to be able to create a tarball when user has no
# write permission in sdkdir. See DISTCHECK_CONFIGURE_FLAGS in Makefile.am
AC_ARG_WITH([sdkdir], [], [sdkdir="$withval"])

AC_CONFIG_FILES([Makefile
                src/Makefile
                man/Makefile
                tools/Makefile
                conf/Makefile
                include/Makefile
                xorg-synaptics.pc])
AC_OUTPUT

@


1.12
log
@Update to xf86-input-synaptics 1.8.3.

ok matthieu@@
@
text
@d26 1
a26 1
        [1.8.3],
d124 7
@


1.11
log
@Update to xf86-input-synaptics 1.8.2.

ok matthieu@@
@
text
@d26 1
a26 1
        [1.8.2],
@


1.10
log
@Update to xf86-input-synaptics 1.8.1.

ok matthieu@@
@
text
@d26 1
a26 1
        [1.8.1],
@


1.9
log
@Update to xf86-input-synaptics 1.8.0.

ok matthieu@@, tested claudio@@
@
text
@d26 1
a26 1
        [1.8.0],
@


1.8
log
@Update to xf86-input-synaptics 1.7.5.

ok matthieu@@
@
text
@d26 1
a26 1
        [1.7.5],
a34 1
AM_MAINTAINER_MODE
d123 1
a123 3

    # Obtain compiler/linker options for mtdev
    PKG_CHECK_MODULES(MTDEV, mtdev)
a167 1
                test/Makefile
@


1.7
log
@Update to xf86-input-synaptics 1.7.1.

ok mpi@@ jcs@@ matthieu@@
@
text
@d26 1
a26 1
        [1.7.1],
@


1.6
log
@Update to xf86-input-synaptics 1.6.2

ok matthieu@@, mpi@@
@
text
@d26 1
a26 1
        [1.6.2],
d57 1
a57 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.7] xproto inputproto $REQUIRED_MODULES)
a63 8
DRIVER_NAME=synaptics
AC_SUBST([DRIVER_NAME])

PKG_CHECK_MODULES(XI22, [inputproto >= 2.1.99.3] [xorg-server >= 1.11.99.901], HAVE_XI22="yes", HAVE_XI22="no")
if test "x$HAVE_XI22" = xyes; then
    AC_DEFINE(HAVE_MULTITOUCH, 1, [XI2.2 available])
fi

d110 1
a110 1
*solaris*)
d125 2
a126 4
    if test "x$HAVE_XI22" = xyes; then
        # Obtain compiler/linker options for mtdev
        PKG_CHECK_MODULES(MTDEV, mtdev)
    fi
@


1.5
log
@Update to xf86-input-synaptics 1.6.1

ok matthieu@@
@
text
@d26 1
a26 1
        [1.6.1],
@


1.4
log
@Update to xf86-input-synaptics 1.5.2.

ok matthieu@@
@
text
@d26 1
a26 1
        [1.5.2],
d57 1
a57 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.6] xproto inputproto $REQUIRED_MODULES)
d67 5
d118 4
d127 1
a127 1
	AC_MSG_RESULT([none])
d132 5
@


1.3
log
@Update to xf86-input-synaptics 1.5.0.
ok mpi@@, matthieu@@
@
text
@d26 1
a26 1
        [1.5.0],
@


1.2
log
@Add support wscons (upstream + implementation)

ok matthieu@@
@
text
@d26 1
a26 1
        [1.4.99],
d52 2
d156 4
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
        [1.4.0],
d41 1
a41 1
# Initialize X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
d43 2
a44 2
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
d46 1
d102 2
a103 1
	AC_MSG_RESULT([eventcomm])
a104 1
	AC_DEFINE(BUILD_EVENTCOMM, 1, [Optional backend eventcomm enabled])
d106 3
a108 2
*freebsd* | *openbsd* | *netbsd* | *dragonfly*)
	AC_MSG_RESULT([psmcomm])
d110 4
a113 1
	AC_DEFINE(BUILD_PSMCOMM, 1, [Optional backend psmcomm enabled])
d119 12
d133 2
d161 1
@


1.1.1.1
log
@Import xf86-input-synaptics 1.4.0

ok matthieu@@
@
text
@@
