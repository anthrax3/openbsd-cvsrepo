head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.10
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.2
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	v0_99_9:1.1.1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v0_81_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.05.24.09.17.25;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	qBZygjuSMc2gFczl;

1.5
date	2014.04.13.10.36.51;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.29.21.17.47;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.11.25.22.03.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.23.21.00.47;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.00.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.00.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.10.30.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xf86-video-ast 1.0.1
@
text
@/*
 * Copyright (c) 2005 ASPEED Technology Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of the authors not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  The authors makes no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* Eng Capability Definition */
#define	ENG_CAP_Sync				0x0001
#define	ENG_CAP_ScreenToScreenCopy		0x0002
#define	ENG_CAP_SolidFill			0x0004
#define	ENG_CAP_SolidLine			0x0008
#define	ENG_CAP_DashedLine			0x0010
#define	ENG_CAP_Mono8x8PatternFill		0x0020
#define	ENG_CAP_Color8x8PatternFill		0x0040
#define	ENG_CAP_CPUToScreenColorExpand		0x0080
#define	ENG_CAP_ScreenToScreenColorExpand	0x0100
#define	ENG_CAP_Clipping			0x0200
#define ENG_CAP_ALL	(ENG_CAP_Sync | ENG_CAP_ScreenToScreenCopy | ENG_CAP_SolidFill	|	\
                         ENG_CAP_SolidLine | ENG_CAP_DashedLine |				\
                         ENG_CAP_Mono8x8PatternFill | ENG_CAP_Color8x8PatternFill |		\
                         ENG_CAP_Clipping);

/* CMDQ Definition */
#define    AGP_CMD_QUEUE                   	1
#define    VM_CMD_QUEUE                    	0
#define    VM_CMD_MMIO                     	2

#define    CMD_QUEUE_SIZE_256K             	0x00040000
#define    CMD_QUEUE_SIZE_512K             	0x00080000
#define    CMD_QUEUE_SIZE_1M               	0x00100000
#define    CMD_QUEUE_SIZE_2M               	0x00200000
#define    CMD_QUEUE_SIZE_4M               	0x00400000

#define PIXEL_FMT_YV12 				FOURCC_YV12  		/* 0x32315659 */
#define PIXEL_FMT_UYVY 				FOURCC_UYVY  		/* 0x59565955 */
#define PIXEL_FMT_YUY2 				FOURCC_YUY2  		/* 0x32595559 */
#define PIXEL_FMT_RGB5 				0x35315652
#define PIXEL_FMT_RGB6 				0x36315652
#define PIXEL_FMT_YVYU 				0x55595659
#define PIXEL_FMT_NV12 				0x3231564e
#define PIXEL_FMT_NV21 				0x3132564e

/* CMD Type Info */
#define    PKT_NULL_CMD             		0x00009561
#define    PKT_BURST_CMD_HEADER0    	    	0x00009564

#define    PKT_SINGLE_LENGTH        		8
#define    PKT_SINGLE_CMD_HEADER    		0x00009562

typedef struct  _PKT_SC
{
    ULONG    PKT_SC_dwHeader;
    ULONG    PKT_SC_dwData[1];

} PKT_SC, *PPKT_SC;

/* Packet CMD Scale */
#define    PKT_TYPESCALE_LENGTH        		56
#define    PKT_TYPESCALE_DATALENGTH    		(0xC<<16)
#define    PKT_TYPESCALE_ADDRSTART     		0x00000000

typedef struct _BURSTSCALECMD
{
    ULONG    dwHeader0;
    ULONG    dwSrcBaseAddr;         		/* 8000 */
    union
    {
        struct
        {
            USHORT    wSrcDummy;      		/* 8004 */
            USHORT    wSrcPitch;      		/* 8006 */
        };
        ULONG    dwSrcPitch;         		/* 8004 */
    };
    ULONG    dwDstBaseAddr;         		/* 8008 */
    union
    {
        struct
        {
            USHORT   wDstHeight;      		/* 800C */
            USHORT   wDstPitch;       		/* 800E */
        };
        ULONG    dwDstHeightPitch;   		/* 800C */
    };
    union
    {
        struct
        {
            short    wDstY;           		/* 8010 */
            short    wDstX;           		/* 8012 */
        };
        ULONG    dwDstXY;            		/* 8010 */
    };
    union
    {
        struct
        {
            short    wSrcY;           		/* 8014 */
            short    wSrcX;           		/* 8016 */
        };
        ULONG    dwSrcXY;            		/* 8014 */
    };
    union
    {
        struct
        {
            USHORT   wRecHeight;      		/* 8018 */
            USHORT   wRecWidth;       		/* 801A */
        };
        ULONG    dwRecHeightWidth;   		/* 8018 */
    };
    ULONG    dwInitScaleFactorH;        	/* 801C */
    ULONG    dwInitScaleFactorV;        	/* 8020 */
    ULONG    dwScaleFactorH;            	/* 8024 */
    ULONG    dwScaleFactorV;            	/* 8028 */

    ULONG    dwCmd;             	    	/* 823C */
    ULONG    NullData[1];
} BURSTSCALECMD, *PBURSTSCALECMD;

/* Eng Reg. Limitation */
#define	MAX_SRC_X				0x7FF
#define	MAX_SRC_Y				0x7FF
#define	MAX_DST_X				0x7FF
#define	MAX_DST_Y				0x7FF

#define	MASK_SRC_PITCH				0x1FFF
#define	MASK_DST_PITCH				0x1FFF
#define	MASK_DST_HEIGHT				0x7FF
#define	MASK_SRC_X				0xFFF
#define	MASK_SRC_Y				0xFFF
#define	MASK_DST_X				0xFFF
#define	MASK_DST_Y				0xFFF
#define	MASK_RECT_WIDTH				0x7FF
#define	MASK_RECT_HEIGHT			0x7FF
#define MASK_CLIP				0xFFF

#define MASK_LINE_X        			0xFFF
#define MASK_LINE_Y           			0xFFF
#define MASK_LINE_ERR   			0x3FFFFF
#define MASK_LINE_WIDTH   			0x7FF
#define MASK_LINE_K1				0x3FFFFF
#define MASK_LINE_K2				0x3FFFFF
#define MASK_AIPLINE_X        			0xFFF
#define MASK_AIPLINE_Y         			0xFFF

#define MAX_PATReg_Size				256

/* Eng Reg. Definition */
/* MMIO Reg */
#define MMIOREG_SRC_BASE	(pAST->MMIOVirtualAddr + 0x8000)
#define MMIOREG_SRC_PITCH	(pAST->MMIOVirtualAddr + 0x8004)
#define MMIOREG_DST_BASE	(pAST->MMIOVirtualAddr + 0x8008)
#define MMIOREG_DST_PITCH	(pAST->MMIOVirtualAddr + 0x800C)
#define MMIOREG_DST_XY		(pAST->MMIOVirtualAddr + 0x8010)
#define MMIOREG_SRC_XY		(pAST->MMIOVirtualAddr + 0x8014)
#define MMIOREG_RECT_XY		(pAST->MMIOVirtualAddr + 0x8018)
#define MMIOREG_FG		(pAST->MMIOVirtualAddr + 0x801C)
#define MMIOREG_BG		(pAST->MMIOVirtualAddr + 0x8020)
#define MMIOREG_FG_SRC		(pAST->MMIOVirtualAddr + 0x8024)
#define MMIOREG_BG_SRC		(pAST->MMIOVirtualAddr + 0x8028)
#define MMIOREG_MONO1		(pAST->MMIOVirtualAddr + 0x802C)
#define MMIOREG_MONO2		(pAST->MMIOVirtualAddr + 0x8030)
#define MMIOREG_CLIP1		(pAST->MMIOVirtualAddr + 0x8034)
#define MMIOREG_CLIP2		(pAST->MMIOVirtualAddr + 0x8038)
#define MMIOREG_CMD		(pAST->MMIOVirtualAddr + 0x803C)
#define MMIOREG_PAT		(pAST->MMIOVirtualAddr + 0x8100)

#define MMIOREG_LINE_XY         (pAST->MMIOVirtualAddr + 0x8010)
#define MMIOREG_LINE_Err        (pAST->MMIOVirtualAddr + 0x8014)
#define MMIOREG_LINE_WIDTH      (pAST->MMIOVirtualAddr + 0x8018)
#define MMIOREG_LINE_K1         (pAST->MMIOVirtualAddr + 0x8024)
#define MMIOREG_LINE_K2         (pAST->MMIOVirtualAddr + 0x8028)
#define MMIOREG_LINE_STYLE1     (pAST->MMIOVirtualAddr + 0x802C)
#define MMIOREG_LINE_STYLE2     (pAST->MMIOVirtualAddr + 0x8030)
#define MMIOREG_LINE_XY2        (pAST->MMIOVirtualAddr + 0x8014)
#define MMIOREG_LINE_NUMBER     (pAST->MMIOVirtualAddr + 0x8018)

/* CMDQ Reg */
#define CMDQREG_SRC_BASE	(0x00 << 24)
#define CMDQREG_SRC_PITCH	(0x01 << 24)
#define CMDQREG_DST_BASE	(0x02 << 24)
#define CMDQREG_DST_PITCH	(0x03 << 24)
#define CMDQREG_DST_XY		(0x04 << 24)
#define CMDQREG_SRC_XY		(0x05 << 24)
#define CMDQREG_RECT_XY		(0x06 << 24)
#define CMDQREG_FG		(0x07 << 24)
#define CMDQREG_BG		(0x08 << 24)
#define CMDQREG_FG_SRC		(0x09 << 24)
#define CMDQREG_BG_SRC		(0x0A << 24)
#define CMDQREG_MONO1		(0x0B << 24)
#define CMDQREG_MONO2		(0x0C << 24)
#define CMDQREG_CLIP1		(0x0D << 24)
#define CMDQREG_CLIP2		(0x0E << 24)
#define CMDQREG_CMD		(0x0F << 24)
#define CMDQREG_PAT		(0x40 << 24)

#define CMDQREG_LINE_XY         (0x04 << 24)
#define CMDQREG_LINE_Err        (0x05 << 24)
#define CMDQREG_LINE_WIDTH      (0x06 << 24)
#define CMDQREG_LINE_K1         (0x09 << 24)
#define CMDQREG_LINE_K2         (0x0A << 24)
#define CMDQREG_LINE_STYLE1     (0x0B << 24)
#define CMDQREG_LINE_STYLE2     (0x0C << 24)
#define CMDQREG_LINE_XY2        (0x05 << 24)
#define CMDQREG_LINE_NUMBER     (0x06 << 24)

/* CMD Reg. Definition */
#define   CMD_BITBLT                 		0x00000000
#define   CMD_LINEDRAW               		0x00000001
#define   CMD_COLOREXP               		0x00000002
#define   CMD_ENHCOLOREXP            		0x00000003
#define   CMD_TRANSPARENTBLT           		0x00000004
#define   CMD_TYPE_SCALE                    	0x00000005
#define   CMD_MASK            	        	0x00000007

#define   CMD_DISABLE_CLIP           		0x00000000
#define   CMD_ENABLE_CLIP            		0x00000008

#define   CMD_COLOR_08               		0x00000000
#define   CMD_COLOR_16               		0x00000010
#define   CMD_COLOR_32               		0x00000020

#define   CMD_SRC_SIQ                		0x00000040

#define   CMD_TRANSPARENT               	0x00000080

#define   CMD_PAT_FGCOLOR            		0x00000000
#define   CMD_PAT_MONOMASK           		0x00010000
#define   CMD_PAT_PATREG             		0x00020000

#define   CMD_OPAQUE                 		0x00000000
#define   CMD_FONT_TRANSPARENT          	0x00040000

#define   CMD_X_INC				0x00000000
#define   CMD_X_DEC				0x00200000

#define   CMD_Y_INC				0x00000000
#define   CMD_Y_DEC				0x00100000

#define   CMD_NT_LINE				0x00000000
#define	  CMD_NORMAL_LINE			0x00400000

#define   CMD_DRAW_LAST_PIXEL           	0x00000000
#define   CMD_NOT_DRAW_LAST_PIXEL       	0x00800000

#define   CMD_DISABLE_LINE_STYLE     		0x00000000
#define   CMD_ENABLE_LINE_STYLE      		0x40000000

#define   CMD_RESET_STYLE_COUNTER       	0x80000000
#define   CMD_NOT_RESET_STYLE_COUNTER   	0x00000000

#define   BURST_FORCE_CMD            		0x80000000

#define YUV_FORMAT_YUYV     			(0UL<<12)
#define YUV_FORMAT_YVYU     			(1UL<<12)
#define YUV_FORMAT_UYVY     			(2UL<<12)
#define YUV_FORMAT_VYUY     			(3UL<<12)

#define SCALE_FORMAT_RGB2RGB        		(0UL<<14)
#define SCALE_FORMAT_YUV2RGB        		(1UL<<14)
#define SCALE_FORMAT_RGB2RGB_DOWN   		(2UL<<14)	/* RGB32 to RGB16 */
#define SCALE_FORMAT_RGB2RGB_UP     		(3UL<<14) 	/* RGB16 to RGB32 */
#define SCALE_SEG_NUM_1         		(0x3FUL<<24) 	/* DstWi >= SrcWi */
#define SCALE_SEG_NUM_2         		(0x1FUL<<24) 	/* DstWi < SrcWi */
#define	SCALE_EQUAL_VER				(0x1UL<<23)

/* Line */
#define	LINEPARAM_XM				0x00000001
#define	LINEPARAM_X_DEC				0x00000002
#define	LINEPARAM_Y_DEC				0x00000004

typedef struct _LINEPARAM {
    USHORT	dsLineX;
    USHORT	dsLineY;
    USHORT	dsLineWidth;
    ULONG	dwErrorTerm;
    ULONG	dwK1Term;
    ULONG	dwK2Term;
    ULONG	dwLineAttributes;
} LINEPARAM, *PLINEPARAM;

typedef struct {

    LONG X1;
    LONG Y1;
    LONG X2;
    LONG Y2;

} _LINEInfo;

/* Macro */
/* MMIO 2D Macro */
#define ASTSetupSRCBase_MMIO(base) \
      { \
        do { \
           *(ULONG *)(MMIOREG_SRC_BASE) = (ULONG) (base); \
        } while (*(volatile ULONG *)(MMIOREG_SRC_BASE) != (ULONG) (base)); \
      }
#define ASTSetupSRCPitch_MMIO(pitch) \
      { \
        do { \
           *(ULONG *)(MMIOREG_SRC_PITCH) = (ULONG)(pitch << 16); \
        } while (*(volatile ULONG *)(MMIOREG_SRC_PITCH) != (ULONG)(pitch << 16)); \
      }
#define ASTSetupDSTBase_MMIO(base) \
      { \
        do { \
           *(ULONG *)(MMIOREG_DST_BASE) = (ULONG)(base); \
        } while (*(volatile ULONG *)(MMIOREG_DST_BASE) != (ULONG)(base)); \
      }
#define ASTSetupDSTPitchHeight_MMIO(pitch, height) \
      { \
        ULONG dstpitch; \
        dstpitch = (ULONG)((pitch << 16) + ((height) & MASK_DST_HEIGHT)); \
        do { \
           *(ULONG *)(MMIOREG_DST_PITCH) = dstpitch; \
        } while (*(volatile ULONG *)(MMIOREG_DST_PITCH) != dstpitch); \
      }
#define ASTSetupDSTXY_MMIO(x, y) \
      { \
        ULONG dstxy; \
        dstxy = (ULONG)(((x & MASK_DST_X) << 16) + (y & MASK_DST_Y)); \
        do { \
           *(ULONG *)(MMIOREG_DST_XY) = dstxy; \
        } while (*(volatile ULONG *)(MMIOREG_DST_XY) != dstxy); \
      }
#define ASTSetupSRCXY_MMIO(x, y) \
      { \
        ULONG srcxy; \
        srcxy = (ULONG)(((x & MASK_SRC_X) << 16) + (y & MASK_SRC_Y)); \
        do { \
           *(ULONG *)(MMIOREG_SRC_XY) = srcxy; \
        } while (*(volatile ULONG *)(MMIOREG_SRC_XY) != srcxy); \
      }
#define ASTSetupRECTXY_MMIO(x, y) \
      { \
        ULONG rectxy; \
        rectxy = (ULONG)(((x & MASK_RECT_WIDTH) << 16) + (y & MASK_RECT_WIDTH)); \
        do { \
           *(ULONG *)(MMIOREG_RECT_XY) = rectxy; \
        } while (*(volatile ULONG *)(MMIOREG_RECT_XY) != rectxy); \
      }
#define ASTSetupFG_MMIO(color) \
      { \
        do { \
           *(ULONG *)(MMIOREG_FG) = (ULONG)(color); \
        } while (*(volatile ULONG *)(MMIOREG_FG) != (ULONG)(color)); \
      }
#define ASTSetupBG_MMIO(color) \
      { \
        do { \
           *(ULONG *)(MMIOREG_BG) = (ULONG)(color); \
        } while (*(volatile ULONG *)(MMIOREG_BG) != (ULONG)(color)); \
      }
#define ASTSetupMONO1_MMIO(pat) \
      { \
        do { \
          *(ULONG *)(MMIOREG_MONO1) = (ULONG)(pat); \
        } while (*(volatile ULONG *)(MMIOREG_MONO1) != (ULONG)(pat)); \
      }
#define ASTSetupMONO2_MMIO(pat) \
      { \
        do { \
          *(ULONG *)(MMIOREG_MONO2) = (ULONG)(pat); \
        } while (*(volatile ULONG *)(MMIOREG_MONO2) != (ULONG)(pat)); \
      }
#define ASTSetupCLIP1_MMIO(left, top) \
      { \
       ULONG clip1; \
       clip1 = (ULONG)(((left & MASK_CLIP) << 16) + (top & MASK_CLIP)); \
       do { \
          *(ULONG *)(MMIOREG_CLIP1) = clip1; \
       } while (*(volatile ULONG *)(MMIOREG_CLIP1) != clip1); \
      }
#define ASTSetupCLIP2_MMIO(right, bottom) \
      { \
       ULONG clip2; \
       clip2 = (ULONG)(((right & MASK_CLIP) << 16) + (bottom & MASK_CLIP)); \
       do { \
          *(ULONG *)(MMIOREG_CLIP2) = clip2; \
       } while (*(volatile ULONG *)(MMIOREG_CLIP2) != clip2); \
      }
#define ASTSetupCMDReg_MMIO(reg) \
      { \
        *(ULONG *)(MMIOREG_CMD) = (ULONG)(reg);	\
      }
#define ASTSetupPatReg_MMIO(patreg, pat) \
      { \
       do { \
          *(ULONG *)(MMIOREG_PAT + patreg*4) = (ULONG)(pat); \
       } while (*(volatile ULONG *)(MMIOREG_PAT + patreg*4) != (ULONG)(pat)); \
      }

/* Line CMD */
#define ASTSetupLineXY_MMIO(x, y) \
      { \
        ULONG linexy; \
        linexy = (ULONG)(((x & MASK_LINE_X) << 16) + (y & MASK_LINE_Y)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_XY) = linexy; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY) != linexy); \
      }
#define ASTSetupLineXMErrTerm_MMIO(xm, err) \
      { \
        ULONG lineerr; \
        lineerr = (ULONG)((xm << 24) + (err & MASK_LINE_ERR)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_Err) = lineerr; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_Err) != lineerr); \
      }
#define ASTSetupLineWidth_MMIO(width) \
      { \
        ULONG linewidth; \
        linewidth = (ULONG)((width & MASK_LINE_WIDTH) << 16); \
        do { \
          *(ULONG *)(MMIOREG_LINE_WIDTH) = linewidth; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_WIDTH) != linewidth); \
      }
#define ASTSetupLineK1Term_MMIO(err) \
      { \
        do { \
          *(ULONG *)(MMIOREG_LINE_K1) = (ULONG)(err & MASK_LINE_K1); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_K1) != (ULONG)(err & MASK_LINE_K1)); \
      }
#define ASTSetupLineK2Term_MMIO(err) \
      { \
        do { \
           *(ULONG *)(MMIOREG_LINE_K2) = (ULONG)(err & MASK_LINE_K2); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_K2) != (ULONG)(err & MASK_LINE_K2)); \
      }
#define ASTSetupLineStyle1_MMIO(pat) \
      { \
        do { \
           *(ULONG *)(MMIOREG_LINE_STYLE1) = (ULONG)(pat); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_STYLE1) != (ULONG)(pat)); \
      }
#define ASTSetupLineStyle2_MMIO(pat) \
      { \
        do { \
          *(ULONG *)(MMIOREG_LINE_STYLE2) = (ULONG)(pat); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_STYLE2) != (ULONG)(pat)); \
      }

/* AIP Line CMD */
#define AIPSetupLineXY_MMIO(x, y) \
      { \
        ULONG linexy; \
        linexy = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_XY) = linexy; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY) != linexy); \
      }
#define AIPSetupLineXY2_MMIO(x, y) \
      { \
        ULONG linexy; \
        linexy = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_XY2) = linexy; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY2) != linexy); \
      }
#define AIPSetupLineNumber_MMIO(no) \
      { \
        do { \
           *(ULONG *)(MMIOREG_LINE_NUMBER) = (ULONG) no; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_NUMBER) != (ULONG) no); \
      }

/* CMDQ Mode Macro */
#define mUpdateWritePointer *(ULONG *) (pAST->CMDQInfo.pjWritePort) = (pAST->CMDQInfo.ulWritePointer >>3)

/* General CMD */
#define ASTSetupSRCBase(addr, base) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_SRC_BASE); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(base);					\
      }
#define ASTSetupSRCPitch(addr, pitch) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_SRC_PITCH); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pitch << 16);					\
      }
#define ASTSetupDSTBase(addr, base) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_DST_BASE); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(base);					\
      }
#define ASTSetupDSTPitchHeight(addr, pitch, height) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_DST_PITCH); 	\
        addr->PKT_SC_dwData[0] = (ULONG)((pitch << 16) + ((height) & MASK_DST_HEIGHT));					\
      }
#define ASTSetupDSTXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_DST_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_DST_X) << 16) + (y & MASK_DST_Y));					\
      }
#define ASTSetupSRCXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_SRC_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_SRC_X) << 16) + (y & MASK_SRC_Y));					\
      }
#define ASTSetupRECTXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_RECT_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_RECT_WIDTH) << 16) + (y & MASK_RECT_WIDTH));					\
      }
#define ASTSetupFG(addr, color) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_FG); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(color);					\
      }
#define ASTSetupBG(addr, color) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_BG); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(color);					\
      }
#define ASTSetupMONO1(addr, pat) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_MONO1); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pat);				\
      }
#define ASTSetupMONO2(addr, pat) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_MONO2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pat);				\
      }
#define ASTSetupCLIP1(addr, left, top) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_CLIP1); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((left & MASK_CLIP) << 16) + (top & MASK_CLIP));	\
      }
#define ASTSetupCLIP2(addr, right, bottom) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_CLIP2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((right & MASK_CLIP) << 16) + (bottom & MASK_CLIP));	\
      }
#define ASTSetupCMDReg(addr, reg) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_CMD); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(reg);					\
      }
#define ASTSetupPatReg(addr, patreg, pat) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + (CMDQREG_PAT + (patreg << 24))); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pat);				\
      }

/* Line CMD */
#define ASTSetupLineXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_LINE_X) << 16) + (y & MASK_LINE_Y));					\
      }
#define ASTSetupLineXMErrTerm(addr, xm, err) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_Err); 	\
        addr->PKT_SC_dwData[0] = (ULONG)((xm << 24) + (err & MASK_LINE_ERR));					\
      }
#define ASTSetupLineWidth(addr, width) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_WIDTH); 	\
        addr->PKT_SC_dwData[0] = (ULONG)((width & MASK_LINE_WIDTH) << 16);				\
      }
#define ASTSetupLineK1Term(addr, err) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_K1); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(err & MASK_LINE_K1);				\
      }
#define ASTSetupLineK2Term(addr, err) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_K2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(err & MASK_LINE_K2);				\
      }
#define ASTSetupLineStyle1(addr, pat) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_STYLE1); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pat);				\
      }
#define ASTSetupLineStyle2(addr, pat) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_STYLE2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(pat);				\
      }

#define ASTSetupNULLCMD(addr) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG) (PKT_NULL_CMD); 			\
        addr->PKT_SC_dwData[0] = (ULONG) 0;					\
      }

/* AIP Line CMD */
#define AIPSetupLineXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y));					\
      }
#define AIPSetupLineXY2(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_XY2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y));					\
      }
#define AIPSetupLineNumber(addr, no) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_NUMBER); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(no);					\
      }

Bool bASTGetLineTerm(_LINEInfo *LineInfo, LINEPARAM *dsLineParam);
@


1.5
log
@Re-add ast files that previous re-import failed to re-add
@
text
@d624 2
@


1.4
log
@Remove a bunch of video drivers that were never built on OpenBSD and
are unlikely to be ported in the future. no objection from miod@@ krw@@.
@
text
@d33 1
a33 1
#define	ENG_CAP_Clipping			0x0200	
d50 9
d61 1
d70 1
a70 1
    
d73 64
d154 1
a154 1
#define MASK_LINE_X        			0xFFF   
d156 3
a158 3
#define MASK_LINE_ERR   			0x3FFFFF        
#define MASK_LINE_WIDTH   			0x7FF        
#define MASK_LINE_K1				0x3FFFFF           
d160 1
a160 1
#define MASK_AIPLINE_X        			0xFFF   
d165 1
a165 1
/* Eng Reg. Definition */  
d167 1
a167 1
#define MMIOREG_SRC_BASE	(pAST->MMIOVirtualAddr + 0x8000)                
d182 2
a183 2
#define MMIOREG_CMD		(pAST->MMIOVirtualAddr + 0x803C)    
#define MMIOREG_PAT		(pAST->MMIOVirtualAddr + 0x8100)    
d185 7
a191 7
#define MMIOREG_LINE_XY         (pAST->MMIOVirtualAddr + 0x8010)  
#define MMIOREG_LINE_Err        (pAST->MMIOVirtualAddr + 0x8014)  
#define MMIOREG_LINE_WIDTH      (pAST->MMIOVirtualAddr + 0x8018)  
#define MMIOREG_LINE_K1         (pAST->MMIOVirtualAddr + 0x8024)  
#define MMIOREG_LINE_K2         (pAST->MMIOVirtualAddr + 0x8028)  
#define MMIOREG_LINE_STYLE1     (pAST->MMIOVirtualAddr + 0x802C)  
#define MMIOREG_LINE_STYLE2     (pAST->MMIOVirtualAddr + 0x8030)  
d193 1
a193 1
#define MMIOREG_LINE_NUMBER     (pAST->MMIOVirtualAddr + 0x8018)  
d196 1
a196 1
#define CMDQREG_SRC_BASE	(0x00 << 24)                       
d214 4
a217 4
#define CMDQREG_LINE_XY         (0x04 << 24) 
#define CMDQREG_LINE_Err        (0x05 << 24)  
#define CMDQREG_LINE_WIDTH      (0x06 << 24)    
#define CMDQREG_LINE_K1         (0x09 << 24) 
d219 1
a219 1
#define CMDQREG_LINE_STYLE1     (0x0B << 24) 
d222 1
a222 1
#define CMDQREG_LINE_NUMBER     (0x06 << 24)    
d230 1
d232 2
a233 2
					
#define   CMD_DISABLE_CLIP           		0x00000000   
d251 1
a251 1
#define   CMD_X_INC				0x00000000	
d254 1
a254 1
#define   CMD_Y_INC				0x00000000	
d271 13
d296 1
a296 1
    ULONG	dwLineAttributes;	
d300 1
a300 1
	
d304 2
a305 2
    LONG Y2;	
    
d327 1
a327 1
      }      
d335 1
a335 1
      }      
d343 1
a343 1
      }           
d351 1
a351 1
      }             
d359 1
a359 1
      }  
d365 1
a365 1
      } 
d377 1
a377 1
      } 
d391 1
a391 1
      } 
d399 1
a399 1
      }                                                                                               
d409 2
a410 2
      }      
                                
d427 1
a427 1
      }      
d441 1
a441 1
      }            
d453 1
a453 1
      } 
d459 1
a459 1
      }     
d484 2
a485 2
                                
/* CMDQ Mode Macro */ 
d503 1
a503 1
      }      
d508 1
a508 1
      }      
d513 1
a513 1
      }           
d518 1
a518 1
      }             
d523 1
a523 1
      }  
d538 1
a538 1
      }            
d543 1
a543 1
      }     
d548 1
a548 1
      }            
d553 1
a553 1
      }                                                                                                    
d563 1
a563 1
      }    
d575 1
a575 1
      }      
d580 1
a580 1
      }            
d585 1
a585 1
      }            
d590 1
a590 1
      }     
d595 1
a595 1
      }            
d600 1
a600 1
      }     
@


1.3
log
@Update to xf86-video-ast 0.91.10
@
text
@@


1.2
log
@xf86-video-ast 0.85.0
@
text
@d86 2
d118 2
d147 2
d155 1
d182 3
d372 24
d518 17
@


1.1
log
@Initial revision
@
text
@a63 3
#define	MAX_SRC_PITCH				0x1FFF
#define	MAX_DST_PITCH				0x1FFF
#define	MAX_DST_HEIGHT				0x7FF
d68 18
a85 10
#define	MAX_RECT_WIDTH				0x7FF
#define	MAX_RECT_HEIGHT				0x7FF
#define MAX_CLIP				0xFFF

#define MAX_LINE_X        			0x7FF   
#define MAX_LINE_Y           			0x7FF
#define MAX_LINE_ERR   				0x3FFFFF        
#define MAX_LINE_WIDTH   			0x7FF        
#define MAX_LINE_K1				0x3FFFFF           
#define MAX_LINE_K2				0x3FFFFF
d203 4
a206 4
    ULONG X1;
    ULONG Y1;
    ULONG X2;
    ULONG Y2;	
d216 1
a216 1
        } while (*(ULONG *)(MMIOREG_SRC_BASE) != (ULONG) (base)); \
d222 1
a222 1
        } while (*(ULONG *)(MMIOREG_SRC_PITCH) != (ULONG)(pitch << 16)); \
d228 1
a228 1
        } while (*(ULONG *)(MMIOREG_DST_BASE) != (ULONG)(base)); \
d233 1
a233 1
        dstpitch = (ULONG)((pitch << 16) + ((height) & MAX_DST_HEIGHT)); \
d236 1
a236 1
        } while (*(ULONG *)(MMIOREG_DST_PITCH) != dstpitch); \
d241 1
a241 1
        dstxy = (ULONG)(((x & MAX_DST_X) << 16) + (y & MAX_DST_Y)); \
d244 1
a244 1
        } while (*(ULONG *)(MMIOREG_DST_XY) != dstxy); \
d249 1
a249 1
        srcxy = (ULONG)(((x & MAX_SRC_X) << 16) + (y & MAX_SRC_Y)); \
d252 1
a252 1
        } while (*(ULONG *)(MMIOREG_SRC_XY) != srcxy); \
d257 1
a257 1
        rectxy = (ULONG)(((x & MAX_RECT_WIDTH) << 16) + (y & MAX_RECT_WIDTH)); \
d260 1
a260 1
        } while (*(ULONG *)(MMIOREG_RECT_XY) != rectxy); \
d266 1
a266 1
        } while (*(ULONG *)(MMIOREG_FG) != (ULONG)(color)); \
d272 1
a272 1
        } while (*(ULONG *)(MMIOREG_BG) != (ULONG)(color)); \
d278 1
a278 1
        } while (*(ULONG *)(MMIOREG_MONO1) != (ULONG)(pat)); \
d284 1
a284 1
        } while (*(ULONG *)(MMIOREG_MONO2) != (ULONG)(pat)); \
d289 1
a289 1
       clip1 = (ULONG)(((left & MAX_CLIP) << 16) + (top & MAX_CLIP)); \
d292 1
a292 1
       } while (*(ULONG *)(MMIOREG_CLIP1) != clip1); \
d297 1
a297 1
       clip2 = (ULONG)(((right & MAX_CLIP) << 16) + (bottom & MAX_CLIP)); \
d300 1
a300 1
       } while (*(ULONG *)(MMIOREG_CLIP2) != clip2); \
d310 1
a310 1
       } while (*(ULONG *)(MMIOREG_PAT + patreg*4) != (ULONG)(pat)); \
d317 1
a317 1
        linexy = (ULONG)(((x & MAX_LINE_X) << 16) + (y & MAX_LINE_Y)); \
d320 1
a320 1
        } while (*(ULONG *)(MMIOREG_LINE_XY) != linexy); \
d325 1
a325 1
        lineerr = (ULONG)((xm << 24) + (err & MAX_LINE_ERR)); \
d328 1
a328 1
        } while (*(ULONG *)(MMIOREG_LINE_Err) != lineerr); \
d333 1
a333 1
        linewidth = (ULONG)((width & MAX_LINE_WIDTH) << 16); \
d336 1
a336 1
        } while (*(ULONG *)(MMIOREG_LINE_WIDTH) != linewidth); \
d341 2
a342 2
          *(ULONG *)(MMIOREG_LINE_K1) = (ULONG)(err & MAX_LINE_K1); \
        } while (*(ULONG *)(MMIOREG_LINE_K1) != (ULONG)(err & MAX_LINE_K1)); \
d347 2
a348 2
           *(ULONG *)(MMIOREG_LINE_K2) = (ULONG)(err & MAX_LINE_K2); \
        } while (*(ULONG *)(MMIOREG_LINE_K2) != (ULONG)(err & MAX_LINE_K2)); \
d354 1
a354 1
        } while (*(ULONG *)(MMIOREG_LINE_STYLE1) != (ULONG)(pat)); \
d360 1
a360 1
        } while (*(ULONG *)(MMIOREG_LINE_STYLE2) != (ULONG)(pat)); \
d385 1
a385 1
        addr->PKT_SC_dwData[0] = (ULONG)((pitch << 16) + ((height) & MAX_DST_HEIGHT));					\
d390 1
a390 1
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MAX_DST_X) << 16) + (y & MAX_DST_Y));					\
d395 1
a395 1
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MAX_SRC_X) << 16) + (y & MAX_SRC_Y));					\
d400 1
a400 1
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MAX_RECT_WIDTH) << 16) + (y & MAX_RECT_WIDTH));					\
d425 1
a425 1
        addr->PKT_SC_dwData[0] = (ULONG)(((left & MAX_CLIP) << 16) + (top & MAX_CLIP));	\
d430 1
a430 1
        addr->PKT_SC_dwData[0] = (ULONG)(((right & MAX_CLIP) << 16) + (bottom & MAX_CLIP));	\
d447 1
a447 1
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MAX_LINE_X) << 16) + (y & MAX_LINE_Y));					\
d452 1
a452 1
        addr->PKT_SC_dwData[0] = (ULONG)((xm << 24) + (err & MAX_LINE_ERR));					\
d457 1
a457 1
        addr->PKT_SC_dwData[0] = (ULONG)((width & MAX_LINE_WIDTH) << 16);				\
d462 1
a462 1
        addr->PKT_SC_dwData[0] = (ULONG)(err & MAX_LINE_K1);				\
d467 1
a467 1
        addr->PKT_SC_dwData[0] = (ULONG)(err & MAX_LINE_K2);				\
@


1.1.1.1
log
@Importing xf86-video-ast 0.81.0
@
text
@@


1.1.1.2
log
@Re-import xf86-video-ast.
This chipset is found in HP Proliant MicroServer remote access cards
among others. ok kettenis, seems like a good idea to jasper@@.
@
text
@d33 1
a33 1
#define	ENG_CAP_Clipping			0x0200
a49 9
#define PIXEL_FMT_YV12 				FOURCC_YV12  		/* 0x32315659 */
#define PIXEL_FMT_UYVY 				FOURCC_UYVY  		/* 0x59565955 */
#define PIXEL_FMT_YUY2 				FOURCC_YUY2  		/* 0x32595559 */
#define PIXEL_FMT_RGB5 				0x35315652
#define PIXEL_FMT_RGB6 				0x36315652
#define PIXEL_FMT_YVYU 				0x55595659
#define PIXEL_FMT_NV12 				0x3231564e
#define PIXEL_FMT_NV21 				0x3132564e

a51 1
#define    PKT_BURST_CMD_HEADER0    	    	0x00009564
d60 1
a60 1

a62 64
/* Packet CMD Scale */
#define    PKT_TYPESCALE_LENGTH        		56
#define    PKT_TYPESCALE_DATALENGTH    		(0xC<<16)
#define    PKT_TYPESCALE_ADDRSTART     		0x00000000

typedef struct _BURSTSCALECMD
{
    ULONG    dwHeader0;
    ULONG    dwSrcBaseAddr;         		/* 8000 */
    union
    {
        struct
        {
            USHORT    wSrcDummy;      		/* 8004 */
            USHORT    wSrcPitch;      		/* 8006 */
        };
        ULONG    dwSrcPitch;         		/* 8004 */
    };
    ULONG    dwDstBaseAddr;         		/* 8008 */
    union
    {
        struct
        {
            USHORT   wDstHeight;      		/* 800C */
            USHORT   wDstPitch;       		/* 800E */
        };
        ULONG    dwDstHeightPitch;   		/* 800C */
    };
    union
    {
        struct
        {
            short    wDstY;           		/* 8010 */
            short    wDstX;           		/* 8012 */
        };
        ULONG    dwDstXY;            		/* 8010 */
    };
    union
    {
        struct
        {
            short    wSrcY;           		/* 8014 */
            short    wSrcX;           		/* 8016 */
        };
        ULONG    dwSrcXY;            		/* 8014 */
    };
    union
    {
        struct
        {
            USHORT   wRecHeight;      		/* 8018 */
            USHORT   wRecWidth;       		/* 801A */
        };
        ULONG    dwRecHeightWidth;   		/* 8018 */
    };
    ULONG    dwInitScaleFactorH;        	/* 801C */
    ULONG    dwInitScaleFactorV;        	/* 8020 */
    ULONG    dwScaleFactorH;            	/* 8024 */
    ULONG    dwScaleFactorV;            	/* 8028 */

    ULONG    dwCmd;             	    	/* 823C */
    ULONG    NullData[1];
} BURSTSCALECMD, *PBURSTSCALECMD;

d64 3
d71 10
a80 20

#define	MASK_SRC_PITCH				0x1FFF
#define	MASK_DST_PITCH				0x1FFF
#define	MASK_DST_HEIGHT				0x7FF
#define	MASK_SRC_X				0xFFF
#define	MASK_SRC_Y				0xFFF
#define	MASK_DST_X				0xFFF
#define	MASK_DST_Y				0xFFF
#define	MASK_RECT_WIDTH				0x7FF
#define	MASK_RECT_HEIGHT			0x7FF
#define MASK_CLIP				0xFFF

#define MASK_LINE_X        			0xFFF
#define MASK_LINE_Y           			0xFFF
#define MASK_LINE_ERR   			0x3FFFFF
#define MASK_LINE_WIDTH   			0x7FF
#define MASK_LINE_K1				0x3FFFFF
#define MASK_LINE_K2				0x3FFFFF
#define MASK_AIPLINE_X        			0xFFF
#define MASK_AIPLINE_Y         			0xFFF
d84 1
a84 1
/* Eng Reg. Definition */
d86 1
a86 1
#define MMIOREG_SRC_BASE	(pAST->MMIOVirtualAddr + 0x8000)
d101 2
a102 2
#define MMIOREG_CMD		(pAST->MMIOVirtualAddr + 0x803C)
#define MMIOREG_PAT		(pAST->MMIOVirtualAddr + 0x8100)
d104 7
a110 9
#define MMIOREG_LINE_XY         (pAST->MMIOVirtualAddr + 0x8010)
#define MMIOREG_LINE_Err        (pAST->MMIOVirtualAddr + 0x8014)
#define MMIOREG_LINE_WIDTH      (pAST->MMIOVirtualAddr + 0x8018)
#define MMIOREG_LINE_K1         (pAST->MMIOVirtualAddr + 0x8024)
#define MMIOREG_LINE_K2         (pAST->MMIOVirtualAddr + 0x8028)
#define MMIOREG_LINE_STYLE1     (pAST->MMIOVirtualAddr + 0x802C)
#define MMIOREG_LINE_STYLE2     (pAST->MMIOVirtualAddr + 0x8030)
#define MMIOREG_LINE_XY2        (pAST->MMIOVirtualAddr + 0x8014)
#define MMIOREG_LINE_NUMBER     (pAST->MMIOVirtualAddr + 0x8018)
d113 1
a113 1
#define CMDQREG_SRC_BASE	(0x00 << 24)
d131 4
a134 4
#define CMDQREG_LINE_XY         (0x04 << 24)
#define CMDQREG_LINE_Err        (0x05 << 24)
#define CMDQREG_LINE_WIDTH      (0x06 << 24)
#define CMDQREG_LINE_K1         (0x09 << 24)
d136 1
a136 1
#define CMDQREG_LINE_STYLE1     (0x0B << 24)
a137 2
#define CMDQREG_LINE_XY2        (0x05 << 24)
#define CMDQREG_LINE_NUMBER     (0x06 << 24)
a143 2
#define   CMD_TRANSPARENTBLT           		0x00000004
#define   CMD_TYPE_SCALE                    	0x00000005
d145 2
a146 2

#define   CMD_DISABLE_CLIP           		0x00000000
d164 1
a164 1
#define   CMD_X_INC				0x00000000
d167 1
a167 1
#define   CMD_Y_INC				0x00000000
a169 3
#define   CMD_NT_LINE				0x00000000
#define	  CMD_NORMAL_LINE			0x00400000

a180 13
#define YUV_FORMAT_YUYV     			(0UL<<12)
#define YUV_FORMAT_YVYU     			(1UL<<12)
#define YUV_FORMAT_UYVY     			(2UL<<12)
#define YUV_FORMAT_VYUY     			(3UL<<12)

#define SCALE_FORMAT_RGB2RGB        		(0UL<<14)
#define SCALE_FORMAT_YUV2RGB        		(1UL<<14)
#define SCALE_FORMAT_RGB2RGB_DOWN   		(2UL<<14)	/* RGB32 to RGB16 */
#define SCALE_FORMAT_RGB2RGB_UP     		(3UL<<14) 	/* RGB16 to RGB32 */
#define SCALE_SEG_NUM_1         		(0x3FUL<<24) 	/* DstWi >= SrcWi */
#define SCALE_SEG_NUM_2         		(0x1FUL<<24) 	/* DstWi < SrcWi */
#define	SCALE_EQUAL_VER				(0x1UL<<23)

d193 1
a193 1
    ULONG	dwLineAttributes;
d197 6
a202 6

    LONG X1;
    LONG Y1;
    LONG X2;
    LONG Y2;

d211 1
a211 1
        } while (*(volatile ULONG *)(MMIOREG_SRC_BASE) != (ULONG) (base)); \
d217 1
a217 1
        } while (*(volatile ULONG *)(MMIOREG_SRC_PITCH) != (ULONG)(pitch << 16)); \
d223 2
a224 2
        } while (*(volatile ULONG *)(MMIOREG_DST_BASE) != (ULONG)(base)); \
      }
d228 1
a228 1
        dstpitch = (ULONG)((pitch << 16) + ((height) & MASK_DST_HEIGHT)); \
d231 2
a232 2
        } while (*(volatile ULONG *)(MMIOREG_DST_PITCH) != dstpitch); \
      }
d236 1
a236 1
        dstxy = (ULONG)(((x & MASK_DST_X) << 16) + (y & MASK_DST_Y)); \
d239 2
a240 2
        } while (*(volatile ULONG *)(MMIOREG_DST_XY) != dstxy); \
      }
d244 1
a244 1
        srcxy = (ULONG)(((x & MASK_SRC_X) << 16) + (y & MASK_SRC_Y)); \
d247 2
a248 2
        } while (*(volatile ULONG *)(MMIOREG_SRC_XY) != srcxy); \
      }
d252 1
a252 1
        rectxy = (ULONG)(((x & MASK_RECT_WIDTH) << 16) + (y & MASK_RECT_WIDTH)); \
d255 2
a256 2
        } while (*(volatile ULONG *)(MMIOREG_RECT_XY) != rectxy); \
      }
d261 2
a262 2
        } while (*(volatile ULONG *)(MMIOREG_FG) != (ULONG)(color)); \
      }
d267 1
a267 1
        } while (*(volatile ULONG *)(MMIOREG_BG) != (ULONG)(color)); \
d273 2
a274 2
        } while (*(volatile ULONG *)(MMIOREG_MONO1) != (ULONG)(pat)); \
      }
d279 1
a279 1
        } while (*(volatile ULONG *)(MMIOREG_MONO2) != (ULONG)(pat)); \
d284 1
a284 1
       clip1 = (ULONG)(((left & MASK_CLIP) << 16) + (top & MASK_CLIP)); \
d287 2
a288 2
       } while (*(volatile ULONG *)(MMIOREG_CLIP1) != clip1); \
      }
d292 1
a292 1
       clip2 = (ULONG)(((right & MASK_CLIP) << 16) + (bottom & MASK_CLIP)); \
d295 2
a296 2
       } while (*(volatile ULONG *)(MMIOREG_CLIP2) != clip2); \
      }
d305 3
a307 3
       } while (*(volatile ULONG *)(MMIOREG_PAT + patreg*4) != (ULONG)(pat)); \
      }

d312 1
a312 1
        linexy = (ULONG)(((x & MASK_LINE_X) << 16) + (y & MASK_LINE_Y)); \
d315 1
a315 1
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY) != linexy); \
d320 1
a320 1
        lineerr = (ULONG)((xm << 24) + (err & MASK_LINE_ERR)); \
d323 2
a324 2
        } while (*(volatile ULONG *)(MMIOREG_LINE_Err) != lineerr); \
      }
d328 1
a328 1
        linewidth = (ULONG)((width & MASK_LINE_WIDTH) << 16); \
d331 1
a331 1
        } while (*(volatile ULONG *)(MMIOREG_LINE_WIDTH) != linewidth); \
d336 3
a338 3
          *(ULONG *)(MMIOREG_LINE_K1) = (ULONG)(err & MASK_LINE_K1); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_K1) != (ULONG)(err & MASK_LINE_K1)); \
      }
d342 2
a343 2
           *(ULONG *)(MMIOREG_LINE_K2) = (ULONG)(err & MASK_LINE_K2); \
        } while (*(volatile ULONG *)(MMIOREG_LINE_K2) != (ULONG)(err & MASK_LINE_K2)); \
d349 2
a350 2
        } while (*(volatile ULONG *)(MMIOREG_LINE_STYLE1) != (ULONG)(pat)); \
      }
d355 4
a358 28
        } while (*(volatile ULONG *)(MMIOREG_LINE_STYLE2) != (ULONG)(pat)); \
      }

/* AIP Line CMD */
#define AIPSetupLineXY_MMIO(x, y) \
      { \
        ULONG linexy; \
        linexy = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_XY) = linexy; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY) != linexy); \
      }
#define AIPSetupLineXY2_MMIO(x, y) \
      { \
        ULONG linexy; \
        linexy = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y)); \
        do { \
           *(ULONG *)(MMIOREG_LINE_XY2) = linexy; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_XY2) != linexy); \
      }
#define AIPSetupLineNumber_MMIO(no) \
      { \
        do { \
           *(ULONG *)(MMIOREG_LINE_NUMBER) = (ULONG) no; \
        } while (*(volatile ULONG *)(MMIOREG_LINE_NUMBER) != (ULONG) no); \
      }

/* CMDQ Mode Macro */
d376 1
a376 1
      }
d380 2
a381 2
        addr->PKT_SC_dwData[0] = (ULONG)((pitch << 16) + ((height) & MASK_DST_HEIGHT));					\
      }
d385 2
a386 2
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_DST_X) << 16) + (y & MASK_DST_Y));					\
      }
d390 2
a391 2
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_SRC_X) << 16) + (y & MASK_SRC_Y));					\
      }
d395 2
a396 2
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_RECT_WIDTH) << 16) + (y & MASK_RECT_WIDTH));					\
      }
d411 1
a411 1
      }
d416 1
a416 1
      }
d420 2
a421 2
        addr->PKT_SC_dwData[0] = (ULONG)(((left & MASK_CLIP) << 16) + (top & MASK_CLIP));	\
      }
d425 2
a426 2
        addr->PKT_SC_dwData[0] = (ULONG)(((right & MASK_CLIP) << 16) + (bottom & MASK_CLIP));	\
      }
d436 1
a436 1
      }
d442 1
a442 1
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_LINE_X) << 16) + (y & MASK_LINE_Y));					\
d447 2
a448 2
        addr->PKT_SC_dwData[0] = (ULONG)((xm << 24) + (err & MASK_LINE_ERR));					\
      }
d452 2
a453 2
        addr->PKT_SC_dwData[0] = (ULONG)((width & MASK_LINE_WIDTH) << 16);				\
      }
d457 2
a458 2
        addr->PKT_SC_dwData[0] = (ULONG)(err & MASK_LINE_K1);				\
      }
d462 2
a463 2
        addr->PKT_SC_dwData[0] = (ULONG)(err & MASK_LINE_K2);				\
      }
d468 1
a468 1
      }
d473 1
a473 1
      }
a478 17
      }

/* AIP Line CMD */
#define AIPSetupLineXY(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_XY); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y));					\
      }
#define AIPSetupLineXY2(addr, x, y) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_XY2); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(((x & MASK_AIPLINE_X) << 16) + (y & MASK_AIPLINE_Y));					\
      }
#define AIPSetupLineNumber(addr, no) \
      { \
        addr->PKT_SC_dwHeader  = (ULONG)(PKT_SINGLE_CMD_HEADER + CMDQREG_LINE_NUMBER); 	\
        addr->PKT_SC_dwData[0] = (ULONG)(no);					\
@

