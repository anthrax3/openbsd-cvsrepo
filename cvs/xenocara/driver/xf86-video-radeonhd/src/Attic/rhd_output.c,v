head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v1_1_0:1.1.1.1
	v1_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2012.03.04.16.09.07;	author matthieu;	state dead;
branches;
next	1.7;

1.7
date	2012.02.06.22.53.15;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.31.07.59.54;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2009.11.24.16.57.34;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.26.13.59.41;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.01.18.14.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.19.13.41.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.04.22.20.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.12.04.22.20.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove xf86-video-radeonhd for good.
@
text
@/*
 * Copyright 2007, 2008  Luc Verhaegen <libv@@exsuse.de>
 * Copyright 2007, 2008  Matthias Hopf <mhopf@@novell.com>
 * Copyright 2007, 2008  Egbert Eich   <eich@@novell.com>
 * Copyright 2007, 2008  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "xf86.h"

#include "rhd.h"
#include "rhd_connector.h"
#include "rhd_output.h"
#include "rhd_crtc.h"

char *rhdPowerString[] = {
    "POWER_ON",
    "POWER_RESET",
    "POWER_SHUTDOWN",
    "POWER_UNKNOWN"
};

void
RHDOutputAdd(RHDPtr rhdPtr, struct rhdOutput *New)
{
    struct rhdOutput *Last = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    if (!New)
	return;

    if (Last) {
	while (Last->Next)
	    Last = Last->Next;

	Last->Next = New;
    } else
	rhdPtr->Outputs = New;
}

/*
 *
 */
void
RHDOutputsMode(RHDPtr rhdPtr, struct rhdCrtc *Crtc, DisplayModePtr Mode)
{
    struct rhdOutput *Output = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    while (Output) {
	if (Output->Active && Output->Mode && (Output->Crtc == Crtc))
	    Output->Mode(Output, Mode);

	Output = Output->Next;
    }
}

/*
 *
 */
void
RHDOutputsPower(RHDPtr rhdPtr, int Power)
{
    struct rhdOutput *Output = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    while (Output) {
	if (Output->Active && Output->Power)
	    Output->Power(Output, Power);

	Output = Output->Next;
    }
}

/*
 *
 */
void
RHDOutputsShutdownInactive(RHDPtr rhdPtr)
{
    struct rhdOutput *Output = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    while (Output) {
	if (!Output->Active && Output->Power) {
	    xf86DrvMsg(rhdPtr->scrnIndex, X_INFO, "Shutting down %s\n", Output->Name);
	    Output->Power(Output, RHD_POWER_SHUTDOWN);
	}

	Output = Output->Next;
    }
}

/*
 *
 */
void
RHDOutputsSave(RHDPtr rhdPtr)
{
    struct rhdOutput *Output = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    while (Output) {
	if (Output->Save)
	    Output->Save(Output);

	Output = Output->Next;
    }
}

/*
 *
 */
void
RHDOutputsRestore(RHDPtr rhdPtr)
{
    struct rhdOutput *Output = rhdPtr->Outputs;

    RHDFUNC(rhdPtr);

    while (Output) {
	if (Output->Restore)
	    Output->Restore(Output);

	Output = Output->Next;
    }
}

/*
 *
 */
void
RHDOutputsDestroy(RHDPtr rhdPtr)
{
    struct rhdOutput *Output = rhdPtr->Outputs, *Next;

    RHDFUNC(rhdPtr);

    while (Output) {
	Next = Output->Next;

	xf86DrvMsg(rhdPtr->scrnIndex, X_INFO, "Destroying %s\n", Output->Name);

	if (Output->Destroy)
	    Output->Destroy(Output);

	if (Output->OutputDriverPrivate)
	    xfree(Output->OutputDriverPrivate);
	xfree(Output);

	Output = Next;
    }
}

/*
 *
 */
void
RHDOutputPrintSensedType(struct rhdOutput *Output)
{
    struct { enum rhdSensedOutput type; char *name; }
    list[] = { { RHD_SENSED_NONE, "none" },
	     { RHD_SENSED_VGA, "VGA" },
	     { RHD_SENSED_DVI, "DVI" },
	     { RHD_SENSED_TV_SVIDEO, "TV_SVIDEO"},
	     { RHD_SENSED_TV_COMPOSITE, "TV_COMPOSITE" },
	     { RHD_SENSED_TV_COMPONENT, "TV_COMPONENT" },
	     { 0, NULL }
    };
    int i = 0;

    while (list[i].name) {
	if (list[i].type == Output->SensedType) {
	    xf86DrvMsgVerb(Output->scrnIndex, X_INFO, 3,
			   "%s: Sensed Output: %s\n",Output->Name,
			   list[i].name);
	    return;
	}
	i++;
    }
}

/*
 * Attach an connector to the specified output and set output properties depending on the connector
 */
void
RHDOutputAttachConnector(struct rhdOutput *Output, struct rhdConnector *Connector)
{
    RHDPtr rhdPtr = RHDPTRI(Output);

    if(Output->Connector == Connector)
	return; /* output is already attached to this connector -> nothing todo */

    Output->Connector = Connector;

    if(!Output->Property) /* property control available? */
	return;  /* no -> we are done here */

    /* yes -> check if we need to set any properties */
    if (Output->Property(Output, rhdPropertyCheck, RHD_OUTPUT_COHERENT, NULL)) {
	union rhdPropertyData val;
	switch(RhdParseBooleanOption(&rhdPtr->coherent, Connector->Name)) {
	    case RHD_OPTION_NOT_SET:
		/* for compatibility with old implementation, test also output name */
		switch(RhdParseBooleanOption(&rhdPtr->coherent, Output->Name)) {
		    case RHD_OPTION_NOT_SET:
		    case RHD_OPTION_DEFAULT:
		    case RHD_OPTION_OFF:
			val.Bool = FALSE;
			break;
		    case RHD_OPTION_ON:
			val.Bool = TRUE;
			break;
		}
		break;
	    case RHD_OPTION_DEFAULT:
	    case RHD_OPTION_OFF:
		val.Bool = FALSE;
		break;
	    case RHD_OPTION_ON:
		val.Bool = TRUE;
		break;
	}
	if(Output->Property(Output, rhdPropertySet, RHD_OUTPUT_COHERENT, &val))
	    xf86DrvMsg(rhdPtr->scrnIndex, X_INFO, "Setting %s to %scoherent\n", Output->Name, val.Bool ? "" : "in");
	else
	    xf86DrvMsg(rhdPtr->scrnIndex, X_WARNING, "Failed to set %s to %scoherent\n", Output->Name, val.Bool ? "" : "in");
    }

    /* ask attached connector if EEDID or config options say we should enable HDMI */
    if (Output->Property(Output, rhdPropertyCheck, RHD_OUTPUT_HDMI, NULL)) {
	union rhdPropertyData val;
	val.Bool = RHDConnectorEnableHDMI(Connector);
	if(!Output->Property(Output, rhdPropertySet, RHD_OUTPUT_HDMI, &val))
	    xf86DrvMsg(rhdPtr->scrnIndex, X_WARNING, "Failed to %s HDMI on %s\n", val.Bool ? "disable" : "enable", Output->Name);
    }

    /* check config option if we should enable audio workaround */
    if (Output->Property(Output, rhdPropertyCheck, RHD_OUTPUT_AUDIO_WORKAROUND, NULL)) {
	union rhdPropertyData val;
	switch(RhdParseBooleanOption(&rhdPtr->audioWorkaround, Connector->Name)) {
	    case RHD_OPTION_NOT_SET:
	    case RHD_OPTION_OFF:
		val.Bool = FALSE;
		break;
	    case RHD_OPTION_ON:
	    case RHD_OPTION_DEFAULT:
		val.Bool = TRUE;
		break;
	}
	if(!Output->Property(Output, rhdPropertySet, RHD_OUTPUT_AUDIO_WORKAROUND, &val))
	    xf86DrvMsg(rhdPtr->scrnIndex, X_WARNING,
		"Failed to %s audio workaorund on %s\n",
		val.Bool ? "disable" : "enable", Output->Name);
    }
}

/*
 * Returns the TMDS index of the given output, important for HDMI/Audio setup
 */
int
RHDOutputTmdsIndex(struct rhdOutput *Output)
{
    struct rhdOutput *i = RHDPTRI(Output)->Outputs;
    int index;

    switch(Output->Id) {
	case RHD_OUTPUT_TMDSA:
	case RHD_OUTPUT_UNIPHYA:
	    index=0;
	    break;

	case RHD_OUTPUT_LVTMA:
	    /* special case check if an TMDSA is present */
	    index=0;
	    while(i) {
		if(i->Id==RHD_OUTPUT_TMDSA)
		    index++;
		i = i->Next;
	    }
	    break;

	case RHD_OUTPUT_UNIPHYB:
	case RHD_OUTPUT_KLDSKP_LVTMA:
	    index=1;
	    break;

	default:
	    xf86DrvMsg(Output->scrnIndex, X_ERROR, "%s: unsupported output type\n", __func__);
            index=-1;
	    break;
    }
    return index;
}
@


1.7
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@@


1.6
log
@Remove 2 obsolete drivers that have been unlinked from builds.
@
text
@@


1.5
log
@Update to xf86-video-radeonhd 1.3.0
Tested by killi@@ on a HD3200.
@
text
@@


1.4
log
@Update to xf86-video-radeonhd 1.2.5. Tested by eric@@

Version 1.2.5 improvements:

  - Added 2D acceleration for R6xx and R7xx.
  - Added XVideo support for R6xx and R7xx.
  - Added support for RS880 and RV790.
  - Added RandR 1.3 mandatory properties.
  - Refactoring of MC code.
  - Enable DRI support by default on R5xx and RS6xx.
  - LUT (color lookup table) fixes.
  - Tons of quirk table entries and bug fixes.
  - Fix register accesses for processors that reorder memory writes.
@
text
@d218 1
a218 1
	return; /* output is allready attached to this connector -> nothing todo */
d222 1
a222 1
    if(!Output->Property) /* property controll available? */
d263 57
@


1.3
log
@xf86-video-radeonhd 1.2.3
@
text
@d2 1
a2 1
 * Copyright 2007, 2008  Luc Verhaegen <lverhaegen@@novell.com>
d206 56
@


1.2
log
@Update to xf86-video-radeonhd 1.2.0. Tested by jdixon@@ and jasper@@
@
text
@d37 7
d173 2
d187 1
a187 1
    struct { enum rhdSensedOutput type; char *name; } 
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * Copyright 2007  Luc Verhaegen <lverhaegen@@novell.com>
 * Copyright 2007  Matthias Hopf <mhopf@@novell.com>
 * Copyright 2007  Egbert Eich   <eich@@novell.com>
 * Copyright 2007  Advanced Micro Devices, Inc.
d60 1
a60 1
RHDOutputsMode(RHDPtr rhdPtr, struct rhdCrtc *Crtc)
d68 1
a68 1
	    Output->Mode(Output);
d169 28
@


1.1.1.1
log
@xf86-video-radeonhd 1.0
@
text
@@
