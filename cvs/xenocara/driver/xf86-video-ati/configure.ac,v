head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.4
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.2
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_6_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2016.11.13.14.42.27;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	VCI3KGRPv1Ex2rp2;

1.13
date	2016.04.02.07.37.34;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	bsyGwvYIwQ6RE8Qj;

1.12
date	2015.04.14.19.55.49;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cZqnMrCmViqubI1u;

1.11
date	2014.04.09.20.21.16;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.08.16.17.04.04;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.11.15.49.43;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.08.16.25.22;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.07.20.55.34;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.04.16.01.12;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.06.22.53.12;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.25.21.33.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.12.15.18.32;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.00.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.00.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xf86-video-ati 7.7.1
Tested by jsg@@,  Rafael Sadowski and myself on various hardware.
@
text
@#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([xf86-video-ati],
        [7.7.1],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        [xf86-video-ati])

AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])

AC_CONFIG_AUX_DIR(.)

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AC_SYS_LARGEFILE

AM_MAINTAINER_MODE

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

# Initialize libtool
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

# Checks for programs.
AM_PROG_CC_C_O

if test "x$GCC" = "xyes"; then
	CPPFLAGS="$CPPFLAGS -Wall"
fi

AH_TOP([#include "xorg-server.h"])

# Define a configure option for an alternate module directory
AC_ARG_WITH(xorg-module-dir,
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])

# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(XV, videoproto)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Checks for libraries.
PKG_CHECK_MODULES(LIBDRM, [libdrm >= 2.4.58])
PKG_CHECK_MODULES(LIBDRM_RADEON, [libdrm_radeon])

# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.9 xproto fontsproto xf86driproto $REQUIRED_MODULES])
PKG_CHECK_MODULES(XEXT, [xextproto >= 7.0.99.1],
                  HAVE_XEXTPROTO_71="yes"; AC_DEFINE(HAVE_XEXTPROTO_71, 1, [xextproto 7.1 available]),
                  HAVE_XEXTPROTO_71="no")
AM_CONDITIONAL(HAVE_XEXTPROTO_71, [ test "$HAVE_XEXTPROTO_71" = "yes" ])

AC_ARG_ENABLE([udev],
		AS_HELP_STRING([--disable-udev], [Disable libudev support [default=auto]]),
		[enable_udev="$enableval"],
		[enable_udev=auto])
if test "x$enable_udev" != "xno"; then
	PKG_CHECK_MODULES(LIBUDEV, [libudev], [LIBUDEV=yes], [LIBUDEV=no])
	if test "x$LIBUDEV" = xyes; then
		AC_DEFINE(HAVE_LIBUDEV, 1,[libudev support])
	elif test "x$enable_udev" != "xauto"; then
		AC_MSG_ERROR([Building with udev requested but libudev not found])
	fi
fi
AM_CONDITIONAL(LIBUDEV, test x$LIBUDEV = xyes)

SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"

AC_MSG_CHECKING([whether to include GLAMOR support])
AC_ARG_ENABLE(glamor,
	      AS_HELP_STRING([--disable-glamor],
			     [Disable glamor, a new GL-based acceleration [default=enabled]]),
	      [GLAMOR="$enableval"],
	      [GLAMOR=yes])

if test "x$GLAMOR" != "xno"; then
	AC_CHECK_HEADERS([glamor.h], [GLAMOR_H="yes"], [GLAMOR_H="no"], [#include "xorg-server.h"])

	if test "x$GLAMOR_H" = xyes; then
		AC_CHECK_DECL(GLAMOR_NO_DRI3,
			      [GLAMOR_XSERVER="yes"], [GLAMOR_XSERVER="no"],
			      [#include "xorg-server.h"
			       #include "glamor.h"])

		AC_CHECK_DECL(glamor_glyphs_init,
			      [AC_DEFINE(HAVE_GLAMOR_GLYPHS_INIT, 1,
					 [Have glamor_glyphs_init API])], [],
			      [#include "xorg-server.h"
			       #include "glamor.h"])

		AC_CHECK_DECL(glamor_egl_destroy_textured_pixmap,
			      [AC_DEFINE(HAVE_GLAMOR_EGL_DESTROY_TEXTURED_PIXMAP, 1,
					 [Have glamor_egl_destroy_textured_pixmap API])], [],
			      [#include "xorg-server.h"
			       #include "glamor.h"])
	fi

	if test "x$GLAMOR_XSERVER" != xyes; then
		PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.6.0])
		PKG_CHECK_MODULES(LIBGLAMOR_EGL, [glamor-egl])
	fi
	AC_DEFINE(USE_GLAMOR, 1, [Enable glamor acceleration])
else
	AC_MSG_RESULT([$GLAMOR])
fi
AM_CONDITIONAL(GLAMOR, test x$GLAMOR != xno)

AC_CHECK_DECL(fbGlyphs,
	      [AC_DEFINE(HAVE_FBGLYPHS, 1, [Have fbGlyphs API])], [],
	      [#include <X11/Xmd.h>
	       #include <X11/Xfuncproto.h>
	       #include <X11/extensions/renderproto.h>
	       #include <xorg-server.h>
	       #include <picture.h>
	       #include <glyphstr.h>
	       #include <fbpict.h>])

AC_CHECK_DECL(xf86CursorResetCursor,
	      [AC_DEFINE(HAVE_XF86_CURSOR_RESET_CURSOR, 1,
	      [Have xf86CursorResetCursor API])], [],
	      [#include <xorg-server.h>
	       #include <xf86Cursor.h>])

AC_CHECK_DECL(xorg_list_init,
	      [AC_DEFINE(HAVE_XORG_LIST, 1, [Have xorg_list API])], [],
	      [#include <X11/Xdefs.h>
	      #include "xorg-server.h"
	      #include "list.h"])

AC_CHECK_HEADERS([misyncshm.h], [], [],
                 [#include <X11/Xdefs.h>
	          #include <X11/Xfuncproto.h>
	          #include <xorg-server.h>
		  #include <screenint.h>])

AC_CHECK_HEADERS([present.h], [], [],
		 [#include <X11/Xmd.h>
		 #include <X11/Xproto.h>
		 #include <X11/X.h>
		 #include "xorg-server.h"])

AC_CHECK_HEADERS([dri3.h], [], [],
		 [#include <X11/Xmd.h>
		 #include <xorg-server.h>])

CPPFLAGS="$SAVE_CPPFLAGS"

PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.8.0])
XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS"

# Checks for headers/macros for byte swapping
# Known variants:
#	<byteswap.h> bswap_16, bswap_32, bswap_64  (glibc)
#	<sys/endian.h> __swap16, __swap32, __swap64 (OpenBSD)
#	<sys/endian.h> bswap16, bswap32, bswap64 (other BSD's)
#	and a fallback to local macros if none of the above are found

# if <byteswap.h> is found, assume it's the correct version
AC_CHECK_HEADERS([byteswap.h])

# if <sys/endian.h> is found, have to check which version
AC_CHECK_HEADER([sys/endian.h], [HAVE_SYS_ENDIAN_H="yes"], [HAVE_SYS_ENDIAN_H="no"])

if test "x$HAVE_SYS_ENDIAN_H" = "xyes" ; then
	AC_MSG_CHECKING([for __swap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <sys/endian.h>
 ], [
int a = 1, b;
b = __swap16(a);
 ])
], [SYS_ENDIAN__SWAP='yes'], [SYS_ENDIAN__SWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN__SWAP])

	AC_MSG_CHECKING([for bswap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <sys/endian.h>
 ], [
int a = 1, b;
b = bswap16(a);
 ])
], [SYS_ENDIAN_BSWAP='yes'], [SYS_ENDIAN_BSWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN_BSWAP])

    	if test "$SYS_ENDIAN_BSWAP" = "yes" ; then
		USE_SYS_ENDIAN_H=yes
		BSWAP=bswap
	else	
	    	if test "$SYS_ENDIAN__SWAP" = "yes" ; then
			USE_SYS_ENDIAN_H=yes
			BSWAP=__swap
		else
			USE_SYS_ENDIAN_H=no
		fi
	fi

	if test "$USE_SYS_ENDIAN_H" = "yes" ; then
	    AC_DEFINE([USE_SYS_ENDIAN_H], 1, 
		[Define to use byteswap macros from <sys/endian.h>])
	    AC_DEFINE_UNQUOTED([bswap_16], ${BSWAP}16, 
			[Define to 16-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_32], ${BSWAP}32, 
			[Define to 32-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_64], ${BSWAP}64, 
			[Define to 64-bit byteswap macro])
	fi
fi

AC_SUBST([moduledir])

DRIVER_NAME=ati
AC_SUBST([DRIVER_NAME])

AC_MSG_NOTICE(
[The atimisc sub-driver has been split out to xf86-video-mach64:]
[    git://anongit.freedesktop.org/git/xorg/driver/xf86-video-mach64]
[Please install that driver as well for mach64-based cards.]
)

AC_MSG_NOTICE(
[The r128 sub-driver has been split out to xf86-video-r128:]
[    git://anongit.freedesktop.org/git/xorg/driver/xf86-video-r128]
[Please install that driver as well for rage128-based cards.]
)

AC_CONFIG_FILES([
                Makefile
                src/Makefile
                man/Makefile
])
AC_OUTPUT

dnl
dnl Output some configuration info for the user
dnl
echo ""
echo "        prefix:              $prefix"
echo "        exec_prefix:         $exec_prefix"
echo "        libdir:              $libdir"
echo "        includedir:          $includedir"

echo ""
echo "        CFLAGS:              $CFLAGS"
echo "        CXXFLAGS:            $CXXFLAGS"
echo "        Macros:              $DEFINES"

echo ""
echo "        Run '${MAKE-make}' to build xf86-video-ati"
echo ""
@


1.13
log
@Update to xf86-video-ati 7.6.1. ok jsg@@
@
text
@d26 1
a26 1
        [7.6.1],
d78 1
a78 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.8 xproto fontsproto xf86driproto $REQUIRED_MODULES])
d122 6
d149 6
@


1.12
log
@Update to xf86-video-ati 7.5.0. Discussed with jsg@@
@
text
@d26 1
a26 1
        [7.5.0],
d78 1
a78 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.7 xproto fontsproto xf86driproto $REQUIRED_MODULES])
d116 6
d134 31
a164 12
AC_CHECK_HEADERS([list.h],
		 [have_list_h="yes"], [have_list_h="no"],
		 [#include <X11/Xdefs.h>
		  #include "xorg-server.h"])

if test "x$have_list_h" = xyes; then
    AC_CHECK_DECL(xorg_list_init,
		  [AC_DEFINE(HAVE_XORG_LIST, 1, [Have xorg_list API])], [],
		  [#include <X11/Xdefs.h>
		   #include "xorg-server.h"
		   #include "list.h"])
fi
@


1.11
log
@Update to xf86-video-ati 7.3.0. Tested by jsg@@ ajacoutot@@.
@
text
@d26 1
a26 1
        [7.3.0],
d74 1
a74 1
PKG_CHECK_MODULES(LIBDRM, [libdrm >= 2.4.46])
d107 1
a107 2
AC_MSG_RESULT([$GLAMOR])
AM_CONDITIONAL(GLAMOR, test x$GLAMOR != xno)
d109 13
a121 2
	PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.6.0])
	PKG_CHECK_MODULES(LIBGLAMOR_EGL, [glamor-egl])
d123 2
d126 1
@


1.10
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@d26 1
a26 1
        [7.2.0],
d103 2
a104 2
	      AS_HELP_STRING([--enable-glamor],
			     [Enable glamor, a new GL-based acceleration [default=no]]),
d106 1
a106 1
	      [GLAMOR=no])
d110 1
a110 1
	PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.3.1])
@


1.9
log
@Make it possible to build radeon drivers without XAA.
@
text
@d26 1
a26 1
        [6.14.6],
a32 6
# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

d41 6
a66 17
AC_ARG_ENABLE(dri, AS_HELP_STRING([--disable-dri],
                                  [Disable DRI support [[default=auto]]]),
              [DRI="$enableval"],
              [DRI=auto])

AC_ARG_ENABLE(exa,
              AS_HELP_STRING([--disable-exa],
                             [Disable EXA support [[default=enabled]]]),
              [EXA="$enableval"],
              [EXA=yes])

AC_ARG_ENABLE(kms,
              AS_HELP_STRING([--disable-kms],
                             [Disable KMS support [[default=enabled]]]),
              [DRM_MODE="$enableval"],
              [DRM_MODE=yes])

d73 4
d78 1
a78 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.3 xproto fontsproto $REQUIRED_MODULES])
d84 10
a93 61
# Checks for libraries.


if test "$DRI" != no; then
	PKG_CHECK_MODULES(DRI, [libdrm >= 2.2 xf86driproto])
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$XORG_CFLAGS $DRI_CFLAGS"
	AC_CHECK_HEADER([dri.h],
                      [have_dri_h="yes"], [have_dri_h="no"],[-])
	AC_CHECK_HEADER([sarea.h],
                      [have_sarea_h="yes"], [have_sarea_h="no"],[-])
	AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[
#include <xorg-server.h>
#include <dristruct.h>
                      ]])],
                      [have_dristruct_h="yes"], [have_dristruct_h="no"],[-])
	AC_CHECK_HEADER([damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"],[-])
	CPPFLAGS="$save_CPPFLAGS"
fi

AC_MSG_CHECKING([whether to include DRI support])
if test x$DRI = xauto; then
	if test "$have_dri_h" = yes -a \
                "$have_sarea_h" = yes -a \
                "$have_dristruct_h" = yes; then
		DRI="yes"
	else
		DRI="no"
	fi
fi
AC_MSG_RESULT([$DRI])

AM_CONDITIONAL(DRI, test x$DRI = xyes)
if test "$DRI" = yes; then
        AC_DEFINE(XF86DRI,1,[Enable DRI driver support])
        AC_DEFINE(XF86DRI_DEVEL,1,[Enable developmental DRI driver support])
	if test "$have_damage_h" = yes; then
		AC_DEFINE(DAMAGE,1,[Use Damage extension])
	fi

        save_CFLAGS="$CFLAGS"
        CFLAGS="$XORG_CFLAGS $DRI_CFLAGS $CFLAGS"
	if test "$DRM_MODE" = yes; then
	   	AC_CHECK_HEADER(xf86drmMode.h,[DRM_MODE=yes],[DRM_MODE=no],[#include <stdint.h>
#include <stdlib.h>])
		if test "x$DRM_MODE" = xyes; then
			PKG_CHECK_MODULES(LIBDRM_RADEON, [xorg-server >= 1.6.2 libdrm >= 2.4.36 libdrm_radeon],
			[LIBDRM_RADEON=yes], [LIBDRM_RADEON=no])

			if test "x$LIBDRM_RADEON" = xyes; then
			   	AC_DEFINE(XF86DRM_MODE,1,[DRM kernel modesetting])
				AC_DEFINE(RADEON_DRI2, 1,[Enable DRI2 code])
                        else
                                DRM_MODE=no
			fi
			PKG_CHECK_MODULES(LIBUDEV, [libudev], [LIBUDEV=yes], [LIBUDEV=no])
			if test "x$LIBUDEV" = xyes; then
			       AC_DEFINE(HAVE_LIBUDEV, 1,[libudev support])
			fi
        	fi
a94 3
	CFLAGS="$save_CFLAGS"
else
	DRM_MODE=no
a95 1
AM_CONDITIONAL(DRM_MODE, test x$DRM_MODE = xyes)
a97 14
# Properly handle EXA.
AC_MSG_CHECKING([whether to enable EXA support])
if test "x$EXA" = xyes; then
        AC_MSG_RESULT(yes)

        SAVE_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
        AC_CHECK_HEADER(exa.h,
                       [have_exa_h="yes"], [have_exa_h="no"])
        CPPFLAGS="$SAVE_CPPFLAGS"
else
        AC_MSG_RESULT(no)
fi 

d100 13
a112 15
if test "x$have_exa_h" = xyes; then
        AC_MSG_CHECKING([whether EXA version is at least 2.0.0])
        AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[
#include "exa.h"
#if EXA_VERSION_MAJOR < 2
#error OLD EXA!
#endif
                          ]])],
                          [USE_EXA=yes],
                          [USE_EXA=no])
        AC_MSG_RESULT($USE_EXA)

        if test "x$USE_EXA" = xyes; then
                AC_DEFINE(USE_EXA, 1, [Build support for Exa])
        fi
a114 35
AC_CHECK_DECL(xf86XVFillKeyHelperDrawable,
	      [AC_DEFINE(HAVE_XV_DRAWABLE_HELPER, 1, [Have xf86XVFillKeyHelperDrawable prototype])],
	      [],
	      [#include <xf86xv.h>])

AC_CHECK_DECL(xf86ModeBandwidth,
	      [AC_DEFINE(HAVE_XF86MODEBANDWIDTH, 1, [Have xf86ModeBandwidth prototype])],
	      [],
	      [#include "xorg-server.h"
	       #include "xf86Modes.h"])

AC_CHECK_DECL(xf86_crtc_clip_video_helper,
	      [AC_DEFINE(HAVE_XF86CRTCCLIPVIDEOHELPER, 1, [Have xf86_crtc_clip_video_helper prototype])],
	      [],
	      [#include <X11/Xmd.h>
	       #include "xorg-server.h"
	       #include "xf86i2c.h"
	       #include "xf86Crtc.h"])

AC_CHECK_DECL(xf86RotateFreeShadow,
	      [AC_DEFINE(HAVE_FREE_SHADOW, 1, [have new FreeShadow API])],
	      [],
	      [#include <xorg-server.h>
               #include <windowstr.h>
	       #include <xf86Crtc.h>])

AC_CHECK_DECL(pci_device_enable,
	      [AC_DEFINE(HAVE_PCI_DEVICE_ENABLE, 1, [Have pci_device_enable prototype])],
	      [],
	      [#include <pciaccess.h>])

AC_CHECK_DECL(XSERVER_LIBPCIACCESS,
	      [XSERVER_LIBPCIACCESS=yes],[XSERVER_LIBPCIACCESS=no],
	      [#include "xorg-server.h"])

a127 21
AC_ARG_ENABLE(xaa,
              AS_HELP_STRING([--enable-xaa],
                             [Enable legacy X Acceleration Architecture (XAA) [default=auto]]),
              [XAA="$enableval"],
              [XAA=auto])
if test "x$XAA" != xno; then
        save_CFLAGS=$CFLAGS
        save_CPPFLAGS=$CPPFLAGS
        CFLAGS=$XORG_CFLAGS
        CPPFLAGS="$XORG_CFLAGS"
        AC_CHECK_HEADERS([xaa.h], XAA=yes, XAA=no)
        CFLAGS=$save_CFLAGS
        CPPFLAGS=$save_CPPFLAGS
fi
AC_MSG_CHECKING([whether to include XAA support])
AM_CONDITIONAL(XAA, test "x$XAA" = xyes)
if test "x$XAA" = xyes; then
        AC_DEFINE(USE_XAA, test "x$XAA" = xyes, [Build support for XAA])
fi
AC_MSG_RESULT([$XAA])

d130 2
a131 9
AM_CONDITIONAL(USE_EXA, test "x$USE_EXA" = xyes)

AM_CONDITIONAL(XF86DRM_MODE, test "x$LIBDRM_RADEON" = xyes)

if test "x$XSERVER_LIBPCIACCESS" = xyes; then
    PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.8.0])
    XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS"
fi
AM_CONDITIONAL(XSERVER_LIBPCIACCESS, test "x$XSERVER_LIBPCIACCESS" = xyes)
a192 5
case $host_os in
  *linux*)
  AC_DEFINE(FGL_LINUX, 1, [Use linux pragma pack]) ;;
esac

a224 4


echo ""
echo "        Kernel modesetting:  $DRM_MODE"
@


1.8
log
@Update to xf86-video-ati 6.14.6. Tested by mpi@@, brad, eric@@, ajacoutot@@.
@
text
@a165 2
AC_DEFINE(USE_XAA, 1, [Build support for XAA])

d246 21
@


1.7
log
@Update to xf86-video-ati 6.14.4. Tested by jasper@@, krw@@, mpi@@, shadchin@@
@
text
@d26 1
a26 1
        [6.14.4],
d144 1
a144 1
			PKG_CHECK_MODULES(LIBDRM_RADEON, [xorg-server >= 1.6.2 libdrm >= 2.4.33 libdrm_radeon],
@


1.6
log
@Re-update xf86-video-ati to 6.14.3.

Because of ati.c revision 1.5, it will not be selected by
autoconfiguration code, so people who want to run this version of the
driver on their radeon cards need an explicit "Device" section in
xorg.conf.
@
text
@d26 1
a26 1
        [6.14.3],
d144 1
a144 1
			PKG_CHECK_MODULES(LIBDRM_RADEON, [xorg-server >= 1.6.2 libdrm_radeon],
d237 1
a237 1
		 [], [],
d240 8
@


1.5
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@d23 2
a24 1
AC_PREREQ(2.57)
d26 1
a26 1
        6.12.2,
d28 1
a28 1
        xf86-video-ati)
d31 8
a38 1
AM_CONFIG_HEADER([config.h])
d41 3
a43 1
AM_INIT_AUTOMAKE([dist-bzip2])
d47 1
a47 1
# Checks for programs.
d50 3
a52 1
AC_PROG_CC
d60 1
d62 1
a62 1
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
d67 1
a67 1
AC_ARG_ENABLE(dri, AC_HELP_STRING([--disable-dri],
d73 1
a73 1
              AC_HELP_STRING([--disable-exa],
d78 5
a82 4
AC_ARG_WITH(xserver-source,AC_HELP_STRING([--with-xserver-source=XSERVER_SOURCE],
                                          [Path to X server source tree]),
                           [ XSERVER_SOURCE="$withval" ],
                           [ XSERVER_SOURCE="" ])
d84 1
a84 2
# Checks for extensions
XORG_DRIVER_CHECK_EXT(XINERAMA, xineramaproto)
d90 6
a95 3
# Checks for pkg-config packages
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.2 xproto fontsproto $REQUIRED_MODULES])
sdkdir=$(pkg-config --variable=sdkdir xorg-server)
a98 2
# Checks for header files.
AC_HEADER_STDC
d101 15
a115 8
	AC_CHECK_FILE([${sdkdir}/dri.h],
                      [have_dri_h="yes"], [have_dri_h="no"])
	AC_CHECK_FILE([${sdkdir}/sarea.h],
                      [have_sarea_h="yes"], [have_sarea_h="no"])
	AC_CHECK_FILE([${sdkdir}/dristruct.h],
                      [have_dristruct_h="yes"], [have_dristruct_h="no"])
	AC_CHECK_FILE([${sdkdir}/damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"])
a131 1
	PKG_CHECK_MODULES(DRI, [libdrm >= 2.2 xf86driproto])
d137 25
d163 2
a164 5

save_CFLAGS="$CFLAGS"
CFLAGS="$XORG_CFLAGS"
AC_CHECK_HEADER(xf86Modes.h,[XMODES=yes],[XMODES=no],[#include "xorg-server.h"])
CFLAGS="$save_CFLAGS"
d236 4
a239 41
AM_CONDITIONAL(XMODES, test "x$XMODES" = xno)

if test "x$XSERVER_SOURCE" = x; then
        if test -d ../../xserver; then
                XSERVER_SOURCE="`cd ../../xserver && pwd`"
        fi
fi

if test -d "$XSERVER_SOURCE"; then
        case "$XSERVER_SOURCE" in
        /*)
                ;;
        *)
                XSERVER_SOURCE="`cd $XSERVER_SOURCE && pwd`"
        esac
        if test -f src/modes/xf86Modes.h; then
                :
        else
                ln -sf $XSERVER_SOURCE/hw/xfree86/modes src/modes
        fi

        if test -f src/parser/xf86Parser.h; then
                :
        else
                ln -sf $XSERVER_SOURCE/hw/xfree86/parser src/parser
        fi
fi
if test "x$XMODES" = xyes; then
        AC_MSG_NOTICE([X server has new mode code])
        AC_DEFINE(XMODES, 1,[X server has built-in mode code])
        XMODES_CFLAGS=
else
        if test -f src/modes/xf86Modes.h -a -f src/parser/xf86Parser.h; then
                AC_MSG_NOTICE([X server is missing new mode code, using local copy])
        else
                AC_MSG_ERROR([Must have X server >= 1.3 source tree for mode setting code. Please specify --with-xserver-source])
        fi
        XMODES_CFLAGS='-DXF86_MODES_RENAME -I$(top_srcdir)/src -I$(top_srcdir)/src/modes -I$(top_srcdir)/src/parser'
fi

AC_SUBST([XMODES_CFLAGS])
d245 2
a317 2
AC_SUBST([XORG_CFLAGS])
AC_SUBST([DRI_CFLAGS])
a322 4
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
XORG_CHECK_LINUXDOC

d335 4
a338 4
AC_OUTPUT([
	Makefile
	src/Makefile
	man/Makefile
d340 23
@


1.4
log
@Update to xf86-video-ati 6.14.3. Tested by many.
@
text
@d23 1
a23 2
# Initialize Autoconf
AC_PREREQ([2.60])
d25 1
a25 1
        [6.14.3],
d27 1
a27 1
        [xf86-video-ati])
d30 1
a30 8
AC_CONFIG_HEADERS([config.h])

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

d33 1
a33 3
# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AC_SYS_LARGEFILE
d37 1
a37 1
# Initialize libtool
d40 1
a40 3

# Checks for programs.
AM_PROG_CC_C_O
a47 1
# Define a configure option for an alternate module directory
d49 1
a49 1
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
d54 1
a54 1
AC_ARG_ENABLE(dri, AS_HELP_STRING([--disable-dri],
d60 1
a60 1
              AS_HELP_STRING([--disable-exa],
d65 4
a68 5
AC_ARG_ENABLE(kms,
              AS_HELP_STRING([--disable-kms],
                             [Disable KMS support [[default=enabled]]]),
              [DRM_MODE="$enableval"],
              [DRM_MODE=yes])
d70 2
a71 1
# Store the list of server defined optional extensions in REQUIRED_MODULES
d77 3
a79 6
# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.3 xproto fontsproto $REQUIRED_MODULES])
PKG_CHECK_MODULES(XEXT, [xextproto >= 7.0.99.1],
                  HAVE_XEXTPROTO_71="yes"; AC_DEFINE(HAVE_XEXTPROTO_71, 1, [xextproto 7.1 available]),
                  HAVE_XEXTPROTO_71="no")
AM_CONDITIONAL(HAVE_XEXTPROTO_71, [ test "$HAVE_XEXTPROTO_71" = "yes" ])
d83 2
d87 8
a94 15
	PKG_CHECK_MODULES(DRI, [libdrm >= 2.2 xf86driproto])
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$XORG_CFLAGS $DRI_CFLAGS"
	AC_CHECK_HEADER([dri.h],
                      [have_dri_h="yes"], [have_dri_h="no"],[-])
	AC_CHECK_HEADER([sarea.h],
                      [have_sarea_h="yes"], [have_sarea_h="no"],[-])
	AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[
#include <xorg-server.h>
#include <dristruct.h>
                      ]])],
                      [have_dristruct_h="yes"], [have_dristruct_h="no"],[-])
	AC_CHECK_HEADER([damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"],[-])
	CPPFLAGS="$save_CPPFLAGS"
d111 1
d117 1
d119 4
a122 27
        save_CFLAGS="$CFLAGS"
        CFLAGS="$XORG_CFLAGS $DRI_CFLAGS $CFLAGS"
	if test "$DRM_MODE" = yes; then
	   	AC_CHECK_HEADER(xf86drmMode.h,[DRM_MODE=yes],[DRM_MODE=no],[#include <stdint.h>
#include <stdlib.h>])
		if test "x$DRM_MODE" = xyes; then
			PKG_CHECK_MODULES(LIBDRM_RADEON, [xorg-server >= 1.6.2 libdrm_radeon],
			[LIBDRM_RADEON=yes], [LIBDRM_RADEON=no])

			if test "x$LIBDRM_RADEON" = xyes; then
			   	AC_DEFINE(XF86DRM_MODE,1,[DRM kernel modesetting])
				AC_DEFINE(RADEON_DRI2, 1,[Enable DRI2 code])
                        else
                                DRM_MODE=no
			fi
			PKG_CHECK_MODULES(LIBUDEV, [libudev], [LIBUDEV=yes], [LIBUDEV=no])
			if test "x$LIBUDEV" = xyes; then
			       AC_DEFINE(HAVE_LIBUDEV, 1,[libudev support])
			fi
        	fi
	fi
	CFLAGS="$save_CFLAGS"
else
	DRM_MODE=no
fi
AM_CONDITIONAL(DRM_MODE, test x$DRM_MODE = xyes)
AM_CONDITIONAL(LIBUDEV, test x$LIBUDEV = xyes)
d194 41
a234 4
AC_CHECK_HEADERS([list.h],
		 [], [],
		 [#include <X11/Xdefs.h>
		  #include "xorg-server.h"])
a239 2
AM_CONDITIONAL(XF86DRM_MODE, test "x$LIBDRM_RADEON" = xyes)

d311 2
d318 4
d334 4
a337 4
AC_CONFIG_FILES([
                Makefile
                src/Makefile
                man/Makefile
a338 23
AC_OUTPUT

dnl
dnl Output some configuration info for the user
dnl
echo ""
echo "        prefix:              $prefix"
echo "        exec_prefix:         $exec_prefix"
echo "        libdir:              $libdir"
echo "        includedir:          $includedir"


echo ""
echo "        Kernel modesetting:  $DRM_MODE"

echo ""
echo "        CFLAGS:              $CFLAGS"
echo "        CXXFLAGS:            $CXXFLAGS"
echo "        Macros:              $DEFINES"

echo ""
echo "        Run '${MAKE-make}' to build xf86-video-ati"
echo ""
@


1.3
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@d23 2
a24 1
AC_PREREQ(2.57)
d26 1
a26 1
        6.12.2,
d28 1
a28 1
        xf86-video-ati)
d31 8
a38 1
AM_CONFIG_HEADER([config.h])
d41 3
a43 1
AM_INIT_AUTOMAKE([dist-bzip2])
d47 1
a47 1
# Checks for programs.
d50 3
a52 1
AC_PROG_CC
d60 1
d62 1
a62 1
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
d67 1
a67 1
AC_ARG_ENABLE(dri, AC_HELP_STRING([--disable-dri],
d73 1
a73 1
              AC_HELP_STRING([--disable-exa],
d78 5
a82 4
AC_ARG_WITH(xserver-source,AC_HELP_STRING([--with-xserver-source=XSERVER_SOURCE],
                                          [Path to X server source tree]),
                           [ XSERVER_SOURCE="$withval" ],
                           [ XSERVER_SOURCE="" ])
d84 1
a84 2
# Checks for extensions
XORG_DRIVER_CHECK_EXT(XINERAMA, xineramaproto)
d90 6
a95 3
# Checks for pkg-config packages
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.2 xproto fontsproto $REQUIRED_MODULES])
sdkdir=$(pkg-config --variable=sdkdir xorg-server)
a98 2
# Checks for header files.
AC_HEADER_STDC
d101 15
a115 8
	AC_CHECK_FILE([${sdkdir}/dri.h],
                      [have_dri_h="yes"], [have_dri_h="no"])
	AC_CHECK_FILE([${sdkdir}/sarea.h],
                      [have_sarea_h="yes"], [have_sarea_h="no"])
	AC_CHECK_FILE([${sdkdir}/dristruct.h],
                      [have_dristruct_h="yes"], [have_dristruct_h="no"])
	AC_CHECK_FILE([${sdkdir}/damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"])
a131 1
	PKG_CHECK_MODULES(DRI, [libdrm >= 2.2 xf86driproto])
d137 25
d163 2
a164 5

save_CFLAGS="$CFLAGS"
CFLAGS="$XORG_CFLAGS"
AC_CHECK_HEADER(xf86Modes.h,[XMODES=yes],[XMODES=no],[#include "xorg-server.h"])
CFLAGS="$save_CFLAGS"
d236 4
a239 41
AM_CONDITIONAL(XMODES, test "x$XMODES" = xno)

if test "x$XSERVER_SOURCE" = x; then
        if test -d ../../xserver; then
                XSERVER_SOURCE="`cd ../../xserver && pwd`"
        fi
fi

if test -d "$XSERVER_SOURCE"; then
        case "$XSERVER_SOURCE" in
        /*)
                ;;
        *)
                XSERVER_SOURCE="`cd $XSERVER_SOURCE && pwd`"
        esac
        if test -f src/modes/xf86Modes.h; then
                :
        else
                ln -sf $XSERVER_SOURCE/hw/xfree86/modes src/modes
        fi

        if test -f src/parser/xf86Parser.h; then
                :
        else
                ln -sf $XSERVER_SOURCE/hw/xfree86/parser src/parser
        fi
fi
if test "x$XMODES" = xyes; then
        AC_MSG_NOTICE([X server has new mode code])
        AC_DEFINE(XMODES, 1,[X server has built-in mode code])
        XMODES_CFLAGS=
else
        if test -f src/modes/xf86Modes.h -a -f src/parser/xf86Parser.h; then
                AC_MSG_NOTICE([X server is missing new mode code, using local copy])
        else
                AC_MSG_ERROR([Must have X server >= 1.3 source tree for mode setting code. Please specify --with-xserver-source])
        fi
        XMODES_CFLAGS='-DXF86_MODES_RENAME -I$(top_srcdir)/src -I$(top_srcdir)/src/modes -I$(top_srcdir)/src/parser'
fi

AC_SUBST([XMODES_CFLAGS])
d245 2
a317 2
AC_SUBST([XORG_CFLAGS])
AC_SUBST([DRI_CFLAGS])
a322 4
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
XORG_CHECK_LINUXDOC

d335 4
a338 4
AC_OUTPUT([
	Makefile
	src/Makefile
	man/Makefile
d340 23
@


1.2
log
@Long awaited update of xf86-video-ati to 6.9.0.

the rage128 and mach64 drivers were split out of this driver just after
the 6.8.0 release, these drivers will be commited separately.

MergedFb mode is gone, so please use xrandr if you used to use it.

ok matthieu@@.
@
text
@d25 1
a25 1
        6.9.0,
a74 1
XORG_DRIVER_CHECK_EXT(XF86MISC, xf86miscproto)
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
        6.6.3,
a27 9
AC_DEFINE_UNQUOTED([ATI_VERSION_MAJOR],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^\([[0-9]]\)\.[[0-9]]\.[[0-9]]/\1/')],
		   [Major version])
AC_DEFINE_UNQUOTED([ATI_VERSION_MINOR],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^[[0-9]]\.\([[0-9]]\)\.[[0-9]]/\1/')],
		   [Minor version])
AC_DEFINE_UNQUOTED([ATI_VERSION_PATCH],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^[[0-9]]\.[[0-9]]\.\([[0-9]]\)/\1/')],
		   [Patch version])
d42 4
d61 1
a61 1
                             [Disable EXA support [[default enabled]]]),
d65 5
d79 1
a79 1
PKG_CHECK_MODULES(XORG, [xorg-server xproto fontsproto $REQUIRED_MODULES])
d94 2
d112 1
a112 1
	PKG_CHECK_MODULES(DRI, [libdrm >= 2.0 xf86driproto])
d115 3
d120 4
a123 67
# Note that this is sort of inverted from drivers/ati/Imakefile in
# the monolith.  We test for foo, not for !foo (i.e. ATMISC_CPIO, not
# ATIMISC_AVOID_CPIO), but the defines are negative.  So beware.  Oh yeah,
# TV_OUT is the special case where it's a positive define, not AVOID_TV_OUT.

# AVOID_CPIO: Only x86, amd64, and alpha are cool with CPIO.  It needs a
# little-endian, undirected PIO space of at least 64kB.
# AVOID_NON_PCI: Platforms which don't deal with PCI master aborts should
# stick to PCI-only probing, stick their fingers in their ears, and pretend
# that ISA cards simply don't exist.
# AVOID_DGA: ???
# ATI_TV_OUT: This only works on x86.

ATIMISC_CPIO=no
ATIMISC_NON_PCI=yes
ATIMISC_DGA=yes
ATIMISC_TV_OUT=no

case $host_cpu in
  i*86)
    ATIMISC_TV_OUT=yes
    ATIMISC_CPIO=yes
    ;;
  x86_64|amd64|alpha|ia64)
    ATIMISC_CPIO=yes
    ;;
  sparc)
    ATIMISC_DGA=no
    ;;
  powerpc)
    ATIMISC_NON_PCI=no
    ;;
  *)
    ;;
esac

AC_MSG_CHECKING([whether to include PIO support])
AM_CONDITIONAL(ATIMISC_CPIO, test "x$ATIMISC_CPIO" = xyes)
if test "x$ATIMISC_CPIO" = xyes; then
	AC_MSG_RESULT([yes, PIO])
else
	AC_DEFINE(AVOID_CPIO, 1, [Avoid PIO and use MMIO for atimisc.])
	AC_MSG_RESULT([no, MMIO])
fi

AC_MSG_CHECKING([whether to include support for non-PCI devices])
AM_CONDITIONAL(ATIMISC_NON_PCI, test "x$ATIMISC_NON_PCI" = xyes)
if test "x$ATI_AVOID_NON_PCI" = xyes; then
	AC_MSG_RESULT([yes, PCI and ISA])
else
	AC_DEFINE(AVOID_NON_PCI, 1, [Only probe PCI cards; do not probe ISA.])
	AC_MSG_RESULT([no, PCI only])
fi

AC_MSG_CHECKING([whether to include DGA support])
AC_MSG_RESULT([$ATIMISC_DGA])
AM_CONDITIONAL(ATIMISC_DGA, test "x$ATIMISC_DGA" = xyes)
if ! test "x$ATIMISC_DGA" = xyes; then
	AC_DEFINE(AVOID_DGA, 1, [Do not build DGA support.])
fi

AC_MSG_CHECKING([whether to include TV Out support])
AC_MSG_RESULT([$ATIMISC_TV_OUT])
AM_CONDITIONAL(ATIMISC_TV_OUT, test "x$ATIMISC_TV_OUT" = xyes)
if test "x$ATIMISC_TV_OUT" = xyes; then
	AC_DEFINE(TV_OUT, 1, [Build TV-Out support for atimisc.])
fi
d159 78
d241 71
d322 12
@


1.1.1.1
log
@Importing xf86-video-ati 6.6.3
@
text
@@
