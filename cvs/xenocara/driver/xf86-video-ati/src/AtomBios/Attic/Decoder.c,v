head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.16
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.08.16.17.04.16;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.12.15.18.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@/*
 * Copyright 2006-2007 Advanced Micro Devices, Inc.  
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**

Module Name:

    Decoder.c
    
Abstract:

		Commands Decoder

Revision History:

	NEG:24.09.2002	Initiated.
--*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <X11/Xos.h>
#include "xorg-server.h"

#include "Decoder.h"

#ifndef DISABLE_EASF
	#include "easf.h"
#endif



#define INDIRECT_IO_TABLE (((UINT16)(ULONG_PTR)&((ATOM_MASTER_LIST_OF_DATA_TABLES*)0)->IndirectIOAccess)/sizeof(TABLE_UNIT_TYPE) )
extern COMMANDS_PROPERTIES CallTable[];


UINT8 ProcessCommandProperties(PARSER_TEMP_DATA STACK_BASED *	pParserTempData)
{
  UINT8 opcode=((COMMAND_HEADER*)pParserTempData->pWorkingTableData->IP)->Opcode;
  pParserTempData->pWorkingTableData->IP+=CallTable[opcode].headersize;
  pParserTempData->ParametersType.Destination=CallTable[opcode].destination;
  pParserTempData->ParametersType.Source = pParserTempData->pCmd->Header.Attribute.Source;
  pParserTempData->CD_Mask.SrcAlignment=pParserTempData->pCmd->Header.Attribute.SourceAlignment;
  pParserTempData->CD_Mask.DestAlignment=pParserTempData->pCmd->Header.Attribute.DestinationAlignment;
  return opcode;
}

UINT16* GetCommandMasterTablePointer(DEVICE_DATA STACK_BASED*  pDeviceData)
{
	UINT16		*MasterTableOffset;
#ifndef DISABLE_EASF
	if (pDeviceData->format == TABLE_FORMAT_EASF)
	{
    /*
    make MasterTableOffset point to EASF_ASIC_SETUP_TABLE structure, including usSize.
    */
		MasterTableOffset = (UINT16 *) (pDeviceData->pBIOS_Image+(UINT16LE_TO_CPU(((EASF_ASIC_DESCRIPTOR*)pDeviceData->pBIOS_Image)->usAsicSetupTable_Offset));
	} else
#endif
	{
#ifndef		UEFI_BUILD
		MasterTableOffset = (UINT16 *)(UINT16LE_TO_CPU(*(UINT16 *)(pDeviceData->pBIOS_Image+OFFSET_TO_POINTER_TO_ATOM_ROM_HEADER)) + pDeviceData->pBIOS_Image);
		MasterTableOffset = (UINT16 *)((ULONG)UINT16LE_TO_CPU(((ATOM_ROM_HEADER *)MasterTableOffset)->usMasterCommandTableOffset) + pDeviceData->pBIOS_Image );
		MasterTableOffset =(UINT16 *) &(((ATOM_MASTER_COMMAND_TABLE *)MasterTableOffset)->ListOfCommandTables);
#else
	MasterTableOffset = (UINT16 *)(&(GetCommandMasterTable( )->ListOfCommandTables));
#endif
	}
	return MasterTableOffset;
}

UINT16* GetDataMasterTablePointer(DEVICE_DATA STACK_BASED*  pDeviceData)
{
	UINT16		*MasterTableOffset;
	
#ifndef		UEFI_BUILD
	MasterTableOffset = (UINT16 *)(UINT16LE_TO_CPU(*(UINT16 *)(pDeviceData->pBIOS_Image+OFFSET_TO_POINTER_TO_ATOM_ROM_HEADER)) + pDeviceData->pBIOS_Image);
	MasterTableOffset = (UINT16 *)((ULONG)(UINT16LE_TO_CPU(((ATOM_ROM_HEADER *)MasterTableOffset)->usMasterDataTableOffset)) + pDeviceData->pBIOS_Image );
	MasterTableOffset =(UINT16 *) &(((ATOM_MASTER_DATA_TABLE *)MasterTableOffset)->ListOfDataTables);
#else
	MasterTableOffset = (UINT16 *)(&(GetDataMasterTable( )->ListOfDataTables));
#endif
	return MasterTableOffset;
}


UINT8 GetTrueIndexInMasterTable(PARSER_TEMP_DATA STACK_BASED * pParserTempData, UINT8 IndexInMasterTable)
{
#ifndef DISABLE_EASF
	UINT16 i;
	if ( pParserTempData->pDeviceData->format == TABLE_FORMAT_EASF)
	{
/*
		Consider EASF_ASIC_SETUP_TABLE structure pointed by pParserTempData->pCmd as UINT16[]
		((UINT16*)pParserTempData->pCmd)[0] = EASF_ASIC_SETUP_TABLE.usSize;
		((UINT16*)pParserTempData->pCmd)[1+n*4] = usFunctionID;
		usFunctionID has to be shifted left by 2 before compare it to the value provided by caller.
*/
		for (i=1; (i < ((UINT16*)pParserTempData->pCmd)[0] >> 1);i+=4)
	  		if ((UINT8)(((UINT16*)pParserTempData->pCmd)[i] << 2)==(IndexInMasterTable & EASF_TABLE_INDEX_MASK)) return (i+1+(IndexInMasterTable & EASF_TABLE_ATTR_MASK));
		return 1;
	} else
#endif
	{
		return IndexInMasterTable;
	}
}

ATOM_TABLE_ATTRIBUTE GetCommandTableAttribute(UINT8 *pTableHeader)
{
  ATOM_TABLE_ATTRIBUTE_ACCESS lTableAccess;

  /* It's unclear whether this union trick breaks C aliasing rules,
   * however, it's explicitely permitted by gcc, and we have other
   * case where the code relies on a union being accessed by either
   * of the "ways" and stay consistent so if a compiler breaks this
   * assumption, it will probably need us to compile without strict
   * aliasing enforcement
	 */
	lTableAccess.sbfAccess = ((ATOM_COMMON_ROM_COMMAND_TABLE_HEADER *)pTableHeader)->TableAttribute;
	lTableAccess.susAccess = UINT16LE_TO_CPU(lTableAccess.susAccess);

	return lTableAccess.sbfAccess;
}

CD_STATUS ParseTable(DEVICE_DATA STACK_BASED* pDeviceData, UINT8 IndexInMasterTable)
{
	PARSER_TEMP_DATA	ParserTempData;
  WORKING_TABLE_DATA STACK_BASED* prevWorkingTableData;

  memset(&ParserTempData, 0, sizeof(PARSER_TEMP_DATA));
  ParserTempData.pDeviceData=(DEVICE_DATA*)pDeviceData;
#ifndef DISABLE_EASF
  if (pDeviceData->format == TABLE_FORMAT_EASF)
  {
      ParserTempData.IndirectIOTablePointer = 0;
  } else
#endif
  {
    ParserTempData.pCmd=(GENERIC_ATTRIBUTE_COMMAND*)GetDataMasterTablePointer(pDeviceData);
    ParserTempData.IndirectIOTablePointer=(UINT8*)((ULONG)(UINT16LE_TO_CPU(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[INDIRECT_IO_TABLE])) + pDeviceData->pBIOS_Image);
    ParserTempData.IndirectIOTablePointer+=sizeof(ATOM_COMMON_TABLE_HEADER);
  }

	ParserTempData.pCmd=(GENERIC_ATTRIBUTE_COMMAND*)GetCommandMasterTablePointer(pDeviceData);
    IndexInMasterTable=GetTrueIndexInMasterTable((PARSER_TEMP_DATA STACK_BASED *)&ParserTempData,IndexInMasterTable);
	if(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]!=0 )  // if the offset is not ZERO
	{
		ParserTempData.CommandSpecific.IndexInMasterTable=IndexInMasterTable;
		ParserTempData.Multipurpose.CurrentPort=ATI_RegsPort;
		ParserTempData.CurrentPortID=INDIRECT_IO_MM;
		ParserTempData.CurrentRegBlock=0;
		ParserTempData.CurrentFB_Window=0;
    prevWorkingTableData=NULL;
		ParserTempData.Status=CD_CALL_TABLE;

		do{
			
			if (ParserTempData.Status==CD_CALL_TABLE)
			{
				IndexInMasterTable=ParserTempData.CommandSpecific.IndexInMasterTable;
				if(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]!=0)  // if the offset is not ZERO
				{
				  ATOM_TABLE_ATTRIBUTE lTableAttr;
				  lTableAttr = GetCommandTableAttribute(UINT16LE_TO_CPU(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable])+pDeviceData->pBIOS_Image);
#ifndef		UEFI_BUILD
  					ParserTempData.pWorkingTableData =(WORKING_TABLE_DATA STACK_BASED*) AllocateWorkSpace(pDeviceData,
															      lTableAttr.WS_SizeInBytes+sizeof(WORKING_TABLE_DATA));
#else
				  ParserTempData.pWorkingTableData =(WORKING_TABLE_DATA STACK_BASED*) AllocateWorkSpace(pDeviceData,
															lTableAttr.WS_SizeInBytes+sizeof(WORKING_TABLE_DATA));
#endif
					if (ParserTempData.pWorkingTableData!=NULL)
					{
						ParserTempData.pWorkingTableData->pWorkSpace=(WORKSPACE_POINTER STACK_BASED*)((UINT8*)ParserTempData.pWorkingTableData+sizeof(WORKING_TABLE_DATA));
#ifndef		UEFI_BUILD
				      ParserTempData.pWorkingTableData->pTableHead  = (UINT8 *)(UINT16LE_TO_CPU(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable])+pDeviceData->pBIOS_Image);
#else
				      ParserTempData.pWorkingTableData->pTableHead  = (UINT8 *)(UINT16LE_TO_CPU(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]));
#endif
						ParserTempData.pWorkingTableData->IP=((UINT8*)ParserTempData.pWorkingTableData->pTableHead)+sizeof(ATOM_COMMON_ROM_COMMAND_TABLE_HEADER);
						ParserTempData.pWorkingTableData->prevWorkingTableData=prevWorkingTableData;
						prevWorkingTableData=ParserTempData.pWorkingTableData;
						ParserTempData.Status = CD_SUCCESS;
					} else ParserTempData.Status = CD_UNEXPECTED_BEHAVIOR;
				} else ParserTempData.Status = CD_EXEC_TABLE_NOT_FOUND;
			}
			if (!CD_ERROR(ParserTempData.Status))
			{
				ParserTempData.Status = CD_SUCCESS;
				while (!CD_ERROR_OR_COMPLETED(ParserTempData.Status))  
				{
					if (IS_COMMAND_VALID(((COMMAND_HEADER*)ParserTempData.pWorkingTableData->IP)->Opcode))
					{
						ParserTempData.pCmd = (GENERIC_ATTRIBUTE_COMMAND*)ParserTempData.pWorkingTableData->IP;
						
						if (IS_END_OF_TABLE(((COMMAND_HEADER*)ParserTempData.pWorkingTableData->IP)->Opcode))
						{
							ParserTempData.Status=CD_COMPLETED;
							prevWorkingTableData=ParserTempData.pWorkingTableData->prevWorkingTableData;
							
							FreeWorkSpace(pDeviceData, ParserTempData.pWorkingTableData);
							ParserTempData.pWorkingTableData=prevWorkingTableData;
							if (prevWorkingTableData!=NULL)
							{
								ATOM_TABLE_ATTRIBUTE lTableAttr;
								lTableAttr = GetCommandTableAttribute(ParserTempData.pWorkingTableData->pTableHead);
								ParserTempData.pDeviceData->pParameterSpace-=(lTableAttr.PS_SizeInBytes>>2);
							} 
							// if there is a parent table where to return, then restore PS_pointer to the original state
						}
						else
						{
							IndexInMasterTable=ProcessCommandProperties((PARSER_TEMP_DATA STACK_BASED *)&ParserTempData);
							(*CallTable[IndexInMasterTable].function)((PARSER_TEMP_DATA STACK_BASED *)&ParserTempData);
#if (PARSER_TYPE!=DRIVER_TYPE_PARSER)
							BIOS_STACK_MODIFIER();
#endif
						}
					}
					else
					{
						ParserTempData.Status=CD_INVALID_OPCODE;
						break;
					}
					
				}	// while
			}	// if
			else
				break;
		} while (prevWorkingTableData!=NULL);
		if (ParserTempData.Status == CD_COMPLETED) return CD_SUCCESS;
		return ParserTempData.Status;
	} else return CD_SUCCESS;
}

// EOF

@


1.2
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@@


1.1
log
@Long awaited update of xf86-video-ati to 6.9.0.

the rage128 and mach64 drivers were split out of this driver just after
the 6.8.0 release, these drivers will be commited separately.

MergedFb mode is gone, so please use xrandr if you used to use it.

ok matthieu@@.
@
text
@d43 1
a43 1

a45 3
#include "atombios.h"
#include "CD_binding.h"
#include "CD_Common_Types.h"
d77 1
a77 1
		MasterTableOffset = (UINT16 *) (pDeviceData->pBIOS_Image+((EASF_ASIC_DESCRIPTOR*)pDeviceData->pBIOS_Image)->usAsicSetupTable_Offset);
d82 2
a83 2
		MasterTableOffset = (UINT16 *)(*(UINT16 *)(pDeviceData->pBIOS_Image+OFFSET_TO_POINTER_TO_ATOM_ROM_HEADER) + pDeviceData->pBIOS_Image);
		MasterTableOffset = (UINT16 *)((ULONG)((ATOM_ROM_HEADER *)MasterTableOffset)->usMasterCommandTableOffset + pDeviceData->pBIOS_Image );
d97 2
a98 2
	MasterTableOffset = (UINT16 *)(*(UINT16 *)(pDeviceData->pBIOS_Image+OFFSET_TO_POINTER_TO_ATOM_ROM_HEADER) + pDeviceData->pBIOS_Image);
	MasterTableOffset = (UINT16 *)((ULONG)((ATOM_ROM_HEADER *)MasterTableOffset)->usMasterDataTableOffset + pDeviceData->pBIOS_Image );
d129 17
d151 1
d161 1
a161 1
    ParserTempData.IndirectIOTablePointer=(UINT8*)((ULONG)(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[INDIRECT_IO_TABLE]) + pDeviceData->pBIOS_Image);
d178 1
a178 1

d180 1
a180 1
      {
d183 3
a185 1
					{
d188 1
a188 1
								((ATOM_COMMON_ROM_COMMAND_TABLE_HEADER*)(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]+pDeviceData->pBIOS_Image))->TableAttribute.WS_SizeInBytes+sizeof(WORKING_TABLE_DATA));
d190 2
a191 2
  					ParserTempData.pWorkingTableData =(WORKING_TABLE_DATA STACK_BASED*) AllocateWorkSpace(pDeviceData,
								((ATOM_COMMON_ROM_COMMAND_TABLE_HEADER*)(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]))->TableAttribute.WS_SizeInBytes+sizeof(WORKING_TABLE_DATA));
d193 3
a195 3
            if (ParserTempData.pWorkingTableData!=NULL)
            {
						  ParserTempData.pWorkingTableData->pWorkSpace=(WORKSPACE_POINTER STACK_BASED*)((UINT8*)ParserTempData.pWorkingTableData+sizeof(WORKING_TABLE_DATA));
d197 1
a197 1
						  ParserTempData.pWorkingTableData->pTableHead  = (UINT8 *)(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]+pDeviceData->pBIOS_Image);
d199 1
a199 1
						  ParserTempData.pWorkingTableData->pTableHead  = (UINT8 *)(((PTABLE_UNIT_TYPE)ParserTempData.pCmd)[IndexInMasterTable]);
d201 6
a206 6
	 					  ParserTempData.pWorkingTableData->IP=((UINT8*)ParserTempData.pWorkingTableData->pTableHead)+sizeof(ATOM_COMMON_ROM_COMMAND_TABLE_HEADER);
              ParserTempData.pWorkingTableData->prevWorkingTableData=prevWorkingTableData;
              prevWorkingTableData=ParserTempData.pWorkingTableData;
              ParserTempData.Status = CD_SUCCESS;
            } else ParserTempData.Status = CD_UNEXPECTED_BEHAVIOR;
					} else ParserTempData.Status = CD_EXEC_TABLE_NOT_FOUND;
d210 1
a210 1
        ParserTempData.Status = CD_SUCCESS;
d212 1
a212 2
        {

d214 1
a214 1
          {
d216 1
a216 1

d220 2
a221 2
              prevWorkingTableData=ParserTempData.pWorkingTableData->prevWorkingTableData;

d223 8
a230 8
              ParserTempData.pWorkingTableData=prevWorkingTableData;
              if (prevWorkingTableData!=NULL)
              {
							  ParserTempData.pDeviceData->pParameterSpace-=
								  		(((ATOM_COMMON_ROM_COMMAND_TABLE_HEADER*)ParserTempData.pWorkingTableData->
									  		pTableHead)->TableAttribute.PS_SizeInBytes>>2);
              } 
						// if there is a parent table where to return, then restore PS_pointer to the original state
d234 1
a234 1
              IndexInMasterTable=ProcessCommandProperties((PARSER_TEMP_DATA STACK_BASED *)&ParserTempData);
d237 1
a237 1
              BIOS_STACK_MODIFIER();
d246 1
a246 1

d252 1
a252 1
    if (ParserTempData.Status == CD_COMPLETED) return CD_SUCCESS;
@

