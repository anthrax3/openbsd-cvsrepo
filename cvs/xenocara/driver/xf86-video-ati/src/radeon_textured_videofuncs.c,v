head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.12
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.10
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.08.16.17.04.13;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.07.20.55.34;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.04.16.01.20;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.06.22.53.13;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.25.21.33.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.12.15.18.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@/*
 * Copyright 2008 Alex Deucher
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 * Based on radeon_exa_render.c and kdrive ati_video.c by Eric Anholt, et al.
 *
 */

#define VTX_OUT_6(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
do {								\
    OUT_RING(F_TO_DW(_dstX));						\
    OUT_RING(F_TO_DW(_dstY));						\
    OUT_RING(F_TO_DW(_srcX));						\
    OUT_RING(F_TO_DW(_srcY));						\
    OUT_RING(F_TO_DW(_maskX));						\
    OUT_RING(F_TO_DW(_maskY));						\
} while (0)

#define VTX_OUT_4(_dstX, _dstY, _srcX, _srcY)			\
do {								\
    OUT_RING(F_TO_DW(_dstX));						\
    OUT_RING(F_TO_DW(_dstY));						\
    OUT_RING(F_TO_DW(_srcX));						\
    OUT_RING(F_TO_DW(_srcY));						\
} while (0)


static Bool
RADEONPrepareTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txformat, txsize, txpitch;
    uint32_t dst_pitch, dst_format;
    uint32_t colorpitch;
    int pixel_shift;
    int scissor_w = MIN(pPixmap->drawable.width, 2048) - 1;
    int scissor_h = MIN(pPixmap->drawable.height, 2048) - 1;
    int ret;

    radeon_cs_space_reset_bos(info->cs);
    radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    if (pPriv->bicubic_enabled)
	radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    driver_priv = exaGetPixmapDriverPrivate(pPixmap);
    radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

    ret = radeon_cs_space_check(info->cs);
    if (ret) {
	ErrorF("Not enough RAM to hw accel xv operation\n");
	return FALSE;
    }

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

    dst_pitch = exaGetPixmapPitch(pPixmap);
    RADEON_SWITCH_TO_3D();

    /* Same for R100/R200 */
    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	else
	    dst_format = RADEON_COLOR_FORMAT_RGB565;
	break;
    case 32:
	dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    if (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12) {
	pPriv->is_planar = TRUE;
	txformat = RADEON_TXFORMAT_Y8;
    } else {
	pPriv->is_planar = FALSE;
	if (pPriv->id == FOURCC_UYVY)
	    txformat = RADEON_TXFORMAT_YVYU422;
	else
	    txformat = RADEON_TXFORMAT_VYUY422;
    }

    txformat |= RADEON_TXFORMAT_NON_POWER2;

    colorpitch = dst_pitch >> pixel_shift;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= RADEON_COLOR_TILE_ENABLE;

    BEGIN_ACCEL_RELOC(4,2);

    OUT_RING_REG(RADEON_RB3D_CNTL, dst_format);
    EMIT_WRITE_OFFSET(RADEON_RB3D_COLOROFFSET, 0, pPixmap);
    EMIT_COLORPITCH(RADEON_RB3D_COLORPITCH, colorpitch, pPixmap);
    OUT_RING_REG(RADEON_RB3D_BLENDCNTL,
		  RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    ADVANCE_RING();

    if (pPriv->is_planar) {
	/* need 2 texcoord sets (even though they are identical) due
	   to denormalization! hw apparently can't premultiply
	   same coord set by different texture size */
	pPriv->vtx_count = 6;

	txsize = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
		  (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 32;

	BEGIN_ACCEL_RELOC(23, 3);

	OUT_RING_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					  RADEON_SE_VTX_FMT_ST0 |
					  RADEON_SE_VTX_FMT_ST1));

	OUT_RING_REG(RADEON_PP_CNTL, (RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE |
				       RADEON_TEX_1_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
				       RADEON_TEX_2_ENABLE | RADEON_TEX_BLEND_2_ENABLE |
				       RADEON_PLANAR_YUV_ENABLE));

	/* Y */
	OUT_RING_REG(RADEON_PP_TXFILTER_0,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST |
		      RADEON_YUV_TO_RGB);
	OUT_RING_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, 0, src_bo);
	OUT_RING_REG(RADEON_PP_TXCBLEND_0,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_RING_REG(RADEON_PP_TXABLEND_0,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_RING_REG(RADEON_PP_TEX_SIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_RING_REG(RADEON_PP_TEX_PITCH_0,
		      pPriv->src_pitch - 32);

	/* U */
	OUT_RING_REG(RADEON_PP_TXFILTER_1,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST);
	OUT_RING_REG(RADEON_PP_TXFORMAT_1, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_1, pPriv->planeu_offset, src_bo);
	OUT_RING_REG(RADEON_PP_TXCBLEND_1,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_RING_REG(RADEON_PP_TXABLEND_1,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_RING_REG(RADEON_PP_TEX_SIZE_1, txsize);
	OUT_RING_REG(RADEON_PP_TEX_PITCH_1, txpitch);

	/* V */
	OUT_RING_REG(RADEON_PP_TXFILTER_2,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST);
	OUT_RING_REG(RADEON_PP_TXFORMAT_2, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_2, pPriv->planev_offset, src_bo);
	OUT_RING_REG(RADEON_PP_TXCBLEND_2,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_RING_REG(RADEON_PP_TXABLEND_2,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_RING_REG(RADEON_PP_TEX_SIZE_2, txsize);
	OUT_RING_REG(RADEON_PP_TEX_PITCH_2, txpitch);
	ADVANCE_RING();
    } else {
	pPriv->vtx_count = 4;
	BEGIN_ACCEL_RELOC(9, 1);

	OUT_RING_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					  RADEON_SE_VTX_FMT_ST0));

	OUT_RING_REG(RADEON_PP_CNTL, RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);

	OUT_RING_REG(RADEON_PP_TXFILTER_0,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST |
		      RADEON_YUV_TO_RGB);
	OUT_RING_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, 0, src_bo);
	OUT_RING_REG(RADEON_PP_TXCBLEND_0,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_RING_REG(RADEON_PP_TXABLEND_0,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_RING_REG(RADEON_PP_TEX_SIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_RING_REG(RADEON_PP_TEX_PITCH_0,
		      pPriv->src_pitch - 32);
	ADVANCE_RING();
    }

    BEGIN_RING(2*2);
    OUT_RING_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_RING_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
					   (scissor_h << RADEON_RE_HEIGHT_SHIFT)));
    ADVANCE_RING();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn, FALSE,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    RADEONWaitForVLine(pScrn, pPixmap,
				 crtc,
				 pPriv->drw_y - crtc->y,
				 (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
RADEONDisplayTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!RADEONPrepareTexturedVideo(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2560/4021 pixels; above that we
     *     render as a quad.
     */
    while (nBox) {
	int draw_size = 3 * pPriv->vtx_count + 5;
	int loop_boxes;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    radeon_cs_flush_indirect(pScrn);
	    if (!RADEONPrepareTexturedVideo(pScrn, pPriv))
		return;
	}
	loop_boxes = MIN(radeon_cs_space_remaining(pScrn) / draw_size, nBox);
	nBox -= loop_boxes;

	BEGIN_RING(loop_boxes * 3 * pPriv->vtx_count + 5);
	OUT_RING(CP_PACKET3(RADEON_CP_PACKET3_3D_DRAW_IMMD,
			    loop_boxes * 3 * pPriv->vtx_count + 1));
	if (pPriv->is_planar)
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0 |
		     RADEON_CP_VC_FRMT_ST1);
	else
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0);
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 RADEON_CP_VC_CNTL_MAOS_ENABLE |
		 RADEON_CP_VC_CNTL_VTX_FMT_RADEON_MODE |
		 ((loop_boxes * 3) << RADEON_CP_VC_CNTL_NUM_SHIFT));

	while (loop_boxes--) {
	    float srcX, srcY, srcw, srch;
	    int dstX, dstY, dstw, dsth;
	    dstX = pBox->x1 + dstxoff;
	    dstY = pBox->y1 + dstyoff;
	    dstw = pBox->x2 - pBox->x1;
	    dsth = pBox->y2 - pBox->y1;

	    srcX = pPriv->src_x;
	    srcX += ((pBox->x1 - pPriv->drw_x) *
		     pPriv->src_w) / (float)pPriv->dst_w;
	    srcY = pPriv->src_y;
	    srcY += ((pBox->y1 - pPriv->drw_y) *
		     pPriv->src_h) / (float)pPriv->dst_h;

	    srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;


	    if (pPriv->is_planar) {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    } else {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    }

	    pBox++;
	}

	OUT_RING_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
	ADVANCE_RING();
    }
    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

static Bool
R200PrepareTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txformat;
    uint32_t txfilter, txsize, txpitch;
    uint32_t dst_pitch, dst_format;
    uint32_t colorpitch;
    int pixel_shift;
    int scissor_w = MIN(pPixmap->drawable.width, 2048) - 1;
    int scissor_h = MIN(pPixmap->drawable.height, 2048) - 1;
    /* note: in contrast to r300, use input biasing on uv components */
    const float Loff = -0.0627;
    float uvcosf, uvsinf;
    float yco, yoff;
    float uco[3], vco[3];
    float bright, cont, sat;
    int ref = pPriv->transform_index;
    float ucscale = 0.25, vcscale = 0.25;
    Bool needux8 = FALSE, needvx8 = FALSE;
    int ret;

    radeon_cs_space_reset_bos(info->cs);
    radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    if (pPriv->bicubic_enabled)
	radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    driver_priv = exaGetPixmapDriverPrivate(pPixmap);
    radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

    ret = radeon_cs_space_check(info->cs);
    if (ret) {
	ErrorF("Not enough RAM to hw accel xv operation\n");
	return FALSE;
    }

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

    dst_pitch = exaGetPixmapPitch(pPixmap);

    RADEON_SWITCH_TO_3D();

    /* Same for R100/R200 */
    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	else
	    dst_format = RADEON_COLOR_FORMAT_RGB565;
	break;
    case 32:
	dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    if (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12) {
	pPriv->is_planar = TRUE;
	txformat = RADEON_TXFORMAT_I8;
    } else {
	pPriv->is_planar = FALSE;
	if (pPriv->id == FOURCC_UYVY)
	    txformat = RADEON_TXFORMAT_YVYU422;
	else
	    txformat = RADEON_TXFORMAT_VYUY422;
    }

    txformat |= RADEON_TXFORMAT_NON_POWER2;

    colorpitch = dst_pitch >> pixel_shift;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= RADEON_COLOR_TILE_ENABLE;

    BEGIN_ACCEL_RELOC(4,2);

    OUT_RING_REG(RADEON_RB3D_CNTL, dst_format);
    EMIT_WRITE_OFFSET(RADEON_RB3D_COLOROFFSET, 0, pPixmap);
    EMIT_COLORPITCH(RADEON_RB3D_COLORPITCH, colorpitch, pPixmap);

    OUT_RING_REG(RADEON_RB3D_BLENDCNTL,
		  RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    ADVANCE_RING();

    txfilter =  R200_MAG_FILTER_LINEAR |
	R200_MIN_FILTER_LINEAR |
	R200_CLAMP_S_CLAMP_LAST |
	R200_CLAMP_T_CLAMP_LAST;

    /* contrast can cause constant overflow, clamp */
    cont = RTFContrast(pPriv->contrast);
    if (cont * trans[ref].RefLuma > 2.0)
	cont = 2.0 / trans[ref].RefLuma;
    /* brightness is only from -0.5 to 0.5 should be safe */
    bright = RTFBrightness(pPriv->brightness);
    /* saturation can also cause overflow, clamp */
    sat = RTFSaturation(pPriv->saturation);
    if (sat * trans[ref].RefBCb > 4.0)
	sat = 4.0 / trans[ref].RefBCb;
    uvcosf = sat * cos(RTFHue(pPriv->hue));
    uvsinf = sat * sin(RTFHue(pPriv->hue));

    yco = trans[ref].RefLuma * cont;
    uco[0] = -trans[ref].RefRCr * uvsinf;
    uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
    uco[2] = trans[ref].RefBCb * uvcosf;
    vco[0] = trans[ref].RefRCr * uvcosf;
    vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
    vco[2] = trans[ref].RefBCb * uvsinf;
    yoff = Loff * yco + bright;

    if ((uco[0] > 2.0) || (uco[2] > 2.0)) {
	needux8 = TRUE;
	ucscale = 0.125;
    }
    if ((vco[0] > 2.0) || (vco[2] > 2.0)) {
	needvx8 = TRUE;
	vcscale = 0.125;
    }

    if (pPriv->is_planar) {
	/* need 2 texcoord sets (even though they are identical) due
	   to denormalization! hw apparently can't premultiply
	   same coord set by different texture size */
	pPriv->vtx_count = 6;

	txsize = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
		  (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 32;

	BEGIN_ACCEL_RELOC(36, 3);

	OUT_RING_REG(RADEON_PP_CNTL,
		      RADEON_TEX_0_ENABLE | RADEON_TEX_1_ENABLE | RADEON_TEX_2_ENABLE |
		      RADEON_TEX_BLEND_0_ENABLE |
		      RADEON_TEX_BLEND_1_ENABLE |
		      RADEON_TEX_BLEND_2_ENABLE);

	OUT_RING_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_RING_REG(R200_SE_VTX_FMT_1,
		      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT) |
		      (2 << R200_VTX_TEX1_COMP_CNT_SHIFT));

	OUT_RING_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_RING_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_RING_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_RING_REG(R200_PP_TXSIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_RING_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, 0, src_bo);

	OUT_RING_REG(R200_PP_TXFILTER_1, txfilter);
	OUT_RING_REG(R200_PP_TXFORMAT_1, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_RING_REG(R200_PP_TXFORMAT_X_1, 0);
	OUT_RING_REG(R200_PP_TXSIZE_1, txsize);
	OUT_RING_REG(R200_PP_TXPITCH_1, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_1, pPriv->planeu_offset, src_bo);

	OUT_RING_REG(R200_PP_TXFILTER_2, txfilter);
	OUT_RING_REG(R200_PP_TXFORMAT_2, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_RING_REG(R200_PP_TXFORMAT_X_2, 0);
	OUT_RING_REG(R200_PP_TXSIZE_2, txsize);
	OUT_RING_REG(R200_PP_TXPITCH_2, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_2, pPriv->planev_offset, src_bo);

	/* similar to r300 code. Note the big problem is that hardware constants
	 * are 8 bits only, representing 0.0-1.0. We can get that up (using bias
	 * + scale) to -1.0-1.0 (but precision will suffer). AFAIK the hw actually
	 * has 12 bits fractional precision (plus 1 sign bit, 3 range bits) but
	 * the constants not. To get larger range can use output scale, but for
	 * that 2.018 value we need a total scale by 8, which means the constants
	 * really have no accuracy whatsoever (5 fractional bits only).
	 * The only direct way to get high  precision "constants" into the fragment
	 * pipe I know of is to use the texcoord interpolator (not color, this one
	 * is 8 bit only too), which seems a bit expensive. We're lucky though it
	 * seems the values we need seem to fit better than worst case (get about
	 * 6 fractional bits for this instead of 5, at least when not correcting for
	 * hue/saturation/contrast/brightness, which is the same as for vco - yco and
	 * yoff get 8 fractional bits). Try to preserve as much accuracy as possible
	 * even with non-default saturation/hue/contrast/brightness adjustments,
	 * it gets a little crazy and ultimately precision might still be lacking.
	 *
	 * A higher precision (8 fractional bits) version might just put uco into
	 * a texcoord, and calculate a new vcoconst in the shader, like so:
	 * cohelper = {1.0, 0.0, 0.0} - shouldn't use 0.5 since not exactly representable
	 * vco = {1.5958 - 1.0, -0.8129 + 1.0, 1.0}
	 * vcocalc = ADD temp, bias/scale(cohelper), vco
	 * would in total use 4 tex units, 4 instructions which seems fairly
	 * balanced for this architecture (instead of 3 + 3 for the solution here)
	 *
	 * temp = MAD(yco, yuv.yyyy, yoff)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 *
	 * note first mad produces actually scalar, hence we transform
	 * it into a dp2a to get 8 bit precision of yco instead of 7 -
	 * That's assuming hw correctly expands consts to internal precision.
	 * (y * 1 + y * (yco - 1) + yoff)
	 * temp = DP2A / 2 (yco, yuv.yyyy, yoff)
	 * temp = MAD (uco / 4, yuv.uuuu * 2, temp)
	 * result = MAD x2 (vco / 2, yuv.vvvv, temp)
	 *
	 * vco, uco need bias (and hence scale too)
	 *
	 */

	/* MAD temp0 / 2, const0.a * 2, temp0, -const0.rgb */
	OUT_RING_REG(R200_PP_TXCBLEND_0,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_ARG_C_TFACTOR_COLOR |
		      (yoff < 0 ? R200_TXC_NEG_ARG_C : 0) |
		      R200_TXC_OP_DOT2_ADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_0,
		      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_INV2 |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
	OUT_RING_REG(R200_PP_TXABLEND_0,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_0,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0, (const1 - 0.5) * 2, (temp1 - 0.5) * 2, temp0 */
	OUT_RING_REG(R200_PP_TXCBLEND_1,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R1_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needux8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R0_COLOR |
		      R200_TXC_OP_MADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_1,
		      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
	OUT_RING_REG(R200_PP_TXABLEND_1,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_1,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp2 - 0.5), temp0 */
	OUT_RING_REG(R200_PP_TXCBLEND_2,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R2_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needvx8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R0_COLOR |
		      R200_TXC_OP_MADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_2,
		      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_2X |
		      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
	OUT_RING_REG(R200_PP_TXABLEND_2,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_COMP_ARG_C |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_2,
		      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

	/* shader constants */
	OUT_RING_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
						      yco > 1.0 ? yco - 1.0: yco,
						      yoff < 0 ? -yoff : yoff, /* range special [-1, 1] */
						      0.0));
	OUT_RING_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
						      uco[1] * ucscale + 0.5, /* or [-2, 2] */
						      uco[2] * ucscale + 0.5,
						      0.0));
	OUT_RING_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
						      vco[1] * vcscale + 0.5, /* or [-4, 4] */
						      vco[2] * vcscale + 0.5,
						      0.0));

	ADVANCE_RING();
    } else {
	pPriv->vtx_count = 4;

	BEGIN_ACCEL_RELOC(24, 1);

	OUT_RING_REG(RADEON_PP_CNTL,
		      RADEON_TEX_0_ENABLE |
		      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
		      RADEON_TEX_BLEND_2_ENABLE);

	OUT_RING_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_RING_REG(R200_SE_VTX_FMT_1,
		      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

	OUT_RING_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_RING_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_RING_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_RING_REG(R200_PP_TXSIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_RING_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, 0, src_bo);

	/* MAD temp1 / 2, const0.a * 2, temp0.ggg, -const0.rgb */
	OUT_RING_REG(R200_PP_TXCBLEND_0,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_ARG_C_TFACTOR_COLOR |
		      (yoff < 0 ? R200_TXC_NEG_ARG_C : 0) |
		      R200_TXC_OP_DOT2_ADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_0,
		      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_INV2 |
		      (R200_TXC_REPL_GREEN << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
	OUT_RING_REG(R200_PP_TXABLEND_0,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_0,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp1, (const1 - 0.5) * 2, (temp0.rrr - 0.5) * 2, temp1 */
	OUT_RING_REG(R200_PP_TXCBLEND_1,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needux8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R1_COLOR |
		      R200_TXC_OP_MADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_1,
		      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      (R200_TXC_REPL_BLUE << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
	OUT_RING_REG(R200_PP_TXABLEND_1,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_1,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp0.bbb - 0.5), temp1 */
	OUT_RING_REG(R200_PP_TXCBLEND_2,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needvx8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R1_COLOR |
		      R200_TXC_OP_MADD);
	OUT_RING_REG(R200_PP_TXCBLEND2_2,
		      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_2X |
		      (R200_TXC_REPL_RED << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
	OUT_RING_REG(R200_PP_TXABLEND_2,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_COMP_ARG_C |
		      R200_TXA_OP_MADD);
	OUT_RING_REG(R200_PP_TXABLEND2_2,
		      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

	/* shader constants */
	OUT_RING_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
						      yco > 1.0 ? yco - 1.0: yco,
						      yoff < 0 ? -yoff : yoff, /* range special [-1, 1] */
						      0.0));
	OUT_RING_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
						      uco[1] * ucscale + 0.5, /* or [-2, 2] */
						      uco[2] * ucscale + 0.5,
						      0.0));
	OUT_RING_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
						      vco[1] * vcscale + 0.5, /* or [-4, 4] */
						      vco[2] * vcscale + 0.5,
						      0.0));

	ADVANCE_RING();
    }

    BEGIN_RING(2*2);
    OUT_RING_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_RING_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
					   (scissor_h << RADEON_RE_HEIGHT_SHIFT)));
    ADVANCE_RING();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn, FALSE,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    RADEONWaitForVLine(pScrn, pPixmap,
				 crtc,
				 pPriv->drw_y - crtc->y,
				 (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
R200DisplayTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!R200PrepareTexturedVideo(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2560/4021 pixels; above that we
     *     render as a quad.
     */

    while (nBox) {
	int draw_size = 3 * pPriv->vtx_count + 4;
	int loop_boxes;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    radeon_cs_flush_indirect(pScrn);
	    if (!R200PrepareTexturedVideo(pScrn, pPriv))
		return;
	}
	loop_boxes = MIN(radeon_cs_space_remaining(pScrn) / draw_size, nBox);
	nBox -= loop_boxes;

	BEGIN_RING(loop_boxes * 3 * pPriv->vtx_count + 4);
	OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
			    loop_boxes * 3 * pPriv->vtx_count));
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 ((loop_boxes * 3) << RADEON_CP_VC_CNTL_NUM_SHIFT));

	while (loop_boxes--) {
	    float srcX, srcY, srcw, srch;
	    int dstX, dstY, dstw, dsth;
	    dstX = pBox->x1 + dstxoff;
	    dstY = pBox->y1 + dstyoff;
	    dstw = pBox->x2 - pBox->x1;
	    dsth = pBox->y2 - pBox->y1;

	    srcX = pPriv->src_x;
	    srcX += ((pBox->x1 - pPriv->drw_x) *
		     pPriv->src_w) / (float)pPriv->dst_w;
	    srcY = pPriv->src_y;
	    srcY += ((pBox->y1 - pPriv->drw_y) *
		     pPriv->src_h) / (float)pPriv->dst_h;

	    srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;

	    if (pPriv->is_planar) {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    } else {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    }

	    pBox++;
	}

	OUT_RING_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
	ADVANCE_RING();
    }

    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

static Bool
R300PrepareTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txfilter, txformat0, txformat1, txpitch;
    uint32_t dst_pitch, dst_format;
    uint32_t txenable, colorpitch;
    uint32_t output_fmt;
    int pixel_shift;
    int ret;

    radeon_cs_space_reset_bos(info->cs);
    radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    if (pPriv->bicubic_enabled)
	radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    driver_priv = exaGetPixmapDriverPrivate(pPixmap);
    radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

    ret = radeon_cs_space_check(info->cs);
    if (ret) {
	ErrorF("Not enough RAM to hw accel xv operation\n");
	return FALSE;
    }

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

    dst_pitch = exaGetPixmapPitch(pPixmap);
    RADEON_SWITCH_TO_3D();

    if (pPriv->bicubic_enabled)
	pPriv->vtx_count = 6;
    else
	pPriv->vtx_count = 4;

    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = R300_COLORFORMAT_ARGB1555;
	else
	    dst_format = R300_COLORFORMAT_RGB565;
	break;
    case 32:
	dst_format = R300_COLORFORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    output_fmt = (R300_OUT_FMT_C4_8 |
		  R300_OUT_FMT_C0_SEL_BLUE |
		  R300_OUT_FMT_C1_SEL_GREEN |
		  R300_OUT_FMT_C2_SEL_RED |
		  R300_OUT_FMT_C3_SEL_ALPHA);

    colorpitch = dst_pitch >> pixel_shift;
    colorpitch |= dst_format;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= R300_COLORTILE;


    if (((pPriv->bicubic_state == BICUBIC_OFF)) &&
	(pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12))
	pPriv->is_planar = TRUE;
    else
	pPriv->is_planar = FALSE;

    if (pPriv->is_planar) {
	txformat1 = R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_HALF_REGION_0;
	txpitch = pPriv->src_pitch;
    } else {
	if (pPriv->id == FOURCC_UYVY)
	    txformat1 = R300_TX_FORMAT_YVYU422;
	else
	    txformat1 = R300_TX_FORMAT_VYUY422;

	if (pPriv->bicubic_state != BICUBIC_OFF)
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;

	/* pitch is in pixels */
	txpitch = pPriv->src_pitch / 2;
    }
    txpitch -= 1;

    txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		 (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		 R300_TXPITCH_EN);

    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_MAG_FILTER_LINEAR |
		R300_TX_MIN_FILTER_LINEAR |
		(0 << R300_TX_ID_SHIFT));

    BEGIN_ACCEL_RELOC(6, 1);
    OUT_RING_REG(R300_TX_FILTER0_0, txfilter);
    OUT_RING_REG(R300_TX_FILTER1_0, 0);
    OUT_RING_REG(R300_TX_FORMAT0_0, txformat0);
    if (pPriv->is_planar)
	OUT_RING_REG(R300_TX_FORMAT1_0, txformat1 | R300_TX_FORMAT_CACHE_HALF_REGION_0);
    else
	OUT_RING_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_RING_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, 0, src_bo);
    ADVANCE_RING();

    txenable = R300_TEX_0_ENABLE;

    if (pPriv->is_planar) {
	txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		     (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 1;
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MIN_FILTER_LINEAR |
		    R300_TX_MAG_FILTER_LINEAR);

	BEGIN_ACCEL_RELOC(12, 2);
	OUT_RING_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_RING_REG(R300_TX_FILTER1_1, 0);
	OUT_RING_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_2);
	OUT_RING_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, pPriv->planeu_offset, src_bo);
	OUT_RING_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_RING_REG(R300_TX_FILTER1_2, 0);
	OUT_RING_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_3);
	OUT_RING_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, pPriv->planev_offset, src_bo);
	ADVANCE_RING();
	txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
    }

    if (pPriv->bicubic_enabled) {
	/* Size is 128x1 */
	txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
		     (0x0 << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	/* Format is 32-bit floats, 4bpp */
	txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
	/* Pitch is 127 (128-1) */
	txpitch = 0x7f;
	/* Tex filter */
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
		    R300_TX_MIN_FILTER_NEAREST |
		    R300_TX_MAG_FILTER_NEAREST |
		    (1 << R300_TX_ID_SHIFT));

	BEGIN_ACCEL_RELOC(6, 1);
	OUT_RING_REG(R300_TX_FILTER0_1, txfilter);
	OUT_RING_REG(R300_TX_FILTER1_1, 0);
	OUT_RING_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_RING_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, 0, info->bicubic_bo);
	ADVANCE_RING();

	/* Enable tex 1 */
	txenable |= R300_TEX_1_ENABLE;
    }

    /* setup the VAP */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled)
	    BEGIN_RING(2*7);
	else
	    BEGIN_RING(2*6);
    } else {
	if (pPriv->bicubic_enabled)
	    BEGIN_RING(2*5);
	else
	    BEGIN_RING(2*4);
    }

    /* These registers define the number, type, and location of data submitted
     * to the PVS unit of GA input (when PVS is disabled)
     * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
     * enabled.  This memory provides the imputs to the vertex shader program
     * and ordering is not important.  When PVS/TCL is disabled, this field maps
     * directly to the GA input memory and the order is signifigant.  In
     * PVS_BYPASS mode the order is as follows:
     * Position
     * Point Size
     * Color 0-3
     * Textures 0-7
     * Fog
     */
    if (pPriv->bicubic_enabled) {
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_SIGNED_1));
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_1,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
		       (0 << R300_SKIP_DWORDS_2_SHIFT) |
		       (7 << R300_DST_VEC_LOC_2_SHIFT) |
		       R300_LAST_VEC_2 |
		       R300_SIGNED_2));
    } else {
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_LAST_VEC_1 |
		       R300_SIGNED_1));
    }

    /* load the vertex shader
     * We pre-load vertex programs in RADEONInit3DEngine():
     * - exa
     * - Xv
     * - Xv bicubic
     * Here we select the offset of the vertex program we want to use
     */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled) {
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((11 << R300_PVS_FIRST_INST_SHIFT) |
			   (13 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (13 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (13 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	} else {
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((9 << R300_PVS_FIRST_INST_SHIFT) |
			   (10 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (10 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (10 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	}
    }

    /* Position and one set of 2 texture coordinates */
    OUT_RING_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
    if (pPriv->bicubic_enabled)
	OUT_RING_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
					       (2 << R300_TEX_1_COMP_CNT_SHIFT)));
    else
	OUT_RING_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));

    OUT_RING_REG(R300_US_OUT_FMT_0, output_fmt);
    ADVANCE_RING();

    /* setup pixel shader */
    if (pPriv->bicubic_state != BICUBIC_OFF) {
	if (pPriv->bicubic_enabled) {
	    BEGIN_RING(2*79);

	    /* 4 components: 2 for tex0 and 2 for tex1 */
	    OUT_RING_REG(R300_RS_COUNT, ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
					  R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));

	    /* Pixel stack frame size. */
	    OUT_RING_REG(R300_US_PIXSIZE, 5);

	    /* Indirection levels */
	    OUT_RING_REG(R300_US_CONFIG, ((2 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    /* Set nodes. */
	    OUT_RING_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(14) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(6)));

	    /* Nodes are allocated highest first, but executed lowest first */
	    OUT_RING_REG(R300_US_CODE_ADDR_0, 0);
	    OUT_RING_REG(R300_US_CODE_ADDR_1, (R300_ALU_START(0) |
						R300_ALU_SIZE(0) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0)));
	    OUT_RING_REG(R300_US_CODE_ADDR_2, (R300_ALU_START(1) |
						R300_ALU_SIZE(9) |
						R300_TEX_START(1) |
						R300_TEX_SIZE(0)));
	    OUT_RING_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(11) |
						R300_ALU_SIZE(2) |
						R300_TEX_START(2) |
						R300_TEX_SIZE(3) |
						R300_RGBA_OUT));

	    /* ** BICUBIC FP ** */

	    /* texcoord0 => temp0
	     * texcoord1 => temp1 */

	    // first node
	    /* TEX temp2, temp1.rrr0, tex1, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(0), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(1) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(2)));

	    /* MOV temp1.r, temp1.ggg0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    // second node
	    /* TEX temp1, temp1, tex1, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(1), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(1) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(1)));

	    /* MUL temp3.rg, temp2.ggg0, const0.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(2) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    /* MUL temp2.rg, temp2.rrr0, const0.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(2) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp4.rg, temp1.ggg0, const1.rgb, temp3.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(3), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(4) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(4) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp5.rg, temp1.ggg0, const1.rgb, temp2.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(4), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(5) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(5) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp3.rg, temp1.rrr0, const1.rgb, temp3.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(5), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp1.rg, temp1.rrr0, const1.rgb, temp2.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp1.rg, temp0.rgb0, temp1.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(7), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp2.rg, temp0.rgb0, temp3.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(8), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp3.rg, temp0.rgb0, temp5.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(9), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(5) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp0.rg, temp0.rgb0, temp4.rgb0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(10), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(10), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR2(4) |
						     R300_ALU_RGB_ADDRD(0) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(10), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(10), (R300_ALU_ALPHA_ADDRD(0) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    // third node
	    /* TEX temp4, temp1.rg--, tex0, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(2), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(4)));

	    /* TEX temp3, temp3.rg--, tex0, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(3), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(3) |
						R300_TEX_DST_ADDR(3)));

	    /* TEX temp5, temp2.rg--, tex0, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(4), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(2) |
						R300_TEX_DST_ADDR(5)));

	    /* TEX temp0, temp0.rg--, tex0, 1D */
	    OUT_RING_REG(R300_US_TEX_INST(5), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(0) |
						R300_TEX_DST_ADDR(0)));

	    /* LRP temp3, temp1.bbbb, temp4, temp3 ->
	     * - PRESUB temps, temp4 - temp3
	     * - MAD temp3, temp1.bbbb, temps, temp3 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(11), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(11), (R300_ALU_RGB_ADDR0(3) |
						     R300_ALU_RGB_ADDR1(4) |
						     R300_ALU_RGB_ADDR2(1) |
						     R300_ALU_RGB_ADDRD(3) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(11), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(11), (R300_ALU_ALPHA_ADDR0(3) |
						       R300_ALU_ALPHA_ADDR1(4) |
						       R300_ALU_ALPHA_ADDR2(1) |
						       R300_ALU_ALPHA_ADDRD(3) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

	    /* LRP temp0, temp1.bbbb, temp5, temp0 ->
	     * - PRESUB temps, temp5 - temp0
	     * - MAD temp0, temp1.bbbb, temps, temp0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(12), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0) |
						     R300_ALU_RGB_INSERT_NOP));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(12), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR1(5) |
						     R300_ALU_RGB_ADDR2(1) |
						     R300_ALU_RGB_ADDRD(0) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(12), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(12), (R300_ALU_ALPHA_ADDR0(0) |
						       R300_ALU_ALPHA_ADDR1(5) |
						       R300_ALU_ALPHA_ADDR2(1) |
						       R300_ALU_ALPHA_ADDRD(0) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

	    /* LRP output, temp2.bbbb, temp3, temp0 ->
	     * - PRESUB temps, temp3 - temp0
	     * - MAD output, temp2.bbbb, temps, temp0 */
	    OUT_RING_REG(R300_US_ALU_RGB_INST(13), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(13), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR1(3) |
						     R300_ALU_RGB_ADDR2(2) |
						     R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(13), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(13), (R300_ALU_ALPHA_ADDR0(0) |
						       R300_ALU_ALPHA_ADDR1(3) |
						       R300_ALU_ALPHA_ADDR2(2) |
						       R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A)));

	    /* Shader constants. */
	    OUT_RING_REG(R300_US_ALU_CONST_R(0), F_TO_24(1.0/(float)pPriv->w));
	    OUT_RING_REG(R300_US_ALU_CONST_G(0), 0);
	    OUT_RING_REG(R300_US_ALU_CONST_B(0), 0);
	    OUT_RING_REG(R300_US_ALU_CONST_A(0), 0);

	    OUT_RING_REG(R300_US_ALU_CONST_R(1), 0);
	    OUT_RING_REG(R300_US_ALU_CONST_G(1), F_TO_24(1.0/(float)pPriv->h));
	    OUT_RING_REG(R300_US_ALU_CONST_B(1), 0);
	    OUT_RING_REG(R300_US_ALU_CONST_A(1), 0);

	    ADVANCE_RING();
	} else {
	    BEGIN_RING(2*11);
	    /* 2 components: 2 for tex0 */
	    OUT_RING_REG(R300_RS_COUNT,
                          ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
                           R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_RING_REG(R300_US_PIXSIZE, 0); /* highest temp used */

	    /* Indirection levels */
	    OUT_RING_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_RING_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(1) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(1)));

	    OUT_RING_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(0) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_RING_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* RGB */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR_0, (R300_ALU_RGB_ADDR0(0) |
                                                   R300_ALU_RGB_ADDR1(0) |
                                                   R300_ALU_RGB_ADDR2(0) |
                                                   R300_ALU_RGB_ADDRD(0) |
                                                   R300_ALU_RGB_OMASK((R300_ALU_RGB_MASK_R |
								       R300_ALU_RGB_MASK_G |
								       R300_ALU_RGB_MASK_B)) |
                                                   R300_ALU_RGB_TARGET_A));
	    OUT_RING_REG(R300_US_ALU_RGB_INST_0, (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
                                                   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
                                                   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
                                                   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
                                                   R300_ALU_RGB_CLAMP));
	    /* Alpha */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR_0, (R300_ALU_ALPHA_ADDR0(0) |
						     R300_ALU_ALPHA_ADDR1(0) |
						     R300_ALU_ALPHA_ADDR2(0) |
						     R300_ALU_ALPHA_ADDRD(0) |
						     R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						     R300_ALU_ALPHA_TARGET_A |
						     R300_ALU_ALPHA_OMASK_W(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST_0, (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
						     R300_ALU_ALPHA_MOD_A(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_1_0) |
						     R300_ALU_ALPHA_MOD_B(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0) |
						     R300_ALU_ALPHA_MOD_C(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						     R300_ALU_ALPHA_OMOD(R300_ALU_ALPHA_OMOD_NONE) |
						     R300_ALU_ALPHA_CLAMP));
	    ADVANCE_RING();
	}
    } else {
	/*
	 * y' = y - .0625
	 * u' = u - .5
	 * v' = v - .5;
	 *
	 * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	 * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	 * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	 *
	 * DP3 might look like the straightforward solution
	 * but we'd need to move the texture yuv values in
	 * the same reg for this to work. Therefore use MADs.
	 * Brightness just adds to the off constant.
	 * Contrast is multiplication of luminance.
	 * Saturation and hue change the u and v coeffs.
	 * Default values (before adjustments - depend on colorspace):
	 * yco = 1.1643
	 * uco = 0, -0.39173, 2.017
	 * vco = 1.5958, -0.8129, 0
	 * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	 *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	 *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	 *
	 * temp = MAD(yco, yuv.yyyy, off)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 */
	/* TODO: don't recalc consts always */
	const float Loff = -0.0627;
	const float Coff = -0.502;
	float uvcosf, uvsinf;
	float yco;
	float uco[3], vco[3], off[3];
	float bright, cont, gamma;
	int ref = pPriv->transform_index;
	Bool needgamma = FALSE;

	cont = RTFContrast(pPriv->contrast);
	bright = RTFBrightness(pPriv->brightness);
	gamma = (float)pPriv->gamma / 1000.0;
	uvcosf = RTFSaturation(pPriv->saturation) * cos(RTFHue(pPriv->hue));
	uvsinf = RTFSaturation(pPriv->saturation) * sin(RTFHue(pPriv->hue));
	/* overlay video also does pre-gamma contrast/sat adjust, should we? */

	yco = trans[ref].RefLuma * cont;
	uco[0] = -trans[ref].RefRCr * uvsinf;
	uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
	uco[2] = trans[ref].RefBCb * uvcosf;
	vco[0] = trans[ref].RefRCr * uvcosf;
	vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
	vco[2] = trans[ref].RefBCb * uvsinf;
	off[0] = Loff * yco + Coff * (uco[0] + vco[0]) + bright;
	off[1] = Loff * yco + Coff * (uco[1] + vco[1]) + bright;
	off[2] = Loff * yco + Coff * (uco[2] + vco[2]) + bright;

	if (gamma != 1.0) {
	    needgamma = TRUE;
	    /* note: gamma correction is out = in ^ gamma;
	       gpu can only do LG2/EX2 therefore we transform into
	       in ^ gamma = 2 ^ (log2(in) * gamma).
	       Lots of scalar ops, unfortunately (better solution?) -
	       without gamma that's 3 inst, with gamma it's 10...
	       could use different gamma factors per channel,
	       if that's of any use. */
	}

	if (pPriv->is_planar) {
	    BEGIN_RING(2 * (needgamma ? (28 + 33) : 33));
	    /* 2 components: same 2 for tex0/1/2 */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_RING_REG(R300_US_PIXSIZE, 2); /* highest temp used */

	    /* Indirection levels */
	    OUT_RING_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_RING_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(needgamma ? 7 + 3 : 3) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(3)));

	    OUT_RING_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(needgamma ? 7 + 2 : 2) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(2) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_RING_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(2) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));
	    OUT_RING_REG(R300_US_TEX_INST_1, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(1) |
					       R300_TEX_ID(1) |
					       R300_TEX_INST(R300_TEX_INST_LD)));
	    OUT_RING_REG(R300_US_TEX_INST_2, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(2) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* MAD temp2.rgb, const0.aaa, temp2.rgb, const0.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDR1(2) |
						    R300_ALU_RGB_ADDR2(0) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop, but need to set up alpha source for rgb usage */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						      R300_ALU_ALPHA_ADDR1(2) |
						      R300_ALU_ALPHA_ADDR2(0) |
						      R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD temp2.rgb, const1.rgb, temp1.rgb, temp2.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR1(1) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD result.rgb, const2.rgb, temp0.rgb, temp2.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(0) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						    (needgamma ? 0 : R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB))));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						    R300_ALU_RGB_CLAMP));
	    /* write alpha 1 */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						      R300_ALU_ALPHA_TARGET_A));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

	    if (needgamma) {
		/* rgb temp0.r = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(3),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.r */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.g = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(4),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.g */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.b = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(5),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.b */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MUL const1, temp1, temp0 */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_ADDR1(0) |
							R300_ALU_RGB_ADDR2(0) |
							R300_ALU_RGB_ADDRD(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
							R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC0_AAA) |
							R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
							R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
							R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but set up const1 */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(1)) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.r = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_R)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(7),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.r */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.g = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_G)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(8),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.g */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.b = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_B)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(9),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.b */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    }
	} else {
	    BEGIN_RING(2 * (needgamma ? (28 + 31) : 31));
	    /* 2 components */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_RING_REG(R300_US_PIXSIZE, 1); /* highest temp used */

	    /* Indirection levels */
	    OUT_RING_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_RING_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(needgamma ? 7 + 3 : 3) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(1)));

	    OUT_RING_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(needgamma ? 7 + 2 : 2) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_RING_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* MAD temp1.rgb, const0.aaa, temp0.ggg, const0.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(0) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_GGG) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop, but need to set up alpha source for rgb usage */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						      R300_ALU_ALPHA_ADDR1(0) |
						      R300_ALU_ALPHA_ADDR2(0) |
						      R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD temp1.rgb, const1.rgb, temp0.bbb, temp1.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_BBB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD result.rgb, const2.rgb, temp0.rrr, temp1.rgb */
	    OUT_RING_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(0) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						    (needgamma ? 0 : R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB))));
	    OUT_RING_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RRR) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						    R300_ALU_RGB_CLAMP));
	    /* write alpha 1 */
	    OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						      R300_ALU_ALPHA_TARGET_A));
	    OUT_RING_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

	    if (needgamma) {
		/* rgb temp0.r = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(3),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.r */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.g = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(4),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.g */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.b = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(5),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.b */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MUL const1, temp1, temp0 */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_ADDR1(0) |
							R300_ALU_RGB_ADDR2(0) |
							R300_ALU_RGB_ADDRD(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
							R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC0_AAA) |
							R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
							R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
							R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but set up const1 */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(1)) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.r = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_R)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(7),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.r */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.g = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_G)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(8),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.g */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.b = op_sop, set up src0 reg */
		OUT_RING_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_B)));
		OUT_RING_REG(R300_US_ALU_RGB_INST(9),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.b */
		OUT_RING_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_RING_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    }
	}

	/* Shader constants. */
	/* constant 0: off, yco */
	OUT_RING_REG(R300_US_ALU_CONST_R(0), F_TO_24(off[0]));
	OUT_RING_REG(R300_US_ALU_CONST_G(0), F_TO_24(off[1]));
	OUT_RING_REG(R300_US_ALU_CONST_B(0), F_TO_24(off[2]));
	OUT_RING_REG(R300_US_ALU_CONST_A(0), F_TO_24(yco));
	/* constant 1: uco */
	OUT_RING_REG(R300_US_ALU_CONST_R(1), F_TO_24(uco[0]));
	OUT_RING_REG(R300_US_ALU_CONST_G(1), F_TO_24(uco[1]));
	OUT_RING_REG(R300_US_ALU_CONST_B(1), F_TO_24(uco[2]));
	OUT_RING_REG(R300_US_ALU_CONST_A(1), F_TO_24(gamma));
	/* constant 2: vco */
	OUT_RING_REG(R300_US_ALU_CONST_R(2), F_TO_24(vco[0]));
	OUT_RING_REG(R300_US_ALU_CONST_G(2), F_TO_24(vco[1]));
	OUT_RING_REG(R300_US_ALU_CONST_B(2), F_TO_24(vco[2]));
	OUT_RING_REG(R300_US_ALU_CONST_A(2), F_TO_24(0.0));

	ADVANCE_RING();
    }

    BEGIN_ACCEL_RELOC(6, 2);
    OUT_RING_REG(R300_TX_INVALTAGS, 0);
    OUT_RING_REG(R300_TX_ENABLE, txenable);

    EMIT_WRITE_OFFSET(R300_RB3D_COLOROFFSET0, 0, pPixmap);
    EMIT_COLORPITCH(R300_RB3D_COLORPITCH0, colorpitch, pPixmap);

    /* no need to enable blending */
    OUT_RING_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    OUT_RING_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    ADVANCE_RING();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn, FALSE,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    RADEONWaitForVLine(pScrn, pPixmap,
			       crtc,
			       pPriv->drw_y - crtc->y,
			       (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
R300DisplayTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!R300PrepareTexturedVideo(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2560/4021 pixels; above that we
     *     render as a quad.
     */

    while (nBox--) {
	float srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	Bool use_quad = FALSE;
	int draw_size = 4 * pPriv->vtx_count + 4 + 2 + 3;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    radeon_cs_flush_indirect(pScrn);
	    if (!R300PrepareTexturedVideo(pScrn, pPriv))
		return;
	}

	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / (float)pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / (float)pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;

	if (IS_R400_3D) {
	    if ((dstw+dsth) > 4021)
		use_quad = TRUE;
	} else {
	    if ((dstw+dsth) > 2560)
		use_quad = TRUE;
	}
	/*
	 * Set up the scissor area to that of the output size.
	 */
	BEGIN_RING(2*2);
	/* R300 has an offset */
	OUT_RING_REG(R300_SC_SCISSOR0, (((dstX + 1440) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + 1440) << R300_SCISSOR_Y_SHIFT)));
	OUT_RING_REG(R300_SC_SCISSOR1, (((dstX + dstw + 1440 - 1) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + dsth + 1440 - 1) << R300_SCISSOR_Y_SHIFT)));
	ADVANCE_RING();

	if (use_quad) {
	    BEGIN_RING(4 * pPriv->vtx_count + 4);
	    OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				4 * pPriv->vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_QUAD_LIST |
		     RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		     (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	} else {
	    BEGIN_RING(3 * pPriv->vtx_count + 4);
	    OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				3 * pPriv->vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
		     RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		     (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	}

	if (pPriv->bicubic_enabled) {
		/*
		 * This code is only executed on >= R300, so we don't
		 * have to deal with the legacy handling.
		 */
	    if (use_quad) {
		VTX_OUT_6((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h,
			  (float)srcX + 0.5,               (float)srcY + 0.5);
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX + 0.5,               (float)(srcY + srch) + 0.5);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) + 0.5,      (float)(srcY + srch) + 0.5);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) + 0.5,      (float)srcY + 0.5);
	    } else {
		VTX_OUT_6((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h,
			  (float)srcX + 0.5,               (float)srcY + 0.5);
		VTX_OUT_6((float)dstX,                     (float)(dstY + dstw + dsth),
			  (float)srcX / pPriv->w,
			  ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h,
			  (float)srcX + 0.5,
			  (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
		VTX_OUT_6((float)(dstX + dstw + dsth),     (float)dstY,
			  ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
			  (float)srcY / pPriv->h,
			  (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
			  (float)srcY + 0.5);
	    }
	} else {
	    if (use_quad) {
		VTX_OUT_4((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h);
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    } else {
		/*
		 * Render a big, scissored triangle. This means
		 * increasing the triangle size and adjusting
		 * texture coordinates.
		 */
		VTX_OUT_4((float)dstX,                 (float)dstY,
			  (float)srcX / pPriv->w,      (float)srcY / pPriv->h);
		VTX_OUT_4((float)dstX,                 (float)(dstY + dsth + dstw),
			  (float)srcX / pPriv->w,
			  ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw + dsth), (float)dstY,
			  ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
			  (float)srcY / pPriv->h);
	    }
	}

	/* flushing is pipelined, free/finish is not */
	OUT_RING_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);

	ADVANCE_RING();

	pBox++;
    }

    BEGIN_RING(2*3);
    OUT_RING_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_RING_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
    OUT_RING_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    ADVANCE_RING();

    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

static Bool
R500PrepareTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txfilter, txformat0, txformat1, txpitch, us_format = 0;
    uint32_t dst_pitch, dst_format;
    uint32_t txenable, colorpitch;
    uint32_t output_fmt;
    int pixel_shift, out_size = 6;
    int ret;

    radeon_cs_space_reset_bos(info->cs);
    radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

    if (pPriv->bicubic_enabled)
	radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
    
    driver_priv = exaGetPixmapDriverPrivate(pPixmap);
    radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

    ret = radeon_cs_space_check(info->cs);
    if (ret) {
	ErrorF("Not enough RAM to hw accel xv operation\n");
	return FALSE;
    }

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

    dst_pitch = exaGetPixmapPitch(pPixmap);
    RADEON_SWITCH_TO_3D();

    if (pPriv->bicubic_enabled)
	pPriv->vtx_count = 6;
    else
	pPriv->vtx_count = 4;

    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = R300_COLORFORMAT_ARGB1555;
	else
	    dst_format = R300_COLORFORMAT_RGB565;
	break;
    case 32:
	dst_format = R300_COLORFORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    output_fmt = (R300_OUT_FMT_C4_8 |
		  R300_OUT_FMT_C0_SEL_BLUE |
		  R300_OUT_FMT_C1_SEL_GREEN |
		  R300_OUT_FMT_C2_SEL_RED |
		  R300_OUT_FMT_C3_SEL_ALPHA);

    colorpitch = dst_pitch >> pixel_shift;
    colorpitch |= dst_format;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= R300_COLORTILE;

    if (((pPriv->bicubic_state == BICUBIC_OFF)) &&
        (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12))
	pPriv->is_planar = TRUE;
    else
	pPriv->is_planar = FALSE;

    if (pPriv->is_planar) {
	txformat1 = R300_TX_FORMAT_X8;
	txpitch = pPriv->src_pitch;
    } else {
	if (pPriv->id == FOURCC_UYVY)
	    txformat1 = R300_TX_FORMAT_YVYU422;
	else
	    txformat1 = R300_TX_FORMAT_VYUY422;

	if (pPriv->bicubic_state != BICUBIC_OFF)
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;

	/* pitch is in pixels */
	txpitch = pPriv->src_pitch / 2;
    }
    txpitch -= 1;

    txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		 (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		 R300_TXPITCH_EN);

    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_MAG_FILTER_LINEAR |
		R300_TX_MIN_FILTER_LINEAR |
		(0 << R300_TX_ID_SHIFT));


    if ((pPriv->w - 1) & 0x800)
	txpitch |= R500_TXWIDTH_11;

    if ((pPriv->h - 1) & 0x800)
	txpitch |= R500_TXHEIGHT_11;

    if (info->ChipFamily == CHIP_FAMILY_R520) {
	unsigned us_width = (pPriv->w - 1) & 0x7ff;
	unsigned us_height = (pPriv->h - 1) & 0x7ff;
	unsigned us_depth = 0;

	if (pPriv->w > 2048) {
	    us_width = (0x7ff + us_width) >> 1;
	    us_depth |= 0x0d;
	}
	if (pPriv->h > 2048) {
	    us_height = (0x7ff + us_height) >> 1;
	    us_depth |= 0x0e;
	}
	us_format = (us_width << R300_TXWIDTH_SHIFT) |
		    (us_height << R300_TXHEIGHT_SHIFT) |
		    (us_depth << R300_TXDEPTH_SHIFT);
	out_size++;
    }

    BEGIN_ACCEL_RELOC(out_size, 1);
    OUT_RING_REG(R300_TX_FILTER0_0, txfilter);
    OUT_RING_REG(R300_TX_FILTER1_0, 0);
    OUT_RING_REG(R300_TX_FORMAT0_0, txformat0);
    OUT_RING_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_RING_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, 0, src_bo);
    if (info->ChipFamily == CHIP_FAMILY_R520)
	OUT_RING_REG(R500_US_FORMAT0_0, us_format);
    ADVANCE_RING();

    txenable = R300_TEX_0_ENABLE;

    if (pPriv->is_planar) {
	txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		     (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 1;
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MIN_FILTER_LINEAR |
		    R300_TX_MAG_FILTER_LINEAR);

	BEGIN_ACCEL_RELOC(12, 2);
	OUT_RING_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_RING_REG(R300_TX_FILTER1_1, 0);
	OUT_RING_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8);
	OUT_RING_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, pPriv->planeu_offset, src_bo);
	OUT_RING_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_RING_REG(R300_TX_FILTER1_2, 0);
	OUT_RING_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8);
	OUT_RING_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, pPriv->planev_offset, src_bo);
	ADVANCE_RING();
	txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
    }

    if (pPriv->bicubic_enabled) {
	/* Size is 128x1 */
	txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
		     (0x0 << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	/* Format is 32-bit floats, 4bpp */
	txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
	/* Pitch is 127 (128-1) */
	txpitch = 0x7f;
	/* Tex filter */
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
		    R300_TX_MIN_FILTER_NEAREST |
		    R300_TX_MAG_FILTER_NEAREST |
		    (1 << R300_TX_ID_SHIFT));

	BEGIN_ACCEL_RELOC(6, 1);
	OUT_RING_REG(R300_TX_FILTER0_1, txfilter);
	OUT_RING_REG(R300_TX_FILTER1_1, 0);
	OUT_RING_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_RING_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_RING_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, 0, info->bicubic_bo);
	ADVANCE_RING();

	/* Enable tex 1 */
	txenable |= R300_TEX_1_ENABLE;
    }

    /* setup the VAP */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled)
	    BEGIN_RING(2*7);
	else
	    BEGIN_RING(2*6);
    } else {
	if (pPriv->bicubic_enabled)
	    BEGIN_RING(2*5);
	else
	    BEGIN_RING(2*4);
    }

    /* These registers define the number, type, and location of data submitted
     * to the PVS unit of GA input (when PVS is disabled)
     * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
     * enabled.  This memory provides the imputs to the vertex shader program
     * and ordering is not important.  When PVS/TCL is disabled, this field maps
     * directly to the GA input memory and the order is signifigant.  In
     * PVS_BYPASS mode the order is as follows:
     * Position
     * Point Size
     * Color 0-3
     * Textures 0-7
     * Fog
     */
    if (pPriv->bicubic_enabled) {
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_SIGNED_1));
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_1,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
		       (0 << R300_SKIP_DWORDS_2_SHIFT) |
		       (7 << R300_DST_VEC_LOC_2_SHIFT) |
		       R300_LAST_VEC_2 |
		       R300_SIGNED_2));
    } else {
	OUT_RING_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_LAST_VEC_1 |
		       R300_SIGNED_1));
    }

    /* load the vertex shader
     * We pre-load vertex programs in RADEONInit3DEngine():
     * - exa
     * - Xv
     * - Xv bicubic
     * Here we select the offset of the vertex program we want to use
     */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled) {
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((11 << R300_PVS_FIRST_INST_SHIFT) |
			   (13 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (13 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (13 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	} else {
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((9 << R300_PVS_FIRST_INST_SHIFT) |
			   (10 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (10 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_RING_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (10 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	}
    }

    /* Position and one set of 2 texture coordinates */
    OUT_RING_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
    if (pPriv->bicubic_enabled)
	OUT_RING_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
					       (2 << R300_TEX_1_COMP_CNT_SHIFT)));
    else
	OUT_RING_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));

    OUT_RING_REG(R300_US_OUT_FMT_0, output_fmt);
    ADVANCE_RING();

    /* setup pixel shader */
    if (pPriv->bicubic_state != BICUBIC_OFF) {
	if (pPriv->bicubic_enabled) {
	    BEGIN_RING(2*7);

	    /* 4 components: 2 for tex0 and 2 for tex1 */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));

	    /* Pixel stack frame size. */
	    OUT_RING_REG(R300_US_PIXSIZE, 5);

	    /* FP length. */
	    OUT_RING_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(13)));
	    OUT_RING_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(13)));

	    /* Prepare for FP emission. */
	    OUT_RING_REG(R500_US_CODE_OFFSET, 0);
	    OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
	    ADVANCE_RING();

	    BEGIN_RING(2*89);
	    /* Pixel shader.
	     * I've gone ahead and annotated each instruction, since this
	     * thing is MASSIVE. :3
	     * Note: In order to avoid buggies with temps and multiple
	     * inputs, all temps are offset by 2. temp0 -> register2. */

	    /* TEX temp2, input1.xxxx, tex1, 1D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_R |
						   R500_TEX_SRC_R_SWIZ_R |
						   R500_TEX_SRC_Q_SWIZ_R |
						   R500_TEX_DST_ADDR(2) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp5, input1.yyyy, tex1, 1D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						   R500_TEX_SRC_S_SWIZ_G |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_G |
						   R500_TEX_SRC_Q_SWIZ_G |
						   R500_TEX_DST_ADDR(5) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* MUL temp4, const0.x0x0, temp2.yyxx */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_0 |
						   R500_ALU_RGB_B_SWIZ_A_R |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_R_SWIZ_0 |
						   R500_ALU_RGBA_G_SWIZ_0 |
						   R500_ALU_RGBA_B_SWIZ_0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp3, const0.0y0y, temp5.xxxx, temp4 */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(5) |
						   R500_RGB_ADDR2(4)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(5) |
						   R500_ALPHA_ADDR2(4)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_0 |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_0 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_G |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* ADD temp3, temp3, input0.xyxy */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(3) |
						   R500_RGB_ADDR2(0)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(3) |
						   R500_ALPHA_ADDR2(0)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						   R500_ALU_RGB_G_SWIZ_A_1 |
						   R500_ALU_RGB_B_SWIZ_A_1 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_1 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_R |
						   R500_ALU_RGBA_A_SWIZ_G));

	    /* TEX temp1, temp3.zwxy, tex0, 2D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						   R500_TEX_SRC_S_SWIZ_B |
						   R500_TEX_SRC_T_SWIZ_A |
						   R500_TEX_SRC_R_SWIZ_R |
						   R500_TEX_SRC_Q_SWIZ_G |
						   R500_TEX_DST_ADDR(1) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp3, temp3.xyzw, tex0, 2D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(3) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* MAD temp4, const0.0y0y, temp5.yyyy, temp4 */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(5) |
						   R500_RGB_ADDR2(4)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(5) |
						   R500_ALPHA_ADDR2(4)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_0 |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_0 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_G));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_G |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_G));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* ADD temp0, temp4, input0.xyxy */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(4) |
						   R500_RGB_ADDR2(0)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(4) |
						   R500_ALPHA_ADDR2(0)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						   R500_ALU_RGB_G_SWIZ_A_1 |
						   R500_ALU_RGB_B_SWIZ_A_1 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_1 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_R |
						   R500_ALU_RGBA_A_SWIZ_G));

	    /* TEX temp4, temp0.zwzw, tex0, 2D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_B |
						   R500_TEX_SRC_T_SWIZ_A |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(4) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp0, temp0.xyzw, tex0, 2D */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* LRP temp3, temp2.zzzz, temp1, temp3 ->
	     * - PRESUB temps, temp1 - temp3
	     * - MAD temp2.zzzz, temps, temp3 */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(3) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(1) |
						   R500_RGB_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(3) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(1) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* LRP temp0, temp2.zzzz, temp4, temp0 ->
	     * - PRESUB temps, temp4 - temp1
	     * - MAD temp2.zzzz, temps, temp0 */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(4) |
						   R500_RGB_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(4) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* LRP output, temp5.zzzz, temp3, temp0 ->
	     * - PRESUB temps, temp3 - temp0
	     * - MAD temp5.zzzz, temps, temp0 */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_LAST |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(3) |
						   R500_RGB_ADDR2(5)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(3) |
						   R500_ALPHA_ADDR2(5)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* Shader constants. */
	    OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

	    /* const0 = {1 / texture[0].width, 1 / texture[0].height, 0, 0} */
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->w));
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->h));
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);

	    ADVANCE_RING();
	} else {
	    BEGIN_RING(2*19);
	    /* 2 components: 2 for tex0 */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_RING_REG(R300_US_PIXSIZE, 0); /* highest temp used */

	    /* FP length. */
	    OUT_RING_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(1)));
	    OUT_RING_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(1)));

	    /* Prepare for FP emission. */
	    OUT_RING_REG(R500_US_CODE_OFFSET, 0);
	    OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR1_CONST |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR1_CONST |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC0 |
						   R500_ALU_RGB_R_SWIZ_B_1 |
						   R500_ALU_RGB_B_SWIZ_B_1 |
						   R500_ALU_RGB_G_SWIZ_B_1));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_A |
						   R500_ALPHA_SWIZ_B_1));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_R_SWIZ_0 |
						   R500_ALU_RGBA_G_SWIZ_0 |
						   R500_ALU_RGBA_B_SWIZ_0 |
						   R500_ALU_RGBA_A_SWIZ_0));
	    ADVANCE_RING();
	}
    } else {
	/*
	 * y' = y - .0625
	 * u' = u - .5
	 * v' = v - .5;
	 *
	 * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	 * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	 * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	 *
	 * DP3 might look like the straightforward solution
	 * but we'd need to move the texture yuv values in
	 * the same reg for this to work. Therefore use MADs.
	 * Brightness just adds to the off constant.
	 * Contrast is multiplication of luminance.
	 * Saturation and hue change the u and v coeffs.
	 * Default values (before adjustments - depend on colorspace):
	 * yco = 1.1643
	 * uco = 0, -0.39173, 2.017
	 * vco = 1.5958, -0.8129, 0
	 * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	 *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	 *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	 *
	 * temp = MAD(yco, yuv.yyyy, off)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 */
	/* TODO: don't recalc consts always */
	const float Loff = -0.0627;
	const float Coff = -0.502;
	float uvcosf, uvsinf;
	float yco;
	float uco[3], vco[3], off[3];
	float bright, cont, gamma;
	int ref = pPriv->transform_index;

	cont = RTFContrast(pPriv->contrast);
	bright = RTFBrightness(pPriv->brightness);
	gamma = (float)pPriv->gamma / 1000.0;
	uvcosf = RTFSaturation(pPriv->saturation) * cos(RTFHue(pPriv->hue));
	uvsinf = RTFSaturation(pPriv->saturation) * sin(RTFHue(pPriv->hue));
	/* overlay video also does pre-gamma contrast/sat adjust, should we? */

	yco = trans[ref].RefLuma * cont;
	uco[0] = -trans[ref].RefRCr * uvsinf;
	uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
	uco[2] = trans[ref].RefBCb * uvcosf;
	vco[0] = trans[ref].RefRCr * uvcosf;
	vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
	vco[2] = trans[ref].RefBCb * uvsinf;
	off[0] = Loff * yco + Coff * (uco[0] + vco[0]) + bright;
	off[1] = Loff * yco + Coff * (uco[1] + vco[1]) + bright;
	off[2] = Loff * yco + Coff * (uco[2] + vco[2]) + bright;

	//XXX gamma

	if (pPriv->is_planar) {
	    BEGIN_RING(2*56);
	    /* 2 components: 2 for tex0 */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_RING_REG(R300_US_PIXSIZE, 2); /* highest temp used */

	    /* FP length. */
	    OUT_RING_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(5)));
	    OUT_RING_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(5)));

	    /* Prepare for FP emission. */
	    OUT_RING_REG(R500_US_CODE_OFFSET, 0);
	    OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(2) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* tex inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(1) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* tex inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(2) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    /* MAD temp2.rgb, const0.aaa, temp2.rgb, const0.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(2) |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(2) |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_A |
						   R500_ALU_RGB_G_SWIZ_A_A |
						   R500_ALU_RGB_B_SWIZ_A_A |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(2) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(2) |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp2.rgb, const1.rgb, temp1.rgb, temp2.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(1) |
						   R500_RGB_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(1) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(2) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(2) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD result.rgb, const2.rgb, temp0.rgb, temp2.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(2) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_1));

	} else {
	    BEGIN_RING(2*44);
	    /* 2 components: 2 for tex0/1/2 */
	    OUT_RING_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_RING_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_RING_REG(R300_US_PIXSIZE, 1); /* highest temp used */

	    /* FP length. */
	    OUT_RING_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(3)));
	    OUT_RING_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(3)));

	    /* Prepare for FP emission. */
	    OUT_RING_REG(R500_US_CODE_OFFSET, 0);
	    OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    /* MAD temp1.rgb, const0.aaa, temp0.ggg, const0.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_A |
						   R500_ALU_RGB_G_SWIZ_A_A |
						   R500_ALU_RGB_B_SWIZ_A_A |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp1.rgb, const1.rgb, temp0.bbb, temp1.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(1)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(1)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_B |
						   R500_ALU_RGB_B_SWIZ_B_B |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD result.rgb, const2.rgb, temp0.rrr, temp1.rgb */
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(1)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(1)));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_R));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_RING_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_1));
	}

	/* Shader constants. */
	OUT_RING_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

	/* constant 0: off, yco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, yco);
	/* constant 1: uco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, gamma);
	/* constant 2: vco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0.0);

	ADVANCE_RING();
    }

    BEGIN_ACCEL_RELOC(6, 2);
    OUT_RING_REG(R300_TX_INVALTAGS, 0);
    OUT_RING_REG(R300_TX_ENABLE, txenable);

    EMIT_WRITE_OFFSET(R300_RB3D_COLOROFFSET0, 0, pPixmap);
    EMIT_COLORPITCH(R300_RB3D_COLORPITCH0, colorpitch, pPixmap);

    /* no need to enable blending */
    OUT_RING_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    OUT_RING_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    ADVANCE_RING();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn, FALSE,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    RADEONWaitForVLine(pScrn, pPixmap,
			       crtc,
			       pPriv->drw_y - crtc->y,
			       (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
R500DisplayTexturedVideo(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!R500PrepareTexturedVideo(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2880 pixels; above that we
     *     render as a quad.
     */

    while (nBox--) {
	float srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	int draw_size = 3 * pPriv->vtx_count + 4 + 2 + 3;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    radeon_cs_flush_indirect(pScrn);
	    if (!R500PrepareTexturedVideo(pScrn, pPriv))
		return;
	}

	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / (float)pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / (float)pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;

	BEGIN_RING(2*2);
	OUT_RING_REG(R300_SC_SCISSOR0, (((dstX) << R300_SCISSOR_X_SHIFT) |
					 ((dstY) << R300_SCISSOR_Y_SHIFT)));
	OUT_RING_REG(R300_SC_SCISSOR1, (((dstX + dstw - 1) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + dsth - 1) << R300_SCISSOR_Y_SHIFT)));
	ADVANCE_RING();

	BEGIN_RING(3 * pPriv->vtx_count + 4);
	OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
			    3 * pPriv->vtx_count));
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));

	if (pPriv->bicubic_enabled) {
	    VTX_OUT_6((float)dstX,            (float)dstY,
		      (float)srcX / pPriv->w, (float)srcY / pPriv->h,
		      (float)srcX + 0.5,      (float)srcY + 0.5);
	    VTX_OUT_6((float)dstX,            (float)(dstY + dstw + dsth),
		      (float)srcX / pPriv->w, ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h,
		      (float)srcX + 0.5,      (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
	    VTX_OUT_6((float)(dstX + dstw + dsth),                       (float)dstY,
		      ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
		      (float)srcY / pPriv->h,
		      (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
		      (float)srcY + 0.5);
	} else {
	    /*
	     * Render a big, scissored triangle. This means
	     * increasing the triangle size and adjusting
	     * texture coordinates.
	     */
	    VTX_OUT_4((float)dstX,            (float)dstY,
		      (float)srcX / pPriv->w, (float)srcY / pPriv->h);
	    VTX_OUT_4((float)dstX,                              (float)(dstY + dsth + dstw),
		      (float)srcX / pPriv->w, ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw + dsth),              (float)dstY,
		      ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
		      (float)srcY / pPriv->h);
	}

	/* flushing is pipelined, free/finish is not */
	OUT_RING_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);

	ADVANCE_RING();

	pBox++;
    }

    BEGIN_RING(2*3);
    OUT_RING_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_RING_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
    OUT_RING_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    ADVANCE_RING();

    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

#undef VTX_OUT_4
#undef VTX_OUT_6
@


1.6
log
@Update to xf86-video-ati 6.14.4. Tested by jasper@@, krw@@, mpi@@, shadchin@@
@
text
@a27 22
#if defined(ACCEL_MMIO) && defined(ACCEL_CP)
#error Cannot define both MMIO and CP acceleration!
#endif

#if !defined(UNIXCPP) || defined(ANSICPP)
#define FUNC_NAME_CAT(prefix,suffix) prefix##suffix
#else
#define FUNC_NAME_CAT(prefix,suffix) prefix/**/suffix
#endif

#ifdef ACCEL_MMIO
#define FUNC_NAME(prefix) FUNC_NAME_CAT(prefix,MMIO)
#else
#ifdef ACCEL_CP
#define FUNC_NAME(prefix) FUNC_NAME_CAT(prefix,CP)
#else
#error No accel type defined!
#endif
#endif

#ifdef ACCEL_CP

d30 6
a35 6
    OUT_RING_F(_dstX);						\
    OUT_RING_F(_dstY);						\
    OUT_RING_F(_srcX);						\
    OUT_RING_F(_srcY);						\
    OUT_RING_F(_maskX);						\
    OUT_RING_F(_maskY);						\
d40 4
a43 4
    OUT_RING_F(_dstX);						\
    OUT_RING_F(_dstY);						\
    OUT_RING_F(_srcX);						\
    OUT_RING_F(_srcY);						\
a45 21
#else /* ACCEL_CP */

#define VTX_OUT_6(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)		\
do {									\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _dstX);			\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _dstY);			\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _srcX);			\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _srcY);			\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _maskX);			\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _maskY);			\
} while (0)

#define VTX_OUT_4(_dstX, _dstY, _srcX, _srcY)			\
do {								\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _dstX);		\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _dstY);		\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _srcX);		\
    OUT_ACCEL_REG_F(RADEON_SE_PORT_DATA0, _srcY);		\
} while (0)

#endif /* !ACCEL_CP */
d48 1
a48 1
FUNC_NAME(RADEONPrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d54 1
a54 1
    uint32_t txformat, txsize, txpitch, txoffset;
d58 3
a60 7
    int scissor_w = MIN(pPixmap->drawable.width, 2047);
    int scissor_h = MIN(pPixmap->drawable.height, 2047);
    ACCEL_PREAMBLE();

#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;
d62 2
a63 2
	radeon_cs_space_reset_bos(info->cs);
        radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d65 2
a66 2
	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d68 2
a69 2
	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);
d71 4
a74 5
	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
a75 3
#else
    (void)src_bo;
#endif
d79 2
a80 29

#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
        dst_pitch = pPixmap->devKind;
    }

#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
a114 2
    txoffset = info->cs ? 0 : pPriv->src_offset;

d117 1
a117 1
    OUT_ACCEL_REG(RADEON_RB3D_CNTL, dst_format);
d120 1
a120 1
    OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
d123 1
a123 1
    FINISH_ACCEL();
d138 1
a138 1
	OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
d142 1
a142 1
	OUT_ACCEL_REG(RADEON_PP_CNTL, (RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE |
d148 1
a148 1
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
d154 3
a156 3
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, txoffset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
d162 1
a162 1
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
d169 1
a169 1
	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
d172 1
a172 1
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
d176 1
a176 1
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_1,
d181 3
a183 3
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_1, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_1,
d189 1
a189 1
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_1,
d196 2
a197 2
	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_1, txsize);
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_1, txpitch);
d200 1
a200 1
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_2,
d205 3
a207 3
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_2, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_2,
d213 1
a213 1
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_2,
d220 3
a222 3
	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_2, txsize);
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_2, txpitch);
	FINISH_ACCEL();
d227 1
a227 1
	OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
d230 1
a230 1
	OUT_ACCEL_REG(RADEON_PP_CNTL, RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);
d232 1
a232 1
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
d238 3
a240 3
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, txoffset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
d246 1
a246 1
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
d253 1
a253 1
	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
d256 1
a256 1
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
d258 1
a258 1
	FINISH_ACCEL();
d261 3
a263 3
    BEGIN_ACCEL(2);
    OUT_ACCEL_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_ACCEL_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
d265 1
a265 1
    FINISH_ACCEL();
d272 1
a272 1
	    crtc = radeon_pick_best_crtc(pScrn,
d278 4
a281 4
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
d288 1
a288 1
FUNC_NAME(RADEONDisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
a294 1
    ACCEL_PREAMBLE();
d304 1
a304 1
    if (!FUNC_NAME(RADEONPrepareTexturedVideo)(pScrn, pPriv))
a325 1
#ifdef ACCEL_CP
d331 2
a332 5
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(RADEONPrepareTexturedVideo)(pScrn, pPriv))
d401 1
a401 1
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
a403 57
#else /* ACCEL_CP */
    BEGIN_ACCEL(nBox * pPriv->vtx_count * 3 + 2);
    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
				      RADEON_VF_PRIM_WALK_DATA |
				      RADEON_VF_RADEON_MODE |
				      ((nBox * 3) << RADEON_VF_NUM_VERTICES_SHIFT)));
    while (nBox--) {
	float srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / (float)pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / (float)pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;


	if (pPriv->is_planar) {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	} else {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	}

	pBox++;
    }

    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
#endif /* !ACCEL_CP */

d408 1
a408 1
FUNC_NAME(R200PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d415 1
a415 1
    uint32_t txfilter, txsize, txpitch, txoffset;
d419 2
a420 2
    int scissor_w = MIN(pPixmap->drawable.width, 2047);
    int scissor_h = MIN(pPixmap->drawable.height, 2047);
d430 1
a430 1
    ACCEL_PREAMBLE();
d432 2
a433 3
#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;
d435 2
a436 2
	radeon_cs_space_reset_bos(info->cs);
        radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d438 2
a439 2
	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d441 4
a444 8
	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
a445 3
#else
    (void)src_bo;
#endif
d449 1
a449 8
#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }
d451 1
a451 19
#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
d488 1
a488 1
    OUT_ACCEL_REG(RADEON_RB3D_CNTL, dst_format);
d492 1
a492 1
    OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
d495 1
a495 1
    FINISH_ACCEL();
a532 2
    txoffset = info->cs ? 0 : pPriv->src_offset;

d546 1
a546 1
	OUT_ACCEL_REG(RADEON_PP_CNTL,
d552 2
a553 2
	OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
d557 4
a560 4
	OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_0,
d563 2
a564 2
	OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, txoffset, src_bo);
d566 13
a578 13
	OUT_ACCEL_REG(R200_PP_TXFILTER_1, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_1, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_1, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_1, txsize);
	OUT_ACCEL_REG(R200_PP_TXPITCH_1, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_1, txoffset + pPriv->planeu_offset, src_bo);

	OUT_ACCEL_REG(R200_PP_TXFILTER_2, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_2, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_2, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_2, txsize);
	OUT_ACCEL_REG(R200_PP_TXPITCH_2, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_2, txoffset + pPriv->planev_offset, src_bo);
d622 1
a622 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
d628 1
a628 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
d632 1
a632 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_0,
d637 1
a637 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
d641 1
a641 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
d650 1
a650 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
d653 1
a653 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_1,
d658 1
a658 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
d662 1
a662 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
d671 1
a671 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
d675 1
a675 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_2,
d681 1
a681 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
d685 1
a685 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
d689 1
a689 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
d693 1
a693 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
d698 1
a698 1
	FINISH_ACCEL();
d704 1
a704 1
	OUT_ACCEL_REG(RADEON_PP_CNTL,
d709 2
a710 2
	OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
d713 4
a716 4
	OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_0,
d719 2
a720 2
	OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, txoffset, src_bo);
d723 1
a723 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
d729 1
a729 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
d734 1
a734 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_0,
d739 1
a739 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
d743 1
a743 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
d752 1
a752 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
d756 1
a756 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_1,
d761 1
a761 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
d765 1
a765 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
d774 1
a774 1
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
d779 1
a779 1
	OUT_ACCEL_REG(R200_PP_TXABLEND_2,
d785 1
a785 1
	OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
d789 1
a789 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
d793 1
a793 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
d797 1
a797 1
	OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
d802 1
a802 1
	FINISH_ACCEL();
d805 3
a807 3
    BEGIN_ACCEL(2);
    OUT_ACCEL_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_ACCEL_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
d809 1
a809 1
    FINISH_ACCEL();
d816 1
a816 1
	    crtc = radeon_pick_best_crtc(pScrn,
d822 4
a825 4
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
d832 1
a832 1
FUNC_NAME(R200DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
a838 1
    ACCEL_PREAMBLE();
d848 1
a848 1
    if (!FUNC_NAME(R200PrepareTexturedVideo)(pScrn, pPriv))
a870 1
#ifdef ACCEL_CP
d876 2
a877 5
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R200PrepareTexturedVideo)(pScrn, pPriv))
d936 1
a936 1
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
a938 54
#else /* ACCEL_CP */
    BEGIN_ACCEL(nBox * 3 * pPriv->vtx_count + 2);
    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
				      RADEON_VF_PRIM_WALK_DATA |
				      ((nBox * 3) << RADEON_VF_NUM_VERTICES_SHIFT)));
    while (nBox--) {
	float srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / (float)pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / (float)pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / (float)pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / (float)pPriv->dst_h;

	if (pPriv->is_planar) {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	} else {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	}

	pBox++;
    }

    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
#endif /* !ACCEL_CP */
d944 1
a944 1
FUNC_NAME(R300PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d950 1
a950 1
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch;
d952 1
a952 1
    uint32_t txenable, colorpitch, bicubic_offset;
d955 1
a955 1
    ACCEL_PREAMBLE();
d957 2
a958 3
#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;
d960 2
a961 5
	radeon_cs_space_reset_bos(info->cs);
	radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	if (pPriv->bicubic_enabled)
	  radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d963 2
a964 2
	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);
d966 4
a969 5
	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
a970 3
#else
    (void)src_bo;
#endif
d974 2
a975 28
#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }

#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
a1041 2
    txoffset = info->cs ? 0 : pPriv->src_offset;

d1043 3
a1045 3
    OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
    OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
    OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
d1047 1
a1047 1
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1 | R300_TX_FORMAT_CACHE_HALF_REGION_0);
d1049 4
a1052 4
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, txoffset, src_bo);
    FINISH_ACCEL();
d1068 13
a1080 13
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_2);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_3);
	OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	FINISH_ACCEL();
a1099 5
	if (info->cs)
	    bicubic_offset = 0;
	else
	    bicubic_offset = pPriv->bicubic_src_offset;

d1101 7
a1107 7
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, bicubic_offset, info->bicubic_bo);
	FINISH_ACCEL();
d1116 1
a1116 1
	    BEGIN_ACCEL(7);
d1118 1
a1118 1
	    BEGIN_ACCEL(6);
d1121 1
a1121 1
	    BEGIN_ACCEL(5);
d1123 1
a1123 1
	    BEGIN_ACCEL(4);
d1140 1
a1140 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
d1149 1
a1149 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
d1156 1
a1156 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
d1177 1
a1177 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
d1181 1
a1181 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
d1184 1
a1184 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
d1188 1
a1188 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
d1194 1
a1194 1
    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
d1196 1
a1196 1
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
d1199 1
a1199 1
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));
d1201 2
a1202 2
    OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
    FINISH_ACCEL();
d1207 1
a1207 1
	    BEGIN_ACCEL(79);
d1210 1
a1210 1
	    OUT_ACCEL_REG(R300_RS_COUNT, ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
d1214 1
a1214 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));
d1217 1
a1217 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 5);
d1220 1
a1220 1
	    OUT_ACCEL_REG(R300_US_CONFIG, ((2 << R300_NLEVEL_SHIFT) |
d1224 1
a1224 1
	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
d1230 2
a1231 2
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_0, 0);
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_1, (R300_ALU_START(0) |
d1235 1
a1235 1
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_2, (R300_ALU_START(1) |
d1239 1
a1239 1
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(11) |
d1252 1
a1252 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(0), (R300_TEX_INST(R300_TEX_INST_LD) |
d1258 1
a1258 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1262 1
a1262 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(1) |
d1265 1
a1265 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1269 1
a1269 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDRD(1) |
d1275 1
a1275 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(1), (R300_TEX_INST(R300_TEX_INST_LD) |
d1281 1
a1281 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1285 1
a1285 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(2) |
d1289 1
a1289 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1293 1
a1293 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(3) |
d1298 1
a1298 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1302 1
a1302 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(2) |
d1306 1
a1306 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1310 1
a1310 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(2) |
d1314 1
a1314 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1318 1
a1318 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(1) |
d1323 1
a1323 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1327 1
a1327 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(4) |
d1331 1
a1331 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1335 1
a1335 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(1) |
d1340 1
a1340 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1344 1
a1344 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(5) |
d1348 1
a1348 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1352 1
a1352 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(1) |
d1357 1
a1357 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1361 1
a1361 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(3) |
d1365 1
a1365 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1369 1
a1369 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(1) |
d1374 1
a1374 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1378 1
a1378 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(1) |
d1382 1
a1382 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1386 1
a1386 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
d1390 1
a1390 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1394 1
a1394 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(1) |
d1398 1
a1398 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1402 1
a1402 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
d1406 1
a1406 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1410 1
a1410 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(2) |
d1414 1
a1414 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1418 1
a1418 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
d1422 1
a1422 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1426 1
a1426 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(3) |
d1430 1
a1430 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(10), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1434 1
a1434 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(10), (R300_ALU_RGB_ADDR0(0) |
d1438 1
a1438 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(10), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1442 1
a1442 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(10), (R300_ALU_ALPHA_ADDRD(0) |
d1448 1
a1448 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(2), (R300_TEX_INST(R300_TEX_INST_LD) |
d1454 1
a1454 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(3), (R300_TEX_INST(R300_TEX_INST_LD) |
d1460 1
a1460 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(4), (R300_TEX_INST(R300_TEX_INST_LD) |
d1466 1
a1466 1
	    OUT_ACCEL_REG(R300_US_TEX_INST(5), (R300_TEX_INST(R300_TEX_INST_LD) |
d1474 1
a1474 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(11), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1479 1
a1479 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(11), (R300_ALU_RGB_ADDR0(3) |
d1484 1
a1484 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(11), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1488 1
a1488 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(11), (R300_ALU_ALPHA_ADDR0(3) |
d1497 1
a1497 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(12), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1503 1
a1503 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(12), (R300_ALU_RGB_ADDR0(0) |
d1508 1
a1508 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(12), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1512 1
a1512 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(12), (R300_ALU_ALPHA_ADDR0(0) |
d1521 1
a1521 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(13), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
d1526 1
a1526 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(13), (R300_ALU_RGB_ADDR0(0) |
d1530 1
a1530 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(13), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1534 1
a1534 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(13), (R300_ALU_ALPHA_ADDR0(0) |
d1540 9
a1548 9
	    OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(1.0/(float)pPriv->w));
	    OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), 0);

	    OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(1.0/(float)pPriv->h));
	    OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), 0);
d1550 1
a1550 1
	    FINISH_ACCEL();
d1552 1
a1552 1
	    BEGIN_ACCEL(11);
d1554 1
a1554 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d1558 1
a1558 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d1560 1
a1560 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */
d1563 1
a1563 1
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
d1566 1
a1566 1
	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
d1571 1
a1571 1
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
d1578 1
a1578 1
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
d1585 1
a1585 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR_0, (R300_ALU_RGB_ADDR0(0) |
d1593 1
a1593 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST_0, (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d1603 1
a1603 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR_0, (R300_ALU_ALPHA_ADDR0(0) |
d1610 1
a1610 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST_0, (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
d1619 1
a1619 1
	    FINISH_ACCEL();
d1689 1
a1689 1
	    BEGIN_ACCEL(needgamma ? 28 + 33 : 33);
d1691 1
a1691 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d1695 1
a1695 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d1697 1
a1697 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */
d1700 1
a1700 1
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
d1703 1
a1703 1
	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
d1708 1
a1708 1
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
d1715 1
a1715 1
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
d1719 1
a1719 1
	    OUT_ACCEL_REG(R300_US_TEX_INST_1, (R300_TEX_SRC_ADDR(0) |
d1723 1
a1723 1
	    OUT_ACCEL_REG(R300_US_TEX_INST_2, (R300_TEX_SRC_ADDR(0) |
d1730 1
a1730 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
d1735 1
a1735 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
d1744 1
a1744 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
d1749 1
a1749 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1755 1
a1755 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
d1760 1
a1760 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d1769 1
a1769 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(2) |
d1771 1
a1771 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1777 1
a1777 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
d1783 1
a1783 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d1793 1
a1793 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
d1796 1
a1796 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1803 1
a1803 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
d1805 1
a1805 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3),
d1809 1
a1809 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
d1811 1
a1811 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d1817 1
a1817 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
d1819 1
a1819 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4),
d1823 1
a1823 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
d1825 1
a1825 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d1831 1
a1831 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
d1833 1
a1833 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5),
d1837 1
a1837 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
d1839 1
a1839 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d1845 1
a1845 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
d1850 1
a1850 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d1859 1
a1859 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
d1862 1
a1862 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1868 1
a1868 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
d1871 1
a1871 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7),
d1875 1
a1875 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
d1877 1
a1877 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d1883 1
a1883 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
d1886 1
a1886 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8),
d1890 1
a1890 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
d1892 1
a1892 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d1898 1
a1898 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
d1901 1
a1901 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9),
d1905 1
a1905 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
d1907 1
a1907 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d1913 1
a1913 1
	    BEGIN_ACCEL(needgamma ? 28 + 31 : 31);
d1915 1
a1915 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d1919 1
a1919 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d1921 1
a1921 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 1); /* highest temp used */
d1924 1
a1924 1
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
d1927 1
a1927 1
	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
d1932 1
a1932 1
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
d1939 1
a1939 1
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
d1946 1
a1946 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
d1951 1
a1951 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
d1960 1
a1960 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
d1965 1
a1965 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1971 1
a1971 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
d1976 1
a1976 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d1985 1
a1985 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(0) |
d1987 1
a1987 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d1993 1
a1993 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
d1999 1
a1999 1
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d2009 1
a2009 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
d2012 1
a2012 1
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d2019 1
a2019 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
d2021 1
a2021 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3),
d2025 1
a2025 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
d2027 1
a2027 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d2033 1
a2033 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
d2035 1
a2035 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4),
d2039 1
a2039 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
d2041 1
a2041 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d2047 1
a2047 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
d2049 1
a2049 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5),
d2053 1
a2053 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
d2055 1
a2055 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
d2061 1
a2061 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
d2066 1
a2066 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
d2075 1
a2075 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
d2078 1
a2078 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
d2084 1
a2084 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
d2087 1
a2087 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7),
d2091 1
a2091 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
d2093 1
a2093 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d2099 1
a2099 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
d2102 1
a2102 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8),
d2106 1
a2106 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
d2108 1
a2108 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d2114 1
a2114 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
d2117 1
a2117 1
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9),
d2121 1
a2121 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
d2123 1
a2123 1
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
d2132 4
a2135 4
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(off[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), F_TO_24(off[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), F_TO_24(off[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), F_TO_24(yco));
d2137 4
a2140 4
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), F_TO_24(uco[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(uco[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), F_TO_24(uco[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), F_TO_24(gamma));
d2142 4
a2145 4
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(2), F_TO_24(vco[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(2), F_TO_24(vco[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(2), F_TO_24(vco[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(2), F_TO_24(0.0));
d2147 1
a2147 1
	FINISH_ACCEL();
d2151 2
a2152 2
    OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
    OUT_ACCEL_REG(R300_TX_ENABLE, txenable);
d2158 1
a2158 1
    OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
d2160 2
a2161 2
    OUT_ACCEL_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    FINISH_ACCEL();
d2168 1
a2168 1
	    crtc = radeon_pick_best_crtc(pScrn,
d2174 4
a2177 4
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
d2184 1
a2184 1
FUNC_NAME(R300DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
a2190 1
    ACCEL_PREAMBLE();
d2200 1
a2200 1
    if (!FUNC_NAME(R300PrepareTexturedVideo)(pScrn, pPriv))
a2226 1
#ifdef ACCEL_CP
d2230 2
a2231 5
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R300PrepareTexturedVideo)(pScrn, pPriv))
a2233 1
#endif
d2260 1
a2260 1
	BEGIN_ACCEL(2);
d2262 1
a2262 1
	OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX + 1440) << R300_SCISSOR_X_SHIFT) |
d2264 1
a2264 1
	OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw + 1440 - 1) << R300_SCISSOR_X_SHIFT) |
d2266 1
a2266 1
	FINISH_ACCEL();
a2267 1
#ifdef ACCEL_CP
a2282 5
#else /* ACCEL_CP */
	if (use_quad)
	    BEGIN_ACCEL(2 + pPriv->vtx_count * 4);
	else
	    BEGIN_ACCEL(2 + pPriv->vtx_count * 3);
a2283 9
	if (use_quad)
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_QUAD_LIST |
					      RADEON_VF_PRIM_WALK_DATA |
					      (4 << RADEON_VF_NUM_VERTICES_SHIFT)));
	else
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
					      RADEON_VF_PRIM_WALK_DATA |
					      (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
#endif
d2345 1
a2345 1
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
a2346 1
#ifdef ACCEL_CP
a2347 3
#else
	FINISH_ACCEL();
#endif /* !ACCEL_CP */
d2352 5
a2356 5
    BEGIN_ACCEL(3);
    OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
d2362 1
a2362 1
FUNC_NAME(R500PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d2368 1
a2368 1
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch, us_format = 0;
d2370 1
a2370 1
    uint32_t txenable, colorpitch, bicubic_offset;
d2373 1
a2373 1
    ACCEL_PREAMBLE();
d2375 2
a2376 3
#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;
d2378 10
a2387 14
	radeon_cs_space_reset_bos(info->cs);
	radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
a2388 3
#else
    (void)src_bo;
#endif
d2392 2
a2393 28
#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }

#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
a2484 2
    txoffset = info->cs ? 0 : pPriv->src_offset;

d2486 6
a2491 6
    OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
    OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
    OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
    OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, txoffset, src_bo);
d2493 2
a2494 2
	OUT_ACCEL_REG(R500_US_FORMAT0_0, us_format);
    FINISH_ACCEL();
d2510 13
a2522 13
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8);
	OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	FINISH_ACCEL();
a2541 5
	if (info->cs)
	    bicubic_offset = 0;
	else
	    bicubic_offset = pPriv->bicubic_src_offset;

d2543 7
a2549 7
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, bicubic_offset, info->bicubic_bo);
	FINISH_ACCEL();
d2558 1
a2558 1
	    BEGIN_ACCEL(7);
d2560 1
a2560 1
	    BEGIN_ACCEL(6);
d2563 1
a2563 1
	    BEGIN_ACCEL(5);
d2565 1
a2565 1
	    BEGIN_ACCEL(4);
d2582 1
a2582 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
d2591 1
a2591 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
d2598 1
a2598 1
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
d2619 1
a2619 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
d2623 1
a2623 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
d2626 1
a2626 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
d2630 1
a2630 1
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
d2636 1
a2636 1
    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
d2638 1
a2638 1
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
d2641 1
a2641 1
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));
d2643 2
a2644 2
    OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
    FINISH_ACCEL();
d2649 1
a2649 1
	    BEGIN_ACCEL(7);
d2652 1
a2652 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d2657 1
a2657 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));
d2660 1
a2660 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 5);
d2663 1
a2663 1
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
d2665 1
a2665 1
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
d2669 3
a2671 3
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
	    FINISH_ACCEL();
d2673 1
a2673 1
	    BEGIN_ACCEL(89);
d2681 1
a2681 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2685 1
a2685 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
d2688 1
a2688 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
d2698 3
a2700 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2703 1
a2703 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2708 1
a2708 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
d2712 1
a2712 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
d2722 3
a2724 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2727 1
a2727 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2733 1
a2733 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d2736 1
a2736 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d2739 1
a2739 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d2747 1
a2747 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
d2753 1
a2753 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
d2761 1
a2761 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2766 1
a2766 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d2770 1
a2770 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d2774 1
a2774 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d2782 1
a2782 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
d2788 1
a2788 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
d2797 1
a2797 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2802 1
a2802 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(3) |
d2804 1
a2804 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(3) |
d2806 1
a2806 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
d2813 1
a2813 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
d2818 1
a2818 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
d2827 1
a2827 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2832 1
a2832 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d2835 1
a2835 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
d2845 3
a2847 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2850 1
a2850 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2856 1
a2856 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d2860 1
a2860 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
d2870 3
a2872 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2875 1
a2875 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2880 1
a2880 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d2884 1
a2884 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d2888 1
a2888 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d2896 1
a2896 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
d2902 1
a2902 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
d2911 1
a2911 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2916 1
a2916 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(4) |
d2918 1
a2918 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(4) |
d2920 1
a2920 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
d2927 1
a2927 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
d2932 1
a2932 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
d2941 1
a2941 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2947 1
a2947 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d2950 1
a2950 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d2960 3
a2962 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2965 1
a2965 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d2971 1
a2971 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d2975 1
a2975 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d2985 3
a2987 3
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d2992 1
a2992 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d2997 1
a2997 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(3) |
d3001 1
a3001 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(3) |
d3005 1
a3005 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
d3013 1
a3013 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
d3019 1
a3019 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
d3030 1
a3030 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d3036 1
a3036 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d3040 1
a3040 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d3044 1
a3044 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
d3052 1
a3052 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
d3058 1
a3058 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
d3069 1
a3069 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
d3080 1
a3080 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d3084 1
a3084 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d3088 1
a3088 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
d3096 1
a3096 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
d3102 1
a3102 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
d3111 1
a3111 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));
d3119 1
a3119 1
	    FINISH_ACCEL();
d3121 1
a3121 1
	    BEGIN_ACCEL(19);
d3123 1
a3123 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d3128 1
a3128 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d3131 1
a3131 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */
d3134 1
a3134 1
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
d3136 1
a3136 1
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
d3140 2
a3141 2
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
d3144 1
a3144 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d3152 1
a3152 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d3156 1
a3156 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d3164 1
a3164 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
d3174 2
a3175 2
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d3178 1
a3178 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
d3187 1
a3187 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d3192 1
a3192 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d3197 1
a3197 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3205 1
a3205 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3208 1
a3208 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3213 1
a3213 1
	    FINISH_ACCEL();
a3250 1
	Bool needgamma = FALSE;
a3271 11
	if (gamma != 1.0) {
	    needgamma = TRUE;
	    /* note: gamma correction is out = in ^ gamma;
	       gpu can only do LG2/EX2 therefore we transform into
	       in ^ gamma = 2 ^ (log2(in) * gamma).
	       Lots of scalar ops, unfortunately (better solution?) -
	       without gamma that's 3 inst, with gamma it's 10...
	       could use different gamma factors per channel,
	       if that's of any use. */
	}

d3273 1
a3273 1
	    BEGIN_ACCEL(56);
d3275 1
a3275 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d3280 1
a3280 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d3283 1
a3283 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */
d3286 1
a3286 1
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
d3288 1
a3288 1
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
d3292 2
a3293 2
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
d3296 1
a3296 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d3304 1
a3304 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d3307 1
a3307 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d3315 1
a3315 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
d3325 2
a3326 2
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d3329 1
a3329 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d3337 1
a3337 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
d3340 1
a3340 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d3348 1
a3348 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
d3358 2
a3359 2
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d3362 1
a3362 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d3370 1
a3370 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(2) |
d3374 1
a3374 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d3382 1
a3382 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
d3392 2
a3393 2
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d3397 1
a3397 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d3403 1
a3403 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d3408 1
a3408 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d3413 1
a3413 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3421 1
a3421 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3425 1
a3425 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3435 1
a3435 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d3441 1
a3441 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
d3445 1
a3445 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
d3449 1
a3449 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3457 1
a3457 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3461 1
a3461 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3471 1
a3471 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
d3480 1
a3480 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
d3484 1
a3484 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(2) |
d3488 1
a3488 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3496 1
a3496 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3500 1
a3500 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3510 1
a3510 1
	    BEGIN_ACCEL(44);
d3512 1
a3512 1
	    OUT_ACCEL_REG(R300_RS_COUNT,
d3517 1
a3517 1
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));
d3520 1
a3520 1
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 1); /* highest temp used */
d3523 1
a3523 1
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
d3525 1
a3525 1
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
d3529 2
a3530 2
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
d3533 1
a3533 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
d3541 1
a3541 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
d3545 1
a3545 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
d3553 1
a3553 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
d3563 2
a3564 2
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
d3568 1
a3568 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d3574 1
a3574 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
d3579 1
a3579 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
d3584 1
a3584 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3592 1
a3592 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3596 1
a3596 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3606 1
a3606 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
d3612 1
a3612 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
d3616 1
a3616 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
d3620 1
a3620 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3628 1
a3628 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3632 1
a3632 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3642 1
a3642 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
d3651 1
a3651 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
d3655 1
a3655 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
d3659 1
a3659 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
d3667 1
a3667 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
d3671 1
a3671 1
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
d3682 1
a3682 1
	OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));
d3700 1
a3700 1
	FINISH_ACCEL();
d3704 2
a3705 2
    OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
    OUT_ACCEL_REG(R300_TX_ENABLE, txenable);
d3711 1
a3711 1
    OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
d3713 2
a3714 2
    OUT_ACCEL_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    FINISH_ACCEL();
d3721 1
a3721 1
	    crtc = radeon_pick_best_crtc(pScrn,
d3727 4
a3730 4
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
d3737 1
a3737 1
FUNC_NAME(R500DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
a3743 1
    ACCEL_PREAMBLE();
d3753 1
a3753 1
    if (!FUNC_NAME(R500PrepareTexturedVideo)(pScrn, pPriv))
a3778 1
#ifdef ACCEL_CP
d3782 2
a3783 5
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R500PrepareTexturedVideo)(pScrn, pPriv))
a3785 1
#endif
d3802 2
a3803 2
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX) << R300_SCISSOR_X_SHIFT) |
d3805 1
a3805 1
	OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw - 1) << R300_SCISSOR_X_SHIFT) |
d3807 1
a3807 1
	FINISH_ACCEL();
a3808 1
#ifdef ACCEL_CP
d3815 1
a3815 6
#else /* ACCEL_CP */
	BEGIN_ACCEL(2 + pPriv->vtx_count * 3);
	OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
					  RADEON_VF_PRIM_WALK_DATA |
					  (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
#endif
d3844 1
a3844 1
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
a3845 1
#ifdef ACCEL_CP
a3846 3
#else
	FINISH_ACCEL();
#endif /* !ACCEL_CP */
d3851 5
a3855 5
    BEGIN_ACCEL(3);
    OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
a3861 1
#undef FUNC_NAME
@


1.5
log
@Re-update xf86-video-ati to 6.14.3.

Because of ati.c revision 1.5, it will not be selected by
autoconfiguration code, so people who want to run this version of the
driver on their radeon cards need an explicit "Device" section in
xorg.conf.
@
text
@d124 2
d440 1
a440 1
	    int srcX, srcY, srcw, srch;
d449 1
a449 1
		     pPriv->src_w) / pPriv->dst_w;
d452 1
a452 1
		     pPriv->src_h) / pPriv->dst_h;
d454 2
a455 2
	    srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d496 1
a496 1
	int srcX, srcY, srcw, srch;
d505 1
a505 1
		 pPriv->src_w) / pPriv->dst_w;
d508 1
a508 1
		 pPriv->src_h) / pPriv->dst_h;
d510 2
a511 2
	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d593 2
d1073 1
a1073 1
	    int srcX, srcY, srcw, srch;
d1082 1
a1082 1
		     pPriv->src_w) / pPriv->dst_w;
d1085 1
a1085 1
		     pPriv->src_h) / pPriv->dst_h;
d1087 2
a1088 2
	    srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d1127 1
a1127 1
	int srcX, srcY, srcw, srch;
d1136 1
a1136 1
		 pPriv->src_w) / pPriv->dst_w;
d1139 1
a1139 1
		 pPriv->src_h) / pPriv->dst_h;
d1141 2
a1142 2
	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d1212 2
d2502 1
a2502 1
	int srcX, srcY, srcw, srch;
d2525 1
a2525 1
		 pPriv->src_w) / pPriv->dst_w;
d2528 1
a2528 1
		 pPriv->src_h) / pPriv->dst_h;
d2530 2
a2531 2
	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d2696 2
d4133 1
a4133 1
	int srcX, srcY, srcw, srch;
d4155 1
a4155 1
		 pPriv->src_w) / pPriv->dst_w;
d4158 1
a4158 1
		 pPriv->src_h) / pPriv->dst_h;
d4160 2
a4161 2
	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;
@


1.4
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@d50 2
a51 2
#define VTX_OUT_FILTER(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
do {									\
d60 1
a60 1
#define VTX_OUT(_dstX, _dstY, _srcX, _srcY)	\
d70 1
a70 1
#define VTX_OUT_FILTER(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
d80 1
a80 1
#define VTX_OUT(_dstX, _dstY, _srcX, _srcY)	\
d90 2
a91 2
static void
FUNC_NAME(RADEONDisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d95 8
a102 9
    uint32_t txformat;
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch;
    uint32_t dst_offset, dst_pitch, dst_format;
    uint32_t txenable, colorpitch;
    uint32_t blendcntl;
    Bool isplanar = FALSE;
    int dstxoff, dstyoff, pixel_shift, vtx_count;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
d105 21
d128 1
a130 1
	dst_offset = exaGetPixmapOffset(pPixmap) + info->fbLocation + pScrn->fbOffset;
d134 3
a136 13
	{
	    dst_offset = (pPixmap->devPrivate.ptr - info->FB) +
		info->fbLocation + pScrn->fbOffset;
	    dst_pitch = pPixmap->devKind;
	}

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif
d143 14
a156 13
	{
	    BEGIN_ACCEL(2);
	    if (IS_R300_3D || IS_R500_3D)
		OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	    else
		OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	    /* We must wait for 3d to idle, in case source was just written as a dest. */
	    OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
			  RADEON_WAIT_HOST_IDLECLEAN |
			  RADEON_WAIT_2D_IDLECLEAN |
			  RADEON_WAIT_3D_IDLECLEAN |
			  RADEON_WAIT_DMA_GUI_IDLE);
	    FINISH_ACCEL();
d158 14
a171 3
	    if (!info->accel_state->XInited3D)
		RADEONInit3DEngine(pScrn);
	}
d173 10
a182 4
    if (pPriv->bicubic_enabled)
	vtx_count = 6;
    else
	vtx_count = 4;
d184 1
a184 2
    if (IS_R300_3D || IS_R500_3D) {
	uint32_t output_fmt;
d186 1
a186 38
	switch (pPixmap->drawable.bitsPerPixel) {
	case 16:
	    if (pPixmap->drawable.depth == 15)
		dst_format = R300_COLORFORMAT_ARGB1555;
	    else
		dst_format = R300_COLORFORMAT_RGB565;
	    break;
	case 32:
	    dst_format = R300_COLORFORMAT_ARGB8888;
	    break;
	default:
	    return;
	}

	output_fmt = (R300_OUT_FMT_C4_8 |
		      R300_OUT_FMT_C0_SEL_BLUE |
		      R300_OUT_FMT_C1_SEL_GREEN |
		      R300_OUT_FMT_C2_SEL_RED |
		      R300_OUT_FMT_C3_SEL_ALPHA);

	colorpitch = dst_pitch >> pixel_shift;
	colorpitch |= dst_format;

	if (RADEONTilingEnabled(pScrn, pPixmap))
	    colorpitch |= R300_COLORTILE;

	if (pPriv->planar_hw && (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12)) {
	    isplanar = TRUE;
	}

	if (isplanar) {
	    txformat1 = R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_HALF_REGION_0;
	    txpitch = pPriv->src_pitch;
	} else {
	    if (pPriv->id == FOURCC_UYVY)
		txformat1 = R300_TX_FORMAT_YVYU422;
	    else
		txformat1 = R300_TX_FORMAT_VYUY422;
d188 2
a189 1
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;
d191 1
a191 4
	    /* pitch is in pixels */
	    txpitch = pPriv->src_pitch / 2;
	}
	txpitch -= 1;
d193 1
a193 3
	txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		    (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		    R300_TXPITCH_EN);
d195 5
a199 2
	info->accel_state->texW[0] = pPriv->w;
	info->accel_state->texH[0] = pPriv->h;
d201 1
a201 5
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MAG_FILTER_LINEAR |
		    R300_TX_MIN_FILTER_LINEAR |
		    (0 << R300_TX_ID_SHIFT));
d203 94
d298 6
a303 2
	if (IS_R500_3D && ((pPriv->w - 1) & 0x800))
	    txpitch |= R500_TXWIDTH_11;
d305 2
a306 2
	if (IS_R500_3D && ((pPriv->h - 1) & 0x800))
	    txpitch |= R500_TXHEIGHT_11;
d308 1
a308 1
	txoffset = pPriv->src_offset;
d310 26
a335 7
	BEGIN_ACCEL(6);
	OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
	OUT_ACCEL_REG(R300_TX_OFFSET_0, txoffset);
d337 24
d362 20
a381 1
	txenable = R300_TEX_0_ENABLE;
d383 2
a384 27
	if (isplanar) {
	    txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
			(((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
			R300_TXPITCH_EN);
	    txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
	    txpitch -= 1;
	    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		        R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
			R300_TX_MIN_FILTER_LINEAR |
			R300_TX_MAG_FILTER_LINEAR);

		BEGIN_ACCEL(12);
		OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
		OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_2);
		OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset);
		OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
		OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_3);
		OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset);
		FINISH_ACCEL();
		txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
	}
d386 27
a412 38
	if (pPriv->bicubic_enabled) {
		/* Size is 128x1 */
		txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
			     (0x0 << R300_TXHEIGHT_SHIFT) |
			     R300_TXPITCH_EN);
		/* Format is 32-bit floats, 4bpp */
		txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
		/* Pitch is 127 (128-1) */
		txpitch = 0x7f;
		/* Tex filter */
		txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
			    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
			    R300_TX_MIN_FILTER_NEAREST |
			    R300_TX_MAG_FILTER_NEAREST |
			    (1 << R300_TX_ID_SHIFT));

		BEGIN_ACCEL(6);
		OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
		OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
		OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_1, pPriv->bicubic_src_offset);
		FINISH_ACCEL();

		/* Enable tex 1 */
		txenable |= R300_TEX_1_ENABLE;
	}

	/* setup the VAP */
	if (info->accel_state->has_tcl) {
	    if (pPriv->bicubic_enabled)
		BEGIN_ACCEL(7);
	    else
		BEGIN_ACCEL(6);
	} else {
	    if (pPriv->bicubic_enabled)
		BEGIN_ACCEL(5);
d414 3
a416 1
		BEGIN_ACCEL(4);
d418 37
d456 13
a468 57
	/* These registers define the number, type, and location of data submitted
	 * to the PVS unit of GA input (when PVS is disabled)
	 * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
	 * enabled.  This memory provides the imputs to the vertex shader program
	 * and ordering is not important.  When PVS/TCL is disabled, this field maps
	 * directly to the GA input memory and the order is signifigant.  In
	 * PVS_BYPASS mode the order is as follows:
	 * Position
	 * Point Size
	 * Color 0-3
	 * Textures 0-7
	 * Fog
	 */
	if (pPriv->bicubic_enabled) {
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
			   (0 << R300_SKIP_DWORDS_0_SHIFT) |
			   (0 << R300_DST_VEC_LOC_0_SHIFT) |
			   R300_SIGNED_0 |
			   (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
			   (0 << R300_SKIP_DWORDS_1_SHIFT) |
			   (6 << R300_DST_VEC_LOC_1_SHIFT) |
			   R300_SIGNED_1));
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
			   (0 << R300_SKIP_DWORDS_2_SHIFT) |
			   (7 << R300_DST_VEC_LOC_2_SHIFT) |
			   R300_LAST_VEC_2 |
			   R300_SIGNED_2));
	} else {
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
			   (0 << R300_SKIP_DWORDS_0_SHIFT) |
			   (0 << R300_DST_VEC_LOC_0_SHIFT) |
			   R300_SIGNED_0 |
			   (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
			   (0 << R300_SKIP_DWORDS_1_SHIFT) |
			   (6 << R300_DST_VEC_LOC_1_SHIFT) |
			   R300_LAST_VEC_1 |
			   R300_SIGNED_1));
	}

	/* load the vertex shader
	 * We pre-load vertex programs in RADEONInit3DEngine():
	 * - exa mask/Xv bicubic
	 * - exa no mask
	 * - Xv
	 * Here we select the offset of the vertex program we want to use
	 */
	if (info->accel_state->has_tcl) {
	    if (pPriv->bicubic_enabled) {
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			      ((0 << R300_PVS_FIRST_INST_SHIFT) |
			       (2 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			       (2 << R300_PVS_LAST_INST_SHIFT)));
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			      (2 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
d470 9
a478 6
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			      ((5 << R300_PVS_FIRST_INST_SHIFT) |
			       (6 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			       (6 << R300_PVS_LAST_INST_SHIFT)));
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			      (6 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
d480 2
d484 23
a506 7
	/* Position and one set of 2 texture coordinates */
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
	if (pPriv->bicubic_enabled)
	    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
						   (2 << R300_TEX_1_COMP_CNT_SHIFT)));
	else
	    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));
d508 2
a509 2
	OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
	FINISH_ACCEL();
a510 345
	/* setup pixel shader */
	if (IS_R300_3D) {
	    if (pPriv->bicubic_enabled) {
		BEGIN_ACCEL(79);

		/* 4 components: 2 for tex0 and 2 for tex1 */
		OUT_ACCEL_REG(R300_RS_COUNT, ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
						   R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((2 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		/* Set nodes. */
		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
							R300_ALU_CODE_SIZE(14) |
							R300_TEX_CODE_OFFSET(0) |
							R300_TEX_CODE_SIZE(6)));

		/* Nodes are allocated highest first, but executed lowest first */
		OUT_ACCEL_REG(R300_US_CODE_ADDR_0, 0);
		OUT_ACCEL_REG(R300_US_CODE_ADDR_1, (R300_ALU_START(0) |
							R300_ALU_SIZE(0) |
							R300_TEX_START(0) |
							R300_TEX_SIZE(0)));
		OUT_ACCEL_REG(R300_US_CODE_ADDR_2, (R300_ALU_START(1) |
							R300_ALU_SIZE(9) |
							R300_TEX_START(1) |
							R300_TEX_SIZE(0)));
		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(11) |
							R300_ALU_SIZE(2) |
							R300_TEX_START(2) |
							R300_TEX_SIZE(3) |
							R300_RGBA_OUT));

		/* ** BICUBIC FP ** */

		/* texcoord0 => temp0
		 * texcoord1 => temp1 */

		// first node
		/* TEX temp2, temp1.rrr0, tex1, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(0), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(1) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(2)));

		/* MOV temp1.r, temp1.ggg0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		// second node
		/* TEX temp1, temp1, tex1, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(1), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(1) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(1)));

		/* MUL temp3.rg, temp2.ggg0, const0.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(2) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		/* MUL temp2.rg, temp2.rrr0, const0.rgb */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(2) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDRD(2) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(2) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp4.rg, temp1.ggg0, const1.rgb, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(4) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(4) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp5.rg, temp1.ggg0, const1.rgb, temp2.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_ADDRD(5) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(5) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp3.rg, temp1.rrr0, const1.rgb, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp1.rg, temp1.rrr0, const1.rgb, temp2.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp1.rg, temp0.rgb0, temp1.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp2.rg, temp0.rgb0, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(2) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(2) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp3.rg, temp0.rgb0, temp5.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(5) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp0.rg, temp0.rgb0, temp4.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(10), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(10), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(4) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(10), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(10), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		// third node
		/* TEX temp4, temp1.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(2), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(4)));

		/* TEX temp3, temp3.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(3), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(3) |
						   R300_TEX_DST_ADDR(3)));

		/* TEX temp5, temp2.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(4), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(2) |
						   R300_TEX_DST_ADDR(5)));

		/* TEX temp0, temp0.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(5), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(0) |
						   R300_TEX_DST_ADDR(0)));

		/* LRP temp3, temp1.bbbb, temp4, temp3 ->
		 * - PRESUB temps, temp4 - temp3
		 * - MAD temp3, temp1.bbbb, temps, temp3 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(11), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(11), (R300_ALU_RGB_ADDR0(3) |
						   R300_ALU_RGB_ADDR1(4) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(11), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(11), (R300_ALU_ALPHA_ADDR0(3) |
						   R300_ALU_ALPHA_ADDR1(4) |
						   R300_ALU_ALPHA_ADDR2(1) |
						   R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

		/* LRP temp0, temp1.bbbb, temp5, temp0 ->
		 * - PRESUB temps, temp5 - temp0
		 * - MAD temp0, temp1.bbbb, temps, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(12), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0) |
						   R300_ALU_RGB_INSERT_NOP));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(12), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(5) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(12), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(12), (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(5) |
						   R300_ALU_ALPHA_ADDR2(1) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

		/* LRP output, temp2.bbbb, temp3, temp0 ->
		 * - PRESUB temps, temp3 - temp0
		 * - MAD output, temp2.bbbb, temps, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(13), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(13), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(3) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(13), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(13), (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(3) |
						   R300_ALU_ALPHA_ADDR2(2) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A)));

		/* Shader constants. */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(1.0/(float)pPriv->w));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), 0);

		OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(1.0/(float)pPriv->h));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), 0);
d512 14
a525 2
		FINISH_ACCEL();
	    } else if (isplanar) {
d527 1
a527 24
	     * y' = y - .0625
	     * u' = u - .5
	     * v' = v - .5;
	     *
	     * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	     * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	     * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	     *
	     * DP3 might look like the straightforward solution
	     * but we'd need to move the texture yuv values in
	     * the same reg for this to work. Therefore use MADs.
	     * Without changing the shader at all (only the constants)
	     * could also provide hue/saturation/brightness/contrast control.
	     *
	     * yco = 1.1643
	     * uco = 0, -0.39173, 2.017
	     * vco = 1.5958, -0.8129, 0
	     * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	     *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	     *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	     *
	     * temp = MAD(yco, yuv.yyyy, off)
	     * temp = MAD(uco, yuv.uuuu, temp)
	     * result = MAD(vco, yuv.vvvv, temp)
d529 7
a535 14
		float yco = 1.1643;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};
		float off[3] = {-0.0625 * yco + -0.5 * uco[0] + -0.5 * vco[0],
				-0.0625 * yco + -0.5 * uco[1] + -0.5 * vco[1],
				-0.0625 * yco + -0.5 * uco[2] + -0.5 * vco[2]};

		BEGIN_ACCEL(33);
		/* 2 components: same 2 for tex0/1/2 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d537 2
a538 1
		OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */
d540 3
a542 118
		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						   R300_ALU_CODE_SIZE(3) |
						   R300_TEX_CODE_OFFSET(0) |
						   R300_TEX_CODE_SIZE(3)));

		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						   R300_ALU_SIZE(2) |
						   R300_TEX_START(0) |
						   R300_TEX_SIZE(2) |
						   R300_RGBA_OUT));

		/* tex inst */
		OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(0) |
						  R300_TEX_ID(0) |
						  R300_TEX_INST(R300_TEX_INST_LD)));
		OUT_ACCEL_REG(R300_US_TEX_INST_1, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(1) |
						  R300_TEX_ID(1) |
						  R300_TEX_INST(R300_TEX_INST_LD)));
		OUT_ACCEL_REG(R300_US_TEX_INST_2, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(2) |
						  R300_TEX_ID(2) |
						  R300_TEX_INST(R300_TEX_INST_LD)));

		/* ALU inst */
		/* MAD temp0, const0.a, temp0, const0.rgb */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDR1(0) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but need to set up alpha source for rgb usage */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						   R300_ALU_ALPHA_ADDR1(0) |
						   R300_ALU_ALPHA_ADDR2(0) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MAD const1, temp1, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR1(1) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MAD result, const2, temp2, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						   R300_ALU_RGB_ADDR1(2) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						   R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						   R300_ALU_RGB_CLAMP));
		/* write alpha 1 */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						   R300_ALU_ALPHA_TARGET_A));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

		/* Shader constants. */
		/* constant 0: off, yco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(off[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), F_TO_24(off[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), F_TO_24(off[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), F_TO_24(yco));
		/* constant 1: uco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), F_TO_24(uco[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(uco[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), F_TO_24(uco[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), F_TO_24(0.0));
		/* constant 2: vco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(2), F_TO_24(vco[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(2), F_TO_24(vco[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(2), F_TO_24(vco[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(2), F_TO_24(0.0));
d544 2
a545 1
		FINISH_ACCEL();
d547 24
a570 8
	    } else {
		BEGIN_ACCEL(11);
		/* 2 components: 2 for tex0 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d572 3
a574 1
		OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */
d576 2
a577 62
		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						   R300_ALU_CODE_SIZE(1) |
						   R300_TEX_CODE_OFFSET(0) |
						   R300_TEX_CODE_SIZE(1)));

		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						   R300_ALU_SIZE(0) |
						   R300_TEX_START(0) |
						   R300_TEX_SIZE(0) |
						   R300_RGBA_OUT));

		/* tex inst */
		OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(0) |
						  R300_TEX_ID(0) |
						  R300_TEX_INST(R300_TEX_INST_LD)));

		/* ALU inst */
		/* RGB */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR_0, (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(0) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_OMASK((R300_ALU_RGB_MASK_R |
						   R300_ALU_RGB_MASK_G |
						   R300_ALU_RGB_MASK_B)) |
						   R300_ALU_RGB_TARGET_A));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST_0, (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						   R300_ALU_RGB_CLAMP));
		/* Alpha */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR_0, (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(0) |
						   R300_ALU_ALPHA_ADDR2(0) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						   R300_ALU_ALPHA_TARGET_A |
						   R300_ALU_ALPHA_OMASK_W(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST_0, (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
						   R300_ALU_ALPHA_MOD_A(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_1_0) |
						   R300_ALU_ALPHA_MOD_B(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_MOD_C(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_OMOD(R300_ALU_ALPHA_OMOD_NONE) |
						   R300_ALU_ALPHA_CLAMP));
		FINISH_ACCEL();
	    }
	} else {
	    if (pPriv->bicubic_enabled) {
		BEGIN_ACCEL(7);
d579 2
a580 467
		/* 4 components: 2 for tex0 and 2 for tex1 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			      ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			       R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

		/* FP length. */
		OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
						  R500_US_CODE_END_ADDR(13)));
		OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
						   R500_US_CODE_RANGE_SIZE(13)));

		/* Prepare for FP emission. */
		OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
		FINISH_ACCEL();

		BEGIN_ACCEL(89);
		/* Pixel shader.
		 * I've gone ahead and annotated each instruction, since this
		 * thing is MASSIVE. :3
		 * Note: In order to avoid buggies with temps and multiple
		 * inputs, all temps are offset by 2. temp0 -> register2. */

		/* TEX temp2, input1.xxxx, tex1, 1D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_R |
						       R500_TEX_SRC_R_SWIZ_R |
						       R500_TEX_SRC_Q_SWIZ_R |
						       R500_TEX_DST_ADDR(2) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp5, input1.yyyy, tex1, 1D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						       R500_TEX_SRC_S_SWIZ_G |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_G |
						       R500_TEX_SRC_Q_SWIZ_G |
						       R500_TEX_DST_ADDR(5) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* MUL temp4, const0.x0x0, temp2.yyxx */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_R |
						       R500_ALU_RGB_G_SWIZ_A_0 |
						       R500_ALU_RGB_B_SWIZ_A_R |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_G |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_0 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_R_SWIZ_0 |
						       R500_ALU_RGBA_G_SWIZ_0 |
						       R500_ALU_RGBA_B_SWIZ_0 |
						       R500_ALU_RGBA_A_SWIZ_0));

		/* MAD temp3, const0.0y0y, temp5.xxxx, temp4 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(5) |
						       R500_RGB_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(5) |
						       R500_ALPHA_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_0 |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_0 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_R |
						       R500_ALU_RGB_B_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_G |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* ADD temp3, temp3, input0.xyxy */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(3) |
						       R500_RGB_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(3) |
						       R500_ALPHA_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						       R500_ALU_RGB_G_SWIZ_A_1 |
						       R500_ALU_RGB_B_SWIZ_A_1 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_1 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_R |
						       R500_ALU_RGBA_A_SWIZ_G));

		/* TEX temp1, temp3.zwxy, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						       R500_TEX_SRC_S_SWIZ_B |
						       R500_TEX_SRC_T_SWIZ_A |
						       R500_TEX_SRC_R_SWIZ_R |
						       R500_TEX_SRC_Q_SWIZ_G |
						       R500_TEX_DST_ADDR(1) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp3, temp3.xyzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(3) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* MAD temp4, const0.0y0y, temp5.yyyy, temp4 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(5) |
						       R500_RGB_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(5) |
						       R500_ALPHA_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_0 |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_0 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_G |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_G));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_G |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_G));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* ADD temp0, temp4, input0.xyxy */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(4) |
						       R500_RGB_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(4) |
						       R500_ALPHA_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						       R500_ALU_RGB_G_SWIZ_A_1 |
						       R500_ALU_RGB_B_SWIZ_A_1 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_1 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_R |
						       R500_ALU_RGBA_A_SWIZ_G));

		/* TEX temp4, temp0.zwzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_B |
						       R500_TEX_SRC_T_SWIZ_A |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(4) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp0, temp0.xyzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(0) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* LRP temp3, temp2.zzzz, temp1, temp3 ->
		 * - PRESUB temps, temp1 - temp3
		 * - MAD temp2.zzzz, temps, temp3 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(3) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(1) |
						       R500_RGB_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(3) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(1) |
						       R500_ALPHA_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* LRP temp0, temp2.zzzz, temp4, temp0 ->
		 * - PRESUB temps, temp4 - temp1
		 * - MAD temp2.zzzz, temps, temp0 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(4) |
						       R500_RGB_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(4) |
						       R500_ALPHA_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* LRP output, temp5.zzzz, temp3, temp0 ->
		 * - PRESUB temps, temp3 - temp0
		 * - MAD temp5.zzzz, temps, temp0 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						       R500_INST_LAST |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK |
						       R500_INST_RGB_OMASK_R |
						       R500_INST_RGB_OMASK_G |
						       R500_INST_RGB_OMASK_B |
						       R500_INST_ALPHA_OMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(3) |
						       R500_RGB_ADDR2(5)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(3) |
						       R500_ALPHA_ADDR2(5)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* Shader constants. */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

		/* const0 = {1 / texture[0].width, 1 / texture[0].height, 0, 0} */
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->w));
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->h));
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
d582 2
a583 1
		FINISH_ACCEL();
d585 4
a588 95
	    } else {
		BEGIN_ACCEL(19);
		/* 2 components: 2 for tex0 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			      ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			       R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */

		/* FP length. */
		OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
						  R500_US_CODE_END_ADDR(1)));
		OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
						   R500_US_CODE_RANGE_SIZE(1)));

		/* Prepare for FP emission. */
		OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

		/* tex inst */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK |
						       R500_INST_RGB_CLAMP |
						       R500_INST_ALPHA_CLAMP));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_DST_ADDR(0) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						       R500_DX_S_SWIZ_R |
						       R500_DX_T_SWIZ_R |
						       R500_DX_R_SWIZ_R |
						       R500_DX_Q_SWIZ_R |
						       R500_DY_ADDR(0) |
						       R500_DY_S_SWIZ_R |
						       R500_DY_T_SWIZ_R |
						       R500_DY_R_SWIZ_R |
						       R500_DY_Q_SWIZ_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* ALU inst */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_LAST |
						       R500_INST_RGB_OMASK_R |
						       R500_INST_RGB_OMASK_G |
						       R500_INST_RGB_OMASK_B |
						       R500_INST_ALPHA_OMASK |
						       R500_INST_RGB_CLAMP |
						       R500_INST_ALPHA_CLAMP));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR1(0) |
						       R500_RGB_ADDR1_CONST |
						       R500_RGB_ADDR2(0) |
						       R500_RGB_ADDR2_CONST));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR1(0) |
						       R500_ALPHA_ADDR1_CONST |
						       R500_ALPHA_ADDR2(0) |
						       R500_ALPHA_ADDR2_CONST));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_R |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRC0 |
						       R500_ALU_RGB_R_SWIZ_B_1 |
						       R500_ALU_RGB_B_SWIZ_B_1 |
						       R500_ALU_RGB_G_SWIZ_B_1));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_A |
						       R500_ALPHA_SWIZ_B_1));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_R_SWIZ_0 |
						       R500_ALU_RGBA_G_SWIZ_0 |
						       R500_ALU_RGBA_B_SWIZ_0 |
						       R500_ALU_RGBA_A_SWIZ_0));
		FINISH_ACCEL();
	    }
d590 4
d595 8
a602 10
	BEGIN_ACCEL(6);
	OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
	OUT_ACCEL_REG(R300_TX_ENABLE, txenable);

	OUT_ACCEL_REG(R300_RB3D_COLOROFFSET0, dst_offset);
	OUT_ACCEL_REG(R300_RB3D_COLORPITCH0, colorpitch);

	blendcntl = RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO;
	/* no need to enable blending */
	OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, blendcntl);
d604 14
a617 1
	OUT_ACCEL_REG(R300_VAP_VTX_SIZE, vtx_count);
d620 3
a622 1
    } else {
d624 14
a637 14
	/* Same for R100/R200 */
	switch (pPixmap->drawable.bitsPerPixel) {
	case 16:
	    if (pPixmap->drawable.depth == 15)
		dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	    else
		dst_format = RADEON_COLOR_FORMAT_RGB565;
	    break;
	case 32:
	    dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	    break;
	default:
	    return;
	}
d639 10
a648 3
	if (pPriv->planar_hw && (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12)) {
	    isplanar = TRUE;
	}
d650 1
a650 8
	if (isplanar) {
	    txformat = RADEON_TXFORMAT_I8;
	} else {
	    if (pPriv->id == FOURCC_UYVY)
		txformat = RADEON_TXFORMAT_YVYU422;
	    else
		txformat = RADEON_TXFORMAT_VYUY422;
	}
d652 1
a652 1
	txformat |= RADEON_TXFORMAT_NON_POWER2;
d654 2
a655 1
	colorpitch = dst_pitch >> pixel_shift;
d657 1
a657 2
	if (RADEONTilingEnabled(pScrn, pPixmap))
	    colorpitch |= RADEON_COLOR_TILE_ENABLE;
d659 3
a661 1
	BEGIN_ACCEL(4);
d663 2
a664 3
	OUT_ACCEL_REG(RADEON_RB3D_CNTL,
		      dst_format /*| RADEON_ALPHA_BLEND_ENABLE*/);
	OUT_ACCEL_REG(RADEON_RB3D_COLOROFFSET, dst_offset);
d666 1
a666 1
	OUT_ACCEL_REG(RADEON_RB3D_COLORPITCH, colorpitch);
d668 35
a702 2
	OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
		      RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
d704 1
a704 1
	FINISH_ACCEL();
d706 87
d794 76
a869 102
	if ((info->ChipFamily == CHIP_FAMILY_RV250) ||
	    (info->ChipFamily == CHIP_FAMILY_RV280) ||
	    (info->ChipFamily == CHIP_FAMILY_RS300) ||
	    (info->ChipFamily == CHIP_FAMILY_R200)) {

	    info->accel_state->texW[0] = pPriv->w;
	    info->accel_state->texH[0] = pPriv->h;

	    if (isplanar) {
		/* note: in contrast to r300, use input biasing on uv components */
		float yco = 1.1643;
		float yoff = -0.0625 * yco;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};

		/* need 2 texcoord sets (even though they are identical) due
		   to denormalization! hw apparently can't premultiply
		   same coord set by different texture size */
		vtx_count = 6;

		txformat0 = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
			    (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
		txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
		txpitch -= 32;
		txfilter =  R200_MAG_FILTER_LINEAR |
			    R200_MIN_FILTER_LINEAR |
			    R200_CLAMP_S_CLAMP_LAST |
			    R200_CLAMP_T_CLAMP_LAST;

		BEGIN_ACCEL(36);

		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE | RADEON_TEX_1_ENABLE | RADEON_TEX_2_ENABLE |
			      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
			      RADEON_TEX_BLEND_2_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT) |
			      (2 << R200_VTX_TEX1_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		OUT_ACCEL_REG(R200_PP_TXFILTER_1, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_1, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_1, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_1, txformat0);
		OUT_ACCEL_REG(R200_PP_TXPITCH_1, txpitch);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_1, pPriv->src_offset + pPriv->planeu_offset);

		OUT_ACCEL_REG(R200_PP_TXFILTER_2, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_2, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_2, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_2, txformat0);
		OUT_ACCEL_REG(R200_PP_TXPITCH_2, txpitch);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_2, pPriv->src_offset + pPriv->planev_offset);

		/* similar to r300 code. Note the big problem is that hardware constants
		 * are 8 bits only, representing 0.0-1.0. We can get that up (using bias
		 * + scale) to -1.0-1.0 (but precision will suffer). AFAIK the hw actually
		 * has 12 bits fractional precision (plus 1 sign bit, 3 range bits) but
		 * the constants not. To get larger range can use output scale, but for
		 * that 2.018 value we need a total scale by 8, which means the constants
		 * really have no accuracy whatsoever (5 fractional bits only).
		 * The only direct way to get high  precision "constants" into the fragment
		 * pipe I know of is to use the texcoord interpolator (not color, this one
		 * is 8 bit only too), which seems a bit expensive. We're lucky though it
		 * seems the values we need seem to fit better than worst case (get about
		 * 6 fractional bits for this instead of 5, at least when not correcting for
		 * hue/saturation/contrast/brightness, which is the same as for vco - yco and
		 * yoff get 8 fractional bits).
		 *
		 * A higher precision (8 fractional bits) version might just put uco into
		 * a texcoord, and calculate a new vcoconst in the shader, like so:
		 * cohelper = {1.0, 0.0, 0.0} - shouldn't use 0.5 since not exactly representable
		 * vco = {1.5958 - 1.0, -0.8129 + 1.0, 1.0}
		 * vcocalc = ADD temp, bias/scale(cohelper), vco
		 * would in total use 4 tex units, 4 instructions which seems fairly
		 * balanced for this architecture (instead of 3 + 3 for the solution here)
		 *
		 * temp = MAD(yco, yuv.yyyy, yoff)
		 * temp = MAD(uco, yuv.uuuu, temp)
		 * result = MAD(vco, yuv.vvvv, temp)
		 *
		 * note first mad produces actually scalar, hence we transform
		 * it into a dp2a to get 8 bit precision of yco instead of 7 -
		 * That's assuming hw correctly expands consts to internal precision.
		 * (y * 1 + y * (yco - 1) + yoff)
		 * temp = DP2A / 2 (yco, yuv.yyyy, yoff)
		 * temp = MAD (uco / 4, yuv.uuuu * 2, temp)
		 * result = MAD x2 (vco / 2, yuv.vvvv, temp)
		 *
		 * vco, uco need bias (and hence scale too)
		 *
		 */
d871 3
a873 75
		/* MAD temp0 / 2, const0.a * 2, temp0, -const0.rgb */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_ARG_C_TFACTOR_COLOR |
			      R200_TXC_NEG_ARG_C |
			      R200_TXC_OP_DOT2_ADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_INV2 |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0, (const1 - 0.5) * 2, (temp1 - 0.5) * 2, temp0 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R1_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_SCALE_ARG_B |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
			      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_1,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp2 - 0.5), temp0 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R2_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
			      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_2X |
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_2,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_COMP_ARG_C |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

		/* shader constants */
		OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(1.0, /* src range [1, 2] */
							      yco - 1.0,
							      -yoff, /* range [-1, 0] */
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * 0.125 + 0.5, /* range [-4, 4] */
							      uco[1] * 0.125 + 0.5,
							      uco[2] * 0.125 + 0.5,
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * 0.25 + 0.5, /* range [-2, 2] */
							      vco[1] * 0.25 + 0.5,
							      vco[2] * 0.25 + 0.5,
							      0.0));
d875 1
a875 117
		FINISH_ACCEL();
	    }
	    else if (info->ChipFamily == CHIP_FAMILY_RV250) {
		/* fix up broken packed yuv - shader same as above except
		   yuv compoents are all in same reg */
		float yco = 1.1643;
		float yoff = -0.0625 * yco;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};

		txformat0 = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
			    (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
		txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
		txpitch -= 32;
		txfilter =  R200_MAG_FILTER_LINEAR |
			    R200_MIN_FILTER_LINEAR |
			    R200_CLAMP_S_CLAMP_LAST |
			    R200_CLAMP_T_CLAMP_LAST;

		BEGIN_ACCEL(24);

		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE |
			      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
			      RADEON_TEX_BLEND_2_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		/* MAD temp1 / 2, const0.a * 2, temp0.ggg, -const0.rgb */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_ARG_C_TFACTOR_COLOR |
			      R200_TXC_NEG_ARG_C |
			      R200_TXC_OP_DOT2_ADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_INV2 |
			      (R200_TXC_REPL_GREEN << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp1, (const1 - 0.5) * 2, (temp0.rrr - 0.5) * 2, temp1 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_SCALE_ARG_B |
			      R200_TXC_ARG_C_R1_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
			      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      (R200_TXC_REPL_BLUE << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
		OUT_ACCEL_REG(R200_PP_TXABLEND_1,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp0.bbb - 0.5), temp1 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_ARG_C_R1_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
			      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_2X |
			      (R200_TXC_REPL_RED << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_2,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_COMP_ARG_C |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

		/* shader constants */
		OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(1.0, /* src range [1, 2] */
							      yco - 1.0,
							      -yoff, /* range [-1, 0] */
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * 0.125 + 0.5, /* range [-4, 4] */
							      uco[1] * 0.125 + 0.5,
							      uco[2] * 0.125 + 0.5,
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * 0.25 + 0.5, /* range [-2, 2] */
							      vco[1] * 0.25 + 0.5,
							      vco[2] * 0.25 + 0.5,
							      0.0));
d877 97
a973 43
		FINISH_ACCEL();
	    }
	    else {
		BEGIN_ACCEL(13);
		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0,
			      R200_MAG_FILTER_LINEAR |
			      R200_MIN_FILTER_LINEAR |
			      R200_CLAMP_S_CLAMP_LAST |
			      R200_CLAMP_T_CLAMP_LAST |
			      R200_YUV_TO_RGB);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);

		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_ZERO |
			      R200_TXC_ARG_B_ZERO |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_R0_ALPHA |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);
		FINISH_ACCEL();
	    }
	} else {
d975 2
a976 2
	    info->accel_state->texW[0] = 1;
	    info->accel_state->texH[0] = 1;
d978 5
a982 37
	    BEGIN_ACCEL(9);

	    OUT_ACCEL_REG(RADEON_PP_CNTL,
			  RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);

	    OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					      RADEON_SE_VTX_FMT_ST0));

	    OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
			  RADEON_MAG_FILTER_LINEAR |
			  RADEON_MIN_FILTER_LINEAR |
			  RADEON_CLAMP_S_CLAMP_LAST |
			  RADEON_CLAMP_T_CLAMP_LAST |
			  RADEON_YUV_TO_RGB);
	    OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat);
	    OUT_ACCEL_REG(RADEON_PP_TXOFFSET_0, pPriv->src_offset);
	    OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
			  RADEON_COLOR_ARG_A_ZERO |
			  RADEON_COLOR_ARG_B_ZERO |
			  RADEON_COLOR_ARG_C_T0_COLOR |
			  RADEON_BLEND_CTL_ADD |
			  RADEON_CLAMP_TX);
	    OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
			  RADEON_ALPHA_ARG_A_ZERO |
			  RADEON_ALPHA_ARG_B_ZERO |
			  RADEON_ALPHA_ARG_C_T0_ALPHA |
			  RADEON_BLEND_CTL_ADD |
			  RADEON_CLAMP_TX);

	    OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
			  (pPriv->w - 1) |
			  ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	    OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
			  pPriv->src_pitch - 32);
	    FINISH_ACCEL();
	}
    }
d985 10
a994 8
	xf86CrtcPtr crtc = radeon_xv_pick_best_crtc(pScrn,
						    pPriv->drw_x,
						    pPriv->drw_x + pPriv->dst_w,
						    pPriv->drw_y,
						    pPriv->drw_y + pPriv->dst_h);
	if (crtc) {
	    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;

d996 1
a996 1
					  radeon_crtc->crtc_id,
a998 1
	}
d1000 25
d1041 1
a1041 1
     *     the single triangle up to 2880 pixels; above that we
d1045 77
a1124 1
	Bool use_quad = FALSE;
d1130 6
a1135 4
	srcX = ((pBox->x1 - pPriv->drw_x) *
		pPriv->src_w) / pPriv->dst_w;
	srcY = ((pBox->y1 - pPriv->drw_y) *
		pPriv->src_h) / pPriv->dst_h;
d1140 1370
a2509 3
#if 0
	ErrorF("dst: %d, %d, %d, %d\n", dstX, dstY, dstw, dsth);
	ErrorF("src: %d, %d, %d, %d\n", srcX, srcY, srcw, srch);
d2512 20
a2531 2
	if (IS_R300_3D || IS_R500_3D) {
	    if (IS_R300_3D && ((dstw+dsth) > 2880))
a2532 17
	    /*
	     * Set up the scissor area to that of the output size.
	     */
	    BEGIN_ACCEL(2);
	    if (IS_R300_3D) {
		/* R300 has an offset */
		OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX + 1088) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + 1088) << R300_SCISSOR_Y_SHIFT)));
		OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw + 1088 - 1) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + dsth + 1088 - 1) << R300_SCISSOR_Y_SHIFT)));
	    } else {
		OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX) << R300_SCISSOR_X_SHIFT) |
						 ((dstY) << R300_SCISSOR_Y_SHIFT)));
		OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw - 1) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + dsth - 1) << R300_SCISSOR_Y_SHIFT)));
	    }
	    FINISH_ACCEL();
d2534 10
d2546 5
a2550 7
	if (info->ChipFamily < CHIP_FAMILY_R200) {
	    BEGIN_RING(3 * vtx_count + 3);
	    OUT_RING(CP_PACKET3(RADEON_CP_PACKET3_3D_DRAW_IMMD,
				3 * vtx_count + 1));
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0);
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
d2552 1
a2552 19
		     RADEON_CP_VC_CNTL_MAOS_ENABLE |
		     RADEON_CP_VC_CNTL_VTX_FMT_RADEON_MODE |
		     (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	} else if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad) {
		BEGIN_RING(4 * vtx_count + 4);
		OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				    4 * vtx_count));
		OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_QUAD_LIST |
			 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
			 (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	    } else {
		BEGIN_RING(3 * vtx_count + 4);
		OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				    3 * vtx_count));
		OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
			 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
			 (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	    }
d2554 1
a2554 1
	    BEGIN_RING(3 * vtx_count + 2);
d2556 2
a2557 2
				3 * vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
d2562 4
a2565 7
	if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad)
		BEGIN_ACCEL(2 + vtx_count * 4);
	    else
		BEGIN_ACCEL(2 + vtx_count * 3);
	} else
	    BEGIN_ACCEL(1 + vtx_count * 3);
d2567 2
a2568 2
	if (info->ChipFamily < CHIP_FAMILY_R200)
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
d2570 3
a2572 13
					      RADEON_VF_RADEON_MODE |
					      (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
	else if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad)
		OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_QUAD_LIST |
						  RADEON_VF_PRIM_WALK_DATA |
						  (4 << RADEON_VF_NUM_VERTICES_SHIFT)));
	    else
		OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
						  RADEON_VF_PRIM_WALK_DATA |
						  (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
	} else
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
a2574 1

d2582 12
a2593 12
		VTX_OUT_FILTER((float)dstX,                                       (float)dstY,
			       (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + 0.5);
		VTX_OUT_FILTER((float)dstX,                                       (float)(dstY + dsth),
			       (float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)(srcY + srch) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw),                              (float)(dstY + dsth),
			       (float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0],
			       (float)(srcX + srcw) + 0.5,                        (float)(srcY + srch) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw),                              (float)dstY,
			       (float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0],
			       (float)(srcX + srcw) + 0.5,                        (float)srcY + 0.5);
d2595 13
a2607 11
		VTX_OUT_FILTER((float)dstX,                                       (float)dstY,
			       (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + 0.5);
		VTX_OUT_FILTER((float)dstX,                                       (float)(dstY + dstw + dsth),
			       (float)srcX / info->accel_state->texW[0],          ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw + dsth),                       (float)dstY,
			       ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / info->accel_state->texW[0],
			                                                          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
			                                                          (float)srcY + 0.5);
d2610 9
a2618 39
	    if (IS_R300_3D || IS_R500_3D) {
		if (use_quad) {
		    VTX_OUT((float)dstX,                                       (float)dstY,
			    (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0]);
		    VTX_OUT((float)dstX,                                       (float)(dstY + dsth),
			    (float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		    VTX_OUT((float)(dstX + dstw),                              (float)(dstY + dsth),
			    (float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		    VTX_OUT((float)(dstX + dstw),                              (float)dstY,
			    (float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
		} else {
		    /*
		     * Render a big, scissored triangle. This means
		     * increasing the triangle size and adjusting
		     * texture coordinates.
		     */
		    VTX_OUT((float)dstX,                              (float)dstY,
			    (float)srcX / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
		    VTX_OUT((float)dstX,                              (float)(dstY + dsth + dstw),
			    (float)srcX / info->accel_state->texW[0], ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / info->accel_state->texH[0]);
			    
		    VTX_OUT((float)(dstX + dstw + dsth),              (float)dstY,
			    ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / info->accel_state->texW[0],
			                                              (float)srcY / info->accel_state->texH[0]);
		}
	    } else if (isplanar) {
		/*
		 * Just render a rect (using three coords).
		 * Filter is a bit a misnomer, it's just texcoords...
		 */
		VTX_OUT_FILTER((float)dstX,                                (float)(dstY + dsth),
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0],
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT_FILTER((float)(dstX + dstw),                       (float)(dstY + dsth),
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0],
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT_FILTER((float)(dstX + dstw),                       (float)dstY,
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0],
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
d2621 3
a2623 1
		 * Just render a rect (using three coords).
d2625 8
a2632 6
		VTX_OUT((float)dstX,                                       (float)(dstY + dsth),
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT((float)(dstX + dstw),                              (float)(dstY + dsth),
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT((float)(dstX + dstw),                              (float)dstY,
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
d2636 2
a2637 3
	if (IS_R300_3D || IS_R500_3D)
	    /* flushing is pipelined, free/finish is not */
	    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
d2648 58
a2705 4
    if (IS_R300_3D || IS_R500_3D) {
	BEGIN_ACCEL(3);
	OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
d2707 1510
a4216 1
	BEGIN_ACCEL(1);
d4223 2
a4224 2
#undef VTX_OUT
#undef VTX_OUT_FILTER
@


1.3
log
@Update to xf86-video-ati 6.14.3. Tested by many.
@
text
@d50 2
a51 2
#define VTX_OUT_6(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
do {								\
d60 1
a60 1
#define VTX_OUT_4(_dstX, _dstY, _srcX, _srcY)			\
d70 1
a70 1
#define VTX_OUT_6(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)		\
d80 1
a80 1
#define VTX_OUT_4(_dstX, _dstY, _srcX, _srcY)			\
d90 2
a91 2
static Bool
FUNC_NAME(RADEONPrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d95 9
a103 8
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txformat, txsize, txpitch, txoffset;
    uint32_t dst_pitch, dst_format;
    uint32_t colorpitch;
    int pixel_shift;
    int scissor_w = MIN(pPixmap->drawable.width, 2047);
    int scissor_h = MIN(pPixmap->drawable.height, 2047);
a105 21
#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;

	radeon_cs_space_reset_bos(info->cs);
        radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
    }
#endif

a107 1

d110 1
d114 13
a126 3
    {
        dst_pitch = pPixmap->devKind;
    }
d133 13
a145 10
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();
d147 3
a149 3
	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
d151 4
a154 14
    /* Same for R100/R200 */
    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	else
	    dst_format = RADEON_COLOR_FORMAT_RGB565;
	break;
    case 32:
	dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }
d156 2
a157 10
    if (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12) {
	pPriv->is_planar = TRUE;
	txformat = RADEON_TXFORMAT_Y8;
    } else {
	pPriv->is_planar = FALSE;
	if (pPriv->id == FOURCC_UYVY)
	    txformat = RADEON_TXFORMAT_YVYU422;
	else
	    txformat = RADEON_TXFORMAT_VYUY422;
    }
d159 38
a196 1
    txformat |= RADEON_TXFORMAT_NON_POWER2;
d198 1
a198 1
    colorpitch = dst_pitch >> pixel_shift;
d200 4
a203 2
    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= RADEON_COLOR_TILE_ENABLE;
d205 3
a207 1
    txoffset = info->cs ? 0 : pPriv->src_offset;
d209 2
a210 1
    BEGIN_ACCEL_RELOC(4,2);
d212 5
a216 7
    OUT_ACCEL_REG(RADEON_RB3D_CNTL, dst_format);
    EMIT_WRITE_OFFSET(RADEON_RB3D_COLOROFFSET, 0, pPixmap);
    EMIT_COLORPITCH(RADEON_RB3D_COLORPITCH, colorpitch, pPixmap);
    OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
		  RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    FINISH_ACCEL();
a217 94
    if (pPriv->is_planar) {
	/* need 2 texcoord sets (even though they are identical) due
	   to denormalization! hw apparently can't premultiply
	   same coord set by different texture size */
	pPriv->vtx_count = 6;

	txsize = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
		  (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 32;

	BEGIN_ACCEL_RELOC(23, 3);

	OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					  RADEON_SE_VTX_FMT_ST0 |
					  RADEON_SE_VTX_FMT_ST1));

	OUT_ACCEL_REG(RADEON_PP_CNTL, (RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE |
				       RADEON_TEX_1_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
				       RADEON_TEX_2_ENABLE | RADEON_TEX_BLEND_2_ENABLE |
				       RADEON_PLANAR_YUV_ENABLE));

	/* Y */
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST |
		      RADEON_YUV_TO_RGB);
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, txoffset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
		      pPriv->src_pitch - 32);

	/* U */
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_1,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST);
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_1, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_1,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_1,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_1, txsize);
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_1, txpitch);

	/* V */
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_2,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST);
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_2, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ1);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_2,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_2,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
d219 2
a220 6
	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_2, txsize);
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_2, txpitch);
	FINISH_ACCEL();
    } else {
	pPriv->vtx_count = 4;
	BEGIN_ACCEL_RELOC(9, 1);
d222 2
a223 2
	OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					  RADEON_SE_VTX_FMT_ST0));
d225 1
a225 1
	OUT_ACCEL_REG(RADEON_PP_CNTL, RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);
d227 7
a233 26
	OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
		      RADEON_MAG_FILTER_LINEAR |
		      RADEON_MIN_FILTER_LINEAR |
		      RADEON_CLAMP_S_CLAMP_LAST |
		      RADEON_CLAMP_T_CLAMP_LAST |
		      RADEON_YUV_TO_RGB);
	OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat | RADEON_TXFORMAT_ST_ROUTE_STQ0);
	OUT_TEXTURE_REG(RADEON_PP_TXOFFSET_0, txoffset, src_bo);
	OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
		      RADEON_COLOR_ARG_A_ZERO |
		      RADEON_COLOR_ARG_B_ZERO |
		      RADEON_COLOR_ARG_C_T0_COLOR |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);
	OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
		      RADEON_ALPHA_ARG_A_ZERO |
		      RADEON_ALPHA_ARG_B_ZERO |
		      RADEON_ALPHA_ARG_C_T0_ALPHA |
		      RADEON_BLEND_CTL_ADD |
		      RADEON_CLAMP_TX);

	OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
		      pPriv->src_pitch - 32);
a234 1
    }
d236 1
a236 5
    BEGIN_ACCEL(2);
    OUT_ACCEL_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_ACCEL_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
					   (scissor_h << RADEON_RE_HEIGHT_SHIFT)));
    FINISH_ACCEL();
d238 27
a264 16
    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }
d266 38
a303 51
    return TRUE;
}

static void
FUNC_NAME(RADEONDisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
    ACCEL_PREAMBLE();

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!FUNC_NAME(RADEONPrepareTexturedVideo)(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2560/4021 pixels; above that we
     *     render as a quad.
     */
#ifdef ACCEL_CP
    while (nBox) {
	int draw_size = 3 * pPriv->vtx_count + 5;
	int loop_boxes;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
d305 1
a305 3
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(RADEONPrepareTexturedVideo)(pScrn, pPriv))
		return;
a306 2
	loop_boxes = MIN(radeon_cs_space_remaining(pScrn) / draw_size, nBox);
	nBox -= loop_boxes;
d308 57
a364 48
	BEGIN_RING(loop_boxes * 3 * pPriv->vtx_count + 5);
	OUT_RING(CP_PACKET3(RADEON_CP_PACKET3_3D_DRAW_IMMD,
			    loop_boxes * 3 * pPriv->vtx_count + 1));
	if (pPriv->is_planar)
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0 |
		     RADEON_CP_VC_FRMT_ST1);
	else
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0);
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 RADEON_CP_VC_CNTL_MAOS_ENABLE |
		 RADEON_CP_VC_CNTL_VTX_FMT_RADEON_MODE |
		 ((loop_boxes * 3) << RADEON_CP_VC_CNTL_NUM_SHIFT));

	while (loop_boxes--) {
	    int srcX, srcY, srcw, srch;
	    int dstX, dstY, dstw, dsth;
	    dstX = pBox->x1 + dstxoff;
	    dstY = pBox->y1 + dstyoff;
	    dstw = pBox->x2 - pBox->x1;
	    dsth = pBox->y2 - pBox->y1;

	    srcX = pPriv->src_x;
	    srcX += ((pBox->x1 - pPriv->drw_x) *
		     pPriv->src_w) / pPriv->dst_w;
	    srcY = pPriv->src_y;
	    srcY += ((pBox->y1 - pPriv->drw_y) *
		     pPriv->src_h) / pPriv->dst_h;

	    srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / pPriv->dst_h;


	    if (pPriv->is_planar) {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
d366 6
a371 9
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
a372 2

	    pBox++;
d375 7
a381 16
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
	ADVANCE_RING();
    }
#else /* ACCEL_CP */
    BEGIN_ACCEL(nBox * pPriv->vtx_count * 3 + 2);
    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
				      RADEON_VF_PRIM_WALK_DATA |
				      RADEON_VF_RADEON_MODE |
				      ((nBox * 3) << RADEON_VF_NUM_VERTICES_SHIFT)));
    while (nBox--) {
	int srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;
d383 2
a384 6
	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / pPriv->dst_h;
d386 345
a730 2
	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;
d732 2
a733 2

	if (pPriv->is_planar) {
d735 24
a758 1
	     * Just render a rect (using three coords).
d760 14
a773 20
	    VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	} else {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	}
d775 1
a775 2
	pBox++;
    }
d777 118
a894 3
    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
#endif /* !ACCEL_CP */
d896 1
a896 2
    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}
d898 8
a905 24
static Bool
FUNC_NAME(R200PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txformat;
    uint32_t txfilter, txsize, txpitch, txoffset;
    uint32_t dst_pitch, dst_format;
    uint32_t colorpitch;
    int pixel_shift;
    int scissor_w = MIN(pPixmap->drawable.width, 2047);
    int scissor_h = MIN(pPixmap->drawable.height, 2047);
    /* note: in contrast to r300, use input biasing on uv components */
    const float Loff = -0.0627;
    float uvcosf, uvsinf;
    float yco, yoff;
    float uco[3], vco[3];
    float bright, cont, sat;
    int ref = pPriv->transform_index;
    float ucscale = 0.25, vcscale = 0.25;
    Bool needux8 = FALSE, needvx8 = FALSE;
    ACCEL_PREAMBLE();
d907 1
a907 3
#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;
d909 62
a970 2
	radeon_cs_space_reset_bos(info->cs);
        radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d972 467
a1438 2
	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);
d1440 1
a1440 2
	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);
d1442 95
a1536 4
	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
a1537 2
    }
#endif
d1539 15
a1553 1
    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;
d1555 14
a1568 8
#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }
d1570 3
a1572 15
#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();
d1574 8
a1581 3
	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }
d1583 1
a1583 14
    /* Same for R100/R200 */
    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	else
	    dst_format = RADEON_COLOR_FORMAT_RGB565;
	break;
    case 32:
	dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }
d1585 1
a1585 10
    if (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12) {
	pPriv->is_planar = TRUE;
	txformat = RADEON_TXFORMAT_I8;
    } else {
	pPriv->is_planar = FALSE;
	if (pPriv->id == FOURCC_UYVY)
	    txformat = RADEON_TXFORMAT_YVYU422;
	else
	    txformat = RADEON_TXFORMAT_VYUY422;
    }
d1587 2
a1588 1
    txformat |= RADEON_TXFORMAT_NON_POWER2;
d1590 1
a1590 1
    colorpitch = dst_pitch >> pixel_shift;
d1592 3
a1594 2
    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= RADEON_COLOR_TILE_ENABLE;
d1596 1
a1596 1
    BEGIN_ACCEL_RELOC(4,2);
d1598 2
a1599 3
    OUT_ACCEL_REG(RADEON_RB3D_CNTL, dst_format);
    EMIT_WRITE_OFFSET(RADEON_RB3D_COLOROFFSET, 0, pPixmap);
    EMIT_COLORPITCH(RADEON_RB3D_COLORPITCH, colorpitch, pPixmap);
d1601 1
a1601 2
    OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
		  RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
a1602 1
    FINISH_ACCEL();
d1604 102
a1705 35
    txfilter =  R200_MAG_FILTER_LINEAR |
	R200_MIN_FILTER_LINEAR |
	R200_CLAMP_S_CLAMP_LAST |
	R200_CLAMP_T_CLAMP_LAST;

    /* contrast can cause constant overflow, clamp */
    cont = RTFContrast(pPriv->contrast);
    if (cont * trans[ref].RefLuma > 2.0)
	cont = 2.0 / trans[ref].RefLuma;
    /* brightness is only from -0.5 to 0.5 should be safe */
    bright = RTFBrightness(pPriv->brightness);
    /* saturation can also cause overflow, clamp */
    sat = RTFSaturation(pPriv->saturation);
    if (sat * trans[ref].RefBCb > 4.0)
	sat = 4.0 / trans[ref].RefBCb;
    uvcosf = sat * cos(RTFHue(pPriv->hue));
    uvsinf = sat * sin(RTFHue(pPriv->hue));

    yco = trans[ref].RefLuma * cont;
    uco[0] = -trans[ref].RefRCr * uvsinf;
    uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
    uco[2] = trans[ref].RefBCb * uvcosf;
    vco[0] = trans[ref].RefRCr * uvcosf;
    vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
    vco[2] = trans[ref].RefBCb * uvsinf;
    yoff = Loff * yco + bright;

    if ((uco[0] > 2.0) || (uco[2] > 2.0)) {
	needux8 = TRUE;
	ucscale = 0.125;
    }
    if ((vco[0] > 2.0) || (vco[2] > 2.0)) {
	needvx8 = TRUE;
	vcscale = 0.125;
    }
d1707 75
a1781 1
    txoffset = info->cs ? 0 : pPriv->src_offset;
d1783 117
a1899 87
    if (pPriv->is_planar) {
	/* need 2 texcoord sets (even though they are identical) due
	   to denormalization! hw apparently can't premultiply
	   same coord set by different texture size */
	pPriv->vtx_count = 6;

	txsize = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
		  (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 32;

	BEGIN_ACCEL_RELOC(36, 3);

	OUT_ACCEL_REG(RADEON_PP_CNTL,
		      RADEON_TEX_0_ENABLE | RADEON_TEX_1_ENABLE | RADEON_TEX_2_ENABLE |
		      RADEON_TEX_BLEND_0_ENABLE |
		      RADEON_TEX_BLEND_1_ENABLE |
		      RADEON_TEX_BLEND_2_ENABLE);

	OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
		      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT) |
		      (2 << R200_VTX_TEX1_COMP_CNT_SHIFT));

	OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, txoffset, src_bo);

	OUT_ACCEL_REG(R200_PP_TXFILTER_1, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_1, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_1, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_1, txsize);
	OUT_ACCEL_REG(R200_PP_TXPITCH_1, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_1, txoffset + pPriv->planeu_offset, src_bo);

	OUT_ACCEL_REG(R200_PP_TXFILTER_2, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_2, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_2, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_2, txsize);
	OUT_ACCEL_REG(R200_PP_TXPITCH_2, txpitch);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_2, txoffset + pPriv->planev_offset, src_bo);

	/* similar to r300 code. Note the big problem is that hardware constants
	 * are 8 bits only, representing 0.0-1.0. We can get that up (using bias
	 * + scale) to -1.0-1.0 (but precision will suffer). AFAIK the hw actually
	 * has 12 bits fractional precision (plus 1 sign bit, 3 range bits) but
	 * the constants not. To get larger range can use output scale, but for
	 * that 2.018 value we need a total scale by 8, which means the constants
	 * really have no accuracy whatsoever (5 fractional bits only).
	 * The only direct way to get high  precision "constants" into the fragment
	 * pipe I know of is to use the texcoord interpolator (not color, this one
	 * is 8 bit only too), which seems a bit expensive. We're lucky though it
	 * seems the values we need seem to fit better than worst case (get about
	 * 6 fractional bits for this instead of 5, at least when not correcting for
	 * hue/saturation/contrast/brightness, which is the same as for vco - yco and
	 * yoff get 8 fractional bits). Try to preserve as much accuracy as possible
	 * even with non-default saturation/hue/contrast/brightness adjustments,
	 * it gets a little crazy and ultimately precision might still be lacking.
	 *
	 * A higher precision (8 fractional bits) version might just put uco into
	 * a texcoord, and calculate a new vcoconst in the shader, like so:
	 * cohelper = {1.0, 0.0, 0.0} - shouldn't use 0.5 since not exactly representable
	 * vco = {1.5958 - 1.0, -0.8129 + 1.0, 1.0}
	 * vcocalc = ADD temp, bias/scale(cohelper), vco
	 * would in total use 4 tex units, 4 instructions which seems fairly
	 * balanced for this architecture (instead of 3 + 3 for the solution here)
	 *
	 * temp = MAD(yco, yuv.yyyy, yoff)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 *
	 * note first mad produces actually scalar, hence we transform
	 * it into a dp2a to get 8 bit precision of yco instead of 7 -
	 * That's assuming hw correctly expands consts to internal precision.
	 * (y * 1 + y * (yco - 1) + yoff)
	 * temp = DP2A / 2 (yco, yuv.yyyy, yoff)
	 * temp = MAD (uco / 4, yuv.uuuu * 2, temp)
	 * result = MAD x2 (vco / 2, yuv.vvvv, temp)
	 *
	 * vco, uco need bias (and hence scale too)
	 *
	 */
d1901 43
a1943 76
	/* MAD temp0 / 2, const0.a * 2, temp0, -const0.rgb */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_ARG_C_TFACTOR_COLOR |
		      (yoff < 0 ? R200_TXC_NEG_ARG_C : 0) |
		      R200_TXC_OP_DOT2_ADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
		      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_INV2 |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
	OUT_ACCEL_REG(R200_PP_TXABLEND_0,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0, (const1 - 0.5) * 2, (temp1 - 0.5) * 2, temp0 */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R1_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needux8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R0_COLOR |
		      R200_TXC_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
		      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
	OUT_ACCEL_REG(R200_PP_TXABLEND_1,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp2 - 0.5), temp0 */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R2_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needvx8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R0_COLOR |
		      R200_TXC_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
		      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_2X |
		      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
	OUT_ACCEL_REG(R200_PP_TXABLEND_2,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_COMP_ARG_C |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
		      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

	/* shader constants */
	OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
						      yco > 1.0 ? yco - 1.0: yco,
						      yoff < 0 ? -yoff : yoff, /* range special [-1, 1] */
						      0.0));
	OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
						      uco[1] * ucscale + 0.5, /* or [-2, 2] */
						      uco[2] * ucscale + 0.5,
						      0.0));
	OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
						      vco[1] * vcscale + 0.5, /* or [-4, 4] */
						      vco[2] * vcscale + 0.5,
						      0.0));
d1945 2
a1946 3
	FINISH_ACCEL();
    } else {
	pPriv->vtx_count = 4;
d1948 1
a1948 1
	BEGIN_ACCEL_RELOC(24, 1);
d1950 2
a1951 97
	OUT_ACCEL_REG(RADEON_PP_CNTL,
		      RADEON_TEX_0_ENABLE |
		      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
		      RADEON_TEX_BLEND_2_ENABLE);

	OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
		      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

	OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
	OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
	OUT_ACCEL_REG(R200_PP_TXSIZE_0,
		      (pPriv->w - 1) |
		      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
	OUT_TEXTURE_REG(R200_PP_TXOFFSET_0, txoffset, src_bo);

	/* MAD temp1 / 2, const0.a * 2, temp0.ggg, -const0.rgb */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_ARG_C_TFACTOR_COLOR |
		      (yoff < 0 ? R200_TXC_NEG_ARG_C : 0) |
		      R200_TXC_OP_DOT2_ADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
		      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_INV2 |
		      (R200_TXC_REPL_GREEN << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
	OUT_ACCEL_REG(R200_PP_TXABLEND_0,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp1, (const1 - 0.5) * 2, (temp0.rrr - 0.5) * 2, temp1 */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needux8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R1_COLOR |
		      R200_TXC_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
		      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      (R200_TXC_REPL_BLUE << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
	OUT_ACCEL_REG(R200_PP_TXABLEND_1,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
		      R200_TXA_OUTPUT_REG_NONE);

	/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp0.bbb - 0.5), temp1 */
	OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
		      R200_TXC_ARG_A_TFACTOR_COLOR |
		      R200_TXC_BIAS_ARG_A |
		      R200_TXC_SCALE_ARG_A |
		      R200_TXC_ARG_B_R0_COLOR |
		      R200_TXC_BIAS_ARG_B |
		      (needvx8 ? R200_TXC_SCALE_ARG_B : 0) |
		      R200_TXC_ARG_C_R1_COLOR |
		      R200_TXC_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
		      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
		      R200_TXC_SCALE_2X |
		      (R200_TXC_REPL_RED << R200_TXC_REPL_ARG_B_SHIFT) |
		      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
	OUT_ACCEL_REG(R200_PP_TXABLEND_2,
		      R200_TXA_ARG_A_ZERO |
		      R200_TXA_ARG_B_ZERO |
		      R200_TXA_ARG_C_ZERO |
		      R200_TXA_COMP_ARG_C |
		      R200_TXA_OP_MADD);
	OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
		      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

	/* shader constants */
	OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(yco > 1.0 ? 1.0 : 0.0, /* range special [0, 2] */
						      yco > 1.0 ? yco - 1.0: yco,
						      yoff < 0 ? -yoff : yoff, /* range special [-1, 1] */
						      0.0));
	OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * ucscale + 0.5, /* range [-4, 4] */
						      uco[1] * ucscale + 0.5, /* or [-2, 2] */
						      uco[2] * ucscale + 0.5,
						      0.0));
	OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * vcscale + 0.5, /* range [-2, 2] */
						      vco[1] * vcscale + 0.5, /* or [-4, 4] */
						      vco[2] * vcscale + 0.5,
						      0.0));
d1953 31
a1983 1
	FINISH_ACCEL();
d1986 8
a1993 5
    BEGIN_ACCEL(2);
    OUT_ACCEL_REG(RADEON_RE_TOP_LEFT, 0);
    OUT_ACCEL_REG(RADEON_RE_WIDTH_HEIGHT, ((scissor_w << RADEON_RE_WIDTH_SHIFT) |
					   (scissor_h << RADEON_RE_HEIGHT_SHIFT)));
    FINISH_ACCEL();
a1994 11
    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
d1996 1
a1996 1
					  crtc,
d1999 1
a2000 25

    return TRUE;
}

static void
FUNC_NAME(R200DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
    ACCEL_PREAMBLE();

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!FUNC_NAME(R200PrepareTexturedVideo)(pScrn, pPriv))
	return;

d2017 1
a2017 1
     *     the single triangle up to 2560/4021 pixels; above that we
d2021 13
a2033 91
#ifdef ACCEL_CP
    while (nBox) {
	int draw_size = 3 * pPriv->vtx_count + 4;
	int loop_boxes;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R200PrepareTexturedVideo)(pScrn, pPriv))
		return;
	}
	loop_boxes = MIN(radeon_cs_space_remaining(pScrn) / draw_size, nBox);
	nBox -= loop_boxes;

	BEGIN_RING(loop_boxes * 3 * pPriv->vtx_count + 4);
	OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
			    loop_boxes * 3 * pPriv->vtx_count));
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 ((loop_boxes * 3) << RADEON_CP_VC_CNTL_NUM_SHIFT));

	while (loop_boxes--) {
	    int srcX, srcY, srcw, srch;
	    int dstX, dstY, dstw, dsth;
	    dstX = pBox->x1 + dstxoff;
	    dstY = pBox->y1 + dstyoff;
	    dstw = pBox->x2 - pBox->x1;
	    dsth = pBox->y2 - pBox->y1;

	    srcX = pPriv->src_x;
	    srcX += ((pBox->x1 - pPriv->drw_x) *
		     pPriv->src_w) / pPriv->dst_w;
	    srcY = pPriv->src_y;
	    srcY += ((pBox->y1 - pPriv->drw_y) *
		     pPriv->src_h) / pPriv->dst_h;

	    srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	    srch = (pPriv->src_h * dsth) / pPriv->dst_h;

	    if (pPriv->is_planar) {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    } else {
		/*
		 * Just render a rect (using three coords).
		 */
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	    }

	    pBox++;
	}

	OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
	ADVANCE_RING();
    }
#else /* ACCEL_CP */
    BEGIN_ACCEL(nBox * 3 * pPriv->vtx_count + 2);
    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
				      RADEON_VF_PRIM_WALK_DATA |
				      ((nBox * 3) << RADEON_VF_NUM_VERTICES_SHIFT)));
    while (nBox--) {
	int srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / pPriv->dst_h;
d2038 8
a2045 1
	if (pPriv->is_planar) {
d2047 1
a2047 1
	     * Just render a rect (using three coords).
d2049 13
a2061 677
	    VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	} else {
	    /*
	     * Just render a rect (using three coords).
	     */
	    VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
		      (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
		      (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
		      (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
	}

	pBox++;
    }

    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();
#endif /* !ACCEL_CP */

    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

static Bool
FUNC_NAME(R300PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch;
    uint32_t dst_pitch, dst_format;
    uint32_t txenable, colorpitch, bicubic_offset;
    uint32_t output_fmt;
    int pixel_shift;
    ACCEL_PREAMBLE();

#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;

	radeon_cs_space_reset_bos(info->cs);
	radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	if (pPriv->bicubic_enabled)
	  radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
    }
#endif

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }

#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
    } else
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }

    if (pPriv->bicubic_enabled)
	pPriv->vtx_count = 6;
    else
	pPriv->vtx_count = 4;

    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = R300_COLORFORMAT_ARGB1555;
	else
	    dst_format = R300_COLORFORMAT_RGB565;
	break;
    case 32:
	dst_format = R300_COLORFORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    output_fmt = (R300_OUT_FMT_C4_8 |
		  R300_OUT_FMT_C0_SEL_BLUE |
		  R300_OUT_FMT_C1_SEL_GREEN |
		  R300_OUT_FMT_C2_SEL_RED |
		  R300_OUT_FMT_C3_SEL_ALPHA);

    colorpitch = dst_pitch >> pixel_shift;
    colorpitch |= dst_format;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= R300_COLORTILE;


    if (((pPriv->bicubic_state == BICUBIC_OFF)) &&
	(pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12))
	pPriv->is_planar = TRUE;
    else
	pPriv->is_planar = FALSE;

    if (pPriv->is_planar) {
	txformat1 = R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_HALF_REGION_0;
	txpitch = pPriv->src_pitch;
    } else {
	if (pPriv->id == FOURCC_UYVY)
	    txformat1 = R300_TX_FORMAT_YVYU422;
	else
	    txformat1 = R300_TX_FORMAT_VYUY422;

	if (pPriv->bicubic_state != BICUBIC_OFF)
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;

	/* pitch is in pixels */
	txpitch = pPriv->src_pitch / 2;
    }
    txpitch -= 1;

    txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		 (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		 R300_TXPITCH_EN);

    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_MAG_FILTER_LINEAR |
		R300_TX_MIN_FILTER_LINEAR |
		(0 << R300_TX_ID_SHIFT));

    txoffset = info->cs ? 0 : pPriv->src_offset;

    BEGIN_ACCEL_RELOC(6, 1);
    OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
    OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
    OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
    if (pPriv->is_planar)
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1 | R300_TX_FORMAT_CACHE_HALF_REGION_0);
    else
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, txoffset, src_bo);
    FINISH_ACCEL();

    txenable = R300_TEX_0_ENABLE;

    if (pPriv->is_planar) {
	txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		     (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 1;
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MIN_FILTER_LINEAR |
		    R300_TX_MAG_FILTER_LINEAR);

	BEGIN_ACCEL_RELOC(12, 2);
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_2);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_3);
	OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	FINISH_ACCEL();
	txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
    }

    if (pPriv->bicubic_enabled) {
	/* Size is 128x1 */
	txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
		     (0x0 << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	/* Format is 32-bit floats, 4bpp */
	txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
	/* Pitch is 127 (128-1) */
	txpitch = 0x7f;
	/* Tex filter */
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
		    R300_TX_MIN_FILTER_NEAREST |
		    R300_TX_MAG_FILTER_NEAREST |
		    (1 << R300_TX_ID_SHIFT));

	if (info->cs)
	    bicubic_offset = 0;
	else
	    bicubic_offset = pPriv->bicubic_src_offset;

	BEGIN_ACCEL_RELOC(6, 1);
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, bicubic_offset, info->bicubic_bo);
	FINISH_ACCEL();

	/* Enable tex 1 */
	txenable |= R300_TEX_1_ENABLE;
    }

    /* setup the VAP */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled)
	    BEGIN_ACCEL(7);
	else
	    BEGIN_ACCEL(6);
    } else {
	if (pPriv->bicubic_enabled)
	    BEGIN_ACCEL(5);
	else
	    BEGIN_ACCEL(4);
    }

    /* These registers define the number, type, and location of data submitted
     * to the PVS unit of GA input (when PVS is disabled)
     * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
     * enabled.  This memory provides the imputs to the vertex shader program
     * and ordering is not important.  When PVS/TCL is disabled, this field maps
     * directly to the GA input memory and the order is signifigant.  In
     * PVS_BYPASS mode the order is as follows:
     * Position
     * Point Size
     * Color 0-3
     * Textures 0-7
     * Fog
     */
    if (pPriv->bicubic_enabled) {
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_SIGNED_1));
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
		       (0 << R300_SKIP_DWORDS_2_SHIFT) |
		       (7 << R300_DST_VEC_LOC_2_SHIFT) |
		       R300_LAST_VEC_2 |
		       R300_SIGNED_2));
    } else {
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_LAST_VEC_1 |
		       R300_SIGNED_1));
    }

    /* load the vertex shader
     * We pre-load vertex programs in RADEONInit3DEngine():
     * - exa
     * - Xv
     * - Xv bicubic
     * Here we select the offset of the vertex program we want to use
     */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled) {
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((11 << R300_PVS_FIRST_INST_SHIFT) |
			   (13 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (13 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (13 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	} else {
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((9 << R300_PVS_FIRST_INST_SHIFT) |
			   (10 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (10 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (10 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	}
    }

    /* Position and one set of 2 texture coordinates */
    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
    if (pPriv->bicubic_enabled)
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
					       (2 << R300_TEX_1_COMP_CNT_SHIFT)));
    else
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));

    OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
    FINISH_ACCEL();

    /* setup pixel shader */
    if (pPriv->bicubic_state != BICUBIC_OFF) {
	if (pPriv->bicubic_enabled) {
	    BEGIN_ACCEL(79);

	    /* 4 components: 2 for tex0 and 2 for tex1 */
	    OUT_ACCEL_REG(R300_RS_COUNT, ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
					  R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));

	    /* Pixel stack frame size. */
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

	    /* Indirection levels */
	    OUT_ACCEL_REG(R300_US_CONFIG, ((2 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    /* Set nodes. */
	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(14) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(6)));

	    /* Nodes are allocated highest first, but executed lowest first */
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_0, 0);
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_1, (R300_ALU_START(0) |
						R300_ALU_SIZE(0) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0)));
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_2, (R300_ALU_START(1) |
						R300_ALU_SIZE(9) |
						R300_TEX_START(1) |
						R300_TEX_SIZE(0)));
	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(11) |
						R300_ALU_SIZE(2) |
						R300_TEX_START(2) |
						R300_TEX_SIZE(3) |
						R300_RGBA_OUT));

	    /* ** BICUBIC FP ** */

	    /* texcoord0 => temp0
	     * texcoord1 => temp1 */

	    // first node
	    /* TEX temp2, temp1.rrr0, tex1, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(0), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(1) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(2)));

	    /* MOV temp1.r, temp1.ggg0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    // second node
	    /* TEX temp1, temp1, tex1, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(1), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(1) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(1)));

	    /* MUL temp3.rg, temp2.ggg0, const0.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(2) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    /* MUL temp2.rg, temp2.rrr0, const0.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(2) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp4.rg, temp1.ggg0, const1.rgb, temp3.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(4) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(4) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp5.rg, temp1.ggg0, const1.rgb, temp2.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(5) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(5) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp3.rg, temp1.rrr0, const1.rgb, temp3.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* MAD temp1.rg, temp1.rrr0, const1.rgb, temp2.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(1) |
						    R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp1.rg, temp0.rgb0, temp1.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(1) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp2.rg, temp0.rgb0, temp3.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(3) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp3.rg, temp0.rgb0, temp5.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
						    R300_ALU_RGB_ADDR2(5) |
						    R300_ALU_RGB_ADDRD(3) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(3) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

	    /* ADD temp0.rg, temp0.rgb0, temp4.rgb0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(10), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(10), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR2(4) |
						     R300_ALU_RGB_ADDRD(0) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(10), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(10), (R300_ALU_ALPHA_ADDRD(0) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


	    // third node
	    /* TEX temp4, temp1.rg--, tex0, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(2), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(1) |
						R300_TEX_DST_ADDR(4)));

	    /* TEX temp3, temp3.rg--, tex0, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(3), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(3) |
						R300_TEX_DST_ADDR(3)));

	    /* TEX temp5, temp2.rg--, tex0, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(4), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(2) |
						R300_TEX_DST_ADDR(5)));

	    /* TEX temp0, temp0.rg--, tex0, 1D */
	    OUT_ACCEL_REG(R300_US_TEX_INST(5), (R300_TEX_INST(R300_TEX_INST_LD) |
						R300_TEX_ID(0) |
						R300_TEX_SRC_ADDR(0) |
						R300_TEX_DST_ADDR(0)));

	    /* LRP temp3, temp1.bbbb, temp4, temp3 ->
	     * - PRESUB temps, temp4 - temp3
	     * - MAD temp3, temp1.bbbb, temps, temp3 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(11), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(11), (R300_ALU_RGB_ADDR0(3) |
						     R300_ALU_RGB_ADDR1(4) |
						     R300_ALU_RGB_ADDR2(1) |
						     R300_ALU_RGB_ADDRD(3) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(11), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(11), (R300_ALU_ALPHA_ADDR0(3) |
						       R300_ALU_ALPHA_ADDR1(4) |
						       R300_ALU_ALPHA_ADDR2(1) |
						       R300_ALU_ALPHA_ADDRD(3) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

	    /* LRP temp0, temp1.bbbb, temp5, temp0 ->
	     * - PRESUB temps, temp5 - temp0
	     * - MAD temp0, temp1.bbbb, temps, temp0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(12), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0) |
						     R300_ALU_RGB_INSERT_NOP));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(12), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR1(5) |
						     R300_ALU_RGB_ADDR2(1) |
						     R300_ALU_RGB_ADDRD(0) |
						     R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(12), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(12), (R300_ALU_ALPHA_ADDR0(0) |
						       R300_ALU_ALPHA_ADDR1(5) |
						       R300_ALU_ALPHA_ADDR2(1) |
						       R300_ALU_ALPHA_ADDRD(0) |
						       R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

	    /* LRP output, temp2.bbbb, temp3, temp0 ->
	     * - PRESUB temps, temp3 - temp0
	     * - MAD output, temp2.bbbb, temps, temp0 */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(13), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						     R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						     R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						     R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						     R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(13), (R300_ALU_RGB_ADDR0(0) |
						     R300_ALU_RGB_ADDR1(3) |
						     R300_ALU_RGB_ADDR2(2) |
						     R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(13), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						       R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						       R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						       R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(13), (R300_ALU_ALPHA_ADDR0(0) |
						       R300_ALU_ALPHA_ADDR1(3) |
						       R300_ALU_ALPHA_ADDR2(2) |
						       R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A)));

	    /* Shader constants. */
	    OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(1.0/(float)pPriv->w));
	    OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), 0);

	    OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(1.0/(float)pPriv->h));
	    OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), 0);
	    OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), 0);

a2062 135
	} else {
	    BEGIN_ACCEL(11);
	    /* 2 components: 2 for tex0 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
                          ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
                           R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */

	    /* Indirection levels */
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(1) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(1)));

	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(0) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* RGB */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR_0, (R300_ALU_RGB_ADDR0(0) |
                                                   R300_ALU_RGB_ADDR1(0) |
                                                   R300_ALU_RGB_ADDR2(0) |
                                                   R300_ALU_RGB_ADDRD(0) |
                                                   R300_ALU_RGB_OMASK((R300_ALU_RGB_MASK_R |
								       R300_ALU_RGB_MASK_G |
								       R300_ALU_RGB_MASK_B)) |
                                                   R300_ALU_RGB_TARGET_A));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST_0, (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
                                                   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
                                                   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
                                                   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
                                                   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
                                                   R300_ALU_RGB_CLAMP));
	    /* Alpha */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR_0, (R300_ALU_ALPHA_ADDR0(0) |
						     R300_ALU_ALPHA_ADDR1(0) |
						     R300_ALU_ALPHA_ADDR2(0) |
						     R300_ALU_ALPHA_ADDRD(0) |
						     R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						     R300_ALU_ALPHA_TARGET_A |
						     R300_ALU_ALPHA_OMASK_W(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST_0, (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
						     R300_ALU_ALPHA_MOD_A(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_1_0) |
						     R300_ALU_ALPHA_MOD_B(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0) |
						     R300_ALU_ALPHA_MOD_C(R300_ALU_ALPHA_MOD_NOP) |
						     R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						     R300_ALU_ALPHA_OMOD(R300_ALU_ALPHA_OMOD_NONE) |
						     R300_ALU_ALPHA_CLAMP));
	    FINISH_ACCEL();
	}
    } else {
	/*
	 * y' = y - .0625
	 * u' = u - .5
	 * v' = v - .5;
	 *
	 * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	 * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	 * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	 *
	 * DP3 might look like the straightforward solution
	 * but we'd need to move the texture yuv values in
	 * the same reg for this to work. Therefore use MADs.
	 * Brightness just adds to the off constant.
	 * Contrast is multiplication of luminance.
	 * Saturation and hue change the u and v coeffs.
	 * Default values (before adjustments - depend on colorspace):
	 * yco = 1.1643
	 * uco = 0, -0.39173, 2.017
	 * vco = 1.5958, -0.8129, 0
	 * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	 *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	 *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	 *
	 * temp = MAD(yco, yuv.yyyy, off)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 */
	/* TODO: don't recalc consts always */
	const float Loff = -0.0627;
	const float Coff = -0.502;
	float uvcosf, uvsinf;
	float yco;
	float uco[3], vco[3], off[3];
	float bright, cont, gamma;
	int ref = pPriv->transform_index;
	Bool needgamma = FALSE;

	cont = RTFContrast(pPriv->contrast);
	bright = RTFBrightness(pPriv->brightness);
	gamma = (float)pPriv->gamma / 1000.0;
	uvcosf = RTFSaturation(pPriv->saturation) * cos(RTFHue(pPriv->hue));
	uvsinf = RTFSaturation(pPriv->saturation) * sin(RTFHue(pPriv->hue));
	/* overlay video also does pre-gamma contrast/sat adjust, should we? */

	yco = trans[ref].RefLuma * cont;
	uco[0] = -trans[ref].RefRCr * uvsinf;
	uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
	uco[2] = trans[ref].RefBCb * uvcosf;
	vco[0] = trans[ref].RefRCr * uvcosf;
	vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
	vco[2] = trans[ref].RefBCb * uvsinf;
	off[0] = Loff * yco + Coff * (uco[0] + vco[0]) + bright;
	off[1] = Loff * yco + Coff * (uco[1] + vco[1]) + bright;
	off[2] = Loff * yco + Coff * (uco[2] + vco[2]) + bright;

	if (gamma != 1.0) {
	    needgamma = TRUE;
	    /* note: gamma correction is out = in ^ gamma;
	       gpu can only do LG2/EX2 therefore we transform into
	       in ^ gamma = 2 ^ (log2(in) * gamma).
	       Lots of scalar ops, unfortunately (better solution?) -
	       without gamma that's 3 inst, with gamma it's 10...
	       could use different gamma factors per channel,
	       if that's of any use. */
a2064 540
	if (pPriv->is_planar) {
	    BEGIN_ACCEL(needgamma ? 28 + 33 : 33);
	    /* 2 components: same 2 for tex0/1/2 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */

	    /* Indirection levels */
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(needgamma ? 7 + 3 : 3) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(3)));

	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(needgamma ? 7 + 2 : 2) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(2) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(2) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));
	    OUT_ACCEL_REG(R300_US_TEX_INST_1, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(1) |
					       R300_TEX_ID(1) |
					       R300_TEX_INST(R300_TEX_INST_LD)));
	    OUT_ACCEL_REG(R300_US_TEX_INST_2, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(2) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* MAD temp2.rgb, const0.aaa, temp2.rgb, const0.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDR1(2) |
						    R300_ALU_RGB_ADDR2(0) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop, but need to set up alpha source for rgb usage */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						      R300_ALU_ALPHA_ADDR1(2) |
						      R300_ALU_ALPHA_ADDR2(0) |
						      R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD temp2.rgb, const1.rgb, temp1.rgb, temp2.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR1(1) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(2) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(2) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD result.rgb, const2.rgb, temp0.rgb, temp2.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(2) |
						    R300_ALU_RGB_ADDRD(0) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						    (needgamma ? 0 : R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB))));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						    R300_ALU_RGB_CLAMP));
	    /* write alpha 1 */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						      R300_ALU_ALPHA_TARGET_A));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

	    if (needgamma) {
		/* rgb temp0.r = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.r */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.g = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.g */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.b = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.b */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MUL const1, temp1, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_ADDR1(0) |
							R300_ALU_RGB_ADDR2(0) |
							R300_ALU_RGB_ADDRD(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
							R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC0_AAA) |
							R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
							R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
							R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but set up const1 */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(1)) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.r = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.r */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.g = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.g */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.b = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_B)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.b */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    }
	} else {
	    BEGIN_ACCEL(needgamma ? 28 + 31 : 31);
	    /* 2 components */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    OUT_ACCEL_REG(R300_US_PIXSIZE, 1); /* highest temp used */

	    /* Indirection levels */
	    OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
					   R300_FIRST_TEX));

	    OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						R300_ALU_CODE_SIZE(needgamma ? 7 + 3 : 3) |
						R300_TEX_CODE_OFFSET(0) |
						R300_TEX_CODE_SIZE(1)));

	    OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						R300_ALU_SIZE(needgamma ? 7 + 2 : 2) |
						R300_TEX_START(0) |
						R300_TEX_SIZE(0) |
						R300_RGBA_OUT));

	    /* tex inst */
	    OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
					       R300_TEX_DST_ADDR(0) |
					       R300_TEX_ID(0) |
					       R300_TEX_INST(R300_TEX_INST_LD)));

	    /* ALU inst */
	    /* MAD temp1.rgb, const0.aaa, temp0.ggg, const0.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(0) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_GGG) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop, but need to set up alpha source for rgb usage */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						      R300_ALU_ALPHA_ADDR1(0) |
						      R300_ALU_ALPHA_ADDR2(0) |
						      R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD temp1.rgb, const1.rgb, temp0.bbb, temp1.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(1) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_BBB) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
	    /* alpha nop */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

	    /* MAD result.rgb, const2.rgb, temp0.rrr, temp1.rgb */
	    OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						    R300_ALU_RGB_ADDR1(0) |
						    R300_ALU_RGB_ADDR2(1) |
						    R300_ALU_RGB_ADDRD(0) |
						    R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						    (needgamma ? 0 : R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB))));
	    OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						    R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RRR) |
						    R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						    R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						    R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						    R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						    R300_ALU_RGB_CLAMP));
	    /* write alpha 1 */
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(0) |
						      R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						      R300_ALU_ALPHA_TARGET_A));
	    OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						      R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						      R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

	    if (needgamma) {
		/* rgb temp0.r = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.r */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.g = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.g */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb temp0.b = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha lg2 temp0, temp0.b */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_LN2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MUL const1, temp1, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_ADDR1(0) |
							R300_ALU_RGB_ADDR2(0) |
							R300_ALU_RGB_ADDRD(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
							R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC0_AAA) |
							R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
							R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
							R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
							R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but set up const1 */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(1)) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.r = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.r */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_R) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.g = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_G) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.g */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_G) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* rgb out0.b = op_sop, set up src0 reg */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
							R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_B) |
							R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_B)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9),
			      R300_ALU_RGB_OP(R300_ALU_RGB_OP_SOP) |
			      R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE));
		/* alpha ex2 temp0, temp0.b */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(0) |
							  R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_EX2) |
							  R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_B) |
							  R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
							  R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
	    }
	}

	/* Shader constants. */
	/* constant 0: off, yco */
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(off[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), F_TO_24(off[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), F_TO_24(off[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), F_TO_24(yco));
	/* constant 1: uco */
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), F_TO_24(uco[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(uco[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), F_TO_24(uco[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), F_TO_24(gamma));
	/* constant 2: vco */
	OUT_ACCEL_REG(R300_US_ALU_CONST_R(2), F_TO_24(vco[0]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_G(2), F_TO_24(vco[1]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_B(2), F_TO_24(vco[2]));
	OUT_ACCEL_REG(R300_US_ALU_CONST_A(2), F_TO_24(0.0));

	FINISH_ACCEL();
    }

    BEGIN_ACCEL_RELOC(6, 2);
    OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
    OUT_ACCEL_REG(R300_TX_ENABLE, txenable);

    EMIT_WRITE_OFFSET(R300_RB3D_COLOROFFSET0, 0, pPixmap);
    EMIT_COLORPITCH(R300_RB3D_COLORPITCH0, colorpitch, pPixmap);

    /* no need to enable blending */
    OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    OUT_ACCEL_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    FINISH_ACCEL();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
FUNC_NAME(R300DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
    ACCEL_PREAMBLE();

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!FUNC_NAME(R300PrepareTexturedVideo)(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2560/4021 pixels; above that we
     *     render as a quad.
     */

    while (nBox--) {
	int srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
	Bool use_quad = FALSE;
d2066 7
a2072 51
	int draw_size = 4 * pPriv->vtx_count + 4 + 2 + 3;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R300PrepareTexturedVideo)(pScrn, pPriv))
		return;
	}
#endif

	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;

	if (IS_R400_3D) {
	    if ((dstw+dsth) > 4021)
		use_quad = TRUE;
	} else {
	    if ((dstw+dsth) > 2560)
		use_quad = TRUE;
	}
	/*
	 * Set up the scissor area to that of the output size.
	 */
	BEGIN_ACCEL(2);
	/* R300 has an offset */
	OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX + 1440) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + 1440) << R300_SCISSOR_Y_SHIFT)));
	OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw + 1440 - 1) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + dsth + 1440 - 1) << R300_SCISSOR_Y_SHIFT)));
	FINISH_ACCEL();

#ifdef ACCEL_CP
	if (use_quad) {
	    BEGIN_RING(4 * pPriv->vtx_count + 4);
	    OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				4 * pPriv->vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_QUAD_LIST |
d2074 19
a2092 1
		     (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
d2094 1
a2094 1
	    BEGIN_RING(3 * pPriv->vtx_count + 4);
d2096 2
a2097 2
				3 * pPriv->vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
d2102 7
a2108 4
	if (use_quad)
	    BEGIN_ACCEL(2 + pPriv->vtx_count * 4);
	else
	    BEGIN_ACCEL(2 + pPriv->vtx_count * 3);
d2110 2
a2111 2
	if (use_quad)
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_QUAD_LIST |
d2113 13
a2125 3
					      (4 << RADEON_VF_NUM_VERTICES_SHIFT)));
	else
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
d2128 1
d2136 12
a2147 12
		VTX_OUT_6((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h,
			  (float)srcX + 0.5,               (float)srcY + 0.5);
		VTX_OUT_6((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h,
			  (float)srcX + 0.5,               (float)(srcY + srch) + 0.5);
		VTX_OUT_6((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h,
			  (float)(srcX + srcw) + 0.5,      (float)(srcY + srch) + 0.5);
		VTX_OUT_6((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h,
			  (float)(srcX + srcw) + 0.5,      (float)srcY + 0.5);
d2149 11
a2159 13
		VTX_OUT_6((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h,
			  (float)srcX + 0.5,               (float)srcY + 0.5);
		VTX_OUT_6((float)dstX,                     (float)(dstY + dstw + dsth),
			  (float)srcX / pPriv->w,
			  ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h,
			  (float)srcX + 0.5,
			  (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
		VTX_OUT_6((float)(dstX + dstw + dsth),     (float)dstY,
			  ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
			  (float)srcY / pPriv->h,
			  (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
			  (float)srcY + 0.5);
d2162 39
a2200 9
	    if (use_quad) {
		VTX_OUT_4((float)dstX,                     (float)dstY,
			  (float)srcX / pPriv->w,          (float)srcY / pPriv->h);
		VTX_OUT_4((float)dstX,                     (float)(dstY + dsth),
			  (float)srcX / pPriv->w,          (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)(dstY + dsth),
			  (float)(srcX + srcw) / pPriv->w, (float)(srcY + srch) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw),            (float)dstY,
			  (float)(srcX + srcw) / pPriv->w, (float)srcY / pPriv->h);
d2203 1
a2203 3
		 * Render a big, scissored triangle. This means
		 * increasing the triangle size and adjusting
		 * texture coordinates.
d2205 6
a2210 8
		VTX_OUT_4((float)dstX,                 (float)dstY,
			  (float)srcX / pPriv->w,      (float)srcY / pPriv->h);
		VTX_OUT_4((float)dstX,                 (float)(dstY + dsth + dstw),
			  (float)srcX / pPriv->w,
			  ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h);
		VTX_OUT_4((float)(dstX + dstw + dsth), (float)dstY,
			  ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
			  (float)srcY / pPriv->h);
d2214 3
a2216 2
	/* flushing is pipelined, free/finish is not */
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
d2227 4
a2230 58
    BEGIN_ACCEL(3);
    OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
    OUT_ACCEL_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_ACCEL();

    DamageDamageRegion(pPriv->pDraw, &pPriv->clip);
}

static Bool
FUNC_NAME(R500PrepareTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    struct radeon_exa_pixmap_priv *driver_priv;
    struct radeon_bo *src_bo = pPriv->src_bo[pPriv->currentBuffer];
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch, us_format = 0;
    uint32_t dst_pitch, dst_format;
    uint32_t txenable, colorpitch, bicubic_offset;
    uint32_t output_fmt;
    int pixel_shift, out_size = 6;
    ACCEL_PREAMBLE();

#ifdef XF86DRM_MODE
    if (info->cs) {
	int ret;

	radeon_cs_space_reset_bos(info->cs);
	radeon_cs_space_add_persistent_bo(info->cs, src_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	if (pPriv->bicubic_enabled)
	    radeon_cs_space_add_persistent_bo(info->cs, info->bicubic_bo, RADEON_GEM_DOMAIN_GTT | RADEON_GEM_DOMAIN_VRAM, 0);

	driver_priv = exaGetPixmapDriverPrivate(pPixmap);
	radeon_cs_space_add_persistent_bo(info->cs, driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);

	ret = radeon_cs_space_check(info->cs);
	if (ret) {
	    ErrorF("Not enough RAM to hw accel xv operation\n");
	    return FALSE;
	}
    }
#endif

    pixel_shift = pPixmap->drawable.bitsPerPixel >> 4;

#ifdef USE_EXA
    if (info->useEXA) {
	dst_pitch = exaGetPixmapPitch(pPixmap);
    } else
#endif
    {
	dst_pitch = pPixmap->devKind;
    }

#ifdef USE_EXA
    if (info->useEXA) {
	RADEON_SWITCH_TO_3D();
d2232 1
a2232 1510
#endif
    {
	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	/* We must wait for 3d to idle, in case source was just written as a dest. */
	OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
		      RADEON_WAIT_HOST_IDLECLEAN |
		      RADEON_WAIT_2D_IDLECLEAN |
		      RADEON_WAIT_3D_IDLECLEAN |
		      RADEON_WAIT_DMA_GUI_IDLE);
	FINISH_ACCEL();

	if (!info->accel_state->XInited3D)
	    RADEONInit3DEngine(pScrn);
    }

    if (pPriv->bicubic_enabled)
	pPriv->vtx_count = 6;
    else
	pPriv->vtx_count = 4;

    switch (pPixmap->drawable.bitsPerPixel) {
    case 16:
	if (pPixmap->drawable.depth == 15)
	    dst_format = R300_COLORFORMAT_ARGB1555;
	else
	    dst_format = R300_COLORFORMAT_RGB565;
	break;
    case 32:
	dst_format = R300_COLORFORMAT_ARGB8888;
	break;
    default:
	return FALSE;
    }

    output_fmt = (R300_OUT_FMT_C4_8 |
		  R300_OUT_FMT_C0_SEL_BLUE |
		  R300_OUT_FMT_C1_SEL_GREEN |
		  R300_OUT_FMT_C2_SEL_RED |
		  R300_OUT_FMT_C3_SEL_ALPHA);

    colorpitch = dst_pitch >> pixel_shift;
    colorpitch |= dst_format;

    if (RADEONTilingEnabled(pScrn, pPixmap))
	colorpitch |= R300_COLORTILE;

    if (((pPriv->bicubic_state == BICUBIC_OFF)) &&
        (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12))
	pPriv->is_planar = TRUE;
    else
	pPriv->is_planar = FALSE;

    if (pPriv->is_planar) {
	txformat1 = R300_TX_FORMAT_X8;
	txpitch = pPriv->src_pitch;
    } else {
	if (pPriv->id == FOURCC_UYVY)
	    txformat1 = R300_TX_FORMAT_YVYU422;
	else
	    txformat1 = R300_TX_FORMAT_VYUY422;

	if (pPriv->bicubic_state != BICUBIC_OFF)
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;

	/* pitch is in pixels */
	txpitch = pPriv->src_pitch / 2;
    }
    txpitch -= 1;

    txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		 (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		 R300_TXPITCH_EN);

    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		R300_TX_MAG_FILTER_LINEAR |
		R300_TX_MIN_FILTER_LINEAR |
		(0 << R300_TX_ID_SHIFT));


    if ((pPriv->w - 1) & 0x800)
	txpitch |= R500_TXWIDTH_11;

    if ((pPriv->h - 1) & 0x800)
	txpitch |= R500_TXHEIGHT_11;

    if (info->ChipFamily == CHIP_FAMILY_R520) {
	unsigned us_width = (pPriv->w - 1) & 0x7ff;
	unsigned us_height = (pPriv->h - 1) & 0x7ff;
	unsigned us_depth = 0;

	if (pPriv->w > 2048) {
	    us_width = (0x7ff + us_width) >> 1;
	    us_depth |= 0x0d;
	}
	if (pPriv->h > 2048) {
	    us_height = (0x7ff + us_height) >> 1;
	    us_depth |= 0x0e;
	}
	us_format = (us_width << R300_TXWIDTH_SHIFT) |
		    (us_height << R300_TXHEIGHT_SHIFT) |
		    (us_depth << R300_TXDEPTH_SHIFT);
	out_size++;
    }

    txoffset = info->cs ? 0 : pPriv->src_offset;

    BEGIN_ACCEL_RELOC(out_size, 1);
    OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
    OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
    OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
    OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
    OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
    OUT_TEXTURE_REG(R300_TX_OFFSET_0, txoffset, src_bo);
    if (info->ChipFamily == CHIP_FAMILY_R520)
	OUT_ACCEL_REG(R500_US_FORMAT0_0, us_format);
    FINISH_ACCEL();

    txenable = R300_TEX_0_ENABLE;

    if (pPriv->is_planar) {
	txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		     (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	txpitch = RADEON_ALIGN(pPriv->src_pitch >> 1, 64);
	txpitch -= 1;
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MIN_FILTER_LINEAR |
		    R300_TX_MAG_FILTER_LINEAR);

	BEGIN_ACCEL_RELOC(12, 2);
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset, src_bo);
	OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
	OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8);
	OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset, src_bo);
	FINISH_ACCEL();
	txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
    }

    if (pPriv->bicubic_enabled) {
	/* Size is 128x1 */
	txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
		     (0x0 << R300_TXHEIGHT_SHIFT) |
		     R300_TXPITCH_EN);
	/* Format is 32-bit floats, 4bpp */
	txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
	/* Pitch is 127 (128-1) */
	txpitch = 0x7f;
	/* Tex filter */
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
		    R300_TX_MIN_FILTER_NEAREST |
		    R300_TX_MAG_FILTER_NEAREST |
		    (1 << R300_TX_ID_SHIFT));

	if (info->cs)
	    bicubic_offset = 0;
	else
	    bicubic_offset = pPriv->bicubic_src_offset;

	BEGIN_ACCEL_RELOC(6, 1);
	OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
	OUT_TEXTURE_REG(R300_TX_OFFSET_1, bicubic_offset, info->bicubic_bo);
	FINISH_ACCEL();

	/* Enable tex 1 */
	txenable |= R300_TEX_1_ENABLE;
    }

    /* setup the VAP */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled)
	    BEGIN_ACCEL(7);
	else
	    BEGIN_ACCEL(6);
    } else {
	if (pPriv->bicubic_enabled)
	    BEGIN_ACCEL(5);
	else
	    BEGIN_ACCEL(4);
    }

    /* These registers define the number, type, and location of data submitted
     * to the PVS unit of GA input (when PVS is disabled)
     * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
     * enabled.  This memory provides the imputs to the vertex shader program
     * and ordering is not important.  When PVS/TCL is disabled, this field maps
     * directly to the GA input memory and the order is signifigant.  In
     * PVS_BYPASS mode the order is as follows:
     * Position
     * Point Size
     * Color 0-3
     * Textures 0-7
     * Fog
     */
    if (pPriv->bicubic_enabled) {
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_SIGNED_1));
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
		       (0 << R300_SKIP_DWORDS_2_SHIFT) |
		       (7 << R300_DST_VEC_LOC_2_SHIFT) |
		       R300_LAST_VEC_2 |
		       R300_SIGNED_2));
    } else {
	OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_LAST_VEC_1 |
		       R300_SIGNED_1));
    }

    /* load the vertex shader
     * We pre-load vertex programs in RADEONInit3DEngine():
     * - exa
     * - Xv
     * - Xv bicubic
     * Here we select the offset of the vertex program we want to use
     */
    if (info->accel_state->has_tcl) {
	if (pPriv->bicubic_enabled) {
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((11 << R300_PVS_FIRST_INST_SHIFT) |
			   (13 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (13 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (13 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	} else {
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((9 << R300_PVS_FIRST_INST_SHIFT) |
			   (10 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (10 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (10 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
	}
    }

    /* Position and one set of 2 texture coordinates */
    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
    if (pPriv->bicubic_enabled)
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
					       (2 << R300_TEX_1_COMP_CNT_SHIFT)));
    else
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));

    OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
    FINISH_ACCEL();

    /* setup pixel shader */
    if (pPriv->bicubic_state != BICUBIC_OFF) {
	if (pPriv->bicubic_enabled) {
	    BEGIN_ACCEL(7);

	    /* 4 components: 2 for tex0 and 2 for tex1 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1));

	    /* Pixel stack frame size. */
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

	    /* FP length. */
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(13)));
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(13)));

	    /* Prepare for FP emission. */
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
	    FINISH_ACCEL();

	    BEGIN_ACCEL(89);
	    /* Pixel shader.
	     * I've gone ahead and annotated each instruction, since this
	     * thing is MASSIVE. :3
	     * Note: In order to avoid buggies with temps and multiple
	     * inputs, all temps are offset by 2. temp0 -> register2. */

	    /* TEX temp2, input1.xxxx, tex1, 1D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_R |
						   R500_TEX_SRC_R_SWIZ_R |
						   R500_TEX_SRC_Q_SWIZ_R |
						   R500_TEX_DST_ADDR(2) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp5, input1.yyyy, tex1, 1D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						   R500_TEX_SRC_S_SWIZ_G |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_G |
						   R500_TEX_SRC_Q_SWIZ_G |
						   R500_TEX_DST_ADDR(5) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* MUL temp4, const0.x0x0, temp2.yyxx */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_0 |
						   R500_ALU_RGB_B_SWIZ_A_R |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_R_SWIZ_0 |
						   R500_ALU_RGBA_G_SWIZ_0 |
						   R500_ALU_RGBA_B_SWIZ_0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp3, const0.0y0y, temp5.xxxx, temp4 */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(5) |
						   R500_RGB_ADDR2(4)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(5) |
						   R500_ALPHA_ADDR2(4)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_0 |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_0 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_G |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* ADD temp3, temp3, input0.xyxy */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(3) |
						   R500_RGB_ADDR2(0)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(3) |
						   R500_ALPHA_ADDR2(0)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						   R500_ALU_RGB_G_SWIZ_A_1 |
						   R500_ALU_RGB_B_SWIZ_A_1 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_1 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_R |
						   R500_ALU_RGBA_A_SWIZ_G));

	    /* TEX temp1, temp3.zwxy, tex0, 2D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						   R500_TEX_SRC_S_SWIZ_B |
						   R500_TEX_SRC_T_SWIZ_A |
						   R500_TEX_SRC_R_SWIZ_R |
						   R500_TEX_SRC_Q_SWIZ_G |
						   R500_TEX_DST_ADDR(1) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp3, temp3.xyzw, tex0, 2D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(3) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* MAD temp4, const0.0y0y, temp5.yyyy, temp4 */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(5) |
						   R500_RGB_ADDR2(4)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(5) |
						   R500_ALPHA_ADDR2(4)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_0 |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_0 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_G));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC0 |
						   R500_ALPHA_SWIZ_A_G |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_G));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* ADD temp0, temp4, input0.xyxy */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(4) |
						   R500_RGB_ADDR2(0)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(4) |
						   R500_ALPHA_ADDR2(0)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						   R500_ALU_RGB_G_SWIZ_A_1 |
						   R500_ALU_RGB_B_SWIZ_A_1 |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_1 |
						   R500_ALPHA_SEL_B_SRC1 |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_R |
						   R500_ALU_RGBA_A_SWIZ_G));

	    /* TEX temp4, temp0.zwzw, tex0, 2D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_B |
						   R500_TEX_SRC_T_SWIZ_A |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(4) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* TEX temp0, temp0.xyzw, tex0, 2D */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_SRC_R_SWIZ_B |
						   R500_TEX_SRC_Q_SWIZ_A |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* LRP temp3, temp2.zzzz, temp1, temp3 ->
	     * - PRESUB temps, temp1 - temp3
	     * - MAD temp2.zzzz, temps, temp3 */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(3) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(1) |
						   R500_RGB_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(3) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(1) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* LRP temp0, temp2.zzzz, temp4, temp0 ->
	     * - PRESUB temps, temp4 - temp1
	     * - MAD temp2.zzzz, temps, temp0 */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(4) |
						   R500_RGB_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(4) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* LRP output, temp5.zzzz, temp3, temp0 ->
	     * - PRESUB temps, temp3 - temp0
	     * - MAD temp5.zzzz, temps, temp0 */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_LAST |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						   R500_RGB_ADDR1(3) |
						   R500_RGB_ADDR2(5)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						   R500_ALPHA_ADDR1(3) |
						   R500_ALPHA_ADDR2(5)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						   R500_ALU_RGB_R_SWIZ_A_B |
						   R500_ALU_RGB_G_SWIZ_A_B |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRCP |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_OP_MAD |
						   R500_ALPHA_SEL_A_SRC2 |
						   R500_ALPHA_SWIZ_A_B |
						   R500_ALPHA_SEL_B_SRCP |
						   R500_ALPHA_SWIZ_B_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_A_SWIZ_A));

	    /* Shader constants. */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

	    /* const0 = {1 / texture[0].width, 1 / texture[0].height, 0, 0} */
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->w));
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->h));
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
	    OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);

	    FINISH_ACCEL();
	} else {
	    BEGIN_ACCEL(19);
	    /* 2 components: 2 for tex0 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */

	    /* FP length. */
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(1)));
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(1)));

	    /* Prepare for FP emission. */
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR1_CONST |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR1_CONST |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC0 |
						   R500_ALU_RGB_R_SWIZ_B_1 |
						   R500_ALU_RGB_B_SWIZ_B_1 |
						   R500_ALU_RGB_G_SWIZ_B_1));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_A |
						   R500_ALPHA_SWIZ_B_1));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_R_SWIZ_0 |
						   R500_ALU_RGBA_G_SWIZ_0 |
						   R500_ALU_RGBA_B_SWIZ_0 |
						   R500_ALU_RGBA_A_SWIZ_0));
	    FINISH_ACCEL();
	}
    } else {
	/*
	 * y' = y - .0625
	 * u' = u - .5
	 * v' = v - .5;
	 *
	 * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	 * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	 * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	 *
	 * DP3 might look like the straightforward solution
	 * but we'd need to move the texture yuv values in
	 * the same reg for this to work. Therefore use MADs.
	 * Brightness just adds to the off constant.
	 * Contrast is multiplication of luminance.
	 * Saturation and hue change the u and v coeffs.
	 * Default values (before adjustments - depend on colorspace):
	 * yco = 1.1643
	 * uco = 0, -0.39173, 2.017
	 * vco = 1.5958, -0.8129, 0
	 * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	 *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	 *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	 *
	 * temp = MAD(yco, yuv.yyyy, off)
	 * temp = MAD(uco, yuv.uuuu, temp)
	 * result = MAD(vco, yuv.vvvv, temp)
	 */
	/* TODO: don't recalc consts always */
	const float Loff = -0.0627;
	const float Coff = -0.502;
	float uvcosf, uvsinf;
	float yco;
	float uco[3], vco[3], off[3];
	float bright, cont, gamma;
	int ref = pPriv->transform_index;
	Bool needgamma = FALSE;

	cont = RTFContrast(pPriv->contrast);
	bright = RTFBrightness(pPriv->brightness);
	gamma = (float)pPriv->gamma / 1000.0;
	uvcosf = RTFSaturation(pPriv->saturation) * cos(RTFHue(pPriv->hue));
	uvsinf = RTFSaturation(pPriv->saturation) * sin(RTFHue(pPriv->hue));
	/* overlay video also does pre-gamma contrast/sat adjust, should we? */

	yco = trans[ref].RefLuma * cont;
	uco[0] = -trans[ref].RefRCr * uvsinf;
	uco[1] = trans[ref].RefGCb * uvcosf - trans[ref].RefGCr * uvsinf;
	uco[2] = trans[ref].RefBCb * uvcosf;
	vco[0] = trans[ref].RefRCr * uvcosf;
	vco[1] = trans[ref].RefGCb * uvsinf + trans[ref].RefGCr * uvcosf;
	vco[2] = trans[ref].RefBCb * uvsinf;
	off[0] = Loff * yco + Coff * (uco[0] + vco[0]) + bright;
	off[1] = Loff * yco + Coff * (uco[1] + vco[1]) + bright;
	off[2] = Loff * yco + Coff * (uco[2] + vco[2]) + bright;

	//XXX gamma

	if (gamma != 1.0) {
	    needgamma = TRUE;
	    /* note: gamma correction is out = in ^ gamma;
	       gpu can only do LG2/EX2 therefore we transform into
	       in ^ gamma = 2 ^ (log2(in) * gamma).
	       Lots of scalar ops, unfortunately (better solution?) -
	       without gamma that's 3 inst, with gamma it's 10...
	       could use different gamma factors per channel,
	       if that's of any use. */
	}

	if (pPriv->is_planar) {
	    BEGIN_ACCEL(56);
	    /* 2 components: 2 for tex0 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */

	    /* FP length. */
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(5)));
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(5)));

	    /* Prepare for FP emission. */
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(2) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* tex inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						   R500_TEX_INST_LD |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(1) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* tex inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(2) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    /* MAD temp2.rgb, const0.aaa, temp2.rgb, const0.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(2) |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(2) |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_A |
						   R500_ALU_RGB_G_SWIZ_A_A |
						   R500_ALU_RGB_B_SWIZ_A_A |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(2) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(2) |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp2.rgb, const1.rgb, temp1.rgb, temp2.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(1) |
						   R500_RGB_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(1) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(2) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(2) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD result.rgb, const2.rgb, temp0.rgb, temp2.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(2) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(2)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(0) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(0) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_1));

	} else {
	    BEGIN_ACCEL(44);
	    /* 2 components: 2 for tex0/1/2 */
	    OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));

	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0));

	    /* Pixel stack frame size. */
	    OUT_ACCEL_REG(R300_US_PIXSIZE, 1); /* highest temp used */

	    /* FP length. */
	    OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(3)));
	    OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(3)));

	    /* Prepare for FP emission. */
	    OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

	    /* tex inst */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    /* MAD temp1.rgb, const0.aaa, temp0.ggg, const0.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_A |
						   R500_ALU_RGB_G_SWIZ_A_A |
						   R500_ALU_RGB_B_SWIZ_A_A |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_G |
						   R500_ALU_RGB_B_SWIZ_B_G |
						   R500_ALU_RGB_G_SWIZ_B_G));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC0 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD temp1.rgb, const1.rgb, temp0.bbb, temp1.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(1) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(1)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(1)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_B |
						   R500_ALU_RGB_B_SWIZ_B_B |
						   R500_ALU_RGB_G_SWIZ_B_B));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_0));

	    /* MAD result.rgb, const2.rgb, temp0.rrr, temp1.rgb */
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(2) |
						   R500_RGB_ADDR0_CONST |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR2(1)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(1) |
						   R500_ALPHA_ADDR0_CONST |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR2(1)));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC1 |
						   R500_ALU_RGB_R_SWIZ_B_R |
						   R500_ALU_RGB_B_SWIZ_B_R |
						   R500_ALU_RGB_G_SWIZ_B_R));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_ADDRD(1) |
						   R500_ALPHA_SWIZ_A_0 |
						   R500_ALPHA_SWIZ_B_0));
	    OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_ADDRD(1) |
						   R500_ALU_RGBA_SEL_C_SRC2 |
						   R500_ALU_RGBA_R_SWIZ_R |
						   R500_ALU_RGBA_G_SWIZ_G |
						   R500_ALU_RGBA_B_SWIZ_B |
						   R500_ALU_RGBA_ALPHA_SEL_C_SRC0 |
						   R500_ALU_RGBA_A_SWIZ_1));
	}

	/* Shader constants. */
	OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

	/* constant 0: off, yco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, off[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, yco);
	/* constant 1: uco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, uco[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, gamma);
	/* constant 2: vco */
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[0]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[1]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, vco[2]);
	OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0.0);

	FINISH_ACCEL();
    }

    BEGIN_ACCEL_RELOC(6, 2);
    OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
    OUT_ACCEL_REG(R300_TX_ENABLE, txenable);

    EMIT_WRITE_OFFSET(R300_RB3D_COLOROFFSET0, 0, pPixmap);
    EMIT_COLORPITCH(R300_RB3D_COLORPITCH0, colorpitch, pPixmap);

    /* no need to enable blending */
    OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);

    OUT_ACCEL_REG(R300_VAP_VTX_SIZE, pPriv->vtx_count);
    FINISH_ACCEL();

    if (pPriv->vsync) {
	xf86CrtcPtr crtc;
	if (pPriv->desired_crtc)
	    crtc = pPriv->desired_crtc;
	else
	    crtc = radeon_pick_best_crtc(pScrn,
					 pPriv->drw_x,
					 pPriv->drw_x + pPriv->dst_w,
					 pPriv->drw_y,
					 pPriv->drw_y + pPriv->dst_h);
	if (crtc)
	    FUNC_NAME(RADEONWaitForVLine)(pScrn, pPixmap,
					  crtc,
					  pPriv->drw_y - crtc->y,
					  (pPriv->drw_y - crtc->y) + pPriv->dst_h);
    }

    return TRUE;
}

static void
FUNC_NAME(R500DisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
{
    RADEONInfoPtr info = RADEONPTR(pScrn);
    PixmapPtr pPixmap = pPriv->pPixmap;
    int dstxoff, dstyoff;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
    ACCEL_PREAMBLE();

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif

    if (!FUNC_NAME(R500PrepareTexturedVideo)(pScrn, pPriv))
	return;

    /*
     * Rendering of the actual polygon is done in two different
     * ways depending on chip generation:
     *
     * < R300:
     *
     *     These chips can render a rectangle in one pass, so
     *     handling is pretty straight-forward.
     *
     * >= R300:
     *
     *     These chips can accept a quad, but will render it as
     *     two triangles which results in a diagonal tear. Instead
     *     We render a single, large triangle and use the scissor
     *     functionality to restrict it to the desired rectangle.
     *     Due to guardband limits on r3xx/r4xx, we can only use
     *     the single triangle up to 2880 pixels; above that we
     *     render as a quad.
     */

    while (nBox--) {
	int srcX, srcY, srcw, srch;
	int dstX, dstY, dstw, dsth;
#ifdef ACCEL_CP
	int draw_size = 3 * pPriv->vtx_count + 4 + 2 + 3;

	if (draw_size > radeon_cs_space_remaining(pScrn)) {
	    if (info->cs)
		radeon_cs_flush_indirect(pScrn);
	    else
		RADEONCPFlushIndirect(pScrn, 1);
	    if (!FUNC_NAME(R500PrepareTexturedVideo)(pScrn, pPriv))
		return;
	}
#endif

	dstX = pBox->x1 + dstxoff;
	dstY = pBox->y1 + dstyoff;
	dstw = pBox->x2 - pBox->x1;
	dsth = pBox->y2 - pBox->y1;

	srcX = pPriv->src_x;
	srcX += ((pBox->x1 - pPriv->drw_x) *
		 pPriv->src_w) / pPriv->dst_w;
	srcY = pPriv->src_y;
	srcY += ((pBox->y1 - pPriv->drw_y) *
		 pPriv->src_h) / pPriv->dst_h;

	srcw = (pPriv->src_w * dstw) / pPriv->dst_w;
	srch = (pPriv->src_h * dsth) / pPriv->dst_h;

	BEGIN_ACCEL(2);
	OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX) << R300_SCISSOR_X_SHIFT) |
					 ((dstY) << R300_SCISSOR_Y_SHIFT)));
	OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw - 1) << R300_SCISSOR_X_SHIFT) |
					 ((dstY + dsth - 1) << R300_SCISSOR_Y_SHIFT)));
	FINISH_ACCEL();

#ifdef ACCEL_CP
	BEGIN_RING(3 * pPriv->vtx_count + 4);
	OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
			    3 * pPriv->vtx_count));
	OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
		 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
		 (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
#else /* ACCEL_CP */
	BEGIN_ACCEL(2 + pPriv->vtx_count * 3);
	OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
					  RADEON_VF_PRIM_WALK_DATA |
					  (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
#endif
	if (pPriv->bicubic_enabled) {
	    VTX_OUT_6((float)dstX,            (float)dstY,
		      (float)srcX / pPriv->w, (float)srcY / pPriv->h,
		      (float)srcX + 0.5,      (float)srcY + 0.5);
	    VTX_OUT_6((float)dstX,            (float)(dstY + dstw + dsth),
		      (float)srcX / pPriv->w, ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h,
		      (float)srcX + 0.5,      (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
	    VTX_OUT_6((float)(dstX + dstw + dsth),                       (float)dstY,
		      ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
		      (float)srcY / pPriv->h,
		      (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
		      (float)srcY + 0.5);
	} else {
	    /*
	     * Render a big, scissored triangle. This means
	     * increasing the triangle size and adjusting
	     * texture coordinates.
	     */
	    VTX_OUT_4((float)dstX,            (float)dstY,
		      (float)srcX / pPriv->w, (float)srcY / pPriv->h);
	    VTX_OUT_4((float)dstX,                              (float)(dstY + dsth + dstw),
		      (float)srcX / pPriv->w, ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / pPriv->h);
	    VTX_OUT_4((float)(dstX + dstw + dsth),              (float)dstY,
		      ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / pPriv->w,
		      (float)srcY / pPriv->h);
	}

	/* flushing is pipelined, free/finish is not */
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);

#ifdef ACCEL_CP
	ADVANCE_RING();
#else
	FINISH_ACCEL();
#endif /* !ACCEL_CP */

	pBox++;
    }

    BEGIN_ACCEL(3);
    OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
d2239 2
a2240 2
#undef VTX_OUT_4
#undef VTX_OUT_6
@


1.2
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@d50 2
a51 2
#define VTX_OUT_FILTER(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
do {									\
d60 1
a60 1
#define VTX_OUT(_dstX, _dstY, _srcX, _srcY)	\
d70 1
a70 1
#define VTX_OUT_FILTER(_dstX, _dstY, _srcX, _srcY, _maskX, _maskY)	\
d80 1
a80 1
#define VTX_OUT(_dstX, _dstY, _srcX, _srcY)	\
d90 2
a91 2
static void
FUNC_NAME(RADEONDisplayTexturedVideo)(ScrnInfoPtr pScrn, RADEONPortPrivPtr pPriv)
d95 8
a102 9
    uint32_t txformat;
    uint32_t txfilter, txformat0, txformat1, txoffset, txpitch;
    uint32_t dst_offset, dst_pitch, dst_format;
    uint32_t txenable, colorpitch;
    uint32_t blendcntl;
    Bool isplanar = FALSE;
    int dstxoff, dstyoff, pixel_shift, vtx_count;
    BoxPtr pBox = REGION_RECTS(&pPriv->clip);
    int nBox = REGION_NUM_RECTS(&pPriv->clip);
d105 21
d128 1
a130 1
	dst_offset = exaGetPixmapOffset(pPixmap) + info->fbLocation + pScrn->fbOffset;
d134 3
a136 13
	{
	    dst_offset = (pPixmap->devPrivate.ptr - info->FB) +
		info->fbLocation + pScrn->fbOffset;
	    dst_pitch = pPixmap->devKind;
	}

#ifdef COMPOSITE
    dstxoff = -pPixmap->screen_x + pPixmap->drawable.x;
    dstyoff = -pPixmap->screen_y + pPixmap->drawable.y;
#else
    dstxoff = 0;
    dstyoff = 0;
#endif
d143 14
a156 13
	{
	    BEGIN_ACCEL(2);
	    if (IS_R300_3D || IS_R500_3D)
		OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
	    else
		OUT_ACCEL_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
	    /* We must wait for 3d to idle, in case source was just written as a dest. */
	    OUT_ACCEL_REG(RADEON_WAIT_UNTIL,
			  RADEON_WAIT_HOST_IDLECLEAN |
			  RADEON_WAIT_2D_IDLECLEAN |
			  RADEON_WAIT_3D_IDLECLEAN |
			  RADEON_WAIT_DMA_GUI_IDLE);
	    FINISH_ACCEL();
d158 14
a171 3
	    if (!info->accel_state->XInited3D)
		RADEONInit3DEngine(pScrn);
	}
d173 10
a182 4
    if (pPriv->bicubic_enabled)
	vtx_count = 6;
    else
	vtx_count = 4;
d184 1
a184 2
    if (IS_R300_3D || IS_R500_3D) {
	uint32_t output_fmt;
d186 1
a186 38
	switch (pPixmap->drawable.bitsPerPixel) {
	case 16:
	    if (pPixmap->drawable.depth == 15)
		dst_format = R300_COLORFORMAT_ARGB1555;
	    else
		dst_format = R300_COLORFORMAT_RGB565;
	    break;
	case 32:
	    dst_format = R300_COLORFORMAT_ARGB8888;
	    break;
	default:
	    return;
	}

	output_fmt = (R300_OUT_FMT_C4_8 |
		      R300_OUT_FMT_C0_SEL_BLUE |
		      R300_OUT_FMT_C1_SEL_GREEN |
		      R300_OUT_FMT_C2_SEL_RED |
		      R300_OUT_FMT_C3_SEL_ALPHA);

	colorpitch = dst_pitch >> pixel_shift;
	colorpitch |= dst_format;

	if (RADEONTilingEnabled(pScrn, pPixmap))
	    colorpitch |= R300_COLORTILE;

	if (pPriv->planar_hw && (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12)) {
	    isplanar = TRUE;
	}

	if (isplanar) {
	    txformat1 = R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_HALF_REGION_0;
	    txpitch = pPriv->src_pitch;
	} else {
	    if (pPriv->id == FOURCC_UYVY)
		txformat1 = R300_TX_FORMAT_YVYU422;
	    else
		txformat1 = R300_TX_FORMAT_VYUY422;
d188 2
a189 1
	    txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;
d191 1
a191 4
	    /* pitch is in pixels */
	    txpitch = pPriv->src_pitch / 2;
	}
	txpitch -= 1;
d193 1
a193 3
	txformat0 = ((((pPriv->w - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
		    (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
		    R300_TXPITCH_EN);
d195 5
a199 2
	info->accel_state->texW[0] = pPriv->w;
	info->accel_state->texH[0] = pPriv->h;
d201 1
a201 5
	txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
		    R300_TX_MAG_FILTER_LINEAR |
		    R300_TX_MIN_FILTER_LINEAR |
		    (0 << R300_TX_ID_SHIFT));
d203 94
d298 6
a303 2
	if (IS_R500_3D && ((pPriv->w - 1) & 0x800))
	    txpitch |= R500_TXWIDTH_11;
d305 2
a306 2
	if (IS_R500_3D && ((pPriv->h - 1) & 0x800))
	    txpitch |= R500_TXHEIGHT_11;
d308 1
a308 1
	txoffset = pPriv->src_offset;
d310 26
a335 7
	BEGIN_ACCEL(6);
	OUT_ACCEL_REG(R300_TX_FILTER0_0, txfilter);
	OUT_ACCEL_REG(R300_TX_FILTER1_0, 0);
	OUT_ACCEL_REG(R300_TX_FORMAT0_0, txformat0);
	OUT_ACCEL_REG(R300_TX_FORMAT1_0, txformat1);
	OUT_ACCEL_REG(R300_TX_FORMAT2_0, txpitch);
	OUT_ACCEL_REG(R300_TX_OFFSET_0, txoffset);
d337 24
d362 20
a381 1
	txenable = R300_TEX_0_ENABLE;
d383 2
a384 27
	if (isplanar) {
	    txformat0 = ((((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) << R300_TXWIDTH_SHIFT) |
			(((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT) |
			R300_TXPITCH_EN);
	    txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
	    txpitch -= 1;
	    txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_CLAMP_LAST) |
		        R300_TX_CLAMP_T(R300_TX_CLAMP_CLAMP_LAST) |
			R300_TX_MIN_FILTER_LINEAR |
			R300_TX_MAG_FILTER_LINEAR);

		BEGIN_ACCEL(12);
		OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter | (1 << R300_TX_ID_SHIFT));
		OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_1, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_2);
		OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_1, txoffset + pPriv->planeu_offset);
		OUT_ACCEL_REG(R300_TX_FILTER0_2, txfilter | (2 << R300_TX_ID_SHIFT));
		OUT_ACCEL_REG(R300_TX_FILTER1_2, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_2, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_2, R300_TX_FORMAT_X8 | R300_TX_FORMAT_CACHE_FOURTH_REGION_3);
		OUT_ACCEL_REG(R300_TX_FORMAT2_2, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_2, txoffset + pPriv->planev_offset);
		FINISH_ACCEL();
		txenable |= R300_TEX_1_ENABLE | R300_TEX_2_ENABLE;
	}
d386 27
a412 38
	if (pPriv->bicubic_enabled) {
		/* Size is 128x1 */
		txformat0 = ((0x7f << R300_TXWIDTH_SHIFT) |
			     (0x0 << R300_TXHEIGHT_SHIFT) |
			     R300_TXPITCH_EN);
		/* Format is 32-bit floats, 4bpp */
		txformat1 = R300_EASY_TX_FORMAT(Z, Y, X, W, FL_R16G16B16A16);
		/* Pitch is 127 (128-1) */
		txpitch = 0x7f;
		/* Tex filter */
		txfilter = (R300_TX_CLAMP_S(R300_TX_CLAMP_WRAP) |
			    R300_TX_CLAMP_T(R300_TX_CLAMP_WRAP) |
			    R300_TX_MIN_FILTER_NEAREST |
			    R300_TX_MAG_FILTER_NEAREST |
			    (1 << R300_TX_ID_SHIFT));

		BEGIN_ACCEL(6);
		OUT_ACCEL_REG(R300_TX_FILTER0_1, txfilter);
		OUT_ACCEL_REG(R300_TX_FILTER1_1, 0);
		OUT_ACCEL_REG(R300_TX_FORMAT0_1, txformat0);
		OUT_ACCEL_REG(R300_TX_FORMAT1_1, txformat1);
		OUT_ACCEL_REG(R300_TX_FORMAT2_1, txpitch);
		OUT_ACCEL_REG(R300_TX_OFFSET_1, pPriv->bicubic_src_offset);
		FINISH_ACCEL();

		/* Enable tex 1 */
		txenable |= R300_TEX_1_ENABLE;
	}

	/* setup the VAP */
	if (info->accel_state->has_tcl) {
	    if (pPriv->bicubic_enabled)
		BEGIN_ACCEL(7);
	    else
		BEGIN_ACCEL(6);
	} else {
	    if (pPriv->bicubic_enabled)
		BEGIN_ACCEL(5);
d414 3
a416 1
		BEGIN_ACCEL(4);
d418 37
d456 13
a468 57
	/* These registers define the number, type, and location of data submitted
	 * to the PVS unit of GA input (when PVS is disabled)
	 * DST_VEC_LOC is the slot in the PVS input vector memory when PVS/TCL is
	 * enabled.  This memory provides the imputs to the vertex shader program
	 * and ordering is not important.  When PVS/TCL is disabled, this field maps
	 * directly to the GA input memory and the order is signifigant.  In
	 * PVS_BYPASS mode the order is as follows:
	 * Position
	 * Point Size
	 * Color 0-3
	 * Textures 0-7
	 * Fog
	 */
	if (pPriv->bicubic_enabled) {
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
			   (0 << R300_SKIP_DWORDS_0_SHIFT) |
			   (0 << R300_DST_VEC_LOC_0_SHIFT) |
			   R300_SIGNED_0 |
			   (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
			   (0 << R300_SKIP_DWORDS_1_SHIFT) |
			   (6 << R300_DST_VEC_LOC_1_SHIFT) |
			   R300_SIGNED_1));
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_1,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_2_SHIFT) |
			   (0 << R300_SKIP_DWORDS_2_SHIFT) |
			   (7 << R300_DST_VEC_LOC_2_SHIFT) |
			   R300_LAST_VEC_2 |
			   R300_SIGNED_2));
	} else {
	    OUT_ACCEL_REG(R300_VAP_PROG_STREAM_CNTL_0,
			  ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
			   (0 << R300_SKIP_DWORDS_0_SHIFT) |
			   (0 << R300_DST_VEC_LOC_0_SHIFT) |
			   R300_SIGNED_0 |
			   (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
			   (0 << R300_SKIP_DWORDS_1_SHIFT) |
			   (6 << R300_DST_VEC_LOC_1_SHIFT) |
			   R300_LAST_VEC_1 |
			   R300_SIGNED_1));
	}

	/* load the vertex shader
	 * We pre-load vertex programs in RADEONInit3DEngine():
	 * - exa mask/Xv bicubic
	 * - exa no mask
	 * - Xv
	 * Here we select the offset of the vertex program we want to use
	 */
	if (info->accel_state->has_tcl) {
	    if (pPriv->bicubic_enabled) {
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			      ((0 << R300_PVS_FIRST_INST_SHIFT) |
			       (2 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			       (2 << R300_PVS_LAST_INST_SHIFT)));
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			      (2 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
d470 9
a478 6
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_0,
			      ((5 << R300_PVS_FIRST_INST_SHIFT) |
			       (6 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			       (6 << R300_PVS_LAST_INST_SHIFT)));
		OUT_ACCEL_REG(R300_VAP_PVS_CODE_CNTL_1,
			      (6 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
d480 2
d484 23
a506 7
	/* Position and one set of 2 texture coordinates */
	OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
	if (pPriv->bicubic_enabled)
	    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, ((2 << R300_TEX_0_COMP_CNT_SHIFT) |
						   (2 << R300_TEX_1_COMP_CNT_SHIFT)));
	else
	    OUT_ACCEL_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));
d508 2
a509 2
	OUT_ACCEL_REG(R300_US_OUT_FMT_0, output_fmt);
	FINISH_ACCEL();
a510 345
	/* setup pixel shader */
	if (IS_R300_3D) {
	    if (pPriv->bicubic_enabled) {
		BEGIN_ACCEL(79);

		/* 4 components: 2 for tex0 and 2 for tex1 */
		OUT_ACCEL_REG(R300_RS_COUNT, ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
						   R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((2 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		/* Set nodes. */
		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
							R300_ALU_CODE_SIZE(14) |
							R300_TEX_CODE_OFFSET(0) |
							R300_TEX_CODE_SIZE(6)));

		/* Nodes are allocated highest first, but executed lowest first */
		OUT_ACCEL_REG(R300_US_CODE_ADDR_0, 0);
		OUT_ACCEL_REG(R300_US_CODE_ADDR_1, (R300_ALU_START(0) |
							R300_ALU_SIZE(0) |
							R300_TEX_START(0) |
							R300_TEX_SIZE(0)));
		OUT_ACCEL_REG(R300_US_CODE_ADDR_2, (R300_ALU_START(1) |
							R300_ALU_SIZE(9) |
							R300_TEX_START(1) |
							R300_TEX_SIZE(0)));
		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(11) |
							R300_ALU_SIZE(2) |
							R300_TEX_START(2) |
							R300_TEX_SIZE(3) |
							R300_RGBA_OUT));

		/* ** BICUBIC FP ** */

		/* texcoord0 => temp0
		 * texcoord1 => temp1 */

		// first node
		/* TEX temp2, temp1.rrr0, tex1, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(0), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(1) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(2)));

		/* MOV temp1.r, temp1.ggg0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		// second node
		/* TEX temp1, temp1, tex1, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(1), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(1) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(1)));

		/* MUL temp3.rg, temp2.ggg0, const0.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(2) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		/* MUL temp2.rg, temp2.rrr0, const0.rgb */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(2) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDRD(2) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(2), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(2), (R300_ALU_ALPHA_ADDRD(2) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp4.rg, temp1.ggg0, const1.rgb, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(3), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(3), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(4) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(3), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(3), (R300_ALU_ALPHA_ADDRD(4) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp5.rg, temp1.ggg0, const1.rgb, temp2.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(4), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_GGG) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(4), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_ADDRD(5) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(5) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp3.rg, temp1.rrr0, const1.rgb, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(5), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(5), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(5), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(5), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* MAD temp1.rg, temp1.rrr0, const1.rgb, temp2.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(6), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RRR) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(6), (R300_ALU_RGB_ADDR0(1) |
						   R300_ALU_RGB_ADDR1(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(6), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(6), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp1.rg, temp0.rgb0, temp1.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(7), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(7), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(1) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(7), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(7), (R300_ALU_ALPHA_ADDRD(1) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp2.rg, temp0.rgb0, temp3.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(8), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(8), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(3) |
						   R300_ALU_RGB_ADDRD(2) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(8), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(8), (R300_ALU_ALPHA_ADDRD(2) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp3.rg, temp0.rgb0, temp5.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(9), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(9), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(5) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(9), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(9), (R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));

		/* ADD temp0.rg, temp0.rgb0, temp4.rgb0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(10), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(10), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR2(4) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_R | R300_ALU_RGB_MASK_G)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(10), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(10), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));


		// third node
		/* TEX temp4, temp1.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(2), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(1) |
						   R300_TEX_DST_ADDR(4)));

		/* TEX temp3, temp3.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(3), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(3) |
						   R300_TEX_DST_ADDR(3)));

		/* TEX temp5, temp2.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(4), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(2) |
						   R300_TEX_DST_ADDR(5)));

		/* TEX temp0, temp0.rg--, tex0, 1D */
		OUT_ACCEL_REG(R300_US_TEX_INST(5), (R300_TEX_INST(R300_TEX_INST_LD) |
						   R300_TEX_ID(0) |
						   R300_TEX_SRC_ADDR(0) |
						   R300_TEX_DST_ADDR(0)));

		/* LRP temp3, temp1.bbbb, temp4, temp3 ->
		 * - PRESUB temps, temp4 - temp3
		 * - MAD temp3, temp1.bbbb, temps, temp3 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(11), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(11), (R300_ALU_RGB_ADDR0(3) |
						   R300_ALU_RGB_ADDR1(4) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(3) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(11), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(11), (R300_ALU_ALPHA_ADDR0(3) |
						   R300_ALU_ALPHA_ADDR1(4) |
						   R300_ALU_ALPHA_ADDR2(1) |
						   R300_ALU_ALPHA_ADDRD(3) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

		/* LRP temp0, temp1.bbbb, temp5, temp0 ->
		 * - PRESUB temps, temp5 - temp0
		 * - MAD temp0, temp1.bbbb, temps, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(12), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0) |
						   R300_ALU_RGB_INSERT_NOP));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(12), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(5) |
						   R300_ALU_RGB_ADDR2(1) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(12), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(12), (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(5) |
						   R300_ALU_ALPHA_ADDR2(1) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_A)));

		/* LRP output, temp2.bbbb, temp3, temp0 ->
		 * - PRESUB temps, temp3 - temp0
		 * - MAD output, temp2.bbbb, temps, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(13), (R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC2_BBB) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRCP_RGB) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_SRCP_OP(R300_ALU_RGB_SRCP_OP_RGB1_MINUS_RGB0)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(13), (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(3) |
						   R300_ALU_RGB_ADDR2(2) |
						   R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(13), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC2_B) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_SRCP_A) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_SRC0_A)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(13), (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(3) |
						   R300_ALU_ALPHA_ADDR2(2) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A)));

		/* Shader constants. */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(1.0/(float)pPriv->w));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), 0);

		OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(1.0/(float)pPriv->h));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), 0);
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), 0);
d512 14
a525 2
		FINISH_ACCEL();
	    } else if (isplanar) {
d527 1
a527 24
	     * y' = y - .0625
	     * u' = u - .5
	     * v' = v - .5;
	     *
	     * r = 1.1643 * y' + 0.0     * u' + 1.5958  * v'
	     * g = 1.1643 * y' - 0.39173 * u' - 0.81290 * v'
	     * b = 1.1643 * y' + 2.017   * u' + 0.0     * v'
	     *
	     * DP3 might look like the straightforward solution
	     * but we'd need to move the texture yuv values in
	     * the same reg for this to work. Therefore use MADs.
	     * Without changing the shader at all (only the constants)
	     * could also provide hue/saturation/brightness/contrast control.
	     *
	     * yco = 1.1643
	     * uco = 0, -0.39173, 2.017
	     * vco = 1.5958, -0.8129, 0
	     * off = -0.0625 * yco + -0.5 * uco[r] + -0.5 * vco[r],
	     *       -0.0625 * yco + -0.5 * uco[g] + -0.5 * vco[g],
	     *       -0.0625 * yco + -0.5 * uco[b] + -0.5 * vco[b],
	     *
	     * temp = MAD(yco, yuv.yyyy, off)
	     * temp = MAD(uco, yuv.uuuu, temp)
	     * result = MAD(vco, yuv.vvvv, temp)
d529 7
a535 14
		float yco = 1.1643;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};
		float off[3] = {-0.0625 * yco + -0.5 * uco[0] + -0.5 * vco[0],
				-0.0625 * yco + -0.5 * uco[1] + -0.5 * vco[1],
				-0.0625 * yco + -0.5 * uco[2] + -0.5 * vco[2]};

		BEGIN_ACCEL(33);
		/* 2 components: same 2 for tex0/1/2 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d537 2
a538 1
		OUT_ACCEL_REG(R300_US_PIXSIZE, 2); /* highest temp used */
d540 3
a542 118
		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						   R300_ALU_CODE_SIZE(3) |
						   R300_TEX_CODE_OFFSET(0) |
						   R300_TEX_CODE_SIZE(3)));

		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						   R300_ALU_SIZE(2) |
						   R300_TEX_START(0) |
						   R300_TEX_SIZE(2) |
						   R300_RGBA_OUT));

		/* tex inst */
		OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(0) |
						  R300_TEX_ID(0) |
						  R300_TEX_INST(R300_TEX_INST_LD)));
		OUT_ACCEL_REG(R300_US_TEX_INST_1, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(1) |
						  R300_TEX_ID(1) |
						  R300_TEX_INST(R300_TEX_INST_LD)));
		OUT_ACCEL_REG(R300_US_TEX_INST_2, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(2) |
						  R300_TEX_ID(2) |
						  R300_TEX_INST(R300_TEX_INST_LD)));

		/* ALU inst */
		/* MAD temp0, const0.a, temp0, const0.rgb */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(0), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(0)) |
						   R300_ALU_RGB_ADDR1(0) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(0), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_AAA) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop, but need to set up alpha source for rgb usage */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(0), (R300_ALU_ALPHA_ADDR0(R300_ALU_ALPHA_CONST(0)) |
						   R300_ALU_ALPHA_ADDR1(0) |
						   R300_ALU_ALPHA_ADDR2(0) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(0), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MAD const1, temp1, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(1), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(1)) |
						   R300_ALU_RGB_ADDR1(1) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(1), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE)));
		/* alpha nop */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(1), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_WMASK(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(1), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0)));

		/* MAD result, const2, temp2, temp0 */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR(2), (R300_ALU_RGB_ADDR0(R300_ALU_RGB_CONST(2)) |
						   R300_ALU_RGB_ADDR1(2) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_WMASK(R300_ALU_RGB_MASK_RGB) |
						   R300_ALU_RGB_OMASK(R300_ALU_RGB_MASK_RGB)));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST(2), (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_SRC1_RGB) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_SRC2_RGB) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						   R300_ALU_RGB_CLAMP));
		/* write alpha 1 */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR(4), (R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						   R300_ALU_ALPHA_TARGET_A));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST(4), (R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_1_0)));

		/* Shader constants. */
		/* constant 0: off, yco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(0), F_TO_24(off[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(0), F_TO_24(off[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(0), F_TO_24(off[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(0), F_TO_24(yco));
		/* constant 1: uco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(1), F_TO_24(uco[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(1), F_TO_24(uco[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(1), F_TO_24(uco[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(1), F_TO_24(0.0));
		/* constant 2: vco */
		OUT_ACCEL_REG(R300_US_ALU_CONST_R(2), F_TO_24(vco[0]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_G(2), F_TO_24(vco[1]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_B(2), F_TO_24(vco[2]));
		OUT_ACCEL_REG(R300_US_ALU_CONST_A(2), F_TO_24(0.0));
d544 2
a545 1
		FINISH_ACCEL();
d547 24
a570 8
	    } else {
		BEGIN_ACCEL(11);
		/* 2 components: 2 for tex0 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			  ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			   R300_RS_COUNT_HIRES_EN));
		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d572 3
a574 1
		OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */
d576 2
a577 62
		/* Indirection levels */
		OUT_ACCEL_REG(R300_US_CONFIG, ((0 << R300_NLEVEL_SHIFT) |
							R300_FIRST_TEX));

		OUT_ACCEL_REG(R300_US_CODE_OFFSET, (R300_ALU_CODE_OFFSET(0) |
						   R300_ALU_CODE_SIZE(1) |
						   R300_TEX_CODE_OFFSET(0) |
						   R300_TEX_CODE_SIZE(1)));

		OUT_ACCEL_REG(R300_US_CODE_ADDR_3, (R300_ALU_START(0) |
						   R300_ALU_SIZE(0) |
						   R300_TEX_START(0) |
						   R300_TEX_SIZE(0) |
						   R300_RGBA_OUT));

		/* tex inst */
		OUT_ACCEL_REG(R300_US_TEX_INST_0, (R300_TEX_SRC_ADDR(0) |
						  R300_TEX_DST_ADDR(0) |
						  R300_TEX_ID(0) |
						  R300_TEX_INST(R300_TEX_INST_LD)));

		/* ALU inst */
		/* RGB */
		OUT_ACCEL_REG(R300_US_ALU_RGB_ADDR_0, (R300_ALU_RGB_ADDR0(0) |
						   R300_ALU_RGB_ADDR1(0) |
						   R300_ALU_RGB_ADDR2(0) |
						   R300_ALU_RGB_ADDRD(0) |
						   R300_ALU_RGB_OMASK((R300_ALU_RGB_MASK_R |
						   R300_ALU_RGB_MASK_G |
						   R300_ALU_RGB_MASK_B)) |
						   R300_ALU_RGB_TARGET_A));
		OUT_ACCEL_REG(R300_US_ALU_RGB_INST_0, (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
						   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
						   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
						   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
						   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
						   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
						   R300_ALU_RGB_CLAMP));
		/* Alpha */
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_ADDR_0, (R300_ALU_ALPHA_ADDR0(0) |
						   R300_ALU_ALPHA_ADDR1(0) |
						   R300_ALU_ALPHA_ADDR2(0) |
						   R300_ALU_ALPHA_ADDRD(0) |
						   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
						   R300_ALU_ALPHA_TARGET_A |
						   R300_ALU_ALPHA_OMASK_W(R300_ALU_ALPHA_MASK_NONE)));
		OUT_ACCEL_REG(R300_US_ALU_ALPHA_INST_0, (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
						   R300_ALU_ALPHA_MOD_A(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_1_0) |
						   R300_ALU_ALPHA_MOD_B(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0) |
						   R300_ALU_ALPHA_MOD_C(R300_ALU_ALPHA_MOD_NOP) |
						   R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
						   R300_ALU_ALPHA_OMOD(R300_ALU_ALPHA_OMOD_NONE) |
						   R300_ALU_ALPHA_CLAMP));
		FINISH_ACCEL();
	    }
	} else {
	    if (pPriv->bicubic_enabled) {
		BEGIN_ACCEL(7);
d579 2
a580 467
		/* 4 components: 2 for tex0 and 2 for tex1 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			      ((4 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			       R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(1) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 5);

		/* FP length. */
		OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
						  R500_US_CODE_END_ADDR(13)));
		OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
						   R500_US_CODE_RANGE_SIZE(13)));

		/* Prepare for FP emission. */
		OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));
		FINISH_ACCEL();

		BEGIN_ACCEL(89);
		/* Pixel shader.
		 * I've gone ahead and annotated each instruction, since this
		 * thing is MASSIVE. :3
		 * Note: In order to avoid buggies with temps and multiple
		 * inputs, all temps are offset by 2. temp0 -> register2. */

		/* TEX temp2, input1.xxxx, tex1, 1D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_R |
						       R500_TEX_SRC_R_SWIZ_R |
						       R500_TEX_SRC_Q_SWIZ_R |
						       R500_TEX_DST_ADDR(2) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp5, input1.yyyy, tex1, 1D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(1) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(1) |
						       R500_TEX_SRC_S_SWIZ_G |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_G |
						       R500_TEX_SRC_Q_SWIZ_G |
						       R500_TEX_DST_ADDR(5) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* MUL temp4, const0.x0x0, temp2.yyxx */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_R |
						       R500_ALU_RGB_G_SWIZ_A_0 |
						       R500_ALU_RGB_B_SWIZ_A_R |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_G |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_0 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_R_SWIZ_0 |
						       R500_ALU_RGBA_G_SWIZ_0 |
						       R500_ALU_RGBA_B_SWIZ_0 |
						       R500_ALU_RGBA_A_SWIZ_0));

		/* MAD temp3, const0.0y0y, temp5.xxxx, temp4 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(5) |
						       R500_RGB_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(5) |
						       R500_ALPHA_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_0 |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_0 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_R |
						       R500_ALU_RGB_B_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_G |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* ADD temp3, temp3, input0.xyxy */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(3) |
						       R500_RGB_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(3) |
						       R500_ALPHA_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						       R500_ALU_RGB_G_SWIZ_A_1 |
						       R500_ALU_RGB_B_SWIZ_A_1 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_1 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_R |
						       R500_ALU_RGBA_A_SWIZ_G));

		/* TEX temp1, temp3.zwxy, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						       R500_TEX_SRC_S_SWIZ_B |
						       R500_TEX_SRC_T_SWIZ_A |
						       R500_TEX_SRC_R_SWIZ_R |
						       R500_TEX_SRC_Q_SWIZ_G |
						       R500_TEX_DST_ADDR(1) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp3, temp3.xyzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(3) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(3) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* MAD temp4, const0.0y0y, temp5.yyyy, temp4 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR0_CONST |
						       R500_RGB_ADDR1(5) |
						       R500_RGB_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR0_CONST |
						       R500_ALPHA_ADDR1(5) |
						       R500_ALPHA_ADDR2(4)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_0 |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_0 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_G |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_G));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(4) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC0 |
						       R500_ALPHA_SWIZ_A_G |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_G));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(4) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* ADD temp0, temp4, input0.xyxy */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR1(4) |
						       R500_RGB_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR1(4) |
						       R500_ALPHA_ADDR2(0)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_R_SWIZ_A_1 |
						       R500_ALU_RGB_G_SWIZ_A_1 |
						       R500_ALU_RGB_B_SWIZ_A_1 |
						       R500_ALU_RGB_SEL_B_SRC1 |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_1 |
						       R500_ALPHA_SEL_B_SRC1 |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC2 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_R |
						       R500_ALU_RGBA_A_SWIZ_G));

		/* TEX temp4, temp0.zwzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_B |
						       R500_TEX_SRC_T_SWIZ_A |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(4) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* TEX temp0, temp0.xyzw, tex0, 2D */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_SRC_R_SWIZ_B |
						       R500_TEX_SRC_Q_SWIZ_A |
						       R500_TEX_DST_ADDR(0) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* LRP temp3, temp2.zzzz, temp1, temp3 ->
		 * - PRESUB temps, temp1 - temp3
		 * - MAD temp2.zzzz, temps, temp3 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(3) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(1) |
						       R500_RGB_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(3) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(1) |
						       R500_ALPHA_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(3) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(3) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* LRP temp0, temp2.zzzz, temp4, temp0 ->
		 * - PRESUB temps, temp4 - temp1
		 * - MAD temp2.zzzz, temps, temp0 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_ALU |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(4) |
						       R500_RGB_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(4) |
						       R500_ALPHA_ADDR2(2)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* LRP output, temp5.zzzz, temp3, temp0 ->
		 * - PRESUB temps, temp3 - temp0
		 * - MAD temp5.zzzz, temps, temp0 */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						       R500_INST_LAST |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK |
						       R500_INST_RGB_OMASK_R |
						       R500_INST_RGB_OMASK_G |
						       R500_INST_RGB_OMASK_B |
						       R500_INST_ALPHA_OMASK));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_SRCP_OP_RGB1_MINUS_RGB0 |
						       R500_RGB_ADDR1(3) |
						       R500_RGB_ADDR2(5)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_SRCP_OP_A1_MINUS_A0 |
						       R500_ALPHA_ADDR1(3) |
						       R500_ALPHA_ADDR2(5)));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC2 |
						       R500_ALU_RGB_R_SWIZ_A_B |
						       R500_ALU_RGB_G_SWIZ_A_B |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRCP |
						       R500_ALU_RGB_R_SWIZ_B_R |
						       R500_ALU_RGB_G_SWIZ_B_G |
						       R500_ALU_RGB_B_SWIZ_B_B));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDRD(0) |
						       R500_ALPHA_OP_MAD |
						       R500_ALPHA_SEL_A_SRC2 |
						       R500_ALPHA_SWIZ_A_B |
						       R500_ALPHA_SEL_B_SRCP |
						       R500_ALPHA_SWIZ_B_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_ADDRD(0) |
						       R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_SEL_C_SRC0 |
						       R500_ALU_RGBA_R_SWIZ_R |
						       R500_ALU_RGBA_G_SWIZ_G |
						       R500_ALU_RGBA_B_SWIZ_B |
						       R500_ALU_RGBA_A_SWIZ_A));

		/* Shader constants. */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_CONST_INDEX(0));

		/* const0 = {1 / texture[0].width, 1 / texture[0].height, 0, 0} */
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->w));
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, (1.0/(float)pPriv->h));
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
		OUT_ACCEL_REG_F(R500_GA_US_VECTOR_DATA, 0x0);
d582 2
a583 1
		FINISH_ACCEL();
d585 4
a588 95
	    } else {
		BEGIN_ACCEL(19);
		/* 2 components: 2 for tex0 */
		OUT_ACCEL_REG(R300_RS_COUNT,
			      ((2 << R300_RS_COUNT_IT_COUNT_SHIFT) |
			       R300_RS_COUNT_HIRES_EN));

		/* R300_INST_COUNT_RS - highest RS instruction used */
		OUT_ACCEL_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));

		/* Pixel stack frame size. */
		OUT_ACCEL_REG(R300_US_PIXSIZE, 0); /* highest temp used */

		/* FP length. */
		OUT_ACCEL_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
						  R500_US_CODE_END_ADDR(1)));
		OUT_ACCEL_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
						   R500_US_CODE_RANGE_SIZE(1)));

		/* Prepare for FP emission. */
		OUT_ACCEL_REG(R500_US_CODE_OFFSET, 0);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_INDEX, R500_US_VECTOR_INST_INDEX(0));

		/* tex inst */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_RGB_WMASK_R |
						       R500_INST_RGB_WMASK_G |
						       R500_INST_RGB_WMASK_B |
						       R500_INST_ALPHA_WMASK |
						       R500_INST_RGB_CLAMP |
						       R500_INST_ALPHA_CLAMP));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						       R500_TEX_INST_LD |
						       R500_TEX_SEM_ACQUIRE |
						       R500_TEX_IGNORE_UNCOVERED));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						       R500_TEX_SRC_S_SWIZ_R |
						       R500_TEX_SRC_T_SWIZ_G |
						       R500_TEX_DST_ADDR(0) |
						       R500_TEX_DST_R_SWIZ_R |
						       R500_TEX_DST_G_SWIZ_G |
						       R500_TEX_DST_B_SWIZ_B |
						       R500_TEX_DST_A_SWIZ_A));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						       R500_DX_S_SWIZ_R |
						       R500_DX_T_SWIZ_R |
						       R500_DX_R_SWIZ_R |
						       R500_DX_Q_SWIZ_R |
						       R500_DY_ADDR(0) |
						       R500_DY_S_SWIZ_R |
						       R500_DY_T_SWIZ_R |
						       R500_DY_R_SWIZ_R |
						       R500_DY_Q_SWIZ_R));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

		/* ALU inst */
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						       R500_INST_TEX_SEM_WAIT |
						       R500_INST_LAST |
						       R500_INST_RGB_OMASK_R |
						       R500_INST_RGB_OMASK_G |
						       R500_INST_RGB_OMASK_B |
						       R500_INST_ALPHA_OMASK |
						       R500_INST_RGB_CLAMP |
						       R500_INST_ALPHA_CLAMP));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						       R500_RGB_ADDR1(0) |
						       R500_RGB_ADDR1_CONST |
						       R500_RGB_ADDR2(0) |
						       R500_RGB_ADDR2_CONST));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						       R500_ALPHA_ADDR1(0) |
						       R500_ALPHA_ADDR1_CONST |
						       R500_ALPHA_ADDR2(0) |
						       R500_ALPHA_ADDR2_CONST));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						       R500_ALU_RGB_R_SWIZ_A_R |
						       R500_ALU_RGB_G_SWIZ_A_G |
						       R500_ALU_RGB_B_SWIZ_A_B |
						       R500_ALU_RGB_SEL_B_SRC0 |
						       R500_ALU_RGB_R_SWIZ_B_1 |
						       R500_ALU_RGB_B_SWIZ_B_1 |
						       R500_ALU_RGB_G_SWIZ_B_1));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						       R500_ALPHA_SWIZ_A_A |
						       R500_ALPHA_SWIZ_B_1));
		OUT_ACCEL_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						       R500_ALU_RGBA_R_SWIZ_0 |
						       R500_ALU_RGBA_G_SWIZ_0 |
						       R500_ALU_RGBA_B_SWIZ_0 |
						       R500_ALU_RGBA_A_SWIZ_0));
		FINISH_ACCEL();
	    }
d590 4
d595 8
a602 10
	BEGIN_ACCEL(6);
	OUT_ACCEL_REG(R300_TX_INVALTAGS, 0);
	OUT_ACCEL_REG(R300_TX_ENABLE, txenable);

	OUT_ACCEL_REG(R300_RB3D_COLOROFFSET0, dst_offset);
	OUT_ACCEL_REG(R300_RB3D_COLORPITCH0, colorpitch);

	blendcntl = RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO;
	/* no need to enable blending */
	OUT_ACCEL_REG(R300_RB3D_BLENDCNTL, blendcntl);
d604 14
a617 1
	OUT_ACCEL_REG(R300_VAP_VTX_SIZE, vtx_count);
d620 3
a622 1
    } else {
d624 14
a637 14
	/* Same for R100/R200 */
	switch (pPixmap->drawable.bitsPerPixel) {
	case 16:
	    if (pPixmap->drawable.depth == 15)
		dst_format = RADEON_COLOR_FORMAT_ARGB1555;
	    else
		dst_format = RADEON_COLOR_FORMAT_RGB565;
	    break;
	case 32:
	    dst_format = RADEON_COLOR_FORMAT_ARGB8888;
	    break;
	default:
	    return;
	}
d639 10
a648 3
	if (pPriv->planar_hw && (pPriv->id == FOURCC_I420 || pPriv->id == FOURCC_YV12)) {
	    isplanar = TRUE;
	}
d650 1
a650 8
	if (isplanar) {
	    txformat = RADEON_TXFORMAT_I8;
	} else {
	    if (pPriv->id == FOURCC_UYVY)
		txformat = RADEON_TXFORMAT_YVYU422;
	    else
		txformat = RADEON_TXFORMAT_VYUY422;
	}
d652 1
a652 1
	txformat |= RADEON_TXFORMAT_NON_POWER2;
d654 2
a655 1
	colorpitch = dst_pitch >> pixel_shift;
d657 1
a657 2
	if (RADEONTilingEnabled(pScrn, pPixmap))
	    colorpitch |= RADEON_COLOR_TILE_ENABLE;
d659 3
a661 1
	BEGIN_ACCEL(4);
d663 2
a664 3
	OUT_ACCEL_REG(RADEON_RB3D_CNTL,
		      dst_format /*| RADEON_ALPHA_BLEND_ENABLE*/);
	OUT_ACCEL_REG(RADEON_RB3D_COLOROFFSET, dst_offset);
d666 1
a666 1
	OUT_ACCEL_REG(RADEON_RB3D_COLORPITCH, colorpitch);
d668 35
a702 2
	OUT_ACCEL_REG(RADEON_RB3D_BLENDCNTL,
		      RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
d704 1
a704 1
	FINISH_ACCEL();
d706 87
d794 76
a869 102
	if ((info->ChipFamily == CHIP_FAMILY_RV250) ||
	    (info->ChipFamily == CHIP_FAMILY_RV280) ||
	    (info->ChipFamily == CHIP_FAMILY_RS300) ||
	    (info->ChipFamily == CHIP_FAMILY_R200)) {

	    info->accel_state->texW[0] = pPriv->w;
	    info->accel_state->texH[0] = pPriv->h;

	    if (isplanar) {
		/* note: in contrast to r300, use input biasing on uv components */
		float yco = 1.1643;
		float yoff = -0.0625 * yco;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};

		/* need 2 texcoord sets (even though they are identical) due
		   to denormalization! hw apparently can't premultiply
		   same coord set by different texture size */
		vtx_count = 6;

		txformat0 = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
			    (((((pPriv->h + 1 ) >> 1) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
		txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
		txpitch -= 32;
		txfilter =  R200_MAG_FILTER_LINEAR |
			    R200_MIN_FILTER_LINEAR |
			    R200_CLAMP_S_CLAMP_LAST |
			    R200_CLAMP_T_CLAMP_LAST;

		BEGIN_ACCEL(36);

		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE | RADEON_TEX_1_ENABLE | RADEON_TEX_2_ENABLE |
			      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
			      RADEON_TEX_BLEND_2_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT) |
			      (2 << R200_VTX_TEX1_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		OUT_ACCEL_REG(R200_PP_TXFILTER_1, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_1, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_1, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_1, txformat0);
		OUT_ACCEL_REG(R200_PP_TXPITCH_1, txpitch);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_1, pPriv->src_offset + pPriv->planeu_offset);

		OUT_ACCEL_REG(R200_PP_TXFILTER_2, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_2, txformat | R200_TXFORMAT_ST_ROUTE_STQ1);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_2, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_2, txformat0);
		OUT_ACCEL_REG(R200_PP_TXPITCH_2, txpitch);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_2, pPriv->src_offset + pPriv->planev_offset);

		/* similar to r300 code. Note the big problem is that hardware constants
		 * are 8 bits only, representing 0.0-1.0. We can get that up (using bias
		 * + scale) to -1.0-1.0 (but precision will suffer). AFAIK the hw actually
		 * has 12 bits fractional precision (plus 1 sign bit, 3 range bits) but
		 * the constants not. To get larger range can use output scale, but for
		 * that 2.018 value we need a total scale by 8, which means the constants
		 * really have no accuracy whatsoever (5 fractional bits only).
		 * The only direct way to get high  precision "constants" into the fragment
		 * pipe I know of is to use the texcoord interpolator (not color, this one
		 * is 8 bit only too), which seems a bit expensive. We're lucky though it
		 * seems the values we need seem to fit better than worst case (get about
		 * 6 fractional bits for this instead of 5, at least when not correcting for
		 * hue/saturation/contrast/brightness, which is the same as for vco - yco and
		 * yoff get 8 fractional bits).
		 *
		 * A higher precision (8 fractional bits) version might just put uco into
		 * a texcoord, and calculate a new vcoconst in the shader, like so:
		 * cohelper = {1.0, 0.0, 0.0} - shouldn't use 0.5 since not exactly representable
		 * vco = {1.5958 - 1.0, -0.8129 + 1.0, 1.0}
		 * vcocalc = ADD temp, bias/scale(cohelper), vco
		 * would in total use 4 tex units, 4 instructions which seems fairly
		 * balanced for this architecture (instead of 3 + 3 for the solution here)
		 *
		 * temp = MAD(yco, yuv.yyyy, yoff)
		 * temp = MAD(uco, yuv.uuuu, temp)
		 * result = MAD(vco, yuv.vvvv, temp)
		 *
		 * note first mad produces actually scalar, hence we transform
		 * it into a dp2a to get 8 bit precision of yco instead of 7 -
		 * That's assuming hw correctly expands consts to internal precision.
		 * (y * 1 + y * (yco - 1) + yoff)
		 * temp = DP2A / 2 (yco, yuv.yyyy, yoff)
		 * temp = MAD (uco / 4, yuv.uuuu * 2, temp)
		 * result = MAD x2 (vco / 2, yuv.vvvv, temp)
		 *
		 * vco, uco need bias (and hence scale too)
		 *
		 */
d871 3
a873 75
		/* MAD temp0 / 2, const0.a * 2, temp0, -const0.rgb */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_ARG_C_TFACTOR_COLOR |
			      R200_TXC_NEG_ARG_C |
			      R200_TXC_OP_DOT2_ADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_INV2 |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0, (const1 - 0.5) * 2, (temp1 - 0.5) * 2, temp0 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R1_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_SCALE_ARG_B |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
			      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_1,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp2 - 0.5), temp0 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R2_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
			      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_2X |
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_2,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_COMP_ARG_C |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

		/* shader constants */
		OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(1.0, /* src range [1, 2] */
							      yco - 1.0,
							      -yoff, /* range [-1, 0] */
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * 0.125 + 0.5, /* range [-4, 4] */
							      uco[1] * 0.125 + 0.5,
							      uco[2] * 0.125 + 0.5,
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * 0.25 + 0.5, /* range [-2, 2] */
							      vco[1] * 0.25 + 0.5,
							      vco[2] * 0.25 + 0.5,
							      0.0));
d875 1
a875 117
		FINISH_ACCEL();
	    }
	    else if (info->ChipFamily == CHIP_FAMILY_RV250) {
		/* fix up broken packed yuv - shader same as above except
		   yuv compoents are all in same reg */
		float yco = 1.1643;
		float yoff = -0.0625 * yco;
		float uco[3] = {0.0, -0.39173, 2.018};
		float vco[3] = {1.5958, -0.8129, 0.0};

		txformat0 = (((((pPriv->w + 1 ) >> 1) - 1) & 0x7ff) |
			    (((((pPriv->h + 1 ) >> 1 ) - 1) & 0x7ff) << RADEON_TEX_VSIZE_SHIFT));
		txpitch = ((pPriv->src_pitch >> 1) + 63) & ~63;
		txpitch -= 32;
		txfilter =  R200_MAG_FILTER_LINEAR |
			    R200_MIN_FILTER_LINEAR |
			    R200_CLAMP_S_CLAMP_LAST |
			    R200_CLAMP_T_CLAMP_LAST;

		BEGIN_ACCEL(24);

		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE |
			      RADEON_TEX_BLEND_0_ENABLE | RADEON_TEX_BLEND_1_ENABLE |
			      RADEON_TEX_BLEND_2_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0, txfilter);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);
		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		/* MAD temp1 / 2, const0.a * 2, temp0.ggg, -const0.rgb */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_ARG_C_TFACTOR_COLOR |
			      R200_TXC_NEG_ARG_C |
			      R200_TXC_OP_DOT2_ADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      (0 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_INV2 |
			      (R200_TXC_REPL_GREEN << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp1, (const1 - 0.5) * 2, (temp0.rrr - 0.5) * 2, temp1 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_1,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_SCALE_ARG_B |
			      R200_TXC_ARG_C_R1_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_1,
			      (1 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      (R200_TXC_REPL_BLUE << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_8_8 | R200_TXC_OUTPUT_REG_R1);
		OUT_ACCEL_REG(R200_PP_TXABLEND_1,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_1,
			      R200_TXA_OUTPUT_REG_NONE);

		/* MAD temp0 x 2, (const2 - 0.5) * 2, (temp0.bbb - 0.5), temp1 */
		OUT_ACCEL_REG(R200_PP_TXCBLEND_2,
			      R200_TXC_ARG_A_TFACTOR_COLOR |
			      R200_TXC_BIAS_ARG_A |
			      R200_TXC_SCALE_ARG_A |
			      R200_TXC_ARG_B_R0_COLOR |
			      R200_TXC_BIAS_ARG_B |
			      R200_TXC_ARG_C_R1_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_2,
			      (2 << R200_TXC_TFACTOR_SEL_SHIFT) |
			      R200_TXC_SCALE_2X |
			      (R200_TXC_REPL_RED << R200_TXC_REPL_ARG_B_SHIFT) |
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_2,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_ZERO |
			      R200_TXA_COMP_ARG_C |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_2,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);

		/* shader constants */
		OUT_ACCEL_REG(R200_PP_TFACTOR_0, float4touint(1.0, /* src range [1, 2] */
							      yco - 1.0,
							      -yoff, /* range [-1, 0] */
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_1, float4touint(uco[0] * 0.125 + 0.5, /* range [-4, 4] */
							      uco[1] * 0.125 + 0.5,
							      uco[2] * 0.125 + 0.5,
							      0.0));
		OUT_ACCEL_REG(R200_PP_TFACTOR_2, float4touint(vco[0] * 0.25 + 0.5, /* range [-2, 2] */
							      vco[1] * 0.25 + 0.5,
							      vco[2] * 0.25 + 0.5,
							      0.0));
d877 97
a973 43
		FINISH_ACCEL();
	    }
	    else {
		BEGIN_ACCEL(13);
		OUT_ACCEL_REG(RADEON_PP_CNTL,
			      RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);

		OUT_ACCEL_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
		OUT_ACCEL_REG(R200_SE_VTX_FMT_1,
			      (2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

		OUT_ACCEL_REG(R200_PP_TXFILTER_0,
			      R200_MAG_FILTER_LINEAR |
			      R200_MIN_FILTER_LINEAR |
			      R200_CLAMP_S_CLAMP_LAST |
			      R200_CLAMP_T_CLAMP_LAST |
			      R200_YUV_TO_RGB);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_0, txformat);
		OUT_ACCEL_REG(R200_PP_TXFORMAT_X_0, 0);
		OUT_ACCEL_REG(R200_PP_TXSIZE_0,
			      (pPriv->w - 1) |
			      ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
		OUT_ACCEL_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);

		OUT_ACCEL_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

		OUT_ACCEL_REG(R200_PP_TXCBLEND_0,
			      R200_TXC_ARG_A_ZERO |
			      R200_TXC_ARG_B_ZERO |
			      R200_TXC_ARG_C_R0_COLOR |
			      R200_TXC_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXCBLEND2_0,
			      R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
		OUT_ACCEL_REG(R200_PP_TXABLEND_0,
			      R200_TXA_ARG_A_ZERO |
			      R200_TXA_ARG_B_ZERO |
			      R200_TXA_ARG_C_R0_ALPHA |
			      R200_TXA_OP_MADD);
		OUT_ACCEL_REG(R200_PP_TXABLEND2_0,
			      R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);
		FINISH_ACCEL();
	    }
	} else {
d975 2
a976 2
	    info->accel_state->texW[0] = 1;
	    info->accel_state->texH[0] = 1;
d978 5
a982 37
	    BEGIN_ACCEL(9);

	    OUT_ACCEL_REG(RADEON_PP_CNTL,
			  RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);

	    OUT_ACCEL_REG(RADEON_SE_VTX_FMT, (RADEON_SE_VTX_FMT_XY |
					      RADEON_SE_VTX_FMT_ST0));

	    OUT_ACCEL_REG(RADEON_PP_TXFILTER_0,
			  RADEON_MAG_FILTER_LINEAR |
			  RADEON_MIN_FILTER_LINEAR |
			  RADEON_CLAMP_S_CLAMP_LAST |
			  RADEON_CLAMP_T_CLAMP_LAST |
			  RADEON_YUV_TO_RGB);
	    OUT_ACCEL_REG(RADEON_PP_TXFORMAT_0, txformat);
	    OUT_ACCEL_REG(RADEON_PP_TXOFFSET_0, pPriv->src_offset);
	    OUT_ACCEL_REG(RADEON_PP_TXCBLEND_0,
			  RADEON_COLOR_ARG_A_ZERO |
			  RADEON_COLOR_ARG_B_ZERO |
			  RADEON_COLOR_ARG_C_T0_COLOR |
			  RADEON_BLEND_CTL_ADD |
			  RADEON_CLAMP_TX);
	    OUT_ACCEL_REG(RADEON_PP_TXABLEND_0,
			  RADEON_ALPHA_ARG_A_ZERO |
			  RADEON_ALPHA_ARG_B_ZERO |
			  RADEON_ALPHA_ARG_C_T0_ALPHA |
			  RADEON_BLEND_CTL_ADD |
			  RADEON_CLAMP_TX);

	    OUT_ACCEL_REG(RADEON_PP_TEX_SIZE_0,
			  (pPriv->w - 1) |
			  ((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	    OUT_ACCEL_REG(RADEON_PP_TEX_PITCH_0,
			  pPriv->src_pitch - 32);
	    FINISH_ACCEL();
	}
    }
d985 10
a994 8
	xf86CrtcPtr crtc = radeon_xv_pick_best_crtc(pScrn,
						    pPriv->drw_x,
						    pPriv->drw_x + pPriv->dst_w,
						    pPriv->drw_y,
						    pPriv->drw_y + pPriv->dst_h);
	if (crtc) {
	    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;

d996 1
a996 1
					  radeon_crtc->crtc_id,
a998 1
	}
d1000 25
d1041 1
a1041 1
     *     the single triangle up to 2880 pixels; above that we
d1045 77
a1124 1
	Bool use_quad = FALSE;
d1130 6
a1135 4
	srcX = ((pBox->x1 - pPriv->drw_x) *
		pPriv->src_w) / pPriv->dst_w;
	srcY = ((pBox->y1 - pPriv->drw_y) *
		pPriv->src_h) / pPriv->dst_h;
d1140 1370
a2509 3
#if 0
	ErrorF("dst: %d, %d, %d, %d\n", dstX, dstY, dstw, dsth);
	ErrorF("src: %d, %d, %d, %d\n", srcX, srcY, srcw, srch);
d2512 20
a2531 2
	if (IS_R300_3D || IS_R500_3D) {
	    if (IS_R300_3D && ((dstw+dsth) > 2880))
a2532 17
	    /*
	     * Set up the scissor area to that of the output size.
	     */
	    BEGIN_ACCEL(2);
	    if (IS_R300_3D) {
		/* R300 has an offset */
		OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX + 1088) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + 1088) << R300_SCISSOR_Y_SHIFT)));
		OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw + 1088 - 1) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + dsth + 1088 - 1) << R300_SCISSOR_Y_SHIFT)));
	    } else {
		OUT_ACCEL_REG(R300_SC_SCISSOR0, (((dstX) << R300_SCISSOR_X_SHIFT) |
						 ((dstY) << R300_SCISSOR_Y_SHIFT)));
		OUT_ACCEL_REG(R300_SC_SCISSOR1, (((dstX + dstw - 1) << R300_SCISSOR_X_SHIFT) |
						 ((dstY + dsth - 1) << R300_SCISSOR_Y_SHIFT)));
	    }
	    FINISH_ACCEL();
d2534 10
d2546 5
a2550 7
	if (info->ChipFamily < CHIP_FAMILY_R200) {
	    BEGIN_RING(3 * vtx_count + 3);
	    OUT_RING(CP_PACKET3(RADEON_CP_PACKET3_3D_DRAW_IMMD,
				3 * vtx_count + 1));
	    OUT_RING(RADEON_CP_VC_FRMT_XY |
		     RADEON_CP_VC_FRMT_ST0);
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
d2552 1
a2552 19
		     RADEON_CP_VC_CNTL_MAOS_ENABLE |
		     RADEON_CP_VC_CNTL_VTX_FMT_RADEON_MODE |
		     (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	} else if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad) {
		BEGIN_RING(4 * vtx_count + 4);
		OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				    4 * vtx_count));
		OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_QUAD_LIST |
			 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
			 (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	    } else {
		BEGIN_RING(3 * vtx_count + 4);
		OUT_RING(CP_PACKET3(R200_CP_PACKET3_3D_DRAW_IMMD_2,
				    3 * vtx_count));
		OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_LIST |
			 RADEON_CP_VC_CNTL_PRIM_WALK_RING |
			 (3 << RADEON_CP_VC_CNTL_NUM_SHIFT));
	    }
d2554 1
a2554 1
	    BEGIN_RING(3 * vtx_count + 2);
d2556 2
a2557 2
				3 * vtx_count));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_RECT_LIST |
d2562 4
a2565 7
	if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad)
		BEGIN_ACCEL(2 + vtx_count * 4);
	    else
		BEGIN_ACCEL(2 + vtx_count * 3);
	} else
	    BEGIN_ACCEL(1 + vtx_count * 3);
d2567 2
a2568 2
	if (info->ChipFamily < CHIP_FAMILY_R200)
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
d2570 3
a2572 13
					      RADEON_VF_RADEON_MODE |
					      (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
	else if (IS_R300_3D || IS_R500_3D) {
	    if (use_quad)
		OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_QUAD_LIST |
						  RADEON_VF_PRIM_WALK_DATA |
						  (4 << RADEON_VF_NUM_VERTICES_SHIFT)));
	    else
		OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_LIST |
						  RADEON_VF_PRIM_WALK_DATA |
						  (3 << RADEON_VF_NUM_VERTICES_SHIFT)));
	} else
	    OUT_ACCEL_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_RECTANGLE_LIST |
a2574 1

d2582 12
a2593 12
		VTX_OUT_FILTER((float)dstX,                                       (float)dstY,
			       (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + 0.5);
		VTX_OUT_FILTER((float)dstX,                                       (float)(dstY + dsth),
			       (float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)(srcY + srch) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw),                              (float)(dstY + dsth),
			       (float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0],
			       (float)(srcX + srcw) + 0.5,                        (float)(srcY + srch) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw),                              (float)dstY,
			       (float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0],
			       (float)(srcX + srcw) + 0.5,                        (float)srcY + 0.5);
d2595 13
a2607 11
		VTX_OUT_FILTER((float)dstX,                                       (float)dstY,
			       (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + 0.5);
		VTX_OUT_FILTER((float)dstX,                                       (float)(dstY + dstw + dsth),
			       (float)srcX / info->accel_state->texW[0],          ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / info->accel_state->texH[0],
			       (float)srcX + 0.5,                                 (float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0) + 0.5);
		VTX_OUT_FILTER((float)(dstX + dstw + dsth),                       (float)dstY,
			       ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / info->accel_state->texW[0],
			                                                          (float)srcY / info->accel_state->texH[0],
			       (float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0) + 0.5,
			                                                          (float)srcY + 0.5);
d2610 9
a2618 39
	    if (IS_R300_3D || IS_R500_3D) {
		if (use_quad) {
		    VTX_OUT((float)dstX,                                       (float)dstY,
			    (float)srcX / info->accel_state->texW[0],          (float)srcY / info->accel_state->texH[0]);
		    VTX_OUT((float)dstX,                                       (float)(dstY + dsth),
			    (float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		    VTX_OUT((float)(dstX + dstw),                              (float)(dstY + dsth),
			    (float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		    VTX_OUT((float)(dstX + dstw),                              (float)dstY,
			    (float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
		} else {
		    /*
		     * Render a big, scissored triangle. This means
		     * increasing the triangle size and adjusting
		     * texture coordinates.
		     */
		    VTX_OUT((float)dstX,                              (float)dstY,
			    (float)srcX / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
		    VTX_OUT((float)dstX,                              (float)(dstY + dsth + dstw),
			    (float)srcX / info->accel_state->texW[0], ((float)srcY + (float)srch * (((float)dstw / (float)dsth) + 1.0)) / info->accel_state->texH[0]);
			    
		    VTX_OUT((float)(dstX + dstw + dsth),              (float)dstY,
			    ((float)srcX + (float)srcw * (((float)dsth / (float)dstw) + 1.0)) / info->accel_state->texW[0],
			                                              (float)srcY / info->accel_state->texH[0]);
		}
	    } else if (isplanar) {
		/*
		 * Just render a rect (using three coords).
		 * Filter is a bit a misnomer, it's just texcoords...
		 */
		VTX_OUT_FILTER((float)dstX,                                (float)(dstY + dsth),
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0],
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT_FILTER((float)(dstX + dstw),                       (float)(dstY + dsth),
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0],
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT_FILTER((float)(dstX + dstw),                       (float)dstY,
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0],
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
d2621 3
a2623 1
		 * Just render a rect (using three coords).
d2625 8
a2632 6
		VTX_OUT((float)dstX,                                       (float)(dstY + dsth),
			(float)srcX / info->accel_state->texW[0],          (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT((float)(dstX + dstw),                              (float)(dstY + dsth),
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)(srcY + srch) / info->accel_state->texH[0]);
		VTX_OUT((float)(dstX + dstw),                              (float)dstY,
			(float)(srcX + srcw) / info->accel_state->texW[0], (float)srcY / info->accel_state->texH[0]);
d2636 2
a2637 3
	if (IS_R300_3D || IS_R500_3D)
	    /* flushing is pipelined, free/finish is not */
	    OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
d2648 58
a2705 4
    if (IS_R300_3D || IS_R500_3D) {
	BEGIN_ACCEL(3);
	OUT_ACCEL_REG(R300_SC_CLIP_RULE, 0xAAAA);
	OUT_ACCEL_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
d2707 1510
a4216 1
	BEGIN_ACCEL(1);
d4223 2
a4224 2
#undef VTX_OUT
#undef VTX_OUT_FILTER
@


1.1
log
@Long awaited update of xf86-video-ati to 6.9.0.

the rage128 and mach64 drivers were split out of this driver just after
the 6.8.0 release, these drivers will be commited separately.

MergedFb mode is gone, so please use xrandr if you used to use it.

ok matthieu@@.
@
text
@d48 1
a48 1
#define VTX_DWORD_COUNT 4
d50 9
a58 1
#ifdef ACCEL_CP
d62 4
a65 4
    OUT_VIDEO_RING_F(_dstX);						\
    OUT_VIDEO_RING_F(_dstY);						\
    OUT_VIDEO_RING_F(_srcX);						\
    OUT_VIDEO_RING_F(_srcY);						\
d70 10
d82 4
a85 4
    OUT_VIDEO_REG_F(RADEON_SE_PORT_DATA0, _dstX);		\
    OUT_VIDEO_REG_F(RADEON_SE_PORT_DATA0, _dstY);		\
    OUT_VIDEO_REG_F(RADEON_SE_PORT_DATA0, _srcX);		\
    OUT_VIDEO_REG_F(RADEON_SE_PORT_DATA0, _srcY);		\
d100 2
a101 1
    int dstxoff, dstyoff, pixel_shift;
d104 1
a104 1
    VIDEO_PREAMBLE();
d128 22
a149 2
    if (!info->XInited3D)
	RADEONInit3DEngine(pScrn);
d151 2
a152 4
    /* we can probably improve this */
    BEGIN_VIDEO(2);
    if (IS_R300_3D || IS_R500_3D)
	OUT_VIDEO_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
d154 1
a154 8
	OUT_VIDEO_REG(RADEON_RB3D_DSTCACHE_CTLSTAT, RADEON_RB3D_DC_FLUSH);
    /* We must wait for 3d to idle, in case source was just written as a dest. */
    OUT_VIDEO_REG(RADEON_WAIT_UNTIL,
		  RADEON_WAIT_HOST_IDLECLEAN |
		  RADEON_WAIT_2D_IDLECLEAN |
		  RADEON_WAIT_3D_IDLECLEAN |
		  RADEON_WAIT_DMA_GUI_IDLE);
    FINISH_VIDEO();
d185 14
a198 4
	if (pPriv->id == FOURCC_UYVY)
	    txformat1 = R300_TX_FORMAT_YVYU422;
	else
	    txformat1 = R300_TX_FORMAT_VYUY422;
d200 4
a203 1
	txformat1 |= R300_TX_FORMAT_YUV_TO_RGB_CLAMP;
d206 2
a207 3
		     (((pPriv->h - 1) & 0x7ff) << R300_TXHEIGHT_SHIFT));

	txformat0 |= R300_TXPITCH_EN;
d209 2
a210 2
	info->texW[0] = pPriv->w;
	info->texH[0] = pPriv->h;
d214 3
a216 1
		    R300_TX_MAG_FILTER_LINEAR | R300_TX_MIN_FILTER_LINEAR);
a217 3
	/* pitch is in pixels */
	txpitch = pPriv->src_pitch / 2;
	txpitch -= 1;
d227 8
a234 8
	BEGIN_VIDEO(6);
	OUT_VIDEO_REG(R300_TX_FILTER0_0, txfilter);
	OUT_VIDEO_REG(R300_TX_FILTER1_0, 0);
	OUT_VIDEO_REG(R300_TX_FORMAT0_0, txformat0);
	OUT_VIDEO_REG(R300_TX_FORMAT1_0, txformat1);
	OUT_VIDEO_REG(R300_TX_FORMAT2_0, txpitch);
	OUT_VIDEO_REG(R300_TX_OFFSET_0, txoffset);
	FINISH_VIDEO();
d238 57
d296 11
a306 4
	if (info->has_tcl)
	    BEGIN_VIDEO(6);
	else
	    BEGIN_VIDEO(4);
d321 28
a348 10
	OUT_VIDEO_REG(R300_VAP_PROG_STREAM_CNTL_0,
		      ((R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_0_SHIFT) |
		       (0 << R300_SKIP_DWORDS_0_SHIFT) |
		       (0 << R300_DST_VEC_LOC_0_SHIFT) |
		       R300_SIGNED_0 |
		       (R300_DATA_TYPE_FLOAT_2 << R300_DATA_TYPE_1_SHIFT) |
		       (0 << R300_SKIP_DWORDS_1_SHIFT) |
		       (6 << R300_DST_VEC_LOC_1_SHIFT) |
		       R300_LAST_VEC_1 |
		       R300_SIGNED_1));
d352 1
a353 1
	 * - exa mask
d357 16
a372 7
	if (info->has_tcl) {
	    OUT_VIDEO_REG(R300_VAP_PVS_CODE_CNTL_0,
			  ((5 << R300_PVS_FIRST_INST_SHIFT) |
			   (6 << R300_PVS_XYZW_VALID_INST_SHIFT) |
			   (6 << R300_PVS_LAST_INST_SHIFT)));
	    OUT_VIDEO_REG(R300_VAP_PVS_CODE_CNTL_1,
			  (6 << R300_PVS_LAST_VTX_SRC_INST_SHIFT));
d376 9
a384 4
	OUT_VIDEO_REG(R300_VAP_OUT_VTX_FMT_0, R300_VTX_POS_PRESENT);
	OUT_VIDEO_REG(R300_VAP_OUT_VTX_FMT_1, (2 << R300_TEX_0_COMP_CNT_SHIFT));
	OUT_VIDEO_REG(R300_US_OUT_FMT_0, output_fmt);
	FINISH_VIDEO();
d388 382
a769 3
	    BEGIN_VIDEO(8);
	    /* 2 components: 2 for tex0 */
	    OUT_VIDEO_REG(R300_RS_COUNT,
d772 2
a773 2
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_VIDEO_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d775 127
a901 60
	    OUT_VIDEO_REG(R300_US_CODE_OFFSET,
			  (R300_ALU_CODE_OFFSET(0) |
			   R300_ALU_CODE_SIZE(1) |
			   R300_TEX_CODE_OFFSET(0) |
			   R300_TEX_CODE_SIZE(1)));

	    OUT_VIDEO_REG(R300_US_CODE_ADDR_3,
			  (R300_ALU_START(0) |
			   R300_ALU_SIZE(0) |
			   R300_TEX_START(0) |
			   R300_TEX_SIZE(0) |
			   R300_RGBA_OUT));

	    /* tex inst is preloaded in RADEONInit3DEngine() */

	    /* ALU inst */
	    /* RGB */
	    OUT_VIDEO_REG(R300_US_ALU_RGB_ADDR_0,
			  (R300_ALU_RGB_ADDR0(0) |
			   R300_ALU_RGB_ADDR1(0) |
			   R300_ALU_RGB_ADDR2(0) |
			   R300_ALU_RGB_ADDRD(0) |
			   R300_ALU_RGB_OMASK((R300_ALU_RGB_MASK_R |
					       R300_ALU_RGB_MASK_G |
					       R300_ALU_RGB_MASK_B)) |
			   R300_ALU_RGB_TARGET_A));
	    OUT_VIDEO_REG(R300_US_ALU_RGB_INST_0,
			  (R300_ALU_RGB_SEL_A(R300_ALU_RGB_SRC0_RGB) |
			   R300_ALU_RGB_MOD_A(R300_ALU_RGB_MOD_NOP) |
			   R300_ALU_RGB_SEL_B(R300_ALU_RGB_1_0) |
			   R300_ALU_RGB_MOD_B(R300_ALU_RGB_MOD_NOP) |
			   R300_ALU_RGB_SEL_C(R300_ALU_RGB_0_0) |
			   R300_ALU_RGB_MOD_C(R300_ALU_RGB_MOD_NOP) |
			   R300_ALU_RGB_OP(R300_ALU_RGB_OP_MAD) |
			   R300_ALU_RGB_OMOD(R300_ALU_RGB_OMOD_NONE) |
			   R300_ALU_RGB_CLAMP));
	    /* Alpha */
	    OUT_VIDEO_REG(R300_US_ALU_ALPHA_ADDR_0,
			  (R300_ALU_ALPHA_ADDR0(0) |
			   R300_ALU_ALPHA_ADDR1(0) |
			   R300_ALU_ALPHA_ADDR2(0) |
			   R300_ALU_ALPHA_ADDRD(0) |
			   R300_ALU_ALPHA_OMASK(R300_ALU_ALPHA_MASK_A) |
			   R300_ALU_ALPHA_TARGET_A |
			   R300_ALU_ALPHA_OMASK_W(R300_ALU_ALPHA_MASK_NONE)));
	    OUT_VIDEO_REG(R300_US_ALU_ALPHA_INST_0,
			  (R300_ALU_ALPHA_SEL_A(R300_ALU_ALPHA_SRC0_A) |
			   R300_ALU_ALPHA_MOD_A(R300_ALU_ALPHA_MOD_NOP) |
			   R300_ALU_ALPHA_SEL_B(R300_ALU_ALPHA_1_0) |
			   R300_ALU_ALPHA_MOD_B(R300_ALU_ALPHA_MOD_NOP) |
			   R300_ALU_ALPHA_SEL_C(R300_ALU_ALPHA_0_0) |
			   R300_ALU_ALPHA_MOD_C(R300_ALU_ALPHA_MOD_NOP) |
			   R300_ALU_ALPHA_OP(R300_ALU_ALPHA_OP_MAD) |
			   R300_ALU_ALPHA_OMOD(R300_ALU_ALPHA_OMOD_NONE) |
			   R300_ALU_ALPHA_CLAMP));
	    FINISH_VIDEO();
	} else {
	    BEGIN_VIDEO(18);
	    /* 2 components: 2 for tex0 */
	    OUT_VIDEO_REG(R300_RS_COUNT,
d904 2
d907 631
a1537 2
	    /* R300_INST_COUNT_RS - highest RS instruction used */
	    OUT_VIDEO_REG(R300_RS_INST_COUNT, R300_INST_COUNT_RS(0) | R300_TX_OFFSET_RS(6));
d1539 3
a1541 89
	    OUT_VIDEO_REG(R500_US_CODE_ADDR, (R500_US_CODE_START_ADDR(0) |
					      R500_US_CODE_END_ADDR(1)));
	    OUT_VIDEO_REG(R500_US_CODE_RANGE, (R500_US_CODE_RANGE_ADDR(0) |
					       R500_US_CODE_RANGE_SIZE(1)));
	    OUT_VIDEO_REG(R500_US_CODE_OFFSET, 0);
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_INDEX, 0);

	    /* tex inst */
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_TEX |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_RGB_WMASK_R |
						   R500_INST_RGB_WMASK_G |
						   R500_INST_RGB_WMASK_B |
						   R500_INST_ALPHA_WMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_ID(0) |
						   R500_TEX_INST_LD |
						   R500_TEX_SEM_ACQUIRE |
						   R500_TEX_IGNORE_UNCOVERED));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_TEX_SRC_ADDR(0) |
						   R500_TEX_SRC_S_SWIZ_R |
						   R500_TEX_SRC_T_SWIZ_G |
						   R500_TEX_DST_ADDR(0) |
						   R500_TEX_DST_R_SWIZ_R |
						   R500_TEX_DST_G_SWIZ_G |
						   R500_TEX_DST_B_SWIZ_B |
						   R500_TEX_DST_A_SWIZ_A));
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_DX_ADDR(0) |
						   R500_DX_S_SWIZ_R |
						   R500_DX_T_SWIZ_R |
						   R500_DX_R_SWIZ_R |
						   R500_DX_Q_SWIZ_R |
						   R500_DY_ADDR(0) |
						   R500_DY_S_SWIZ_R |
						   R500_DY_T_SWIZ_R |
						   R500_DY_R_SWIZ_R |
						   R500_DY_Q_SWIZ_R));
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, 0x00000000);
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, 0x00000000);

	    /* ALU inst */
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_INST_TYPE_OUT |
						   R500_INST_TEX_SEM_WAIT |
						   R500_INST_LAST |
						   R500_INST_RGB_OMASK_R |
						   R500_INST_RGB_OMASK_G |
						   R500_INST_RGB_OMASK_B |
						   R500_INST_ALPHA_OMASK |
						   R500_INST_RGB_CLAMP |
						   R500_INST_ALPHA_CLAMP));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_RGB_ADDR0(0) |
						   R500_RGB_ADDR1(0) |
						   R500_RGB_ADDR1_CONST |
						   R500_RGB_ADDR2(0) |
						   R500_RGB_ADDR2_CONST));
	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_ADDR0(0) |
						   R500_ALPHA_ADDR1(0) |
						   R500_ALPHA_ADDR1_CONST |
						   R500_ALPHA_ADDR2(0) |
						   R500_ALPHA_ADDR2_CONST));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGB_SEL_A_SRC0 |
						   R500_ALU_RGB_R_SWIZ_A_R |
						   R500_ALU_RGB_G_SWIZ_A_G |
						   R500_ALU_RGB_B_SWIZ_A_B |
						   R500_ALU_RGB_SEL_B_SRC0 |
						   R500_ALU_RGB_R_SWIZ_B_1 |
						   R500_ALU_RGB_B_SWIZ_B_1 |
						   R500_ALU_RGB_G_SWIZ_B_1));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_ALPHA_OP_MAD |
						   R500_ALPHA_SWIZ_A_A |
						   R500_ALPHA_SWIZ_B_1));

	    OUT_VIDEO_REG(R500_GA_US_VECTOR_DATA, (R500_ALU_RGBA_OP_MAD |
						   R500_ALU_RGBA_R_SWIZ_0 |
						   R500_ALU_RGBA_G_SWIZ_0 |
						   R500_ALU_RGBA_B_SWIZ_0 |
						   R500_ALU_RGBA_A_SWIZ_0));
	    FINISH_VIDEO();
	}

	BEGIN_VIDEO(5);
	OUT_VIDEO_REG(R300_TX_INVALTAGS, 0);
	OUT_VIDEO_REG(R300_TX_ENABLE, txenable);
d1543 2
a1544 2
	OUT_VIDEO_REG(R300_RB3D_COLOROFFSET0, dst_offset);
	OUT_VIDEO_REG(R300_RB3D_COLORPITCH0, colorpitch);
d1548 1
a1548 2
	OUT_VIDEO_REG(R300_RB3D_BLENDCNTL, blendcntl);
	FINISH_VIDEO();
d1550 2
a1551 3
	BEGIN_VIDEO(1);
	OUT_VIDEO_REG(R300_VAP_VTX_SIZE, VTX_DWORD_COUNT);
	FINISH_VIDEO();
d1570 12
a1581 4
	if (pPriv->id == FOURCC_UYVY)
	    txformat = RADEON_TXFORMAT_YVYU422;
	else
	    txformat = RADEON_TXFORMAT_VYUY422;
d1590 1
a1590 1
	BEGIN_VIDEO(5);
d1592 3
a1594 5
	OUT_VIDEO_REG(RADEON_PP_CNTL,
		    RADEON_TEX_0_ENABLE | RADEON_TEX_BLEND_0_ENABLE);
	OUT_VIDEO_REG(RADEON_RB3D_CNTL,
		    dst_format | RADEON_ALPHA_BLEND_ENABLE);
	OUT_VIDEO_REG(RADEON_RB3D_COLOROFFSET, dst_offset);
d1596 1
a1596 1
	OUT_VIDEO_REG(RADEON_RB3D_COLORPITCH, colorpitch);
d1598 2
a1599 2
	OUT_VIDEO_REG(RADEON_RB3D_BLENDCNTL,
		    RADEON_SRC_BLEND_GL_ONE | RADEON_DST_BLEND_GL_ZERO);
d1601 1
a1601 1
	FINISH_VIDEO();
d1609 2
a1610 2
	    info->texW[0] = pPriv->w;
	    info->texH[0] = pPriv->h;
d1612 332
a1943 1
	    BEGIN_VIDEO(12);
d1945 2
a1946 33
	    OUT_VIDEO_REG(R200_SE_VTX_FMT_0, R200_VTX_XY);
	    OUT_VIDEO_REG(R200_SE_VTX_FMT_1,
			(2 << R200_VTX_TEX0_COMP_CNT_SHIFT));

	    OUT_VIDEO_REG(R200_PP_TXFILTER_0,
			R200_MAG_FILTER_LINEAR |
			R200_MIN_FILTER_LINEAR |
			R200_YUV_TO_RGB);
	    OUT_VIDEO_REG(R200_PP_TXFORMAT_0, txformat);
	    OUT_VIDEO_REG(R200_PP_TXFORMAT_X_0, 0);
	    OUT_VIDEO_REG(R200_PP_TXSIZE_0,
			(pPriv->w - 1) |
			((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	    OUT_VIDEO_REG(R200_PP_TXPITCH_0, pPriv->src_pitch - 32);

	    OUT_VIDEO_REG(R200_PP_TXOFFSET_0, pPriv->src_offset);

	    OUT_VIDEO_REG(R200_PP_TXCBLEND_0,
			R200_TXC_ARG_A_ZERO |
			R200_TXC_ARG_B_ZERO |
			R200_TXC_ARG_C_R0_COLOR |
			R200_TXC_OP_MADD);
	    OUT_VIDEO_REG(R200_PP_TXCBLEND2_0,
			R200_TXC_CLAMP_0_1 | R200_TXC_OUTPUT_REG_R0);
	    OUT_VIDEO_REG(R200_PP_TXABLEND_0,
			R200_TXA_ARG_A_ZERO |
			R200_TXA_ARG_B_ZERO |
			R200_TXA_ARG_C_R0_ALPHA |
			R200_TXA_OP_MADD);
	    OUT_VIDEO_REG(R200_PP_TXABLEND2_0,
			R200_TXA_CLAMP_0_1 | R200_TXA_OUTPUT_REG_R0);
	    FINISH_VIDEO();
	} else {
d1948 1
a1948 2
	    info->texW[0] = 1;
	    info->texH[0] = 1;
d1950 2
a1951 1
	    BEGIN_VIDEO(8);
d1953 32
a1984 2
	    OUT_VIDEO_REG(RADEON_SE_VTX_FMT, RADEON_SE_VTX_FMT_XY |
			RADEON_SE_VTX_FMT_ST0);
d1986 13
a1998 24
	    OUT_VIDEO_REG(RADEON_PP_TXFILTER_0, RADEON_MAG_FILTER_LINEAR |
			RADEON_MIN_FILTER_LINEAR |
			RADEON_YUV_TO_RGB);
	    OUT_VIDEO_REG(RADEON_PP_TXFORMAT_0, txformat);
	    OUT_VIDEO_REG(RADEON_PP_TXOFFSET_0, pPriv->src_offset);
	    OUT_VIDEO_REG(RADEON_PP_TXCBLEND_0,
			RADEON_COLOR_ARG_A_ZERO |
			RADEON_COLOR_ARG_B_ZERO |
			RADEON_COLOR_ARG_C_T0_COLOR |
			RADEON_BLEND_CTL_ADD |
			RADEON_CLAMP_TX);
	    OUT_VIDEO_REG(RADEON_PP_TXABLEND_0,
			RADEON_ALPHA_ARG_A_ZERO |
			RADEON_ALPHA_ARG_B_ZERO |
			RADEON_ALPHA_ARG_C_T0_ALPHA |
			RADEON_BLEND_CTL_ADD |
			RADEON_CLAMP_TX);

	    OUT_VIDEO_REG(RADEON_PP_TEX_SIZE_0,
			(pPriv->w - 1) |
			((pPriv->h - 1) << RADEON_TEX_VSIZE_SHIFT));
	    OUT_VIDEO_REG(RADEON_PP_TEX_PITCH_0,
			pPriv->src_pitch - 32);
	    FINISH_VIDEO();
d2001 19
d2024 1
a2024 1
	xPointFixed srcTopLeft, srcTopRight, srcBottomLeft, srcBottomRight;
a2037 10
	srcTopLeft.x     = IntToxFixed(srcX);
	srcTopLeft.y     = IntToxFixed(srcY);
	srcTopRight.x    = IntToxFixed(srcX + srcw);
	srcTopRight.y    = IntToxFixed(srcY);
	srcBottomLeft.x  = IntToxFixed(srcX);
	srcBottomLeft.y  = IntToxFixed(srcY + srch);
	srcBottomRight.x = IntToxFixed(srcX + srcw);
	srcBottomRight.y = IntToxFixed(srcY + srch);


d2043 22
d2067 1
a2067 1
	    BEGIN_RING(4 * VTX_DWORD_COUNT + 3);
d2069 1
a2069 1
				4 * VTX_DWORD_COUNT + 1));
d2072 1
a2072 1
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_FAN |
d2076 17
a2092 1
		     (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
d2094 1
a2094 4
	    if (IS_R300_3D || IS_R500_3D)
		BEGIN_RING(4 * VTX_DWORD_COUNT + 4);
	    else
		BEGIN_RING(4 * VTX_DWORD_COUNT + 2);
d2096 2
a2097 2
				4 * VTX_DWORD_COUNT));
	    OUT_RING(RADEON_CP_VC_CNTL_PRIM_TYPE_TRI_FAN |
d2099 1
a2099 1
		     (4 << RADEON_CP_VC_CNTL_NUM_SHIFT));
d2102 7
a2108 4
	if (IS_R300_3D || IS_R500_3D)
	    BEGIN_VIDEO(2 + VTX_DWORD_COUNT * 4);
	else
	    BEGIN_VIDEO(1 + VTX_DWORD_COUNT * 4);
d2110 2
a2111 2
	if (info->ChipFamily < CHIP_FAMILY_R200) {
	    OUT_VIDEO_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_TRIANGLE_FAN |
d2114 47
a2160 1
					      4 << RADEON_VF_NUM_VERTICES_SHIFT));
d2162 50
a2211 3
	    OUT_VIDEO_REG(RADEON_SE_VF_CNTL, (RADEON_VF_PRIM_TYPE_QUAD_LIST |
					      RADEON_VF_PRIM_WALK_DATA |
					      4 << RADEON_VF_NUM_VERTICES_SHIFT));
a2212 10
#endif

	VTX_OUT((float)dstX,                                      (float)dstY,
		xFixedToFloat(srcTopLeft.x) / info->texW[0],      xFixedToFloat(srcTopLeft.y) / info->texH[0]);
	VTX_OUT((float)dstX,                                      (float)(dstY + dsth),
		xFixedToFloat(srcBottomLeft.x) / info->texW[0],   xFixedToFloat(srcBottomLeft.y) / info->texH[0]);
	VTX_OUT((float)(dstX + dstw),                                (float)(dstY + dsth),
		xFixedToFloat(srcBottomRight.x) / info->texW[0],  xFixedToFloat(srcBottomRight.y) / info->texH[0]);
	VTX_OUT((float)(dstX + dstw),                                (float)dstY,
		xFixedToFloat(srcTopRight.x) / info->texW[0],     xFixedToFloat(srcTopRight.y) / info->texH[0]);
d2216 1
a2216 1
	    OUT_VIDEO_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_DC_FLUSH_3D);
d2221 1
a2221 1
	FINISH_VIDEO();
d2228 3
a2230 2
	BEGIN_VIDEO(2);
	OUT_VIDEO_REG(R300_RB3D_DSTCACHE_CTLSTAT, R300_RB3D_DC_FLUSH_ALL);
d2232 3
a2234 3
	BEGIN_VIDEO(1);
    OUT_VIDEO_REG(RADEON_WAIT_UNTIL, RADEON_WAIT_3D_IDLECLEAN);
    FINISH_VIDEO();
d2240 1
@

