head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.16
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.14
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.08.16.17.04.07;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.07.20.55.34;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.03.04.16.01.19;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.06.22.53.12;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.25.21.33.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@#ifndef __R600_STATE_H__
#define __R600_STATE_H__


#include "xf86drm.h"

typedef int bool_t;

#define CLEAR(x) memset (&x, 0, sizeof(x))

/* Sequencer / thread handling */
typedef struct {
    int ps_prio;
    int vs_prio;
    int gs_prio;
    int es_prio;
    int num_ps_gprs;
    int num_vs_gprs;
    int num_gs_gprs;
    int num_es_gprs;
    int num_temp_gprs;
    int num_ps_threads;
    int num_vs_threads;
    int num_gs_threads;
    int num_es_threads;
    int num_ps_stack_entries;
    int num_vs_stack_entries;
    int num_gs_stack_entries;
    int num_es_stack_entries;
} sq_config_t;

/* Color buffer / render target */
typedef struct {
    int id;
    int w;
    int h;
    uint64_t base;
    int format;
    int endian;
    int array_mode;						// tiling
    int number_type;
    int read_size;
    int comp_swap;
    int tile_mode;
    int blend_clamp;
    int clear_color;
    int blend_bypass;
    int blend_float32;
    int simple_float;
    int round_mode;
    int tile_compact;
    int source_format;
    /* 2D related CB state */
    uint32_t pmask;
    int rop;
    int blend_enable;
    uint32_t blendcntl;
    struct radeon_bo *bo;
    struct radeon_surface *surface;
} cb_config_t;

/* Depth buffer */
typedef struct {
    int w;
    int h;
    uint64_t base;
    int format;
    int read_size;
    int array_mode;						// tiling
    int tile_surface_en;
    int tile_compact;
    int zrange_precision;
    struct radeon_bo *bo;
} db_config_t;

/* Shader */
typedef struct {
    uint64_t shader_addr;
    uint32_t shader_size;
    int num_gprs;
    int stack_size;
    int dx10_clamp;
    int prime_cache_pgm_en;
    int prime_cache_on_draw;
    int fetch_cache_lines;
    int prime_cache_en;
    int prime_cache_on_const;
    int clamp_consts;
    int export_mode;
    int uncached_first_inst;
    struct radeon_bo *bo;
} shader_config_t;

/* Vertex buffer / vtx resource */
typedef struct {
    int id;
    uint64_t vb_addr;
    uint32_t vtx_num_entries;
    uint32_t vtx_size_dw;
    int clamp_x;
    int format;
    int num_format_all;
    int format_comp_all;
    int srf_mode_all;
    int endian;
    int mem_req_size;
    struct radeon_bo *bo;
} vtx_resource_t;

/* Texture resource */
typedef struct {
    int id;
    int w;
    int h;
    int pitch;
    int depth;
    int dim;
    int tile_mode;
    int tile_type;
    int format;
    uint64_t base;
    uint64_t mip_base;
    uint32_t size;
    int format_comp_x;
    int format_comp_y;
    int format_comp_z;
    int format_comp_w;
    int num_format_all;
    int srf_mode_all;
    int force_degamma;
    int endian;
    int request_size;
    int dst_sel_x;
    int dst_sel_y;
    int dst_sel_z;
    int dst_sel_w;
    int base_level;
    int last_level;
    int base_array;
    int last_array;
    int mpeg_clamp;
    int perf_modulation;
    int interlaced;
    struct radeon_bo *bo;
    struct radeon_bo *mip_bo;
    struct radeon_surface *surface;
} tex_resource_t;

/* Texture sampler */
typedef struct {
    int				id;
    /* Clamping */
    int				clamp_x, clamp_y, clamp_z;
    int		       		border_color;
    /* Filtering */
    int				xy_mag_filter, xy_min_filter;
    int				z_filter;
    int				mip_filter;
    bool_t			high_precision_filter;	/* ? */
    int				perf_mip;		/* ? 0-7 */
    int				perf_z;			/* ? 3 */
    /* LoD selection */
    int				min_lod, max_lod;	/* 0-0x3ff */
    int                         lod_bias;		/* 0-0xfff (signed?) */
    int                         lod_bias2;		/* ? 0-0xfff (signed?) */
    bool_t			lod_uses_minor_axis;	/* ? */
    /* Other stuff */
    bool_t			point_sampling_clamp;	/* ? */
    bool_t			tex_array_override;	/* ? */
    bool_t                      mc_coord_truncate;	/* ? */
    bool_t			force_degamma;		/* ? */
    bool_t			fetch_4;		/* ? */
    bool_t			sample_is_pcf;		/* ? */
    bool_t			type;			/* ? */
    int				depth_compare;		/* only depth textures? */
    int				chroma_key;
} tex_sampler_t;

/* Draw command */
typedef struct {
    uint32_t prim_type;
    uint32_t vgt_draw_initiator;
    uint32_t index_type;
    uint32_t num_instances;
    uint32_t num_indices;
} draw_config_t;

#define BEGIN_BATCH(n)				\
do {					\
    radeon_ddx_cs_start(pScrn, (n), __FILE__, __func__, __LINE__);	\
} while(0)
#define END_BATCH()				\
do {					\
    radeon_cs_end(info->cs, __FILE__, __func__, __LINE__);	\
} while(0)
#define RELOC_BATCH(bo, rd, wd)					\
do {							\
    int _ret;								\
    _ret = radeon_cs_write_reloc(info->cs, (bo), (rd), (wd), 0);	\
    if (_ret) ErrorF("reloc emit failure %d (%s %d)\n", _ret, __func__, __LINE__); \
} while(0)
#define E32(dword)                                                  \
do {                                                                    \
    radeon_cs_write_dword(info->cs, (dword));			\
} while (0)

#define EFLOAT(val)							\
do {								        \
    union { float f; uint32_t d; } a;                                   \
    a.f = (val);								\
    E32(a.d);							\
} while (0)

#define PACK3(cmd, num)	       					\
do {                                                                    \
    E32(RADEON_CP_PACKET3 | ((cmd) << 8) | ((((num) - 1) & 0x3fff) << 16)); \
} while (0)

/* write num registers, start at reg */
/* If register falls in a special area, special commands are issued */
#define PACK0(reg, num)                                             \
do {                                                                    \
    if ((reg) >= SET_CONFIG_REG_offset && (reg) < SET_CONFIG_REG_end) {	\
	PACK3(IT_SET_CONFIG_REG, (num) + 1);			\
	E32(((reg) - SET_CONFIG_REG_offset) >> 2);		\
    } else if ((reg) >= SET_CONTEXT_REG_offset && (reg) < SET_CONTEXT_REG_end) { \
	PACK3(IT_SET_CONTEXT_REG, (num) + 1);			\
	E32(((reg) - SET_CONTEXT_REG_offset) >> 2);		\
    } else if ((reg) >= SET_ALU_CONST_offset && (reg) < SET_ALU_CONST_end) { \
	PACK3(IT_SET_ALU_CONST, (num) + 1);			\
	E32(((reg) - SET_ALU_CONST_offset) >> 2);			\
    } else if ((reg) >= SET_RESOURCE_offset && (reg) < SET_RESOURCE_end) { \
	PACK3(IT_SET_RESOURCE, num + 1);				\
	E32(((reg) - SET_RESOURCE_offset) >> 2);			\
    } else if ((reg) >= SET_SAMPLER_offset && (reg) < SET_SAMPLER_end) { \
	PACK3(IT_SET_SAMPLER, (num) + 1);				\
	E32((reg - SET_SAMPLER_offset) >> 2);			\
    } else if ((reg) >= SET_CTL_CONST_offset && (reg) < SET_CTL_CONST_end) { \
	PACK3(IT_SET_CTL_CONST, (num) + 1);			\
	E32(((reg) - SET_CTL_CONST_offset) >> 2);		\
    } else if ((reg) >= SET_LOOP_CONST_offset && (reg) < SET_LOOP_CONST_end) { \
	PACK3(IT_SET_LOOP_CONST, (num) + 1);			\
	E32(((reg) - SET_LOOP_CONST_offset) >> 2);		\
    } else if ((reg) >= SET_BOOL_CONST_offset && (reg) < SET_BOOL_CONST_end) { \
	PACK3(IT_SET_BOOL_CONST, (num) + 1);			\
	E32(((reg) - SET_BOOL_CONST_offset) >> 2);		\
    } else {								\
	E32(CP_PACKET0 ((reg), (num) - 1));			\
    }									\
} while (0)

/* write a single register */
#define EREG(reg, val)							\
do {								        \
    PACK0((reg), 1);						\
    E32((val));							\
} while (0)

void R600CPFlushIndirect(ScrnInfoPtr pScrn);
void R600IBDiscard(ScrnInfoPtr pScrn);

void
r600_wait_3d_idle_clean(ScrnInfoPtr pScrn);
void
r600_wait_3d_idle(ScrnInfoPtr pScrn);
void
r600_start_3d(ScrnInfoPtr pScrn);
void
r600_set_render_target(ScrnInfoPtr pScrn, cb_config_t *cb_conf, uint32_t domain);
void
r600_cp_wait_vline_sync(ScrnInfoPtr pScrn, PixmapPtr pPix, xf86CrtcPtr crtc, int start, int stop);
void
r600_set_spi(ScrnInfoPtr pScrn, int vs_export_count, int num_interp);
void
r600_fs_setup(ScrnInfoPtr pScrn, shader_config_t *fs_conf, uint32_t domain);
void
r600_vs_setup(ScrnInfoPtr pScrn, shader_config_t *vs_conf, uint32_t domain);
void
r600_ps_setup(ScrnInfoPtr pScrn, shader_config_t *ps_conf, uint32_t domain);
void
r600_set_alu_consts(ScrnInfoPtr pScrn, int offset, int count, float *const_buf);
void
r600_set_bool_consts(ScrnInfoPtr pScrn, int offset, uint32_t val);
void
r600_set_tex_resource(ScrnInfoPtr pScrn, tex_resource_t *tex_res, uint32_t domain);
void
r600_set_tex_sampler (ScrnInfoPtr pScrn, tex_sampler_t *s);
void
r600_set_screen_scissor(ScrnInfoPtr pScrn, int x1, int y1, int x2, int y2);
void
r600_set_vport_scissor(ScrnInfoPtr pScrn, int id, int x1, int y1, int x2, int y2);
void
r600_set_generic_scissor(ScrnInfoPtr pScrn, int x1, int y1, int x2, int y2);
void
r600_set_window_scissor(ScrnInfoPtr pScrn, int x1, int y1, int x2, int y2);
void
r600_set_clip_rect(ScrnInfoPtr pScrn, int id, int x1, int y1, int x2, int y2);
void
r600_set_default_state(ScrnInfoPtr pScrn);
void
r600_draw_immd(ScrnInfoPtr pScrn, draw_config_t *draw_conf, uint32_t *indices);
void
r600_draw_auto(ScrnInfoPtr pScrn, draw_config_t *draw_conf);

void r600_finish_op(ScrnInfoPtr pScrn, int vtx_size);

Bool
R600SetAccelState(ScrnInfoPtr pScrn,
		  struct r600_accel_object *src0,
		  struct r600_accel_object *src1,
		  struct r600_accel_object *dst,
		  uint32_t vs_offset, uint32_t ps_offset,
		  int rop, Pixel planemask);

extern Bool RADEONPrepareAccess_CS(PixmapPtr pPix, int index);
extern void RADEONFinishAccess_CS(PixmapPtr pPix, int index);
extern void *RADEONEXACreatePixmap(ScreenPtr pScreen, int size, int align);
extern void *RADEONEXACreatePixmap2(ScreenPtr pScreen, int width, int height,
				    int depth, int usage_hint, int bitsPerPixel,
				    int *new_pitch);
extern void RADEONEXADestroyPixmap(ScreenPtr pScreen, void *driverPriv);
extern struct radeon_bo *radeon_get_pixmap_bo(PixmapPtr pPix);
extern Bool RADEONEXAPixmapIsOffscreen(PixmapPtr pPix);
extern Bool RADEONEXASharePixmapBacking(PixmapPtr ppix, ScreenPtr slave, void **handle_p);
extern Bool RADEONEXASetSharedPixmapBacking(PixmapPtr ppix, void *handle);
#endif
@


1.5
log
@Update to xf86-video-ati 6.14.4. Tested by jasper@@, krw@@, mpi@@, shadchin@@
@
text
@a58 1
#ifdef XF86DRM_MODE
a59 1
#endif
a145 1
#ifdef XF86DRM_MODE
a146 1
#endif
a187 1
#if defined(XF86DRM_MODE)
d190 1
a190 2
    if (info->cs)			\
	radeon_ddx_cs_start(pScrn, (n), __FILE__, __func__, __LINE__);	\
d194 1
a194 2
    if (info->cs)			\
	radeon_cs_end(info->cs, __FILE__, __func__, __LINE__);	\
d198 3
a200 5
    if (info->cs) {							\
	int _ret;							\
	_ret = radeon_cs_write_reloc(info->cs, (bo), (rd), (wd), 0);	\
	if (_ret) ErrorF("reloc emit failure %d (%s %d)\n", _ret, __func__, __LINE__); \
    }									\
d202 1
a202 15
#define E32(ib, dword)                                                  \
do {                                                                    \
    if (info->cs)							\
	radeon_cs_write_dword(info->cs, (dword));			\
    else {								\
	uint32_t *ib_head = (pointer)(char*)(ib)->address;		\
	ib_head[(ib)->used >> 2] = (dword);				\
	(ib)->used += 4;						\
    }									\
} while (0)
#else
#define BEGIN_BATCH(n) do {(void)info;} while(0)
#define END_BATCH() do {} while(0)
#define RELOC_BATCH(bo, wd, rd) do {} while(0)
#define E32(ib, dword)                                                  \
d204 1
a204 3
    uint32_t *ib_head = (pointer)(char*)(ib)->address;			\
    ib_head[(ib)->used >> 2] = (dword);					\
    (ib)->used += 4;							\
a205 1
#endif
d207 1
a207 1
#define EFLOAT(ib, val)							\
d211 1
a211 1
    E32((ib), a.d);							\
d214 1
a214 1
#define PACK3(ib, cmd, num)	       					\
d216 1
a216 1
    E32((ib), RADEON_CP_PACKET3 | ((cmd) << 8) | ((((num) - 1) & 0x3fff) << 16)); \
d221 1
a221 1
#define PACK0(ib, reg, num)                                             \
d224 2
a225 2
	PACK3((ib), IT_SET_CONFIG_REG, (num) + 1);			\
	E32((ib), ((reg) - SET_CONFIG_REG_offset) >> 2);		\
d227 2
a228 2
	PACK3((ib), IT_SET_CONTEXT_REG, (num) + 1);			\
	E32((ib), ((reg) - SET_CONTEXT_REG_offset) >> 2);		\
d230 2
a231 2
	PACK3((ib), IT_SET_ALU_CONST, (num) + 1);			\
	E32((ib), ((reg) - SET_ALU_CONST_offset) >> 2);			\
d233 2
a234 2
	PACK3((ib), IT_SET_RESOURCE, num + 1);				\
	E32((ib), ((reg) - SET_RESOURCE_offset) >> 2);			\
d236 2
a237 2
	PACK3((ib), IT_SET_SAMPLER, (num) + 1);				\
	E32((ib), (reg - SET_SAMPLER_offset) >> 2);			\
d239 2
a240 2
	PACK3((ib), IT_SET_CTL_CONST, (num) + 1);			\
	E32((ib), ((reg) - SET_CTL_CONST_offset) >> 2);		\
d242 2
a243 2
	PACK3((ib), IT_SET_LOOP_CONST, (num) + 1);			\
	E32((ib), ((reg) - SET_LOOP_CONST_offset) >> 2);		\
d245 2
a246 2
	PACK3((ib), IT_SET_BOOL_CONST, (num) + 1);			\
	E32((ib), ((reg) - SET_BOOL_CONST_offset) >> 2);		\
d248 1
a248 1
	E32((ib), CP_PACKET0 ((reg), (num) - 1));			\
d253 1
a253 1
#define EREG(ib, reg, val)                                              \
d255 2
a256 2
    PACK0((ib), (reg), 1);						\
    E32((ib), (val));							\
d259 2
a260 2
void R600CPFlushIndirect(ScrnInfoPtr pScrn, drmBufPtr ib);
void R600IBDiscard(ScrnInfoPtr pScrn, drmBufPtr ib);
d263 1
a263 1
r600_wait_3d_idle_clean(ScrnInfoPtr pScrn, drmBufPtr ib);
d265 1
a265 1
r600_wait_3d_idle(ScrnInfoPtr pScrn, drmBufPtr ib);
d267 1
a267 1
r600_start_3d(ScrnInfoPtr pScrn, drmBufPtr ib);
d269 1
a269 1
r600_set_render_target(ScrnInfoPtr pScrn, drmBufPtr ib, cb_config_t *cb_conf, uint32_t domain);
d271 1
a271 1
r600_cp_wait_vline_sync(ScrnInfoPtr pScrn, drmBufPtr ib, PixmapPtr pPix, xf86CrtcPtr crtc, int start, int stop);
d273 1
a273 1
r600_set_spi(ScrnInfoPtr pScrn, drmBufPtr ib, int vs_export_count, int num_interp);
d275 1
a275 1
r600_fs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *fs_conf, uint32_t domain);
d277 1
a277 1
r600_vs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *vs_conf, uint32_t domain);
d279 1
a279 1
r600_ps_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *ps_conf, uint32_t domain);
d281 1
a281 1
r600_set_alu_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, int count, float *const_buf);
d283 1
a283 1
r600_set_bool_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, uint32_t val);
d285 1
a285 1
r600_set_tex_resource(ScrnInfoPtr pScrn, drmBufPtr ib, tex_resource_t *tex_res, uint32_t domain);
d287 1
a287 1
r600_set_tex_sampler (ScrnInfoPtr pScrn, drmBufPtr ib, tex_sampler_t *s);
d289 1
a289 1
r600_set_screen_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d291 1
a291 1
r600_set_vport_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d293 1
a293 1
r600_set_generic_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d295 1
a295 1
r600_set_window_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d297 1
a297 1
r600_set_clip_rect(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d299 1
a299 1
r600_set_default_state(ScrnInfoPtr pScrn, drmBufPtr ib);
d301 1
a301 1
r600_draw_immd(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf, uint32_t *indices);
d303 1
a303 1
r600_draw_auto(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf);
d324 2
a325 2


@


1.4
log
@Re-update xf86-video-ati to 6.14.3.

Because of ati.c revision 1.5, it will not be selected by
autoconfiguration code, so people who want to run this version of the
driver on their radeon cards need an explicit "Device" section in
xorg.conf.
@
text
@d59 3
d148 3
@


1.3
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@d53 6
d72 1
d78 1
d90 1
d106 1
d122 1
d143 2
d186 33
d225 1
d245 1
a245 1
        E32(ib, ((reg) - SET_CONFIG_REG_offset) >> 2);                  \
d247 2
a248 2
        PACK3((ib), IT_SET_CONTEXT_REG, (num) + 1);			\
	E32(ib, ((reg) - 0x28000) >> 2);				\
d251 1
a251 1
	E32(ib, ((reg) - SET_ALU_CONST_offset) >> 2);			\
a281 2
uint64_t
upload (ScrnInfoPtr pScrn, void *shader, int size, int offset);
d283 1
a283 1
wait_3d_idle_clean(ScrnInfoPtr pScrn, drmBufPtr ib);
d285 1
a285 1
wait_3d_idle(ScrnInfoPtr pScrn, drmBufPtr ib);
d287 1
a287 1
start_3d(ScrnInfoPtr pScrn, drmBufPtr ib);
d289 1
a289 1
set_render_target(ScrnInfoPtr pScrn, drmBufPtr ib, cb_config_t *cb_conf);
d291 1
a291 1
cp_set_surface_sync(ScrnInfoPtr pScrn, drmBufPtr ib, uint32_t sync_type, uint32_t size, uint64_t mc_addr);
d293 1
a293 1
cp_wait_vline_sync(ScrnInfoPtr pScrn, drmBufPtr ib, PixmapPtr pPix, int crtc, int start, int stop);
d295 1
a295 1
fs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *fs_conf);
d297 1
a297 1
vs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *vs_conf);
d299 1
a299 1
ps_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *ps_conf);
d301 1
a301 1
set_alu_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, int count, float *const_buf);
d303 1
a303 1
set_bool_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, uint32_t val);
d305 1
a305 1
set_vtx_resource(ScrnInfoPtr pScrn, drmBufPtr ib, vtx_resource_t *res);
d307 1
a307 1
set_tex_resource(ScrnInfoPtr pScrn, drmBufPtr ib, tex_resource_t *tex_res);
d309 1
a309 1
set_tex_sampler (ScrnInfoPtr pScrn, drmBufPtr ib, tex_sampler_t *s);
d311 1
a311 1
set_screen_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d313 1
a313 1
set_vport_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d315 1
a315 1
set_generic_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d317 1
a317 1
set_window_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d319 1
a319 1
set_clip_rect(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d321 1
a321 1
set_default_state(ScrnInfoPtr pScrn, drmBufPtr ib);
d323 22
a344 3
draw_immd(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf, uint32_t *indices);
void
draw_auto(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf);
@


1.2
log
@Update to xf86-video-ati 6.14.3. Tested by many.
@
text
@a52 6
    /* 2D related CB state */
    uint32_t pmask;
    int rop;
    int blend_enable;
    uint32_t blendcntl;
    struct radeon_bo *bo;
a65 1
    struct radeon_bo *bo;
a70 1
    uint32_t shader_size;
a81 1
    struct radeon_bo *bo;
a96 1
    struct radeon_bo *bo;
a111 1
    uint32_t size;
a131 2
    struct radeon_bo *bo;
    struct radeon_bo *mip_bo;
a172 33
#if defined(XF86DRM_MODE)
#define BEGIN_BATCH(n)				\
do {					\
    if (info->cs)			\
	radeon_ddx_cs_start(pScrn, (n), __FILE__, __func__, __LINE__);	\
} while(0)
#define END_BATCH()				\
do {					\
    if (info->cs)			\
	radeon_cs_end(info->cs, __FILE__, __func__, __LINE__);	\
} while(0)
#define RELOC_BATCH(bo, rd, wd)					\
do {							\
    if (info->cs) {							\
	int _ret;							\
	_ret = radeon_cs_write_reloc(info->cs, (bo), (rd), (wd), 0);	\
	if (_ret) ErrorF("reloc emit failure %d (%s %d)\n", _ret, __func__, __LINE__); \
    }									\
} while(0)
#define E32(ib, dword)                                                  \
do {                                                                    \
    if (info->cs)							\
	radeon_cs_write_dword(info->cs, (dword));			\
    else {								\
	uint32_t *ib_head = (pointer)(char*)(ib)->address;		\
	ib_head[(ib)->used >> 2] = (dword);				\
	(ib)->used += 4;						\
    }									\
} while (0)
#else
#define BEGIN_BATCH(n) do {(void)info;} while(0)
#define END_BATCH() do {} while(0)
#define RELOC_BATCH(bo, wd, rd) do {} while(0)
a178 1
#endif
d198 1
a198 1
	E32((ib), ((reg) - SET_CONFIG_REG_offset) >> 2);		\
d200 2
a201 2
	PACK3((ib), IT_SET_CONTEXT_REG, (num) + 1);			\
	E32((ib), ((reg) - SET_CONTEXT_REG_offset) >> 2);		\
d204 1
a204 1
	E32((ib), ((reg) - SET_ALU_CONST_offset) >> 2);			\
d235 2
d238 1
a238 1
r600_wait_3d_idle_clean(ScrnInfoPtr pScrn, drmBufPtr ib);
d240 1
a240 1
r600_wait_3d_idle(ScrnInfoPtr pScrn, drmBufPtr ib);
d242 1
a242 1
r600_start_3d(ScrnInfoPtr pScrn, drmBufPtr ib);
d244 1
a244 1
r600_set_render_target(ScrnInfoPtr pScrn, drmBufPtr ib, cb_config_t *cb_conf, uint32_t domain);
d246 1
a246 1
r600_cp_wait_vline_sync(ScrnInfoPtr pScrn, drmBufPtr ib, PixmapPtr pPix, xf86CrtcPtr crtc, int start, int stop);
d248 1
a248 1
r600_set_spi(ScrnInfoPtr pScrn, drmBufPtr ib, int vs_export_count, int num_interp);
d250 1
a250 1
r600_fs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *fs_conf, uint32_t domain);
d252 1
a252 1
r600_vs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *vs_conf, uint32_t domain);
d254 1
a254 1
r600_ps_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *ps_conf, uint32_t domain);
d256 1
a256 1
r600_set_alu_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, int count, float *const_buf);
d258 1
a258 1
r600_set_bool_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, uint32_t val);
d260 1
a260 1
r600_set_tex_resource(ScrnInfoPtr pScrn, drmBufPtr ib, tex_resource_t *tex_res, uint32_t domain);
d262 1
a262 1
r600_set_tex_sampler (ScrnInfoPtr pScrn, drmBufPtr ib, tex_sampler_t *s);
d264 1
a264 1
r600_set_screen_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d266 1
a266 1
r600_set_vport_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d268 1
a268 1
r600_set_generic_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d270 1
a270 1
r600_set_window_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d272 1
a272 1
r600_set_clip_rect(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d274 1
a274 1
r600_set_default_state(ScrnInfoPtr pScrn, drmBufPtr ib);
d276 1
a276 1
r600_draw_immd(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf, uint32_t *indices);
d278 3
a280 22
r600_draw_auto(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf);

void r600_finish_op(ScrnInfoPtr pScrn, int vtx_size);

Bool
R600SetAccelState(ScrnInfoPtr pScrn,
		  struct r600_accel_object *src0,
		  struct r600_accel_object *src1,
		  struct r600_accel_object *dst,
		  uint32_t vs_offset, uint32_t ps_offset,
		  int rop, Pixel planemask);

extern Bool RADEONPrepareAccess_CS(PixmapPtr pPix, int index);
extern void RADEONFinishAccess_CS(PixmapPtr pPix, int index);
extern void *RADEONEXACreatePixmap(ScreenPtr pScreen, int size, int align);
extern void *RADEONEXACreatePixmap2(ScreenPtr pScreen, int width, int height,
				    int depth, int usage_hint, int bitsPerPixel,
				    int *new_pitch);
extern void RADEONEXADestroyPixmap(ScreenPtr pScreen, void *driverPriv);
extern struct radeon_bo *radeon_get_pixmap_bo(PixmapPtr pPix);
extern Bool RADEONEXAPixmapIsOffscreen(PixmapPtr pPix);

@


1.1
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@d53 6
d72 1
d78 1
d90 1
d106 1
d122 1
d143 2
d186 33
d225 1
d245 1
a245 1
        E32(ib, ((reg) - SET_CONFIG_REG_offset) >> 2);                  \
d247 2
a248 2
        PACK3((ib), IT_SET_CONTEXT_REG, (num) + 1);			\
	E32(ib, ((reg) - 0x28000) >> 2);				\
d251 1
a251 1
	E32(ib, ((reg) - SET_ALU_CONST_offset) >> 2);			\
a281 2
uint64_t
upload (ScrnInfoPtr pScrn, void *shader, int size, int offset);
d283 1
a283 1
wait_3d_idle_clean(ScrnInfoPtr pScrn, drmBufPtr ib);
d285 1
a285 1
wait_3d_idle(ScrnInfoPtr pScrn, drmBufPtr ib);
d287 1
a287 1
start_3d(ScrnInfoPtr pScrn, drmBufPtr ib);
d289 1
a289 1
set_render_target(ScrnInfoPtr pScrn, drmBufPtr ib, cb_config_t *cb_conf);
d291 1
a291 1
cp_set_surface_sync(ScrnInfoPtr pScrn, drmBufPtr ib, uint32_t sync_type, uint32_t size, uint64_t mc_addr);
d293 1
a293 1
cp_wait_vline_sync(ScrnInfoPtr pScrn, drmBufPtr ib, PixmapPtr pPix, int crtc, int start, int stop);
d295 1
a295 1
fs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *fs_conf);
d297 1
a297 1
vs_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *vs_conf);
d299 1
a299 1
ps_setup(ScrnInfoPtr pScrn, drmBufPtr ib, shader_config_t *ps_conf);
d301 1
a301 1
set_alu_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, int count, float *const_buf);
d303 1
a303 1
set_bool_consts(ScrnInfoPtr pScrn, drmBufPtr ib, int offset, uint32_t val);
d305 1
a305 1
set_vtx_resource(ScrnInfoPtr pScrn, drmBufPtr ib, vtx_resource_t *res);
d307 1
a307 1
set_tex_resource(ScrnInfoPtr pScrn, drmBufPtr ib, tex_resource_t *tex_res);
d309 1
a309 1
set_tex_sampler (ScrnInfoPtr pScrn, drmBufPtr ib, tex_sampler_t *s);
d311 1
a311 1
set_screen_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d313 1
a313 1
set_vport_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d315 1
a315 1
set_generic_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d317 1
a317 1
set_window_scissor(ScrnInfoPtr pScrn, drmBufPtr ib, int x1, int y1, int x2, int y2);
d319 1
a319 1
set_clip_rect(ScrnInfoPtr pScrn, drmBufPtr ib, int id, int x1, int y1, int x2, int y2);
d321 1
a321 1
set_default_state(ScrnInfoPtr pScrn, drmBufPtr ib);
d323 22
a344 3
draw_immd(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf, uint32_t *indices);
void
draw_auto(ScrnInfoPtr pScrn, drmBufPtr ib, draw_config_t *draw_conf);
@

