head	1.7;
access;
symbols
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_6_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2013.08.16.17.04.11;	author matthieu;	state dead;
branches;
next	1.6;

1.6
date	2012.03.04.16.01.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.06.22.53.13;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.25.21.33.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.12.15.18.34;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.01.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.01.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@/*
 * Copyright 2000 ATI Technologies Inc., Markham, Ontario, and
 *                VA Linux Systems Inc., Fremont, California.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL ATI, VA LINUX SYSTEMS AND/OR
 * THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/*
 * Authors:
 *   Kevin E. Martin <martin@@xfree86.org>
 *   Rickard E. Faith <faith@@valinux.com>
 *   Alan Hourihane <alanh@@fairlite.demon.co.uk>
 *
 * References:
 *
 * !!!! FIXME !!!!
 *   RAGE 128 VR/ RAGE 128 GL Register Reference Manual (Technical
 *   Reference Manual P/N RRG-G04100-C Rev. 0.04), ATI Technologies: April
 *   1999.
 *
 * !!!! FIXME !!!!
 *   RAGE 128 Software Development Manual (Technical Reference Manual P/N
 *   SDK-G04000 Rev. 0.01), ATI Technologies: June 1999.
 *
 */


#ifndef _RADEON_MACROS_H_
#define _RADEON_MACROS_H_

#include "compiler.h"

#define RADEON_BIOS8(v)  (info->VBIOS[v])
#define RADEON_BIOS16(v) (info->VBIOS[v] | \
                          (info->VBIOS[(v) + 1] << 8))
#define RADEON_BIOS32(v) (info->VBIOS[v] | \
                          (info->VBIOS[(v) + 1] << 8) | \
                          (info->VBIOS[(v) + 2] << 16) | \
                          (info->VBIOS[(v) + 3] << 24))

				/* Memory mapped register access macros */
#define INREG8(addr)        MMIO_IN8(RADEONMMIO, addr)
#define INREG16(addr)       MMIO_IN16(RADEONMMIO, addr)
#define INREG(addr)         MMIO_IN32(RADEONMMIO, addr)
#define OUTREG8(addr, val)  MMIO_OUT8(RADEONMMIO, addr, val)
#define OUTREG16(addr, val) MMIO_OUT16(RADEONMMIO, addr, val)
#define OUTREG(addr, val)   MMIO_OUT32(RADEONMMIO, addr, val)

#define ADDRREG(addr)       ((volatile uint32_t *)(pointer)(RADEONMMIO + (addr)))


#define OUTREGP(addr, val, mask)					\
do {									\
    uint32_t tmp = INREG(addr);						\
    tmp &= (mask);							\
    tmp |= ((val) & ~(mask));						\
    OUTREG(addr, tmp);							\
} while (0)

#define INPLL(pScrn, addr) RADEONINPLL(pScrn, addr)

#define OUTPLL(pScrn, addr, val) RADEONOUTPLL(pScrn, addr, val)

#define OUTPLLP(pScrn, addr, val, mask)					\
do {									\
    uint32_t tmp_ = INPLL(pScrn, addr);					\
    tmp_ &= (mask);							\
    tmp_ |= ((val) & ~(mask));						\
    OUTPLL(pScrn, addr, tmp_);						\
} while (0)

#define OUTPAL_START(idx)						\
do {									\
    if (IS_AVIVO_VARIANT) {                                             \
        OUTREG8(AVIVO_DC_LUT_RW_INDEX, (idx));				\
    } else {                                                            \
        OUTREG8(RADEON_PALETTE_INDEX, (idx));				\
    }								        \
} while (0)

#define OUTPAL_NEXT(r, g, b)						\
do {									\
    if (IS_AVIVO_VARIANT) {                                             \
        OUTREG(AVIVO_DC_LUT_30_COLOR, ((r) << 20) | ((g) << 10) | (b));	\
    } else {                                                            \
        OUTREG(RADEON_PALETTE_30_DATA, ((r) << 20) | ((g) << 10) | (b)); \
    }								        \
} while (0)

#define OUTPAL(idx, r, g, b)						\
do {									\
    OUTPAL_START((idx));						\
    OUTPAL_NEXT((r), (g), (b));						\
} while (0)

#define INPAL_START(idx)						\
do {									\
    if (IS_AVIVO_VARIANT) {                                             \
        OUTREG8(AVIVO_DC_LUT_RW_INDEX, (idx));				\
    } else {                                                            \
        OUTREG(RADEON_PALETTE_INDEX, (idx) << 16);			\
    }								        \
} while (0)

#define INPAL_NEXT()                                                    \
do {									\
    if (IS_AVIVO_VARIANT) {                                             \
        INREG(AVIVO_DC_LUT_30_COLOR);                                   \
    } else {                                                            \
        INREG(RADEON_PALETTE_30_DATA);                                  \
    }								        \
} while (0)

#define PAL_SELECT(idx)							\
do {									\
    if (IS_AVIVO_VARIANT) {                                             \
        if (!idx) {							\
	    OUTREG(AVIVO_DC_LUT_RW_SELECT, 0);                          \
        } else {						        \
	    OUTREG(AVIVO_DC_LUT_RW_SELECT, 1);                          \
        }								\
    } else {                                                            \
        if (!idx) {							\
	    OUTREG(RADEON_DAC_CNTL2, INREG(RADEON_DAC_CNTL2) &		\
	           (uint32_t)~RADEON_DAC2_PALETTE_ACC_CTL);		\
        } else {							\
	    OUTREG(RADEON_DAC_CNTL2, INREG(RADEON_DAC_CNTL2) |		\
	           RADEON_DAC2_PALETTE_ACC_CTL);			\
        }								\
    }								        \
} while (0)

#define INMC(pScrn, addr) RADEONINMC(pScrn, addr)
#define OUTMC(pScrn, addr, val) RADEONOUTMC(pScrn, addr, val)

#define INPCIE(pScrn, addr) RADEONINPCIE(pScrn, addr)
#define OUTPCIE(pScrn, addr, val) RADEONOUTPCIE(pScrn, addr, val)

#define INPCIE_P(pScrn, addr) R600INPCIE_PORT(pScrn, addr)
#define OUTPCIE_P(pScrn, addr, val) R600OUTPCIE_PORT(pScrn, addr, val)

#define BEGIN_ACCEL_RELOC(n, r) do {		\
	int _nqw = (n) + (info->cs ? (r) : 0);	\
	BEGIN_ACCEL(_nqw);			\
    } while (0)

#define CHECK_OFFSET(pPix, mask, type) do {	\
    if (!info->cs) {			       \
	uint32_t _pix_offset = radeonGetPixmapOffset(pPix);	\
	if ((_pix_offset & mask) != 0)					\
	    RADEON_FALLBACK(("Bad %s offset 0x%x\n", type, (int)_pix_offset)); \
    }									\
    } while(0)

#define EMIT_OFFSET(reg, value, pPix, rd, wd) do {		\
    if (info->cs) {						\
	driver_priv = exaGetPixmapDriverPrivate(pPix);		\
	OUT_ACCEL_REG((reg), (value));				\
	OUT_RELOC(driver_priv->bo, (rd), (wd));			\
    } else {							\
	uint32_t _pix_offset;					\
	_pix_offset = radeonGetPixmapOffset(pPix);	\
	OUT_ACCEL_REG((reg), _pix_offset | value);		\
    }								\
    } while(0)

#define EMIT_READ_OFFSET(reg, value, pPix) EMIT_OFFSET(reg, value, pPix, (RADEON_GEM_DOMAIN_VRAM | RADEON_GEM_DOMAIN_GTT), 0)
#define EMIT_WRITE_OFFSET(reg, value, pPix) EMIT_OFFSET(reg, value, pPix, 0, RADEON_GEM_DOMAIN_VRAM)

#define OUT_TEXTURE_REG(reg, offset, bo) do {   \
    if (info->cs) {                                                     \
      OUT_ACCEL_REG((reg), (offset));                                   \
      OUT_RELOC((bo), RADEON_GEM_DOMAIN_VRAM | RADEON_GEM_DOMAIN_GTT, 0); \
    } else {                                                            \
      OUT_ACCEL_REG((reg), (offset) + info->fbLocation + pScrn->fbOffset);} \
  } while(0)

#define EMIT_COLORPITCH(reg, value, pPix) do {			\
    if (info->cs) {						\
	driver_priv = exaGetPixmapDriverPrivate(pPix);			\
	OUT_ACCEL_REG((reg), value);					\
	OUT_RELOC(driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);		\
    } else {								\
	OUT_ACCEL_REG((reg), value);					\
    }									\
}while(0)

#endif
@


1.6
log
@Re-update xf86-video-ati to 6.14.3.

Because of ati.c revision 1.5, it will not be selected by
autoconfiguration code, so people who want to run this version of the
driver on their radeon cards need an explicit "Device" section in
xorg.conf.
@
text
@@


1.5
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@d160 49
@


1.4
log
@Update to xf86-video-ati 6.14.3. Tested by many.
@
text
@a159 49
#define INPCIE_P(pScrn, addr) R600INPCIE_PORT(pScrn, addr)
#define OUTPCIE_P(pScrn, addr, val) R600OUTPCIE_PORT(pScrn, addr, val)

#define BEGIN_ACCEL_RELOC(n, r) do {		\
	int _nqw = (n) + (info->cs ? (r) : 0);	\
	BEGIN_ACCEL(_nqw);			\
    } while (0)

#define CHECK_OFFSET(pPix, mask, type) do {	\
    if (!info->cs) {			       \
	uint32_t _pix_offset = radeonGetPixmapOffset(pPix);	\
	if ((_pix_offset & mask) != 0)					\
	    RADEON_FALLBACK(("Bad %s offset 0x%x\n", type, (int)_pix_offset)); \
    }									\
    } while(0)

#define EMIT_OFFSET(reg, value, pPix, rd, wd) do {		\
    if (info->cs) {						\
	driver_priv = exaGetPixmapDriverPrivate(pPix);		\
	OUT_ACCEL_REG((reg), (value));				\
	OUT_RELOC(driver_priv->bo, (rd), (wd));			\
    } else {							\
	uint32_t _pix_offset;					\
	_pix_offset = radeonGetPixmapOffset(pPix);	\
	OUT_ACCEL_REG((reg), _pix_offset | value);		\
    }								\
    } while(0)

#define EMIT_READ_OFFSET(reg, value, pPix) EMIT_OFFSET(reg, value, pPix, (RADEON_GEM_DOMAIN_VRAM | RADEON_GEM_DOMAIN_GTT), 0)
#define EMIT_WRITE_OFFSET(reg, value, pPix) EMIT_OFFSET(reg, value, pPix, 0, RADEON_GEM_DOMAIN_VRAM)

#define OUT_TEXTURE_REG(reg, offset, bo) do {   \
    if (info->cs) {                                                     \
      OUT_ACCEL_REG((reg), (offset));                                   \
      OUT_RELOC((bo), RADEON_GEM_DOMAIN_VRAM | RADEON_GEM_DOMAIN_GTT, 0); \
    } else {                                                            \
      OUT_ACCEL_REG((reg), (offset) + info->fbLocation + pScrn->fbOffset);} \
  } while(0)

#define EMIT_COLORPITCH(reg, value, pPix) do {			\
    if (info->cs) {						\
	driver_priv = exaGetPixmapDriverPrivate(pPix);			\
	OUT_ACCEL_REG((reg), value);					\
	OUT_RELOC(driver_priv->bo, 0, RADEON_GEM_DOMAIN_VRAM);		\
    } else {								\
	OUT_ACCEL_REG((reg), value);					\
    }									\
}while(0)

@


1.3
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@d160 49
@


1.2
log
@Long awaited update of xf86-video-ati to 6.9.0.

the rage128 and mach64 drivers were split out of this driver just after
the 6.8.0 release, these drivers will be commited separately.

MergedFb mode is gone, so please use xrandr if you used to use it.

ok matthieu@@.
@
text
@a53 26
#if HAVE_BYTESWAP_H
#include <byteswap.h>
#elif defined(USE_SYS_ENDIAN_H)
#include <sys/endian.h>
#else
#define	bswap_16(value)  \
 	((((value) & 0xff) << 8) | ((value) >> 8))

#define	bswap_32(value)	\
 	(((uint32_t)bswap_16((uint16_t)((value) & 0xffff)) << 16) | \
 	(uint32_t)bswap_16((uint16_t)((value) >> 16)))
 
#define	bswap_64(value)	\
 	(((uint64_t)bswap_32((uint32_t)((value) & 0xffffffff)) \
 	    << 32) | \
 	(uint64_t)bswap_32((uint32_t)((value) >> 32)))
#endif

#if X_BYTE_ORDER == X_BIG_ENDIAN
#define le32_to_cpu(x) bswap_32(x)
#define le16_to_cpu(x) bswap_16(x)
#else
#define le32_to_cpu(x) (x)
#define le16_to_cpu(x) (x)
#endif

d105 3
a107 3
        OUTREG(AVIVO_DC_LUT_30_COLOR, ((r) << 22) | ((g) << 12) | ((b) << 2));	\
    } else {                                                               \
        OUTREG(RADEON_PALETTE_DATA, ((r) << 16) | ((g) << 8) | (b));	\
a110 5
#define OUTPAL_NEXT_uint32_t(v)						\
do {									\
    OUTREG(RADEON_PALETTE_DATA, (v & 0x00ffffff));			\
} while (0)

d131 1
a131 1
        INREG(RADEON_PALETTE_DATA);                                     \
d155 1
d157 2
a158 1
#define OUTMC(pScrn, addr, val) RADEONOUTMC(pScrn, addr, val)
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/ati/radeon_macros.h,v 1.2 2003/07/08 15:39:48 tsi Exp $ */
d54 26
d96 1
a96 1
#define ADDRREG(addr)       ((volatile CARD32 *)(pointer)(RADEONMMIO + (addr)))
d101 1
a101 1
    CARD32 tmp = INREG(addr);						\
d113 1
a113 1
    CARD32 tmp_ = INPLL(pScrn, addr);					\
d121 5
a125 1
    OUTREG8(RADEON_PALETTE_INDEX, (idx));				\
d130 5
a134 1
    OUTREG(RADEON_PALETTE_DATA, ((r) << 16) | ((g) << 8) | (b));	\
d137 1
a137 1
#define OUTPAL_NEXT_CARD32(v)						\
d150 5
a154 1
    OUTREG(RADEON_PALETTE_INDEX, (idx) << 16);				\
d157 8
a164 1
#define INPAL_NEXT() INREG(RADEON_PALETTE_DATA)
d168 15
a182 7
    if (!idx) {								\
	OUTREG(RADEON_DAC_CNTL2, INREG(RADEON_DAC_CNTL2) &		\
	       (CARD32)~RADEON_DAC2_PALETTE_ACC_CTL);			\
    } else {								\
	OUTREG(RADEON_DAC_CNTL2, INREG(RADEON_DAC_CNTL2) |		\
	       RADEON_DAC2_PALETTE_ACC_CTL);				\
    }									\
d184 4
@


1.1.1.1
log
@Importing xf86-video-ati 6.6.3
@
text
@@
