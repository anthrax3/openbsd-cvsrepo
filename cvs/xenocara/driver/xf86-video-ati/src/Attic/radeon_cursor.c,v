head	1.8;
access;
symbols
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_6_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.08.16.17.04.09;	author matthieu;	state dead;
branches;
next	1.7;

1.7
date	2012.08.08.16.25.22;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.04.16.01.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.06.22.53.13;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.25.21.33.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.25.18.51.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.12.15.18.34;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.00.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.00.56;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xf86-video-ati 7.2.0, requested by jsg@@

It fixes an endianess problem with kms and the in tree x86-video-ati
among other things.
It has been tested on various i386/amd64/sparc64/macppc machines
on a range of hardware from r100->northern islands.
@
text
@/*
 * Copyright 2000 ATI Technologies Inc., Markham, Ontario, and
 *                VA Linux Systems Inc., Fremont, California.
 *
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation on the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT.  IN NO EVENT SHALL ATI, VA LINUX SYSTEMS AND/OR
 * THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#define RADEONCTRACE(x)
/*#define RADEONCTRACE(x) RADEONTRACE(x) */

/*
 * Authors:
 *   Kevin E. Martin <martin@@xfree86.org>
 *   Rickard E. Faith <faith@@valinux.com>
 *
 * References:
 *
 * !!!! FIXME !!!!
 *   RAGE 128 VR/ RAGE 128 GL Register Reference Manual (Technical
 *   Reference Manual P/N RRG-G04100-C Rev. 0.04), ATI Technologies: April
 *   1999.
 *
 *   RAGE 128 Software Development Manual (Technical Reference Manual P/N
 *   SDK-G04000 Rev. 0.01), ATI Technologies: June 1999.
 *
 */

				/* Driver data structures */
#include "radeon.h"
#include "radeon_version.h"
#include "radeon_reg.h"
#include "radeon_macros.h"

				/* X and server generic header files */
#include "xf86.h"

#define CURSOR_WIDTH	64
#define CURSOR_HEIGHT	64

/*
 * The cursor bits are always 32bpp.  On MSBFirst buses,
 * configure byte swapping to swap 32 bit units when writing
 * the cursor image.  Byte swapping must always be returned
 * to its previous value before returning.
 */
#if X_BYTE_ORDER == X_BIG_ENDIAN

#define CURSOR_SWAPPING_DECL_MMIO   unsigned char *RADEONMMIO = info->MMIO;
#define CURSOR_SWAPPING_START() \
  do { \
  if (info->ChipFamily < CHIP_FAMILY_R600) \
    OUTREG(RADEON_SURFACE_CNTL, \
	   (info->ModeReg->surface_cntl | \
	     RADEON_NONSURF_AP0_SWP_32BPP | RADEON_NONSURF_AP1_SWP_32BPP) & \
	   ~(RADEON_NONSURF_AP0_SWP_16BPP | RADEON_NONSURF_AP1_SWP_16BPP)); \
  } while (0)
#define CURSOR_SWAPPING_END()	\
  do { \
  if (info->ChipFamily < CHIP_FAMILY_R600) \
      OUTREG(RADEON_SURFACE_CNTL, info->ModeReg->surface_cntl); \
  } while (0)
#else

#define CURSOR_SWAPPING_DECL_MMIO
#define CURSOR_SWAPPING_START()
#define CURSOR_SWAPPING_END()

#endif

static void
avivo_setup_cursor(xf86CrtcPtr crtc, Bool enable)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;

    /* always use the same cursor mode even if the cursor is disabled,
     * otherwise you may end up with cursor curruption bands
     */
    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset, (AVIVO_D1CURSOR_MODE_24BPP << AVIVO_D1CURSOR_MODE_SHIFT));

    if (enable) {
	uint64_t location = info->fbLocation + radeon_crtc->cursor_offset + pScrn->fbOffset;
	if (info->ChipFamily >= CHIP_FAMILY_RV770) {
	    if (radeon_crtc->crtc_id)
		OUTREG(R700_D2CUR_SURFACE_ADDRESS_HIGH, (location >> 32) & 0xf);
	    else
		OUTREG(R700_D1CUR_SURFACE_ADDRESS_HIGH, (location >> 32) & 0xf);
	}
	OUTREG(AVIVO_D1CUR_SURFACE_ADDRESS + radeon_crtc->crtc_offset,
	       info->fbLocation + radeon_crtc->cursor_offset + pScrn->fbOffset);
	OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset,
	       AVIVO_D1CURSOR_EN | (AVIVO_D1CURSOR_MODE_24BPP << AVIVO_D1CURSOR_MODE_SHIFT));
    }
}

static void
avivo_lock_cursor(xf86CrtcPtr crtc, Bool lock)
{
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    uint32_t tmp;

    tmp = INREG(AVIVO_D1CUR_UPDATE + radeon_crtc->crtc_offset);

    if (lock)
	tmp |= AVIVO_D1CURSOR_UPDATE_LOCK;
    else
	tmp &= ~AVIVO_D1CURSOR_UPDATE_LOCK;

    OUTREG(AVIVO_D1CUR_UPDATE + radeon_crtc->crtc_offset, tmp);
}

static void
evergreen_setup_cursor(xf86CrtcPtr crtc, Bool enable)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;

    /* always use the same cursor mode even if the cursor is disabled,
     * otherwise you may end up with cursor curruption bands
     */
    OUTREG(EVERGREEN_CUR_CONTROL + radeon_crtc->crtc_offset,
	   EVERGREEN_CURSOR_MODE(EVERGREEN_CURSOR_24_8_PRE_MULT));

    if (enable) {
	uint64_t location = info->fbLocation + radeon_crtc->cursor_offset + pScrn->fbOffset;
	OUTREG(EVERGREEN_CUR_SURFACE_ADDRESS_HIGH + radeon_crtc->crtc_offset,
	       (location >> 32) & 0xf);
	OUTREG(EVERGREEN_CUR_SURFACE_ADDRESS + radeon_crtc->crtc_offset,
	       location & EVERGREEN_CUR_SURFACE_ADDRESS_MASK);
	OUTREG(EVERGREEN_CUR_CONTROL + radeon_crtc->crtc_offset,
	       EVERGREEN_CURSOR_EN | EVERGREEN_CURSOR_MODE(EVERGREEN_CURSOR_24_8_PRE_MULT));
    }
}

static void
evergreen_lock_cursor(xf86CrtcPtr crtc, Bool lock)
{
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    uint32_t tmp;

    tmp = INREG(EVERGREEN_CUR_UPDATE + radeon_crtc->crtc_offset);

    if (lock)
	tmp |= EVERGREEN_CURSOR_UPDATE_LOCK;
    else
	tmp &= ~EVERGREEN_CURSOR_UPDATE_LOCK;

    OUTREG(EVERGREEN_CUR_UPDATE + radeon_crtc->crtc_offset, tmp);
}

void
radeon_crtc_show_cursor (xf86CrtcPtr crtc)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    int crtc_id = radeon_crtc->crtc_id;
    RADEONInfoPtr      info       = RADEONPTR(pScrn);
    unsigned char     *RADEONMMIO = info->MMIO;

    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	evergreen_setup_cursor(crtc, TRUE);
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
	avivo_lock_cursor(crtc, TRUE);
	avivo_setup_cursor(crtc, TRUE);
	avivo_lock_cursor(crtc, FALSE);
    } else {
        switch (crtc_id) {
        case 0:
            OUTREG(RADEON_MM_INDEX, RADEON_CRTC_GEN_CNTL);
	    break;
        case 1:
            OUTREG(RADEON_MM_INDEX, RADEON_CRTC2_GEN_CNTL);
	    break;
        default:
            return;
        }

        OUTREGP(RADEON_MM_DATA, RADEON_CRTC_CUR_EN | 2 << 20,
                ~(RADEON_CRTC_CUR_EN | RADEON_CRTC_CUR_MODE_MASK));
    }
}

void
radeon_crtc_hide_cursor (xf86CrtcPtr crtc)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    int crtc_id = radeon_crtc->crtc_id;
    RADEONInfoPtr      info       = RADEONPTR(pScrn);
    unsigned char     *RADEONMMIO = info->MMIO;

    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	evergreen_setup_cursor(crtc, FALSE);
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
	avivo_lock_cursor(crtc, TRUE);
	avivo_setup_cursor(crtc, FALSE);
	avivo_lock_cursor(crtc, FALSE);
    } else {
	switch(crtc_id) {
    	case 0:
            OUTREG(RADEON_MM_INDEX, RADEON_CRTC_GEN_CNTL);
            break;
    	case 1:
	    OUTREG(RADEON_MM_INDEX, RADEON_CRTC2_GEN_CNTL);
	    break;
        default:
	    return;
        }

        OUTREGP(RADEON_MM_DATA, 0, ~RADEON_CRTC_CUR_EN);
   }
}

void
radeon_crtc_set_cursor_position (xf86CrtcPtr crtc, int x, int y)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONEntPtr pRADEONEnt = RADEONEntPriv(pScrn);
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    int crtc_id = radeon_crtc->crtc_id;
    RADEONInfoPtr      info       = RADEONPTR(pScrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    int xorigin = 0, yorigin = 0;
    int stride = 256;
    DisplayModePtr mode = &crtc->mode;
    int w = CURSOR_WIDTH;

    if (x < 0)                        xorigin = -x+1;
    if (y < 0)                        yorigin = -y+1;
    if (xorigin >= CURSOR_WIDTH)  xorigin = CURSOR_WIDTH - 1;
    if (yorigin >= CURSOR_HEIGHT) yorigin = CURSOR_HEIGHT - 1;

    if (IS_AVIVO_VARIANT) {
	/* avivo cursor spans the full fb width */
	if (crtc->rotatedData == NULL) {
	    x += crtc->x;
	    y += crtc->y;
	}

	if (pRADEONEnt->Controller[0]->enabled &&
	    pRADEONEnt->Controller[1]->enabled) {
	    int cursor_end, frame_end;

	    cursor_end = x - xorigin + w;
	    frame_end = crtc->x + mode->CrtcHDisplay;

	    if (cursor_end >= frame_end) {
		w = w - (cursor_end - frame_end);
		if (!(frame_end & 0x7f))
		    w--;
	    } else {
		if (!(cursor_end & 0x7f))
		    w--;
	    }
	    if (w <= 0)
		w = 1;
	}
    }

    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	OUTREG(EVERGREEN_CUR_POSITION + radeon_crtc->crtc_offset, ((xorigin ? 0 : x) << 16)
	       | (yorigin ? 0 : y));
	OUTREG(EVERGREEN_CUR_HOT_SPOT + radeon_crtc->crtc_offset, (xorigin << 16) | yorigin);
	OUTREG(EVERGREEN_CUR_SIZE + radeon_crtc->crtc_offset,
	       ((w - 1) << 16) | (CURSOR_HEIGHT - 1));
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
	avivo_lock_cursor(crtc, TRUE);
	OUTREG(AVIVO_D1CUR_POSITION + radeon_crtc->crtc_offset, ((xorigin ? 0 : x) << 16)
	       | (yorigin ? 0 : y));
	OUTREG(AVIVO_D1CUR_HOT_SPOT + radeon_crtc->crtc_offset, (xorigin << 16) | yorigin);
	OUTREG(AVIVO_D1CUR_SIZE + radeon_crtc->crtc_offset, ((w - 1) << 16) | (CURSOR_HEIGHT - 1));
	avivo_lock_cursor(crtc, FALSE);
    } else {
	if (mode->Flags & V_DBLSCAN)
	    y *= 2;

	if (crtc_id == 0) {
	    OUTREG(RADEON_CUR_HORZ_VERT_OFF,  (RADEON_CUR_LOCK
					       | (xorigin << 16)
					       | yorigin));
	    OUTREG(RADEON_CUR_HORZ_VERT_POSN, (RADEON_CUR_LOCK
					       | ((xorigin ? 0 : x) << 16)
					       | (yorigin ? 0 : y)));
	    RADEONCTRACE(("cursor_offset: 0x%x, yorigin: %d, stride: %d, temp %08X\n",
			  radeon_crtc->cursor_offset + pScrn->fbOffset, yorigin, stride, temp));
	    OUTREG(RADEON_CUR_OFFSET,
		   radeon_crtc->cursor_offset + pScrn->fbOffset + yorigin * stride);
	} else if (crtc_id == 1) {
	    OUTREG(RADEON_CUR2_HORZ_VERT_OFF,  (RADEON_CUR2_LOCK
						| (xorigin << 16)
						| yorigin));
	    OUTREG(RADEON_CUR2_HORZ_VERT_POSN, (RADEON_CUR2_LOCK
						| ((xorigin ? 0 : x) << 16)
						| (yorigin ? 0 : y)));
	    RADEONCTRACE(("cursor_offset2: 0x%x, yorigin: %d, stride: %d, temp %08X\n",
			  radeon_crtc->cursor_offset + pScrn->fbOffset, yorigin, stride, temp));
	    OUTREG(RADEON_CUR2_OFFSET,
		   radeon_crtc->cursor_offset + pScrn->fbOffset + yorigin * stride);
	}
    }
}

void
radeon_crtc_set_cursor_colors (xf86CrtcPtr crtc, int bg, int fg)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr info = RADEONPTR(pScrn);
    uint32_t *pixels = (uint32_t *)(pointer)(info->FB + pScrn->fbOffset + radeon_crtc->cursor_offset);
    int            pixel, i;
    CURSOR_SWAPPING_DECL_MMIO

    RADEONCTRACE(("RADEONSetCursorColors\n"));

#ifdef ARGB_CURSOR
    /* Don't recolour cursors set with SetCursorARGB. */
    if (info->cursor_argb)
       return;
#endif

    fg |= 0xff000000;
    bg |= 0xff000000;

    /* Don't recolour the image if we don't have to. */
    if (fg == info->cursor_fg && bg == info->cursor_bg)
       return;

    CURSOR_SWAPPING_START();

    /* Note: We assume that the pixels are either fully opaque or fully
     * transparent, so we won't premultiply them, and we can just
     * check for non-zero pixel values; those are either fg or bg
     */
    for (i = 0; i < CURSOR_WIDTH * CURSOR_HEIGHT; i++, pixels++)
       if ((pixel = *pixels))
           *pixels = (pixel == info->cursor_fg) ? fg : bg;

    CURSOR_SWAPPING_END();
    info->cursor_fg = fg;
    info->cursor_bg = bg;
}

#ifdef ARGB_CURSOR

void
radeon_crtc_load_cursor_argb (xf86CrtcPtr crtc, CARD32 *image)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(pScrn);
    CURSOR_SWAPPING_DECL_MMIO
    uint32_t *d = (uint32_t *)(pointer)(info->FB + pScrn->fbOffset + radeon_crtc->cursor_offset);

    RADEONCTRACE(("RADEONLoadCursorARGB\n"));

    info->cursor_argb = TRUE;

    CURSOR_SWAPPING_START();

    memcpy (d, image, CURSOR_HEIGHT * CURSOR_WIDTH * 4);

    CURSOR_SWAPPING_END ();
}

#endif


/* Initialize hardware cursor support. */
Bool RADEONCursorInit(ScreenPtr pScreen)
{
    ScrnInfoPtr        pScrn   = xf86ScreenToScrn(pScreen);
    RADEONInfoPtr      info    = RADEONPTR(pScrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    xf86CrtcConfigPtr  xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
    int                c;

    for (c = 0; c < xf86_config->num_crtc; c++) {
	xf86CrtcPtr crtc = xf86_config->crtc[c];
	RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;

	if (!info->useEXA) {
	    int size_bytes  = CURSOR_WIDTH * 4 * CURSOR_HEIGHT;
	    int align = IS_AVIVO_VARIANT ? 4096 : 256;

	    radeon_crtc->cursor_offset =
		radeon_legacy_allocate_memory(pScrn, &radeon_crtc->cursor_mem,
				size_bytes, align, RADEON_GEM_DOMAIN_VRAM);

	    if (radeon_crtc->cursor_offset == 0)
		return FALSE;

	    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
		       "Will use %d kb for hardware cursor %d at offset 0x%08x\n",
		       (size_bytes * xf86_config->num_crtc) / 1024,
		       c,
		       (unsigned int)radeon_crtc->cursor_offset);
	}
	/* set the cursor mode the same on both crtcs to avoid corruption */
	/* XXX check if this is needed on evergreen */
	if (IS_AVIVO_VARIANT)
	    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset,
		   (AVIVO_D1CURSOR_MODE_24BPP << AVIVO_D1CURSOR_MODE_SHIFT));
    }

    return xf86_cursors_init (pScreen, CURSOR_WIDTH, CURSOR_HEIGHT,
			      (HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
			       HARDWARE_CURSOR_AND_SOURCE_WITH_MASK |
			       HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1 |
			       HARDWARE_CURSOR_ARGB));
}
@


1.7
log
@Update to xf86-video-ati 6.14.6. Tested by mpi@@, brad, eric@@, ajacoutot@@.
@
text
@@


1.6
log
@Re-update xf86-video-ati to 6.14.3.

Because of ati.c revision 1.5, it will not be selected by
autoconfiguration code, so people who want to run this version of the
driver on their radeon cards need an explicit "Device" section in
xorg.conf.
@
text
@d410 1
a410 1
    ScrnInfoPtr        pScrn   = xf86Screens[pScreen->myNum];
@


1.5
log
@Revert the update to xf86-video-ati 6.14.3. Requested by espie@@
who experiemnts regressions with this driver.
@
text
@d76 1
d82 5
a86 3
#define CURSOR_SWAPPING_END()	(OUTREG(RADEON_SURFACE_CNTL, \
					info->ModeReg->surface_cntl))

d103 4
a106 1
    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset, 0);
d109 7
a117 2
	OUTREG(AVIVO_D1CUR_SIZE + radeon_crtc->crtc_offset,
	       ((CURSOR_WIDTH - 1) << 16) | (CURSOR_HEIGHT - 1));
d141 43
d193 5
a197 1
    if (IS_AVIVO_VARIANT) {
a198 3
	OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset,
	       INREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset)
	       | AVIVO_D1CURSOR_EN);
d213 1
a213 1
        OUTREGP(RADEON_MM_DATA, RADEON_CRTC_CUR_EN | 2 << 20, 
d227 5
a231 1
    if (IS_AVIVO_VARIANT) {
a232 3
	OUTREG(AVIVO_D1CUR_CONTROL+ radeon_crtc->crtc_offset,
	       INREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset)
	       & ~(AVIVO_D1CURSOR_EN));
d255 1
d263 1
d276 30
d310 1
d348 1
a348 1
    uint32_t *pixels = (uint32_t *)(pointer)(info->FB + radeon_crtc->cursor_offset);
d391 1
a391 1
    uint32_t *d = (uint32_t *)(pointer)(info->FB + radeon_crtc->cursor_offset);
d412 1
a413 4
    int                width;
    int		       width_bytes;
    int                height;
    int                size_bytes;
d416 7
a422 10
    size_bytes  = CURSOR_WIDTH * 4 * CURSOR_HEIGHT;
    width       = pScrn->displayWidth;
    width_bytes = width * (pScrn->bitsPerPixel / 8);
    height      = ((size_bytes * xf86_config->num_crtc) + width_bytes - 1) / width_bytes;
    int align = IS_AVIVO_VARIANT ? 4096 : 256;

    if (!info->useEXA) {
	for (c = 0; c < xf86_config->num_crtc; c++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[c];
	    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
d425 2
a426 1
		radeon_legacy_allocate_memory(pScrn, &radeon_crtc->cursor_mem, size_bytes, align);
d437 5
@


1.4
log
@Update to xf86-video-ati 6.14.3. Tested by many.
@
text
@a75 1
  if (info->ChipFamily < CHIP_FAMILY_R600) \
d81 3
a83 5
#define CURSOR_SWAPPING_END()	\
  do { \
  if (info->ChipFamily < CHIP_FAMILY_R600) \
      OUTREG(RADEON_SURFACE_CNTL, info->ModeReg->surface_cntl); \
  } while (0)
d100 1
a100 4
    /* always use the same cursor mode even if the cursor is disabled,
     * otherwise you may end up with cursor curruption bands
     */
    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset, (AVIVO_D1CURSOR_MODE_24BPP << AVIVO_D1CURSOR_MODE_SHIFT));
a102 7
	uint64_t location = info->fbLocation + radeon_crtc->cursor_offset + pScrn->fbOffset;
	if (info->ChipFamily >= CHIP_FAMILY_RV770) {
	    if (radeon_crtc->crtc_id)
		OUTREG(R700_D2CUR_SURFACE_ADDRESS_HIGH, (location >> 32) & 0xf);
	    else
		OUTREG(R700_D1CUR_SURFACE_ADDRESS_HIGH, (location >> 32) & 0xf);
	}
d105 2
a129 43
static void
evergreen_setup_cursor(xf86CrtcPtr crtc, Bool enable)
{
    ScrnInfoPtr pScrn = crtc->scrn;
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;

    /* always use the same cursor mode even if the cursor is disabled,
     * otherwise you may end up with cursor curruption bands
     */
    OUTREG(EVERGREEN_CUR_CONTROL + radeon_crtc->crtc_offset,
	   EVERGREEN_CURSOR_MODE(EVERGREEN_CURSOR_24_8_PRE_MULT));

    if (enable) {
	uint64_t location = info->fbLocation + radeon_crtc->cursor_offset + pScrn->fbOffset;
	OUTREG(EVERGREEN_CUR_SURFACE_ADDRESS_HIGH + radeon_crtc->crtc_offset,
	       (location >> 32) & 0xf);
	OUTREG(EVERGREEN_CUR_SURFACE_ADDRESS + radeon_crtc->crtc_offset,
	       location & EVERGREEN_CUR_SURFACE_ADDRESS_MASK);
	OUTREG(EVERGREEN_CUR_CONTROL + radeon_crtc->crtc_offset,
	       EVERGREEN_CURSOR_EN | EVERGREEN_CURSOR_MODE(EVERGREEN_CURSOR_24_8_PRE_MULT));
    }
}

static void
evergreen_lock_cursor(xf86CrtcPtr crtc, Bool lock)
{
    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
    RADEONInfoPtr  info = RADEONPTR(crtc->scrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    uint32_t tmp;

    tmp = INREG(EVERGREEN_CUR_UPDATE + radeon_crtc->crtc_offset);

    if (lock)
	tmp |= EVERGREEN_CURSOR_UPDATE_LOCK;
    else
	tmp &= ~EVERGREEN_CURSOR_UPDATE_LOCK;

    OUTREG(EVERGREEN_CUR_UPDATE + radeon_crtc->crtc_offset, tmp);
}

d139 1
a139 5
    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	evergreen_setup_cursor(crtc, TRUE);
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
d141 3
d158 1
a158 1
        OUTREGP(RADEON_MM_DATA, RADEON_CRTC_CUR_EN | 2 << 20,
d172 1
a172 5
    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	evergreen_setup_cursor(crtc, FALSE);
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
d174 3
a198 1
    RADEONEntPtr pRADEONEnt = RADEONEntPriv(pScrn);
a205 1
    int w = CURSOR_WIDTH;
a217 30

	if (pRADEONEnt->Controller[0]->enabled &&
	    pRADEONEnt->Controller[1]->enabled) {
	    int cursor_end, frame_end;

	    cursor_end = x - xorigin + w;
	    frame_end = crtc->x + mode->CrtcHDisplay;

	    if (cursor_end >= frame_end) {
		w = w - (cursor_end - frame_end);
		if (!(frame_end & 0x7f))
		    w--;
	    } else {
		if (!(cursor_end & 0x7f))
		    w--;
	    }
	    if (w <= 0)
		w = 1;
	}
    }

    if (IS_DCE4_VARIANT) {
	evergreen_lock_cursor(crtc, TRUE);
	OUTREG(EVERGREEN_CUR_POSITION + radeon_crtc->crtc_offset, ((xorigin ? 0 : x) << 16)
	       | (yorigin ? 0 : y));
	OUTREG(EVERGREEN_CUR_HOT_SPOT + radeon_crtc->crtc_offset, (xorigin << 16) | yorigin);
	OUTREG(EVERGREEN_CUR_SIZE + radeon_crtc->crtc_offset,
	       ((w - 1) << 16) | (CURSOR_HEIGHT - 1));
	evergreen_lock_cursor(crtc, FALSE);
    } else if (IS_AVIVO_VARIANT) {
a221 1
	OUTREG(AVIVO_D1CUR_SIZE + radeon_crtc->crtc_offset, ((w - 1) << 16) | (CURSOR_HEIGHT - 1));
d259 1
a259 1
    uint32_t *pixels = (uint32_t *)(pointer)(info->FB + pScrn->fbOffset + radeon_crtc->cursor_offset);
d302 1
a302 1
    uint32_t *d = (uint32_t *)(pointer)(info->FB + pScrn->fbOffset + radeon_crtc->cursor_offset);
a322 1
    unsigned char     *RADEONMMIO = info->MMIO;
d324 4
d330 10
a339 7
    for (c = 0; c < xf86_config->num_crtc; c++) {
	xf86CrtcPtr crtc = xf86_config->crtc[c];
	RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;

	if (!info->useEXA) {
	    int size_bytes  = CURSOR_WIDTH * 4 * CURSOR_HEIGHT;
	    int align = IS_AVIVO_VARIANT ? 4096 : 256;
d342 1
a342 2
		radeon_legacy_allocate_memory(pScrn, &radeon_crtc->cursor_mem,
				size_bytes, align, RADEON_GEM_DOMAIN_VRAM);
a352 5
	/* set the cursor mode the same on both crtcs to avoid corruption */
	/* XXX check if this is needed on evergreen */
	if (IS_AVIVO_VARIANT)
	    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset,
		   (AVIVO_D1CURSOR_MODE_24BPP << AVIVO_D1CURSOR_MODE_SHIFT));
@


1.3
log
@update do xf86-video-ati 6.12.2

This has been in snapshots for weeks. ok oga@@, todd@@.
@
text
@d76 1
d82 5
a86 3
#define CURSOR_SWAPPING_END()	(OUTREG(RADEON_SURFACE_CNTL, \
					info->ModeReg->surface_cntl))

d103 4
a106 1
    OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset, 0);
d109 7
a117 2
	OUTREG(AVIVO_D1CUR_SIZE + radeon_crtc->crtc_offset,
	       ((CURSOR_WIDTH - 1) << 16) | (CURSOR_HEIGHT - 1));
d141 43
d193 5
a197 1
    if (IS_AVIVO_VARIANT) {
a198 3
	OUTREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset,
	       INREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset)
	       | AVIVO_D1CURSOR_EN);
d213 1
a213 1
        OUTREGP(RADEON_MM_DATA, RADEON_CRTC_CUR_EN | 2 << 20, 
d227 5
a231 1
    if (IS_AVIVO_VARIANT) {
a232 3
	OUTREG(AVIVO_D1CUR_CONTROL+ radeon_crtc->crtc_offset,
	       INREG(AVIVO_D1CUR_CONTROL + radeon_crtc->crtc_offset)
	       & ~(AVIVO_D1CURSOR_EN));
d255 1
d263 1
d276 30
d310 1
d348 1
a348 1
    uint32_t *pixels = (uint32_t *)(pointer)(info->FB + radeon_crtc->cursor_offset);
d391 1
a391 1
    uint32_t *d = (uint32_t *)(pointer)(info->FB + radeon_crtc->cursor_offset);
d412 1
a413 4
    int                width;
    int		       width_bytes;
    int                height;
    int                size_bytes;
d416 7
a422 10
    size_bytes  = CURSOR_WIDTH * 4 * CURSOR_HEIGHT;
    width       = pScrn->displayWidth;
    width_bytes = width * (pScrn->bitsPerPixel / 8);
    height      = ((size_bytes * xf86_config->num_crtc) + width_bytes - 1) / width_bytes;
    int align = IS_AVIVO_VARIANT ? 4096 : 256;

    if (!info->useEXA) {
	for (c = 0; c < xf86_config->num_crtc; c++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[c];
	    RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;
d425 2
a426 1
		radeon_legacy_allocate_memory(pScrn, &radeon_crtc->cursor_mem, size_bytes, align);
d437 5
@


1.2
log
@Long awaited update of xf86-video-ati to 6.9.0.

the rage128 and mach64 drivers were split out of this driver just after
the 6.8.0 release, these drivers will be commited separately.

MergedFb mode is gone, so please use xrandr if you used to use it.

ok matthieu@@.
@
text
@a211 5
    if (mode->Flags & V_INTERLACE)
	y /= 2;
    else if (mode->Flags & V_DBLSCAN)
	y *= 2;

d214 4
a217 2
	x += crtc->x;
	y += crtc->y;
d224 3
a327 1
    uint32_t           cursor_offset = 0;
d334 1
a335 1
#ifdef USE_XAA
d337 15
a351 30
	int align = IS_AVIVO_VARIANT ? 4096 : 256;
	FBAreaPtr          fbarea;

	fbarea = xf86AllocateOffscreenArea(pScreen, width, height,
					   align, NULL, NULL, NULL);

	if (!fbarea) {
	    cursor_offset    = 0;
	    xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
		   "Hardware cursor disabled"
		   " due to insufficient offscreen memory\n");
	    return FALSE;
	} else {
	    cursor_offset  = RADEON_ALIGN((fbarea->box.x1 +
					   fbarea->box.y1 * width) *
					  info->CurrentLayout.pixel_bytes,
					  align);

	    for (c = 0; c < xf86_config->num_crtc; c++) {
		xf86CrtcPtr crtc = xf86_config->crtc[c];
		RADEONCrtcPrivatePtr radeon_crtc = crtc->driver_private;

		radeon_crtc->cursor_offset = cursor_offset + (c * size_bytes);

		xf86DrvMsg(pScrn->scrnIndex, X_INFO,
			   "Using hardware cursor %d (scanline %u)\n", c,
			   (unsigned)(radeon_crtc->cursor_offset / pScrn->displayWidth
				      / info->CurrentLayout.pixel_bytes));
	    }

a353 1
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/ati/radeon_cursor.c,v 1.25 2003/08/29 21:07:57 tsi Exp $ */
d34 1
a34 1
/* #define RADEONCTRACE(x) RADEONTRACE(x)  */
a57 1
#include "radeon_mergedfb.h"
a61 8
/* Mono ARGB cursor colours (premultiplied). */
static CARD32 mono_cursor_color[] = {
	0x00000000, /* White, fully transparent. */
	0x00000000, /* Black, fully transparent. */
	0xffffffff, /* White, fully opaque. */
	0xff000000, /* Black, fully opaque. */
};

a64 2
#define COMMON_CURSOR_SWAPPING_START()	 RADEON_SYNC(info, pScrn)

a75 1
    COMMON_CURSOR_SWAPPING_START(); \
d77 1
a77 1
	   (info->ModeReg.surface_cntl | \
d82 1
a82 1
					info->ModeReg.surface_cntl))
d87 1
a87 4
#define CURSOR_SWAPPING_START() \
  do { \
    COMMON_CURSOR_SWAPPING_START(); \
  } while (0)
d92 160
d253 2
a254 2
/* Set cursor foreground and background colors */
static void RADEONSetCursorColors(ScrnInfoPtr pScrn, int bg, int fg)
d256 4
a259 2
    RADEONInfoPtr  info       = RADEONPTR(pScrn);
    CARD32        *pixels     = (CARD32 *)(pointer)(info->FB + info->cursor_offset);
a292 80

/* Set cursor position to (x,y) with offset into cursor bitmap at
 * (xorigin,yorigin)
 */
static void RADEONSetCursorPosition(ScrnInfoPtr pScrn, int x, int y)
{
    RADEONInfoPtr      info       = RADEONPTR(pScrn);
    unsigned char     *RADEONMMIO = info->MMIO;
    xf86CursorInfoPtr  cursor     = info->cursor;
    int                xorigin    = 0;
    int                yorigin    = 0;
    int                total_y    = pScrn->frameY1 - pScrn->frameY0;
    int		       stride     = 256;

    if(info->MergedFB) {
       RADEONCTRACE(("RADEONSetCursorPositionMerged\n"));
       RADEONSetCursorPositionMerged(pScrn, x, y);
       return;
    }

    RADEONCTRACE(("RADEONSetCursorPosition\n"));

    if (x < 0)                        xorigin = -x+1;
    if (y < 0)                        yorigin = -y+1;
    if (y > total_y)                  y       = total_y;
    if (info->Flags & V_DBLSCAN)      y       *= 2;
    if (xorigin >= cursor->MaxWidth)  xorigin = cursor->MaxWidth - 1;
    if (yorigin >= cursor->MaxHeight) yorigin = cursor->MaxHeight - 1;

    if (!info->IsSecondary) {
	OUTREG(RADEON_CUR_HORZ_VERT_OFF,  (RADEON_CUR_LOCK
					   | (xorigin << 16)
					   | yorigin));
	OUTREG(RADEON_CUR_HORZ_VERT_POSN, (RADEON_CUR_LOCK
					   | ((xorigin ? 0 : x) << 16)
					   | (yorigin ? 0 : y)));
	RADEONCTRACE(("cursor_offset: 0x%x, yorigin: %d, stride: %d\n",
		     info->cursor_offset, yorigin, stride));
	OUTREG(RADEON_CUR_OFFSET, info->cursor_offset + yorigin * stride);
    } else {
	OUTREG(RADEON_CUR2_HORZ_VERT_OFF,  (RADEON_CUR2_LOCK
					    | (xorigin << 16)
					    | yorigin));
	OUTREG(RADEON_CUR2_HORZ_VERT_POSN, (RADEON_CUR2_LOCK
					    | ((xorigin ? 0 : x) << 16)
					    | (yorigin ? 0 : y)));
	OUTREG(RADEON_CUR2_OFFSET,
	       info->cursor_offset + pScrn->fbOffset + yorigin * stride);
    }

}

/* Copy cursor image from `image' to video memory.  RADEONSetCursorPosition
 * will be called after this, so we can ignore xorigin and yorigin.
 */
static void RADEONLoadCursorImage(ScrnInfoPtr pScrn, unsigned char *image)
{
    RADEONInfoPtr  info       = RADEONPTR(pScrn);
    unsigned char *RADEONMMIO = info->MMIO;
    CARD8         *s          = (CARD8 *)(pointer)image;
    CARD32        *d          = (CARD32 *)(pointer)(info->FB + info->cursor_offset);
    CARD32         save1      = 0;
    CARD32         save2      = 0;
    CARD8	   chunk;
    CARD32         i, j;

    RADEONCTRACE(("RADEONLoadCursorImage (at %x)\n", info->cursor_offset));

    if (!info->IsSecondary) {
	save1 = INREG(RADEON_CRTC_GEN_CNTL) & ~(CARD32) (3 << 20);
	save1 |= (CARD32) (2 << 20);
	OUTREG(RADEON_CRTC_GEN_CNTL, save1 & (CARD32)~RADEON_CRTC_CUR_EN);
    }

    if (info->IsSecondary || info->MergedFB) {
	save2 = INREG(RADEON_CRTC2_GEN_CNTL) & ~(CARD32) (3 << 20);
	save2 |= (CARD32) (2 << 20);
	OUTREG(RADEON_CRTC2_GEN_CNTL, save2 & (CARD32)~RADEON_CRTC2_CUR_EN);
    }

a293 19
    info->cursor_argb = FALSE;
#endif

    /*
     * Convert the bitmap to ARGB32.
     *
     * HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1 always places
     * source in the low bit of the pair and mask in the high bit,
     * and MSBFirst machines set HARDWARE_CURSOR_BIT_ORDER_MSBFIRST
     * (which actually bit swaps the image) to make the bits LSBFirst
     */
    CURSOR_SWAPPING_START();
#define ARGB_PER_CHUNK	(8 * sizeof (chunk) / 2)
    for (i = 0; i < (CURSOR_WIDTH * CURSOR_HEIGHT / ARGB_PER_CHUNK); i++) {
        chunk = *s++;
	for (j = 0; j < ARGB_PER_CHUNK; j++, chunk >>= 2)
	    *d++ = mono_cursor_color[chunk & 3];
    }
    CURSOR_SWAPPING_END();
d295 2
a296 13
    info->cursor_bg = mono_cursor_color[2];
    info->cursor_fg = mono_cursor_color[3];

    if (!info->IsSecondary)
	OUTREG(RADEON_CRTC_GEN_CNTL, save1);

    if (info->IsSecondary || info->MergedFB)
	OUTREG(RADEON_CRTC2_GEN_CNTL, save2);

}

/* Hide hardware cursor. */
static void RADEONHideCursor(ScrnInfoPtr pScrn)
d298 5
a302 59
    RADEONInfoPtr  info       = RADEONPTR(pScrn);
    unsigned char *RADEONMMIO = info->MMIO;

    RADEONCTRACE(("RADEONHideCursor\n"));

    if (info->IsSecondary || info->MergedFB)
	OUTREGP(RADEON_CRTC2_GEN_CNTL, 0, ~RADEON_CRTC2_CUR_EN);

    if (!info->IsSecondary)
	OUTREGP(RADEON_CRTC_GEN_CNTL, 0, ~RADEON_CRTC_CUR_EN);
}

/* Show hardware cursor. */
static void RADEONShowCursor(ScrnInfoPtr pScrn)
{
    RADEONInfoPtr  info       = RADEONPTR(pScrn);
    unsigned char *RADEONMMIO = info->MMIO;

    RADEONCTRACE(("RADEONShowCursor\n"));

    if (info->IsSecondary || info->MergedFB)
	OUTREGP(RADEON_CRTC2_GEN_CNTL, RADEON_CRTC2_CUR_EN,
		~RADEON_CRTC2_CUR_EN);

    if (!info->IsSecondary)
	OUTREGP(RADEON_CRTC_GEN_CNTL, RADEON_CRTC_CUR_EN,
		~RADEON_CRTC_CUR_EN);
}

/* Determine if hardware cursor is in use. */
static Bool RADEONUseHWCursor(ScreenPtr pScreen, CursorPtr pCurs)
{
    ScrnInfoPtr    pScrn = xf86Screens[pScreen->myNum];
    RADEONInfoPtr  info  = RADEONPTR(pScrn);

    return info->cursor ? TRUE : FALSE;
}

#ifdef ARGB_CURSOR
#include "cursorstr.h"

static Bool RADEONUseHWCursorARGB (ScreenPtr pScreen, CursorPtr pCurs)
{
    if (RADEONUseHWCursor(pScreen, pCurs) &&
	pCurs->bits->height <= CURSOR_HEIGHT && pCurs->bits->width <= CURSOR_WIDTH)
	return TRUE;
    return FALSE;
}

static void RADEONLoadCursorARGB (ScrnInfoPtr pScrn, CursorPtr pCurs)
{
    RADEONInfoPtr  info       = RADEONPTR(pScrn);
    unsigned char *RADEONMMIO = info->MMIO;
    CARD32        *d          = (CARD32 *)(pointer)(info->FB + info->cursor_offset);
    int            x, y, w, h;
    CARD32         save1      = 0;
    CARD32         save2      = 0;
    CARD32	  *image = pCurs->bits->argb;
    CARD32	  *i;
a305 13
    if (!info->IsSecondary) {
	save1 = INREG(RADEON_CRTC_GEN_CNTL) & ~(CARD32) (3 << 20);
	save1 |= (CARD32) (2 << 20);
	OUTREG(RADEON_CRTC_GEN_CNTL, save1 & (CARD32)~RADEON_CRTC_CUR_EN);
    }

    if (info->IsSecondary || info->MergedFB) {
	save2 = INREG(RADEON_CRTC2_GEN_CNTL) & ~(CARD32) (3 << 20);
	save2 |= (CARD32) (2 << 20);
	OUTREG(RADEON_CRTC2_GEN_CNTL, save2 & (CARD32)~RADEON_CRTC2_CUR_EN);
    }

#ifdef ARGB_CURSOR
a306 1
#endif
d310 1
a310 20
    w = pCurs->bits->width;
    if (w > CURSOR_WIDTH)
	w = CURSOR_WIDTH;
    h = pCurs->bits->height;
    if (h > CURSOR_HEIGHT)
	h = CURSOR_HEIGHT;
    for (y = 0; y < h; y++)
    {
	i = image;
	image += pCurs->bits->width;
	for (x = 0; x < w; x++)
	    *d++ = *i++;
	/* pad to the right with transparent */
	for (; x < CURSOR_WIDTH; x++)
	    *d++ = 0;
    }
    /* pad below with transparent */
    for (; y < CURSOR_HEIGHT; y++)
	for (x = 0; x < CURSOR_WIDTH; x++)
	    *d++ = 0;
a312 7

    if (!info->IsSecondary)
	OUTREG(RADEON_CRTC_GEN_CNTL, save1);

    if (info->IsSecondary || info->MergedFB)
	OUTREG(RADEON_CRTC2_GEN_CNTL, save2);

d323 1
a323 1
    xf86CursorInfoPtr  cursor;
d328 2
d331 4
a334 31
    if (!(cursor = info->cursor = xf86CreateCursorInfoRec())) return FALSE;

    cursor->MaxWidth          = CURSOR_WIDTH;
    cursor->MaxHeight         = CURSOR_HEIGHT;
    cursor->Flags             = (HARDWARE_CURSOR_TRUECOLOR_AT_8BPP
				 | HARDWARE_CURSOR_AND_SOURCE_WITH_MASK
#if X_BYTE_ORDER == X_BIG_ENDIAN
				 /* this is a lie --
				  * HARDWARE_CURSOR_BIT_ORDER_MSBFIRST
				  * actually inverts the bit order, so
				  * this switches to LSBFIRST
				  */
				 | HARDWARE_CURSOR_BIT_ORDER_MSBFIRST
#endif
				 | HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_1);

    cursor->SetCursorColors   = RADEONSetCursorColors;
    cursor->SetCursorPosition = RADEONSetCursorPosition;
    cursor->LoadCursorImage   = RADEONLoadCursorImage;
    cursor->HideCursor        = RADEONHideCursor;
    cursor->ShowCursor        = RADEONShowCursor;
    cursor->UseHWCursor       = RADEONUseHWCursor;

#ifdef ARGB_CURSOR
    cursor->UseHWCursorARGB   = RADEONUseHWCursorARGB;
    cursor->LoadCursorARGB    = RADEONLoadCursorARGB;
#endif
    size_bytes                = CURSOR_WIDTH * 4 * CURSOR_HEIGHT;
    width                     = pScrn->displayWidth;
    width_bytes		      = width * (pScrn->bitsPerPixel / 8);
    height                    = (size_bytes + width_bytes - 1) / width_bytes;
d338 1
d342 1
a342 1
					   256, NULL, NULL, NULL);
d345 1
a345 1
	    info->cursor_offset    = 0;
d349 1
d351 17
a367 5
	    info->cursor_offset  = RADEON_ALIGN((fbarea->box.x1 +
						fbarea->box.y1 * width) *
						info->CurrentLayout.pixel_bytes,
						256);
	    info->cursor_end = info->cursor_offset + size_bytes;
a368 2
	RADEONCTRACE(("RADEONCursorInit (0x%08x-0x%08x)\n",
		    info->cursor_offset, info->cursor_end));
d372 5
a376 1
    return xf86InitCursor(pScreen, cursor);
@


1.1.1.1
log
@Importing xf86-video-ati 6.6.3
@
text
@@
