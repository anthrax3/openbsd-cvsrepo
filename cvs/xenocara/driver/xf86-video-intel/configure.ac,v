head	1.17;
access;
symbols
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.2
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.6
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.2
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.2
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.2
	v2_2_0_90:1.1.1.5
	v2_2_0:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.2
	OPENBSD_4_2_BASE:1.1.1.3
	v1_7_4:1.1.1.3
	v1_7_3:1.1.1.2
	v1_7_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2015.04.12.19.41.55;	author matthieu;	state Exp;
branches;
next	1.16;
commitid	DK857Z2Au1JEohAk;

1.16
date	2014.02.14.19.38.40;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2014.02.03.15.54.42;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.18.18.38.20;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.19.21.19.49;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.29.12.39.02;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.23.21.28.34;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.10.22.32.28;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.26.23.28.00;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.01.20.51.41;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.26.14.24.16;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.29.20.13.42;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.21.20.19.51;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.30.13.51.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.06.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.06.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.16.21.01.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.03.03.09.49.28;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.11.24.19.44.17;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.02.11.20.09.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Update to xf86-video-intel 2.99.916
Fixes a display bug seenby ajacoutot@@, ok jsg@@ and kettenis@@.
newer X.Org (2.99.917 or master) version cause corruption on older
machines (X40, i965), probably caused by a bug in our kernel,
under investigation by kettenis@@.
@
text
@#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([xf86-video-intel],
        [2.99.916],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        [xf86-video-intel])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_AUX_DIR(.)

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen.
  Hint: either install from source, git://anongit.freedesktop.org/xorg/util/macros or,
  depending on you distribution, try package 'xutils-dev' or 'xorg-x11-util-macros'])])

XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

# And disable a few very noisy warnings
m4_ifdef([XORG_TESTSET_CFLAG], [
XORG_TESTSET_CFLAG([NOWARNFLAGS], [-Wno-cast-qual])
XORG_TESTSET_CFLAG([NOWARNFLAGS], [-Wno-redundant-decls])
XORG_TESTSET_CFLAG([NOWARNFLAGS], [-Wno-maybe-uninitialized])
])
AC_SUBST(NOWARNFLAGS)

# Require X.Org server macros (i.e. XORG_DRIVER_CHECK_EXT) to check for required modules 
m4_ifndef([XORG_DRIVER_CHECK_EXT],
          [m4_fatal([must install xorg-server macros before running autoconf/autogen.
  Hint: either install from source, git://anongit.freedesktop.org/xorg/xserver or,
  depending on your distribution, try package 'xserver-xorg-dev' or 'xorg-x11-server-devel'])])

# Initialize libtool
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
AC_SYS_LARGEFILE

# Check for common libc routines redefined by os.h
AC_CHECK_FUNCS([strlcpy strlcat strndup], [], [])

# Platform specific settings
case $host_os in
  *linux*)
    backlight_helper=yes
    ;;
esac

AC_ARG_ENABLE(backlight,
              AS_HELP_STRING([--disable-backlight],
			     [Enable control over the backlight [default=yes]]),
              [backlight="$enableval"],
              [backlight="yes"])
if test "x$backlight" = "xyes"; then
	AC_DEFINE(USE_BACKLIGHT, 1, [Enable control of the backlight])
fi

AC_ARG_ENABLE(backlight-helper,
              AS_HELP_STRING([--disable-backlight-helper],
			     [Enable building the backlight helper executable for running X under a normal user [default=auto]]),
              [backlight_helper="$enableval"],)
AM_CONDITIONAL(BUILD_BACKLIGHT_HELPER, [test "x$backlight" = "xyes" -a "x$backlight_helper" = "xyes"])
if test "x$backlight_helper" = "xyes"; then
	tools_msg="$tools_msg xf86-video-intel-backlight-helper"
	AC_DEFINE(USE_BACKLIGHT_HELPER, 1, [Enable use of the backlight helper interfaces])
fi

# Are we in a git checkout?
dot_git=no
if test -e .git; then
	AC_DEFINE(HAVE_DOT_GIT, 1, [Are we in a git checkout?])
	dot_git=yes
fi
AM_CONDITIONAL(HAVE_DOT_GIT, test "x$dot_git" = "xyes")

# If so, we include the git description in our logs for sanity checking.
#
# However, for people not running their own drivers this is just noise.
# So we copy the xserver's builderstring idiom to allow for this to be
# overridden and perhaps replaced with something more useful.
AC_ARG_WITH(builderstring,
	    AS_HELP_STRING([--with-builderstring=BUILDERSTRING],
			   [Additional builder string (default: use git describe)]),
	    [BUILDERSTRING="$withval"],
	    [BUILDERSTRING="x-magic-git-describe"])

if test "x$BUILDERSTRING" = "xx-magic-git-describe" -a "x$dot_git" = "xyes"; then
	AC_DEFINE(USE_GIT_DESCRIBE, 1, [Use automagic builder description])
else
  if test "x$BUILDERSTRING" != x -a "x$BUILDERSTRING" != "xno" -a "x$BUILDERSTRING" != xx-magic-git-describe; then
	  AC_DEFINE_UNQUOTED(BUILDER_DESCRIPTION, ["$BUILDERSTRING"], [Builder description])
  fi
fi

AC_ARG_ENABLE(gen4asm,
              AS_HELP_STRING([--enable-gen4asm],
			     [Enable rebuilding the gen4 assembly files [default=no]]),
              [ASM="$enableval"],
              [ASM="no"])

gen4asm=no
if test "x$ASM" != "xno"; then
	AC_ARG_WITH(gen4asm,
		    AS_HELP_STRING([--with-gen4asm=PATH],
				   [Path to intel-gen4asm binary]),
		    [path="$withval"],
		    [path=""])
	if test -n "$path" ; then
		gen4asm=yes
	else
		PKG_CHECK_MODULES(GEN4ASM, [intel-gen4asm >= 1.2], [gen4asm=yes], [gen4asm=no])
		if test "x$ASM" = "xyes" -a "x$gen4asm" != "xyes"; then
			AC_MSG_ERROR([intel-gen4asm support requested but not found])
		fi
	fi
	if test "x$gen4asm" = "xyes"; then
		AC_MSG_CHECKING([path to use for intel-gen4asm])
		if test -n "$path" ; then
			INTEL_GEN4ASM="$path"
		else
			INTEL_GEN4ASM="`pkg-config intel-gen4asm --variable=exec_prefix`/bin/intel-gen4asm"
		fi
		if ! test -e "$INTEL_GEN4ASM"; then
			AC_MSG_ERROR([intel-gen4asm enabled, but not found. Tried '$INTEL_GEN4ASM'.])
		fi
		AC_MSG_RESULT([$INTEL_GEN4ASM])
		AC_SUBST([INTEL_GEN4ASM])
	fi
fi
AM_CONDITIONAL(HAVE_GEN4ASM, test "x$gen4asm" = "xyes")

# Check for atomic intrinsics
AC_CACHE_CHECK([for native atomic primitives], intel_cv_atomic_primitives,
[
    intel_cv_atomic_primitives="none"

    AC_LINK_IFELSE([AC_LANG_PROGRAM([[
int atomic_add(int i) { return __sync_fetch_and_add (&i, 1); }
int atomic_cmpxchg(int i, int j, int k) { return __sync_val_compare_and_swap (&i, j, k); }
				    ]],[[]])],
		   [intel_cv_atomic_primitives="Intel"],[])

    if test "x$intel_cv_atomic_primitives" = "xnone"; then
	    AC_CHECK_HEADER([atomic_ops.h], intel_cv_atomic_primitives="libatomic-ops")
    fi

    # atomic functions defined in <atomic.h> & libc on Solaris
    if test "x$intel_cv_atomic_primitives" = "xnone"; then
	    AC_CHECK_FUNC([atomic_cas_uint],
			  intel_cv_atomic_primitives="Solaris")
    fi

])
if test "x$intel_cv_atomic_primitives" = "xIntel"; then
    AC_DEFINE(HAVE_ATOMIC_PRIMITIVES, 1,
	      [Enable if your compiler supports the Intel __sync_* atomic primitives])
fi
if test "x$intel_cv_atomic_primitives" = "xlibatomic-ops"; then
    AC_DEFINE(HAVE_LIB_ATOMIC_OPS, 1, [Enable if you have libatomic-ops-dev installed])
fi

if test "x$intel_cv_atomic_primitives" = "xnone"; then
		AC_MSG_ERROR([xf86-video-intel depends upon atomic operations, which were not found for your compiler/cpu. Try compiling with -march=native, or install the libatomics-op-dev package.])
fi

AC_ARG_ENABLE(udev,
              AS_HELP_STRING([--disable-udev],
                             [Disable udev-based monitor hotplug detection [default=auto]]),
              [UDEV="$enableval"],
              [UDEV=auto])

if test "x$UDEV" != "xno"; then
	PKG_CHECK_MODULES(UDEV, [libudev], [udev="yes"], [udev="no"])
	if test "x$UDEV" = "xyes" -a "x$udev" != "xyes"; then
		AC_MSG_ERROR([udev support requested but not found (libudev)])
	fi
	if test "x$udev" = "xyes"; then
		AC_DEFINE(HAVE_UDEV,1,[Enable udev-based monitor hotplug detection])
	fi
fi

PKG_CHECK_MODULES(X11, [x11 xrender xrandr xext xfixes cairo cairo-xlib-xrender pixman-1 libpng], [x11="yes"], [x11="no"])
AM_CONDITIONAL(HAVE_X11, test "x$x11" = "xyes")

cpuid="yes"
AC_TRY_LINK([
	#include <cpuid.h>
	#include <stddef.h>
	],
	[
	int eax, ebx, ecx, edx;
	if (__get_cpuid_max(0, NULL) < 4)
		return 0;
	__cpuid_count(4, 0, eax, ebx, ecx, edx);
	],
	[cpuid="yes"],
	[cpuid="no"]
)
if test "x$cpuid" = "xyes"; then
	AC_DEFINE(HAVE_CPUID_H,1,[Found a useable cpuid.h])
fi

shm=yes
AC_CHECK_HEADERS([sys/ipc.h sys/ipc.h], [], [shm="no"])
AC_CHECK_HEADERS([X11/extensions/XShm.h], [], [shm="no"], [
#include <X11/Xlibint.h>
#include <X11/Xproto.h>
])
AC_CHECK_HEADERS([X11/extensions/shmproto.h X11/extensions/shmstr.h], [], [], [
#include <X11/Xlibint.h>
#include <X11/Xproto.h>
])
if test "x$ac_cv_header_X11_extensions_shmproto_h" != "xyes" -a "x$ac_cv_header_X11_extensions_shmstr_h" != "xyes"; then
	shm="no"
fi

if test "x$shm" = "xyes"; then
	AC_MSG_CHECKING(whether shmctl IPC_RMID allows subsequent attaches)
	AC_TRY_RUN([
		  #include <sys/types.h>
		  #include <sys/ipc.h>
		  #include <sys/shm.h>
		  int main()
		  {
		      char *shmaddr;
		      int id = shmget (IPC_PRIVATE, 4, IPC_CREAT | 0600);
		      if (id == -1) return 2;
		      shmaddr = shmat (id, 0, 0);
		      shmctl (id, IPC_RMID, 0);
		      if ((char*) shmat (id, 0, 0) == (char*) -1) {
			  shmdt (shmaddr);
			  return 1;
		      }
		      shmdt (shmaddr);
		      shmdt (shmaddr);
		      return 0;
		  }
		  ],
		  AC_DEFINE(IPC_RMID_DEFERRED_RELEASE, 1,
			    [Define to 1 if shared memory segments are released deferred.])
		  AC_MSG_RESULT(yes),
		  AC_MSG_RESULT(no),
		  AC_MSG_RESULT(assuming no))
	AC_DEFINE([HAVE_MIT_SHM], 1, [Define to 1 if MIT-SHM is available])
fi

PKG_CHECK_MODULES(X11_DRI3, [xcb-dri3 xcb-sync xcb-present x11-xcb xshmfence x11 xrender xext libdrm], [x11_dri3="yes"], [x11_dri3="no"])
AM_CONDITIONAL(X11_DRI3, test "x$x11_dri3" = "xyes" -a "x$shm" = "xyes")
AM_CONDITIONAL(X11_SHM, test "x$shm" = "xyes")

AC_ARG_ENABLE(tools,
              AS_HELP_STRING([--disable-tools],
			     [Enable building and installing the miscellaneous tools [default=auto]]),
              [tools="$enableval"], [tools="auto"])
if test "x$shm" != "xyes"; then
	if test "x$tools" = "xyes"; then
		AC_MSG_ERROR([Incomplete requirements for extra tools, X11 MIT-SHM extension required])
	fi
	tools="no"
fi
if test "x$tools" != "xno"; then
	ivo_requires="xrandr xdamage xfixes xcursor xtst xrender xext x11 pixman-1"
	extra_cflags=""

	ignore="xinerama"
	PKG_CHECK_MODULES(IVO_EXTRA, [$ignore],
			  [AC_CHECK_HEADERS([X11/extensions/Xinerama.h], [ivo_requires="$ignore $ivo_requires"], [],
					    [#include <X11/Xlibint.h>
					     #include <X11/Xproto.h>
					    ])], [ignore=""])

	ignore="xcb-dri3 xcb-sync x11-xcb xshmfence x11"
	PKG_CHECK_MODULES(IVO_EXTRA, [$ignore], [ivo_requires="$ivo_requires $ignore"; extra_cflags="-DDRI3"], [ignore=""])

	PKG_CHECK_MODULES(IVO, [$ivo_requires], [ivo="yes"], [ivo="no"])
	AC_CHECK_HEADER([sys/timerfd.h], [], [ivo="no"])
	if test "x$ivo" = "xno"; then
		if test "x$tools" = "xyes"; then
			AC_MSG_ERROR([Incomplete requirements for intel-virtual-output, requires $ivo_requires])
		fi
		tools="no"
	fi

	IVO_CFLAGS="$IVO_CFLAGS $extra_cflags"
fi
if test "x$tools" != "xno"; then
      tools_msg="$tools_msg intel-virtual-output"
fi
AC_MSG_CHECKING([whether to build additional tools])
AC_MSG_RESULT([$tools])
AM_CONDITIONAL(BUILD_TOOLS, test "x$tools" != "xno")

# Define a configure option for an alternate module directory
AC_ARG_WITH(xorg-module-dir,
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])

AC_ARG_ENABLE(dri,
	      AS_HELP_STRING([--disable-dri],
			     [Disable DRI support [[default=auto]]]),
	      [DRI=$enableval],
	      [DRI=auto])
AC_ARG_ENABLE(dri1,
	      AS_HELP_STRING([--disable-dri1],
			     [Disable DRI1 support [[default=yes]]]),
	      [DRI1=$enableval],
	      [DRI1=yes])
AC_ARG_ENABLE(dri2,
	      AS_HELP_STRING([--disable-dri2],
			     [Disable DRI2 support [[default=yes]]]),
	      [DRI2=$enableval],
	      [DRI2=yes])
AC_ARG_ENABLE(dri3,
	      AS_HELP_STRING([--disable-dri3],
			     [Disable DRI3 support [[default=yes]]]),
	      [DRI3=$enableval],
	      [DRI3=yes])

AC_ARG_ENABLE(xvmc, AS_HELP_STRING([--disable-xvmc],
                                  [Disable XvMC support [[default=yes]]]),
              [XVMC="$enableval"],
              [XVMC="yes"])

AC_ARG_ENABLE(kms,
	      AS_HELP_STRING([--enable-kms],
			     [Assume KMS support [[default=yes]]]),
              [KMS="$enableval"],
              [KMS="yes"])
AC_ARG_ENABLE(ums,
	      AS_HELP_STRING([--enable-ums],
			     [Assume UMS support [[default=auto]]]),
              [UMS="$enableval"],
              [UMS="auto"])

AC_ARG_ENABLE(kms-only,
	      AS_HELP_STRING([--enable-kms-only],
			     [Only assume KMS support (no UMS) [[default=no]]]),
              [ONLY_KMS="$enableval"],
              [ONLY_KMS="no"])

AC_ARG_ENABLE(ums-only,
	      AS_HELP_STRING([--enable-ums-only],
			     [Only assume UMS support (no KMS) [[default=no]]]),
              [ONLY_UMS="$enableval"],
              [ONLY_UMS="no"])

required_xorg_server_version=1.6
required_pixman_version=0.16

if pkg-config --exists 'pixman-1 >= 0.27.1'; then
	AC_DEFINE([HAS_PIXMAN_GLYPHS], 1, [Enable pixman glyph cache])
fi

if pkg-config --exists 'pixman-1 >= 0.24.0'; then
	AC_DEFINE([HAS_PIXMAN_TRIANGLES], 1, [Enable pixman triangle rasterisation])
fi

# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(DRM, [libdrm >= 2.4.20]) # libdrm_intel is checked separately
PKG_CHECK_MODULES(PCIACCESS, [pciaccess >= 0.10])

AC_ARG_ENABLE(sna,
	      AS_HELP_STRING([--enable-sna],
			     [Enable SandyBridge\'s New Acceleration (SNA) [default=auto]]),
	      [SNA="$enableval"],
	      [SNA=auto])

if test "x$SNA" != "xno"; then
	AC_DEFINE(USE_SNA, 1, [Enable SNA support])
	AC_CHECK_HEADERS([sys/sysinfo.h], AC_CHECK_MEMBERS([struct sysinfo.totalram], [], [], [[#include <sys/sysinfo.h>]]))
fi

uxa_requires_libdrm=2.4.52
AC_ARG_ENABLE(uxa,
	      AS_HELP_STRING([--enable-uxa],
			     [Enable Unified Acceleration Architecture (UXA) [default=auto]]),
	      [UXA="$enableval"],
	      [UXA=auto])
if test "x$UXA" = "xauto"; then
	if ! pkg-config --exists "libdrm_intel >= $uxa_requires_libdrm"; then
		UXA=no
	fi
	if ! pkg-config --exists 'pixman-1 >= 0.24.0'; then
		UXA=no
	fi
fi
if test "x$UXA" != "xno"; then
	AC_DEFINE(USE_UXA, 1, [Enable UXA support])
	PKG_CHECK_MODULES(DRMINTEL, [libdrm_intel >= $uxa_requires_libdrm])
	required_pixman_version=0.24
	UXA=yes
fi

AC_ARG_ENABLE(glamor,
	      AS_HELP_STRING([--enable-glamor],
			     [Enable glamor, a new GL-based acceleration [default=no]]),
	      [GLAMOR="$enableval"],
	      [GLAMOR="no"])
if test "x$GLAMOR" != "xno"; then
	if test "x$UXA" != "xyes"; then
		AC_MSG_ERROR([Glamor acceleration requested but UXA is not enabled])
	fi
	if pkg-config --exists "xorg-server >= 1.15.99.901"; then
		GLAMOR="yes (using Xorg glamor module)"
	else
		PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.6.0])
		PKG_CHECK_MODULES(LIBGLAMOR_EGL, [glamor-egl])
		GLAMOR="yes (using libglamor)"
	fi
	AC_DEFINE(USE_GLAMOR, 1, [Enable glamor acceleration])
fi

PKG_CHECK_MODULES(XORG, [xorg-server >= $required_xorg_server_version xproto fontsproto pixman-1 >= $required_pixman_version $REQUIRED_MODULES])
ABI_VERSION=`$PKG_CONFIG --variable=abi_videodrv xorg-server`

if test "x$ONLY_UMS" = "xyes"; then
	UMS="yes"
	KMS="no"
fi

if test "x$ONLY_KMS" = "xyes"; then
	UMS="no"
	KMS="yes"
fi

save_CPPFLAGS=$CPPFLAGS
CPPFLAGS=$XORG_CFLAGS
AC_CHECK_HEADERS([vgaHW.h], legacy="yes", legacy="no")
CPPFLAGS=$save_CPPFLAGS
if test "x$UMS" = "xauto"; then
	UMS="$legacy"
fi
if test "x$UMS" = "xyes" -a "x$legacy" = "xno"; then
	AC_MSG_ERROR([vgaHW support required for UMS (i810) driver])
fi

if test "x$UMS" = "xyes"; then
	AC_ARG_ENABLE(xaa,
		      AS_HELP_STRING([--enable-xaa],
				     [Enable legacy X Acceleration Architecture (XAA) for i810 chipsets [default=auto]]),
		      [XAA="$enableval"],
		      [XAA="auto"])
	if test "x$XAA" != "xno"; then
		save_CPPFLAGS=$CPPFLAGS
		CPPFLAGS=$XORG_CFLAGS
		AC_CHECK_HEADERS([xaa.h], XAA="yes", XAA="no")
		CPPFLAGS=$save_CPPFLAGS
	fi
	AC_MSG_CHECKING([whether to include XAA support])
	AC_MSG_RESULT([$XAA])

	AC_ARG_ENABLE(dga,
		      AS_HELP_STRING([--enable-dga],
				     [Enable legacy Direct Graphics Access (DGA) for i810 chipsets [default=auto]]),
		      [DGA="$enableval"],
		      [DGA="auto"])
	if test "x$DGA" != "xno"; then
		save_CFLAGS=$CFLAGS
		CFLAGS=$XORG_CFLAGS
		AC_CHECK_HEADERS([dgaproc.h], DGA="yes", DGA="no", [#include <dixstruct.h>])
		CFLAGS=$save_CFLAGS
	fi
	AC_MSG_CHECKING([whether to include DGA support])
	AC_MSG_RESULT([$DGA])
fi
AM_CONDITIONAL(DGA, test "x$DGA" = "xyes")
AM_CONDITIONAL(XAA, test "x$XAA" = "xyes")

AM_CONDITIONAL(KMS, test "x$KMS" = "xyes")
if test "x$KMS" = "xyes"; then
	AC_DEFINE(KMS,1,[Assume KMS support])
fi
AM_CONDITIONAL(UMS, test "x$UMS" = "xyes")
if test "x$UMS" = "xyes"; then
	AC_DEFINE(UMS,1,[Assume UMS support])
fi

have_dri1=no
XORG_DRIVER_CHECK_EXT(XF86DRI, xf86driproto)
if test "x$_EXT_CHECK" != "xno" -a "x$DRI" != "xno" -a "x$DRI1" != "xno" -a "x$UMS" = "xyes"; then
	PKG_CHECK_MODULES(DRI1, [xf86driproto], [have_dri1=$DRI], [have_dri1=no])
        save_CFLAGS="$CFLAGS"
        save_CPPFLAGS="$CPPFLAGS"
        CFLAGS="$CFLAGS $XORG_CFLAGS $DRI1_CFLAGS $DRM_CFLAGS"
        CPPFLAGS="$CPPFLAGS $XORG_CFLAGS $DRI1_CFLAGS $DRM_CFLAGS"
        AC_CHECK_HEADERS([dri.h sarea.h dristruct.h], [], [have_dri1=no],
                [/* for dri.h */
                 #include <xf86str.h>
                 /* for dristruct.h */
                 #include <xorg-server.h>
                 #ifdef HAVE_DRI_H
                 # include <dri.h>
                 #endif
                 #ifdef HAVE_SAREA_H
                 # include <sarea.h>
                 #endif
                ])
        CFLAGS="$save_CFLAGS"
        CPPFLAGS="$save_CPPFLAGS"
fi

AC_MSG_CHECKING([whether to include DRI1 support])
AC_MSG_RESULT([$have_dri1])

AM_CONDITIONAL(DRI1, test "x$have_dri1" != "xno")
if test "x$have_dri1" != "xno"; then
        AC_DEFINE(HAVE_DRI1,1,[Enable DRI1 driver support])
	dri_msg="$dri_msg DRI1"
else
        DRI1_CFLAGS=""
        DRI1_LIBS=""

        if test "x$DRI" = "xyes" -a "x$UMS" = "xyes" -a "x$DRI1" != "xno"; then
                AC_MSG_ERROR([DRI1 requested but prerequisites not found])
        fi
fi

have_dri2=no
have_dri3=no
if test "x$DRI" != "xno"; then
	if test "x$DRI2" != "xno"; then
		PKG_CHECK_MODULES(DRI2, [dri2proto >= 2.6], [have_dri2=$DRI], [have_dri2=no])
	fi
	if test "x$have_dri2" != "xno"; then
		save_CFLAGS=$CFLAGS
		CFLAGS="$XORG_CFLAGS $DRM_CFLAGS $DRI1_CFLAGS $DRI2_CFLAGS"
		AC_CHECK_HEADERS([dri2.h], [], [have_dri2=no], [
#include <dixstruct.h>
#include <drm.h>
])
		CFLAGS=$save_CFLAGS
	fi
	if test "x$have_dri2" != "xno"; then
		dridriverdir=`$PKG_CONFIG --variable=dridriverdir dri`
		if test "x$dridriverdir" = "x"; then
			dridriverdir="$libdir/dri"
		fi
		AC_DEFINE_DIR(DRI_DRIVER_PATH, dridriverdir, [Default have_dri2 driver path])
	fi

	if test "x$DRI3" != "xno"; then
		XORG_DRIVER_CHECK_EXT(DRI3, dri3proto)
		if test "x$_EXT_CHECK" != "xno"; then
			PKG_CHECK_MODULES(DRI3, [dri3proto], [have_dri3=$DRI], [])
		fi
	fi
	if test "x$have_dri3" != "xno"; then
		save_CFLAGS=$CFLAGS
		CFLAGS="$XORG_CFLAGS $DRI3_CFLAGS"
		AC_CHECK_DECL(DRI3, [], [have_dri3=no], [#include <xorg-server.h>])
		AC_CHECK_HEADERS([misyncstr.h misyncshm.h], [], [have_dri3=no], [
#include <xorg-server.h>
#include <xf86str.h>
#include <misync.h>
])
		CFLAGS=$save_CFLAGS
	fi
fi

AC_MSG_CHECKING([whether to include DRI2 support])
AM_CONDITIONAL(DRI2, test "x$have_dri2" != "xno")
AC_MSG_RESULT([$have_dri2])
if test "x$have_dri2" != "xno"; then
        AC_DEFINE(HAVE_DRI2,1,[Enable DRI2 driver support])
	dri_msg="$dri_msg DRI2"
else
	if test "x$DRI" = "xyes" -a "x$DRI2" != "xno" -a "x$KMS" = "xyes"; then
		AC_MSG_ERROR([DRI2 requested but prerequisites not found])
	fi

	# UXA doesn't build without DRI2 headers, too late to fix
	UXA=no
fi

AC_MSG_CHECKING([whether to include DRI3 support])
AM_CONDITIONAL(DRI3, test "x$have_dri3" != "xno")
AC_MSG_RESULT([$have_dri3])
if test "x$have_dri3" != "xno"; then
        AC_DEFINE(HAVE_DRI3,1,[Enable DRI3 driver support])
	dri_msg="$dri_msg DRI3"
else
	if test "x$DRI" = "xyes" -a "x$DRI3" != "xno" -a "x$KMS" = "xyes"; then
		AC_MSG_ERROR([DRI3 requested but prerequisites not found])
	fi
fi

AC_CHECK_HEADERS([X11/extensions/dpmsconst.h])

PRESENT="no"
XORG_DRIVER_CHECK_EXT(PRESENT, presentproto)
if test "x$_EXT_CHECK" != "xno"; then
	PKG_CHECK_MODULES(PRESENT, [presentproto], [PRESENT="yes"], [])
fi
if test "x$PRESENT" != "xno"; then
	save_CFLAGS=$CFLAGS
	CFLAGS="$XORG_CFLAGS $PRESENT_CFLAGS"
	AC_CHECK_HEADERS([present.h], [], [PRESENT="no"], [
#include <xorg-server.h>
#include <xf86str.h>
])
	CFLAGS=$save_CFLAGS
fi
AC_MSG_CHECKING([whether to include PRESENT support])
AM_CONDITIONAL(PRESENT, test "x$PRESENT" != "xno")
AC_MSG_RESULT([$PRESENT])
if test "x$PRESENT" != "xno"; then
        AC_DEFINE(HAVE_PRESENT,1,[Enable PRESENT driver support])
	dri_msg="$dri_msg Present"
fi

AC_MSG_CHECKING([whether to include UXA support])
AC_MSG_RESULT([$UXA])
AM_CONDITIONAL(UXA, test "x$UXA" != "xno")

AC_MSG_CHECKING([whether to include GLAMOR support])
AC_MSG_RESULT([$GLAMOR])
AM_CONDITIONAL(GLAMOR, test "x$GLAMOR" != "xno")

AC_MSG_CHECKING([whether to include SNA support])
AM_CONDITIONAL(SNA, test "x$SNA" != "xno")
AC_MSG_RESULT([$SNA])

if test "$XVMC" = "yes"; then
	PKG_CHECK_MODULES(XVMCLIB, [xvmc dri2proto x11 x11-xcb xcb-dri2 xcb-aux libdrm_intel], [], [XVMC="no"])
fi
AC_MSG_CHECKING([whether to include XvMC support])
AC_MSG_RESULT([$XVMC])
AM_CONDITIONAL(XVMC, test "x$XVMC" = "xyes")
if test "x$XVMC" = "xyes"; then
	AC_DEFINE(ENABLE_XVMC,1,[Enable XvMC support])
	xvmc_msg=" yes"
else
	xvmc_msg=" no"
fi


AC_ARG_WITH(default-accel,
	    AS_HELP_STRING([--with-default-accel],
			   [Select the default acceleration method out of glamor, none, sna, or uxa  [default is sna if enabled, otherwise uxa]]),
			   [accel="$withval"],
			   [accel="auto"])
if test "x$accel" = "xyes"; then
	AC_MSG_WARN([No default acceleration specified, choosing automatic selection])
	accel="auto"
fi

AC_MSG_CHECKING([which acceleration method to use by default])
if test "x$accel" = "xauto"; then
	if test "x$SNA" != "xno"; then
		accel="sna"
	else
		if test "x$UXA" != "xno"; then
			accel="uxa"
		fi
	fi
	if test "x$accel" = "xauto" -a "x$KMS" = "xyes"; then
		AC_MSG_ERROR([No default acceleration option])
	fi
fi

have_accel="none"
if test "x$accel" = "xsna"; then
	if test "x$SNA" != "xno"; then
		AC_DEFINE(DEFAULT_ACCEL_METHOD, SNA, [Default acceleration method])
		have_accel="yes"
	else
		AC_MSG_ERROR([SNA requested as default, but is not enabled])
	fi
fi

if test "x$accel" = "xuxa"; then
	if test "x$UXA" != "xno"; then
		AC_DEFINE(DEFAULT_ACCEL_METHOD, UXA, [Default acceleration method])
		have_accel="yes"
	else
		AC_MSG_ERROR([UXA requested as default, but is not enabled])
	fi
fi

if test "x$accel" = "xglamor"; then
	if test "x$GLAMOR" != "xno"; then
		AC_DEFINE(DEFAULT_ACCEL_METHOD, GLAMOR, [Default acceleration method])
		have_accel="yes"
	else
		AC_MSG_ERROR([glamor acceleration requested as default, but is not enabled])
	fi
fi

if test "x$have_accel" = "xnone"; then
	if test "x$KMS" = "xyes"; then
		if test "x$SNA" != "xno" -o "x$UXA" != "xno"; then
			AC_DEFINE(DEFAULT_ACCEL_METHOD, NOACCEL, [Default acceleration method])
		else
			AC_MSG_ERROR([Invalid default acceleration option])
		fi
	fi
	accel="none"
fi
AC_MSG_RESULT($accel)

xp_msg=""

AC_ARG_ENABLE(tear-free,
	      AS_HELP_STRING([--enable-tear-free],
			     [Enable use of TearFree by default [default=no]]),
	      [TEARFREE="$enableval"],
	      [TEARFREE="no"])
if test "x$TEARFREE" = "xyes"; then
	AC_DEFINE(TEARFREE,1,[Enable "TearFree" by default])
	xp_msg="$xp_msg TearFree"
fi

AC_ARG_ENABLE(rendernode,
	      AS_HELP_STRING([--enable-rendernode],
			     [Enable use of render nodes (experimental) [default=no]]),
	      [RENDERNODE="$enableval"],
	      [RENDERNODE="no"])
AM_CONDITIONAL(USE_RENDERNODE, test "x$RENDERNODE" = "xyes")
if test "x$RENDERNODE" = "xyes"; then
	AC_DEFINE(USE_RENDERNODE,1,[Assume "rendernode" support])
	xp_msg="$xp_msg rendernode"
fi

AC_ARG_ENABLE(create2,
	      AS_HELP_STRING([--enable-create2],
			     [Enable use of create2 ioctl (experimental) [default=no]]),
	      [CREATE2="$enableval"],
	      [CREATE2="no"])
AM_CONDITIONAL(USE_CREATE2, test "x$CREATE2" = "xyes")
if test "x$CREATE2" = "xyes"; then
	AC_DEFINE(USE_CREATE2,1,[Assume "create2" support])
	xp_msg="$xp_msg create2"
fi

AC_ARG_ENABLE(async-swap,
	      AS_HELP_STRING([--enable-async-swap],
			     [Enable use of asynchronous swaps (experimental) [default=no]]),
	      [ASYNC_SWAP="$enableval"],
	      [ASYNC_SWAP="no"])
AM_CONDITIONAL(USE_ASYNC_SWAP, test "x$ASYNC_SWAP" = "xyes")
if test "x$ASYNC_SWAP" = "xyes"; then
	AC_DEFINE(USE_ASYNC_SWAP,1,[Assume asynchronous swap support])
	xp_msg="$xp_msg async-swap"
fi

AC_ARG_ENABLE(debug,
	      AS_HELP_STRING([--enable-debug],
			     [Enables internal debugging [default=no]]),
              [DEBUG="$enableval"],
              [DEBUG="no"])
AC_ARG_ENABLE(valgrind,
	      AS_HELP_STRING([--enable-valgrind],
			     [Enables valgrindified ioctls for debugging [default=no]]),
              [VG="$enableval"],
              [VG="no"])

LIBS=""
AC_SEARCH_LIBS(clock_gettime, rt, [CLOCK_GETTIME_LIBS=$LIBS])
AC_SUBST(CLOCK_GETTIME_LIBS)

sdkdir=`$PKG_CONFIG --variable=sdkdir xorg-server`

AM_CONDITIONAL(DEBUG, test "x$DEBUG" != "xno")
AM_CONDITIONAL(FULL_DEBUG, test "x$DEBUG" = "xfull")
if test "x$DEBUG" = "xno"; then
	AC_DEFINE(NDEBUG,1,[Disable internal debugging])
else
	if test "x$VG" != "xyes"; then
		VG=auto
	fi
fi
debug_msg=""
have_valgrind="no"
if test "x$VG" != "xno"; then
	PKG_CHECK_MODULES(VALGRIND, [valgrind], have_valgrind="yes", have_valgrind="no")
	AC_MSG_CHECKING([whether to include valgrind support])
	if test "x$have_valgrind" = "xyes"; then
		AC_DEFINE([HAVE_VALGRIND], 1, [Use valgrind intrinsics to suppress false warnings])
	else
		if test "x$VG" = "xyes"; then
			AC_MSG_ERROR([valgrind support requested, but valgrind-dev headers not found])
		fi
	fi
	AC_MSG_RESULT([$have_valgrind ($VG)])
fi
AM_CONDITIONAL(VALGRIND, test "x$have_valgrind" = "xyes")
if test "x$have_valgrind" = "xyes"; then
	debug_msg="$debug_msg valgrind"
fi
if test "x$DEBUG" = "xsync"; then
	AC_DEFINE(DEBUG_SYNC,1,[Enable synchronous rendering for debugging])
	debug_msg="$debug_msg sync"
fi
if test "x$DEBUG" = "xmemory"; then
	AC_DEFINE(DEBUG_MEMORY,1,[Enable memory debugging])
	debug_msg="$debug_msg memory"
fi
if test "x$DEBUG" = "xpixmap"; then
	AC_DEFINE(DEBUG_PIXMAP,1,[Enable pixmap debugging])
	debug_msg="$debug_msg pixmaps"
fi
if test "x$DEBUG" = "xfull"; then
	AC_DEFINE(DEBUG_MEMORY,1,[Enable memory debugging])
	AC_DEFINE(DEBUG_PIXMAP,1,[Enable pixmap debugging])
	AC_DEFINE(HAS_DEBUG_FULL,1,[Enable all debugging])
        CFLAGS="$CFLAGS -O0 -ggdb3"
	debug_msg=" full"
fi
if test "x$debug_msg" = "x"; then
	debug_msg=" none"
fi

AC_CONFIG_LIBOBJ_DIR(libobj)
AC_REPLACE_FUNCS(getline)

DRIVER_NAME="intel"
AC_SUBST([DRIVER_NAME])
AC_SUBST([moduledir])
AC_DEFINE_DIR([PREFIX_PATH], prefix, [installation prefix])
AC_DEFINE_DIR([LIBEXEC_PATH], libexecdir, [libexec directory])

AC_CONFIG_FILES([
                Makefile
                man/Makefile
		libobj/Makefile
                src/Makefile
                src/legacy/Makefile
                src/legacy/i810/Makefile
                src/legacy/i810/xvmc/Makefile
                src/render_program/Makefile
                src/sna/Makefile
                src/sna/brw/Makefile
                src/sna/fb/Makefile
                src/uxa/Makefile
                xvmc/Makefile
                xvmc/shader/Makefile
                xvmc/shader/mc/Makefile
                xvmc/shader/vld/Makefile
		test/Makefile
		tools/Makefile
		tools/org.x.xf86-video-intel.backlight-helper.policy
])
AC_OUTPUT

echo ""
echo ""
test -e `pwd $0`/README && cat `pwd $0`/README

accel_msg=""
if test "x$SNA" != "xno"; then
	if test "$accel" = "none"; then
		accel_msg="$accel_msg *none"
	else
		accel_msg="$accel_msg none"
	fi
	if test "$accel" = "sna"; then
		accel_msg="$accel_msg *sna"
	else
		accel_msg="$accel_msg sna"
	fi
fi
if test "x$UXA" != "xno"; then
	if test "x$SNA" = "xno"; then
		if test "$accel" = "none"; then
			accel_msg="$accel_msg *none"
		else
			accel_msg="$accel_msg none"
		fi
	fi
	if test "$accel" = "uxa"; then
		accel_msg="$accel_msg *uxa"
	else
		accel_msg="$accel_msg uxa"
	fi
fi
if test "x$GLAMOR" != "xno"; then
	if test "$accel" = "glamor"; then
		accel_msg="$accel_msg *glamor"
	else
		accel_msg="$accel_msg glamor"
	fi
fi

if test "x$dri_msg" = "x"; then
	dri_msg=" none"
fi

if test "x$tools_msg" = "x"; then
	tools_msg=" none"
fi

echo ""
echo "AC_PACKAGE_STRING will be compiled with:"
echo "  Xorg Video ABI version: $ABI_VERSION"
echo "  Acceleration backends:$accel_msg"
echo "  Additional debugging support?$debug_msg"
echo "  Support for Kernel Mode Setting? $KMS"
echo "  Support for legacy User Mode Setting (for i810)? $UMS"
echo "  Support for Direct Rendering Infrastructure:$dri_msg"
echo "  Support for Xv motion compensation (XvMC and libXvMC):$xvmc_msg"
echo "  Build additional tools and utilities?$tools_msg"
if test -n "$xp_msg"; then
echo "  Experimental support:$xp_msg"
fi
echo ""
@


1.16
log
@Update to xf86-video-intel 2.99.910 (aka 3.0RC10) tested by jsg@@ and me.
@
text
@d26 1
a26 1
        [2.99.910],
d65 29
d208 1
a208 1
PKG_CHECK_MODULES(X11, [x11 xrender xrandr xext xfixes pixman-1], [x11="yes"], [x11="no"])
d211 31
a241 1
PKG_CHECK_MODULES(TOOL, [xinerama xrandr xdamage xfixes xcursor xtst xrender xext x11 pixman-1], [tools="yes"], [tools="no"])
d243 3
a245 8
if test "x$tools" = "xyes"; then
  AC_CHECK_HEADER([sys/ipc.h], [], [tools=no])
  AC_CHECK_HEADER([sys/shm.h], [], [tools=no])
  AC_CHECK_HEADER([sys/timerfd.h], [], [tools=no])

  if test "$ac_cv_header_sys_ipc_h" = "yes" -a "$ac_cv_header_sys_shm_h" = "yes"; then
      AC_MSG_CHECKING(whether shmctl IPC_RMID allows subsequent attaches)
      AC_TRY_RUN([
d270 2
a271 1
      fi
d273 38
a310 3
      AC_CHECK_HEADERS([X11/extensions/XShm.h X11/extensions/shmproto.h X11/extensions/shmstr.h], [], [tools=no],
		       [#include <X11/Xlibint.h>
			#include <X11/Xproto.h>])
d312 6
a317 2

AM_CONDITIONAL(BUILD_TOOLS, test "x$tools" = "xyes")
d328 18
a345 1
			     [Disable DRI support [[default=auto]]]))
a388 1
XORG_DRIVER_CHECK_EXT(XF86DRI, xextproto x11)
d406 1
d409 1
a409 1
			     [Enable Unified Acceleration Architecture (UXA) [default=yes]]),
d413 1
a413 1
	if ! pkg-config --exists 'libdrm_intel >= 2.4.29'; then
d422 1
a422 1
	PKG_CHECK_MODULES(DRMINTEL, [libdrm_intel >= 2.4.29])
d436 7
a442 2
	PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.6.0])
	PKG_CHECK_MODULES(LIBGLAMOR_EGL, [glamor-egl])
d447 1
d511 4
a514 4

DRI1=no
if test "x$enable_dri" != "xno" -a "x$UMS" = "xyes"; then
	PKG_CHECK_MODULES(DRI1, [xf86driproto], [DRI1="yes"], [DRI1="no"])
d519 1
a519 1
        AC_CHECK_HEADERS([dri.h sarea.h dristruct.h], [DRI1="yes"], [DRI1="no"],
d531 1
a531 1
        CFLAGS="$save_CFLAGS $DEBUGFLAGS"
d536 1
a536 1
AC_MSG_RESULT([$DRI1])
d538 2
a539 2
AM_CONDITIONAL(DRI1, test "x$DRI1" != "xno")
if test "x$DRI1" != "xno"; then
d546 1
a546 1
        if test "x$enable_dri" = "xyes" -a "x$UMS" = "xyes"; then
d551 5
a555 6
DRI2=no
if test "x$enable_dri" != "xno"; then
	PKG_CHECK_MODULES(DRI2, [dri2proto >= 2.6], DRI2="yes", DRI2="no")
	dridriverdir=`$PKG_CONFIG --variable=dridriverdir dri`
	if test "x$dridriverdir" = "x"; then
		dridriverdir="$libdir/dri"
d557 1
a557 2
	AC_DEFINE_DIR(DRI_DRIVER_PATH, dridriverdir, [Default DRI2 driver path])
	if test "x$DRI2" != "xno"; then
d560 1
a560 1
		AC_CHECK_HEADERS([dri2.h], DRI2="yes", DRI2="no", [
d566 25
d592 1
d594 3
a596 3
AM_CONDITIONAL(DRI2, test "x$DRI2" = "xyes")
AC_MSG_RESULT([$DRI2])
if test "x$DRI2" != "xno"; then
d600 1
a600 1
	if test "x$enable_dri" = "xyes" -a "x$KMS" = "xyes"; then
d608 12
d622 22
d657 1
a657 2
	PKG_CHECK_MODULES(XVMCLIB, [xvmc dri2proto x11], [], [XVMC="no"])
	PKG_CHECK_MODULES(XCB, [x11-xcb xcb-dri2 xcb-aux], [], [XVMC="no"])
d672 1
a672 1
			   [Select the default acceleration method [default=sna if enabled, otherwise uxa]]),
d724 5
a728 1
		AC_MSG_ERROR([Invalid default acceleration option])
d736 10
a767 11
AC_ARG_ENABLE(userptr,
	      AS_HELP_STRING([--enable-userptr],
			     [Enable use of userptr (experimental) [default=no]]),
	      [USERPTR="$enableval"],
	      [USERPTR="no"])
AM_CONDITIONAL(USE_USERPTR, test "x$USERPTR" = "xyes")
if test "x$USERPTR" = "xyes"; then
	AC_DEFINE(USE_USERPTR,1,[Assume "userptr" support])
	xp_msg="$xp_msg userptr"
fi

d846 3
d852 2
d858 1
d874 1
d878 4
d884 5
d896 7
d921 1
a921 3
if test "x$tools" = "xyes"; then
	tools_msg=" intel-virtual-output"
else
d927 1
@


1.15
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@d26 1
a26 1
        [2.99.909],
@


1.14
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@d26 1
a26 1
        [2.20.19],
d31 1
d46 8
d71 1
a71 1
AM_CONDITIONAL(HAVE_DOT_GIT, test x$dot_git = xyes)
d84 1
a84 1
if test "x$BUILDERSTRING" = xx-magic-git-describe -a x$dot_git = xyes; then
d87 1
a87 1
  if test "x$BUILDERSTRING" != x -a "x$BUILDERSTRING" != xno -a "x$BUILDERSTRING" != xx-magic-git-describe; then
d96 1
a96 1
              [ASM=no])
d99 13
a111 4
if test x$ASM != "xno"; then
	PKG_CHECK_MODULES(GEN4ASM, [intel-gen4asm >= 1.2], [gen4asm=yes], [gen4asm=no])
	if test x$ASM = "xyes" -a x$gen4asm != "xyes"; then
		AC_MSG_ERROR([intel-gen4asm support requested but not found])
d113 1
a113 1
	if test x$gen4asm = "xyes"; then
d115 5
a119 1
		INTEL_GEN4ASM="`pkg-config intel-gen4asm --variable=exec_prefix`/bin/intel-gen4asm"
d127 35
a161 1
AM_CONDITIONAL(HAVE_GEN4ASM, test x$gen4asm = xyes)
d169 3
a171 3
if test x$UDEV != "xno"; then
	PKG_CHECK_MODULES(UDEV, [libudev], [udev=yes], [udev=no])
	if test x$UDEV = xyes -a x$udev != xyes; then
d174 1
a174 1
	if test x$udev = xyes; then
d179 2
a180 2
PKG_CHECK_MODULES(X11, [x11 xrender xext pixman-1], [x11=yes], [x11=no])
AM_CONDITIONAL(HAVE_X11, test x$x11 = xyes)
d182 42
a223 1
AH_TOP([#include "xorg-server.h"])
d232 3
a234 2
AC_ARG_ENABLE(dri, AS_HELP_STRING([--disable-dri],
                                  [Disable DRI support [[default=auto]]]))
d239 1
a239 1
              [XVMC=yes])
d241 22
a262 8
AC_ARG_ENABLE(kms-only, AS_HELP_STRING([--enable-kms-only],
                                  [Assume KMS support [[default=no]]]),
              [KMS_ONLY="$enableval"],
              [KMS_ONLY=no])
AC_ARG_ENABLE(ums-only, AS_HELP_STRING([--enable-ums-only],
                                  [Assume only UMS (no KMS) support [[default=no]]]),
              [UMS_ONLY="$enableval"],
              [UMS_ONLY=no])
d264 2
a265 2
required_xorg_xserver_version=1.6
required_pixman_version=0.24
d271 14
d287 1
a287 1
			     [Enable SandyBridge's New Acceleration (SNA) [default=auto]]),
a290 4
AC_CHECK_HEADERS([sys/sysinfo.h], , SNA=no)
if test "x$SNA" = "xauto" && pkg-config --exists "xorg-server >= 1.10"; then
	SNA=yes
fi
a291 1
	required_xorg_xserver_version=1.10
d293 1
a294 3
AC_MSG_CHECKING([whether to include SNA support])
AM_CONDITIONAL(SNA, test x$SNA != xno)
AC_MSG_RESULT([$SNA])
d300 9
a308 4
	      [UXA=yes])
AC_MSG_CHECKING([whether to include UXA support])
AM_CONDITIONAL(UXA, test x$UXA != xno)
AC_MSG_RESULT([$UXA])
d312 2
a315 1
AC_MSG_CHECKING([whether to include GLAMOR support])
d320 1
a320 3
	      [GLAMOR=no])
AC_MSG_RESULT([$GLAMOR])
AM_CONDITIONAL(GLAMOR, test x$GLAMOR != xno)
d322 4
a325 1
	PKG_CHECK_MODULES(LIBGLAMOR, [glamor >= 0.3.1])
d330 1
d332 162
a493 1
PKG_CHECK_MODULES(XORG, [xorg-server >= $required_xorg_xserver_version xproto fontsproto pixman-1 >= $required_pixman_version $REQUIRED_MODULES])
a494 29
AC_ARG_ENABLE(xaa,
	      AS_HELP_STRING([--enable-xaa],
			     [Enable legacy X Acceleration Architecture (XAA) [default=auto]]),
	      [XAA="$enableval"],
	      [XAA=auto])
if test "x$XAA" != xno; then
        save_CFLAGS=$CFLAGS
        CFLAGS=$XORG_CFLAGS
	AC_CHECK_HEADERS([xaa.h], XAA=yes, XAA=no)
        CFLAGS=$save_CFLAGS
fi
AC_MSG_CHECKING([whether to include XAA support])
AM_CONDITIONAL(XAA, test "x$XAA" = xyes)
AC_MSG_RESULT([$XAA])

AC_ARG_ENABLE(dga,
	      AS_HELP_STRING([--enable-dga],
			     [Enable legacy Direct Graphics Access (DGA) [default=auto]]),
	      [DGA="$enableval"],
	      [DGA=auto])
if test "x$DGA" != xno; then
        save_CFLAGS=$CFLAGS
        CFLAGS=$XORG_CFLAGS
	AC_CHECK_HEADERS([dgaproc.h], DGA=yes, DGA=no, [#include <dixstruct.h>])
        CFLAGS=$save_CFLAGS
fi
AC_MSG_CHECKING([whether to include DGA support])
AM_CONDITIONAL(DGA, test "x$DGA" = xyes)
AC_MSG_RESULT([$DGA])
d498 1
a498 1
			   [Select the default acceleration method [default=uxa if enabled, otherwise sna]]),
d500 2
a501 2
			   [accel=auto])
if test "x$accel" = xyes; then
d507 3
a509 3
if test "x$accel" = xauto; then
	if test "x$UXA" != "xno"; then
		accel=uxa
d511 2
a512 2
		if test "x$SNA" != "xno"; then
			accel=sna
d515 1
a515 1
	if test "x$accel" = xauto -a "x$UMS_ONLY" != "xyes"; then
d520 2
a521 2
have_accel=none
if test "x$accel" = xsna; then
d524 1
a524 1
		have_accel=yes
d530 1
a530 1
if test "x$accel" = xuxa; then
d533 1
a533 1
		have_accel=yes
d538 16
d555 23
a577 2
if test "x$accel" = xnone -a "x$UMS_ONLY" != "xyes"; then
	AC_MSG_ERROR([No default acceleration option])
d584 5
a588 22
	      [USERPTR=no])
AM_CONDITIONAL(USE_USERPTR, test x$USERPTR = xyes)
if test "x$USERPTR" = xyes; then
	AC_DEFINE(USE_USERPTR,1,[Assume USERPTR support])
fi

AC_ARG_ENABLE(fast-reloc,
	      AS_HELP_STRING([--enable-fast-reloc],
			     [Enable use of "fast reloc" (experimental) [default=no]]),
	      [FASTRELOC="$enableval"],
	      [FASTRELOC=no])
if test "x$FASTRELOC" = xyes; then
	AC_DEFINE(USE_FASTRELOC,1,[Assume "fast reloc" support])
fi

AC_ARG_ENABLE(handle-lut,
	      AS_HELP_STRING([--enable-handle-lut],
			     [Enable use of "handle LUT" (experimental) [default=no]]),
	      [HANDLE_LUT="$enableval"],
	      [HANDLE_LUT=no])
if test "x$HANDLE_LUT" = xyes; then
	AC_DEFINE(USE_HANDLE_LUT,1,[Assume "handle LUT" support])
d595 3
a597 3
	      [ASYNC_SWAP=no])
AM_CONDITIONAL(USE_ASYNC_SWAP, test x$ASYNC_SWAP = xyes)
if test "x$ASYNC_SWAP" = xyes; then
d599 1
d606 10
a615 12
              [DEBUG=no])
# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(XF86DRI, xextproto x11)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(DRM, [libdrm >= 2.4.24]) # libdrm_intel is checked separately
PKG_CHECK_MODULES(DRI, [xf86driproto], , DRI=no)
PKG_CHECK_MODULES(DRI2, [dri2proto >= 2.6],, DRI2=no)
PKG_CHECK_MODULES(PCIACCESS, [pciaccess >= 0.10])
d619 4
a622 19
if test "x$enable_dri" != "xno"; then
        save_CFLAGS="$CFLAGS"
        save_CPPFLAGS="$CPPFLAGS"
        CFLAGS="$CFLAGS $XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
        CPPFLAGS="$CPPFLAGS $XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
        AC_CHECK_HEADERS([dri.h sarea.h dristruct.h],, [DRI=no],
                [/* for dri.h */
                 #include <xf86str.h>
                 /* for dristruct.h */
                 #include <xorg-server.h>
                 #ifdef HAVE_DRI_H
                 # include <dri.h>
                 #endif
                 #ifdef HAVE_SAREA_H
                 # include <sarea.h>
                 #endif
                ])
        CFLAGS="$save_CFLAGS $DEBUGFLAGS"
        CPPFLAGS="$save_CPPFLAGS"
d624 3
a626 32
        DRI=no
fi

AC_MSG_CHECKING([whether to include DRI support])
AC_MSG_RESULT([${DRI-yes}])

AM_CONDITIONAL(DRI, test x$DRI != xno)
if test "x$DRI" != "xno"; then
        AC_DEFINE(HAVE_DRI1,1,[Enable DRI driver support])
else
        DRI_CFLAGS=""
        DRI_LIBS=""

        if test "x$enable_dri" = "xyes"; then
                AC_MSG_ERROR([DRI requested but prerequisites not found])
        fi
fi

if test "x$DRI2" != "xno"; then
	save_CFLAGS=$CFLAGS
	CFLAGS="$XORG_CFLAGS $DRM_CFLAGS $DRI_CFLAGS $DRI2_CFLAGS"
	AC_CHECK_HEADERS([dri2.h], DRI2=yes, DRI2=no, [#include <dixstruct.h>])
	CFLAGS=$save_CFLAGS
fi
AC_MSG_CHECKING([whether to include DRI2 support])
AM_CONDITIONAL(DRI2, test "x$DRI2" = xyes)
AC_MSG_RESULT([$DRI2])

if test "$XVMC" = yes; then
	PKG_CHECK_MODULES(XVMCLIB,
			  [xvmc xext xfixes dri2proto x11-xcb xcb-dri2 xcb-aux],
			  [XVMC=yes], [XVMC=no])
d628 6
a633 24
AC_MSG_CHECKING([whether to include XvMC support])
AC_MSG_RESULT([$XVMC])
AM_CONDITIONAL(XVMC, test x$XVMC = xyes)
if test "x$XVMC" = xyes; then
	AC_DEFINE(ENABLE_XVMC,1,[Enable XvMC support])
fi

AM_CONDITIONAL(KMS_ONLY, test x$KMS_ONLY = xyes)
if test "x$KMS_ONLY" = xyes; then
	AC_DEFINE(KMS_ONLY,1,[Assume KMS support])
fi
AM_CONDITIONAL(UMS_ONLY, test x$UMS_ONLY = xyes)
if test "x$UMS_ONLY" = xyes; then
	AC_DEFINE(UMS_ONLY,1,[Assume only UMS (no KMS) support])
fi

AM_CONDITIONAL(DEBUG, test x$DEBUG != xno)
AM_CONDITIONAL(FULL_DEBUG, test x$DEBUG = xfull)
if test "x$DEBUG" = xno; then
	AC_DEFINE(NDEBUG,1,[Disable internal debugging])
fi
if test "x$DEBUG" != xno; then
	PKG_CHECK_MODULES(VALGRIND, [valgrind], have_valgrind=yes, have_valgrind=no)
	if test x$have_valgrind = xyes; then
d635 4
d640 5
d646 1
a646 1
if test "x$DEBUG" = xsync; then
d648 1
d650 1
a650 1
if test "x$DEBUG" = xmemory; then
d652 1
d654 1
a654 1
if test "x$DEBUG" = xpixmap; then
d656 1
d658 1
a658 1
if test "x$DEBUG" = xfull; then
d663 4
d669 1
a669 1
DRIVER_NAME=intel
d675 1
a675 1
                uxa/Makefile
a676 4
                src/xvmc/Makefile
                src/xvmc/shader/Makefile
                src/xvmc/shader/mc/Makefile
                src/xvmc/shader/vld/Makefile
d680 1
d684 5
a688 2
                man/Makefile
                src/render_program/Makefile
d690 1
d693 47
@


1.13
log
@- sync the "legacy" i810 driver, used only on true i810 and i815
  chipsets to the one in recent intel driver from X.Org.

- remove one of the output probe method in i830PreInit(). This method is
  calling functions that are normally forbidden in PreInit(). With
  xserver 1.13 this causes a fatal error at run time.

Tested by bluhm@@, nick@@ and shadchin@@ back in september.
@
text
@d26 1
a26 1
        [2.12.0],
d30 1
a30 1
AM_CONFIG_HEADER([config.h])
a34 1
AM_MAINTAINER_MODE
d38 4
a41 1
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
d45 6
d54 9
d64 41
a104 1
PKG_CHECK_MODULES(GEN4ASM, [intel-gen4asm >= 1.2], [gen4asm=yes], [gen4asm=no])
d107 19
d136 1
a136 3
                                  [Disable DRI support [[default=auto]]]),
              [DRI="$enableval"],
              [DRI=auto])
d147 59
d208 4
a211 4
	     AS_HELP_STRING([--enable-xaa],
			    [Enable legacy X Acceleration Architecture (XAA) [default=auto]]),
	     [XAA="$enableval"],
	     [XAA=auto])
d213 2
a214 2
	save_CFLAGS=$CFLAGS
	CFLAGS=$XORG_CFLAGS
d216 1
a216 1
	CFLAGS=$save_CFLAGS
d223 4
a226 4
	     AS_HELP_STRING([--enable-dga],
			    [Enable legacy Direct Graphics Access (DGA) [default=auto]]),
	     [DGA="$enableval"],
	     [DGA=auto])
d228 2
a229 2
	save_CFLAGS=$CFLAGS
	CFLAGS=$XORG_CFLAGS
d231 1
a231 1
	CFLAGS=$save_CFLAGS
d237 84
d324 1
a324 1
			     [Enables internal debugging [[default=yes]]]),
d326 1
a326 2
              [DEBUG=yes])

d334 3
a336 2
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.6 xproto fontsproto $REQUIRED_MODULES])
PKG_CHECK_MODULES(DRM, [libdrm >= 2.4.11])
d339 1
a339 1
sdkdir=$(pkg-config --variable=sdkdir xorg-server)
d341 21
a361 11
save_CFLAGS="$CFLAGS"
CFLAGS="$XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
CPPFLAGS="$XORG_CFLAGS $DRI_CFLAGS $DRM_CFLAGS"
AC_MSG_CHECKING([whether to include DRI support])
if test x$DRI != xno; then
        AC_CHECK_FILE([${sdkdir}/dri.h],
                      [have_dri_h="yes"], [have_dri_h="no"])
        AC_CHECK_FILE([${sdkdir}/sarea.h],
                      [have_sarea_h="yes"], [have_sarea_h="no"])
        AC_CHECK_FILE([${sdkdir}/dristruct.h],
                      [have_dristruct_h="yes"], [have_dristruct_h="no"])
d363 1
d365 11
a375 7
if test x$DRI = xauto; then
        if test "$have_dri_h" = yes -a \
                "$have_sarea_h" = yes -a \
                "$have_dristruct_h" = yes; then
                DRI="yes"
        else
                DRI="no"
a377 2
AC_MSG_RESULT([$DRI])
CFLAGS="$save_CFLAGS $DEBUGFLAGS"
d379 5
a383 6
AM_CONDITIONAL(DRI, test x$DRI = xyes)
if test "$DRI" = yes; then
        PKG_CHECK_MODULES(DRI, [xf86driproto])
        AC_DEFINE(XF86DRI,1,[Enable DRI driver support])
        AC_DEFINE(HAVE_DRI1,1,[Enable DRI1 driver support])
        AC_DEFINE(XF86DRI_DEVEL,1,[Enable developmental DRI driver support])
d385 3
d405 4
d410 2
d415 21
a448 7
		src/bios_reader/Makefile
		src/ch7017/Makefile
		src/ch7xxx/Makefile
		src/ivch/Makefile
		src/reg_dumper/Makefile
		src/sil164/Makefile
		src/tfp410/Makefile
d452 3
d457 1
@


1.12
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d74 31
d153 1
@


1.11
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@d23 2
a24 1
AC_PREREQ(2.57)
d26 1
a26 1
        2.9.1,
d28 1
a28 2
        xf86-video-intel)

d33 1
a34 1

d37 4
a40 4
# Require xorg-macros: XORG_DEFAULT_OPTIONS
m4_ifndef([XORG_MACROS_VERSION], 
          [m4_fatal([must install xorg-macros 1.3 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.3)
d43 1
a43 1
# Checks for programs.
a45 2
AC_PROG_CC
AM_PROG_CC_C_O
d47 1
a47 1
PKG_CHECK_MODULES(GEN4ASM, [intel-gen4asm >= 1.0], [gen4asm=yes], [gen4asm=no])
a49 4
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/mman.h)
AC_CHECK_FUNCS(mprotect)

d52 1
d54 1
a54 1
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
d59 1
a59 1
AC_ARG_ENABLE(dri, AC_HELP_STRING([--disable-dri],
d64 1
a64 6
AC_ARG_ENABLE(video-debug, AC_HELP_STRING([--enable-video-debug],
                                  [Enable video debugging support [[default=no]]]),
              [VIDEO_DEBUG="$enableval"],
              [VIDEO_DEBUG=no])

AC_ARG_ENABLE(xvmc, AC_HELP_STRING([--disable-xvmc],
d69 1
a69 1
AC_ARG_ENABLE(kms-only, AC_HELP_STRING([--enable-kms-only],
d74 7
a80 1
# Checks for extensions
d86 1
a86 1
# Checks for pkg-config packages
a89 4
PKG_CHECK_MODULES(XEXT, [xextproto >= 7.0.99.1],
                  HAVE_XEXTPROTO_71="yes"; AC_DEFINE(HAVE_XEXTPROTO_71, 1, [xextproto 7.1 available]),
                  HAVE_XEXTPROTO_71="no")
AM_CONDITIONAL(HAVE_XEXTPROTO_71, [ test "$HAVE_XEXTPROTO_71" = "yes" ])
d120 1
a120 1
        PKG_CHECK_MODULES(DRI, [xf86driproto glproto])
a124 5
AM_CONDITIONAL(VIDEO_DEBUG, test x$VIDEO_DEBUG = xyes)
if test "$VIDEO_DEBUG" = yes; then
	AC_DEFINE(VIDEO_DEBUG,1,[Enable debug support])
fi

d133 1
a133 1
if test "$XVMC" = yes; then
d138 1
a138 1
if test "$KMS_ONLY" = yes; then
d142 3
a144 1
AC_SUBST([DRI_CFLAGS])
d150 20
a169 19
XORG_CHECK_LINUXDOC

AC_OUTPUT([
	Makefile
	uxa/Makefile
	src/Makefile
	src/xvmc/Makefile
	src/xvmc/shader/Makefile
	src/xvmc/shader/mc/Makefile
	src/xvmc/shader/vld/Makefile
	src/bios_reader/Makefile
	src/ch7017/Makefile
	src/ch7xxx/Makefile
	src/ivch/Makefile
	src/reg_dumper/Makefile
	src/sil164/Makefile
	src/tfp410/Makefile
	man/Makefile
	src/render_program/Makefile
d171 1
@


1.10
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d139 3
a141 1
	PKG_CHECK_MODULES(XVMCLIB, [xvmc xext xfixes dri2proto], [XVMC=yes], [XVMC=no])
@


1.9
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d25 1
a25 1
        2.7.1,
d33 1
a33 1
AM_INIT_AUTOMAKE([dist-bzip2])
d37 6
a45 1
DOLT
d49 1
a49 1
AC_CHECK_PROG(gen4asm, [intel-gen4asm], yes, no)
d52 1
a73 5
AC_ARG_WITH(xserver-source,AC_HELP_STRING([--with-xserver-source=XSERVER_SOURCE],
					  [Path to X server source tree]),
			   [ XSERVER_SOURCE="$withval" ],
			   [ XSERVER_SOURCE="" ])

d75 1
a75 1
                                  [Disable XvMC support [[default=auto]]]),
d77 6
a82 1
              [XVMC=auto])
a84 1
XORG_DRIVER_CHECK_EXT(XINERAMA, xineramaproto)
d91 7
a97 8
PKG_CHECK_MODULES(XORG, [xorg-server xproto fontsproto $REQUIRED_MODULES])

PKG_CHECK_MODULES(SERVER_1_5, [xorg-server >= 1.5],
			      [SERVER_1_5=yes], [SERVER_1_5=no])

if test "$SERVER_1_5" = yes; then
   AC_DEFINE(SERVER_1_5, 1, [Building against server 1.5])
fi
a99 6
drm_cflags=$(pkg-config --cflags libdrm)

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
d102 2
a103 2
CFLAGS="$XORG_CFLAGS $DRI_CFLAGS $drm_cflags"
CPPFLAGS="$XORG_CFLAGS $DRI_CFLAGS $drm_cflags"
d124 1
a125 83
AC_CHECK_HEADER(xf86Modes.h,[XMODES=yes],[XMODES=no],[#include "xorg-server.h"])
AC_CHECK_DECL(XSERVER_LIBPCIACCESS,
	      [XSERVER_LIBPCIACCESS=yes],[XSERVER_LIBPCIACCESS=no],
	      [#include "xorg-server.h"])
CFLAGS="$save_CFLAGS"

if test x$XSERVER_LIBPCIACCESS = xyes; then
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10])
else
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10],
				       have_libpciaccess=yes,
				       have_libpciaccess=no)
fi
AM_CONDITIONAL(XSERVER_LIBPCIACCESS, test "x$XSERVER_LIBPCIACCESS" = xyes)
AM_CONDITIONAL(LIBPCIACCESS,
	test "x$XSERVER_LIBPCIACCESS" = xyes -o "x$have_libpciaccess" = xyes)
AM_CONDITIONAL(XMODES, test "x$XMODES" = xno)

if test "x$XSERVER_SOURCE" = x; then
	if test -d ../../xserver; then
		XSERVER_SOURCE="`cd ../../xserver && pwd`"
	fi
fi
	
if test -d "$XSERVER_SOURCE"; then
	case "$XSERVER_SOURCE" in
	/*)
		;;
	*)
		XSERVER_SOURCE="`cd $XSERVER_SOURCE && pwd`"
		;;
	esac
	if test -f $srcdir/src/modes/xf86Modes.h; then
		:
	else
		ln -sf $XSERVER_SOURCE/hw/xfree86/modes $srcdir/src/modes
	fi
	
	if test -f $srcdir/src/parser/xf86Parser.h; then
		:
	else
		ln -sf $XSERVER_SOURCE/hw/xfree86/parser $srcdir/src/parser
	fi
fi

if test "x$XMODES" = xyes; then
	AC_MSG_NOTICE([X server has new mode code])
	AC_DEFINE(XMODES, 1,[X server has built-in mode code])
	XMODES_CFLAGS=
else
	if test -f $srcdir/src/modes/xf86Modes.h -a -f $srcdir/src/parser/xf86Parser.h; then
		AC_MSG_NOTICE([X server is missing new mode code, using local copy])
	else
		AC_MSG_ERROR([Must have X server >= 1.3 source tree for mode setting code. Please specify --with-xserver-source])
	fi
	XMODES_CFLAGS='-DXF86_MODES_RENAME -I$(top_srcdir)/src -I$(top_srcdir)/src/modes -I$(top_srcdir)/src/parser'
fi

AC_SUBST([XMODES_CFLAGS])

SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"

AC_CHECK_DECL(xf86RotateFreeShadow,
	      [AC_DEFINE(HAVE_FREE_SHADOW, 1, [have new FreeShadow API])],
	      [],
	      [#include <xorg-server.h>
	       #include <windowstr.h>
	       #include <xf86Crtc.h>])
	     
CPPFLAGS="$SAVE_CPPFLAGS"

dnl Use lots of warning flags with GCC

WARN_CFLAGS=""

if test "x$GCC" = "xyes"; then
	WARN_CFLAGS="-Wall -Wpointer-arith -Wstrict-prototypes \
	-Wmissing-prototypes -Wmissing-declarations \
	-Wnested-externs -fno-strict-aliasing"
fi

PKG_CHECK_MODULES(DRM, [libdrm >= 2.4.6])
a132 7
dnl Server 1.5's set_mode_major required for DRM_MODE.
PKG_CHECK_MODULES(DRM_MODE, [xorg-server >= 1.5],
		 [DRM_MODE=yes], [DRM_MODE=no])
if test "x$DRM_MODE" = xyes; then
	AC_DEFINE(XF86DRM_MODE,1,[DRM kernel modesetting])
fi

a137 6
if test "$XVMC" = auto; then
	XVMC="$DRI"
fi
if test "$XVMC" = yes && test "$DRI" = no; then
	AC_MSG_ERROR([XvMC can't be enabled without DRI])
fi
d139 1
a139 2
	PKG_CHECK_MODULES(XVMCLIB, [xvmc], [XVMC=yes], [XVMC=no])
	PKG_CHECK_MODULES(XEXT, [xext])
d146 5
a150 1
    	AC_SUBST([XVMCLIB_CFLAGS])
a153 3
AC_SUBST([XORG_CFLAGS])
AC_SUBST([WARN_CFLAGS])
AC_SUBST([moduledir])
d157 1
a157 5

m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.1.3 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.1.3)
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
d166 3
d177 1
@


1.8
log
@never define XF86DRI_MM after configure. 2.4.x still had the ttm bits
which haven't made it into a released libdrm. This prevents collisions
with the libdrm version just commited (which wouldn't build otherwise).
@
text
@d25 1
a25 1
        2.4.3,
d87 8
d96 1
d103 4
a113 2
	AC_CHECK_FILE([${sdkdir}/damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"])
a126 2
save_CFLAGS="$CFLAGS"
CFLAGS="$XORG_CFLAGS"
d209 1
d212 1
a212 1
        PKG_CHECK_MODULES(DRI, [libdrm xf86driproto glproto])
d215 1
a215 3
	if test "$have_damage_h" = yes; then
		AC_DEFINE(DAMAGE,1,[Use Damage extension])
	fi
d217 5
a221 10
	save_CFLAGS="$CFLAGS"
	CFLAGS="$XORG_CFLAGS $DRI_CFLAGS"
	AC_CHECK_TYPE(drm_i915_flip_t,
		      [AC_DEFINE(HAVE_I915_FLIP, 1,
			         [Have drm_i915_flip_t and related definitions])],
		      [], [
#include <inttypes.h>
#include <i915_drm.h>
])
	CFLAGS="$save_CFLAGS"
d237 1
a246 1

d264 1
@


1.7
log
@xf86-video-intel 2.4.3. Tested by many.
@
text
@a204 4
	PKG_CHECK_MODULES(DRI_MM, [libdrm >= 2.4.0],[DRI_MM=yes], [DRI_MM=no])
	if test "x$DRI_MM" = xyes; then
		AC_DEFINE(XF86DRI_MM,1,[Extended DRI memory management])
	fi
@


1.6
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d25 1
a25 1
        2.4.2,
@


1.5
log
@Don't try and build the memory manager parts for libdrm 2.3.1, this version has
been bumped to 2.4.0 upstream.

ok matthieu@@
@
text
@d25 1
a25 1
        2.3.2,
d40 1
d94 1
a94 2
AC_MSG_CHECKING([whether to include DRI support])
if test x$DRI = xauto; then
d103 3
a105 1

@


1.4
log
@update to xf86-video-intel 2.3.2. Tested among others by okan@@.
@
text
@d203 1
a203 1
	PKG_CHECK_MODULES(DRI_MM, [libdrm >= 2.3.1],[DRI_MM=yes], [DRI_MM=no])
@


1.3
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d25 1
a25 1
        2.3.1,
d200 1
a200 1
        PKG_CHECK_MODULES(DRI, [libdrm xf86driproto])
@


1.2
log
@Update to Intel driver 2.2.1. But change default accelmethod to XAA.
Tested by landry@@, oga@@, steven@@, jakemsr@@.
@
text
@d25 1
a25 1
        2.2.1,
d46 3
d72 4
d85 1
a85 1
PKG_CHECK_MODULES(XORG, [xorg-server xproto xvmc fontsproto $REQUIRED_MODULES])
d93 2
a94 1
if test "$DRI" != no; then
a102 1
fi
a103 2
AC_MSG_CHECKING([whether to include DRI support])
if test x$DRI = xauto; then
d123 1
a123 1
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10.0])
d125 1
a125 1
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10.0],
d148 1
a148 1
	if test -f src/modes/xf86Modes.h; then
d151 1
a151 1
		ln -sf $XSERVER_SOURCE/hw/xfree86/modes src/modes
d154 1
a154 1
	if test -f src/parser/xf86Parser.h; then
d157 1
a157 1
		ln -sf $XSERVER_SOURCE/hw/xfree86/parser src/parser
d166 1
a166 1
	if test -f src/modes/xf86Modes.h -a -f src/parser/xf86Parser.h; then
d176 12
d227 18
@


1.1
log
@Initial revision
@
text
@d24 2
a25 2
AC_INIT([xf86-video-i810],
        1.7.2,
d27 1
a27 11
        xf86-video-i810)

AC_DEFINE_UNQUOTED([INTEL_VERSION_MAJOR],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^\([[0-9]]\)\.[[0-9]]\.[[0-9]]/\1/')],
		   [Major version])
AC_DEFINE_UNQUOTED([INTEL_VERSION_MINOR],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^[[0-9]]\.\([[0-9]]\)\.[[0-9]]/\1/')],
		   [Minor version])
AC_DEFINE_UNQUOTED([INTEL_VERSION_PATCH],
		   [$(echo $PACKAGE_VERSION | sed -e 's/^[[0-9]]\.[[0-9]]\.\([[0-9]]\)/\1/')],
		   [Patch version])
d41 1
d59 10
d93 2
d109 62
a180 2
CFLAGS="$CFLAGS $WARN_CFLAGS"

d183 1
a183 1
        PKG_CHECK_MODULES(DRI, [libdrm >= 2.0 xf86driproto])
d186 23
d213 1
d216 1
a216 1
DRIVER_NAME=i810
d219 2
d230 7
@


1.1.1.1
log
@Importing xf86-video-i810 1.7.2
@
text
@@


1.1.1.2
log
@xf86-video-intel 1.7.3
@
text
@d25 1
a25 1
        1.7.3,
a67 5
AC_ARG_ENABLE(video-debug, AC_HELP_STRING([--enable-video-debug],
                                  [Enable video debugging support [[default=no]]]),
              [VIDEO_DEBUG="$enableval"],
              [VIDEO_DEBUG=no])

d120 1
a120 1
        PKG_CHECK_MODULES(DRI, [libdrm >= 2.2 xf86driproto])
a122 5
fi

AM_CONDITIONAL(VIDEO_DEBUG, test x$VIDEO_DEBUG = xyes)
if test "$VIDEO_DEBUG" = yes; then
	AC_DEFINE(VIDEO_DEBUG,1,[Enable debug support])
@


1.1.1.3
log
@Import xf86-video-i810 version 1.7.4
@
text
@d25 1
a25 1
        1.7.4,
@


1.1.1.4
log
@xf86-video-intel 2.2.0
@
text
@d24 2
a25 2
AC_INIT([xf86-video-intel],
        2.2.0,
d27 11
a37 1
        xf86-video-intel)
a50 1
AM_PROG_CC_C_O
a72 5
AC_ARG_WITH(xserver-source,AC_HELP_STRING([--with-xserver-source=XSERVER_SOURCE],
					  [Path to X server source tree]),
			   [ XSERVER_SOURCE="$withval" ],
			   [ XSERVER_SOURCE="" ])

a96 2
	AC_CHECK_FILE([${sdkdir}/damage.h],
                      [have_damage_h="yes"], [have_damage_h="no"])
a110 63
save_CFLAGS="$CFLAGS"
CFLAGS="$XORG_CFLAGS"
AC_CHECK_HEADER(xf86Modes.h,[XMODES=yes],[XMODES=no],[#include "xorg-server.h"])
AC_CHECK_DECL(XSERVER_LIBPCIACCESS,
	      [XSERVER_LIBPCIACCESS=yes],[XSERVER_LIBPCIACCESS=no],
	      [#include "xorg-server.h"])
CFLAGS="$save_CFLAGS"

if test x$XSERVER_LIBPCIACCESS = xyes; then
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10.0])
else
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.5.0],
				       have_libpciaccess=yes,
				       have_libpciaccess=no)
fi
have_libpciaccess=no
AM_CONDITIONAL(XSERVER_LIBPCIACCESS, test "x$XSERVER_LIBPCIACCESS" = xyes)
AM_CONDITIONAL(LIBPCIACCESS,
	test "x$XSERVER_LIBPCIACCESS" = xyes -o "x$have_libpciaccess" = xyes)
AM_CONDITIONAL(XMODES, test "x$XMODES" = xno)

if test "x$XSERVER_SOURCE" = x; then
	if test -d ../../xserver; then
		XSERVER_SOURCE="`cd ../../xserver && pwd`"
	fi
fi
	
if test -d "$XSERVER_SOURCE"; then
	case "$XSERVER_SOURCE" in
	/*)
		;;
	*)
		XSERVER_SOURCE="`cd $XSERVER_SOURCE && pwd`"
		;;
	esac
	if test -f src/modes/xf86Modes.h; then
		:
	else
		ln -sf $XSERVER_SOURCE/hw/xfree86/modes src/modes
	fi
	
	if test -f src/parser/xf86Parser.h; then
		:
	else
		ln -sf $XSERVER_SOURCE/hw/xfree86/parser src/parser
	fi
fi

if test "x$XMODES" = xyes; then
	AC_MSG_NOTICE([X server has new mode code])
	AC_DEFINE(XMODES, 1,[X server has built-in mode code])
	XMODES_CFLAGS=
else
	if test -f src/modes/xf86Modes.h -a -f src/parser/xf86Parser.h; then
		AC_MSG_NOTICE([X server is missing new mode code, using local copy])
	else
		AC_MSG_ERROR([Must have X server >= 1.3 source tree for mode setting code. Please specify --with-xserver-source])
	fi
	XMODES_CFLAGS='-DXF86_MODES_RENAME -I$(top_srcdir)/src -I$(top_srcdir)/src/modes -I$(top_srcdir)/src/parser'
fi

AC_SUBST([XMODES_CFLAGS])

d121 2
d125 1
a125 1
        PKG_CHECK_MODULES(DRI, [libdrm xf86driproto])
a127 18
	PKG_CHECK_MODULES(DRI_MM, [libdrm >= 2.3.1],[DRI_MM=yes], [DRI_MM=no])
	if test "x$DRI_MM" = xyes; then
		AC_DEFINE(XF86DRI_MM,1,[Extended DRI memory management])
	fi
	if test "$have_damage_h" = yes; then
		AC_DEFINE(DAMAGE,1,[Use Damage extension])
	fi

	save_CFLAGS="$CFLAGS"
	CFLAGS="$XORG_CFLAGS $DRI_CFLAGS"
	AC_CHECK_TYPE(drm_i915_flip_t,
		      [AC_DEFINE(HAVE_I915_FLIP, 1,
			         [Have drm_i915_flip_t and related definitions])],
		      [], [
#include <inttypes.h>
#include <i915_drm.h>
])
	CFLAGS="$save_CFLAGS"
a136 1
AC_SUBST([WARN_CFLAGS])
d139 1
a139 1
DRIVER_NAME=intel
a150 7
	src/bios_reader/Makefile
	src/ch7017/Makefile
	src/ch7xxx/Makefile
	src/ivch/Makefile
	src/reg_dumper/Makefile
	src/sil164/Makefile
	src/tfp410/Makefile
@


1.1.1.5
log
@Import intel driver v 2.2.0.90. tested by many, including krw@@ kettenis@@,
jakemsr@@, landry@@, beck@@ and oga@@. Thanks.
@
text
@d25 1
a25 1
        2.2.0.90,
d120 1
a120 1
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.10.0],
d124 1
a219 2
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.1.3 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.1.3)
@


