head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.02.03.15.54.54;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2013.03.18.18.38.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.22.32.30;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.25.20.16.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@/*
 *
 * Copyright © 1999 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#include "uxa-priv.h"

#ifdef RENDER
#include "mipict.h"
#endif

/*
 * These functions wrap the low-level fb rendering functions and
 * synchronize framebuffer/accelerated drawing by stalling until
 * the accelerator is idle
 */

/**
 * Calls uxa_prepare_access with UXA_PREPARE_SRC for the tile, if that is the
 * current fill style.
 *
 * Solid doesn't use an extra pixmap source, and Stippled/OpaqueStippled are
 * 1bpp and never in fb, so we don't worry about them.
 * We should worry about them for completeness sake and going forward.
 */
Bool uxa_prepare_access_gc(GCPtr pGC)
{
	if (pGC->stipple)
		if (!uxa_prepare_access(&pGC->stipple->drawable, UXA_ACCESS_RO))
			return FALSE;
	if (pGC->fillStyle == FillTiled)
		if (!uxa_prepare_access
		    (&pGC->tile.pixmap->drawable, UXA_ACCESS_RO)) {
			if (pGC->stipple)
				uxa_finish_access(&pGC->stipple->drawable, UXA_ACCESS_RO);
			return FALSE;
		}
	return TRUE;
}

/**
 * Finishes access to the tile in the GC, if used.
 */
void uxa_finish_access_gc(GCPtr pGC)
{
	if (pGC->fillStyle == FillTiled)
		uxa_finish_access(&pGC->tile.pixmap->drawable, UXA_ACCESS_RO);
	if (pGC->stipple)
		uxa_finish_access(&pGC->stipple->drawable, UXA_ACCESS_RO);
}

Bool uxa_picture_prepare_access(PicturePtr picture, int mode)
{
	if (picture->pDrawable == NULL)
		return TRUE;

	if (!uxa_prepare_access(picture->pDrawable, mode))
		return FALSE;

	if (picture->alphaMap &&
	    !uxa_prepare_access(picture->alphaMap->pDrawable, mode)) {
		uxa_finish_access(picture->pDrawable, mode);
		return FALSE;
	}

	return TRUE;
}

void uxa_picture_finish_access(PicturePtr picture, int mode)
{
	if (picture->pDrawable == NULL)
		return;

	uxa_finish_access(picture->pDrawable, mode);
	if (picture->alphaMap)
		uxa_finish_access(picture->alphaMap->pDrawable, mode);
}


char uxa_drawable_location(DrawablePtr pDrawable)
{
	return uxa_drawable_is_offscreen(pDrawable) ? 's' : 'm';
}

void
uxa_check_fill_spans(DrawablePtr pDrawable, GCPtr pGC, int nspans,
		     DDXPointPtr ppt, int *pwidth, int fSorted)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		if (uxa_prepare_access_gc(pGC)) {
			fbFillSpans(pDrawable, pGC, nspans, ppt, pwidth,
				    fSorted);
			uxa_finish_access_gc(pGC);
		}
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_set_spans(DrawablePtr pDrawable, GCPtr pGC, char *psrc,
		    DDXPointPtr ppt, int *pwidth, int nspans, int fSorted)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		fbSetSpans(pDrawable, pGC, psrc, ppt, pwidth, nspans, fSorted);
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_put_image(DrawablePtr pDrawable, GCPtr pGC, int depth,
		    int x, int y, int w, int h, int leftPad, int format,
		    char *bits)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		fbPutImage(pDrawable, pGC, depth, x, y, w, h, leftPad, format,
			   bits);
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

RegionPtr
uxa_check_copy_area(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		    int srcx, int srcy, int w, int h, int dstx, int dsty)
{
	ScreenPtr screen = pSrc->pScreen;
	RegionPtr ret = NULL;

	UXA_FALLBACK(("from %p to %p (%c,%c)\n", pSrc, pDst,
		      uxa_drawable_location(pSrc),
		      uxa_drawable_location(pDst)));
	if (uxa_prepare_access(pDst, UXA_ACCESS_RW)) {
		if (uxa_prepare_access(pSrc, UXA_ACCESS_RO)) {
			ret =
			    fbCopyArea(pSrc, pDst, pGC, srcx, srcy, w, h, dstx,
				       dsty);
			uxa_finish_access(pSrc, UXA_ACCESS_RO);
		}
		uxa_finish_access(pDst, UXA_ACCESS_RW);
	}
	return ret;
}

RegionPtr
uxa_check_copy_plane(DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		     int srcx, int srcy, int w, int h, int dstx, int dsty,
		     unsigned long bitPlane)
{
	ScreenPtr screen = pSrc->pScreen;
	RegionPtr ret = NULL;

	UXA_FALLBACK(("from %p to %p (%c,%c)\n", pSrc, pDst,
		      uxa_drawable_location(pSrc),
		      uxa_drawable_location(pDst)));
	if (uxa_prepare_access(pDst, UXA_ACCESS_RW)) {
		if (uxa_prepare_access(pSrc, UXA_ACCESS_RO)) {
			ret =
			    fbCopyPlane(pSrc, pDst, pGC, srcx, srcy, w, h, dstx,
					dsty, bitPlane);
			uxa_finish_access(pSrc, UXA_ACCESS_RO);
		}
		uxa_finish_access(pDst, UXA_ACCESS_RW);
	}
	return ret;
}

void
uxa_check_poly_point(DrawablePtr pDrawable, GCPtr pGC, int mode, int npt,
		     DDXPointPtr pptInit)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		fbPolyPoint(pDrawable, pGC, mode, npt, pptInit);
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_poly_lines(DrawablePtr pDrawable, GCPtr pGC,
		     int mode, int npt, DDXPointPtr ppt)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c), width %d, mode %d, count %d\n",
		      pDrawable, uxa_drawable_location(pDrawable),
		      pGC->lineWidth, mode, npt));

	if (pGC->lineWidth == 0) {
		if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
			if (uxa_prepare_access_gc(pGC)) {
				fbPolyLine(pDrawable, pGC, mode, npt, ppt);
				uxa_finish_access_gc(pGC);
			}
			uxa_finish_access(pDrawable, UXA_ACCESS_RW);
		}
		return;
	}
	/* fb calls mi functions in the lineWidth != 0 case. */
	fbPolyLine(pDrawable, pGC, mode, npt, ppt);
}

void
uxa_check_poly_segment(DrawablePtr pDrawable, GCPtr pGC,
		       int nsegInit, xSegment * pSegInit)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c) width %d, count %d\n", pDrawable,
		      uxa_drawable_location(pDrawable), pGC->lineWidth,
		      nsegInit));
	if (pGC->lineWidth == 0) {
		if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
			if (uxa_prepare_access_gc(pGC)) {
				fbPolySegment(pDrawable, pGC, nsegInit,
					      pSegInit);
				uxa_finish_access_gc(pGC);
			}
			uxa_finish_access(pDrawable, UXA_ACCESS_RW);
		}
		return;
	}
	/* fb calls mi functions in the lineWidth != 0 case. */
	fbPolySegment(pDrawable, pGC, nsegInit, pSegInit);
}

void
uxa_check_poly_arc(DrawablePtr pDrawable, GCPtr pGC, int narcs, xArc * pArcs)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));

	/* Disable this as fbPolyArc can call miZeroPolyArc which in turn
	 * can call accelerated functions, that as yet, haven't been notified
	 * with uxa_finish_access().
	 */
#if 0
	if (pGC->lineWidth == 0) {
		if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
			if (uxa_prepare_access_gc(pGC)) {
				fbPolyArc(pDrawable, pGC, narcs, pArcs);
				uxa_finish_access_gc(pGC);
			}
			uxa_finish_access(pDrawable, UXA_ACCESS_RW);
		}
		return;
	}
#endif
	miPolyArc(pDrawable, pGC, narcs, pArcs);
}

void
uxa_check_poly_fill_rect(DrawablePtr pDrawable, GCPtr pGC,
			 int nrect, xRectangle * prect)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));

	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		if (uxa_prepare_access_gc(pGC)) {
			fbPolyFillRect(pDrawable, pGC, nrect, prect);
			uxa_finish_access_gc(pGC);
		}
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_image_glyph_blt(DrawablePtr pDrawable, GCPtr pGC,
			  int x, int y, unsigned int nglyph,
			  CharInfoPtr * ppci, pointer pglyphBase)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		if (uxa_prepare_access_gc(pGC)) {
			fbImageGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci,
					pglyphBase);
			uxa_finish_access_gc(pGC);
		}
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_poly_glyph_blt(DrawablePtr pDrawable, GCPtr pGC,
			 int x, int y, unsigned int nglyph,
			 CharInfoPtr * ppci, pointer pglyphBase)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("to %p (%c), style %d alu %d\n", pDrawable,
		      uxa_drawable_location(pDrawable), pGC->fillStyle,
		      pGC->alu));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		if (uxa_prepare_access_gc(pGC)) {
			fbPolyGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci,
				       pglyphBase);
			uxa_finish_access_gc(pGC);
		}
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_push_pixels(GCPtr pGC, PixmapPtr pBitmap,
		      DrawablePtr pDrawable, int w, int h, int x, int y)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("from %p to %p (%c,%c)\n", pBitmap, pDrawable,
		      uxa_drawable_location(&pBitmap->drawable),
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RW)) {
		if (uxa_prepare_access(&pBitmap->drawable, UXA_ACCESS_RO)) {
			if (uxa_prepare_access_gc(pGC)) {
				fbPushPixels(pGC, pBitmap, pDrawable, w, h, x,
					     y);
				uxa_finish_access_gc(pGC);
			}
			uxa_finish_access(&pBitmap->drawable, UXA_ACCESS_RO);
		}
		uxa_finish_access(pDrawable, UXA_ACCESS_RW);
	}
}

void
uxa_check_get_spans(DrawablePtr pDrawable,
		    int wMax,
		    DDXPointPtr ppt, int *pwidth, int nspans, char *pdstStart)
{
	ScreenPtr screen = pDrawable->pScreen;

	UXA_FALLBACK(("from %p (%c)\n", pDrawable,
		      uxa_drawable_location(pDrawable)));
	if (uxa_prepare_access(pDrawable, UXA_ACCESS_RO)) {
		fbGetSpans(pDrawable, wMax, ppt, pwidth, nspans, pdstStart);
		uxa_finish_access(pDrawable, UXA_ACCESS_RO);
	}
}

void
uxa_check_composite(CARD8 op,
		    PicturePtr pSrc,
		    PicturePtr pMask,
		    PicturePtr pDst,
		    INT16 xSrc, INT16 ySrc,
		    INT16 xMask, INT16 yMask,
		    INT16 xDst, INT16 yDst,
		    CARD16 width, CARD16 height)
{
	ScreenPtr screen = pDst->pDrawable->pScreen;

	UXA_FALLBACK(("from picts %p/%p to pict %p\n", pSrc, pMask, pDst));

	if (uxa_picture_prepare_access(pDst, UXA_ACCESS_RW)) {
		if (uxa_picture_prepare_access(pSrc, UXA_ACCESS_RO)) {
			if (!pMask || uxa_picture_prepare_access(pMask, UXA_ACCESS_RO)) {
				fbComposite(op, pSrc, pMask, pDst,
					    xSrc, ySrc,
					    xMask, yMask,
					    xDst, yDst,
					    width, height);
				if (pMask)
					uxa_picture_finish_access(pMask, UXA_ACCESS_RO);
			}
			uxa_picture_finish_access(pSrc, UXA_ACCESS_RO);
		}
		uxa_picture_finish_access(pDst, UXA_ACCESS_RW);
	}
}

void
uxa_check_add_traps(PicturePtr pPicture,
		    INT16 x_off, INT16 y_off, int ntrap, xTrap * traps)
{
	ScreenPtr screen = pPicture->pDrawable->pScreen;

	UXA_FALLBACK(("to pict %p (%c)\n", pPicture,
		      uxa_drawable_location(pPicture->pDrawable)));
	if (uxa_picture_prepare_access(pPicture, UXA_ACCESS_RW)) {
		fbAddTraps(pPicture, x_off, y_off, ntrap, traps);
		uxa_picture_finish_access(pPicture, UXA_ACCESS_RW);
	}
}

/**
 * Gets the 0,0 pixel of a pixmap.  Used for doing solid fills of tiled pixmaps
 * that happen to be 1x1.  Pixmap must be at least 8bpp.
 *
 * XXX This really belongs in fb, so it can be aware of tiling and etc.
 */
CARD32 uxa_get_pixmap_first_pixel(PixmapPtr pPixmap)
{
	CARD32 pixel;
	void *fb;

	if (!uxa_prepare_access(&pPixmap->drawable, UXA_ACCESS_RO))
		return 0;

	fb = pPixmap->devPrivate.ptr;

	switch (pPixmap->drawable.bitsPerPixel) {
	case 32:
		pixel = *(CARD32 *) fb;
		break;
	case 16:
		pixel = *(CARD16 *) fb;
		break;
	default:
		pixel = *(CARD8 *) fb;
		break;
	}
	uxa_finish_access(&pPixmap->drawable, UXA_ACCESS_RO);

	return pixel;
}
@


1.4
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@@


1.3
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d53 1
a53 1
				uxa_finish_access(&pGC->stipple->drawable);
d65 1
a65 1
		uxa_finish_access(&pGC->tile.pixmap->drawable);
d67 1
a67 1
		uxa_finish_access(&pGC->stipple->drawable);
d80 1
a80 1
		uxa_finish_access(picture->pDrawable);
d87 1
a87 1
void uxa_picture_finish_access(PicturePtr picture)
d92 1
a92 1
	uxa_finish_access(picture->pDrawable);
d94 1
a94 1
		uxa_finish_access(picture->alphaMap->pDrawable);
d117 1
a117 1
		uxa_finish_access(pDrawable);
d131 1
a131 1
		uxa_finish_access(pDrawable);
d147 1
a147 1
		uxa_finish_access(pDrawable);
d166 1
a166 1
			uxa_finish_access(pSrc);
d168 1
a168 1
		uxa_finish_access(pDst);
d189 1
a189 1
			uxa_finish_access(pSrc);
d191 1
a191 1
		uxa_finish_access(pDst);
d206 1
a206 1
		uxa_finish_access(pDrawable);
d226 1
a226 1
			uxa_finish_access(pDrawable);
d250 1
a250 1
			uxa_finish_access(pDrawable);
d277 1
a277 1
			uxa_finish_access(pDrawable);
d299 1
a299 1
		uxa_finish_access(pDrawable);
d318 1
a318 1
		uxa_finish_access(pDrawable);
d338 1
a338 1
		uxa_finish_access(pDrawable);
d358 1
a358 1
			uxa_finish_access(&pBitmap->drawable);
d360 1
a360 1
		uxa_finish_access(pDrawable);
d375 1
a375 1
		uxa_finish_access(pDrawable);
d402 1
a402 1
					uxa_picture_finish_access(pMask);
d404 1
a404 1
			uxa_picture_finish_access(pSrc);
d406 1
a406 1
		uxa_picture_finish_access(pDst);
d420 1
a420 1
		uxa_picture_finish_access(pPicture);
d451 1
a451 1
	uxa_finish_access(&pPixmap->drawable);
@


1.2
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d70 28
d393 3
a395 6
	if (uxa_prepare_access(pDst->pDrawable, UXA_ACCESS_RW)) {
		if (pSrc->pDrawable == NULL ||
		    uxa_prepare_access(pSrc->pDrawable, UXA_ACCESS_RO)) {
			if (!pMask || pMask->pDrawable == NULL ||
			    uxa_prepare_access(pMask->pDrawable, UXA_ACCESS_RO))
			{
d401 2
a402 2
				if (pMask && pMask->pDrawable != NULL)
					uxa_finish_access(pMask->pDrawable);
d404 1
a404 2
			if (pSrc->pDrawable != NULL)
				uxa_finish_access(pSrc->pDrawable);
d406 1
a406 1
		uxa_finish_access(pDst->pDrawable);
d418 1
a418 1
	if (uxa_prepare_access(pPicture->pDrawable, UXA_ACCESS_RW)) {
d420 1
a420 1
		uxa_finish_access(pPicture->pDrawable);
@


1.1
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d44 1
a44 2
Bool
uxa_prepare_access_gc(GCPtr pGC)
d46 11
a56 10
    if (pGC->stipple)
        if (!uxa_prepare_access(&pGC->stipple->drawable, UXA_ACCESS_RO))
	    return FALSE;
    if (pGC->fillStyle == FillTiled)
	if (!uxa_prepare_access(&pGC->tile.pixmap->drawable, UXA_ACCESS_RO)) {
	    if (pGC->stipple)
		uxa_finish_access(&pGC->stipple->drawable);
	    return FALSE;
	}
    return TRUE;
d62 1
a62 2
void
uxa_finish_access_gc(GCPtr pGC)
d64 4
a67 4
    if (pGC->fillStyle == FillTiled)
	uxa_finish_access(&pGC->tile.pixmap->drawable);
    if (pGC->stipple)
        uxa_finish_access(&pGC->stipple->drawable);
d70 1
a70 2
char
uxa_drawable_location(DrawablePtr pDrawable)
d72 1
a72 1
    return uxa_drawable_is_offscreen(pDrawable) ? 's' : 'm';
d76 2
a77 2
uxa_check_fill_spans (DrawablePtr pDrawable, GCPtr pGC, int nspans,
		   DDXPointPtr ppt, int *pwidth, int fSorted)
d79 1
a79 1
    ScreenPtr screen = pDrawable->pScreen;
d81 9
a89 5
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access_gc (pGC)) {
	    fbFillSpans (pDrawable, pGC, nspans, ppt, pwidth, fSorted);
	    uxa_finish_access_gc (pGC);
a90 2
	uxa_finish_access (pDrawable);
    }
d94 2
a95 2
uxa_check_set_spans (DrawablePtr pDrawable, GCPtr pGC, char *psrc,
		 DDXPointPtr ppt, int *pwidth, int nspans, int fSorted)
d97 1
a97 1
    ScreenPtr screen = pDrawable->pScreen;
d99 6
a104 5
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	fbSetSpans (pDrawable, pGC, psrc, ppt, pwidth, nspans, fSorted);
	uxa_finish_access (pDrawable);
    }
d108 3
a110 3
uxa_check_put_image (DrawablePtr pDrawable, GCPtr pGC, int depth,
		 int x, int y, int w, int h, int leftPad, int format,
		 char *bits)
d112 1
a112 1
    ScreenPtr screen = pDrawable->pScreen;
d114 7
a120 5
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	fbPutImage (pDrawable, pGC, depth, x, y, w, h, leftPad, format, bits);
	uxa_finish_access (pDrawable);
    }
d124 2
a125 2
uxa_check_copy_area (DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		     int srcx, int srcy, int w, int h, int dstx, int dsty)
d127 2
a128 2
    ScreenPtr screen = pSrc->pScreen;
    RegionPtr ret = NULL;
d130 13
a142 10
    UXA_FALLBACK(("from %p to %p (%c,%c)\n", pSrc, pDst,
		  uxa_drawable_location(pSrc), uxa_drawable_location(pDst)));
    if (uxa_prepare_access (pDst, UXA_ACCESS_RW)) {
	if (uxa_prepare_access (pSrc, UXA_ACCESS_RO)) {
	    ret = fbCopyArea (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty);
	    uxa_finish_access (pSrc);
	}
	uxa_finish_access (pDst);
    }
    return ret;
d146 3
a148 3
uxa_check_copy_plane (DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		  int srcx, int srcy, int w, int h, int dstx, int dsty,
		  unsigned long bitPlane)
d150 2
a151 2
    ScreenPtr screen = pSrc->pScreen;
    RegionPtr ret = NULL;
d153 11
a163 7
    UXA_FALLBACK(("from %p to %p (%c,%c)\n", pSrc, pDst,
		  uxa_drawable_location(pSrc), uxa_drawable_location(pDst)));
    if (uxa_prepare_access (pDst, UXA_ACCESS_RW)) {
	if (uxa_prepare_access (pSrc, UXA_ACCESS_RO)) {
	    ret = fbCopyPlane (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty,
			       bitPlane);
	    uxa_finish_access (pSrc);
d165 1
a165 3
	uxa_finish_access (pDst);
    }
    return ret;
d169 2
a170 2
uxa_check_poly_point (DrawablePtr pDrawable, GCPtr pGC, int mode, int npt,
		  DDXPointPtr pptInit)
d172 1
a172 1
    ScreenPtr screen = pDrawable->pScreen;
d174 6
a179 5
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	fbPolyPoint (pDrawable, pGC, mode, npt, pptInit);
	uxa_finish_access (pDrawable);
    }
d183 2
a184 2
uxa_check_poly_lines (DrawablePtr pDrawable, GCPtr pGC,
		  int mode, int npt, DDXPointPtr ppt)
d186 1
a186 1
    ScreenPtr screen = pDrawable->pScreen;
d188 3
a190 3
    UXA_FALLBACK(("to %p (%c), width %d, mode %d, count %d\n",
		  pDrawable, uxa_drawable_location(pDrawable),
		  pGC->lineWidth, mode, npt));
d192 9
a200 7
    if (pGC->lineWidth == 0) {
	if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	    if (uxa_prepare_access_gc (pGC)) {
		fbPolyLine (pDrawable, pGC, mode, npt, ppt);
		uxa_finish_access_gc (pGC);
	    }
	    uxa_finish_access (pDrawable);
d202 2
a203 4
	return;
    }
    /* fb calls mi functions in the lineWidth != 0 case. */
    fbPolyLine (pDrawable, pGC, mode, npt, ppt);
d207 2
a208 2
uxa_check_poly_segment (DrawablePtr pDrawable, GCPtr pGC,
		    int nsegInit, xSegment *pSegInit)
d210 1
a210 1
    ScreenPtr screen = pDrawable->pScreen;
d212 13
a224 9
    UXA_FALLBACK(("to %p (%c) width %d, count %d\n", pDrawable,
		  uxa_drawable_location(pDrawable), pGC->lineWidth, nsegInit));
    if (pGC->lineWidth == 0) {
	if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	    if (uxa_prepare_access_gc (pGC)) {
		fbPolySegment (pDrawable, pGC, nsegInit, pSegInit);
		uxa_finish_access_gc (pGC);
	    }
	    uxa_finish_access (pDrawable);
d226 2
a227 4
	return;
    }
    /* fb calls mi functions in the lineWidth != 0 case. */
    fbPolySegment (pDrawable, pGC, nsegInit, pSegInit);
d231 1
a231 2
uxa_check_poly_arc (DrawablePtr pDrawable, GCPtr pGC,
		int narcs, xArc *pArcs)
d233 1
a233 1
    ScreenPtr screen = pDrawable->pScreen;
d235 2
a236 1
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
d238 4
a241 4
    /* Disable this as fbPolyArc can call miZeroPolyArc which in turn
     * can call accelerated functions, that as yet, haven't been notified
     * with uxa_finish_access().
     */
d243 9
a251 8
    if (pGC->lineWidth == 0)
    {
	if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	    if (uxa_prepare_access_gc (pGC)) {
		fbPolyArc (pDrawable, pGC, narcs, pArcs);
		uxa_finish_access_gc (pGC);
	    }
	    uxa_finish_access (pDrawable);
a252 2
	return;
    }
d254 1
a254 1
    miPolyArc (pDrawable, pGC, narcs, pArcs);
d258 2
a259 2
uxa_check_poly_fill_rect (DrawablePtr pDrawable, GCPtr pGC,
		     int nrect, xRectangle *prect)
d261 1
a261 1
    ScreenPtr screen = pDrawable->pScreen;
d263 2
a264 1
    UXA_FALLBACK(("to %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
d266 6
a271 4
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access_gc (pGC)) {
	    fbPolyFillRect (pDrawable, pGC, nrect, prect);
	    uxa_finish_access_gc (pGC);
a272 2
	uxa_finish_access (pDrawable);
    }
d276 3
a278 3
uxa_check_image_glyph_blt (DrawablePtr pDrawable, GCPtr pGC,
		      int x, int y, unsigned int nglyph,
		      CharInfoPtr *ppci, pointer pglyphBase)
d280 1
a280 1
    ScreenPtr screen = pDrawable->pScreen;
d282 9
a290 6
    UXA_FALLBACK(("to %p (%c)\n", pDrawable,
		  uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access_gc (pGC)) {
	    fbImageGlyphBlt (pDrawable, pGC, x, y, nglyph, ppci, pglyphBase);
	    uxa_finish_access_gc (pGC);
a291 2
	uxa_finish_access (pDrawable);
    }
d295 3
a297 3
uxa_check_poly_glyph_blt (DrawablePtr pDrawable, GCPtr pGC,
		     int x, int y, unsigned int nglyph,
		     CharInfoPtr *ppci, pointer pglyphBase)
d299 1
a299 1
    ScreenPtr screen = pDrawable->pScreen;
d301 10
a310 6
    UXA_FALLBACK(("to %p (%c), style %d alu %d\n", pDrawable,
		  uxa_drawable_location(pDrawable), pGC->fillStyle, pGC->alu));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access_gc (pGC)) {
	    fbPolyGlyphBlt (pDrawable, pGC, x, y, nglyph, ppci, pglyphBase);
	    uxa_finish_access_gc (pGC);
a311 2
	uxa_finish_access (pDrawable);
    }
d315 2
a316 3
uxa_check_push_pixels (GCPtr pGC, PixmapPtr pBitmap,
		   DrawablePtr pDrawable,
		   int w, int h, int x, int y)
d318 1
a318 1
    ScreenPtr screen = pDrawable->pScreen;
d320 13
a332 10
    UXA_FALLBACK(("from %p to %p (%c,%c)\n", pBitmap, pDrawable,
		  uxa_drawable_location(&pBitmap->drawable),
		  uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access (&pBitmap->drawable, UXA_ACCESS_RO)) {
	    if (uxa_prepare_access_gc (pGC)) {
		fbPushPixels (pGC, pBitmap, pDrawable, w, h, x, y);
		uxa_finish_access_gc (pGC);
	    }
	    uxa_finish_access (&pBitmap->drawable);
a333 2
	uxa_finish_access (pDrawable);
    }
d337 3
a339 6
uxa_check_get_spans (DrawablePtr pDrawable,
		 int wMax,
		 DDXPointPtr ppt,
		 int *pwidth,
		 int nspans,
		 char *pdstStart)
d341 1
a341 1
    ScreenPtr screen = pDrawable->pScreen;
d343 6
a348 5
    UXA_FALLBACK(("from %p (%c)\n", pDrawable, uxa_drawable_location(pDrawable)));
    if (uxa_prepare_access (pDrawable, UXA_ACCESS_RO)) {
	fbGetSpans (pDrawable, wMax, ppt, pwidth, nspans, pdstStart);
	uxa_finish_access (pDrawable);
    }
a350 1
#ifndef SERVER_1_5
d352 8
a359 1
uxa_check_paint_window (WindowPtr pWin, RegionPtr pRegion, int what)
d361 3
a363 1
    ScreenPtr screen = pWin->drawable.pScreen;
d365 18
a382 6
    UXA_FALLBACK(("from %p (%c)\n", pWin,
		  uxa_drawable_location (&pWin->drawable)));
    if (uxa_prepare_access (&pWin->drawable, UXA_ACCESS_RW)) {
	if (uxa_prepare_access_window (pWin)) {
	    fbPaintWindow (pWin, pRegion, what);
	    uxa_finish_access_window (pWin);
a383 2
	uxa_finish_access(&pWin->drawable);
    }
a384 1
#endif
d387 4
a390 47
uxa_check_composite (CARD8      op,
                   PicturePtr pSrc,
                   PicturePtr pMask,
                   PicturePtr pDst,
                   INT16      xSrc,
                   INT16      ySrc,
                   INT16      xMask,
                   INT16      yMask,
                   INT16      xDst,
                   INT16      yDst,
                   CARD16     width,
                   CARD16     height)
{
    ScreenPtr screen = pDst->pDrawable->pScreen;

    UXA_FALLBACK(("from picts %p/%p to pict %p\n",
		 pSrc, pMask, pDst));

    if (uxa_prepare_access (pDst->pDrawable, UXA_ACCESS_RW))
    {
	if (pSrc->pDrawable == NULL ||
	    uxa_prepare_access (pSrc->pDrawable, UXA_ACCESS_RO))
	{
	    if (!pMask || pMask->pDrawable == NULL ||
		uxa_prepare_access (pMask->pDrawable, UXA_ACCESS_RO))
	    {
		fbComposite (op,
			     pSrc,
			     pMask,
			     pDst,
			     xSrc,
			     ySrc,
			     xMask,
			     yMask,
			     xDst,
			     yDst,
			     width,
			     height);
		if (pMask && pMask->pDrawable != NULL)
		    uxa_finish_access (pMask->pDrawable);
	    }
	    if (pSrc->pDrawable != NULL)
		uxa_finish_access (pSrc->pDrawable);
	}
	uxa_finish_access (pDst->pDrawable);
    }
}
d392 6
a397 15
void
uxa_check_add_traps (PicturePtr	pPicture,
		  INT16		x_off,
		  INT16		y_off,
		  int		ntrap,
		  xTrap		*traps)
{
    ScreenPtr screen = pPicture->pDrawable->pScreen;

    UXA_FALLBACK(("to pict %p (%c)\n", pPicture,
		  uxa_drawable_location(pPicture->pDrawable)));
    if (uxa_prepare_access(pPicture->pDrawable, UXA_ACCESS_RW)) {
	fbAddTraps (pPicture, x_off, y_off, ntrap, traps);
	uxa_finish_access(pPicture->pDrawable);
    }
d406 1
a406 2
CARD32
uxa_get_pixmap_first_pixel (PixmapPtr pPixmap)
d408 2
a409 2
    CARD32 pixel;
    void *fb;
d411 2
a412 2
    if (!uxa_prepare_access (&pPixmap->drawable, UXA_ACCESS_RO))
	return 0;
d414 14
a427 14
    fb = pPixmap->devPrivate.ptr;

    switch (pPixmap->drawable.bitsPerPixel) {
    case 32:
	pixel = *(CARD32 *)fb;
	break;
    case 16:
	pixel = *(CARD16 *)fb;
	break;
    default:
	pixel = *(CARD8 *)fb;
	break;
    }
    uxa_finish_access(&pPixmap->drawable);
d429 1
a429 1
    return pixel;
@

