head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.02.03.15.54.53;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.22.32.30;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@/**************************************************************************
 *
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#include <dirent.h>
#include <string.h>
#include <assert.h>

#include <sys/ioctl.h>
#include <X11/Xlibint.h>
#include <fourcc.h>
#include <X11/extensions/Xv.h>
#include <X11/extensions/Xvlib.h>
#include <X11/extensions/XvMC.h>
#include <X11/extensions/XvMClib.h>

#include "intel_xvmc.h"
#include "intel_batchbuffer.h"
#include "brw_defines.h"
#include "brw_structs.h"
#define MI_BATCH_BUFFER_END     (0xA << 23)
#define BATCH_SIZE 8*1024	/* one bo is allocated each time, so the size can be small */

static void i965_end_batch(void)
{
	unsigned int size = xvmc_driver->batch.ptr -
	    xvmc_driver->batch.init_ptr;
	if ((size & 4) == 0) {
		*(unsigned int *)xvmc_driver->batch.ptr = 0;
		xvmc_driver->batch.ptr += 4;
	}
	*(unsigned int *)xvmc_driver->batch.ptr = MI_BATCH_BUFFER_END;
	xvmc_driver->batch.ptr += 4;
}

Bool intelInitBatchBuffer(void)
{
	if ((xvmc_driver->batch.buf =
	     drm_intel_bo_alloc(xvmc_driver->bufmgr,
				"batch buffer", BATCH_SIZE, 0x1000)) == NULL) {
		fprintf(stderr, "unable to alloc batch buffer\n");
		return False;
	}

	drm_intel_gem_bo_map_gtt(xvmc_driver->batch.buf);

	xvmc_driver->batch.init_ptr = xvmc_driver->batch.buf->virtual;
	xvmc_driver->batch.size = BATCH_SIZE;
	xvmc_driver->batch.space = BATCH_SIZE;
	xvmc_driver->batch.ptr = xvmc_driver->batch.init_ptr;
	return True;
}

void intelFiniBatchBuffer(void)
{
	drm_intel_gem_bo_unmap_gtt(xvmc_driver->batch.buf);

	drm_intel_bo_unreference(xvmc_driver->batch.buf);
}

void intelFlushBatch(Bool refill)
{
	i965_end_batch();

	drm_intel_gem_bo_unmap_gtt(xvmc_driver->batch.buf);

	drm_intel_bo_exec(xvmc_driver->batch.buf,
			  xvmc_driver->batch.ptr - xvmc_driver->batch.init_ptr,
			  0, 0, 0);

	drm_intel_bo_unreference(xvmc_driver->batch.buf);
	if ((xvmc_driver->batch.buf =
	     drm_intel_bo_alloc(xvmc_driver->bufmgr,
				"batch buffer", BATCH_SIZE, 0x1000)) == NULL) {
		fprintf(stderr, "unable to alloc batch buffer\n");
	}

	drm_intel_gem_bo_map_gtt(xvmc_driver->batch.buf);

	xvmc_driver->batch.init_ptr = xvmc_driver->batch.buf->virtual;
	xvmc_driver->batch.size = BATCH_SIZE;
	xvmc_driver->batch.space = BATCH_SIZE;
	xvmc_driver->batch.ptr = xvmc_driver->batch.init_ptr;
}

void intelBatchbufferRequireSpace(int size)
{
	assert(xvmc_driver->batch.ptr - xvmc_driver->batch.init_ptr + size <
	       xvmc_driver->batch.size - 8);
	if (xvmc_driver->batch.ptr - xvmc_driver->batch.init_ptr + size
	    >= xvmc_driver->batch.size - 8)
		intelFlushBatch(1);
}

void intelBatchbufferData(const void *data, unsigned bytes, unsigned flags)
{
	intelBatchbufferRequireSpace(bytes);
	memcpy(xvmc_driver->batch.ptr, data, bytes);
	xvmc_driver->batch.ptr += bytes;
	xvmc_driver->batch.space -= bytes;
}

void intel_batch_emit_reloc(dri_bo * bo, uint32_t read_domain,
			    uint32_t write_domain, uint32_t delta,
			    unsigned char *ptr)
{
	drm_intel_bo_emit_reloc(xvmc_driver->batch.buf,
				ptr - xvmc_driver->batch.init_ptr, bo, delta,
				read_domain, write_domain);
}
@


1.4
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@@


1.3
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@a51 35
static int intelEmitIrqLocked(void)
{
	drmI830IrqEmit ie;
	int ret, seq;

	ie.irq_seq = &seq;
	ret = drmCommandWriteRead(xvmc_driver->fd, DRM_I830_IRQ_EMIT,
				  &ie, sizeof(ie));

	if (ret) {
		fprintf(stderr, "%s: drmI830IrqEmit: %d\n", __FUNCTION__, ret);
		exit(1);
	}

	return seq;
}

static void intelWaitIrq(int seq)
{
	int ret;
	drmI830IrqWait iw;

	iw.irq_seq = seq;

	do {
		ret =
		    drmCommandWrite(xvmc_driver->fd, DRM_I830_IRQ_WAIT, &iw,
				    sizeof(iw));
	} while (ret == -EAGAIN || ret == -EINTR);

	if (ret) {
		fprintf(stderr, "%s: drmI830IrqWait: %d\n", __FUNCTION__, ret);
		exit(1);
	}
}
a66 2
	int i;

@


1.2
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d111 1
a111 4
	if (xvmc_driver->kernel_exec_fencing)
		drm_intel_gem_bo_map_gtt(xvmc_driver->batch.buf);
	else
		drm_intel_bo_map(xvmc_driver->batch.buf, 1);
d122 1
a122 4
	if (xvmc_driver->kernel_exec_fencing)
		drm_intel_gem_bo_unmap_gtt(xvmc_driver->batch.buf);
	else
		drm_intel_bo_unmap(xvmc_driver->batch.buf);
d131 1
a131 4
	if (xvmc_driver->kernel_exec_fencing)
		drm_intel_gem_bo_unmap_gtt(xvmc_driver->batch.buf);
	else
		drm_intel_bo_unmap(xvmc_driver->batch.buf);
a136 3
	if (xvmc_driver == &i915_xvmc_mc_driver)
		dri_bo_wait_rendering(xvmc_driver->batch.buf);

d144 1
a144 4
	if (xvmc_driver->kernel_exec_fencing)
		drm_intel_gem_bo_map_gtt(xvmc_driver->batch.buf);
	else
		drm_intel_bo_map(xvmc_driver->batch.buf, 1);
@


1.1
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d48 2
a49 1

d51 1
a51 1

d54 2
a55 2
   drmI830IrqEmit ie;
   int ret, seq;
d57 8
a64 8
   ie.irq_seq = &seq;
   ret = drmCommandWriteRead(xvmc_driver->fd, DRM_I830_IRQ_EMIT,
                             &ie, sizeof(ie));

   if ( ret ) {
      fprintf(stderr, "%s: drmI830IrqEmit: %d\n", __FUNCTION__, ret);
      exit(1);
   }
d66 1
a66 1
   return seq;
d71 2
a72 2
   int ret;
   drmI830IrqWait iw;
d74 1
a74 1
   iw.irq_seq = seq;
d76 22
a97 8
   do {
      ret = drmCommandWrite(xvmc_driver->fd, DRM_I830_IRQ_WAIT, &iw, sizeof(iw) );
   } while (ret == -EAGAIN || ret == -EINTR);

   if (ret) {
      fprintf(stderr, "%s: drmI830IrqWait: %d\n", __FUNCTION__, ret);
      exit(1);
   }
d100 1
a100 1
static void intelDestroyBatchBuffer(void)
d102 1
a102 7
   if (xvmc_driver->alloc.offset) {
       xvmc_driver->alloc.ptr = NULL;
       xvmc_driver->alloc.offset = 0;
   } else if (xvmc_driver->alloc.ptr) {
      free(xvmc_driver->alloc.ptr);
      xvmc_driver->alloc.ptr = NULL;
   }
d104 17
a120 1
   memset(&xvmc_driver->batch, 0, sizeof(xvmc_driver->batch));
d123 6
d130 1
a130 23
Bool intelInitBatchBuffer(void)
{
    if (drmMap(xvmc_driver->fd,
		xvmc_driver->batchbuffer.handle,
		xvmc_driver->batchbuffer.size,
		(drmAddress *)&xvmc_driver->batchbuffer.map) != 0) {
	XVMC_ERR("fail to map batch buffer\n");
	return False;
    }

    if (xvmc_driver->batchbuffer.map) {
	xvmc_driver->alloc.size = xvmc_driver->batchbuffer.size;
	xvmc_driver->alloc.offset = xvmc_driver->batchbuffer.offset;
	xvmc_driver->alloc.ptr = xvmc_driver->batchbuffer.map;
    } else {
	xvmc_driver->alloc.size = 8 * 1024;
	xvmc_driver->alloc.offset = 0;
	xvmc_driver->alloc.ptr = malloc(xvmc_driver->alloc.size);
    }

    xvmc_driver->alloc.active_buf = 0;
    assert(xvmc_driver->alloc.ptr);
    return True;
d133 1
a133 1
void intelFiniBatchBuffer(void)
d135 30
a164 5
    if (xvmc_driver->batchbuffer.map) {
        drmUnmap(xvmc_driver->batchbuffer.map, xvmc_driver->batchbuffer.size);
        xvmc_driver->batchbuffer.map = NULL;
    }
    intelDestroyBatchBuffer();
d167 1
a167 1
static void intelBatchbufferRequireSpace(unsigned int sz)
d169 5
a173 2
   if (xvmc_driver->batch.space < sz)
      intelFlushBatch(TRUE);
d178 5
a182 1
   assert((bytes & 0x3) == 0);
d184 7
a190 129
   intelBatchbufferRequireSpace(bytes);
   memcpy(xvmc_driver->batch.ptr, data, bytes);
   xvmc_driver->batch.ptr += bytes;
   xvmc_driver->batch.space -= bytes;

   assert(xvmc_driver->batch.space >= 0);
}

#define MI_FLUSH                ((0 << 29) | (4 << 23))
#define FLUSH_MAP_CACHE         (1 << 0)
#define FLUSH_RENDER_CACHE      (0 << 2)
#define FLUSH_WRITE_DIRTY_STATE (1 << 4)

static void intelRefillBatchLocked(Bool allow_unlock)
{
   unsigned half = xvmc_driver->alloc.size >> 1;
   unsigned buf = (xvmc_driver->alloc.active_buf ^= 1);
   unsigned dword[2];

   dword[0] = MI_FLUSH | FLUSH_WRITE_DIRTY_STATE | FLUSH_RENDER_CACHE | FLUSH_MAP_CACHE;
   dword[1] = 0;
   intelCmdIoctl((char *)&dword[0], sizeof(dword));
   xvmc_driver->alloc.irq_emitted = intelEmitIrqLocked();

   if (xvmc_driver->alloc.irq_emitted) {
       intelWaitIrq(xvmc_driver->alloc.irq_emitted);
   }

   xvmc_driver->batch.start_offset = xvmc_driver->alloc.offset + buf * half;
   xvmc_driver->batch.ptr = (unsigned char *)xvmc_driver->alloc.ptr + buf * half;
   xvmc_driver->batch.size = half - 8;
   xvmc_driver->batch.space = half - 8;
   assert(xvmc_driver->batch.space >= 0);
}


static void intelFlushBatchLocked(Bool ignore_cliprects,
				  Bool refill,
				  Bool allow_unlock)
{
   drmI830BatchBuffer batch;

   if (xvmc_driver->batch.space != xvmc_driver->batch.size) {

      batch.start = xvmc_driver->batch.start_offset;
      batch.used = xvmc_driver->batch.size - xvmc_driver->batch.space;
      batch.cliprects = 0;
      batch.num_cliprects = 0;
      batch.DR1 = 0;
      batch.DR4 = 0;

      if (xvmc_driver->alloc.offset) {
          if ((batch.used & 0x4) == 0) {
              ((int *)xvmc_driver->batch.ptr)[0] = 0;
              ((int *)xvmc_driver->batch.ptr)[1] = MI_BATCH_BUFFER_END;
              batch.used += 0x8;
              xvmc_driver->batch.ptr += 0x8;
          } else {
              ((int *)xvmc_driver->batch.ptr)[0] = MI_BATCH_BUFFER_END;
              batch.used += 0x4;
              xvmc_driver->batch.ptr += 0x4;
          }
      }

      xvmc_driver->batch.start_offset += batch.used;
      xvmc_driver->batch.size -= batch.used;

      if (xvmc_driver->batch.size < 8) {
         refill = TRUE;
         xvmc_driver->batch.space = xvmc_driver->batch.size = 0;
      }
      else {
         xvmc_driver->batch.size -= 8;
         xvmc_driver->batch.space = xvmc_driver->batch.size;
      }

      assert(xvmc_driver->batch.space >= 0);
      assert(batch.start >= xvmc_driver->alloc.offset);
      assert(batch.start < xvmc_driver->alloc.offset + xvmc_driver->alloc.size);
      assert(batch.start + batch.used > xvmc_driver->alloc.offset);
      assert(batch.start + batch.used <= xvmc_driver->alloc.offset + xvmc_driver->alloc.size);

      if (xvmc_driver->alloc.offset) {
          if (drmCommandWrite(xvmc_driver->fd, DRM_I830_BATCHBUFFER, &batch, sizeof(batch))) {
              fprintf(stderr, "DRM_I830_BATCHBUFFER: %d\n",  -errno);
              exit(1);
          }
      } else {
         drmI830CmdBuffer cmd;
         cmd.buf = (char *)xvmc_driver->alloc.ptr + batch.start;
         cmd.sz = batch.used;
         cmd.DR1 = batch.DR1;
         cmd.DR4 = batch.DR4;
         cmd.num_cliprects = batch.num_cliprects;
         cmd.cliprects = batch.cliprects;

         if (drmCommandWrite(xvmc_driver->fd, DRM_I830_CMDBUFFER, 
                             &cmd, sizeof(cmd))) {
            fprintf(stderr, "DRM_I915_CMDBUFFER: %d\n",  -errno);
            exit(1);
         }
      }
   }

   if (refill)
      intelRefillBatchLocked(allow_unlock);
}

void intelFlushBatch(Bool refill )
{
   intelFlushBatchLocked(FALSE, refill, TRUE);
}

void intelCmdIoctl(char *buf, unsigned used)
{
   drmI830CmdBuffer cmd;

   cmd.buf = buf;
   cmd.sz = used;
   cmd.cliprects = 0;
   cmd.num_cliprects = 0;
   cmd.DR1 = 0;
   cmd.DR4 = 0;

   if (drmCommandWrite(xvmc_driver->fd, DRM_I830_CMDBUFFER, 
                       &cmd, sizeof(cmd))) {
      fprintf(stderr, "DRM_I830_CMDBUFFER: %d\n",  -errno);
      exit(1);
   }
@

