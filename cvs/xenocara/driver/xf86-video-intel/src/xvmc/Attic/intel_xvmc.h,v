head	1.8;
access;
symbols
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2014.02.03.15.54.53;	author matthieu;	state dead;
branches;
next	1.7;

1.7
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.10.22.32.30;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.25.20.16.44;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.12.15.20.51;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.29.20.13.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@/*
 * Copyright Â© 2007 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Zhenyu Wang <zhenyu.z.wang@@intel.com>
 *
 */
#ifndef INTEL_XVMC_H
#define INTEL_XVMC_H

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#include <dirent.h>
#include <string.h>
#include <assert.h>
#include <signal.h>
#include <stdint.h>

#include <xf86drm.h>
#include "intel_hwmc.h"
#include <X11/X.h>
#include <X11/Xlibint.h>
#include <X11/Xutil.h>
#include <fourcc.h>
#include <X11/extensions/Xv.h>
#include <X11/extensions/Xvlib.h>
#include <X11/extensions/XvMC.h>
#include <X11/extensions/XvMClib.h>
#include <X11/extensions/vldXvMC.h>
#include <drm_sarea.h>
#include "i915_drm.h"
#include "intel_bufmgr.h"

#include "intel_batchbuffer.h"

#define GTT_PAGE_SIZE 4*1024

#define XVMC_ERR(s, arg...)					\
    do {							\
	fprintf(stderr, "[intel_xvmc] err: " s "\n", ##arg);	\
    } while (0)

#define XVMC_INFO(s, arg...)					\
    do {							\
	fprintf(stderr, "[intel_xvmc] info: " s "\n", ##arg);	\
    } while (0)

/* Subpicture fourcc */
#define FOURCC_IA44 0x34344149

/*
  Definitions for temporary wire protocol hooks to be replaced
  when a HW independent libXvMC is created.
*/
extern Status _xvmc_create_context(Display * dpy, XvMCContext * context,
				   int *priv_count, CARD32 ** priv_data);

extern Status _xvmc_destroy_context(Display * dpy, XvMCContext * context);

extern Status _xvmc_create_surface(Display * dpy, XvMCContext * context,
				   XvMCSurface * surface, int *priv_count,
				   CARD32 ** priv_data);

extern Status _xvmc_destroy_surface(Display * dpy, XvMCSurface * surface);

extern Status _xvmc_create_subpicture(Display * dpy, XvMCContext * context,
				      XvMCSubpicture * subpicture,
				      int *priv_count, uint ** priv_data);

extern Status _xvmc_destroy_subpicture(Display * dpy,
				       XvMCSubpicture * subpicture);

struct intel_xvmc_context {
	struct intel_xvmc_hw_context *hw;
	uint32_t surface_bo_size;
	drm_context_t hw_context;	/* context id to kernel drm */
};
typedef struct intel_xvmc_context *intel_xvmc_context_ptr;

struct intel_xvmc_surface {
	XvMCContext *context;
	XvImage *image;
	GC gc;
	Bool gc_init;
	Drawable last_draw;
	drm_intel_bo *bo;
	uint32_t gem_handle;
};
typedef struct intel_xvmc_surface *intel_xvmc_surface_ptr;

typedef struct _intel_xvmc_drm_map {
	drm_handle_t handle;
	unsigned long offset;
	unsigned long size;
	unsigned long bus_addr;
	drmAddress map;
} intel_xvmc_drm_map_t, *intel_xvmc_drm_map_ptr;

typedef struct _intel_xvmc_driver {
	int type;		/* hw xvmc type - i830_hwmc.h */
	int screen;		/* current screen num */

	int fd;			/* drm file handler */

	dri_bufmgr *bufmgr;

	struct {
		unsigned int init_offset;
		unsigned int size;
		unsigned int space;
		unsigned char *ptr;
		unsigned char *init_ptr;
		dri_bo *buf;
	} batch;

	struct {
		void *ptr;
		unsigned int size;
		unsigned int offset;
		unsigned int active_buf;
		unsigned int irq_emitted;
	} alloc;
	intel_xvmc_drm_map_t batchbuffer;

	sigset_t sa_mask;
	pthread_mutex_t ctxmutex;
	int locked;

	int num_ctx;
	intel_xvmc_context_ptr ctx_list;
	int num_surf;
	struct intel_xvmc_surface * surf_list;

	void *private;

	/* driver specific xvmc callbacks */
	 Status(*create_context) (Display * display, XvMCContext * context,
				  int priv_count, CARD32 * priv_data);

	 Status(*destroy_context) (Display * display, XvMCContext * context);

	 Status(*render_surface) (Display * display, XvMCContext * context,
				  unsigned int picture_structure,
				  XvMCSurface * target_surface,
				  XvMCSurface * past_surface,
				  XvMCSurface * future_surface,
				  unsigned int flags,
				  unsigned int num_macroblocks,
				  unsigned int first_macroblock,
				  XvMCMacroBlockArray * macroblock_array,
				  XvMCBlockArray * blocks);

	 Status(*begin_surface) (Display * display, XvMCContext * context,
				 XvMCSurface * target_surface,
				 XvMCSurface * past_surface,
				 XvMCSurface * future_surface,
				 const XvMCMpegControl * control);
	 Status(*load_qmatrix) (Display * display, XvMCContext * context,
				const XvMCQMatrix * qmx);
	 Status(*put_slice) (Display * display, XvMCContext * context,
			     unsigned char *slice, int bytes);
	 Status(*put_slice2) (Display * display, XvMCContext * context,
			      unsigned char *slice, int bytes, int slice_code);

} intel_xvmc_driver_t, *intel_xvmc_driver_ptr;

extern struct _intel_xvmc_driver i915_xvmc_mc_driver;
extern struct _intel_xvmc_driver i965_xvmc_mc_driver;
extern struct _intel_xvmc_driver xvmc_vld_driver;
extern struct _intel_xvmc_driver *xvmc_driver;

#define SET_BLOCKED_SIGSET()   do {    \
        sigset_t bl_mask;                       \
        sigfillset(&bl_mask);           \
        sigdelset(&bl_mask, SIGFPE);    \
        sigdelset(&bl_mask, SIGILL);    \
        sigdelset(&bl_mask, SIGSEGV);   \
        sigdelset(&bl_mask, SIGBUS);    \
        sigdelset(&bl_mask, SIGKILL);   \
        pthread_sigmask(SIG_SETMASK, &bl_mask, &xvmc_driver->sa_mask); \
    } while (0)

#define RESTORE_BLOCKED_SIGSET() do {    \
        pthread_sigmask(SIG_SETMASK, &xvmc_driver->sa_mask, NULL); \
    } while (0)

#define PPTHREAD_MUTEX_LOCK() do {             \
        SET_BLOCKED_SIGSET();                  \
        pthread_mutex_lock(&xvmc_driver->ctxmutex);       \
    } while (0)

#define PPTHREAD_MUTEX_UNLOCK() do {           \
        pthread_mutex_unlock(&xvmc_driver->ctxmutex);     \
        RESTORE_BLOCKED_SIGSET();              \
    } while (0)

extern void LOCK_HARDWARE(drm_context_t);
extern void UNLOCK_HARDWARE(drm_context_t);

static inline const char *intel_xvmc_decoder_string(int flag)
{
	switch (flag) {
	case XVMC_I915_MPEG2_MC:
		return "i915/945 MPEG2 MC decoder";
	case XVMC_I965_MPEG2_MC:
		return "i965 MPEG2 MC decoder";
	case XVMC_I945_MPEG2_VLD:
		return "i945 MPEG2 VLD decoder";
	case XVMC_I965_MPEG2_VLD:
		return "i965 MPEG2 VLD decoder";
	default:
		return "Unknown decoder";
	}
}

extern unsigned int mb_bytes_420[64];

/* dump function */
extern void intel_xvmc_dump_open(void);
extern void intel_xvmc_dump_close(void);
extern void intel_xvmc_dump_render(XvMCContext * context,
				   unsigned int picture_structure,
				   XvMCSurface * target_surface,
				   XvMCSurface * past_surface,
				   XvMCSurface * future_surface,
				   unsigned int flags,
				   unsigned int num_macroblocks,
				   unsigned int first_macroblock,
				   XvMCMacroBlockArray * macroblock_array,
				   XvMCBlockArray * blocks);

#define	VFE_GENERIC_MODE	0x0
#define	VFE_VLD_MODE		0x1
#define VFE_IS_MODE		0x2
#define VFE_AVC_MC_MODE		0x4
#define VFE_AVC_IT_MODE		0x7
#define VFE_VC1_IT_MODE		0x7

#endif
@


1.7
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@@


1.6
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@d44 1
a44 2
#include "i830_common.h"
#include "i830_hwmc.h"
@


1.5
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d61 1
a61 1
extern int DEBUG;
a72 6
#define XVMC_DBG(s, arg...)						\
    do {								\
	if (DEBUG)							\
	    fprintf(stderr, "[intel_xvmc] debug: " s "\n", ##arg);	\
    } while (0)

d98 3
a100 2
typedef struct _intel_xvmc_context {
	XvMCContext *context;
d102 2
a103 2
	struct _intel_xvmc_context *next;
} intel_xvmc_context_t, *intel_xvmc_context_ptr;
d105 2
a106 2
typedef struct _intel_xvmc_surface {
	XvMCSurface *surface;
d111 4
a114 3
	struct intel_xvmc_command data;
	struct _intel_xvmc_surface *next;
} intel_xvmc_surface_t, *intel_xvmc_surface_ptr;
a130 1
	unsigned int kernel_exec_fencing:1;
a148 1
	unsigned int last_render;
d157 1
a157 1
	intel_xvmc_surface_ptr surf_list;
a166 6
	 Status(*create_surface) (Display * display, XvMCContext * context,
				  XvMCSurface * surface, int priv_count,
				  CARD32 * priv_data);

	 Status(*destroy_surface) (Display * display, XvMCSurface * surface);

a177 10
	 Status(*put_surface) (Display * display, XvMCSurface * surface,
			       Drawable draw, short srcx, short srcy,
			       unsigned short srcw, unsigned short srch,
			       short destx, short desty,
			       unsigned short destw, unsigned short desth,
			       int flags, struct intel_xvmc_command * data);

	 Status(*get_surface_status) (Display * display, XvMCSurface * surface,
				      int *stat);

a239 3

extern intel_xvmc_context_ptr intel_xvmc_find_context(XID id);
extern intel_xvmc_surface_ptr intel_xvmc_find_surface(XID id);
@


1.4
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d54 1
d56 2
a57 2

#include "xf86dri.h"
d86 2
a87 2
extern Status _xvmc_create_context(Display *dpy, XvMCContext *context,
				   int *priv_count, CARD32 **priv_data);
d89 1
a89 1
extern Status _xvmc_destroy_context(Display *dpy, XvMCContext *context);
d91 3
a93 3
extern Status _xvmc_create_surface(Display *dpy, XvMCContext *context,
				   XvMCSurface *surface, int *priv_count,
				   CARD32 **priv_data);
d95 1
a95 1
extern Status _xvmc_destroy_surface(Display *dpy, XvMCSurface *surface);
d97 3
a99 3
extern Status  _xvmc_create_subpicture(Display *dpy, XvMCContext *context,
				       XvMCSubpicture *subpicture,
				       int *priv_count, uint **priv_data);
d101 2
a102 2
extern Status   _xvmc_destroy_subpicture(Display *dpy,
					 XvMCSubpicture *subpicture);
d105 3
a107 3
    XvMCContext *context;
    drm_context_t hw_context;	/* context id to kernel drm */
    struct _intel_xvmc_context *next;
d111 7
a117 7
    XvMCSurface *surface;
    XvImage *image;
    GC gc;
    Bool gc_init;
    Drawable last_draw;
    struct intel_xvmc_command data;
    struct _intel_xvmc_surface *next;
d121 5
a125 5
    drm_handle_t handle;
    unsigned long offset;
    unsigned long size;
    unsigned long bus_addr;
    drmAddress map;
d129 4
a132 2
    int type;			/* hw xvmc type - i830_hwmc.h */
    int screen;			/* current screen num*/
d134 2
a135 66
    int fd;			/* drm file handler */
    drm_handle_t hsarea;	/* DRI open connect */
    char busID[32];

    unsigned int sarea_size;
    drmAddress sarea_address;

    struct {
	unsigned int start_offset;
	unsigned int size;
	unsigned int space;
	unsigned char *ptr;
    } batch;

    struct
    {
        void *ptr;
        unsigned int size;
        unsigned int offset;
        unsigned int active_buf;
        unsigned int irq_emitted;
    } alloc;
    intel_xvmc_drm_map_t batchbuffer;
    unsigned int last_render;

    sigset_t sa_mask;
    pthread_mutex_t ctxmutex;
    int lock;   /* Lightweight lock to avoid locking twice */
    int locked;
    drmLock *driHwLock;

    int num_ctx;
    intel_xvmc_context_ptr ctx_list;
    int num_surf;
    intel_xvmc_surface_ptr surf_list;

    void *private;

    /* driver specific xvmc callbacks */
    Status (*create_context)(Display* display, XvMCContext *context,
	    int priv_count, CARD32 *priv_data);

    Status (*destroy_context)(Display* display, XvMCContext *context);

    Status (*create_surface)(Display* display, XvMCContext *context,
	    XvMCSurface *surface, int priv_count, CARD32 *priv_data);

    Status (*destroy_surface)(Display* display, XvMCSurface *surface);

    Status (*render_surface)(Display *display, XvMCContext *context,
	    unsigned int picture_structure,
	    XvMCSurface *target_surface,
	    XvMCSurface *past_surface,
	    XvMCSurface *future_surface,
	    unsigned int flags,
	    unsigned int num_macroblocks,
	    unsigned int first_macroblock,
	    XvMCMacroBlockArray *macroblock_array,
	    XvMCBlockArray *blocks);

    Status (*put_surface)(Display *display, XvMCSurface *surface,
	    Drawable draw, short srcx, short srcy,
	    unsigned short srcw, unsigned short srch,
	    short destx, short desty,
	    unsigned short destw, unsigned short desth,
	    int flags, struct intel_xvmc_command *data);
d137 74
a210 1
    Status (*get_surface_status)(Display *display, XvMCSurface *surface, int *stat);
a211 1
    /* XXX more for vld */
d216 1
d247 1
a247 1
static inline const char* intel_xvmc_decoder_string(int flag)
d249 1
a249 1
    switch (flag) {
d251 1
a251 1
	    return "i915/945 MPEG2 MC decoder";
d253 1
a253 1
	    return "i965 MPEG2 MC decoder";
d255 1
a255 1
	    return "i945 MPEG2 VLD decoder";
d257 1
a257 1
	    return "i965 MPEG2 VLD decoder";
d259 2
a260 2
	    return "Unknown decoder";
    }
d271 17
a287 5
extern void intel_xvmc_dump_render(XvMCContext *context, unsigned int picture_structure,
	    XvMCSurface *target_surface, XvMCSurface *past_surface,
	    XvMCSurface *future_surface, unsigned int flags,
	    unsigned int num_macroblocks, unsigned int first_macroblock,
	    XvMCMacroBlockArray *macroblock_array, XvMCBlockArray *blocks);
@


1.3
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d204 1
@


1.2
log
@update to xf86-video-intel 2.3.2. Tested among others by okan@@.
@
text
@d41 1
d60 1
a60 1
#define DEBUG 0
d252 11
@


1.1
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@a55 1
#include "driDrawable.h"
@

