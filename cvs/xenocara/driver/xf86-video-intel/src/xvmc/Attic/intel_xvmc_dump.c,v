head	1.5;
access;
symbols
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.02.03.15.54.53;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.22.32.30;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.12.15.20.51;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@/*
 * Copyright Â© 2008 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Zhenyu Wang <zhenyu.z.wang@@intel.com>
 *
 */
#include "intel_xvmc.h"

#define DUMPFILE "./intel_xvmc_dump"

static int xvmc_dump = 0;
static FILE *fp = NULL;

void intel_xvmc_dump_open(void)
{
	char *d = NULL;

	if (xvmc_dump)
		return;

	if ((d = getenv("INTEL_XVMC_DUMP")))
		xvmc_dump = 1;

	if (xvmc_dump) {
		fp = fopen(DUMPFILE, "a");
		if (!fp)
			xvmc_dump = 0;
	}
}

void intel_xvmc_dump_close(void)
{
	if (xvmc_dump) {
		fclose(fp);
		xvmc_dump = 0;
	}
}

void intel_xvmc_dump_render(XvMCContext * context,
			    unsigned int picture_structure,
			    XvMCSurface * target, XvMCSurface * past,
			    XvMCSurface * future, unsigned int flags,
			    unsigned int num_macroblocks,
			    unsigned int first_macroblock,
			    XvMCMacroBlockArray * macroblock_array,
			    XvMCBlockArray * blocks)
{
	int i;
	XvMCMacroBlock *mb;

	if (!xvmc_dump)
		return;

	fprintf(fp, "========== new surface rendering ==========\n");
	fprintf(fp,
		"Context (id:%d) (surface_type_id:%d) (width:%d) (height:%d)\n",
		(int)context->context_id, context->surface_type_id,
		context->width, context->height);

	if (picture_structure == XVMC_FRAME_PICTURE)
		fprintf(fp, "picture structure: frame picture\n");
	else if (picture_structure == XVMC_TOP_FIELD)
		fprintf(fp, "picture structure: top field picture (%s)\n",
			(flags == XVMC_SECOND_FIELD) ? "second" : "first");
	else if (picture_structure == XVMC_BOTTOM_FIELD)
		fprintf(fp, "picture structure: bottom field picture (%s)\n",
			(flags == XVMC_SECOND_FIELD) ? "second" : "first");

	if (!past && !future)
		fprintf(fp, "picture type: I\n");
	else if (past && !future)
		fprintf(fp, "picture type: P\n");
	else if (past && future)
		fprintf(fp, "picture type: B\n");
	else
		fprintf(fp, "picture type: Bad!\n");

	fprintf(fp, "target picture: id (%d) width (%d) height (%d)\n",
		(int)target->surface_id, target->width, target->height);
	if (past)
		fprintf(fp, "past picture: id (%d) width (%d) height (%d)\n",
			(int)past->surface_id, past->width, past->height);
	if (future)
		fprintf(fp, "future picture: id (%d) width (%d) height (%d)\n",
			(int)future->surface_id, future->width, future->height);

	fprintf(fp, "num macroblocks: %d, first macroblocks %d\n",
		num_macroblocks, first_macroblock);

	for (i = first_macroblock; i < (first_macroblock + num_macroblocks);
	     i++) {
		mb = &macroblock_array->macro_blocks[i];

		fprintf(fp, "- MB(%d): ", i);
		fprintf(fp, "x (%d) y (%d)  ", mb->x, mb->y);
		fprintf(fp, "macroblock type (");
		if (mb->macroblock_type & XVMC_MB_TYPE_MOTION_FORWARD)
			fprintf(fp, "motion_forward ");
		if (mb->macroblock_type & XVMC_MB_TYPE_MOTION_BACKWARD)
			fprintf(fp, "motion_backward ");
		if (mb->macroblock_type & XVMC_MB_TYPE_PATTERN)
			fprintf(fp, "pattern ");
		if (mb->macroblock_type & XVMC_MB_TYPE_INTRA)
			fprintf(fp, "intra ");
		fprintf(fp, ")  ");
		fprintf(fp, "mc type ");
		if (picture_structure == XVMC_FRAME_PICTURE) {
			if (mb->motion_type & XVMC_PREDICTION_FIELD)
				fprintf(fp, "(field)  ");
			else if (mb->motion_type & XVMC_PREDICTION_FRAME)
				fprintf(fp, "(frame)  ");
			else if (mb->motion_type & XVMC_PREDICTION_DUAL_PRIME)
				fprintf(fp, "(dual-prime)  ");
			else
				fprintf(fp, "(unknown %d)  ", mb->motion_type);
		} else {	/* field */
			if (mb->motion_type & XVMC_PREDICTION_FIELD)
				fprintf(fp, "(field)  ");
			else if (mb->motion_type & XVMC_PREDICTION_DUAL_PRIME)
				fprintf(fp, "(dual-prime)  ");
			else if (mb->motion_type & XVMC_PREDICTION_16x8)
				fprintf(fp, "(16x8)  ");
			else
				fprintf(fp, "(unknown %d)  ", mb->motion_type);
		}

		if (mb->dct_type == XVMC_DCT_TYPE_FRAME)
			fprintf(fp, "dct type (frame)  ");
		else if (mb->dct_type == XVMC_DCT_TYPE_FIELD)
			fprintf(fp, "dct type (field)  ");

		fprintf(fp, "coded_block_pattern (0x%x)\n",
			mb->coded_block_pattern);

		/* XXX mv dump */
	}

}
@


1.4
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@@


1.3
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@d41 1
a41 1
	if (d = getenv("INTEL_XVMC_DUMP"))
@


1.2
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d77 2
a78 2
		context->context_id, context->surface_type_id, context->width,
		context->height);
d99 1
a99 1
		target->surface_id, target->width, target->height);
d102 1
a102 1
			past->surface_id, past->width, past->height);
d105 1
a105 1
			future->surface_id, future->width, future->height);
@


1.1
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d36 1
a36 1
    char *d  = NULL;
d38 2
a39 2
    if (xvmc_dump)
	return;
d41 2
a42 2
    if (d = getenv("INTEL_XVMC_DUMP"))
	xvmc_dump = 1;
d44 5
a48 5
    if (xvmc_dump) {
	fp = fopen(DUMPFILE, "a");
	if (!fp)
	    xvmc_dump = 0;
    }
d53 4
a56 4
    if (xvmc_dump) {
	fclose(fp);
	xvmc_dump = 0;
    }
d59 8
a66 4
void intel_xvmc_dump_render(XvMCContext *context, unsigned int picture_structure,
	XvMCSurface *target, XvMCSurface *past, XvMCSurface *future, unsigned int flags,
	unsigned int num_macroblocks, unsigned int first_macroblock,
	XvMCMacroBlockArray *macroblock_array, XvMCBlockArray *blocks)
d68 2
a69 2
    int i;
    XvMCMacroBlock *mb;
d71 2
a72 2
    if (!xvmc_dump)
	return;
d74 77
a150 68
    fprintf(fp, "========== new surface rendering ==========\n");
    fprintf(fp, "Context (id:%d) (surface_type_id:%d) (width:%d) (height:%d)\n",
	    context->context_id, context->surface_type_id, context->width, context->height);

    if (picture_structure == XVMC_FRAME_PICTURE)
	fprintf(fp, "picture structure: frame picture\n");
    else if (picture_structure == XVMC_TOP_FIELD)
	fprintf(fp, "picture structure: top field picture (%s)\n",
		(flags == XVMC_SECOND_FIELD)?"second":"first");
    else if (picture_structure == XVMC_BOTTOM_FIELD)
	fprintf(fp, "picture structure: bottom field picture (%s)\n",
		(flags == XVMC_SECOND_FIELD)?"second":"first");

    if (!past && !future)
	fprintf(fp, "picture type: I\n");
    else if (past && !future)
	fprintf(fp, "picture type: P\n");
    else if (past && future)
	fprintf(fp, "picture type: B\n");
    else
	fprintf(fp, "picture type: Bad!\n");

    fprintf(fp, "target picture: id (%d) width (%d) height (%d)\n", target->surface_id,
	    target->width, target->height);
    if (past)
	fprintf(fp, "past picture: id (%d) width (%d) height (%d)\n", past->surface_id,
		past->width, past->height);
    if (future)
	fprintf(fp, "future picture: id (%d) width (%d) height (%d)\n", future->surface_id,
		future->width, future->height);

    fprintf(fp, "num macroblocks: %d, first macroblocks %d\n", num_macroblocks, first_macroblock);

    for (i = first_macroblock; i < (first_macroblock + num_macroblocks); i++) {
	mb = &macroblock_array->macro_blocks[i];

	fprintf(fp, "- MB(%d): ", i);
	fprintf(fp, "x (%d) y (%d)  ", mb->x, mb->y);
	fprintf(fp, "macroblock type (");
	if (mb->macroblock_type & XVMC_MB_TYPE_MOTION_FORWARD)
	    fprintf(fp, "motion_forward ");
	if (mb->macroblock_type & XVMC_MB_TYPE_MOTION_BACKWARD)
	    fprintf(fp, "motion_backward ");
	if (mb->macroblock_type & XVMC_MB_TYPE_PATTERN)
	    fprintf(fp, "pattern ");
	if (mb->macroblock_type & XVMC_MB_TYPE_INTRA)
	    fprintf(fp, "intra ");
	fprintf(fp, ")  ");
	fprintf(fp, "mc type ");
	if (picture_structure == XVMC_FRAME_PICTURE) {
	    if (mb->motion_type & XVMC_PREDICTION_FIELD)
		fprintf(fp, "(field)  ");
	    else if (mb->motion_type & XVMC_PREDICTION_FRAME)
		fprintf(fp, "(frame)  ");
	    else if (mb->motion_type & XVMC_PREDICTION_DUAL_PRIME)
		fprintf(fp, "(dual-prime)  ");
	    else
		fprintf(fp, "(unknown %d)  ", mb->motion_type);
	} else { /* field */
	    if (mb->motion_type & XVMC_PREDICTION_FIELD)
		fprintf(fp, "(field)  ");
	    else if (mb->motion_type & XVMC_PREDICTION_DUAL_PRIME)
		fprintf(fp, "(dual-prime)  ");
	    else if (mb->motion_type & XVMC_PREDICTION_16x8)
		fprintf(fp, "(16x8)  ");
	    else
		fprintf(fp, "(unknown %d)  ", mb->motion_type);
	}
d152 2
a153 4
	if (mb->dct_type == XVMC_DCT_TYPE_FRAME)
	    fprintf(fp, "dct type (frame)  ");
	else if (mb->dct_type == XVMC_DCT_TYPE_FIELD)
	    fprintf(fp, "dct type (field)  ");
d155 2
a156 4
	fprintf(fp, "coded_block_pattern (0x%x)\n", mb->coded_block_pattern);

	/* XXX mv dump */
    }
@

