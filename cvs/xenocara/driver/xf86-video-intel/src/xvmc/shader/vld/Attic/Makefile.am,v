head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.02.03.15.54.54;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2013.03.18.18.38.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.10.22.32.30;	author oga;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@
INTEL_G4I = addidct.g4i               \
	    do_iq_intra.g4i           \
	    do_iq_non_intra.g4i       \
	    idct.g4i                  \
	    iq_intra.g4i              \
	    iq_non_intra.g4i          \
	    motion_field_uv.g4i       \
	    motion_field_y.g4i        \
	    motion_frame_uv.g4i       \
	    motion_frame_y.g4i        \
	    read_field_x0y0_uv.g4i    \
	    read_field_x0y1_uv.g4i    \
	    read_field_x1y0_uv.g4i    \
	    read_field_x1y1_uv.g4i    \
	    read_field_x0y0_y.g4i     \
	    read_field_x0y1_y.g4i     \
	    read_field_x1y0_y.g4i     \
	    read_field_x1y1_y.g4i     \
	    read_frame_x0y0_uv.g4i    \
	    read_frame_x0y1_uv.g4i    \
	    read_frame_x1y0_uv.g4i    \
	    read_frame_x1y1_uv.g4i    \
	    read_frame_x0y0_y.g4i     \
	    read_frame_x0y1_y.g4i     \
	    read_frame_x1y0_y.g4i     \
	    read_frame_x1y1_y.g4i

INTEL_G4A = ipicture.g4a 	\
	    lib.g4a		\
	    frame_forward.g4a	\
	    frame_backward.g4a	\
	    frame_f_b.g4a	\
	    field_forward.g4a	\
	    field_backward.g4a	\
	    field_f_b.g4a	

INTEL_G4B = ipicture.g4b	\
	    lib.g4b		\
	    frame_forward.g4b	\
	    frame_backward.g4b	\
	    frame_f_b.g4b	\
	    field_forward.g4b	\
	    field_backward.g4b  \
	    field_f_b.g4b

INTEL_G4B_GEN5 = ipicture.g4b.gen5	\
	    lib.g4b.gen5		\
	    frame_forward.g4b.gen5	\
	    frame_backward.g4b.gen5	\
	    frame_f_b.g4b.gen5		\
	    field_forward.g4b.gen5	\
	    field_backward.g4b.gen5  	\
	    field_f_b.g4b.gen5

EXTRA_DIST = $(INTEL_G4I)	\
	     $(INTEL_G4A)       \
	     $(INTEL_G4B)    	\
	     $(INTEL_G4B_GEN5)

if HAVE_GEN4ASM

SUFFIXES = .g4a .g4b
.g4a.g4b:
	m4 $*.g4a > $*.g4m && @@INTEL_GEN4ASM@@ -o $@@ $*.g4m && @@INTEL_GEN4ASM@@ -g 5 -o $@@.gen5 $*.g4m && rm $*.g4m

$(INTEL_G4B): $(INTEL_G4I)

BUILT_SOURCES= $(INTEL_G4B)

clean-local:
	-rm -f $(INTEL_G4B)
	-rm -f $(INTEL_G4B_GEN5)
endif    
@


1.2
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@@


1.1
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d65 1
a65 1
	m4 $*.g4a > $*.g4m && intel-gen4asm -o $@@ $*.g4m && intel-gen4asm -g 5 -o $@@.gen5 $*.g4m && rm $*.g4m
@

