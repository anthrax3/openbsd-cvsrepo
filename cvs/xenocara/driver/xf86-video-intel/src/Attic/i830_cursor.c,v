head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v2_2_0_90:1.1.1.3
	v2_2_0:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_7_4:1.1.1.2
	v1_7_3:1.1.1.2
	v1_7_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.03.18.18.38.20;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2011.11.29.12.39.02;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.51;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.06.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.06.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.16.21.01.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.19.44.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/* -*- c-basic-offset: 4 -*- */
/**************************************************************************

Copyright 1998-1999 Precision Insight, Inc., Cedar Park, Texas.
Copyright Â© 2002 David Dawes
All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sub license, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Keith Whitwell <keith@@tungstengraphics.com>
 *   David Dawes <dawes@@xfree86.org>
 *
 * Updated for Dual Head capabilities:
 *   Alan Hourihane <alanh@@tungstengraphics.com>
 *
 * Add ARGB HW cursor support:
 *   Alan Hourihane <alanh@@tungstengraphics.com>
 *
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <string.h>

#include "xf86.h"
#include "xf86_OSproc.h"
#include "compiler.h"

#include "xf86fbman.h"

#include "intel.h"
#include "i830_reg.h"

static void
I830SetPipeCursorBase (xf86CrtcPtr crtc)
{
    ScrnInfoPtr		scrn = crtc->scrn;
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    int			pipe = intel_crtc->pipe;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    int			cursor_base;

    cursor_base = (pipe == 0) ? CURSOR_A_BASE : CURSOR_B_BASE;
    
    if (intel_crtc->cursor_is_argb)
       OUTREG(cursor_base, intel_crtc->cursor_argb_addr);
    else
       OUTREG(cursor_base, intel_crtc->cursor_addr);
}

void
I830InitHWCursor(ScrnInfoPtr scrn)
{
    xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
    intel_screen_private *intel = intel_get_screen_private(scrn);
    uint32_t		temp;
    int			i;

    DPRINTF(PFX, "I830InitHWCursor\n");

    if (!IS_I9XX(intel))
       OUTREG(CURSOR_SIZE, (I810_CURSOR_Y << 12) | I810_CURSOR_X);

    /* Initialise the HW cursor registers, leaving the cursor hidden. */
    for (i = 0; i < xf86_config->num_crtc; i++)
    {
	int   cursor_control = i == 0 ? CURSOR_A_CONTROL : CURSOR_B_CONTROL;
	
	temp = INREG(cursor_control);
	if (IS_MOBILE(intel) || IS_I9XX(intel)) 
	{
	    temp &= ~(CURSOR_MODE | MCURSOR_GAMMA_ENABLE |
		      MCURSOR_MEM_TYPE_LOCAL |
		      MCURSOR_PIPE_SELECT);
	    temp |= (i << 28);
	    temp |= CURSOR_MODE_DISABLE;
	}
	else
	{
	    temp &= ~(CURSOR_ENABLE|CURSOR_GAMMA_ENABLE);
	}
	
	/* Need to set control, then address. */
	OUTREG(cursor_control, temp);
	I830SetPipeCursorBase(xf86_config->crtc[i]);
    }
}

Bool
I830CursorInit(ScreenPtr pScreen)
{
    return xf86_cursors_init (pScreen, I810_CURSOR_X, I810_CURSOR_Y,
			      (HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
			       HARDWARE_CURSOR_BIT_ORDER_MSBFIRST |
			       HARDWARE_CURSOR_INVERT_MASK |
			       HARDWARE_CURSOR_SWAP_SOURCE_AND_MASK |
			       HARDWARE_CURSOR_AND_SOURCE_WITH_MASK |
			       HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64 |
			       HARDWARE_CURSOR_UPDATE_UNHIDDEN |
			       HARDWARE_CURSOR_ARGB));
}

#ifdef ARGB_CURSOR
void
i830_crtc_load_cursor_argb (xf86CrtcPtr crtc, CARD32 *image)
{
    intel_screen_private *intel = intel_get_screen_private(crtc->scrn);
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    uint32_t		*pcurs;

    pcurs = (uint32_t *) (intel->FbBase + intel_crtc->cursor_argb_offset);

    intel_crtc->cursor_is_argb = TRUE;
    memcpy (pcurs, image, I810_CURSOR_Y * I810_CURSOR_X * 4);
}
#endif

void
i830_crtc_set_cursor_position (xf86CrtcPtr crtc, int x, int y)
{
    ScrnInfoPtr		scrn = crtc->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    uint32_t		temp;

    temp = 0;
    if (x < 0) {
	temp |= CURSOR_POS_SIGN << CURSOR_X_SHIFT;
	x = -x;
    }
    if (y < 0) {
	temp |= CURSOR_POS_SIGN << CURSOR_Y_SHIFT;
	y = -y;
    }
    temp |= x << CURSOR_X_SHIFT;
    temp |= y << CURSOR_Y_SHIFT;

    switch (intel_crtc->pipe) {
    case 0:
	OUTREG(CURSOR_A_POSITION, temp);
	break;
    case 1:
	OUTREG(CURSOR_B_POSITION, temp);
	break;
    }
    
    if (crtc->cursor_shown)
	I830SetPipeCursorBase (crtc);
}

void
i830_crtc_show_cursor (xf86CrtcPtr crtc)
{
    ScrnInfoPtr		scrn = crtc->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    uint32_t		temp;
    int			cursor_control = (pipe == 0 ? CURSOR_A_CONTROL :
					  CURSOR_B_CONTROL);
    
    temp = INREG(cursor_control);
    
    if (IS_MOBILE(intel) || IS_I9XX(intel)) 
    {
	temp &= ~(CURSOR_MODE | MCURSOR_PIPE_SELECT);
	if (intel_crtc->cursor_is_argb)
	    temp |= CURSOR_MODE_64_ARGB_AX | MCURSOR_GAMMA_ENABLE;
	else
	    temp |= CURSOR_MODE_64_4C_AX;

	temp |= (pipe << 28); /* Connect to correct pipe */
    }
    else 
    {
	temp &= ~(CURSOR_FORMAT_MASK);
	temp |= CURSOR_ENABLE;
	if (intel_crtc->cursor_is_argb)
	    temp |= CURSOR_FORMAT_ARGB | CURSOR_GAMMA_ENABLE;
	else
	    temp |= CURSOR_FORMAT_3C;
    }
    
    /* Need to set mode, then address. */
    OUTREG(cursor_control, temp);
    I830SetPipeCursorBase (crtc);
}

void
i830_crtc_hide_cursor (xf86CrtcPtr crtc)
{
    ScrnInfoPtr		scrn = crtc->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    uint32_t		temp;
    int			cursor_control = (pipe == 0 ? CURSOR_A_CONTROL :
					  CURSOR_B_CONTROL);
    
    temp = INREG(cursor_control);
    
    if (IS_MOBILE(intel) || IS_I9XX(intel)) 
    {
	temp &= ~(CURSOR_MODE|MCURSOR_GAMMA_ENABLE);
	temp |= CURSOR_MODE_DISABLE;
    }
    else
	temp &= ~(CURSOR_ENABLE|CURSOR_GAMMA_ENABLE);

    /* Need to set mode, then address. */
    OUTREG(cursor_control, temp);
    I830SetPipeCursorBase (crtc);
}

void
i830_crtc_set_cursor_colors (xf86CrtcPtr crtc, int bg, int fg)
{
    ScrnInfoPtr		scrn = crtc->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    int			pal0 = pipe == 0 ? CURSOR_A_PALETTE0 : CURSOR_B_PALETTE0;

    OUTREG(pal0 +  0, bg & 0x00ffffff);
    OUTREG(pal0 +  4, fg & 0x00ffffff);
    OUTREG(pal0 +  8, fg & 0x00ffffff);
    OUTREG(pal0 + 12, bg & 0x00ffffff);
}

void
i830_update_cursor_offsets (ScrnInfoPtr scrn)
{
    intel_screen_private *intel = intel_get_screen_private(scrn);
    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(scrn);
    int i;

    if (intel->cursor_mem) {
	unsigned long cursor_offset_base = intel->cursor_mem->offset;
	unsigned long cursor_addr_base, offset = 0;

	/* Single memory buffer for cursors */
	if (intel->CursorNeedsPhysical) {
	    /* On any hardware that requires physical addresses for cursors,
	     * the PTEs don't support memory above 4GB, so we can safely
	     * ignore the top 32 bits of cursor_mem->bus_addr.
	     */
	    cursor_addr_base = (unsigned long)intel->cursor_mem->bus_addr;
	} else
	    cursor_addr_base = intel->cursor_mem->offset;

	for (i = 0; i < xf86_config->num_crtc; i++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[i];
	    I830CrtcPrivatePtr intel_crtc = crtc->driver_private;

	    intel_crtc->cursor_argb_addr = cursor_addr_base + offset;
	    intel_crtc->cursor_argb_offset = cursor_offset_base + offset;
	    offset += HWCURSOR_SIZE_ARGB;

	    intel_crtc->cursor_addr = cursor_addr_base + offset;
	    intel_crtc->cursor_offset = cursor_offset_base + offset;
	    offset += HWCURSOR_SIZE;
	}
    } else {
	/* Separate allocations per cursor */
	for (i = 0; i < xf86_config->num_crtc; i++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[i];
	    I830CrtcPrivatePtr intel_crtc = crtc->driver_private;

	    if (intel->CursorNeedsPhysical) {
		intel_crtc->cursor_addr =
		    intel->cursor_mem_classic[i]->bus_addr;
		intel_crtc->cursor_argb_addr =
		    intel->cursor_mem_argb[i]->bus_addr;
	    } else {
		intel_crtc->cursor_addr =
		    intel->cursor_mem_classic[i]->offset;
		intel_crtc->cursor_argb_addr =
		    intel->cursor_mem_argb[i]->offset;
	    }
	    intel_crtc->cursor_offset = intel->cursor_mem_classic[i]->offset;
	    intel_crtc->cursor_argb_offset = intel->cursor_mem_argb[i]->offset;
	}
    }
}
@


1.4
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@@


1.3
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d55 2
a56 1
#include "i830.h"
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@a28 14
/* $XFree86: xc/programs/Xserver/hw/xfree86/drivers/i810/i830_cursor.c,v 1.6 2002/12/18 15:49:01 dawes Exp $ */

/*
 * Reformatted with GNU indent (2.2.8), using the following options:
 *
 *    -bad -bap -c41 -cd0 -ncdb -ci6 -cli0 -cp0 -ncs -d0 -di3 -i3 -ip3 -l78
 *    -lp -npcs -psl -sob -ss -br -ce -sc -hnl
 *
 * This provides a good match with the original i810 code and preferred
 * XFree86 formatting conventions.
 *
 * When editing this driver, please follow the existing formatting, and edit
 * with <TAB> characters expanded at 8-column intervals.
 */
d60 1
a60 1
    ScrnInfoPtr		pScrn = crtc->scrn;
d63 1
a63 1
    I830Ptr		pI830 = I830PTR(pScrn);
d75 1
a75 1
I830InitHWCursor(ScrnInfoPtr pScrn)
d77 2
a78 2
    xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
    I830Ptr		pI830 = I830PTR(pScrn);
d84 1
a84 1
    if (!IS_I9XX(pI830))
d93 1
a93 1
	if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
d122 1
a125 13
void
i830_crtc_load_cursor_image (xf86CrtcPtr crtc, unsigned char *src)
{
    I830Ptr		pI830 = I830PTR(crtc->scrn);
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    uint8_t		*pcurs;

    pcurs = pI830->FbBase + intel_crtc->cursor_offset;

    intel_crtc->cursor_is_argb = FALSE;
    memcpy (pcurs, src, I810_CURSOR_X * I810_CURSOR_Y / 4);
}

d130 1
a130 1
    I830Ptr		pI830 = I830PTR(crtc->scrn);
d134 1
a134 1
    pcurs = (uint32_t *) (pI830->FbBase + intel_crtc->cursor_argb_offset);
d145 1
a145 1
    I830Ptr		pI830 = I830PTR(scrn);
d151 1
a151 1
	temp |= (CURSOR_POS_SIGN << CURSOR_X_SHIFT);
d155 1
a155 1
	temp |= (CURSOR_POS_SIGN << CURSOR_Y_SHIFT);
d158 2
a159 2
    temp |= ((x & CURSOR_POS_MASK) << CURSOR_X_SHIFT);
    temp |= ((y & CURSOR_POS_MASK) << CURSOR_Y_SHIFT);
d178 1
a178 1
    I830Ptr		pI830 = I830PTR(scrn);
d187 1
a187 1
    if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
d216 1
a216 1
    I830Ptr		pI830 = I830PTR(scrn);
d225 1
a225 1
    if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
d242 1
a242 1
    I830Ptr		pI830 = I830PTR(scrn);
d254 1
a254 1
i830_update_cursor_offsets (ScrnInfoPtr pScrn)
d256 2
a257 2
    I830Ptr pI830 = I830PTR(pScrn);
    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
d260 2
a261 2
    if (pI830->cursor_mem) {
	unsigned long cursor_offset_base = pI830->cursor_mem->offset;
d265 1
a265 1
	if (pI830->CursorNeedsPhysical) {
d270 1
a270 1
	    cursor_addr_base = (unsigned long)pI830->cursor_mem->bus_addr;
d272 1
a272 1
	    cursor_addr_base = pI830->cursor_mem->offset;
d292 1
a292 1
	    if (pI830->CursorNeedsPhysical) {
d294 1
a294 1
		    pI830->cursor_mem_classic[i]->bus_addr;
d296 1
a296 1
		    pI830->cursor_mem_argb[i]->bus_addr;
d299 1
a299 1
		    pI830->cursor_mem_classic[i]->offset;
d301 1
a301 1
		    pI830->cursor_mem_argb[i]->offset;
d303 2
a304 2
	    intel_crtc->cursor_offset = pI830->cursor_mem_classic[i]->offset;
	    intel_crtc->cursor_argb_offset = pI830->cursor_mem_argb[i]->offset;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1

d71 16
a86 10
static void I830LoadCursorImage(ScrnInfoPtr pScrn, unsigned char *src);
static void I830ShowCursor(ScrnInfoPtr pScrn);
static void I830HideCursor(ScrnInfoPtr pScrn);
static void I830SetCursorColors(ScrnInfoPtr pScrn, int bg, int fb);
static void I830SetCursorPosition(ScrnInfoPtr pScrn, int x, int y);
static Bool I830UseHWCursor(ScreenPtr pScrn, CursorPtr pCurs);
#ifdef ARGB_CURSOR
static void I830LoadCursorARGB(ScrnInfoPtr pScrn, CursorPtr pCurs);
static Bool I830UseHWCursorARGB(ScreenPtr pScrn, CursorPtr pCurs);
#endif
d91 33
a123 63
   I830Ptr pI830 = I830PTR(pScrn);
   CARD32 temp;

   DPRINTF(PFX, "I830InitHWCursor\n");
   /* Initialise the HW cursor registers, leaving the cursor hidden. */
   if (IS_MOBILE(pI830) || IS_I9XX(pI830)) {
      temp = INREG(CURSOR_A_CONTROL);
      temp &= ~(CURSOR_MODE | MCURSOR_GAMMA_ENABLE | MCURSOR_MEM_TYPE_LOCAL |
		MCURSOR_PIPE_SELECT);
      temp |= CURSOR_MODE_DISABLE;
      temp |= (pI830->pipe << 28);
      if (pI830->CursorIsARGB)
         temp |= CURSOR_MODE_64_ARGB_AX | MCURSOR_GAMMA_ENABLE;
      else
         temp |= CURSOR_MODE_64_4C_AX;
      /* Need to set control, then address. */
      OUTREG(CURSOR_A_CONTROL, temp);
      if (pI830->CursorNeedsPhysical) {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Physical);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Physical);
      } else {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Start);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Start);
      }
      if (pI830->Clone || pI830->MergedFB) {
         temp &= ~MCURSOR_PIPE_SELECT;
         temp |= (!pI830->pipe << 28);
         OUTREG(CURSOR_B_CONTROL, temp);
         if (pI830->CursorNeedsPhysical) {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Physical);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Physical);
	 } else {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Start);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Start);
	 }
      }
   } else {
      temp = INREG(CURSOR_CONTROL);
      temp &= ~(CURSOR_FORMAT_MASK | CURSOR_GAMMA_ENABLE |
		CURSOR_ENABLE  | CURSOR_STRIDE_MASK);
      if (pI830->CursorIsARGB)
         temp |= CURSOR_FORMAT_ARGB | CURSOR_GAMMA_ENABLE;
      else 
         temp |= CURSOR_FORMAT_3C;
      /* This initialises the format and leave the cursor disabled. */
      OUTREG(CURSOR_CONTROL, temp);
      /* Need to set address and size after disabling. */
      if (pI830->CursorIsARGB)
         OUTREG(CURSOR_BASEADDR, pI830->CursorMemARGB->Start);
      else
         OUTREG(CURSOR_BASEADDR, pI830->CursorMem->Start);
      temp = ((I810_CURSOR_X & CURSOR_SIZE_MASK) << CURSOR_SIZE_HSHIFT) |
	     ((I810_CURSOR_Y & CURSOR_SIZE_MASK) << CURSOR_SIZE_VSHIFT);
      OUTREG(CURSOR_SIZE, temp);
   }
d129 8
a136 45
   ScrnInfoPtr pScrn;
   I830Ptr pI830;
   xf86CursorInfoPtr infoPtr;

   DPRINTF(PFX, "I830CursorInit\n");
   pScrn = xf86Screens[pScreen->myNum];
   pI830 = I830PTR(pScrn);
   pI830->CursorInfoRec = infoPtr = xf86CreateCursorInfoRec();
   if (!infoPtr)
      return FALSE;

   infoPtr->MaxWidth = I810_CURSOR_X;
   infoPtr->MaxHeight = I810_CURSOR_Y;
   infoPtr->Flags = (HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
		     HARDWARE_CURSOR_BIT_ORDER_MSBFIRST |
		     HARDWARE_CURSOR_INVERT_MASK |
		     HARDWARE_CURSOR_SWAP_SOURCE_AND_MASK |
		     HARDWARE_CURSOR_AND_SOURCE_WITH_MASK |
		     HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64 | 0);

   infoPtr->SetCursorColors = I830SetCursorColors;
   infoPtr->SetCursorPosition = I830SetCursorPosition;
   infoPtr->LoadCursorImage = I830LoadCursorImage;
   infoPtr->HideCursor = I830HideCursor;
   infoPtr->ShowCursor = I830ShowCursor;
   infoPtr->UseHWCursor = I830UseHWCursor;

   pI830->pCurs = NULL;

#ifdef ARGB_CURSOR
   pI830->CursorIsARGB = FALSE;

   if (pI830->CursorMemARGB->Start) {
      /* Use ARGB if we were able to allocate the 16kb needed */
      infoPtr->UseHWCursorARGB = I830UseHWCursorARGB;
      infoPtr->LoadCursorARGB = I830LoadCursorARGB;
   }
#endif

   if (pI830->CursorNeedsPhysical && !pI830->CursorMem->Physical) 
      return FALSE;

   I830HideCursor(pScrn);

   return xf86InitCursor(pScreen, infoPtr);
d139 2
a140 2
static Bool
I830UseHWCursor(ScreenPtr pScreen, CursorPtr pCurs)
d142 3
a144 2
   ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
   I830Ptr pI830 = I830PTR(pScrn);
d146 1
a146 1
   pI830->pCurs = pCurs;
d148 2
a149 5
   DPRINTF(PFX, "I830UseHWCursor\n");
   if (pI830->CursorNeedsPhysical && !pI830->CursorMem->Physical) 
      return FALSE;

   return TRUE;
a151 9
static void
I830LoadCursorImage(ScrnInfoPtr pScrn, unsigned char *src)
{
   I830Ptr pI830 = I830PTR(pScrn);
   CARD8 *pcurs = (CARD8 *) (pI830->FbBase + pI830->CursorMem->Start);
   int x, y;

   DPRINTF(PFX, "I830LoadCursorImage\n");

d153 2
a154 60
   pI830->CursorIsARGB = FALSE;
#endif
 
   memset(pcurs, 0, 64 * 64 / 4);

#define GetBit(image, x, y)\
    ((int)((*(image + ((x) / 8) + ((y) * (128/8))) &\
	    (1 << ( 7 -((x) % 8) ))) ? 1 : 0))

#define SetBit(image, x, y)\
    (*(image + (x) / 8 + (y) * (128/8)) |=\
     (int) (1 <<  (7-((x) % 8))))

   switch (pI830->rotation) {
      case RR_Rotate_90:
         for (y = 0; y < 64; y++) {
            for (x = 0; x < 64; x++) {
               if (GetBit(src, 64 - y - 1, x))
                  SetBit(pcurs, x, y);
               if (GetBit(src, 128 - y - 1, x))
                  SetBit(pcurs, x + 64, y);
            }
         }

         return;
      case RR_Rotate_180:
         for (y = 0; y < 64; y++) {
            for (x = 0; x < 64; x++) {
               if (GetBit(src, 64 - x - 1, 64 - y - 1))
                  SetBit(pcurs, x, y);
               if (GetBit(src, 128 - x - 1, 64 - y - 1))
                  SetBit(pcurs, x + 64, y);
            }
         }

         return;
      case RR_Rotate_270:
         for (y = 0; y < 64; y++) {
            for (x = 0; x < 64; x++) {
               if (GetBit(src, y, 64 - x - 1))
                  SetBit(pcurs, x, y);
               if (GetBit(src, y + 64, 64 - x - 1))
                  SetBit(pcurs, x + 64, y);
            }
         }

         return;
   }

   for (y = 0; y < 64; y++) {
      for (x = 0; x < 64 / 4; x++) {
	 *pcurs++ = *src++;
      }
   }
}

#ifdef ARGB_CURSOR
#include "cursorstr.h"

static Bool I830UseHWCursorARGB (ScreenPtr pScreen, CursorPtr pCurs)
d156 3
a158 6
   ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
   I830Ptr pI830 = I830PTR(pScrn);

   DPRINTF(PFX, "I830UseHWCursorARGB\n");

   pI830->pCurs = pCurs;
d160 1
a160 2
   if (pScrn->bitsPerPixel == 8)
      return FALSE;
d162 2
a163 7
   if (pI830->CursorNeedsPhysical && !pI830->CursorMemARGB->Physical) 
      return FALSE;

   if (pCurs->bits->height <= 64 && pCurs->bits->width <= 64) 
	return TRUE;

   return FALSE;
d165 1
d167 2
a168 1
static void I830LoadCursorARGB (ScrnInfoPtr pScrn, CursorPtr pCurs)
d170 25
a194 9
   I830Ptr pI830 = I830PTR(pScrn);
   CARD32 *dst = (CARD32 *) (pI830->FbBase + pI830->CursorMemARGB->Start);
   CARD32 *image = (CARD32 *)pCurs->bits->argb;
   int x, y, w, h;

   DPRINTF(PFX, "I830LoadCursorARGB\n");

   if (!image)
	return;	/* XXX can't happen */
d196 2
a197 57
   pI830->CursorIsARGB = TRUE;

   w = pCurs->bits->width;
   h = pCurs->bits->height;

   switch (pI830->rotation) {
      case RR_Rotate_90:
         for (y = 0; y < h; y++) {
            for (x = 0; x < w; x++)
               dst[(y) + ((64 - x - 1) * 64)] = *image++;
            for(; x < 64; x++)
               dst[(y) + ((64 - x - 1) * 64)] = 0;
         }
         for(; y < 64; y++) {
   	    for(x = 0; x < 64; x++)
               dst[(y) + ((64 - x - 1) * 64)] = 0;
         }
         return;

      case RR_Rotate_180:
         for (y = 0; y < h; y++) {
            for (x = 0; x < w; x++)
               dst[(64 - x - 1) + ((64 - y - 1) * 64)] = *image++;
            for(; x < 64; x++)
               dst[(64 - x - 1) + ((64 - y - 1) * 64)] = 0;
         }
         for(; y < 64; y++) {
            for(x = 0; x < 64; x++)
               dst[(64 - x - 1) + ((64 - y - 1) * 64)] = 0;
         }
         return;

      case RR_Rotate_270:
         for (y = 0; y < h; y++) {
            for (x = 0; x < w; x++)
               dst[(64 - y - 1) + (x * 64)] = *image++;
            for(; x < 64; x++)
               dst[(64 - y - 1) + (x * 64)] = 0;
         }
         for(; y < 64; y++) {
            for(x = 0; x < 64; x++)
               dst[(64 - y - 1) + (x * 64)] = 0;
         }
         return;
   }

   for(y = 0; y < h; y++) {
      for(x = 0; x < w; x++)
          *dst++ = *image++;
      for(; x < 64; x++)
          *dst++ = 0;
   }

   for(; y < 64; y++) {
      for(x = 0; x < 64; x++)
          *dst++ = 0;
   }
a198 1
#endif
d200 2
a201 4
#define CDMPTR    ((I830ModePrivatePtr)pI830->currentMode->Private)->merged

static void
I830SetCursorPositionMerged(ScrnInfoPtr pScrn, int x, int y)
d203 33
a235 89
   I830Ptr pI830 = I830PTR(pScrn);
   ScrnInfoPtr    pScrn2 = pI830->pScrn_2;
   DisplayModePtr mode1 = CDMPTR.First;
   Bool hide = FALSE, show = FALSE;
   DisplayModePtr mode2 = CDMPTR.Second;
   int x1, y1, x2, y2;
   int total_y1 = pScrn->frameY1 - pScrn->frameY0;
   int total_y2 = pScrn2->frameY1 - pScrn2->frameY0;
   CARD32 temp = 0, temp2 = 0;

   x += pScrn->frameX0;
   y += pScrn->frameY0;

   x1 = x - pI830->FirstframeX0;
   y1 = y - pI830->FirstframeY0;

   x2 = x - pScrn2->frameX0;
   y2 = y - pScrn2->frameY0;

   if (y1 > total_y1)
      y1 = total_y1;
   if (y2 > total_y2)                  
      y2 = total_y2;

   /* move cursor offscreen */
   if (y1 >= 0 && y2 >= mode2->VDisplay) {
      y2 = -I810_CURSOR_Y;  
   } else if (y2 >= 0 && y1 >= mode1->VDisplay) {
      y1 = -I810_CURSOR_Y;  
   }
   if (x1 >= 0 && x2 >= mode2->HDisplay) {
      x2 = -I810_CURSOR_X;  
   } else if (x2 >= 0 && x1 >= mode1->HDisplay) {
      x1 = -I810_CURSOR_X;  
   }

   /* Clamp the cursor position to the visible screen area */
   if (x1 >= mode1->HDisplay) x1 = mode1->HDisplay - 1;
   if (y1 >= mode1->VDisplay) y1 = mode1->VDisplay - 1;
   if (x1 <= -I810_CURSOR_X) x1 = -I810_CURSOR_X + 1;
   if (y1 <= -I810_CURSOR_Y) y1 = -I810_CURSOR_Y + 1;
   if (x2 >= mode2->HDisplay) x2 = mode2->HDisplay - 1;
   if (y2 >= mode2->VDisplay) y2 = mode2->VDisplay - 1;
   if (x2 <= -I810_CURSOR_X) x2 = -I810_CURSOR_X + 1;
   if (y2 <= -I810_CURSOR_Y) y2 = -I810_CURSOR_Y + 1;

   if (x1 < 0) {
      temp |= (CURSOR_POS_SIGN << CURSOR_X_SHIFT);
      x1 = -x1;
   }
   if (y1 < 0) {
      temp |= (CURSOR_POS_SIGN << CURSOR_Y_SHIFT);
      y1 = -y1;
   }
   if (x2 < 0) {
      temp2 |= (CURSOR_POS_SIGN << CURSOR_X_SHIFT);
      x2 = -x2;
   }
   if (y2 < 0) {
      temp2 |= (CURSOR_POS_SIGN << CURSOR_Y_SHIFT);
      y2 = -y2;
   }

   temp |= ((x1 & CURSOR_POS_MASK) << CURSOR_X_SHIFT);
   temp |= ((y1 & CURSOR_POS_MASK) << CURSOR_Y_SHIFT);
   temp2 |= ((x2 & CURSOR_POS_MASK) << CURSOR_X_SHIFT);
   temp2 |= ((y2 & CURSOR_POS_MASK) << CURSOR_Y_SHIFT);

   OUTREG(CURSOR_A_POSITION, temp);
   OUTREG(CURSOR_B_POSITION, temp2);

   if (pI830->cursorOn) {
      if (hide)
	 pI830->CursorInfoRec->HideCursor(pScrn);
      else if (show)
	 pI830->CursorInfoRec->ShowCursor(pScrn);
      pI830->cursorOn = TRUE;
   }

   /* have to upload the base for the new position */
   if (IS_I9XX(pI830)) {
      if (pI830->CursorIsARGB) {
         OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Physical);
         OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Physical);
      } else {
         OUTREG(CURSOR_A_BASE, pI830->CursorMem->Physical);
         OUTREG(CURSOR_B_BASE, pI830->CursorMem->Physical);
      }
   }
d238 2
a239 2
static void
I830SetCursorPosition(ScrnInfoPtr pScrn, int x, int y)
d241 21
a261 121
   I830Ptr pI830 = I830PTR(pScrn);
   CARD32 temp = 0;
   Bool hide = FALSE, show = FALSE;
   int oldx = x, oldy = y;
   int hotspotx = 0, hotspoty = 0;
#if 0
   static Bool outsideViewport = FALSE;
#endif

   if (pI830->MergedFB) {
      I830SetCursorPositionMerged(pScrn, x, y);
      return;
   }

   oldx += pScrn->frameX0; /* undo what xf86HWCurs did */
   oldy += pScrn->frameY0;

   switch (pI830->rotation) {
      case RR_Rotate_0:
         x = oldx;
         y = oldy;
         break;
      case RR_Rotate_90:
         x = oldy;
         y = pScrn->pScreen->width - oldx;
         hotspoty = I810_CURSOR_X;
         break;
      case RR_Rotate_180:
         x = pScrn->pScreen->width - oldx;
         y = pScrn->pScreen->height - oldy;
         hotspotx = I810_CURSOR_X;
         hotspoty = I810_CURSOR_Y;
         break;
      case RR_Rotate_270:
         x = pScrn->pScreen->height - oldy;
         y = oldx;
         hotspotx = I810_CURSOR_Y;
         break;
   }

   x -= hotspotx;
   y -= hotspoty;

   /* Now, readjust */
   x -= pScrn->frameX0;
   y -= pScrn->frameY0;

   /* Clamp the cursor position to the visible screen area */
   if (x >= pScrn->currentMode->HDisplay) x = pScrn->currentMode->HDisplay - 1;
   if (y >= pScrn->currentMode->VDisplay) y = pScrn->currentMode->VDisplay - 1;
   if (x <= -I810_CURSOR_X) x = -I810_CURSOR_X + 1;
   if (y <= -I810_CURSOR_Y) y = -I810_CURSOR_Y + 1;

#if 0
   /*
    * There is a screen display problem when the cursor position is set
    * wholely outside of the viewport.  We trap that here, turning the
    * cursor off when that happens, and back on when it comes back into
    * the viewport.
    */
   if (x >= pScrn->currentMode->HDisplay ||
       y >= pScrn->currentMode->VDisplay ||
       x <= -I810_CURSOR_X || y <= -I810_CURSOR_Y) {
      hide = TRUE;
      outsideViewport = TRUE;
   } else if (outsideViewport) {
      show = TRUE;
      outsideViewport = FALSE;
   }
#endif

   if (x < 0) {
      temp |= (CURSOR_POS_SIGN << CURSOR_X_SHIFT);
      x = -x;
   }
   if (y < 0) {
      temp |= (CURSOR_POS_SIGN << CURSOR_Y_SHIFT);
      y = -y;
   }
   temp |= ((x & CURSOR_POS_MASK) << CURSOR_X_SHIFT);
   temp |= ((y & CURSOR_POS_MASK) << CURSOR_Y_SHIFT);

   OUTREG(CURSOR_A_POSITION, temp);
   if (pI830->Clone)
      OUTREG(CURSOR_B_POSITION, temp);

   if (pI830->cursorOn) {
      if (hide)
	 pI830->CursorInfoRec->HideCursor(pScrn);
      else if (show)
	 pI830->CursorInfoRec->ShowCursor(pScrn);
      pI830->cursorOn = TRUE;
   }

   /* have to upload the base for the new position */
   if (IS_I9XX(pI830)) {
      if (pI830->CursorNeedsPhysical) {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Physical);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Physical);
      } else {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Start);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Start);
      }
      if (pI830->Clone) {
         if (pI830->CursorNeedsPhysical) {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Physical);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Physical);
	 } else {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Start);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Start);
	 }
      }
   }
d264 2
a265 2
static void
I830ShowCursor(ScrnInfoPtr pScrn)
d267 10
a276 65
   I830Ptr pI830 = I830PTR(pScrn);
   CARD32 temp;

   DPRINTF(PFX, "I830ShowCursor\n");
   DPRINTF(PFX,
	   "Value of CursorMem->Physical is %x, "
	   " Value of CursorMem->Start is %x ",
	   pI830->CursorMem->Physical, pI830->CursorMem->Start);
   DPRINTF(PFX,
	   "Value of CursorMemARGB->Physical is %x, "
	   " Value of CursorMemARGB->Start is %x ",
	   pI830->CursorMemARGB->Physical, pI830->CursorMemARGB->Start);

   pI830->cursorOn = TRUE;
   if (IS_MOBILE(pI830) || IS_I9XX(pI830)) {
      temp = INREG(CURSOR_A_CONTROL);
      temp &= ~(CURSOR_MODE | MCURSOR_PIPE_SELECT | MCURSOR_GAMMA_ENABLE);
      if (pI830->CursorIsARGB)
         temp |= CURSOR_MODE_64_ARGB_AX | MCURSOR_GAMMA_ENABLE;
      else
         temp |= CURSOR_MODE_64_4C_AX;
      temp |= (pI830->pipe << 28); /* Connect to correct pipe */
      /* Need to set mode, then address. */
      OUTREG(CURSOR_A_CONTROL, temp);
      if (pI830->CursorNeedsPhysical) {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Physical);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Physical);
      } else {
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Start);
         else
            OUTREG(CURSOR_A_BASE, pI830->CursorMem->Start);
      }
      if (pI830->Clone || pI830->MergedFB) {
         temp &= ~MCURSOR_PIPE_SELECT;
         temp |= (!pI830->pipe << 28);
         OUTREG(CURSOR_B_CONTROL, temp);
         if (pI830->CursorNeedsPhysical) {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Physical);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Physical);
	 } else {
            if (pI830->CursorIsARGB)
               OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Start);
            else
               OUTREG(CURSOR_B_BASE, pI830->CursorMem->Start);
	 }
      }
   } else {
      temp = INREG(CURSOR_CONTROL);
      temp &= ~(CURSOR_FORMAT_MASK | CURSOR_GAMMA_ENABLE);
      temp |= CURSOR_ENABLE;
      if (pI830->CursorIsARGB)
         temp |= CURSOR_FORMAT_ARGB | CURSOR_GAMMA_ENABLE;
      else 
         temp |= CURSOR_FORMAT_3C;
      OUTREG(CURSOR_CONTROL, temp);
      if (pI830->CursorIsARGB)
         OUTREG(CURSOR_BASEADDR, pI830->CursorMemARGB->Start);
      else
         OUTREG(CURSOR_BASEADDR, pI830->CursorMem->Start);
   }
d279 2
a280 2
static void
I830HideCursor(ScrnInfoPtr pScrn)
d282 51
a332 53
   CARD32 temp;
   I830Ptr pI830 = I830PTR(pScrn);

   DPRINTF(PFX, "I830HideCursor\n");

   pI830->cursorOn = FALSE;
   if (IS_MOBILE(pI830) || IS_I9XX(pI830)) {
      temp = INREG(CURSOR_A_CONTROL);
      temp &= ~CURSOR_MODE;
      temp |= CURSOR_MODE_DISABLE;
      OUTREG(CURSOR_A_CONTROL, temp);
      /* This is needed to flush the above change. */
      if (pI830->CursorIsARGB)
         OUTREG(CURSOR_A_BASE, pI830->CursorMemARGB->Physical);
      else
         OUTREG(CURSOR_A_BASE, pI830->CursorMem->Physical);
      if (pI830->Clone || pI830->MergedFB) {
         OUTREG(CURSOR_B_CONTROL, temp);
         if (pI830->CursorIsARGB)
            OUTREG(CURSOR_B_BASE, pI830->CursorMemARGB->Physical);
         else
            OUTREG(CURSOR_B_BASE, pI830->CursorMem->Physical);
      }
   } else {
      temp = INREG(CURSOR_CONTROL);
      temp &= ~CURSOR_ENABLE;
      OUTREG(CURSOR_CONTROL, temp);
   }
}

static void
I830SetCursorColors(ScrnInfoPtr pScrn, int bg, int fg)
{
   I830Ptr pI830 = I830PTR(pScrn);

#ifdef ARGB_CURSOR
    /* Don't recolour cursors set with SetCursorARGB. */
    if (pI830->CursorIsARGB)
       return;
#endif

   DPRINTF(PFX, "I830SetCursorColors\n");

   OUTREG(CURSOR_A_PALETTE0, bg & 0x00ffffff);
   OUTREG(CURSOR_A_PALETTE1, fg & 0x00ffffff);
   OUTREG(CURSOR_A_PALETTE2, fg & 0x00ffffff);
   OUTREG(CURSOR_A_PALETTE3, bg & 0x00ffffff);
   if (pI830->Clone || pI830->MergedFB) {
      OUTREG(CURSOR_B_PALETTE0, bg & 0x00ffffff);
      OUTREG(CURSOR_B_PALETTE1, fg & 0x00ffffff);
      OUTREG(CURSOR_B_PALETTE2, fg & 0x00ffffff);
      OUTREG(CURSOR_B_PALETTE3, bg & 0x00ffffff);
   }
@


1.1.1.1
log
@Importing xf86-video-i810 1.7.2
@
text
@@


1.1.1.2
log
@xf86-video-intel 1.7.3
@
text
@d523 5
a527 11
   if (pScrn->currentMode) {
      /* Clamp the cursor position to the visible screen area */
      if (x >= pScrn->currentMode->HDisplay) x = pScrn->currentMode->HDisplay - 1;
      if (y >= pScrn->currentMode->VDisplay) y = pScrn->currentMode->VDisplay - 1;
      if (x <= -I810_CURSOR_X) x = -I810_CURSOR_X + 1;
      if (y <= -I810_CURSOR_Y) y = -I810_CURSOR_Y + 1;
   } else {
      /* Can't ensure the cursor will be visible, so hide it */
      hide = TRUE;
      show = FALSE;
   }
@


1.1.1.3
log
@xf86-video-intel 2.2.0
@
text
@d1 1
a1 1
/* -*- c-basic-offset: 4 -*- */
d71 10
a80 16
static void
I830SetPipeCursorBase (xf86CrtcPtr crtc)
{
    ScrnInfoPtr		pScrn = crtc->scrn;
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    int			pipe = intel_crtc->pipe;
    I830Ptr		pI830 = I830PTR(pScrn);
    int			cursor_base;

    cursor_base = (pipe == 0) ? CURSOR_A_BASE : CURSOR_B_BASE;
    
    if (intel_crtc->cursor_is_argb)
       OUTREG(cursor_base, intel_crtc->cursor_argb_addr);
    else
       OUTREG(cursor_base, intel_crtc->cursor_addr);
}
d85 63
a147 33
    xf86CrtcConfigPtr   xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
    I830Ptr		pI830 = I830PTR(pScrn);
    CARD32		temp;
    int			i;

    DPRINTF(PFX, "I830InitHWCursor\n");

    if (!IS_I9XX(pI830))
       OUTREG(CURSOR_SIZE, (I810_CURSOR_Y << 12) | I810_CURSOR_X);

    /* Initialise the HW cursor registers, leaving the cursor hidden. */
    for (i = 0; i < xf86_config->num_crtc; i++)
    {
	int   cursor_control = i == 0 ? CURSOR_A_CONTROL : CURSOR_B_CONTROL;
	
	temp = INREG(cursor_control);
	if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
	{
	    temp &= ~(CURSOR_MODE | MCURSOR_GAMMA_ENABLE |
		      MCURSOR_MEM_TYPE_LOCAL |
		      MCURSOR_PIPE_SELECT);
	    temp |= (i << 28);
	    temp |= CURSOR_MODE_DISABLE;
	}
	else
	{
	    temp &= ~(CURSOR_ENABLE|CURSOR_GAMMA_ENABLE);
	}
	
	/* Need to set control, then address. */
	OUTREG(cursor_control, temp);
	I830SetPipeCursorBase(xf86_config->crtc[i]);
    }
d153 60
a212 8
    return xf86_cursors_init (pScreen, I810_CURSOR_X, I810_CURSOR_Y,
			      (HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
			       HARDWARE_CURSOR_BIT_ORDER_MSBFIRST |
			       HARDWARE_CURSOR_INVERT_MASK |
			       HARDWARE_CURSOR_SWAP_SOURCE_AND_MASK |
			       HARDWARE_CURSOR_AND_SOURCE_WITH_MASK |
			       HARDWARE_CURSOR_SOURCE_MASK_INTERLEAVE_64 |
			       HARDWARE_CURSOR_ARGB));
d215 2
a216 2
void
i830_crtc_load_cursor_image (xf86CrtcPtr crtc, unsigned char *src)
d218 3
a220 3
    I830Ptr		pI830 = I830PTR(crtc->scrn);
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    CARD8		*pcurs;
d222 7
a228 1
    pcurs = pI830->FbBase + intel_crtc->cursor_offset;
d230 49
a278 2
    intel_crtc->cursor_is_argb = FALSE;
    memcpy (pcurs, src, I810_CURSOR_X * I810_CURSOR_Y / 4);
d282 24
a305 2
void
i830_crtc_load_cursor_argb (xf86CrtcPtr crtc, CARD32 *image)
d307 4
a310 3
    I830Ptr		pI830 = I830PTR(crtc->scrn);
    I830CrtcPrivatePtr	intel_crtc = crtc->driver_private;
    CARD32		*pcurs;
d312 6
a317 1
    pcurs = (CARD32 *) (pI830->FbBase + intel_crtc->cursor_argb_offset);
d319 55
a373 2
    intel_crtc->cursor_is_argb = TRUE;
    memcpy (pcurs, image, I810_CURSOR_Y * I810_CURSOR_X * 4);
d377 4
a380 2
void
i830_crtc_set_cursor_position (xf86CrtcPtr crtc, int x, int y)
d382 89
a470 28
    ScrnInfoPtr		scrn = crtc->scrn;
    I830Ptr		pI830 = I830PTR(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    CARD32		temp;

    temp = 0;
    if (x < 0) {
	temp |= (CURSOR_POS_SIGN << CURSOR_X_SHIFT);
	x = -x;
    }
    if (y < 0) {
	temp |= (CURSOR_POS_SIGN << CURSOR_Y_SHIFT);
	y = -y;
    }
    temp |= ((x & CURSOR_POS_MASK) << CURSOR_X_SHIFT);
    temp |= ((y & CURSOR_POS_MASK) << CURSOR_Y_SHIFT);

    switch (intel_crtc->pipe) {
    case 0:
	OUTREG(CURSOR_A_POSITION, temp);
	break;
    case 1:
	OUTREG(CURSOR_B_POSITION, temp);
	break;
    }
    
    if (crtc->cursor_shown)
	I830SetPipeCursorBase (crtc);
d473 2
a474 2
void
i830_crtc_show_cursor (xf86CrtcPtr crtc)
d476 127
a602 33
    ScrnInfoPtr		scrn = crtc->scrn;
    I830Ptr		pI830 = I830PTR(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    CARD32		temp;
    int			cursor_control = (pipe == 0 ? CURSOR_A_CONTROL :
					  CURSOR_B_CONTROL);
    
    temp = INREG(cursor_control);
    
    if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
    {
	temp &= ~(CURSOR_MODE | MCURSOR_PIPE_SELECT);
	if (intel_crtc->cursor_is_argb)
	    temp |= CURSOR_MODE_64_ARGB_AX | MCURSOR_GAMMA_ENABLE;
	else
	    temp |= CURSOR_MODE_64_4C_AX;

	temp |= (pipe << 28); /* Connect to correct pipe */
    }
    else 
    {
	temp &= ~(CURSOR_FORMAT_MASK);
	temp |= CURSOR_ENABLE;
	if (intel_crtc->cursor_is_argb)
	    temp |= CURSOR_FORMAT_ARGB | CURSOR_GAMMA_ENABLE;
	else
	    temp |= CURSOR_FORMAT_3C;
    }
    
    /* Need to set mode, then address. */
    OUTREG(cursor_control, temp);
    I830SetPipeCursorBase (crtc);
d605 2
a606 2
void
i830_crtc_hide_cursor (xf86CrtcPtr crtc)
d608 65
a672 21
    ScrnInfoPtr		scrn = crtc->scrn;
    I830Ptr		pI830 = I830PTR(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    CARD32		temp;
    int			cursor_control = (pipe == 0 ? CURSOR_A_CONTROL :
					  CURSOR_B_CONTROL);
    
    temp = INREG(cursor_control);
    
    if (IS_MOBILE(pI830) || IS_I9XX(pI830)) 
    {
	temp &= ~(CURSOR_MODE|MCURSOR_GAMMA_ENABLE);
	temp |= CURSOR_MODE_DISABLE;
    }
    else
	temp &= ~(CURSOR_ENABLE|CURSOR_GAMMA_ENABLE);

    /* Need to set mode, then address. */
    OUTREG(cursor_control, temp);
    I830SetPipeCursorBase (crtc);
d675 2
a676 2
void
i830_crtc_set_cursor_colors (xf86CrtcPtr crtc, int bg, int fg)
d678 28
a705 10
    ScrnInfoPtr		scrn = crtc->scrn;
    I830Ptr		pI830 = I830PTR(scrn);
    I830CrtcPrivatePtr	intel_crtc = I830CrtcPrivate(crtc);
    int			pipe = intel_crtc->pipe;
    int			pal0 = pipe == 0 ? CURSOR_A_PALETTE0 : CURSOR_B_PALETTE0;

    OUTREG(pal0 +  0, bg & 0x00ffffff);
    OUTREG(pal0 +  4, fg & 0x00ffffff);
    OUTREG(pal0 +  8, fg & 0x00ffffff);
    OUTREG(pal0 + 12, bg & 0x00ffffff);
d708 2
a709 2
void
i830_update_cursor_offsets (ScrnInfoPtr pScrn)
d711 20
a730 51
    I830Ptr pI830 = I830PTR(pScrn);
    xf86CrtcConfigPtr xf86_config = XF86_CRTC_CONFIG_PTR(pScrn);
    int i;

    if (pI830->cursor_mem) {
	unsigned long cursor_offset_base = pI830->cursor_mem->offset;
	unsigned long cursor_addr_base, offset = 0;

	/* Single memory buffer for cursors */
	if (pI830->CursorNeedsPhysical) {
	    /* On any hardware that requires physical addresses for cursors,
	     * the PTEs don't support memory above 4GB, so we can safely
	     * ignore the top 32 bits of cursor_mem->bus_addr.
	     */
	    cursor_addr_base = (unsigned long)pI830->cursor_mem->bus_addr;
	} else
	    cursor_addr_base = pI830->cursor_mem->offset;

	for (i = 0; i < xf86_config->num_crtc; i++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[i];
	    I830CrtcPrivatePtr intel_crtc = crtc->driver_private;

	    intel_crtc->cursor_argb_addr = cursor_addr_base + offset;
	    intel_crtc->cursor_argb_offset = cursor_offset_base + offset;
	    offset += HWCURSOR_SIZE_ARGB;

	    intel_crtc->cursor_addr = cursor_addr_base + offset;
	    intel_crtc->cursor_offset = cursor_offset_base + offset;
	    offset += HWCURSOR_SIZE;
	}
    } else {
	/* Separate allocations per cursor */
	for (i = 0; i < xf86_config->num_crtc; i++) {
	    xf86CrtcPtr crtc = xf86_config->crtc[i];
	    I830CrtcPrivatePtr intel_crtc = crtc->driver_private;

	    if (pI830->CursorNeedsPhysical) {
		intel_crtc->cursor_addr =
		    pI830->cursor_mem_classic[i]->bus_addr;
		intel_crtc->cursor_argb_addr =
		    pI830->cursor_mem_argb[i]->bus_addr;
	    } else {
		intel_crtc->cursor_addr =
		    pI830->cursor_mem_classic[i]->offset;
		intel_crtc->cursor_argb_addr =
		    pI830->cursor_mem_argb[i]->offset;
	    }
	    intel_crtc->cursor_offset = pI830->cursor_mem_classic[i]->offset;
	    intel_crtc->cursor_argb_offset = pI830->cursor_mem_argb[i]->offset;
	}
    }
@


