head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_2_0_90:1.1.1.2
	v2_2_0:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_7_4:1.1.1.1
	v1_7_3:1.1.1.1
	v1_7_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.11.29.12.39.03;	author oga;	state dead;
branches;
next	1.6;

1.6
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.06.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.06.49;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.19.44.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@/***************************************************************************
 
Copyright 2000 Intel Corporation.  All Rights Reserved. 

Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the 
"Software"), to deal in the Software without restriction, including 
without limitation the rights to use, copy, modify, merge, publish, 
distribute, sub license, and/or sell copies of the Software, and to 
permit persons to whom the Software is furnished to do so, subject to 
the following conditions: 

The above copyright notice and this permission notice (including the 
next paragraph) shall be included in all copies or substantial portions 
of the Software. 

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. 
IN NO EVENT SHALL INTEL, AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

#include "xf86.h"
#include "xf86_OSproc.h"

typedef struct {
	uint32_t YBufOffset;
	uint32_t UBufOffset;
	uint32_t VBufOffset;

	int brightness;
	int contrast;
	int saturation;
	xf86CrtcPtr current_crtc;
	xf86CrtcPtr desired_crtc;

	RegionRec clip;
	uint32_t colorKey;

	uint32_t gamma0;
	uint32_t gamma1;
	uint32_t gamma2;
	uint32_t gamma3;
	uint32_t gamma4;
	uint32_t gamma5;

	/* only used by the overlay */
	uint32_t videoStatus;
	Time offTime;
	Time freeTime;
   /** YUV data buffers */
	drm_intel_bo *buf;	/* current buffer to draw into */
	drm_intel_bo *oldBuf;	/* old buffer, may be in use by the overlay hw */
	Bool oldBuf_pinned;	/* only actually pinned when in use by the overlay hw */

	Bool overlayOK;
	int oneLineMode;
	int scaleRatio;
	Bool textured;
	Rotation rotation;	/* should remove intel->rotation later */

	int SyncToVblank;	/* -1: auto, 0: off, 1: on */
} intel_adaptor_private;

static inline intel_adaptor_private *
intel_get_adaptor_private(ScrnInfoPtr scrn)
{
	return intel_get_screen_private(scrn)->adaptor->pPortPrivates[0].ptr;
}

void I915DisplayVideoTextured(ScrnInfoPtr scrn,
			      intel_adaptor_private *adaptor_priv,
			      int id, RegionPtr dstRegion, short width,
			      short height, int video_pitch, int video_pitch2,
			      short src_w, short src_h,
			      short drw_w, short drw_h, PixmapPtr pixmap);

void I965DisplayVideoTextured(ScrnInfoPtr scrn,
			      intel_adaptor_private *adaptor_priv,
			      int id, RegionPtr dstRegion, short width,
			      short height, int video_pitch, int video_pitch2,
			      short src_w, short src_h,
			      short drw_w, short drw_h, PixmapPtr pixmap);

void I830VideoBlockHandler(int i, pointer blockData, pointer pTimeout,
			   pointer pReadmask);
void i965_free_video(ScrnInfoPtr scrn);

int is_planar_fourcc(int id);
@


1.6
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@@


1.5
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d51 1
a78 1
			      int x1, int y1, int x2, int y2,
d85 1
a85 2
			      short height, int video_pitch,
			      int x1, int y1, int x2, int y2,
@


1.4
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d31 42
a72 37
   uint32_t YBuf0offset;
   uint32_t UBuf0offset;
   uint32_t VBuf0offset;

   uint32_t YBuf1offset;
   uint32_t UBuf1offset;
   uint32_t VBuf1offset;

   unsigned char currentBuf;

   int brightness;
   int contrast;
   int saturation;
   xf86CrtcPtr current_crtc;
   xf86CrtcPtr desired_crtc;
   int doubleBuffer;

   RegionRec clip;
   uint32_t colorKey;

   uint32_t gamma0;
   uint32_t gamma1;
   uint32_t gamma2;
   uint32_t gamma3;
   uint32_t gamma4;
   uint32_t gamma5;

   uint32_t videoStatus;
   Time offTime;
   Time freeTime;
   drm_intel_bo *buf; /** YUV data buffer */

   Bool overlayOK;
   int oneLineMode;
   int scaleRatio;
   Bool textured;
   Rotation rotation; /* should remove I830->rotation later*/
d74 2
a75 7
   int SyncToVblank; /* -1: auto, 0: off, 1: on */
} I830PortPrivRec, *I830PortPrivPtr;

#define GET_PORT_PRIVATE(pScrn) \
   (I830PortPrivPtr)((I830PTR(pScrn))->adaptor->pPortPrivates[0].ptr)

void I915DisplayVideoTextured(ScrnInfoPtr pScrn, I830PortPrivPtr pPriv,
d80 1
a80 2
			      short drw_w, short drw_h,
			      PixmapPtr pPixmap);
d82 2
a83 1
void I965DisplayVideoTextured(ScrnInfoPtr pScrn, I830PortPrivPtr pPriv,
d88 1
a88 2
			      short drw_w, short drw_h,
			      PixmapPtr pPixmap);
d93 2
@


1.3
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d61 1
a61 2
   i830_memory *buf; /** YUV data buffer */
   unsigned int extra_offset;
d68 2
a74 5
/*
 * Broadwater requires a bit of extra video memory for state information
 */
#define BRW_LINEAR_EXTRA	(36*1024)

d93 1
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d81 1
a81 1
			      short height, int video_pitch,
@


1.1
log
@Initial revision
@
text
@d31 7
a37 7
   CARD32 YBuf0offset;
   CARD32 UBuf0offset;
   CARD32 VBuf0offset;

   CARD32 YBuf1offset;
   CARD32 UBuf1offset;
   CARD32 VBuf1offset;
d43 3
a45 1
   int pipe;
d49 1
a49 1
   CARD32 colorKey;
d51 6
a56 6
   CARD32 gamma0;
   CARD32 gamma1;
   CARD32 gamma2;
   CARD32 gamma3;
   CARD32 gamma4;
   CARD32 gamma5;
d58 1
a58 1
   CARD32 videoStatus;
d61 2
a62 1
   FBLinearPtr linear;
d68 1
d74 5
d85 12
a96 1
			      DrawablePtr pDraw);
@


1.1.1.1
log
@Importing xf86-video-i810 1.7.2
@
text
@@


1.1.1.2
log
@xf86-video-intel 2.2.0
@
text
@d43 1
a43 3
   int saturation;
   xf86CrtcPtr current_crtc;
   xf86CrtcPtr desired_crtc;
d59 1
a59 2
   i830_memory *buf; /** YUV data buffer */
   unsigned int extra_offset;
a69 5
/*
 * Broadwater requires a bit of extra video memory for state information
 */
#define BRW_LINEAR_EXTRA	(36*1024)

d76 1
a76 12
			      PixmapPtr pPixmap);

void I965DisplayVideoTextured(ScrnInfoPtr pScrn, I830PortPrivPtr pPriv,
			      int id, RegionPtr dstRegion, short width,
			      short height, int video_pitch,
			      int x1, int y1, int x2, int y2,
			      short src_w, short src_h,
			      short drw_w, short drw_h,
			      PixmapPtr pPixmap);

void I830VideoBlockHandler(int i, pointer blockData, pointer pTimeout,
			   pointer pReadmask);
@

