head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.11.29.12.39.02;	author oga;	state dead;
branches;
next	1.6;

1.6
date	2010.07.18.14.47.47;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@/*
 * Copyright Â© 2007 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Zhenyu Wang <zhenyu.z.wang@@intel.com>
 *
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#define _INTEL_XVMC_SERVER_
#include "i830.h"
#include "i830_hwmc.h"

#include <X11/extensions/Xv.h>
#include <X11/extensions/XvMC.h>
#include <fourcc.h>

static int create_subpicture(ScrnInfoPtr scrn, XvMCSubpicturePtr subpicture,
			     int *num_priv, CARD32 ** priv)
{
	return Success;
}

static void destroy_subpicture(ScrnInfoPtr scrn, XvMCSubpicturePtr subpicture)
{
}

static int create_surface(ScrnInfoPtr scrn, XvMCSurfacePtr surface,
			  int *num_priv, CARD32 ** priv)
{
	return Success;
}

static void destroy_surface(ScrnInfoPtr scrn, XvMCSurfacePtr surface)
{
}

static int create_context(ScrnInfoPtr scrn, XvMCContextPtr pContext,
				    int *num_priv, CARD32 **priv)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);
	struct intel_xvmc_hw_context *contextRec;

	*priv = calloc(1, sizeof(struct intel_xvmc_hw_context));
	contextRec = (struct intel_xvmc_hw_context *) *priv;
	if (!contextRec) {
		*num_priv = 0;
		return BadAlloc;
	}

	*num_priv = sizeof(struct intel_xvmc_hw_context) >> 2;

	if (IS_I915(intel)) {
		contextRec->type = XVMC_I915_MPEG2_MC;
		contextRec->i915.use_phys_addr = 0;
	} else {
		if (IS_G4X(intel) || IS_IGDNG(intel))
			contextRec->type = XVMC_I965_MPEG2_VLD;
		else
			contextRec->type = XVMC_I965_MPEG2_MC;
		contextRec->i965.is_g4x = IS_G4X(intel);
		contextRec->i965.is_965_q = IS_965_Q(intel);
		contextRec->i965.is_igdng = IS_IGDNG(intel);
	}

	return Success;
}

static void destroy_context(ScrnInfoPtr scrn, XvMCContextPtr context)
{
}

/* i915 hwmc support */
static XF86MCSurfaceInfoRec i915_YV12_mpg2_surface = {
	FOURCC_YV12,
	XVMC_CHROMA_FORMAT_420,
	0,
	720,
	576,
	720,
	576,
	XVMC_MPEG_2,
	/* XVMC_OVERLAID_SURFACE | XVMC_SUBPICTURE_INDEPENDENT_SCALING, */
	0,
	/* &yv12_subpicture_list */
	NULL,
};

static XF86MCSurfaceInfoRec i915_YV12_mpg1_surface = {
	FOURCC_YV12,
	XVMC_CHROMA_FORMAT_420,
	0,
	720,
	576,
	720,
	576,
	XVMC_MPEG_1,
	/* XVMC_OVERLAID_SURFACE | XVMC_SUBPICTURE_INDEPENDENT_SCALING, */
	0,
	NULL,
};

static XF86MCSurfaceInfoPtr surface_info_i915[2] = {
	(XF86MCSurfaceInfoPtr) & i915_YV12_mpg2_surface,
	(XF86MCSurfaceInfoPtr) & i915_YV12_mpg1_surface
};

/* i965 and later hwmc support */
#ifndef XVMC_VLD
#define XVMC_VLD  0x00020000
#endif

static XF86MCSurfaceInfoRec yv12_mpeg2_vld_surface = {
	FOURCC_YV12,
	XVMC_CHROMA_FORMAT_420,
	0,
	1936,
	1096,
	1920,
	1080,
	XVMC_MPEG_2 | XVMC_VLD,
	XVMC_INTRA_UNSIGNED,
	NULL
};

static XF86MCSurfaceInfoRec yv12_mpeg2_i965_surface = {
	FOURCC_YV12,
	XVMC_CHROMA_FORMAT_420,
	0,
	1936,
	1096,
	1920,
	1080,
	XVMC_MPEG_2 | XVMC_MOCOMP,
	/* XVMC_OVERLAID_SURFACE | XVMC_SUBPICTURE_INDEPENDENT_SCALING, */
	XVMC_INTRA_UNSIGNED,
	/* &yv12_subpicture_list */
	NULL
};

static XF86MCSurfaceInfoRec yv12_mpeg1_i965_surface = {
	FOURCC_YV12,
	XVMC_CHROMA_FORMAT_420,
	0,
	1920,
	1080,
	1920,
	1080,
	XVMC_MPEG_1 | XVMC_MOCOMP,
	/*XVMC_OVERLAID_SURFACE | XVMC_SUBPICTURE_INDEPENDENT_SCALING |
	   XVMC_INTRA_UNSIGNED, */
	XVMC_INTRA_UNSIGNED,

	/*&yv12_subpicture_list */
	NULL
};

static XF86MCSurfaceInfoPtr surface_info_i965[] = {
	&yv12_mpeg2_i965_surface,
	&yv12_mpeg1_i965_surface
};

static XF86MCSurfaceInfoPtr surface_info_vld[] = {
	&yv12_mpeg2_vld_surface,
	&yv12_mpeg2_i965_surface,
};

/* check chip type and load xvmc driver */
Bool intel_xvmc_adaptor_init(ScreenPtr pScreen)
{
	ScrnInfoPtr scrn = xf86Screens[pScreen->myNum];
	intel_screen_private *intel = intel_get_screen_private(scrn);
	static XF86MCAdaptorRec *pAdapt;
	char *name;
	char buf[64];

	if (!intel->XvMCEnabled)
		return FALSE;

	/* Needs KMS support. */
	if (IS_I915G(intel) || IS_I915GM(intel))
		return FALSE;

	if (!IS_I9XX(intel)) {
		ErrorF("Your chipset doesn't support XvMC.\n");
		return FALSE;
	}

	pAdapt = calloc(1, sizeof(XF86MCAdaptorRec));
	if (!pAdapt) {
		ErrorF("Allocation error.\n");
		return FALSE;
	}

	pAdapt->name = "Intel(R) Textured Video";
	pAdapt->num_subpictures = 0;
	pAdapt->subpictures = NULL;
	pAdapt->CreateContext = create_context;
	pAdapt->DestroyContext = destroy_context;
	pAdapt->CreateSurface = create_surface;
	pAdapt->DestroySurface = destroy_surface;
	pAdapt->CreateSubpicture =  create_subpicture;
	pAdapt->DestroySubpicture = destroy_subpicture;

	if (IS_I915(intel)) {
		name = "i915_xvmc",
		pAdapt->num_surfaces = ARRAY_SIZE(surface_info_i915);
		pAdapt->surfaces = surface_info_i915;
	} else if (IS_G4X(intel) || IS_IGDNG(intel)) {
		name = "xvmc_vld",
		pAdapt->num_surfaces = ARRAY_SIZE(surface_info_vld);
		pAdapt->surfaces = surface_info_vld;
	} else {
		name = "i965_xvmc",
		pAdapt->num_surfaces = ARRAY_SIZE(surface_info_i965);
		pAdapt->surfaces = surface_info_i965;
	}

	if (xf86XvMCScreenInit(pScreen, 1, &pAdapt)) {
		xf86DrvMsg(scrn->scrnIndex, X_INFO,
			   "[XvMC] %s driver initialized.\n",
			   name);
	} else {
		intel->XvMCEnabled = FALSE;
		xf86DrvMsg(scrn->scrnIndex, X_INFO,
			   "[XvMC] Failed to initialize XvMC.\n");
		return FALSE;
	}

	sprintf(buf, "pci:%04x:%02x:%02x.%d",
		intel->PciInfo->domain,
		intel->PciInfo->bus, intel->PciInfo->dev, intel->PciInfo->func);

	xf86XvMCRegisterDRInfo(pScreen, INTEL_XVMC_LIBNAME,
			       buf,
			       INTEL_XVMC_MAJOR, INTEL_XVMC_MINOR,
			       INTEL_XVMC_PATCHLEVEL);
	return TRUE;
}
@


1.6
log
@Update the intel driver to (mostly) a backport of 2.12.

It is missing a few commits that I have yet to verify (ones that try and
continue if we lock the gpu rendering engine and can't reset it, for
example) taht will be verified and sent out for extra testing soon.

Should contain a bunch of speedups and some correctness improvements
(though rendercheck still gives some errors that I am looking into).

This has been in snaps since the first day of c2k10, any known issues
with just this driver have (to my knowledge) been fixed since. A problem
with macbooks pointed out by otto happens with both this and the in-tree
driver and thus doesn't stop this moving forward.

As well as the 2.12 improvements, this driver also has a backport
(partially aided by the backports in RHEL 5 kindly provided by Dave
Airlie) from the kms code of modesetting support for ironlake (arrandale
and clarkdale: the IGDs build into intel nehalem cpu dies) which has
been tested on a number of chipsets. Note that Display port and eDP
displays have not yet been worked on (and probably won't until I can
find a displayport monitor), but VGA and lvds at least are known to
work, sure beats vesa.

"no objection on my side" matthieu@@, prodding (as always) from princess
marco.
@
text
@@


1.5
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@d65 1
a65 1
	*priv = xcalloc(1, sizeof(struct intel_xvmc_hw_context));
d210 1
a210 1
	pAdapt = xcalloc(1, sizeof(XF86MCAdaptorRec));
@


1.4
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d35 3
a37 1
struct intel_xvmc_driver *xvmc_driver;
d39 2
a40 2
/* set global current driver for xvmc */
static Bool intel_xvmc_set_driver(struct intel_xvmc_driver *d)
d42 1
a42 6
	if (xvmc_driver) {
		ErrorF("XvMC driver already set!\n");
		return FALSE;
	} else
		xvmc_driver = d;
	return TRUE;
d45 1
a45 3
/* check chip type and load xvmc driver */
/* This must be first called! */
Bool intel_xvmc_probe(ScrnInfoPtr scrn)
d47 1
a47 2
	intel_screen_private *intel = intel_get_screen_private(scrn);
	Bool ret = FALSE;
d49 4
a52 19
	if (!intel->XvMCEnabled)
		return FALSE;

	/* Needs KMS support. */
	if (intel->use_drm_mode && (IS_I915G(intel) || IS_I915GM(intel)))
		return FALSE;

	if (IS_I9XX(intel)) {
		if (IS_I915(intel))
			ret = intel_xvmc_set_driver(&i915_xvmc_driver);
		else if (IS_G4X(intel) || IS_IGDNG(intel))
			ret = intel_xvmc_set_driver(&vld_xvmc_driver);
		else
			ret = intel_xvmc_set_driver(&i965_xvmc_driver);
	} else {
		ErrorF("Your chipset doesn't support XvMC.\n");
		return FALSE;
	}
	return TRUE;
d55 1
a55 1
void intel_xvmc_finish(ScrnInfoPtr scrn)
a56 3
	if (!xvmc_driver)
		return;
	(*xvmc_driver->fini) (scrn);
d59 2
a60 1
Bool intel_xvmc_driver_init(ScreenPtr pScreen, XF86VideoAdaptorPtr xv_adaptor)
a61 1
	ScrnInfoPtr scrn = xf86Screens[pScreen->myNum];
d63 1
a63 7
	struct drm_i915_setparam sp;
	int ret;

	if (!xvmc_driver) {
		ErrorF("Failed to probe XvMC driver.\n");
		return FALSE;
	}
d65 5
a69 3
	if (!(*xvmc_driver->init) (scrn, xv_adaptor)) {
		ErrorF("XvMC driver initialize failed.\n");
		return FALSE;
d72 1
a72 7
	/* Currently XvMC uses batchbuffer */
	sp.param = I915_SETPARAM_ALLOW_BATCHBUFFER;
	sp.value = 1;
	ret = drmCommandWrite(intel->drmSubFD, DRM_I915_SETPARAM,
			      &sp, sizeof(sp));
	if (ret == 0)
		return TRUE;
d74 114
a187 2
	return FALSE;
}
d189 2
a190 1
Bool intel_xvmc_screen_init(ScreenPtr pScreen)
d194 2
d198 1
a198 1
	if (!xvmc_driver)
d201 40
a240 1
	if (xf86XvMCScreenInit(pScreen, 1, &xvmc_driver->adaptor)) {
d243 1
a243 1
			   xvmc_driver->name);
a244 1
		intel_xvmc_finish(scrn);
a259 36
}

Bool intel_xvmc_init_batch(ScrnInfoPtr scrn)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);
	int size = KB(64);

	if (!i830_allocate_xvmc_buffer(scrn, "[XvMC] batch buffer",
				       &(xvmc_driver->batch), size,
				       ALIGN_BOTH_ENDS))
		return FALSE;

	if (drmAddMap(intel->drmSubFD,
		      (drm_handle_t) (xvmc_driver->batch->offset +
				      intel->LinearAddr),
		      xvmc_driver->batch->size, DRM_AGP, 0,
		      &xvmc_driver->batch_handle) < 0) {
		xf86DrvMsg(scrn->scrnIndex, X_ERROR,
			   "[drm] drmAddMap(batchbuffer_handle) failed!\n");
		return FALSE;
	}
	return TRUE;
}

void intel_xvmc_fini_batch(ScrnInfoPtr scrn)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);

	if (xvmc_driver->batch_handle) {
		drmRmMap(intel->drmSubFD, xvmc_driver->batch_handle);
		xvmc_driver->batch_handle = 0;
	}
	if (xvmc_driver->batch) {
		i830_free_xvmc_buffer(scrn, xvmc_driver->batch);
		xvmc_driver->batch = NULL;
	}
@


1.3
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d38 1
a38 1
Bool intel_xvmc_set_driver(struct intel_xvmc_driver *d)
d40 6
a45 6
    if (xvmc_driver) {
	ErrorF("XvMC driver already set!\n");
	return FALSE;
    } else
	xvmc_driver = d;
    return TRUE;
d50 1
a50 1
Bool intel_xvmc_probe(ScrnInfoPtr pScrn)
d52 2
a53 11
    I830Ptr pI830 = I830PTR(pScrn);
    Bool ret = FALSE;

    /* Disable XvMC on DRI2 for now */
    if (pI830->directRenderingType == DRI_DRI2) {
	pI830->XvMCEnabled = FALSE;
	return FALSE;
    }

    if (!pI830->XvMCEnabled)
	return FALSE;
d55 2
a56 11
    if (IS_I9XX(pI830)) {
	if (IS_I915(pI830))
	    ret = intel_xvmc_set_driver(&i915_xvmc_driver);
	else
	    ret = intel_xvmc_set_driver(&i965_xvmc_driver);
    } else {
	ErrorF("Your chipset doesn't support XvMC.\n");
	return FALSE;
    }
    return TRUE;
}
d58 23
a80 5
void intel_xvmc_finish(ScrnInfoPtr pScrn)
{
    if (!xvmc_driver)
	return;
    (*xvmc_driver->fini)(pScrn);
d85 22
a106 1
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
a107 2
    if (!xvmc_driver) {
	ErrorF("Failed to probe XvMC driver.\n");
a108 7
    }

    if (!(*xvmc_driver->init)(pScrn, xv_adaptor)) {
	ErrorF("XvMC driver initialize failed.\n");
	return FALSE;
    }
    return TRUE;
d113 64
a176 58
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
    I830Ptr pI830 = I830PTR(pScrn);
    DRIInfoPtr pDRIInfo = pI830->pDRIInfo;

    if (!xvmc_driver)
	return FALSE;

    if (xf86XvMCScreenInit(pScreen, 1, &xvmc_driver->adaptor)) {
	xf86DrvMsg(pScrn->scrnIndex, X_INFO,
		"[XvMC] %s driver initialized.\n",
		xvmc_driver->name);
    } else {
	intel_xvmc_finish(pScrn);
	pI830->XvMCEnabled = FALSE;
	xf86DrvMsg(pScrn->scrnIndex, X_INFO,
		"[XvMC] Failed to initialize XvMC.\n");
	return FALSE;
    }

    xf86XvMCRegisterDRInfo(pScreen, INTEL_XVMC_LIBNAME,
		    pDRIInfo->busIdString,
		    INTEL_XVMC_MAJOR, INTEL_XVMC_MINOR, INTEL_XVMC_PATCHLEVEL);
    return TRUE;
}

Bool intel_xvmc_init_batch(ScrnInfoPtr pScrn)
{
    I830Ptr pI830 = I830PTR(pScrn);
    int size = KB(64);

    if (!i830_allocate_xvmc_buffer(pScrn, "[XvMC] batch buffer",
                                   &(xvmc_driver->batch), size,
                                   ALIGN_BOTH_ENDS))
        return FALSE;

    if (drmAddMap(pI830->drmSubFD,
                  (drm_handle_t)(xvmc_driver->batch->offset+pI830->LinearAddr),
                  xvmc_driver->batch->size, DRM_AGP, 0,
                  &xvmc_driver->batch_handle) < 0) {
        xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
                   "[drm] drmAddMap(batchbuffer_handle) failed!\n");
        return FALSE;
    }
    return TRUE;
}

void intel_xvmc_fini_batch(ScrnInfoPtr pScrn)
{
    I830Ptr pI830 = I830PTR(pScrn);

    if (xvmc_driver->batch_handle) {
        drmRmMap(pI830->drmSubFD, xvmc_driver->batch_handle);
        xvmc_driver->batch_handle = 0;
    }
    if (xvmc_driver->batch) {
        i830_free_memory(pScrn, xvmc_driver->batch);
        xvmc_driver->batch = NULL;
    }
@


1.2
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d55 6
a66 1
	/*
a68 1
	 */
@


1.1
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d59 1
a59 1
	if (!IS_I965G(pI830))
d125 1
d128 1
a128 1
                                   &(xvmc_driver->batch), 8 * 1024,
@

