head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v2_2_0_90:1.1.1.1
	v2_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.03.18.18.38.20;	author matthieu;	state dead;
branches;
next	1.9;

1.9
date	2012.10.06.03.51.23;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.21.21.25.02;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.29.12.39.02;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.18.14.47.47;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.51;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.19.44.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.19.44.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/*
 * Copyright © 2006 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#undef VERSION			/* XXX edid.h has a VERSION too */
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define _PARSE_EDID_
#include "xf86.h"
#include "intel.h"
#include "i830_bios.h"
#include "edid.h"

#define INTEL_BIOS_8(_addr)	(bios[_addr])
#define INTEL_BIOS_16(_addr)	(bios[_addr] |			\
				 (bios[_addr + 1] << 8))
#define INTEL_BIOS_32(_addr)	(bios[_addr] |			\
				 (bios[_addr + 1] << 8) |	\
				 (bios[_addr + 2] << 16) |	\
				 (bios[_addr + 3] << 24))

#define		SLAVE_ADDR1	0x70
#define		SLAVE_ADDR2	0x72
static void *find_section(struct bdb_header *bdb, int section_id)
{
	unsigned char *base = (unsigned char *)bdb;
	int index = 0;
	uint16_t total, current_size;
	unsigned char current_id;

	/* skip to first section */
	index += bdb->header_size;
	total = bdb->bdb_size;

	/* walk the sections looking for section_id */
	while (index < total) {
		current_id = *(base + index);
		index++;
		current_size = *((uint16_t *) (base + index));
		index += 2;
		if (current_id == section_id)
			return base + index;
		index += current_size;
	}

	return NULL;
}

static void
fill_detail_timing_data(DisplayModePtr fixed_mode, unsigned char *timing_ptr)
{
	fixed_mode->HDisplay = _H_ACTIVE(timing_ptr);
	fixed_mode->VDisplay = _V_ACTIVE(timing_ptr);
	fixed_mode->HSyncStart = fixed_mode->HDisplay + _H_SYNC_OFF(timing_ptr);
	fixed_mode->HSyncEnd = fixed_mode->HSyncStart +
	    _H_SYNC_WIDTH(timing_ptr);
	fixed_mode->HTotal = fixed_mode->HDisplay + _H_BLANK(timing_ptr);
	fixed_mode->VSyncStart = fixed_mode->VDisplay + _V_SYNC_OFF(timing_ptr);
	fixed_mode->VSyncEnd = fixed_mode->VSyncStart +
	    _V_SYNC_WIDTH(timing_ptr);
	fixed_mode->VTotal = fixed_mode->VDisplay + _V_BLANK(timing_ptr);
	fixed_mode->Clock = _PIXEL_CLOCK(timing_ptr) / 1000;
	fixed_mode->type = M_T_PREFERRED;

	/* Some VBTs have bogus h/vtotal values */
	if (fixed_mode->HSyncEnd > fixed_mode->HTotal)
		fixed_mode->HTotal = fixed_mode->HSyncEnd + 1;
	if (fixed_mode->VSyncEnd > fixed_mode->VTotal)
		fixed_mode->VTotal = fixed_mode->VSyncEnd + 1;

	xf86SetModeDefaultName(fixed_mode);

}

/**
 * Returns the BIOS's fixed panel mode.
 *
 * Note that many BIOSes will have the appropriate tables for a panel even when
 * a panel is not attached.  Additionally, many BIOSes adjust table sizes or
 * offsets, such that this parsing fails.  Thus, almost any other method for
 * detecting the panel mode is preferable.
 */
static void parse_integrated_panel_data(intel_screen_private *intel, struct bdb_header *bdb)
{
	struct bdb_lvds_options *lvds_options;
	struct bdb_lvds_lfp_data_ptrs *lvds_lfp_data_ptrs;
	struct bdb_lvds_lfp_data *lvds_data;
	struct bdb_lvds_lfp_data_entry *entry;
	DisplayModePtr fixed_mode;
	unsigned char *timing_ptr;
	int lfp_data_size;
	int dvo_offset;

	/* Defaults if we can't find VBT info */
	intel->lvds_dither = 0;

	lvds_options = find_section(bdb, BDB_LVDS_OPTIONS);
	if (!lvds_options)
		return;

	intel->lvds_dither = lvds_options->pixel_dither;
	if (lvds_options->panel_type == 0xff)
		return;

	lvds_data = find_section(bdb, BDB_LVDS_LFP_DATA);
	if (!lvds_data) {
		return;
	}

	lvds_lfp_data_ptrs = find_section(bdb, BDB_LVDS_LFP_DATA_PTRS);
	if (!lvds_lfp_data_ptrs)
		return;

	lfp_data_size = lvds_lfp_data_ptrs->ptr[1].dvo_timing_offset -
	    lvds_lfp_data_ptrs->ptr[0].dvo_timing_offset;
	dvo_offset = lvds_lfp_data_ptrs->ptr[0].dvo_timing_offset -
	    lvds_lfp_data_ptrs->ptr[0].fp_timing_offset;
	entry = (struct bdb_lvds_lfp_data_entry *)((uint8_t *) lvds_data->data +
						   (lfp_data_size *
						    lvds_options->panel_type));
	timing_ptr = (unsigned char *)entry + dvo_offset;
	if (intel->skip_panel_detect)
		return;

	fixed_mode = xnfalloc(sizeof(DisplayModeRec));
	memset(fixed_mode, 0, sizeof(*fixed_mode));

	/* Since lvds_bdb_2_fp_edid_dtd is just an EDID detailed timing
	 * block, pull the contents out using EDID macros.
	 */
	fill_detail_timing_data(fixed_mode, timing_ptr);
	intel->lvds_fixed_mode = fixed_mode;
}

static void parse_sdvo_panel_data(intel_screen_private *intel, struct bdb_header *bdb)
{
	DisplayModePtr fixed_mode;
	struct bdb_sdvo_lvds_options *sdvo_lvds_options;
	unsigned char *timing_ptr;

	intel->sdvo_lvds_fixed_mode = NULL;

	sdvo_lvds_options = find_section(bdb, BDB_SDVO_LVDS_OPTIONS);
	if (sdvo_lvds_options == NULL)
		return;

	timing_ptr = find_section(bdb, BDB_SDVO_PANEL_DTDS);
	if (timing_ptr == NULL)
		return;

	fixed_mode = xnfalloc(sizeof(DisplayModeRec));
	if (fixed_mode == NULL)
		return;

	memset(fixed_mode, 0, sizeof(*fixed_mode));
	fill_detail_timing_data(fixed_mode, timing_ptr +
				(sdvo_lvds_options->panel_type *
				 DET_TIMING_INFO_LEN));
	intel->sdvo_lvds_fixed_mode = fixed_mode;

}

static void parse_panel_data(intel_screen_private *intel, struct bdb_header *bdb)
{
	parse_integrated_panel_data(intel, bdb);
	parse_sdvo_panel_data(intel, bdb);
}

static void parse_general_features(intel_screen_private *intel, struct bdb_header *bdb)
{
	struct bdb_general_features *general;

	/* Set sensible defaults in case we can't find the general block */
	intel->tv_present = 1;

	general = find_section(bdb, BDB_GENERAL_FEATURES);
	if (!general)
		return;

	intel->tv_present = general->int_tv_support;
	intel->lvds_use_ssc = general->enable_ssc;
	if (intel->lvds_use_ssc) {
		if (IS_I85X(intel))
			intel->lvds_ssc_freq = general->ssc_freq ? 66 : 48;
		else if (IS_GEN5(intel) || IS_GEN6(intel) || IS_GEN7(intel))
			intel->lvds_ssc_freq = general->ssc_freq ? 100 : 120;
		else
			intel->lvds_ssc_freq = general->ssc_freq ? 100 : 96;
	}
}

static void parse_driver_feature(intel_screen_private *intel, struct bdb_header *bdb)
{
	struct bdb_driver_feature *feature;

	/* For mobile chip, set default as true */
	if (IS_MOBILE(intel) && !IS_I830(intel))
		intel->integrated_lvds = TRUE;

	/* skip pre-9xx chips which is broken to parse this block. */
	if (!IS_I9XX(intel))
		return;

	/* XXX Disable this parsing, as it looks doesn't work for all
	   VBIOS. Reenable it if we could find out the reliable VBT parsing
	   for LVDS config later. */
	if (1)
		return;

	feature = find_section(bdb, BDB_DRIVER_FEATURES);
	if (!feature)
		return;

	if (feature->lvds_config != BDB_DRIVER_INT_LVDS)
		intel->integrated_lvds = FALSE;
}

static
void parse_sdvo_mapping(ScrnInfoPtr scrn, struct bdb_header *bdb)
{
	unsigned int block_size;
	uint16_t *block_ptr;
	struct bdb_general_definitions *defs;
	struct child_device_config *child;
	int i, child_device_num, count;
	struct sdvo_device_mapping *p_mapping;
	intel_screen_private *intel = intel_get_screen_private(scrn);

	defs = find_section(bdb, BDB_GENERAL_DEFINITIONS);
	if (!defs) {
		xf86DrvMsg(scrn->scrnIndex, X_WARNING,
			   "can't find the general definition blocks\n");
		return;
	}
	/* Get the block size of general defintion block */
	block_ptr = (uint16_t *) ((char *)defs - 2);
	block_size = *block_ptr;
	child_device_num = (block_size - sizeof(*defs)) / sizeof(*child);
	count = 0;

	for (i = 0; i < child_device_num; i++) {
		child = &defs->devices[i];
		if (!child->device_type) {
			/* skip invalid child device type */
			continue;
		}
		if (child->slave_addr == SLAVE_ADDR1 ||
		    child->slave_addr == SLAVE_ADDR2) {
			if (child->dvo_port != DEVICE_PORT_DVOB &&
			    child->dvo_port != DEVICE_PORT_DVOC) {
				/* skip the incorrect sdvo port */
				xf86DrvMsg(scrn->scrnIndex, X_WARNING,
					   "Incorrect SDVO port\n");
				continue;
			}
			xf86DrvMsg(scrn->scrnIndex, X_INFO,
				   "the SDVO device with slave addr %x "
				   "is found on DVO %x port\n",
				   child->slave_addr, child->dvo_port);
			/* fill the primary dvo port */
			p_mapping =
			    &(intel->sdvo_mappings[child->dvo_port - 1]);
			if (!p_mapping->initialized) {
				p_mapping->dvo_port = child->dvo_port;
				p_mapping->dvo_wiring = child->dvo_wiring;
				p_mapping->initialized = 1;
				p_mapping->slave_addr = child->slave_addr;
			} else {
				xf86DrvMsg(scrn->scrnIndex, X_WARNING,
					   "One DVO port is shared by two slave "
					   "address. Maybe it can't be handled\n");
			}
			/* If there exists the slave2_addr, maybe it is a sdvo
			 * device that contain multiple inputs. And it can't
			 * handled by SDVO driver.
			 * Ignore the dvo mapping of slave2_addr
			 * of course its mapping info won't be added.
			 */
			if (child->slave2_addr) {
				xf86DrvMsg(scrn->scrnIndex, X_WARNING,
					   "Two DVO ports uses the same slave address."
					   "Maybe it can't be handled by SDVO driver\n");
			}
			count++;
		} else {
			/* if the slave address is neither 0x70 nor 0x72, skip it. */
			continue;
		}
	}
	/* If the count is zero, it indicates that no sdvo device is found */
	if (!count)
		xf86DrvMsg(scrn->scrnIndex, X_INFO,
			   "No SDVO device is found in VBT\n");

	return;
}

#define INTEL_VBIOS_SIZE (64 * 1024)	/* XXX */

/**
 * i830_bios_init - map VBIOS, find VBT
 *
 * VBT existence is a sanity check that is relied on by other i830_bios.c code.
 * Note that it would be better to use a BIOS call to get the VBT, as BIOSes may
 * feed an updated VBT back through that, compared to what we'll fetch using
 * this method of groping around in the BIOS data.
 *
 * Returns 0 on success, nonzero on failure.
 */
int i830_bios_init(ScrnInfoPtr scrn)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);
	struct vbt_header *vbt;
	struct bdb_header *bdb;
	int vbt_off, bdb_off;
	unsigned char *bios;
	int ret;
	int size;

	size = intel->PciInfo->rom_size;
	if (size == 0) {
		size = INTEL_VBIOS_SIZE;
		xf86DrvMsg(scrn->scrnIndex, X_WARNING,
			   "libpciaccess reported 0 rom size, guessing %dkB\n",
			   size / 1024);
	}
	bios = malloc(size);
	if (bios == NULL)
		return -1;

	ret = pci_device_read_rom(intel->PciInfo, bios);
	if (ret != 0) {
		xf86DrvMsg(scrn->scrnIndex, X_WARNING,
			   "libpciaccess failed to read %dkB video BIOS: %s\n",
			   size / 1024, strerror(-ret));
		free(bios);
		return -1;
	}

	vbt_off = INTEL_BIOS_16(0x1a);
	if (vbt_off >= size) {
		xf86DrvMsg(scrn->scrnIndex, X_ERROR, "Bad VBT offset: 0x%x\n",
			   vbt_off);
		free(bios);
		return -1;
	}

	vbt = (struct vbt_header *)(bios + vbt_off);

	if (memcmp(vbt->signature, "$VBT", 4) != 0) {
		xf86DrvMsg(scrn->scrnIndex, X_ERROR, "Bad VBT signature\n");
		free(bios);
		return -1;
	}

	/* Now that we've found the VBIOS, go scour the VBTs */
	bdb_off = vbt_off + vbt->bdb_offset;
	bdb = (struct bdb_header *)(bios + bdb_off);

	parse_general_features(intel, bdb);
	parse_panel_data(intel, bdb);
	parse_driver_feature(intel, bdb);
	parse_sdvo_mapping(scrn, bdb);

	free(bios);

	return 0;
}
@


1.9
log
@Add basic support for ivy bridge and fix several cases of register
access not being adjusted for the pch split, one of which prevented
multiple display pipes from working.  The third pipe on ivy bridge
remains disabled for now.

ok kettenis@@ thanks to everyone who tested
@
text
@@


1.8
log
@Add support for Sandy Bridge.  Not perfect yet.  Most notably 3D acceleration
is completely absent, and playing video doesn't work yet.  But support for
"normal" 2D stuff is pretty solid and it is really nice to be able to use
my laptop at the panel's native resolution and be able to suspend and resume
the machine.

tested by some
@
text
@d213 1
a213 1
		else if (IS_GEN5(intel) || IS_GEN6(intel))
@


1.7
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d213 1
a213 1
		else if (IS_IGDNG(intel))
@


1.6
log
@Update the intel driver to (mostly) a backport of 2.12.

It is missing a few commits that I have yet to verify (ones that try and
continue if we lock the gpu rendering engine and can't reset it, for
example) taht will be verified and sent out for extra testing soon.

Should contain a bunch of speedups and some correctness improvements
(though rendercheck still gives some errors that I am looking into).

This has been in snaps since the first day of c2k10, any known issues
with just this driver have (to my knowledge) been fixed since. A problem
with macbooks pointed out by otto happens with both this and the in-tree
driver and thus doesn't stop this moving forward.

As well as the 2.12 improvements, this driver also has a backport
(partially aided by the backports in RHEL 5 kindly provided by Dave
Airlie) from the kms code of modesetting support for ironlake (arrandale
and clarkdale: the IGDs build into intel nehalem cpu dies) which has
been tested on a number of chipsets. Note that Display port and eDP
displays have not yet been worked on (and probably won't until I can
find a displayport monitor), but VGA and lvds at least are known to
work, sure beats vesa.

"no objection on my side" matthieu@@, prodding (as always) from princess
marco.
@
text
@d38 1
a38 1
#include "i830.h"
@


1.5
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d213 2
d355 1
a355 1
	bios = xalloc(size);
d364 1
a364 1
		xfree(bios);
d372 1
a372 1
		xfree(bios);
d380 1
a380 1
		xfree(bios);
d393 1
a393 1
	xfree(bios);
@


1.4
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d29 1
a29 1
#undef VERSION	/* XXX edid.h has a VERSION too */
d46 2
a47 2
				 (bios[_addr + 1] << 8)		\
				 (bios[_addr + 2] << 16)	\
d50 3
a52 2
static void *
find_section(struct bdb_header *bdb, int section_id)
d54 46
a99 19
    unsigned char *base = (unsigned char *)bdb;
    int index = 0;
    uint16_t total, current_size;
    unsigned char current_id;

    /* skip to first section */
    index += bdb->header_size;
    total = bdb->bdb_size;

    /* walk the sections looking for section_id */
    while (index < total) {
	current_id = *(base + index);
	index++;
	current_size = *((uint16_t *)(base + index));
	index += 2;
	if (current_id == section_id)
	    return base + index;
	index += current_size;
    }
a100 1
    return NULL;
d111 1
a111 2
static void
parse_panel_data(I830Ptr pI830, struct bdb_header *bdb)
d113 49
a161 5
    struct bdb_lvds_options *lvds_options;
    struct bdb_lvds_lfp_data_ptrs *lvds_lfp_data_ptrs;
    int timing_offset;
    DisplayModePtr fixed_mode;
    unsigned char *timing_ptr;
d163 25
a187 2
    /* Defaults if we can't find VBT info */
    pI830->lvds_dither = 0;
d189 1
a189 3
    lvds_options = find_section(bdb, BDB_LVDS_OPTIONS);
    if (!lvds_options)
	return;
d191 5
a195 3
    pI830->lvds_dither = lvds_options->pixel_dither;
    if (lvds_options->panel_type == 0xff)
	return;
d197 3
a199 13
    lvds_lfp_data_ptrs = find_section(bdb, BDB_LVDS_LFP_DATA_PTRS);
    if (!lvds_lfp_data_ptrs)
	return;

    timing_offset =
	lvds_lfp_data_ptrs->ptr[lvds_options->panel_type].dvo_timing_offset;
    timing_ptr = (unsigned char *)bdb + timing_offset;

    if (pI830->skip_panel_detect)
	return;

    fixed_mode = xnfalloc(sizeof(DisplayModeRec));
    memset(fixed_mode, 0, sizeof(*fixed_mode));
d201 2
a202 25
    /* Since lvds_bdb_2_fp_edid_dtd is just an EDID detailed timing
     * block, pull the contents out using EDID macros.
     */
    fixed_mode->HDisplay   = _H_ACTIVE(timing_ptr);
    fixed_mode->VDisplay   = _V_ACTIVE(timing_ptr);
    fixed_mode->HSyncStart = fixed_mode->HDisplay +
	_H_SYNC_OFF(timing_ptr);
    fixed_mode->HSyncEnd   = fixed_mode->HSyncStart +
	_H_SYNC_WIDTH(timing_ptr);
    fixed_mode->HTotal     = fixed_mode->HDisplay +
	_H_BLANK(timing_ptr);
    fixed_mode->VSyncStart = fixed_mode->VDisplay +
	_V_SYNC_OFF(timing_ptr);
    fixed_mode->VSyncEnd   = fixed_mode->VSyncStart +
	_V_SYNC_WIDTH(timing_ptr);
    fixed_mode->VTotal     = fixed_mode->VDisplay +
	_V_BLANK(timing_ptr);
    fixed_mode->Clock      = _PIXEL_CLOCK(timing_ptr) / 1000;
    fixed_mode->type       = M_T_PREFERRED;

    /* Some VBTs have bogus h/vtotal values */
    if (fixed_mode->HSyncEnd > fixed_mode->HTotal)
	fixed_mode->HTotal = fixed_mode->HSyncEnd + 1;
    if (fixed_mode->VSyncEnd > fixed_mode->VTotal)
	fixed_mode->VTotal = fixed_mode->VSyncEnd + 1;
d204 12
a215 3
    xf86SetModeDefaultName(fixed_mode);

    pI830->lvds_fixed_mode = fixed_mode;
d218 1
a218 2
static void
parse_general_features(I830Ptr pI830, struct bdb_header *bdb)
d220 1
a220 1
    struct bdb_general_features *general;
d222 17
a238 2
    /* Set sensible defaults in case we can't find the general block */
    pI830->tv_present = 1;
d240 2
a241 12
    general = find_section(bdb, BDB_GENERAL_FEATURES);
    if (!general)
	return;

    pI830->tv_present = general->int_tv_support;
    pI830->lvds_use_ssc = general->enable_ssc;
    if (pI830->lvds_use_ssc) {
	if (IS_I85X(pI830))
	    pI830->lvds_ssc_freq = general->ssc_freq ? 66 : 48;
	else
	    pI830->lvds_ssc_freq = general->ssc_freq ? 100 : 96;
    }
d244 2
a245 2
static void
parse_driver_feature(I830Ptr pI830, struct bdb_header *bdb)
d247 73
a319 15
    struct bdb_driver_feature *feature;

    /* For mobile chip, set default as true */
    if (IS_MOBILE(pI830) && !IS_I830(pI830))
	pI830->integrated_lvds = TRUE;

    /* skip pre-9xx chips which is broken to parse this block. */
    if (!IS_I9XX(pI830))
	return;

    /* XXX Disable this parsing, as it looks doesn't work for all
       VBIOS. Reenable it if we could find out the reliable VBT parsing
       for LVDS config later. */
    if (1)
	return;
a320 2
    feature = find_section(bdb, BDB_DRIVER_FEATURES);
    if (!feature)
a321 3

    if (feature->lvds_config != BDB_DRIVER_INT_LVDS)
	pI830->integrated_lvds = FALSE;
d336 1
a336 2
int
i830_bios_init(ScrnInfoPtr pScrn)
d338 52
a389 40
    I830Ptr pI830 = I830PTR(pScrn);
    struct vbt_header *vbt;
    struct bdb_header *bdb;
    int vbt_off, bdb_off;
    unsigned char *bios;
    int ret;
    int size;

#if XSERVER_LIBPCIACCESS
    size = pI830->PciInfo->rom_size;
    if (size == 0) {
	size = INTEL_VBIOS_SIZE;
	xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
		   "libpciaccess reported 0 rom size, guessing %dkB\n",
		   size / 1024);
    }
#else
    size = INTEL_VBIOS_SIZE;
#endif
    bios = xalloc(size);
    if (bios == NULL)
	return -1;

#if XSERVER_LIBPCIACCESS
    ret = pci_device_read_rom (pI830->PciInfo, bios);
    if (ret != 0) {
	xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
                  "libpciaccess failed to read %dkB video BIOS: %s\n",
                  size / 1024, strerror(-ret));
	xfree (bios);
	return -1;
    }
#else
    /* xf86ReadPciBIOS returns the length read */
    ret = xf86ReadPciBIOS(0, pI830->PciTag, 0, bios, size);
    if (ret <= 0) {
	xfree (bios);
	return -1;
    }
#endif
a390 4
    vbt_off = INTEL_BIOS_16(0x1a);
    if (vbt_off >= size) {
	xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Bad VBT offset: 0x%x\n",
		   vbt_off);
a391 20
	return -1;
    }

    vbt = (struct vbt_header *)(bios + vbt_off);

    if (memcmp(vbt->signature, "$VBT", 4) != 0) {
	xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Bad VBT signature\n");
	xfree(bios);
	return -1;
    }

    /* Now that we've found the VBIOS, go scour the VBTs */
    bdb_off = vbt_off + vbt->bdb_offset;
    bdb = (struct bdb_header *)(bios + bdb_off);

    parse_general_features(pI830, bdb);
    parse_panel_data(pI830, bdb);
    parse_driver_feature(pI830, bdb);

    xfree(bios);
d393 1
a393 1
    return 0;
@


1.3
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@a49 3
/* XXX */
#define INTEL_VBIOS_SIZE (64 * 1024)

d88 2
a89 2
    struct bdb_lvds_lfp_data *lvds_lfp_data;
    struct bdb_lvds_lfp_data_entry *entry;
d104 2
a105 2
    lvds_lfp_data = find_section(bdb, BDB_LVDS_LFP_DATA);
    if (!lvds_lfp_data)
d108 6
a113 2
    entry = &lvds_lfp_data->data[lvds_options->panel_type];
    timing_ptr = (unsigned char *)&entry->dvo_timing;
d138 6
d164 1
a164 1
	if (IS_I855(pI830))
d171 29
d218 2
a219 1
    vbeInfoPtr	pVbe;
d221 12
a232 1
    bios = xalloc(INTEL_VBIOS_SIZE);
a235 7
    pVbe = VBEInit(NULL, pI830->pEnt->index);
    if (pVbe != NULL) {
	memcpy(bios, xf86int10Addr(pVbe->pInt10,
				   pVbe->pInt10->BIOSseg << 4),
	       INTEL_VBIOS_SIZE);
	vbeFree (pVbe);
    } else {
d237 8
a244 1
	pci_device_read_rom (pI830->PciInfo, bios);
d246 6
a251 1
	xf86ReadPciBIOS(0, pI830->PciTag, 0, bios, INTEL_VBIOS_SIZE);
a252 1
    }
d255 1
a255 1
    if (vbt_off >= INTEL_VBIOS_SIZE) {
d276 1
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d34 1
d43 1
a43 1
#define INTEL_BIOS_16(_addr)	(bios[_addr] | \
d45 3
a47 3
#define INTEL_BIOS_32(_addr)	(bios[_addr] | \
				 (bios[_addr + 1] << 8) \
				 (bios[_addr + 2] << 16) \
d53 34
d88 1
a88 1
i830DumpBIOSToFile(ScrnInfoPtr pScrn, unsigned char *bios)
d90 16
a105 2
    const char *filename = "/tmp/xf86-video-intel-VBIOS";
    FILE *f;
d107 2
a108 3
    f = fopen(filename, "w");
    if (f == NULL) {
	xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Couldn't open %s\n", filename);
d110 51
a161 7
    if (fwrite(bios, INTEL_VBIOS_SIZE, 1, f) != 1) {
	xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Couldn't write BIOS data\n");
    }

    xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Wrote BIOS contents to %s\n",
	       filename);
    fclose(f);
d165 1
a165 1
 * Loads the Video BIOS and checks that the VBT exists.
d171 2
d174 2
a175 2
unsigned char *
i830_bios_get (ScrnInfoPtr pScrn)
d179 2
a180 1
    int vbt_off;
d186 1
a186 1
	return NULL;
d188 1
a188 1
    pVbe = VBEInit (NULL, pI830->pEnt->index);
a201 3
    if (0)
	i830DumpBIOSToFile(pScrn, bios);

d207 1
a207 1
	return NULL;
d215 1
a215 1
	return NULL;
d218 1
a218 28
    return bios;
}

/**
 * Returns the BIOS's fixed panel mode.
 *
 * Note that many BIOSes will have the appropriate tables for a panel even when
 * a panel is not attached.  Additionally, many BIOSes adjust table sizes or
 * offsets, such that this parsing fails.  Thus, almost any other method for
 * detecting the panel mode is preferable.
 */
DisplayModePtr
i830_bios_get_panel_mode(ScrnInfoPtr pScrn, Bool *wants_dither)
{
    I830Ptr pI830 = I830PTR(pScrn);
    struct vbt_header *vbt;
    struct bdb_header *bdb;
    int vbt_off, bdb_off, bdb_block_off, block_size;
    int panel_type = -1;
    unsigned char *bios;

    bios = i830_bios_get (pScrn);

    if (bios == NULL)
	return NULL;

    vbt_off = INTEL_BIOS_16(0x1a);
    vbt = (struct vbt_header *)(bios + vbt_off);
d222 2
a223 90
    if (memcmp(bdb->signature, "BIOS_DATA_BLOCK ", 16) != 0) {
	xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Bad BDB signature\n");
	xfree(bios);
	return NULL;
    }

    *wants_dither = FALSE;
    for (bdb_block_off = bdb->header_size; bdb_block_off < bdb->bdb_size;
	 bdb_block_off += block_size)
    {
	int start = bdb_off + bdb_block_off;
	int id;
	struct lvds_bdb_1 *lvds1;
	struct lvds_bdb_2 *lvds2;
	struct lvds_bdb_2_fp_params *fpparam;
	struct lvds_bdb_2_fp_edid_dtd *fptiming;
	DisplayModePtr fixed_mode;
	uint8_t *timing_ptr;

	id = INTEL_BIOS_8(start);
	block_size = INTEL_BIOS_16(start + 1) + 3;
	switch (id) {
	case 40:
	    lvds1 = (struct lvds_bdb_1 *)(bios + start);
	    panel_type = lvds1->panel_type;
	    if (lvds1->caps & LVDS_CAP_DITHER)
		*wants_dither = TRUE;
	    break;
	case 41:
	    if (panel_type == -1)
		break;

	    lvds2 = (struct lvds_bdb_2 *)(bios + start);
	    fpparam = (struct lvds_bdb_2_fp_params *)(bios +
		bdb_off + lvds2->panels[panel_type].fp_params_offset);
	    fptiming = (struct lvds_bdb_2_fp_edid_dtd *)(bios +
		bdb_off + lvds2->panels[panel_type].fp_edid_dtd_offset);
	    timing_ptr = bios + bdb_off +
	        lvds2->panels[panel_type].fp_edid_dtd_offset;

	    if (fpparam->terminator != 0xffff) {
		/* Apparently the offsets are wrong for some BIOSes, so we
		 * try the other offsets if we find a bad terminator.
		 */
		fpparam = (struct lvds_bdb_2_fp_params *)(bios +
		    bdb_off + lvds2->panels[panel_type].fp_params_offset + 8);
		fptiming = (struct lvds_bdb_2_fp_edid_dtd *)(bios +
		    bdb_off + lvds2->panels[panel_type].fp_edid_dtd_offset + 8);
		timing_ptr = bios + bdb_off +
	            lvds2->panels[panel_type].fp_edid_dtd_offset + 8;

		if (fpparam->terminator != 0xffff)
		    continue;
	    }

	    fixed_mode = xnfalloc(sizeof(DisplayModeRec));
	    memset(fixed_mode, 0, sizeof(*fixed_mode));

	    /* Since lvds_bdb_2_fp_edid_dtd is just an EDID detailed timing
	     * block, pull the contents out using EDID macros.
	     */
	    fixed_mode->HDisplay   = _H_ACTIVE(timing_ptr);
	    fixed_mode->VDisplay   = _V_ACTIVE(timing_ptr);
	    fixed_mode->HSyncStart = fixed_mode->HDisplay +
		_H_SYNC_OFF(timing_ptr);
	    fixed_mode->HSyncEnd   = fixed_mode->HSyncStart +
		_H_SYNC_WIDTH(timing_ptr);
	    fixed_mode->HTotal     = fixed_mode->HDisplay +
	        _H_BLANK(timing_ptr);
	    fixed_mode->VSyncStart = fixed_mode->VDisplay +
		_V_SYNC_OFF(timing_ptr);
	    fixed_mode->VSyncEnd   = fixed_mode->VSyncStart +
		_V_SYNC_WIDTH(timing_ptr);
	    fixed_mode->VTotal     = fixed_mode->VDisplay +
	        _V_BLANK(timing_ptr);
	    fixed_mode->Clock      = _PIXEL_CLOCK(timing_ptr) / 1000;
	    fixed_mode->type       = M_T_PREFERRED;

	    xf86SetModeDefaultName(fixed_mode);

	    if (pI830->debug_modes) {
		xf86DrvMsg(pScrn->scrnIndex, X_INFO,
			   "Found panel mode in BIOS VBT tables:\n");
		xf86PrintModeline(pScrn->scrnIndex, fixed_mode);
	    }

	    xfree(bios);
	    return fixed_mode;
	}
    }
a225 17
    return NULL;
}

unsigned char *
i830_bios_get_aim_data_block (ScrnInfoPtr pScrn, int aim, int data_block)
{
    unsigned char   *bios;
    int		    bdb_off;
    int		    vbt_off;
    int		    aim_off;
    struct vbt_header *vbt;
    struct aimdb_header *aimdb;
    struct aimdb_block *aimdb_block;

    bios = i830_bios_get (pScrn);
    if (!bios)
	return NULL;
d227 1
a227 31
    vbt_off = INTEL_BIOS_16(0x1a);
    vbt = (struct vbt_header *)(bios + vbt_off);

    aim_off = vbt->aim_offset[aim];
    if (!aim_off)
    {
	xfree (bios);
	return NULL;
    }
    xf86DrvMsg(pScrn->scrnIndex, X_INFO, "aim_off %d\n", aim_off);
    aimdb = (struct aimdb_header *) (bios + vbt_off + aim_off);
    bdb_off = aimdb->aimdb_header_size;
    while (bdb_off < aimdb->aimdb_size)
    {
	aimdb_block = (struct aimdb_block *) (bios + vbt_off + aim_off + bdb_off);
	if (aimdb_block->aimdb_id == data_block)
	{
	    unsigned char   *aim = malloc (aimdb_block->aimdb_size + sizeof (struct aimdb_block));
	    if (!aim)
	    {
		xfree (bios);
		return NULL;
	    }
	    memcpy (aim, aimdb_block, aimdb_block->aimdb_size + sizeof (struct aimdb_block));
	    xfree (bios);
	    return aim;
	}
	bdb_off += aimdb_block->aimdb_size + sizeof (struct aimdb_block);
    }
    xfree (bios);
    return NULL;
@


1.1
log
@Initial revision
@
text
@d174 1
a174 1
	CARD8 *timing_ptr;
d273 1
a273 1
	free (bios);
d287 1
a287 1
		free (bios);
d291 1
a291 1
	    free (bios);
d296 1
a296 1
    free (bios);
@


1.1.1.1
log
@xf86-video-intel 2.2.0
@
text
@@
