head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2011.11.29.12.39.02;	author oga;	state dead;
branches;
next	1.3;

1.3
date	2010.07.18.14.47.47;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@/**************************************************************************

Copyright 1998-1999 Precision Insight, Inc., Cedar Park, Texas.
Copyright Â© 2002 David Dawes

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sub license, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

#ifndef _INTEL_BATCHBUFFER_H
#define _INTEL_BATCHBUFFER_H

#define BATCH_RESERVED		16


void intel_batch_init(ScrnInfoPtr scrn);
void intel_batch_teardown(ScrnInfoPtr scrn);
void intel_batch_emit_flush(ScrnInfoPtr scrn);
void intel_batch_do_flush(ScrnInfoPtr scrn);
void intel_batch_submit(ScrnInfoPtr scrn, int flush);
void intel_batch_wait_last(ScrnInfoPtr scrn);

static inline int intel_batch_space(intel_screen_private *intel)
{
	return (intel->batch_bo->size - BATCH_RESERVED) - (4*intel->batch_used);
}

static inline int intel_vertex_space(intel_screen_private *intel)
{
	return intel->vertex_bo ? intel->vertex_bo->size - (4*intel->vertex_used) : 0;
}

static inline void
intel_batch_require_space(ScrnInfoPtr scrn, intel_screen_private *intel, GLuint sz)
{
	assert(sz < intel->batch_bo->size - 8);
	if (intel_batch_space(intel) < sz)
		intel_batch_submit(scrn, FALSE);
}

static inline void intel_batch_start_atomic(ScrnInfoPtr scrn, unsigned int sz)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);

	assert(!intel->in_batch_atomic);
	intel_batch_require_space(scrn, intel, sz * 4);

	intel->in_batch_atomic = TRUE;
	intel->batch_atomic_limit = intel->batch_used + sz;
}

static inline void intel_batch_end_atomic(ScrnInfoPtr scrn)
{
	intel_screen_private *intel = intel_get_screen_private(scrn);

	assert(intel->in_batch_atomic);
	assert(intel->batch_used <= intel->batch_atomic_limit);
	intel->in_batch_atomic = FALSE;
}

static inline void intel_batch_emit_dword(intel_screen_private *intel, uint32_t dword)
{
	intel->batch_ptr[intel->batch_used++] = dword;
}

static inline void intel_batch_align(intel_screen_private *intel, uint32_t align)
{
	uint32_t delta;

	align /= 4;
	assert(align);

	if ((delta = intel->batch_used & (align - 1))) {
		delta = align - delta;
		memset (intel->batch_ptr + intel->batch_used, 0, 4*delta);
		intel->batch_used += delta;
	}
}

static inline void
intel_batch_emit_reloc(intel_screen_private *intel,
		       dri_bo * bo,
		       uint32_t read_domains,
		       uint32_t write_domains, uint32_t delta, int needs_fence)
{
	if (needs_fence)
		drm_intel_bo_emit_reloc_fence(intel->batch_bo,
					      intel->batch_used * 4,
					      bo, delta,
					      read_domains, write_domains);
	else
		drm_intel_bo_emit_reloc(intel->batch_bo, intel->batch_used * 4,
					bo, delta,
					read_domains, write_domains);

	intel_batch_emit_dword(intel, bo->offset + delta);
}

static inline void
intel_batch_mark_pixmap_domains(intel_screen_private *intel,
				struct intel_pixmap *priv,
				uint32_t read_domains, uint32_t write_domain)
{
	assert (read_domains);
	assert (write_domain == 0 || write_domain == read_domains);

	if (list_is_empty(&priv->batch))
		list_add(&priv->batch, &intel->batch_pixmaps);
	if (write_domain && list_is_empty(&priv->flush))
		list_add(&priv->flush, &intel->flush_pixmaps);

	priv->batch_write |= write_domain != 0;
	priv->busy = 1;
}

static inline void
intel_batch_emit_reloc_pixmap(intel_screen_private *intel, PixmapPtr pixmap,
			      uint32_t read_domains, uint32_t write_domain,
			      uint32_t delta, int needs_fence)
{
	struct intel_pixmap *priv = i830_get_pixmap_intel(pixmap);

	intel_batch_mark_pixmap_domains(intel, priv, read_domains,
	    write_domain);
	intel_batch_emit_reloc(intel, priv->bo, read_domains,
	    write_domain, delta, needs_fence);
}

#define ALIGN_BATCH(align) intel_batch_align(intel, align);
#define OUT_BATCH(dword) intel_batch_emit_dword(intel, dword)

#define OUT_RELOC(bo, read_domains, write_domains, delta) \
	intel_batch_emit_reloc(intel, bo, read_domains, write_domains, delta, 0)

#define OUT_RELOC_PIXMAP(pixmap, reads, write, delta)	\
	intel_batch_emit_reloc_pixmap(intel, pixmap, reads, write, delta, 0)

#define OUT_RELOC_PIXMAP_FENCED(pixmap, reads, write, delta)	\
	intel_batch_emit_reloc_pixmap(intel, pixmap, reads, write, delta, 1)

union intfloat {
	float f;
	unsigned int ui;
};

#define OUT_BATCH_F(x) do {			\
	union intfloat tmp;			\
	tmp.f = (float)(x);			\
	OUT_BATCH(tmp.ui);			\
} while(0)

#define BEGIN_BATCH(n)							\
do {									\
	if (intel->batch_emitting != 0)					\
		FatalError("%s: BEGIN_BATCH called without closing "	\
			   "ADVANCE_BATCH\n", __FUNCTION__);		\
	assert(!intel->in_batch_atomic);				\
	intel_batch_require_space(scrn, intel, (n) * 4);		\
	intel->batch_emitting = (n);					\
	intel->batch_emit_start = intel->batch_used;			\
} while (0)

#define ADVANCE_BATCH() do {						\
	if (intel->batch_emitting == 0)					\
		FatalError("%s: ADVANCE_BATCH called with no matching "	\
			   "BEGIN_BATCH\n", __FUNCTION__);		\
	if (intel->batch_used >						\
	    intel->batch_emit_start + intel->batch_emitting)		\
		FatalError("%s: ADVANCE_BATCH: exceeded allocation %d/%d\n ", \
			   __FUNCTION__,				\
			   intel->batch_used - intel->batch_emit_start,	\
			   intel->batch_emitting);			\
	if (intel->batch_used < intel->batch_emit_start +		\
	    intel->batch_emitting)					\
		FatalError("%s: ADVANCE_BATCH: under-used allocation %d/%d\n ", \
			   __FUNCTION__,				\
			   intel->batch_used - intel->batch_emit_start,	\
			   intel->batch_emitting);			\
	if ((intel->batch_emitting > 8) &&				\
	    (I810_DEBUG & DEBUG_ALWAYS_SYNC)) {				\
		/* Note: not actually syncing, just flushing each batch. */ \
		intel_batch_submit(scrn, FALSE);			\
	}								\
	intel->batch_emitting = 0;					\
} while (0)

void intel_next_vertex(intel_screen_private *intel);
static inline void intel_vertex_emit(intel_screen_private *intel, float v)
{
	intel->vertex_ptr[intel->vertex_used++] = v;
}
#define OUT_VERTEX(v) intel_vertex_emit(intel, v)

#endif /* _INTEL_BATCHBUFFER_H */
@


1.3
log
@Update the intel driver to (mostly) a backport of 2.12.

It is missing a few commits that I have yet to verify (ones that try and
continue if we lock the gpu rendering engine and can't reset it, for
example) taht will be verified and sent out for extra testing soon.

Should contain a bunch of speedups and some correctness improvements
(though rendercheck still gives some errors that I am looking into).

This has been in snaps since the first day of c2k10, any known issues
with just this driver have (to my knowledge) been fixed since. A problem
with macbooks pointed out by otto happens with both this and the in-tree
driver and thus doesn't stop this moving forward.

As well as the 2.12 improvements, this driver also has a backport
(partially aided by the backports in RHEL 5 kindly provided by Dave
Airlie) from the kms code of modesetting support for ironlake (arrandale
and clarkdale: the IGDs build into intel nehalem cpu dies) which has
been tested on a number of chipsets. Note that Display port and eDP
displays have not yet been worked on (and probably won't until I can
find a displayport monitor), but VGA and lvds at least are known to
work, sure beats vesa.

"no objection on my side" matthieu@@, prodding (as always) from princess
marco.
@
text
@@


1.2
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d39 2
a40 1
void intel_batch_submit(ScrnInfoPtr scrn);
d45 6
a50 1
	return (intel->batch_bo->size - BATCH_RESERVED) - (intel->batch_used);
d58 1
a58 1
		intel_batch_submit(scrn);
d69 1
a69 1
	intel->batch_atomic_limit = intel->batch_used + sz * 4;
d83 1
a83 4
	assert(intel->batch_ptr != NULL);
	assert(intel->batch_emitting);
	*(uint32_t *) (intel->batch_ptr + intel->batch_used) = dword;
	intel->batch_used += 4;
d90 1
a90 1
	assert(intel->batch_ptr != NULL);
d95 1
a95 1
		memset (intel->batch_ptr + intel->batch_used, 0, delta);
a105 3
	assert(intel_batch_space(intel) >= 4);
	*(uint32_t *) (intel->batch_ptr + intel->batch_used) =
	    bo->offset + delta;
d108 1
a108 1
					      intel->batch_used,
d112 1
a112 1
		drm_intel_bo_emit_reloc(intel->batch_bo, intel->batch_used,
d116 1
a116 1
	intel->batch_used += 4;
d126 1
a126 8
	assert (write_domain == 0 ||
		priv->flush_write_domain == 0 ||
		priv->flush_write_domain == write_domain);

	priv->flush_read_domains |= read_domains;
	priv->batch_read_domains |= read_domains;
	priv->flush_write_domain |= write_domain;
	priv->batch_write_domain |= write_domain;
d129 1
a129 1
	if (list_is_empty(&priv->flush))
d131 3
d141 6
a146 15
	dri_bo *bo = i830_get_pixmap_bo(pixmap);
	uint32_t offset;
	assert(intel->batch_ptr != NULL);
	assert(intel_batch_space(intel) >= 4);
	if (bo) {
		struct intel_pixmap *priv = i830_get_pixmap_intel(pixmap);
		intel_batch_mark_pixmap_domains(intel, priv, read_domains,
		    write_domain);
		intel_batch_emit_reloc(intel, priv->bo, read_domains,
		    write_domain, delta, needs_fence);
		return;
	}
	offset = intel_get_pixmap_offset(pixmap);
	*(uint32_t *)(intel->batch_ptr + intel->batch_used) = offset + delta;
	intel->batch_used += 4;
d179 1
a179 13
	intel->batch_emitting = (n) * 4;				\
	intel->batch_emit_start = intel->batch_used;			\
} while (0)

/* special-case variant for when we have preallocated space */
#define ATOMIC_BATCH(n)							\
do {									\
	if (intel->batch_emitting != 0)					\
		FatalError("%s: ATOMIC_BATCH called without closing "	\
			   "ADVANCE_BATCH\n", __FUNCTION__);		\
	assert(intel->in_batch_atomic);					\
	assert(intel->batch_used + (n) * 4 <= intel->batch_atomic_limit); \
	intel->batch_emitting = (n) * 4;				\
d202 1
a202 1
		intel_batch_submit(scrn);			\
d206 7
@


1.1
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@a34 3
void intel_batch_init(ScrnInfoPtr pScrn);
void intel_batch_teardown(ScrnInfoPtr pScrn);
void intel_batch_flush(ScrnInfoPtr pScrn, Bool flushed);
d36 7
a42 2
static inline int
intel_batch_space(I830Ptr pI830)
d44 1
a44 1
    return (pI830->batch_bo->size - BATCH_RESERVED) - (pI830->batch_used);
d48 1
a48 1
intel_batch_require_space(ScrnInfoPtr pScrn, I830Ptr pI830, GLuint sz)
d50 3
a52 3
    assert(sz < pI830->batch_bo->size - 8);
    if (intel_batch_space(pI830) < sz)
	intel_batch_flush(pScrn, FALSE);
d55 12
a66 2
static inline void
intel_batch_start_atomic(ScrnInfoPtr pScrn, unsigned int sz)
d68 1
a68 1
    I830Ptr pI830 = I830PTR(pScrn);
d70 4
a73 2
    assert(!pI830->in_batch_atomic);
    intel_batch_require_space(pScrn, pI830, sz * 4);
d75 6
a80 2
    pI830->in_batch_atomic = TRUE;
    pI830->batch_atomic_limit = pI830->batch_used + sz * 4;
d83 1
a83 2
static inline void
intel_batch_end_atomic(ScrnInfoPtr pScrn)
d85 4
a88 1
    I830Ptr pI830 = I830PTR(pScrn);
d90 5
a94 3
    assert(pI830->in_batch_atomic);
    assert(pI830->batch_used <= pI830->batch_atomic_limit);
    pI830->in_batch_atomic = FALSE;
d98 4
a101 1
intel_batch_emit_dword(I830Ptr pI830, uint32_t dword)
d103 14
a116 4
    assert(pI830->batch_ptr != NULL);
    assert(intel_batch_space(pI830) >= 4);
    *(uint32_t *)(pI830->batch_ptr + pI830->batch_used) = dword;
    pI830->batch_used += 4;
d120 18
a137 11
intel_batch_emit_reloc (I830Ptr  pI830,
			dri_bo  *bo,
			uint32_t read_domains,
			uint32_t write_domains,
			uint32_t delta)
{
    assert(intel_batch_space(pI830) >= 4);
    *(uint32_t *)(pI830->batch_ptr + pI830->batch_used) = bo->offset + delta;
    dri_bo_emit_reloc(pI830->batch_bo, read_domains, write_domains, delta,
		      pI830->batch_used, bo);
    pI830->batch_used += 4;
d141 1
a141 1
intel_batch_emit_reloc_pixmap(I830Ptr pI830, PixmapPtr pPixmap,
d143 1
a143 1
			      uint32_t delta)
d145 15
a159 15
#if I830_USE_UXA || I830_USE_EXA
    dri_bo *bo = i830_get_pixmap_bo(pPixmap);
#endif
    uint32_t offset;
    assert(pI830->batch_ptr != NULL);
    assert(intel_batch_space(pI830) >= 4);
#if I830_USE_UXA || I830_USE_EXA
    if (bo) {
	intel_batch_emit_reloc(pI830, bo, read_domains, write_domain, delta);
	return;
    }
#endif
    offset = intel_get_pixmap_offset(pPixmap);
    *(uint32_t *)(pI830->batch_ptr + pI830->batch_used) = offset + delta;
    pI830->batch_used += 4;
d162 2
a163 1
#define OUT_BATCH(dword) intel_batch_emit_dword(pI830, dword)
d166 1
a166 1
	intel_batch_emit_reloc (pI830, bo, read_domains, write_domains, delta)
d168 5
a172 2
#define OUT_RELOC_PIXMAP(pPixmap, reads, write, delta)	\
	intel_batch_emit_reloc_pixmap(pI830, pPixmap, reads, write, delta)
d187 19
a205 6
    if (pI830->batch_emitting != 0)					\
	FatalError("%s: BEGIN_BATCH called without closing "		\
		   "ADVANCE_BATCH\n", __FUNCTION__);			\
    intel_batch_require_space(pScrn, pI830, (n) * 4);			\
    pI830->batch_emitting = (n) * 4;					\
    pI830->batch_emit_start = pI830->batch_used;			\
d209 21
a229 18
    if (pI830->batch_emitting == 0)					\
	FatalError("%s: ADVANCE_BATCH called with no matching "		\
		   "BEGIN_BATCH\n", __FUNCTION__);			\
    if (pI830->batch_used > pI830->batch_emit_start + pI830->batch_emitting) \
	FatalError("%s: ADVANCE_BATCH: exceeded allocation %d/%d\n ",	\
		   __FUNCTION__,					\
		   pI830->batch_used - pI830->batch_emit_start,		\
		   pI830->batch_emitting);				\
    if (pI830->batch_used < pI830->batch_emit_start + pI830->batch_emitting) \
	FatalError("%s: ADVANCE_BATCH: under-used allocation %d/%d\n ", \
		   __FUNCTION__,					\
		   pI830->batch_used - pI830->batch_emit_start,		\
		   pI830->batch_emitting);				\
    if ((pI830->batch_emitting > 8) && (I810_DEBUG & DEBUG_ALWAYS_SYNC)) { \
	/* Note: not actually syncing, just flushing each batch. */	\
	intel_batch_flush(pScrn, FALSE);					\
    }									\
    pI830->batch_emitting = 0;						\
@

