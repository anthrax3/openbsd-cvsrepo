head	1.12;
access;
symbols
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.2
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v2_2_0_90:1.1.1.2
	v2_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.03.18.18.38.20;	author matthieu;	state dead;
branches;
next	1.11;

1.11
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.18.14.47.47;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.01.20.51.41;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.29.20.13.42;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.30.13.51.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.22.08.26.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.19.44.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.19.44.37;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.02.11.20.09.58;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/*
 * Copyright Â© 2007 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Zhenyu Wang <zhenyu.z.wang@@intel.com>
 *
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "intel.h"

#define SUBSYS_ANY (~0)

#define DMIID_DIR "/sys/class/dmi/id/"
#define DMIID_FILE(x) (DMIID_DIR # x)

typedef struct {
    int chipType;
    int subsysVendor;
    int subsysCard;
    void (*hook)(intel_screen_private *);
} i830_quirk, *i830_quirk_ptr;

enum i830_dmi_data_t {
    bios_vendor,
    bios_version,
    bios_date,
    sys_vendor,
    product_name,
    product_version,
    product_serial,
    product_uuid,
    board_vendor,
    board_name,
    board_version,
    board_serial,
    board_asset_tag,
    chassis_vendor,
    chassis_type,
    chassis_version,
    chassis_serial,
    chassis_asset_tag,
    dmi_data_max,
};

static char *i830_dmi_data[dmi_data_max];

#define I830_DMI_FIELD_FUNC(field) \
static void i830_dmi_store_##field(void) \
{\
    FILE *f = NULL;\
    int ret;\
    f = fopen(DMIID_FILE(field), "r");\
    if (f == NULL) {\
	free(i830_dmi_data[field]); i830_dmi_data[field] = NULL;\
	return;\
    }\
    ret = fread(i830_dmi_data[field], 64, 1, f);	\
    fclose(f);\
}

I830_DMI_FIELD_FUNC(bios_vendor);
I830_DMI_FIELD_FUNC(bios_version);
I830_DMI_FIELD_FUNC(bios_date);
I830_DMI_FIELD_FUNC(sys_vendor);
I830_DMI_FIELD_FUNC(product_name);
I830_DMI_FIELD_FUNC(product_version);
I830_DMI_FIELD_FUNC(product_serial);
I830_DMI_FIELD_FUNC(product_uuid);
I830_DMI_FIELD_FUNC(board_vendor);
I830_DMI_FIELD_FUNC(board_name);
I830_DMI_FIELD_FUNC(board_version);
I830_DMI_FIELD_FUNC(board_serial);
I830_DMI_FIELD_FUNC(board_asset_tag);
I830_DMI_FIELD_FUNC(chassis_vendor);
I830_DMI_FIELD_FUNC(chassis_type);
I830_DMI_FIELD_FUNC(chassis_version);
I830_DMI_FIELD_FUNC(chassis_serial);
I830_DMI_FIELD_FUNC(chassis_asset_tag);

static void i830_dmi_scan(void)
{
    int i;

    for (i = 0; i < dmi_data_max; i++) {
	i830_dmi_data[i] = calloc(64, sizeof(char));
	if (!i830_dmi_data[i]) {
	    int j;
	    for (j = 0; j < i; j++) {
		free(i830_dmi_data[j]);
		i830_dmi_data[i] = NULL;
	    }
	    return;
	}
    }

    i830_dmi_store_bios_vendor();
    i830_dmi_store_bios_version();
    i830_dmi_store_bios_date();
    i830_dmi_store_sys_vendor();
    i830_dmi_store_product_name();
    i830_dmi_store_product_version();
    i830_dmi_store_product_serial();
    i830_dmi_store_product_uuid();
    i830_dmi_store_board_vendor();
    i830_dmi_store_board_name();
    i830_dmi_store_board_version();
    i830_dmi_store_board_serial();
    i830_dmi_store_board_asset_tag();
    i830_dmi_store_chassis_vendor();
    i830_dmi_store_chassis_type();
    i830_dmi_store_chassis_version();
    i830_dmi_store_chassis_serial();
    i830_dmi_store_chassis_asset_tag();
}

#define DMIID_DUMP(field) \
    ErrorF("\t" # field ": %s", i830_dmi_data[field] ?\
	    i830_dmi_data[field] : "unknown")

static void i830_dmi_dump(void)
{
    ErrorF("i830_dmi_dump:\n");
    DMIID_DUMP(bios_vendor);
    DMIID_DUMP(bios_version);
    DMIID_DUMP(bios_date);
    DMIID_DUMP(sys_vendor);
    DMIID_DUMP(product_name);
    DMIID_DUMP(product_version);
    DMIID_DUMP(product_serial);
    DMIID_DUMP(product_uuid);
    DMIID_DUMP(board_vendor);
    DMIID_DUMP(board_name);
    DMIID_DUMP(board_version);
    DMIID_DUMP(board_serial);
    DMIID_DUMP(board_asset_tag);
    DMIID_DUMP(chassis_vendor);
    DMIID_DUMP(chassis_type);
    DMIID_DUMP(chassis_version);
    DMIID_DUMP(chassis_serial);
    DMIID_DUMP(chassis_asset_tag);
}

/*
 * Old chips have undocumented panel fitting registers.  Some of them actually
 * work; this quirk indicates that.
 */
static void quirk_pfit_safe (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_PFIT_SAFE;
}

/*
 * Some machines hose the display regs regardless of the ACPI DOS
 * setting, so we need to reset modes at ACPI event time.
 */
static void quirk_reset_modes (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_RESET_MODES;
}

static void quirk_pipea_force (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_PIPEA_FORCE;
}

static void quirk_ignore_tv (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_IGNORE_TV;
}

static void quirk_ignore_lvds (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_IGNORE_LVDS;
}

static void quirk_ignore_crt (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_IGNORE_CRT;
}

static void quirk_mac_mini (intel_screen_private *intel)
{
    intel->quirk_flag |= QUIRK_IGNORE_MACMINI_LVDS;
}

static void quirk_lenovo_tv_dmi (intel_screen_private *intel)
{
    /* X60, X60s has no TV output.
     * Z61 has S-video TV output.
     * And they have same subsys ids...
     *
     * http://www-307.ibm.com/pc/support/site.wss/MIGR-45120.html
     * http://www.thinkwiki.org/wiki/List_of_DMI_IDs
     */
    if (!i830_dmi_data[bios_version]) {
	ErrorF("Failed to load DMI info, X60 TV quirk not applied.\n");
	return;
    }
    if (!strncmp(i830_dmi_data[bios_version], "7B", 2) || /* X60, X60s */
	    !strncmp(i830_dmi_data[bios_version], "7E", 2)) /* R60e */
	intel->quirk_flag |= QUIRK_IGNORE_TV;
}

static void quirk_msi_lvds_dmi (intel_screen_private *intel)
{
   /* MSI IM-945GSE-A has no TV output, nor a LVDS connection.
    */
   if (!i830_dmi_data[board_name]) {
       ErrorF("Failed to load DMI info, MSI LVDS quirk not applied.\n");
       return;
   }
   if (!strncmp(i830_dmi_data[board_name],"A9830IMS",8)) {
       intel->quirk_flag |= QUIRK_IGNORE_LVDS;
       intel->quirk_flag |= QUIRK_IGNORE_TV;
   }
}

static void quirk_ibase_lvds (intel_screen_private *intel)
{
   if (!i830_dmi_data[board_name]) {
       ErrorF("Failed to load DMI info, iBase LVDS quirk not applied.\n");
       return;
   }
   if (!strncmp(i830_dmi_data[board_name], "i855-W83627HF", 13)) {
       intel->quirk_flag |= QUIRK_IGNORE_LVDS;
   }
}

static void quirk_ivch_dvob (intel_screen_private *intel)
{
	intel->quirk_flag |= QUIRK_IVCH_NEED_DVOB;
}

/* For broken hw/bios for incorrect acpi _LID state that
   can't be fixed with customed DSDT or other way */
static void quirk_broken_acpi_lid (intel_screen_private *intel)
{
	intel->quirk_flag |= QUIRK_BROKEN_ACPI_LID;
}

/* keep this list sorted by OEM, then by chip ID */
static i830_quirk i830_quirk_list[] = {
    /* Aopen mini pc */
    { PCI_CHIP_I915_GM, 0xa0a0, SUBSYS_ANY, quirk_ignore_lvds },
    { PCI_CHIP_I945_GM, 0xa0a0, SUBSYS_ANY, quirk_ignore_lvds },
    { PCI_CHIP_I965_GM, 0xa0a0, SUBSYS_ANY, quirk_ignore_lvds },
    { PCI_CHIP_GM45_GM, 0xa0a0, SUBSYS_ANY, quirk_ignore_lvds },

    { PCI_CHIP_I965_GM, 0x8086, 0x1999, quirk_ignore_lvds },

    /* Apple Mac mini has no lvds, but macbook pro does */
    { PCI_CHIP_I945_GM, 0x8086, 0x7270, quirk_mac_mini },

    /* Transtec Senyo 610 mini pc */
    { PCI_CHIP_I965_GM, 0x1509, 0x2f15, quirk_ignore_lvds },

    /* Clevo M720R has no tv output */
    { PCI_CHIP_I965_GM, 0x1558, 0x0721, quirk_ignore_tv },

    /* Dell Latitude X1 */
    { PCI_CHIP_I915_GM, 0x1028, 0x01a3, quirk_ignore_tv },
    /* Dell Latitude X1 / D630 (LP: #197740) */
    { PCI_CHIP_I915_GM, 0x1028, 0x01f9, quirk_ignore_tv },
    /* Dell XPS 1330 */
    { PCI_CHIP_I965_GM, 0x1028, 0x0209, quirk_ignore_tv },
    /* Dell Inspiron 1535 */
    { PCI_CHIP_I965_GM, 0x1028, 0x0254, quirk_ignore_tv },
    /* Dell Inspiron 1735 */
    { PCI_CHIP_I965_GM, 0x1028, 0x0256, quirk_ignore_tv },
    /* Dell Inspiron 1318 */
    { PCI_CHIP_I965_GM, 0x1028, 0x0286, quirk_ignore_tv },
    /* Dell Vostro A840 (LP: #235155) */
    { PCI_CHIP_I965_GM, 0x1028, 0x0298, quirk_ignore_tv },
    /* Dell Studio Hybrid */
    { PCI_CHIP_I965_GM, 0x1028, 0x0279, quirk_ignore_lvds },

    /* Lenovo Napa TV (use dmi)*/
    { PCI_CHIP_I945_GM, 0x17aa, SUBSYS_ANY, quirk_lenovo_tv_dmi },
    /* Lenovo 3000 v200 */
    { PCI_CHIP_I965_GM, 0x17aa, 0x3c18, quirk_ignore_tv },

    /* MSI IM-945GSE-A has no LVDS or TV (use dmi) */
    { PCI_CHIP_I945_GME, 0x8086, 0x27ae, quirk_msi_lvds_dmi },

    /* Panasonic Toughbook CF-Y4 has no TV output */
    { PCI_CHIP_I915_GM, 0x10f7, 0x8338, quirk_ignore_tv },
    /* Panasonic Toughbook CF-Y7 has no TV output */
    { PCI_CHIP_I965_GM, 0x10f7, 0x8338, quirk_ignore_tv },

    /* Toshiba Satellite U300 has no TV output */
    { PCI_CHIP_I965_GM, 0x1179, 0xff50, quirk_ignore_tv },
    /* Toshiba i830M laptop (fix bug 11148) */
    { PCI_CHIP_I830_M, 0x1179, 0xff00, quirk_ivch_dvob },

    /* Motion Computing M1200 reported on irc */
    { PCI_CHIP_I830_M, 0x14c0, 0x0012, quirk_ivch_dvob },

    /* Samsung Q35 has no TV output */
    { PCI_CHIP_I945_GM, 0x144d, 0xc504, quirk_ignore_tv },
    /* Samsung Q45 has no TV output */
    { PCI_CHIP_I965_GM, 0x144d, 0xc510, quirk_ignore_tv },

    /* HP Compaq nx6110 has no TV output */
    { PCI_CHIP_I915_GM, 0x103c, 0x099c, quirk_ignore_tv },
    /* HP Compaq nx6310 has no TV output */
    { PCI_CHIP_I945_GM, 0x103c, 0x30aa, quirk_ignore_tv },
    /* HP Compaq 6730s has no TV output */
    { PCI_CHIP_GM45_GM, 0x103c, 0x30e8, quirk_ignore_tv },
    /* HP Compaq 2730p needs pipe A force quirk (LP: #291555) */
    { PCI_CHIP_GM45_GM, 0x103c, 0x30eb, quirk_pipea_force },
    /* HP Mini needs pipe A force quirk (LP: #322104) */
    { PCI_CHIP_I945_GME,0x103c, 0x361a, quirk_pipea_force },
    /* HP Mini 5101 needs pipe A force quirk */
    { PCI_CHIP_I945_GME,0x103c, 0x3632, quirk_pipea_force },

    /* Thinkpad R31 needs pipe A force quirk */
    { PCI_CHIP_I830_M, 0x1014, 0x0505, quirk_pipea_force },
    /* Dell Latitude D400 needs pipe A force quirk (LP: #228519) */
    { PCI_CHIP_I855_GM, 0x1028, 0x0139, quirk_pipea_force },
    /* Dell Latitude D500 needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1028, 0x0152, quirk_pipea_force },
    /* Dell Latitude D505 needs pipe A force quirk (LP: #235643) */
    { PCI_CHIP_I855_GM, 0x1028, 0x0163, quirk_pipea_force },
    /* Dell Latitude X300 needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1028, 0x014f, quirk_pipea_force },
    /* Dell Inspiron 510m needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1028, 0x0164, quirk_pipea_force },
    /* Toshiba Satellite A30 needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1179, 0xff00 , quirk_pipea_force },
    /* Toshiba Protege R-205, S-209 needs pipe A force quirk */
    { PCI_CHIP_I915_GM, 0x1179, 0x0001, quirk_pipea_force },
    /* Intel 855GM hardware (See LP: #216490) */
    { PCI_CHIP_I855_GM, 0x1028, 0x00c8, quirk_pipea_force },
    /* Intel 855GM hardware (See Novell Bugzilla #406123) */
    { PCI_CHIP_I855_GM, 0x10cf, 0x1215, quirk_pipea_force },
    /* HP Pavilion ze4944ea needs pipe A force quirk (See LP: #242389) */
    { PCI_CHIP_I855_GM, 0x103c, 0x3084, quirk_pipea_force },

    { PCI_CHIP_I855_GM, 0x161f, 0x2030, quirk_pfit_safe },

    /* ThinkPad X30 needs pipe A force quirk (LP: #304614) */
    { PCI_CHIP_I830_M,  0x1014, 0x0513, quirk_pipea_force },
    /* ThinkPad X40 needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1014, 0x0557, quirk_pipea_force },

    /* ThinkPad T60 needs pipe A force quirk (bug #16494) */
    { PCI_CHIP_I945_GM, 0x17aa, 0x201a, quirk_pipea_force },

    /* Sony vaio PCG-r600HFP (fix bug 13722) */
    { PCI_CHIP_I830_M, 0x104d, 0x8100, quirk_ivch_dvob },
    /* Sony vaio VGN-SZ4MN (See LP: #212163) */
    { PCI_CHIP_I830_M, 0x104d, 0x81e6, quirk_pipea_force },
    /* Sony VGC-LT71DB has no VGA output (bug #17395) */
    { PCI_CHIP_I965_GM, 0x104d, 0x9018, quirk_ignore_crt },

    /* Quanta Gigabyte W251U (See LP: #244242) */
    { PCI_CHIP_I945_GM, 0x152d, 0x0755, quirk_pipea_force },

    /* Ordi Enduro UW31 (See LP: #152416) */
    { PCI_CHIP_I945_GM, 0x1584, 0x9900, quirk_ignore_tv },

    /* Dell Latitude D500 needs reset modes quirk */
    { PCI_CHIP_I855_GM, 0x1028, 0x0152, quirk_reset_modes },

    /* Littlebit Sepia X35 (rebranded Asus Z37E) (See LP: #201257) */
    { PCI_CHIP_I965_GM, 0x1043, 0x8265, quirk_ignore_tv },

    /* 855 & before need to leave pipe A & dpll A up */
    { PCI_CHIP_I855_GM, SUBSYS_ANY, SUBSYS_ANY, quirk_pipea_force },
    { PCI_CHIP_845_G, SUBSYS_ANY, SUBSYS_ANY, quirk_pipea_force },

    /* Asus Eee Box has no LVDS */
    { PCI_CHIP_I945_GME, 0x1043, 0x1252, quirk_ignore_lvds },

    /* #19239: Mirrus Centrino laptop */
    { PCI_CHIP_I915_GM, 0x1584, 0x9800, quirk_broken_acpi_lid },

    /* #19529: iBase MB890 board */
    { PCI_CHIP_I855_GM, 0x8086, 0x3582, quirk_ibase_lvds },

    { 0, 0, 0, NULL },
};

void i830_fixup_devices(ScrnInfoPtr scrn)
{
    intel_screen_private *intel = intel_get_screen_private(scrn);
    i830_quirk_ptr p = i830_quirk_list;
    int i;

    i830_dmi_scan();

    if (0)
	i830_dmi_dump();

    while (p && p->chipType != 0) {
	if (DEVICE_ID(intel->PciInfo) == p->chipType &&
	    (SUBVENDOR_ID(intel->PciInfo) == p->subsysVendor ||
	     p->subsysVendor == SUBSYS_ANY) &&
	    (SUBSYS_ID(intel->PciInfo) == p->subsysCard ||
	     p->subsysCard == SUBSYS_ANY))
	    p->hook(intel);
	++p;
    }

    for (i = 0; i < dmi_data_max; i++)
	if (i830_dmi_data[i])
	    free(i830_dmi_data[i]);
}
@


1.11
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@@


1.10
log
@Update the intel driver to (mostly) a backport of 2.12.

It is missing a few commits that I have yet to verify (ones that try and
continue if we lock the gpu rendering engine and can't reset it, for
example) taht will be verified and sent out for extra testing soon.

Should contain a bunch of speedups and some correctness improvements
(though rendercheck still gives some errors that I am looking into).

This has been in snaps since the first day of c2k10, any known issues
with just this driver have (to my knowledge) been fixed since. A problem
with macbooks pointed out by otto happens with both this and the in-tree
driver and thus doesn't stop this moving forward.

As well as the 2.12 improvements, this driver also has a backport
(partially aided by the backports in RHEL 5 kindly provided by Dave
Airlie) from the kms code of modesetting support for ironlake (arrandale
and clarkdale: the IGDs build into intel nehalem cpu dies) which has
been tested on a number of chipsets. Note that Display port and eDP
displays have not yet been worked on (and probably won't until I can
find a displayport monitor), but VGA and lvds at least are known to
work, sure beats vesa.

"no objection on my side" matthieu@@, prodding (as always) from princess
marco.
@
text
@d31 1
a31 1
#include "i830.h"
@


1.9
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d76 1
a76 1
	xfree(i830_dmi_data[field]); i830_dmi_data[field] = NULL;\
d107 1
a107 1
	i830_dmi_data[i] = xcalloc(64, sizeof(char));
d111 1
a111 1
		xfree(i830_dmi_data[j]);
d429 1
a429 1
	    xfree(i830_dmi_data[i]);
@


1.8
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d42 1
a42 1
    void (*hook)(I830Ptr);
d73 1
d79 1
a79 1
    fread(i830_dmi_data[field], 64, 1, f);\
d169 1
a169 1
static void quirk_pfit_safe (I830Ptr pI830)
d171 1
a171 1
    pI830->quirk_flag |= QUIRK_PFIT_SAFE;
d178 1
a178 1
static void quirk_reset_modes (I830Ptr pI830)
d180 1
a180 1
    pI830->quirk_flag |= QUIRK_RESET_MODES;
d183 1
a183 1
static void quirk_pipea_force (I830Ptr pI830)
d185 1
a185 1
    pI830->quirk_flag |= QUIRK_PIPEA_FORCE;
d188 1
a188 1
static void quirk_ignore_tv (I830Ptr pI830)
d190 1
a190 1
    pI830->quirk_flag |= QUIRK_IGNORE_TV;
d193 1
a193 1
static void quirk_ignore_lvds (I830Ptr pI830)
d195 1
a195 1
    pI830->quirk_flag |= QUIRK_IGNORE_LVDS;
d198 1
a198 1
static void quirk_ignore_crt (I830Ptr pI830)
d200 1
a200 1
    pI830->quirk_flag |= QUIRK_IGNORE_CRT;
d203 1
a203 1
static void quirk_mac_mini (I830Ptr pI830)
d205 1
a205 1
    pI830->quirk_flag |= QUIRK_IGNORE_MACMINI_LVDS;
d208 1
a208 1
static void quirk_lenovo_tv_dmi (I830Ptr pI830)
d223 1
a223 1
	pI830->quirk_flag |= QUIRK_IGNORE_TV;
d226 1
a226 1
static void quirk_msi_lvds_dmi (I830Ptr pI830)
d235 2
a236 2
       pI830->quirk_flag |= QUIRK_IGNORE_LVDS;
       pI830->quirk_flag |= QUIRK_IGNORE_TV;
d240 1
a240 1
static void quirk_ibase_lvds (I830Ptr pI830)
d247 1
a247 1
       pI830->quirk_flag |= QUIRK_IGNORE_LVDS;
d251 1
a251 1
static void quirk_ivch_dvob (I830Ptr pI830)
d253 1
a253 1
	pI830->quirk_flag |= QUIRK_IVCH_NEED_DVOB;
d258 1
a258 1
static void quirk_broken_acpi_lid (I830Ptr pI830)
d260 1
a260 1
	pI830->quirk_flag |= QUIRK_BROKEN_ACPI_LID;
d333 4
d363 2
d408 1
a408 1
    I830Ptr pI830 = I830PTR(scrn);
d418 2
a419 2
	if (DEVICE_ID(pI830->PciInfo) == p->chipType &&
	    (SUBVENDOR_ID(pI830->PciInfo) == p->subsysVendor ||
d421 1
a421 1
	    (SUBSYS_ID(pI830->PciInfo) == p->subsysCard ||
d423 1
a423 1
	    p->hook(pI830);
@


1.7
log
@xf86-video-intel 2.4.3. Tested by many.
@
text
@d165 9
d197 5
d225 25
d255 7
d265 1
d268 2
a299 2
    /* Lenovo T61 has no TV output */
    { PCI_CHIP_I965_GM, 0x17aa, 0x20b5, quirk_ignore_tv },
d303 3
d324 4
d330 2
d345 2
d356 2
d368 5
d389 6
@


1.6
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d246 2
d321 3
@


1.5
log
@update to xf86-video-intel 2.3.2. Tested among others by okan@@.
@
text
@d206 2
a207 1
    if (!strncmp(i830_dmi_data[bios_version], "7B", 2))
d226 3
d273 1
a273 1
    { PCI_CHIP_IGD_GM, 0x103c, 0x30e8, quirk_ignore_tv },
d291 4
d299 3
d316 4
d336 4
a339 3
		SUBVENDOR_ID(pI830->PciInfo) == p->subsysVendor &&
		(SUBSYS_ID(pI830->PciInfo) == p->subsysCard ||
		 p->subsysCard == SUBSYS_ANY))
@


1.4
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d240 2
d277 2
@


1.3
log
@Update to Intel driver 2.2.1. But change default accelmethod to XAA.
Tested by landry@@, oga@@, steven@@, jakemsr@@.
@
text
@d164 9
d230 2
d234 6
d258 3
d266 11
d279 4
d289 11
@


1.2
log
@Fix from X.Org repository pointed out by brad@@

    Add pipe A force enable quirk for ThinkPad X40
    ThinkPad X40s need this quirk or they'll crash frequently.
@
text
@d35 3
d45 119
d184 22
d224 2
a225 2
    /* Lenovo X60s has no TV output */
    { PCI_CHIP_I945_GM, 0x17aa, 0x201a, quirk_ignore_tv },
d238 2
d252 3
d262 6
d277 4
@


1.1
log
@Initial revision
@
text
@d42 5
d66 1
d71 4
a74 1
    
d76 1
a76 1
    { PCI_CHIP_I945_GM, 0x1028, 0x01a3, quirk_ignore_tv },
d79 1
a79 1
    
d86 1
a86 1
    
d91 1
a91 1
    
d97 9
@


1.1.1.1
log
@xf86-video-intel 2.2.0
@
text
@@


1.1.1.2
log
@Import intel driver v 2.2.0.90. tested by many, including krw@@ kettenis@@,
jakemsr@@, landry@@, beck@@ and oga@@. Thanks.
@
text
@a41 5
static void quirk_pipea_force (I830Ptr pI830)
{
    pI830->quirk_flag |= QUIRK_PIPEA_FORCE;
}

a60 1
    { PCI_CHIP_I965_GM, 0xa0a0, SUBSYS_ANY, quirk_ignore_lvds },
d65 1
a65 4

    /* Clevo M720R has no tv output */
    { PCI_CHIP_I965_GM, 0x1558, 0x0721, quirk_ignore_tv },

d67 1
a67 1
    { PCI_CHIP_I915_GM, 0x1028, 0x01a3, quirk_ignore_tv },
d70 1
a70 1

d77 1
a77 1

d82 1
a82 1

a87 6
    /* Samsung Q45 has no TV output */
    { PCI_CHIP_I965_GM, 0x144d, 0xc510, quirk_ignore_tv },

    /* Dell Inspiron 510m needs pipe A force quirk */
    { PCI_CHIP_I855_GM, 0x1028, 0x0164, quirk_pipea_force },

@

