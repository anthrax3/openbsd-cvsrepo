head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_2_0_90:1.1.1.2
	v2_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.03.18.18.38.20;	author matthieu;	state dead;
branches;
next	1.9;

1.9
date	2012.12.19.21.19.49;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.21.21.25.02;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.29.12.39.02;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.18.14.47.47;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.01.20.51.41;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.51;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.19.44.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.19.44.52;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.02.11.20.10.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/*
 * Copyright Â© 2006 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <unistd.h>

#include "xf86.h"
#include "intel.h"
#include "xf86Modes.h"
#include "i830_reg.h"
#include "i830_display.h"

static void
i830_crt_dpms(xf86OutputPtr output, int mode)
{
    ScrnInfoPtr	    scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    uint32_t	    temp, reg;

    if (HAS_PCH_SPLIT(intel))
	reg = PCH_ADPA;
    else
	reg = ADPA;

    temp = INREG(reg);
    temp &= ~(ADPA_HSYNC_CNTL_DISABLE | ADPA_VSYNC_CNTL_DISABLE);
    temp &= ~ADPA_DAC_ENABLE;

    switch(mode) {
    case DPMSModeOn:
	temp |= ADPA_DAC_ENABLE;
	break;
    case DPMSModeStandby:
	temp |= ADPA_DAC_ENABLE | ADPA_HSYNC_CNTL_DISABLE;
	break;
    case DPMSModeSuspend:
	temp |= ADPA_DAC_ENABLE | ADPA_VSYNC_CNTL_DISABLE;
	break;
    case DPMSModeOff:
	temp |= ADPA_HSYNC_CNTL_DISABLE | ADPA_VSYNC_CNTL_DISABLE;
	break;
    }

    OUTREG(reg, temp);
}

static void
i830_crt_save (xf86OutputPtr output)
{
    ScrnInfoPtr	scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    uint32_t reg = HAS_PCH_SPLIT(intel) ? PCH_ADPA : ADPA;

    intel->saveADPA = INREG(reg);
}

static void
i830_crt_restore (xf86OutputPtr output)
{
    ScrnInfoPtr	scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    uint32_t reg = HAS_PCH_SPLIT(intel) ? PCH_ADPA : ADPA;

    OUTREG(reg, intel->saveADPA);
}

static int
i830_crt_mode_valid(xf86OutputPtr output, DisplayModePtr pMode)
{
    ScrnInfoPtr scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    int		maxclock;

    if (pMode->Flags & V_DBLSCAN)
	return MODE_NO_DBLESCAN;

    if (pMode->Clock < 25000)
	return MODE_CLOCK_LOW;

    if (!IS_I9XX(intel))
	maxclock = 350000;
    else
	maxclock = 400000;

    if (pMode->Clock > maxclock)
	return MODE_CLOCK_HIGH;

    return MODE_OK;
}

static Bool
i830_crt_mode_fixup(xf86OutputPtr output, DisplayModePtr mode,
		    DisplayModePtr adjusted_mode)
{
    return TRUE;
}

static void
i830_crt_mode_set(xf86OutputPtr output, DisplayModePtr mode,
		  DisplayModePtr adjusted_mode)
{
    ScrnInfoPtr		    scrn = output->scrn;
    intel_screen_private   *intel = intel_get_screen_private(scrn);
    xf86CrtcPtr		    crtc = output->crtc;
    I830CrtcPrivatePtr	    i830_crtc = crtc->driver_private;
    int			    dpll_md_reg;
    uint32_t		    adpa, dpll_md;
    uint32_t		    adpa_reg;

    if (i830_crtc->pipe == 0) 
	dpll_md_reg = DPLL_A_MD;
    else
	dpll_md_reg = DPLL_B_MD;

    if (HAS_PCH_SPLIT(intel))
	adpa_reg = PCH_ADPA;
    else
	adpa_reg = ADPA;

    /*
     * Disable separate mode multiplier used when cloning SDVO to CRT
     * XXX this needs to be adjusted when we really are cloning
     */
    if (IS_I965G(intel) && !HAS_PCH_SPLIT(intel))
    {
	dpll_md = INREG(dpll_md_reg);
	OUTREG(dpll_md_reg, dpll_md & ~DPLL_MD_UDI_MULTIPLIER_MASK);
    }

    adpa = 0;
    if (adjusted_mode->Flags & V_PHSYNC)
	adpa |= ADPA_HSYNC_ACTIVE_HIGH;
    if (adjusted_mode->Flags & V_PVSYNC)
	adpa |= ADPA_VSYNC_ACTIVE_HIGH;

    if (i830_crtc->pipe == 0)
    {
	adpa |= ADPA_PIPE_A_SELECT;
	if (!HAS_PCH_SPLIT(intel))
	    OUTREG(BCLRPAT_A, 0);
    }
    else
    {
	adpa |= ADPA_PIPE_B_SELECT;
	if (!HAS_PCH_SPLIT(intel))
	    OUTREG(BCLRPAT_B, 0);
    }

    OUTREG(adpa_reg, adpa);
}

static Bool intel_ironlake_crt_detect_hotplug(xf86OutputPtr output)
{
    ScrnInfoPtr			scrn = output->scrn;
    intel_screen_private	*intel = intel_get_screen_private(scrn);
    Bool turn_off_dac = HAS_PCH_SPLIT(intel);
    uint32_t adpa, save_adpa;
    Bool ret;

    adpa = INREG(PCH_ADPA);
    adpa &= ~ADPA_CRT_HOTPLUG_MASK;
    adpa |= (ADPA_CRT_HOTPLUG_PERIOD_64 |
	     ADPA_CRT_HOTPLUG_WARMUP_5MS |
	     ADPA_CRT_HOTPLUG_SAMPLE_2S |
	     ADPA_CRT_HOTPLUG_VOLTAGE_50 | /* default */
	     ADPA_CRT_HOTPLUG_VOLREF_325MV);
    OUTREG(PCH_ADPA, adpa);
    INREG(PCH_ADPA);

    usleep(6000); /* warmup */
    
    save_adpa = adpa = INREG(PCH_ADPA);

    adpa |= ADPA_CRT_HOTPLUG_FORCE_TRIGGER;
    if (turn_off_dac)
	    adpa &= ~ADPA_DAC_ENABLE;

    OUTREG(PCH_ADPA, adpa);

    while (INREG(PCH_ADPA) & ADPA_CRT_HOTPLUG_FORCE_TRIGGER)
	    usleep(1000);

    if (turn_off_dac) {
	OUTREG(PCH_ADPA, save_adpa);
	INREG(PCH_ADPA);
    }

    /* Check the status to see if both blue and green are on now */
    adpa = INREG(PCH_ADPA);
    if ((adpa & ADPA_CRT_HOTPLUG_MONITOR_MASK) != 0)
	ret = TRUE;
    else
	ret = FALSE;

    return ret;
}

/**
 * Uses CRT_HOTPLUG_EN and CRT_HOTPLUG_STAT to detect CRT presence.
 *
 * Only for I945G/GM.
 *
 * \return TRUE if CRT is connected.
 * \return FALSE if CRT is disconnected.
 */
static Bool
i830_crt_detect_hotplug(xf86OutputPtr output)
{
    ScrnInfoPtr	scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    uint32_t	hotplug_en, temp;
    const int	timeout_ms = 1000;
    int		starttime, curtime;
    int		tries = 1;
    int		try;

    if (HAS_PCH_SPLIT(intel))
	return intel_ironlake_crt_detect_hotplug(output);

    /* On 4 series desktop, CRT detect sequence need to be done twice
     * to get a reliable result. */
    if (IS_G4X(intel) && !IS_GM45(intel))
	tries = 2;
    else
	tries = 1;

    hotplug_en = INREG(PORT_HOTPLUG_EN);

    hotplug_en &= CRT_FORCE_HOTPLUG_MASK;

    /* This starts the detection sequence */
    hotplug_en |= CRT_HOTPLUG_FORCE_DETECT;

    /* GM45 requires a longer activation period to reliably
     * detect CRT
     */
    if (IS_G4X(intel))
	hotplug_en |= CRT_HOTPLUG_ACTIVATION_PERIOD_64;

    /* Use the default voltage value */
    hotplug_en |= CRT_HOTPLUG_VOLTAGE_COMPARE_50;

    for (try = 0; try < tries; try++) {
	/* turn FORCE_DETECT on */
	OUTREG(PORT_HOTPLUG_EN, hotplug_en);

	/* wait for FORCE_DETECT to go off */
	for (curtime = starttime = GetTimeInMillis();
	     (curtime - starttime) < timeout_ms;
	     curtime = GetTimeInMillis())
	{
	    temp = INREG(PORT_HOTPLUG_EN);

	    if ((temp & CRT_HOTPLUG_FORCE_DETECT) == 0)
		break;
	}
    }

    /* Check the status to see if both blue and green are on now */
    temp = INREG(PORT_HOTPLUG_STAT);
    return ((temp & CRT_HOTPLUG_MONITOR_MASK) ==
	    CRT_HOTPLUG_MONITOR_COLOR);
}

/**
 * Detects CRT presence by checking for load.
 *
 * Requires that the current pipe's DPLL is active.  This will cause flicker
 * on the CRT, so it should not be used while the display is being used.  Only
 * color (not monochrome) displays are detected.
 *
 * \return TRUE if CRT is connected.
 * \return FALSE if CRT is disconnected.
 */
static Bool
i830_crt_detect_load (xf86CrtcPtr	    crtc,
		      xf86OutputPtr    output)
{
    ScrnInfoPtr		    scrn = output->scrn;
    intel_screen_private    *intel = intel_get_screen_private(scrn);
    I830CrtcPrivatePtr	    i830_crtc = I830CrtcPrivate(crtc);
    uint32_t		    save_bclrpat;
    uint32_t		    save_vtotal;
    uint32_t		    vtotal, vactive;
    uint32_t		    vsample;
    uint32_t		    vblank, vblank_start, vblank_end;
    uint32_t		    dsl;
    uint8_t		    st00;
    int			    bclrpat_reg, pipeconf_reg, pipe_dsl_reg;
    int			    vtotal_reg, vblank_reg, vsync_reg;
    int			    pipe = i830_crtc->pipe;
    Bool		    present;

    if (pipe == 0) 
    {
	bclrpat_reg = BCLRPAT_A;
	vtotal_reg = VTOTAL_A;
	vblank_reg = VBLANK_A;
	vsync_reg = VSYNC_A;
	pipeconf_reg = PIPEACONF;
	pipe_dsl_reg = PIPEA_DSL;
    }
    else 
    {
	bclrpat_reg = BCLRPAT_B;
	vtotal_reg = VTOTAL_B;
	vblank_reg = VBLANK_B;
	vsync_reg = VSYNC_B;
	pipeconf_reg = PIPEBCONF;
	pipe_dsl_reg = PIPEB_DSL;
    }

    save_bclrpat = INREG(bclrpat_reg);
    save_vtotal = INREG(vtotal_reg);
    vblank = INREG(vblank_reg);
    
    vtotal = ((save_vtotal >> 16) & 0xfff) + 1;
    vactive = (save_vtotal & 0x7ff) + 1;

    vblank_start = (vblank & 0xfff) + 1;
    vblank_end = ((vblank >> 16) & 0xfff) + 1;
    
    /* Set the border color to purple. */
    OUTREG(bclrpat_reg, 0x500050);
    
    if (IS_I9XX (intel))
    {
	uint32_t	pipeconf = INREG(pipeconf_reg);
	OUTREG(pipeconf_reg, pipeconf | PIPECONF_FORCE_BORDER);
        /* Wait for next Vblank to substitue border color for Color info */
        i830WaitForVblank (scrn);
	st00 = intel->readStandard (intel, 0x3c2);
	present = (st00 & (1 << 4)) != 0;
	OUTREG(pipeconf_reg, pipeconf);
    }
    else
    {
	Bool	restore_vblank = FALSE;
	int	count, detect;

	/*
	 * If there isn't any border, add some.
	 * Yes, this will flicker
	 */
	if (vblank_start <= vactive && vblank_end >= vtotal)
	{
	    uint32_t  vsync = INREG(vsync_reg);
	    uint32_t  vsync_start = (vsync & 0xffff) + 1;

	    vblank_start = vsync_start;
	    OUTREG(vblank_reg, (vblank_start - 1) | ((vblank_end - 1) << 16));
	    restore_vblank = TRUE;
	}
	
	/* sample in the vertical border, selecting the larger one */
	if (vblank_start - vactive >= vtotal - vblank_end)
	    vsample = (vblank_start + vactive) >> 1;
	else
	    vsample = (vtotal + vblank_end) >> 1;

	/*
	 * Wait for the border to be displayed
	 */
	while (INREG(pipe_dsl_reg) >= vactive)
	    ;
	while ((dsl = INREG(pipe_dsl_reg)) <= vsample)
	    ;
	/*
	 * Watch ST00 for an entire scanline
	 */
	detect = 0;
	count = 0;
	do {
	    count++;
	    /* Read the ST00 VGA status register */
	    st00 = intel->readStandard(intel, 0x3c2);
	    if (st00 & (1 << 4))
		detect++;
	} while ((INREG(pipe_dsl_reg) == dsl));
	
	/* restore vblank if necessary */
	if (restore_vblank)
	    OUTREG(vblank_reg, vblank);
	/*
	 * If more than 3/4 of the scanline detected a monitor,
	 * then it is assumed to be present. This works even on i830,
	 * where there isn't any way to force the border color across
	 * the screen
	 */
	present = detect * 4 > count * 3;
    }

    /* Restore previous settings */
    OUTREG(bclrpat_reg, save_bclrpat);

    return present;
}

/**
 * Detects CRT presence by probing for a response on the DDC address.
 *
 * This takes approximately 5ms in testing on an i915GM, with CRT connected or
 * not.
 *
 * \return TRUE if the CRT is connected and responded to DDC.
 * \return FALSE if no DDC response was detected.
 */
static Bool
i830_crt_detect_ddc(xf86OutputPtr output)
{
    ScrnInfoPtr		    scrn = output->scrn;
    I830OutputPrivatePtr    i830_output = output->driver_private;
    Bool detect;

    /* CRT should always be at 0, but check anyway */
    if (i830_output->type != I830_OUTPUT_ANALOG)
	return FALSE;

    I830I2CInit(scrn, &i830_output->pDDCBus, GPIOA, "CRTDDC_A");
    detect = xf86I2CProbeAddress(i830_output->pDDCBus, 0x00A0);
    xf86DestroyI2CBusRec(i830_output->pDDCBus, TRUE, TRUE);

    return detect;
}

/**
 * Attempts to detect CRT presence through any method available.
 *
 * @@param allow_disturb enables detection methods that may cause flickering
 *        on active displays.
 */
static xf86OutputStatus
i830_crt_detect(xf86OutputPtr output)
{
    ScrnInfoPtr		    scrn = output->scrn;
    intel_screen_private    *intel = intel_get_screen_private(scrn);
    xf86CrtcPtr		    crtc;
    int			    dpms_mode;
    xf86OutputStatus	    status;
    Bool		    connected;

    /*
     * Try hotplug detection where supported
     */
    if (IS_I945G(intel) || IS_I945GM(intel) || IS_I965G(intel) ||
	    IS_G33CLASS(intel)) {
	if (i830_crt_detect_hotplug(output))
	    status = XF86OutputStatusConnected;
	else
	    status = XF86OutputStatusDisconnected;

	goto done;
    }

    /*
     * DDC is next best, no flicker
     */
#if 0
    crtc = i830GetLoadDetectPipe (output, NULL, &dpms_mode);
    if (!crtc)
	return XF86OutputStatusUnknown;
    if (i830_crt_detect_ddc(output)) {
	status = XF86OutputStatusConnected;
	goto out_release_pipe;
    }

    /* Use the load-detect method if we have no other way of telling. */
    connected = i830_crt_detect_load (crtc, output);
    if (connected)
	status = XF86OutputStatusConnected;
    else
	status = XF86OutputStatusDisconnected;

out_release_pipe:
    i830ReleaseLoadDetectPipe (output, dpms_mode);
#else
    status = XF86OutputStatusUnknown;
#endif
done:
    return status;
}

static void
i830_crt_destroy (xf86OutputPtr output)
{
    if (output->driver_private)
	free (output->driver_private);
}

#ifdef RANDR_GET_CRTC_INTERFACE
static xf86CrtcPtr
i830_crt_get_crtc(xf86OutputPtr output)
{
    ScrnInfoPtr	scrn = output->scrn;
    intel_screen_private *intel = intel_get_screen_private(scrn);
    int pipe = !!(INREG(ADPA) & ADPA_PIPE_SELECT_MASK);
   
    return intel_pipe_to_crtc(scrn, pipe);
}
#endif

static xf86MonPtr
i830_get_edid(xf86OutputPtr output, int gpio_reg, char *gpio_str)
{
    ScrnInfoPtr	scrn =	    output->scrn;
    intel_screen_private    *intel = intel_get_screen_private(scrn);
    I830OutputPrivatePtr    intel_output = output->driver_private;
    xf86MonPtr		    edid_mon = NULL;
    uint32_t		    i2c_reg;

    /* Set up the DDC bus. */
    if (HAS_PCH_SPLIT(intel))
	i2c_reg = PCH_GPIOA;
    else
	i2c_reg = GPIOA;
    I830I2CInit(scrn, &intel_output->pDDCBus, i2c_reg, "CRTDDC_A");

    edid_mon = xf86OutputGetEDID (output, intel_output->pDDCBus);

    if (!edid_mon || DIGITAL(edid_mon->features.input_type)) {
	xf86DestroyI2CBusRec(intel_output->pDDCBus, TRUE, TRUE);
	intel_output->pDDCBus = NULL;
	if (edid_mon) {
	    free(edid_mon);
	    edid_mon = NULL;
	}
    }

    return edid_mon;
}

static DisplayModePtr
i830_crt_get_modes (xf86OutputPtr output)
{
    DisplayModePtr	    modes;
    xf86MonPtr		    edid_mon = NULL;
    I830OutputPrivatePtr    intel_output = output->driver_private;

    /* Try to probe normal CRT port, and also digital port for output
       in DVI-I mode. */
    if ((edid_mon = i830_get_edid(output, GPIOA, "CRTDDC_A")))
	goto found;
    if ((edid_mon = i830_get_edid(output, GPIOD, "CRTDDC_D")))
	goto found;
    if ((edid_mon = i830_get_edid(output, GPIOE, "CRTDDC_E")))
	goto found;
found:
    /* Destroy DDC bus after probe, so every other new probe will
       scan all ports again */
    if (intel_output->pDDCBus)
	xf86DestroyI2CBusRec(intel_output->pDDCBus, TRUE, TRUE);

    xf86OutputSetEDID (output, edid_mon);

    modes = xf86OutputGetEDIDModes (output);
    return modes;
}

static const xf86OutputFuncsRec i830_crt_output_funcs = {
    .dpms = i830_crt_dpms,
    .save = i830_crt_save,
    .restore = i830_crt_restore,
    .mode_valid = i830_crt_mode_valid,
    .mode_fixup = i830_crt_mode_fixup,
    .prepare = i830_output_prepare,
    .mode_set = i830_crt_mode_set,
    .commit = i830_output_commit,
    .detect = i830_crt_detect,
    .get_modes = i830_crt_get_modes,
    .destroy = i830_crt_destroy,
#ifdef RANDR_GET_CRTC_INTERFACE
    .get_crtc = i830_crt_get_crtc,
#endif
};

void
i830_crt_init(ScrnInfoPtr scrn)
{
    xf86OutputPtr	    output;
    I830OutputPrivatePtr    i830_output;
    intel_screen_private    *intel = intel_get_screen_private(scrn);

    if (intel->quirk_flag & QUIRK_IGNORE_CRT)
	return;

    output = xf86OutputCreate (scrn, &i830_crt_output_funcs, "VGA");
    if (!output)
	return;
    i830_output = xnfcalloc (sizeof (I830OutputPrivateRec), 1);
    if (!i830_output)
    {
	xf86OutputDestroy (output);
	return;
    }
    i830_output->type = I830_OUTPUT_ANALOG;
    /* i830 (almador) cannot place the analog adaptor on pipe B */
    if (IS_I830(intel))
	i830_output->pipe_mask = (1 << 0);
    else
	i830_output->pipe_mask = ((1 << 0) | (1 << 1));
    i830_output->clone_mask = ((1 << I830_OUTPUT_ANALOG) |
			       (1 << I830_OUTPUT_DVO_TMDS));
    
    output->driver_private = i830_output;
    output->interlaceAllowed = FALSE;
    output->doubleScanAllowed = FALSE;
}
@


1.9
log
@- sync the "legacy" i810 driver, used only on true i810 and i815
  chipsets to the one in recent intel driver from X.Org.

- remove one of the output probe method in i830PreInit(). This method is
  calling functions that are normally forbidden in PreInit(). With
  xserver 1.13 this causes a fatal error at run time.

Tested by bluhm@@, nick@@ and shadchin@@ back in september.
@
text
@@


1.8
log
@Add support for Sandy Bridge.  Not perfect yet.  Most notably 3D acceleration
is completely absent, and playing video doesn't work yet.  But support for
"normal" 2D stuff is pretty solid and it is really nice to be able to use
my laptop at the panel's native resolution and be able to suspend and resume
the machine.

tested by some
@
text
@d485 1
a488 1

d503 3
a505 1

@


1.7
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d47 1
a47 1
    if (IS_IGDNG(intel))
d79 1
a79 1
    uint32_t reg = IS_IGDNG(intel) ? PCH_ADPA : ADPA;
d89 1
a89 1
    uint32_t reg = IS_IGDNG(intel) ? PCH_ADPA : ADPA;
d142 1
a142 1
    if (IS_IGDNG(intel))
d151 1
a151 1
    if (IS_I965G(intel) && !IS_IGDNG(intel))
d166 1
a166 1
	if (!IS_IGDNG(intel))
d172 1
a172 1
	if (!IS_IGDNG(intel))
d179 1
a179 1
static Bool intel_igdng_crt_detect_hotplug(xf86OutputPtr output)
d183 2
a184 1
    uint32_t adpa;
a187 1

a188 1

d195 1
d199 2
d202 2
d208 6
a213 1
      ;
d216 2
a217 3
    adpa = INREG(PCH_ADPA) & ADPA_CRT_HOTPLUG_MONITOR_MASK;
    if (adpa == ADPA_CRT_HOTPLUG_MONITOR_COLOR ||
	adpa ==	ADPA_CRT_HOTPLUG_MONITOR_MONO)
d244 2
a245 2
    if (IS_IGDNG(intel))
	return intel_igdng_crt_detect_hotplug(output);
d537 1
a537 1
    if (IS_IGDNG(intel))
@


1.6
log
@Update the intel driver to (mostly) a backport of 2.12.

It is missing a few commits that I have yet to verify (ones that try and
continue if we lock the gpu rendering engine and can't reset it, for
example) taht will be verified and sent out for extra testing soon.

Should contain a bunch of speedups and some correctness improvements
(though rendercheck still gives some errors that I am looking into).

This has been in snaps since the first day of c2k10, any known issues
with just this driver have (to my knowledge) been fixed since. A problem
with macbooks pointed out by otto happens with both this and the in-tree
driver and thus doesn't stop this moving forward.

As well as the 2.12 improvements, this driver also has a backport
(partially aided by the backports in RHEL 5 kindly provided by Dave
Airlie) from the kms code of modesetting support for ironlake (arrandale
and clarkdale: the IGDs build into intel nehalem cpu dies) which has
been tested on a number of chipsets. Note that Display port and eDP
displays have not yet been worked on (and probably won't until I can
find a displayport monitor), but VGA and lvds at least are known to
work, sure beats vesa.

"no objection on my side" matthieu@@, prodding (as always) from princess
marco.
@
text
@d35 1
a35 1
#include "i830.h"
d37 1
d515 1
a515 1
    return i830_pipe_to_crtc(scrn, pipe);
@


1.5
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d32 2
d44 6
a49 1
    uint32_t	    temp;
d51 1
a51 1
    temp = INREG(ADPA);
d70 1
a70 1
    OUTREG(ADPA, temp);
d78 1
d80 1
a80 1
    intel->saveADPA = INREG(ADPA);
d88 1
d90 1
a90 1
    OUTREG(ADPA, intel->saveADPA);
d134 1
d140 6
d150 1
a150 1
    if (IS_I965G(intel))
d165 2
a166 1
	OUTREG(BCLRPAT_A, 0);
d171 2
a172 1
	OUTREG(BCLRPAT_B, 0);
d175 39
a213 1
    OUTREG(ADPA, adpa);
d235 3
d503 1
a503 1
	xfree (output->driver_private);
d521 2
d525 1
d528 5
a532 1
    I830I2CInit(output->scrn, &intel_output->pDDCBus, gpio_reg, gpio_str);
d540 1
a540 1
	    xfree(edid_mon);
@


1.4
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d40 2
a41 2
    ScrnInfoPtr	    pScrn = output->scrn;
    I830Ptr	    pI830 = I830PTR(pScrn);
d69 2
a70 2
    ScrnInfoPtr	pScrn = output->scrn;
    I830Ptr	pI830 = I830PTR(pScrn);
d72 1
a72 1
    pI830->saveADPA = INREG(ADPA);
d78 2
a79 2
    ScrnInfoPtr	pScrn = output->scrn;
    I830Ptr	pI830 = I830PTR(pScrn);
d81 1
a81 1
    OUTREG(ADPA, pI830->saveADPA);
d87 2
a88 2
    ScrnInfoPtr pScrn = output->scrn;
    I830Ptr	pI830 = I830PTR(pScrn);
d97 1
a97 1
    if (!IS_I9XX(pI830))
d119 2
a120 2
    ScrnInfoPtr		    pScrn = output->scrn;
    I830Ptr		    pI830 = I830PTR(pScrn);
d134 1
a134 1
    if (IS_I965G(pI830))
d171 2
a172 2
    ScrnInfoPtr	pScrn = output->scrn;
    I830Ptr	pI830 = I830PTR(pScrn);
d181 1
a181 1
    if (IS_G4X(pI830) && !IS_GM45(pI830))
d188 1
a188 1
    hotplug_en &= ~CRT_HOTPLUG_MASK;
d196 1
a196 1
    if (IS_GM45(pI830))
d238 2
a239 2
    ScrnInfoPtr		    pScrn = output->scrn;
    I830Ptr		    pI830 = I830PTR(pScrn);
d285 1
a285 1
    if (IS_I9XX (pI830))
d289 3
a291 2
	
	st00 = pI830->readStandard (pI830, 0x3c2);
d335 1
a335 1
	    st00 = pI830->readStandard(pI830, 0x3c2);
d370 1
a370 1
    ScrnInfoPtr		    pScrn = output->scrn;
d378 1
a378 1
    I830I2CInit(pScrn, &i830_output->pDDCBus, GPIOA, "CRTDDC_A");
d394 2
a395 2
    ScrnInfoPtr		    pScrn = output->scrn;
    I830Ptr		    pI830 = I830PTR(pScrn);
d404 2
a405 2
    if (IS_I945G(pI830) || IS_I945GM(pI830) || IS_I965G(pI830) ||
	    IS_G33CLASS(pI830)) {
d451 2
a452 2
    ScrnInfoPtr	pScrn = output->scrn;
    I830Ptr pI830 = I830PTR(pScrn);
d455 1
a455 1
    return i830_pipe_to_crtc(pScrn, pipe);
d527 1
a527 1
i830_crt_init(ScrnInfoPtr pScrn)
d531 1
a531 1
    I830Ptr		    pI830 = I830PTR(pScrn);
d533 1
a533 1
    if (pI830->quirk_flag & QUIRK_IGNORE_CRT)
d536 1
a536 1
    output = xf86OutputCreate (pScrn, &i830_crt_output_funcs, "VGA");
d547 1
a547 1
    if (IS_I830(pI830))
@


1.3
log
@xf86-video-intel 2.4.3. Tested by many.
@
text
@d87 4
d94 10
a103 2
    if (pMode->Clock > 400000 || pMode->Clock < 25000)
	return MODE_CLOCK_RANGE;
d173 1
a173 1
    uint32_t	temp;
d176 2
d179 19
a197 1
    temp = INREG(PORT_HOTPLUG_EN);
d199 2
a200 1
    OUTREG(PORT_HOTPLUG_EN, temp | CRT_HOTPLUG_FORCE_DETECT | (1 << 5));
d202 14
a215 5
    for (curtime = starttime = GetTimeInMillis();
	 (curtime - starttime) < timeout_ms; curtime = GetTimeInMillis())
    {
	if ((INREG(PORT_HOTPLUG_EN) & CRT_HOTPLUG_FORCE_DETECT) == 0)
	    break;
d218 4
a221 7
    if ((INREG(PORT_HOTPLUG_STAT) & CRT_HOTPLUG_MONITOR_MASK) ==
	CRT_HOTPLUG_MONITOR_COLOR)
    {
	return TRUE;
    } else {
	return FALSE;
    }
d369 1
d371 1
d377 5
a381 1
    return xf86I2CProbeAddress(i830_output->pDDCBus, 0x00A0);
d458 50
d518 1
a518 1
    .get_modes = i830_ddc_get_modes,
d532 3
a555 3

    /* Set up the DDC bus. */
    I830I2CInit(pScrn, &i830_output->pDDCBus, GPIOA, "CRTDDC_A");
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d355 3
a357 4
    crtc = i830GetLoadDetectPipe (output, NULL, &dpms_mode);
    if (!crtc)
	return XF86OutputStatusUnknown;

d365 1
a365 1
	goto out;
d368 7
d377 1
a377 1
	goto out;
d387 1
a387 1
out:
d390 1
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
    CARD32	    temp;
d112 1
a112 1
    CARD32		    adpa, dpll_md;
d161 1
a161 1
    CARD32	temp;
d202 7
a208 7
    CARD32		    save_bclrpat;
    CARD32		    save_vtotal;
    CARD32		    vtotal, vactive;
    CARD32		    vsample;
    CARD32		    vblank, vblank_start, vblank_end;
    CARD32		    dsl;
    CARD8		    st00;
d248 1
a248 1
	CARD32	pipeconf = INREG(pipeconf_reg);
d266 2
a267 2
	    CARD32  vsync = INREG(vsync_reg);
	    CARD32  vsync_start = (vsync & 0xffff) + 1;
d352 7
a358 1
    
d362 1
a362 1
	    return XF86OutputStatusConnected;
d364 3
a366 1
	    return XF86OutputStatusDisconnected;
d369 4
a372 2
    if (i830_crt_detect_ddc(output))
	return XF86OutputStatusConnected;
d375 5
a379 5
    crtc = i830GetLoadDetectPipe (output, NULL, &dpms_mode);
    
    if (crtc)
    {
	Bool			connected;
d381 2
a382 7
	connected = i830_crt_detect_load (crtc, output);
	i830ReleaseLoadDetectPipe (output, dpms_mode);
	if (connected)
	    return XF86OutputStatusConnected;
	else
	    return XF86OutputStatusDisconnected;
    }
d384 1
a384 1
    return XF86OutputStatusUnknown;
d394 12
d417 4
a420 1
    .destroy = i830_crt_destroy
@


1.1.1.1
log
@xf86-video-intel 2.2.0
@
text
@@


1.1.1.2
log
@Import intel driver v 2.2.0.90. tested by many, including krw@@ kettenis@@,
jakemsr@@, landry@@, beck@@ and oga@@. Thanks.
@
text
@d352 1
a352 7
    xf86OutputStatus	    status;
    Bool		    connected;

    crtc = i830GetLoadDetectPipe (output, NULL, &dpms_mode);
    if (!crtc)
	return XF86OutputStatusUnknown;

d356 1
a356 1
	    status = XF86OutputStatusConnected;
d358 1
a358 3
	    status = XF86OutputStatusDisconnected;

	goto out;
d361 2
a362 4
    if (i830_crt_detect_ddc(output)) {
	status = XF86OutputStatusConnected;
	goto out;
    }
d365 13
a377 8
    connected = i830_crt_detect_load (crtc, output);
    if (connected)
	status = XF86OutputStatusConnected;
    else
	status = XF86OutputStatusDisconnected;

out:
    i830ReleaseLoadDetectPipe (output, dpms_mode);
d379 1
a379 1
    return status;
@

