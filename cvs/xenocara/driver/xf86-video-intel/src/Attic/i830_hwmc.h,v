head	1.6;
access;
symbols
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2011.11.29.12.39.02;	author oga;	state dead;
branches;
next	1.5;

1.5
date	2010.05.23.21.28.35;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.12.15.20.50;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@/*
 * Copyright Â© 2007 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Zhenyu Wang <zhenyu.z.wang@@intel.com>
 *
 */
#ifndef I830_HWMC_H
#define I830_HWMC_H

#define INTEL_XVMC_LIBNAME	"IntelXvMC"
#define INTEL_XVMC_MAJOR	0
#define INTEL_XVMC_MINOR	1
#define INTEL_XVMC_PATCHLEVEL	0

#define FOURCC_XVMC     (('C' << 24) + ('M' << 16) + ('V' << 8) + 'X')

/*
 * Commands that client submits through XvPutImage:
 */

#define INTEL_XVMC_COMMAND_DISPLAY      0x00
#define INTEL_XVMC_COMMAND_UNDISPLAY    0x01

/* hw xvmc support type */
#define XVMC_I915_MPEG2_MC	0x01
#define XVMC_I965_MPEG2_MC	0x02
#define XVMC_I945_MPEG2_VLD	0x04
#define XVMC_I965_MPEG2_VLD	0x08

struct intel_xvmc_hw_context {
	unsigned int type;
	union {
		struct {
			unsigned int use_phys_addr : 1;
		} i915;
		struct {
			unsigned int is_g4x:1;
			unsigned int is_965_q:1;
			unsigned int is_igdng:1;
		} i965;
	};
};

/* Intel private XvMC command to DDX driver */
struct intel_xvmc_command {
	uint32_t handle;
};

#ifdef _INTEL_XVMC_SERVER_
#include <xf86xvmc.h>

extern Bool intel_xvmc_adaptor_init(ScreenPtr);
#endif

#endif
@


1.5
log
@Pull in the changes in rendering that I skipped when i backported
changes from later intel versions (after the UMS removal). 95% of this
is the xvmc reworks that makes that code even halfway sane. xvmc is now
enabled by default on 965+.

Tested by many on tech@@, thanks!

ok matthieu@@
@
text
@@


1.4
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d50 1
a50 16
/* supported surface types */
enum {
	SURFACE_TYPE_MPEG2_MPML = FOURCC_XVMC,	/* mpeg2 MP@@ML */
	SURFACE_TYPE_MPEG1_MPML,	/* mpeg1 MP@@ML */
	SURFACE_TYPE_MAX
};

/* common header for context private */
struct hwmc_buffer {
	drm_handle_t handle;
	unsigned long offset;
	unsigned long size;
	unsigned long bus_addr;
};

struct _intel_xvmc_common {
d52 10
a61 2
	struct hwmc_buffer batchbuffer;
	unsigned int kernel_exec_fencing:1;
a65 6
	unsigned int command;
	unsigned int ctxNo;
	unsigned int srfNo;
	unsigned int subPicNo;
	unsigned int flags;
	unsigned int real_id;
a66 1
	unsigned int pad[5];
d72 1
a72 25
struct intel_xvmc_driver {
	char *name;
	XF86MCAdaptorPtr adaptor;
	unsigned int flag;
	i830_memory *batch;
	drm_handle_t batch_handle;

	/* more items for xvmv surface manage? */
	 Bool(*init) (ScrnInfoPtr, XF86VideoAdaptorPtr);
	void (*fini) (ScrnInfoPtr);
	void *devPrivate;
};

extern struct intel_xvmc_driver *xvmc_driver;
extern struct intel_xvmc_driver i915_xvmc_driver;
extern struct intel_xvmc_driver i965_xvmc_driver;
extern struct intel_xvmc_driver vld_xvmc_driver;

extern Bool intel_xvmc_probe(ScrnInfoPtr);
extern Bool intel_xvmc_driver_init(ScreenPtr, XF86VideoAdaptorPtr);
extern Bool intel_xvmc_screen_init(ScreenPtr);
extern void intel_xvmc_finish(ScrnInfoPtr);
extern int intel_xvmc_put_image_size(ScrnInfoPtr);
extern Bool intel_xvmc_init_batch(ScrnInfoPtr);
extern void intel_xvmc_fini_batch(ScrnInfoPtr);
@


1.3
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d52 3
a54 3
    SURFACE_TYPE_MPEG2_MPML = FOURCC_XVMC, /* mpeg2 MP@@ML */
    SURFACE_TYPE_MPEG1_MPML,		   /* mpeg1 MP@@ML */
    SURFACE_TYPE_MAX
d58 5
a62 6
struct hwmc_buffer
{
    drm_handle_t handle;
    unsigned long offset;
    unsigned long size;
    unsigned long bus_addr;
d66 3
a68 3
    unsigned int type;
    unsigned int sarea_size;
    struct hwmc_buffer batchbuffer;
d73 8
a80 8
    unsigned int command;
    unsigned int ctxNo;
    unsigned int srfNo;
    unsigned int subPicNo;
    unsigned int flags;
    unsigned int real_id;
    unsigned int surf_offset;
    unsigned int pad[5];
d87 10
a96 10
    char *name;
    XF86MCAdaptorPtr adaptor;
    unsigned int flag;
    i830_memory *batch;
    drm_handle_t batch_handle;

    /* more items for xvmv surface manage? */
    Bool (*init)(ScrnInfoPtr, XF86VideoAdaptorPtr);
    void (*fini)(ScrnInfoPtr);
    void* devPrivate;
d102 1
a103 1
extern Bool intel_xvmc_set_driver(struct intel_xvmc_driver *);
d108 1
a108 1
extern int  intel_xvmc_put_image_size(ScrnInfoPtr);
@


1.2
log
@xf86-video-intel 2.4.2. Has been in snapshots for weeks. Ok oga@@.
@
text
@d80 2
a81 1
    unsigned int pad[6];
d102 1
a102 1
/* extern struct intel_xvmc_driver i965_xvmc_driver; */
@


1.1
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d50 7
@

