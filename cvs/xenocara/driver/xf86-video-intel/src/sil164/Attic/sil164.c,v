head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_2_0_90:1.1.1.2
	v2_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.03.18.18.38.21;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.13.19.56.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.52;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.19.45.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.19.45.02;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.02.11.20.10.28;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/* -*- c-basic-offset: 4 -*- */
/**************************************************************************

Copyright Â© 2006 Dave Airlie

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sub license, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdint.h>

#include "xf86.h"
#include "xf86_OSproc.h"
#include "compiler.h"
#include "miscstruct.h"
#include "xf86i2c.h"
#include "xf86Crtc.h"
#ifdef HAVE_XEXTPROTO_71
#include <X11/extensions/dpmsconst.h>
#else
#define DPMS_SERVER
#include <X11/extensions/dpms.h>
#endif


#include "../i2c_vid.h"
#include "sil164.h"
#include "sil164_reg.h"

typedef struct _Sil164SaveRec {
    uint8_t reg8;
    uint8_t reg9;
    uint8_t regc;
} SIL164SaveRec;

typedef struct {
    I2CDevRec d;
    Bool quiet;
    SIL164SaveRec SavedReg;
    SIL164SaveRec ModeReg;
} SIL164Rec, *SIL164Ptr;

#define SILPTR(d) ((SIL164Ptr)(d->DriverPrivate.ptr))

static Bool
sil164ReadByte(SIL164Ptr sil, int addr, uint8_t *ch)
{
    if (!xf86I2CReadByte(&(sil->d), addr, ch)) {
	if (!sil->quiet) {
	    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_ERROR,
		       "Unable to read from %s Slave %d.\n",
		       sil->d.pI2CBus->BusName, sil->d.SlaveAddr);
	}
	return FALSE;
    }
    return TRUE;
}

static Bool
sil164WriteByte(SIL164Ptr sil, int addr, uint8_t ch)
{
    if (!xf86I2CWriteByte(&(sil->d), addr, ch)) {
	if (!sil->quiet) {
	    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_ERROR,
		       "Unable to write to %s Slave %d.\n",
		       sil->d.pI2CBus->BusName, sil->d.SlaveAddr);
	}
	return FALSE;
    }
    return TRUE;
}

/* Silicon Image 164 driver for chip on i2c bus */
static void *
sil164_init(I2CBusPtr b, I2CSlaveAddr addr)
{
    /* this will detect the SIL164 chip on the specified i2c bus */
    SIL164Ptr sil;
    unsigned char ch;

    sil = xcalloc(1, sizeof(SIL164Rec));
    if (sil == NULL)
	return NULL;

    sil->d.DevName = "SIL164 TMDS Controller";
    sil->d.SlaveAddr = addr;
    sil->d.pI2CBus = b;
    sil->d.StartTimeout = b->StartTimeout;
    sil->d.BitTimeout = b->BitTimeout;
    sil->d.AcknTimeout = b->AcknTimeout;
    sil->d.ByteTimeout = b->ByteTimeout;
    sil->d.DriverPrivate.ptr = sil;
    sil->quiet = TRUE;

    if (!sil164ReadByte(sil, SIL164_VID_LO, &ch))
	goto out;

    if (ch!=(SIL164_VID & 0xFF)) {
	xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_ERROR,
		   "sil164 not detected got %d: from %s Slave %d.\n",
		   ch, sil->d.pI2CBus->BusName, sil->d.SlaveAddr);
	goto out;
    }

    if (!sil164ReadByte(sil, SIL164_DID_LO, &ch))
	goto out;

    if (ch!=(SIL164_DID & 0xFF)) {
	xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_ERROR,
		   "sil164 not detected got %d: from %s Slave %d.\n",
		   ch, sil->d.pI2CBus->BusName, sil->d.SlaveAddr);
	goto out;
    }
    sil->quiet = FALSE;

    if (!xf86I2CDevInit(&(sil->d))) {
	goto out;
    }

    return sil;

out:
    xfree(sil);
    return NULL;
}

static xf86OutputStatus
sil164_detect(I2CDevPtr d)
{
    SIL164Ptr sil = SILPTR(d);
    uint8_t reg9;

    sil164ReadByte(sil, SIL164_REG9, &reg9);

    if (reg9 & SIL164_9_HTPLG)
	return XF86OutputStatusConnected;
    else
	return XF86OutputStatusDisconnected;
}

static ModeStatus
sil164_mode_valid(I2CDevPtr d, DisplayModePtr mode)
{
    return MODE_OK;
}

static void
sil164_mode_set(I2CDevPtr d, DisplayModePtr mode, DisplayModePtr adjusted_mode)
{
    /* As long as the basics are set up, since we don't have clock dependencies
     * in the mode setup, we can just leave the registers alone and everything
     * will work fine.
     */
    /* recommended programming sequence from doc */
    /*sil164WriteByte(sil, 0x08, 0x30);
      sil164WriteByte(sil, 0x09, 0x00);
      sil164WriteByte(sil, 0x0a, 0x90);
      sil164WriteByte(sil, 0x0c, 0x89);
      sil164WriteByte(sil, 0x08, 0x31);*/
    /* don't do much */
    return;
}

/* set the SIL164 power state */
static void
sil164_dpms(I2CDevPtr d, int mode)
{
    SIL164Ptr sil = SILPTR(d);
    int ret;
    unsigned char ch;

    ret = sil164ReadByte(sil, SIL164_REG8, &ch);
    if (ret == FALSE)
	return;

    if (mode == DPMSModeOn)
	ch |= SIL164_8_PD;
    else
	ch &= ~SIL164_8_PD;

    sil164WriteByte(sil, SIL164_REG8, ch);

    return;
}

static void
sil164_dump_regs(I2CDevPtr d)
{
    SIL164Ptr sil = SILPTR(d);
    uint8_t val;

    sil164ReadByte(sil, SIL164_FREQ_LO, &val);
    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_INFO, "SIL164_FREQ_LO: 0x%02x\n",
	       val);
    sil164ReadByte(sil, SIL164_FREQ_HI, &val);
    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_INFO, "SIL164_FREQ_HI: 0x%02x\n",
	       val);
    sil164ReadByte(sil, SIL164_REG8, &val);
    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_INFO, "SIL164_REG8: 0x%02x\n", val);
    sil164ReadByte(sil, SIL164_REG9, &val);
    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_INFO, "SIL164_REG9: 0x%02x\n", val);
    sil164ReadByte(sil, SIL164_REGC, &val);
    xf86DrvMsg(sil->d.pI2CBus->scrnIndex, X_INFO, "SIL164_REGC: 0x%02x\n", val);
}

static void
sil164_save(I2CDevPtr d)
{
    SIL164Ptr sil = SILPTR(d);

    if (!sil164ReadByte(sil, SIL164_REG8, &sil->SavedReg.reg8))
	return;

    if (!sil164ReadByte(sil, SIL164_REG9, &sil->SavedReg.reg9))
	return;

    if (!sil164ReadByte(sil, SIL164_REGC, &sil->SavedReg.regc))
	return;

    return;
}

static void
sil164_restore(I2CDevPtr d)
{
    SIL164Ptr sil = SILPTR(d);

    /* Restore it powered down initially */
    sil164WriteByte(sil, SIL164_REG8, sil->SavedReg.reg8 & ~0x1);

    sil164WriteByte(sil, SIL164_REG9, sil->SavedReg.reg9);
    sil164WriteByte(sil, SIL164_REGC, sil->SavedReg.regc);
    sil164WriteByte(sil, SIL164_REG8, sil->SavedReg.reg8);
}


_X_EXPORT I830I2CVidOutputRec SIL164VidOutput = {
    .init = sil164_init,
    .detect = sil164_detect,
    .mode_valid = sil164_mode_valid,
    .mode_set = sil164_mode_set,
    .dpms = sil164_dpms,
    .dump_regs = sil164_dump_regs,
    .save = sil164_save,
    .restore = sil164_restore,
};
@


1.4
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@@


1.3
log
@Make it possible to build drivers with the newer proto headers. ok oga@@.
@
text
@a37 1
#include "xf86Resources.h"
d42 1
a42 1
#ifdef HAVE_X11_EXTENSIONS_DPMSCONST_H
d48 1
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d43 3
d48 1
@


1.1
log
@Initial revision
@
text
@d34 2
d50 15
d66 1
a66 1
sil164ReadByte(SIL164Ptr sil, int addr, CARD8 *ch)
d80 1
a80 1
sil164WriteByte(SIL164Ptr sil, int addr, CARD8 ch)
d151 1
a151 1
    CARD8 reg9;
d210 1
a210 1
    CARD8 val;
d257 1
a257 1
I830I2CVidOutputRec SIL164VidOutput = {
@


1.1.1.1
log
@xf86-video-intel 2.2.0
@
text
@@


1.1.1.2
log
@Import intel driver v 2.2.0.90. tested by many, including krw@@ kettenis@@,
jakemsr@@, landry@@, beck@@ and oga@@. Thanks.
@
text
@d240 1
a240 1
_X_EXPORT I830I2CVidOutputRec SIL164VidOutput = {
@

