head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2015.04.12.19.42.06;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	DK857Z2Au1JEohAk;

1.4
date	2014.02.03.15.54.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.18.18.38.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.29.12.39.03;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xf86-video-intel 2.99.916
Fixes a display bug seenby ajacoutot@@, ok jsg@@ and kettenis@@.
newer X.Org (2.99.917 or master) version cause corruption on older
machines (X40, i965), probably caused by a bug in our kernel,
under investigation by kettenis@@.
@
text
@INTEL_G4A =				\
	exa_sf.g4a 			\
	exa_sf_mask.g4a 		\
	exa_wm_src_affine.g4a 		\
	exa_wm_src_projective.g4a 	\
	exa_wm_src_sample_argb.g4a 	\
	exa_wm_src_sample_a.g4a 	\
	exa_wm_src_sample_planar.g4a 	\
	exa_wm_mask_affine.g4a 		\
	exa_wm_mask_projective.g4a 	\
	exa_wm_mask_sample_argb.g4a 	\
	exa_wm_mask_sample_a.g4a 	\
	exa_wm_noca.g4a			\
	exa_wm_ca.g4a			\
	exa_wm_ca_srcalpha.g4a		\
	exa_wm_write.g4a 		\
	exa_wm_yuv_rgb.g4a		\
	exa_wm_xy.g4a			\
	$(NULL)

INTEL_G4I =				\
	exa_wm.g4i			\
	exa_wm_affine.g4i		\
	exa_wm_projective.g4i		\
	exa_wm_sample_planar.g4i	\
	exa_wm_src_sample_argb.g4i	\
	$(NULL)

INTEL_G4B = 				\
	exa_sf.g4b 			\
	exa_sf_mask.g4b 		\
	exa_wm_src_affine.g4b 		\
	exa_wm_src_projective.g4b 	\
	exa_wm_src_sample_argb.g4b 	\
	exa_wm_src_sample_a.g4b 	\
	exa_wm_src_sample_planar.g4b 	\
	exa_wm_mask_affine.g4b 		\
	exa_wm_mask_projective.g4b 	\
	exa_wm_mask_sample_argb.g4b 	\
	exa_wm_mask_sample_a.g4b 	\
	exa_wm_noca.g4b			\
	exa_wm_ca.g4b			\
	exa_wm_ca_srcalpha.g4b		\
	exa_wm_write.g4b 		\
	exa_wm_yuv_rgb.g4b		\
	exa_wm_xy.g4b			\
	$(NULL)


INTEL_G4B_GEN5 = 				\
	exa_sf.g4b.gen5 			\
	exa_sf_mask.g4b.gen5 			\
	exa_wm_src_affine.g4b.gen5 		\
	exa_wm_src_projective.g4b.gen5 		\
	exa_wm_src_sample_argb.g4b.gen5 	\
	exa_wm_src_sample_a.g4b.gen5 		\
	exa_wm_src_sample_planar.g4b.gen5 	\
	exa_wm_mask_affine.g4b.gen5 		\
	exa_wm_mask_projective.g4b.gen5 	\
	exa_wm_mask_sample_argb.g4b.gen5 	\
	exa_wm_mask_sample_a.g4b.gen5 		\
	exa_wm_noca.g4b.gen5			\
	exa_wm_ca.g4b.gen5			\
	exa_wm_ca_srcalpha.g4b.gen5		\
	exa_wm_write.g4b.gen5 			\
	exa_wm_yuv_rgb.g4b.gen5			\
	exa_wm_xy.g4b.gen5			\
	$(NULL)

INTEL_G5A =				\
	exa_sf.g5a 			\
	exa_sf_mask.g5a 		\
	exa_wm_src_affine.g5a 		\
	exa_wm_src_projective.g5a 	\
	exa_wm_src_sample_argb.g5a 	\
	exa_wm_src_sample_a.g5a 	\
	exa_wm_src_sample_planar.g5a 	\
	exa_wm_mask_affine.g5a 		\
	exa_wm_mask_projective.g5a 	\
	exa_wm_mask_sample_argb.g5a 	\
	exa_wm_mask_sample_a.g5a 	\
	exa_wm_noca.g5a			\
	exa_wm_ca.g5a			\
	exa_wm_ca_srcalpha.g5a		\
	exa_wm_write.g5a 		\
	exa_wm_yuv_rgb.g5a		\
	exa_wm_xy.g5a			\
	$(NULL)

INTEL_G5B = 				\
	exa_sf.g5b 			\
	exa_sf_mask.g5b 		\
	exa_wm_src_affine.g5b 		\
	exa_wm_src_projective.g5b 	\
	exa_wm_src_sample_argb.g5b 	\
	exa_wm_src_sample_a.g5b 	\
	exa_wm_src_sample_planar.g5b 	\
	exa_wm_mask_affine.g5b 		\
	exa_wm_mask_projective.g5b 	\
	exa_wm_mask_sample_argb.g5b 	\
	exa_wm_mask_sample_a.g5b 	\
	exa_wm_noca.g5b			\
	exa_wm_ca.g5b			\
	exa_wm_ca_srcalpha.g5b		\
	exa_wm_write.g5b 		\
	exa_wm_yuv_rgb.g5b		\
	exa_wm_xy.g5b			\
	$(NULL)

INTEL_G6I =				\
	exa_wm_affine.g6i		\
	exa_wm_write.g6i		\
	$(NULL)

INTEL_G6A =				\
	exa_wm_src_affine.g6a 		\
	exa_wm_src_projective.g6a	\
	exa_wm_src_sample_argb.g6a 	\
	exa_wm_src_sample_planar.g6a 	\
	exa_wm_src_sample_a.g6a		\
	exa_wm_mask_affine.g6a		\
	exa_wm_mask_projective.g6a	\
	exa_wm_mask_sample_argb.g6a	\
	exa_wm_mask_sample_a.g6a	\
	exa_wm_ca.g6a			\
	exa_wm_ca_srcalpha.g6a		\
	exa_wm_noca.g6a			\
	exa_wm_write.g6a 		\
	exa_wm_yuv_rgb.g6a		\
	$(NULL)

INTEL_G6B =				\
	exa_wm_src_affine.g6b 		\
	exa_wm_src_projective.g6b	\
	exa_wm_src_sample_argb.g6b 	\
	exa_wm_src_sample_planar.g6b 	\
	exa_wm_src_sample_a.g6b		\
	exa_wm_mask_affine.g6b		\
	exa_wm_mask_projective.g6b	\
	exa_wm_mask_sample_argb.g6b	\
	exa_wm_mask_sample_a.g6b	\
	exa_wm_ca.g6b			\
	exa_wm_ca_srcalpha.g6b		\
	exa_wm_noca.g6b			\
	exa_wm_write.g6b 		\
	exa_wm_yuv_rgb.g6b		\
	$(NULL)

INTEL_G7A =				\
	exa_wm_mask_affine.g7a		\
	exa_wm_mask_projective.g7a	\
	exa_wm_mask_sample_a.g7a	\
	exa_wm_mask_sample_argb.g7a	\
	exa_wm_src_affine.g7a 		\
	exa_wm_src_projective.g7a	\
	exa_wm_src_sample_a.g7a		\
	exa_wm_src_sample_argb.g7a 	\
	exa_wm_src_sample_planar.g7a 	\
	exa_wm_write.g7a 		\
	exa_wm_yuv_rgb.g7a		\
	$(NULL)

INTEL_G7B =				\
	exa_wm_mask_affine.g7b		\
	exa_wm_mask_projective.g7b	\
	exa_wm_mask_sample_a.g7b	\
	exa_wm_mask_sample_argb.g7b	\
	exa_wm_src_affine.g7b 		\
	exa_wm_src_projective.g7b	\
	exa_wm_src_sample_a.g7b		\
	exa_wm_src_sample_argb.g7b 	\
	exa_wm_src_sample_planar.g7b 	\
	exa_wm_write.g7b 		\
	exa_wm_yuv_rgb.g7b		\
	$(NULL)

INTEL_G8A =				\
	exa_wm_src_affine.g8a 		\
	exa_wm_src_sample_argb.g8a 	\
	exa_wm_src_sample_planar.g8a 	\
	exa_wm_write.g8a 		\
	exa_wm_yuv_rgb.g8a		\
	$(NULL)

INTEL_G8B =				\
	exa_wm_src_affine.g8b 		\
	exa_wm_src_sample_argb.g8b 	\
	exa_wm_src_sample_planar.g8b 	\
	exa_wm_write.g8b 		\
	exa_wm_yuv_rgb.g8b		\
	$(NULL)

EXTRA_DIST = 		\
	$(INTEL_G4A)	\
	$(INTEL_G4I)	\
	$(INTEL_G4B)	\
	$(INTEL_G4B_GEN5)\
	$(INTEL_G5A)	\
	$(INTEL_G5B)	\
	$(INTEL_G6A)	\
	$(INTEL_G6B)	\
	$(INTEL_G6I)	\
	$(INTEL_G7A)	\
	$(INTEL_G7B)	\
	$(INTEL_G8A)	\
	$(INTEL_G8B)

if HAVE_GEN4ASM

SUFFIXES = .g4a .g4b .g5a .g5b .g6a .g6b .g7a .g7b .g8b
.g4a.g4b:
	$(AM_V_GEN)m4 -I$(srcdir) -s $< > $*.g4m && @@INTEL_GEN4ASM@@ -o $@@ $*.g4m && @@INTEL_GEN4ASM@@ -g 5 -o $@@.gen5 $*.g4m && rm $*.g4m

.g5a.g5b:
	$(AM_V_GEN)m4 -I$(srcdir) -s $< > $*.g5m && @@INTEL_GEN4ASM@@ -g 5 -o $@@ $*.g5m && rm $*.g5m

.g6a.g6b:
	$(AM_V_GEN)m4 -I$(srcdir) -s $< > $*.g6m && @@INTEL_GEN4ASM@@ -g 6 -o $@@ $*.g6m && rm $*.g6m

.g7a.g7b:
	$(AM_V_GEN)m4 -I$(srcdir) -s $< > $*.g7m && @@INTEL_GEN4ASM@@ -g 7 -o $@@ $*.g7m && rm $*.g7m
.g8a.g8b:
	$(AM_V_GEN)m4 -I$(srcdir) -s $< > $*.g8m && @@INTEL_GEN4ASM@@ -g 8 -o $@@ $*.g8m && rm $*.g8m

$(INTEL_G4B): $(INTEL_GEN4ASM) $(INTEL_G4I)
$(INTEL_G5B): $(INTEL_GEN4ASM) $(INTEL_G4I)
$(INTEL_G6B): $(INTEL_GEN4ASM) $(INTEL_G4I) $(INTEL_G6I)
$(INTEL_G7B): $(INTEL_GEN4ASM) $(INTEL_G4I) $(INTEL_G6I)
$(INTEL_G8B): $(INTEL_GEN4ASM) $(INTEL_G4I) $(INTEL_G6I)

BUILT_SOURCES=$(INTEL_G4B) $(INTEL_G4B_GEN5) $(INTEL_G5B) $(INTEL_G6B) $(INTEL_G7B) $(INTEL_G8B)

clean-local:
	-rm -f $(BUILT_SOURCES)
endif
@


1.4
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@d177 8
d205 1
d222 1
a222 1
.g7a.g8b:
@


1.3
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@d177 8
d196 2
a197 1
	$(INTEL_G7B)
d201 1
a201 1
SUFFIXES = .g4a .g4b .g5a .g5b .g6a .g6b .g7a .g7b
d203 1
a203 1
	m4 -I$(srcdir) -s $< > $*.g4m && @@INTEL_GEN4ASM@@ -o $@@ $*.g4m && @@INTEL_GEN4ASM@@ -g 5 -o $@@.gen5 $*.g4m && rm $*.g4m
d206 1
a206 1
	m4 -I$(srcdir) -s $< > $*.g5m && @@INTEL_GEN4ASM@@ -g 5 -o $@@ $*.g5m && rm $*.g5m
d209 1
a209 1
	m4 -I$(srcdir) -s $< > $*.g6m && @@INTEL_GEN4ASM@@ -g 6 -o $@@ $*.g6m && rm $*.g6m
d212 9
a220 6
	m4 -I$(srcdir) -s $< > $*.g7m && @@INTEL_GEN4ASM@@ -g 7 -o $@@ $*.g7m && rm $*.g7m

$(INTEL_G4B): $(INTEL_G4I)
$(INTEL_G5B): $(INTEL_G4I)
$(INTEL_G6B): $(INTEL_G4I) $(INTEL_G6I)
$(INTEL_G7B): $(INTEL_G4I) $(INTEL_G6I)
d222 1
a222 1
BUILT_SOURCES= $(INTEL_G4B) $(INTEL_G5B) $(INTEL_G6B) $(INTEL_G7B)
d225 1
a225 4
	-rm -f $(INTEL_G4B) $(INTEL_G4B_GEN5)
	-rm -f $(INTEL_G5B)
	-rm -f $(INTEL_G6B)
	-rm -f $(INTEL_G7B)
@


1.2
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d18 2
a19 1
	exa_wm_xy.g4a
d26 2
a27 1
	exa_wm_src_sample_argb.g4i
d46 2
a47 1
	exa_wm_xy.g4b
d67 42
a108 1
	exa_wm_xy.g4b.gen5
d112 2
a113 1
	exa_wm_write.g6i
d129 2
a130 1
	exa_wm_yuv_rgb.g6a
d146 2
a147 1
	exa_wm_yuv_rgb.g6b
d160 2
a161 1
	exa_wm_yuv_rgb.g7a
d174 2
a175 1
	exa_wm_yuv_rgb.g7b
d182 2
d192 1
a192 1
SUFFIXES = .g4a .g4b .g6a .g6b .g7a .g7b
d194 4
a197 1
	m4 -I$(srcdir) -s $< > $*.g4m && intel-gen4asm -o $@@ $*.g4m && intel-gen4asm -g 5 -o $@@.gen5 $*.g4m && rm $*.g4m
d200 1
a200 1
	m4 -I$(srcdir) -s $< > $*.g6m && intel-gen4asm -g 6 -o $@@ $*.g6m && rm $*.g6m
d203 1
a203 1
	m4 -I$(srcdir) -s $< > $*.g7m && intel-gen4asm -g 7 -o $@@ $*.g7m && rm $*.g7m
d206 1
d210 1
a210 1
BUILT_SOURCES= $(INTEL_G4B) $(INTEL_G6B) $(INTEL_G7B)
d214 1
@


1.1
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d23 3
a25 1
	exa_wm_projective.g4i
d66 62
d132 6
a137 1
	$(INTEL_G4B_GEN5)
d141 1
a141 1
SUFFIXES = .g4a .g4b
d145 6
d152 2
d155 1
a155 1
BUILT_SOURCES= $(INTEL_G4B)
d159 2
@

