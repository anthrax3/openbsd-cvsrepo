head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.03.18.18.38.20;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2010.05.10.22.32.29;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@/*
 * Copyright Â© 2008 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *    Jesse Barnes <jesse.barnes@@intel.com>
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <pciaccess.h>
#include <err.h>

#include "../i810_reg.h"
#include "../i830_bios.h"

#ifndef DEFFILEMODE
#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)	/* 0666 */
#endif

static uint32_t read32(void *base, int reg)
{
	uint32_t *addr = (uint32_t *) ((unsigned char *)(base) + reg);

	return *addr;
}

#if 0
static void write32(void *base, int reg, uint32_t val)
{
	uint32_t *addr = (uint32_t *) ((unsigned char *)(base) + reg);
	*addr = val;
}
#endif

static void usage(void)
{
	fprintf(stderr, "usage: swf_dumper\n");
	exit(1);
}

int main(int argc, char **argv)
{
	struct pci_device *dev;
	int err;
	void *addr;

	if (argc != 1)
		usage();

	err = pci_system_init();
	if (err != 0) {
		fprintf(stderr, "Couldn't initialize PCI system: %s\n",
			strerror(err));
		exit(1);
	}

	/* Grab the graphics card */
	dev = pci_device_find_by_slot(0, 0, 2, 0);
	if (dev == NULL)
		errx(1, "Couldn't find graphics card");

	err = pci_device_probe(dev);
	if (err != 0) {
		fprintf(stderr, "Couldn't probe graphics card: %s\n",
			strerror(err));
		exit(1);
	}

	if (dev->vendor_id != 0x8086)
		errx(1, "Graphics card is non-intel");

	err = pci_device_map_range(dev, dev->regions[0].base_addr,
				   dev->regions[0].size,
				   PCI_DEV_MAP_FLAG_WRITABLE, &addr);
	if (err) {
		fprintf(stderr, "Couldn't map MMIO space: %s\n", strerror(err));
		exit(1);
	}

	printf("SWF14: 0x%08x\n", read32(addr, SWF14));

	pci_system_cleanup();

	return 0;
}
@


1.2
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@@


1.1
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@d44 1
a44 1
#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH) /* 0666*/
d49 1
a49 1
    uint32_t *addr = (uint32_t *)((unsigned char *)(base) + reg);
d51 1
a51 1
    return *addr;
d57 2
a58 2
    uint32_t *addr = (uint32_t *)((unsigned char *)(base) + reg);
    *addr = val;
d64 2
a65 2
    fprintf(stderr, "usage: swf_dumper\n");
    exit(1);
d70 36
a105 34
    struct pci_device *dev;
    int err;
    void *addr;

    if (argc != 1)
	usage();

    err = pci_system_init();
    if (err != 0) {
	fprintf(stderr, "Couldn't initialize PCI system: %s\n", strerror(err));
	exit(1);
    }

    /* Grab the graphics card */
    dev = pci_device_find_by_slot(0, 0, 2, 0);
    if (dev == NULL)
	errx(1, "Couldn't find graphics card");

    err = pci_device_probe(dev);
    if (err != 0) {
	fprintf(stderr, "Couldn't probe graphics card: %s\n", strerror(err));
	exit(1);
    }

    if (dev->vendor_id != 0x8086)
	errx(1, "Graphics card is non-intel");

    err = pci_device_map_range(dev, dev->regions[0].base_addr,
			       dev->regions[0].size,
			       PCI_DEV_MAP_FLAG_WRITABLE, &addr);
    if (err) {
	fprintf(stderr, "Couldn't map MMIO space: %s\n", strerror(err));
	exit(1);
    }
d107 1
a107 1
    printf("SWF14: 0x%08x\n", read32(addr, SWF14));
d109 1
a109 1
    pci_system_cleanup();
d111 1
a111 1
    return 0;
@

