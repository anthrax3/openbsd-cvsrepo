head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.2
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_2_0_90:1.1.1.2
	v2_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.9
date	2015.04.12.19.42.05;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	DK857Z2Au1JEohAk;

1.8
date	2014.02.03.15.54.51;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.18.18.38.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.22.21.37.09;	author sobrado;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.29.12.39.02;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.10.22.32.28;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.25.20.16.43;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.21.20.19.51;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.19.45.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.19.45.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.02.11.20.10.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xf86-video-intel 2.99.916
Fixes a display bug seenby ajacoutot@@, ok jsg@@ and kettenis@@.
newer X.Org (2.99.917 or master) version cause corruption on older
machines (X40, i965), probably caused by a bug in our kernel,
under investigation by kettenis@@.
@
text
@.\" shorthand for double quote that works everywhere.
.ds q \N'34'
.TH intel  __drivermansuffix__ __vendorversion__
.SH NAME
intel \- Intel integrated graphics chipsets
.SH SYNOPSIS
.nf
.B "Section \*qDevice\*q"
.BI "  Identifier \*q"  devname \*q
.B  "  Driver \*qintel\*q"
\ \ ...
.B EndSection
.fi
.SH DESCRIPTION
.B intel
is an __xservername__ driver for Intel integrated graphics chipsets.
The driver supports depths 8, 15, 16 and 24.  All visual types are
supported in depth 8.  For the i810/i815 other depths support the
TrueColor and DirectColor visuals.  For the i830M and later, only the
TrueColor visual is supported for depths greater than 8.  The driver
supports hardware accelerated 3D via the Direct Rendering Infrastructure
(DRI), but only in depth 16 for the i810/i815 and depths 16 and 24 for
the 830M and later.
.SH SUPPORTED HARDWARE
.B intel
supports the i810, i810-DC100, i810e, i815, i830M, 845G, 852GM, 855GM,
865G, 915G, 915GM, 945G, 945GM, 965G, 965Q, 946GZ, 965GM, 945GME,
G33, Q33, Q35, G35, GM45, G45, Q45, G43, G41 chipsets, Pineview-M in
Atom N400 series, Pineview-D in Atom D400/D500 series,
Intel(R) HD Graphics: 2000-6000,
Intel(R) Iris(TM) Graphics: 5100/6100, and
Intel(R) Iris(TM) Pro Graphics: 5200/6200/P6300.

.SH CONFIGURATION DETAILS
Please refer to __xconfigfile__(__filemansuffix__) for general configuration
details.  This section only covers configuration details specific to this
driver.
.PP
The Intel 8xx and 9xx families of integrated graphics chipsets have a unified
memory architecture meaning that system memory is used as video RAM.  For the
i810 and i815 family of chipsets, operating system support for allocating system
memory is required in order to use this driver.  For the 830M
and later, this is required in order for the driver to use more video RAM
than has been pre-allocated at boot time by the BIOS.  This is usually
achieved with an "agpgart" or "agp" kernel driver.  Linux, FreeBSD, OpenBSD,
NetBSD, and Solaris have such kernel drivers available.
.PP
By default, the i810/i815 will use 8 MB of system memory for graphics if AGP
allocable memory is < 128 MB, 16 MB if < 192 MB or 24 MB if higher. Use the
.B VideoRam
option to change the default value.
.PP
For the 830M and later, the driver will automatically size its memory
allocation according to the features it will support.  Therefore, the
.B VideoRam
option, which in the past had been necessary to allow more than some small
amount of memory to be allocated, is now ignored.
.PP
The following driver
.B Options
are supported
.TP
.BI "Option \*qColorKey\*q \*q" integer \*q
This sets the default pixel value for the YUV video overlay key.
.IP
Default: undefined.
.TP
.BI "Option \*qDRI\*q \*q" boolean \*q
Disable or enable DRI support.
.IP
Default: DRI is enabled for configurations where it is supported.

.PP
The following driver
.B Options
are supported for the i810 and i815 chipsets:
.TP
.BI "Option \*qCacheLines\*q \*q" integer \*q
This allows the user to change the amount of graphics memory used for
2D acceleration and video when XAA acceleration is enabled.  Decreasing this
amount leaves more for 3D textures.  Increasing it can improve 2D performance
at the expense of 3D performance.
.IP
Default: depends on the resolution, depth, and available video memory.  The
driver attempts to allocate space for at 3 screenfuls of pixmaps plus an
HD-sized XV video.  The default used for a specific configuration can be found
by examining the __xservername__ log file.
.TP
.BI "Option \*qDDC\*q \*q" boolean \*q
Disable or enable DDC support.
.IP
Default: enabled.
.TP
.BI "Option \*qDac6Bit\*q \*q" boolean \*q
Enable or disable 6-bits per RGB for 8-bit modes.
.IP
Default: 8-bits per RGB for 8-bit modes.
.TP
.BI "Option \*qXvMCSurfaces\*q \*q" integer \*q
This option enables XvMC.  The integer parameter specifies the number of
surfaces to use.  Valid values are 6 and 7.
.IP
Default: XvMC is disabled.
.TP
.BI "VideoRam " integer
This option specifies the amount of system memory to use for graphics, in KB.
.IP
The default is 8192 if AGP allocable memory is < 128 MB, 16384 if < 192 MB,
24576 if higher. DRI require at least a value of 16384. Higher values may give
better 3D performance, at expense of available system memory.
.TP
.BI "Option \*qNoAccel\*q \*q" boolean \*q
Disable or enable acceleration.
.IP
Default: acceleration is enabled.

.PP
The following driver
.B Options
are supported for the 830M and later chipsets:
.TP
.BI "Option \*qNoAccel\*q \*q" boolean \*q
Disable or enable acceleration.
.IP
Default: acceleration is enabled.
.TP
.BI "Option \*qPresent\*q \*q" boolean \*q
Enable use of hardware counters and flow control for the Present extension.
.IP
Default: Enabled
.TP
.BI "Option \*qAccelMethod\*q \*q" string \*q
Select acceleration method.
There are a couple of backends available for accelerating the DDX. \*qUXA\*q (Unified
Acceleration Architecture) is the mature backend that was introduced to support
the GEM driver model. It is in the process of being superseded by \*qSNA\*q
(Sandybridge's New Acceleration). Until that process is complete, the ability to
choose which backend to use remains for backwards compatibility.
In addition, there are a pair of sub-options to limit the acceleration for
debugging use. Specify \*qoff\*q to disable all acceleration, or \*qblt\*q to
disable render acceleration and only use the BLT engine.
.IP
Default: use SNA (render acceleration)
.TP
.BI "Option \*qTearFree\*q \*q" boolean \*q
Disable or enable TearFree updates. This option forces X to perform all
rendering to a backbuffer prior to updating the actual display. It requires
an extra memory allocation the same size as a framebuffer, the occasional extra
copy, and requires Damage tracking. Thus enabling TearFree requires more
memory and is slower (reduced throughput) and introduces a small amount of
output latency, but it should not impact input latency. However, the update to
the screen is then performed synchronously with the vertical refresh of the
display so that the entire update is completed before the display starts its
refresh. That is only one frame is ever visible, preventing an unsightly tear
between two visible and differing frames. Note that this replicates what the
compositing manager should be doing, however TearFree will redirect the
compositor updates (and those of fullscreen games) directly on to the scanout
thus incurring no additional overhead in the composited case. Also note that
not all compositing managers prevent tearing, and if the outputs are
rotated, there will still be tearing without TearFree enabled.
.IP
Default: TearFree is disabled.
.TP
.BI "Option \*qReprobeOutputs\*q \*q" boolean \*q
Disable or enable rediscovery of connected displays during server startup.
As the kernel driver loads it scans for connected displays and configures a
console spanning those outputs. When the X server starts, we then take the
list of connected displays and framebuffer layout and use that for the
initial configuration. Sometimes, not all displays are correctly detected by
the kernel and so it is useful in a few circumstances for X to force the
kernel to reprobe all displays when it starts. To make the X server recheck
the status of connected displays, set the \*qReprobeOutputs\*q option to true.
Please do file a bug for any circumstances which require this workaround.
.IP
Default: reprobing is disabled for a faster startup.
.TP
.BI "Option \*qVideoKey\*q \*q" integer \*q
This is the same as the
.B \*qColorKey\*q
option described above.  It is provided for compatibility with most
other drivers.
.TP
.BI "Option \*qXvPreferOverlay\*q \*q" boolean \*q
Make hardware overlay be the first XV adaptor.
The overlay behaves incorrectly in the presence of compositing, but some prefer
it due to it syncing to vblank in the absence of compositing.  While most
XV-using applications have options to select which XV adaptor to use, this
option can be used to place the overlay first for applications which don't
have options for selecting adaptors.
.IP
Default: Textured video adaptor is preferred.
.TP
.BI "Option \*qBacklight\*q \*q" string \*q
Override the probed backlight control interface. Sometimes the automatically
selected backlight interface may not correspond to the correct, or simply
most useful, interface available on the system. This allows you to override
that choice by specifying the entry under /sys/class/backlight to use.
.IP
Default: Automatic selection.
.TP
.BI "Option \*qFallbackDebug\*q \*q" boolean \*q
Enable printing of debugging information on acceleration fallbacks to the
server log.
.IP
Default: Disabled
.TP
.BI "Option \*qDebugFlushBatches\*q \*q" boolean \*q
Flush the batch buffer after every single operation.
.IP
Default: Disabled
.TP
.BI "Option \*qDebugFlushCaches\*q \*q" boolean \*q
Include an MI_FLUSH at the end of every batch buffer to force data to
be flushed out of cache and into memory before the completion of the
batch.
.IP
Default: Disabled
.TP
.BI "Option \*qDebugWait\*q \*q" boolean \*q
Wait for the completion of every batch buffer before continuing,
i.e. perform synchronous rendering.
.IP
Default: Disabled
.TP
.TP
.BI "Option \*qVSync\*q \*q" boolean \*q
This option controls the use of commands to synchronise rendering with the
vertical refresh of the display. Some rendering commands have the option
to be performed in a "tear-free" fashion by stalling the GPU to wait for
the display to be outside of the region to be updated. This slows down all
rendering, and historically has been the source of many GPU hangs.
.IP
Default: enabled.
.TP
.BI "Option \*qPageFlip\*q \*q" boolean \*q
This option controls the use of commands to flip the scanout address on a
VBlank. This is used by glXSwapBuffers to efficiently perform the back-to-front
exchange at the end of a frame without incurring the penalty of a copy, or
stalling the render pipeline (the flip is performed asynchronrously to the
render command stream by the display engine). However, it has historically
been the source of many GPU hangs.
.IP
Default: enabled.
.TP
.BI "Option \*qSwapbuffersWait\*q \*q" boolean \*q
This option controls the behavior of glXSwapBuffers and glXCopySubBufferMESA
calls by GL applications.  If enabled, the calls will avoid tearing by making
sure the display scanline is outside of the area to be copied before the copy
occurs.  If disabled, no scanline synchronization is performed, meaning tearing
will likely occur.
.IP
Default: enabled.
.TP
.BI "Option \*qTripleBuffer\*q \*q" boolean \*q
This option enables the use of a third buffer for page-flipping. The third
buffer allows applications to run at vrefresh rates even if they occasionally
fail to swapbuffers on time. The effect of such missed swaps is the output
jitters between 60fps and 30fps, and in the worst case appears frame-locked
to 30fps. The disadvantage of triple buffering is that there is an extra
frame of latency, due to the pre-rendered frame sitting in the swap queue,
between input and any display update.
.IP
Default: enabled.
.TP
.BI "Option \*qTiling\*q \*q" boolean \*q
This option controls whether memory buffers for Pixmaps are allocated in tiled mode.  In
most cases (especially for complex rendering), tiling dramatically improves
performance.
.IP
Default: enabled.
.TP
.BI "Option \*qLinearFramebuffer\*q \*q" boolean \*q
This option controls whether the memory for the scanout (also known as the
front or frame buffer) is allocated in linear memory. A tiled framebuffer is
required for power conservation features, but for certain system configurations
you may wish to override this and force a linear layout.
.IP
Default: disabled
.TP
.BI "Option \*qRelaxedFencing\*q \*q" boolean \*q
This option controls whether we attempt to allocate the minimal amount of
memory required for the buffers. The reduction in working set has a substantial
improvement on system performance. However, this has been demonstrate to be
buggy on older hardware (845-865 and 915-945, but ok on PineView and later)
so on those chipsets defaults to off.
.IP
Default: Enabled for G33 (includes PineView), and later, class machines.
.TP
.BI "Option \*qXvMC\*q \*q" boolean \*q
Enable XvMC driver. Current support MPEG2 MC on 915/945 and G33 series.
User should provide absolute path to libIntelXvMC.so in XvMCConfig file.
.IP
Default: Disabled.
.TP
.BI "Option \*qThrottle\*q \*q" boolean \*q
This option controls whether the driver periodically waits for pending
drawing operations to complete. Throttling ensures that the GPU does not
lag too far behind the CPU and thus noticeable delays in user responsible at
the cost of throughput performance.
.IP
Default: enabled.
.TP
.BI "Option \*qHotPlug\*q \*q" boolean \*q
This option controls whether the driver automatically notifies
applications when monitors are connected or disconnected.
.IP
Default: enabled.
.TP
.BI "Option \*qVirtualheads\*q \*q" integer \*q
This option controls specifies the number of fake outputs to create in
addition to the normal outputs detected on your hardware. These outputs
cannot be assigned to the regular displays attached to the GPU, but do
otherwise act as any other xrandr output and share a portion of the
regular framebuffer. One use case for these extra heads is for extending
your desktop onto a discrete GPU using the Bumblebee project. However,
the recommendation here is to use PRIME instead to create a single
Xserver that can addresses and coordinate between multiple GPUs.
.IP
Default: 0
.TP
.BI "Option \*qZaphodHeads\*q \*q" string \*q
.IP
Specify the randr output(s) to use with zaphod mode for a particular driver
instance.  If you this option you must use it with all instances of the
driver
.br
For example:
.B
Option \*qZaphodHeads\*q \*qLVDS1,VGA1\*q
will assign xrandr outputs LVDS1 and VGA0 to this instance of the driver.

.SH OUTPUT CONFIGURATION
On 830M and better chipsets, the driver supports runtime configuration of
detected outputs.  You can use the
.B xrandr
tool to control outputs on the command line as follows:

.RS
.B xrandr \-\-output
.I output
.B \-\-set
.I property value
.RE

Note that you may need to quote property and value arguments that contain spaces.
Each output listed below may have one or more properties associated
with it (like a binary EDID block if one is found).  Some outputs have
unique properties which are described below.  See the "MULTIHEAD
CONFIGURATIONS" section below for additional information.
.SS "VGA"
VGA output port (typically exposed via an HD15 connector).

.SS "LVDS"
Low Voltage Differential Signalling output (typically a laptop LCD panel).  Available properties:

.TP
\fBBACKLIGHT\fB - current backlight level (adjustable)
By adjusting the BACKLIGHT property, the brightness on the LVDS output
can be adjusted.  In some cases, this property may be unavailable (for
example if your platform uses an external microcontroller to control
the backlight).
.TP
\fBscaling mode\fP - control LCD panel scaling mode
When the currently selected display mode differs from the native panel
resolution, various scaling options are available. These include
.RS
.TP
.B Center
Simply center the image on-screen without scaling. This is the only
scaling mode that guarantees a one-to-one correspondence between
native and displayed pixels, but some portions of the panel may be
unused (so-called "letterboxing").
.TP
.B Full aspect
Scale the image as much as possible while preserving aspect
ratio. Pixels may not be displayed one-to-one (there may be some
blurriness). Some portions of the panel may be unused if the aspect
ratio of the selected mode does not match that of the panel.
.TP
.B Full
Scale the image to the panel size without regard to aspect ratio. This
is the only mode which guarantees that every pixel of the panel will
be used. But the displayed image may be distorted by stretching either
horizontally or vertically, and pixels may not be displayed one-to-one
(there may be some blurriness).
.RE

The precise names of these options may differ depending on the kernel
video driver, (but the functionality should be similar). See the
output of
.B xrandr \-\-prop
for a list of currently available scaling modes.
.SS "TV"
Integrated TV output.  Available properties include:
.TP
\fBBOTTOM, RIGHT, TOP, LEFT\fP - margins
Adjusting these properties allows you to control the placement of your
TV output buffer on the screen. The options with the same name can
also be set in xorg.conf with integer value.
.TP
\fBBRIGHTNESS\fP - TV brightness, range 0-255
Adjust TV brightness, default value is 128.
.TP
\fBCONTRAST\fP - TV contrast, range 0-255
Adjust TV contrast, default value is 1.0 in chipset specific format.
.TP
\fBSATURATION\fP - TV saturation, range 0-255
Adjust TV saturation, default value is 1.0 in chipset specific format.
.TP
\fBHUE\fP - TV hue, range 0-255
Adjust TV hue, default value is 0.
.TP
\fBTV_FORMAT\fP - output standard
This property allows you to control the output standard used on your
TV output port.  You can select between NTSC-M, NTSC-443, NTSC-J,
PAL-M, PAL-N, and PAL.
.TP
\fBTV_Connector\fP - connector type
This config option should be added to xorg.conf TV monitor's section,
it allows you to force the TV output connector type, which bypass load
detect and TV will always be taken as connected. You can select
between S-Video, Composite and Component.

.SS "TMDS-1"
First DVI SDVO output

.SS "TMDS-2"
Second DVI SDVO output

.SS "TMDS-1", "TMDS-2", "HDMI-1", "HDMI-2"
DVI/HDMI outputs. Avaliable common properties include:
.TP
\fBBROADCAST_RGB\fP - method used to set RGB color range
Adjusting this property allows you to set RGB color range on each
channel in order to match HDTV requirment(default 0 for full
range). Setting 1 means RGB color range is 16-235, 0 means RGB color
range is 0-255 on each channel.  (Full range is 0-255, not 16-235)

.PP
SDVO and DVO TV outputs are not supported by the driver at this time.
.PP
See __xconfigfile__(__filemansuffix__) for information on associating Monitor
sections with these outputs for configuration.  Associating Monitor sections
with each output can be helpful if you need to ignore a specific output, for
example, or statically configure an extended desktop monitor layout.

.SH MULTIHEAD CONFIGURATIONS

The number of independent outputs is dictated by the number of CRTCs
(in X parlance) a given chip supports.  Most recent Intel chips have
two CRTCs, meaning that two separate framebuffers can be displayed
simultaneously, in an extended desktop configuration.  If a chip
supports more outputs than it has CRTCs (say local flat panel, VGA and
TV in the case of many outputs), two of the outputs will have to be
"cloned", meaning that they display the same framebuffer contents (or
one displays a subset of another's framebuffer if the modes aren't
equal).

You can use the "xrandr" tool, or various desktop utilities, to change
your output configuration at runtime.  To statically configure your
outputs, you can use the "Monitor-<type>" options along with
additional monitor sections in your xorg.conf to create your screen
topology.  The example below puts the VGA output to the right of the
builtin laptop screen, both running at 1024x768.

.nf
.B "Section \*qMonitor\*q"
.BI "  Identifier \*qLaptop FooBar Internal Display\*q"
.BI "  Option \*qPosition\*q \*q0 0\*q"
.B "EndSection"

.B "Section \*qMonitor\*q"
.BI "  Identifier \*qSome Random CRT\*q"
.BI "  Option \*qPosition\*q \*q1024 0\*q"
.BI "  Option \*qRightOf\*q \*qLaptop FoodBar Internal Display\*q"
.B "EndSection"

.B "Section \*qDevice\*q"
.BI "  Driver \*qintel\*q"
.BI "  Option \*qmonitor-LVDS\*q \*qLaptop FooBar Internal Display\*q"
.BI "  Option \*qmonitor-VGA\*q \*qSome Random CRT\*q"
.B "EndSection"

.SH TEXTURED VIDEO ATTRIBUTES
The driver supports the following X11 Xv attributes for Textured Video.
You can use the "xvattr" tool to query/set those attributes at runtime.

.SS "XV_SYNC_TO_VBLANK"
XV_SYNC_TO_VBLANK is used to control whether textured adapter synchronizes 
the screen update to the vblank to eliminate tearing. It is a Boolean
attribute with values of 0 (never sync) or 1 (always sync). An historic
value of -1 (sync for large windows only) will now be interpreted as 1,
(since the current approach for sync is not costly even with small
video windows).

.SS "XV_BRIGHTNESS"
        
.SS "XV_CONTRAST"
        
.SH REPORTING BUGS

The xf86-video-intel driver is part of the X.Org and Freedesktop.org
umbrella projects.  Details on bug reporting can be found at
https://01.org/linuxgraphics/documentation/how-report-bugs.  Mailing
lists are also commonly used to report experiences and ask questions
about configuration and other topics.  See lists.freedesktop.org for
more information (the xorg@@lists.freedesktop.org mailing list is the
most appropriate place to ask X.Org and driver related questions).

.SH "SEE ALSO"
__xservername__(__appmansuffix__), __xconfigfile__(__filemansuffix__), Xserver(__appmansuffix__), X(__miscmansuffix__)
.SH AUTHORS
Authors include: Keith Whitwell, and also Jonathan Bian, Matthew J Sottek,
Jeff Hartmann, Mark Vojkovich, Alan Hourihane, H. J. Lu.  830M and 845G
support reworked for XFree86 4.3 by David Dawes and Keith Whitwell.  852GM,
855GM, and 865G support added by David Dawes and Keith Whitwell.  915G,
915GM, 945G, 945GM, 965G, 965Q and 946GZ support added by Alan Hourihane and
Keith Whitwell. Lid status support added by Alan Hourihane. Textured video
support for 915G and later chips, RandR 1.2 and hardware modesetting added
by Eric Anholt and Keith Packard. EXA and Render acceleration added by Wang
Zhenyu. TV out support added by Zou Nan Hai and Keith Packard. 965GM, G33,
Q33, and Q35 support added by Wang Zhenyu.
@


1.8
log
@Update to xf86-video-intel 2.99.909
Tested by jsg@@, kettenis@@ and myself on a wide range of intel cards.
@
text
@d28 5
a32 2
G33, Q33, Q35, G35, GM45, G45, Q45, G43, G41 chipsets, and Pineview-M in
Atom N400 series, Pineview-D in Atom D400/D500 series.
d127 5
d156 5
a160 3
compositing manager should be doing, so it is not advisable to enable both.
However, some compositing managers do cause tearing, and if the outputs are
rotated, there may will still be tearing without TearFree enabled.
d504 1
a504 1
http://www.intellinuxgraphics.org/how_to_report_bug.html.  Mailing
@


1.7
log
@Update to xf86-video-intel 2.20.19.

A recent kernel with kernel modesetting support is required.
Thanks to jsg@@ and kettenis@@ for their work.
@
text
@d132 1
a132 1
debuging use. Specify \*qoff\*q to disable all acceleration, or \*qblt\*q to
d135 31
a165 1
Default: use UXA (render acceleration)
d216 19
d240 1
a240 2
will likely occur.  Note that when enabled, this option can adversely affect
the framerate of applications that render frames at less than refresh rate.
d298 12
@


1.6
log
@example should conform to constraint on section identifiers.

ok matthieu@@
@
text
@d28 2
a29 1
G33, Q33, Q35, G35, GM45, G45, Q45, G43 and G41 chipsets.
d65 10
a85 35
.BI "Option \*qFramebufferCompression\*q \*q" boolean \*q
This option controls whether the framebuffer compression feature is enabled.
If possible, the front buffer will be allocated in a tiled format and compressed
periodically to save memory bandwidth and power.
This option is only available on mobile chipsets.
.IP
Default: enabled on supported configurations.
.TP
.BI "Option \*qTiling\*q \*q" boolean \*q
This option controls whether memory buffers are allocated in tiled mode.  In
most cases (especially for complex rendering), tiling dramatically improves
performance.
.IP
Default: enabled.
.TP
.BI "Option \*qSwapbuffersWait\*q \*q" boolean \*q
This option controls the behavior of glXSwapBuffers and glXCopySubBufferMESA
calls by GL applications.  If enabled, the calls will avoid tearing by making
sure the display scanline is outside of the area to be copied before the copy
occurs.  If disabled, no scanline synchronization is performed, meaning tearing
will likely occur.  Note that when enabled, this option can adversely affect
the framerate of applications that render frames at less than refresh rate.
.IP
Default: enabled.
.TP
.BI "Option \*qDRI\*q \*q" boolean \*q
Disable or enable DRI support.
.IP
Default: DRI is enabled for configurations where it is supported.

.PP
The following driver
.B Options
are supported for the i810 and i815 chipsets:
.TP
d119 18
d153 5
a157 3
.BI "Option \*qModeDebug\*q \*q" boolean \*q
Enable printing of additional debugging information about modesetting to
the server log.
d159 1
a159 1
Default: Disabled
a166 18
.BI "Option \*qForceEnablePipeA\*q \*q" boolean \*q
Force the driver to leave pipe A enabled.  May be necessary in configurations
where the BIOS accesses pipe registers during display hotswitch or lid close,
causing a crash.  If you find that your platform needs this option, please file
a bug (see REPORTING BUGS below) including the output of 'lspci -v' and 'lspci -vn'.
.TP
.BI "Option \*qLVDS24Bit\*q \*q" boolean \*q
Specify 24 bit pixel format (i.e. 8 bits per color) to be used for the
LVDS output.  Some newer LCD panels expect pixels to be formatted and
sent as 8 bits per color channel instead of the more common 6 bits per
color channel.  Set this option to true to enable the newer format.
Note that this concept is entirely different and independent from the
frame buffer color depth - which is still controlled in the usual way
within the X server.  This option instead selects the physical format
/ sequencing of the digital bits sent to the display.  Setting the
frame buffer color depth is really a matter of preference by the user,
while setting the pixel format here is a requirement of the connected
hardware.
a184 13
.BI "Option \*qShadow\*q \*q" boolean \*q
This option controls the use of GPU acceleration and placement of auxiliary
buffers in memory. Enabling the Shadow will disable all use of the GPU for
RENDER acceleration and force software-fallbacks for all but updating the
scan-out buffer. Hardware overlay is still supported so Xv will continue to
playback videos using the GPU, but GL will be forced to use software
rasterisation as well.  This is a last resort measure for systems with
crippling bugs, such as early 8xx chipsets. It is still hoped that we will
find a workaround to enable as much hardware acceleration on those
architectures as is possible, but until then, using a shadow buffer should
maintain system stability.
.IP
Default: Disabled
d194 12
a205 16
Leaving this unset implies the default value of false,
which is almost always going to be right choice.  If your
LVDS-connected display on the other hand is extremely washed out
(e.g. white on a lighter white), trying this option might clear the
problem.
.TP
.BI "Option \*qLVDSFixedMode\*q \*q" boolean \*q
Use a fixed set of timings for the LVDS output, independent of normal
xorg specified timings.
.IP
The default value if left unspecified is
true, which is what you want for a normal LVDS-connected LCD type of
panel.  If you are not sure about this, leave it at its default, which
allows the driver to automatically figure out the correct fixed panel
timings.  See further in the section about LVDS fixed timing for more
information.
d211 3
d222 9
d236 25
d266 1
a266 3
tool to control outputs on the command line.  Each output listed below may have
one or more properties associated with it (like a binary EDID block if one is
found).  Some outputs have unique properties which are described below.  See the "MULTIHEAD CONFIGURATIONS" section below for additional information.
d268 12
d286 37
a322 46
.PP
.B BACKLIGHT
- current backlight level (adjustable)
.TP 2
By adjusting the BACKLIGHT property, the brightness on the LVDS output can be adjusted.  In some cases, this property may be unavailable (for example if your platform uses an external microcontroller to control the backlight).

.PP
.B BACKLIGHT_CONTROL
- method used to control backlight
.TP 2
The driver will attempt to automatically detect the backlight control method for your platform.  If this fails however, you can select another method which may allow you to control your backlight.  Available methods include:
.PP
.B native
.TP 4
Intel chipsets include backlight control registers, which on some platforms may be wired to control the backlight directly.  This method uses those registers.
.PP
.B legacy
.TP 4
The legacy backlight control registers exist in PCI configuration space, and have fewer available backlight levels than the native registers.  However, some platforms are wired this way and so need to use this method.
.PP
.B combo
.TP 4
This method attempts to use the native registers where possible, resorting to the legacy, configuration space registers only to enable the backlight if needed.  On platforms that have both wired this can be a good choice as it allows the fine grained backlight control of the native interface.
.PP
.B kernel
.TP 4
On some system, the kernel may provide a backlight control driver.  In that case, using the kernel interfaces is preferable, as the same driver may respond to hotkey events or external APIs.

.PP
.B PANEL_FITTING
- control LCD panel fitting
.TP 2
By default, the driver will attempt to upscale resolutions smaller than the LCD's native size while preserving the aspect ratio.  Other modes are available however:
.PP
.B center
.TP 4
Simply center the image on-screen, without scaling.
.PP
.B full_aspect
.TP 4
The default mode.  Try to upscale the image to the screen size, while preserving aspect ratio.  May result in letterboxing or pillar-boxing with some resolutions.
.PP
.B full
.TP 4
Upscale the image to the native screen size without regard to aspect ratio.  In this mode, the full screen image may appear distorted in some resolutions.

d325 7
a331 11

.PP
.B BOTTOM, RIGHT, TOP, LEFT
- margins
.TP 2
Adjusting these properties allows you to control the placement of your TV output buffer on the screen. The options with the same name can also be set in xorg.conf with integer value.

.PP
.B BRIGHTNESS
- TV brightness, range 0-255
.TP 2
d333 2
a334 5

.PP
.B CONTRAST
- TV contrast, range 0-255
.TP 2
d336 2
a337 5

.PP
.B SATURATION
- TV saturation, range 0-255
.TP 2
d339 2
a340 5

.PP
.B HUE
- TV hue, range 0-255
.TP 2
d342 11
a352 12

.PP
.B TV_FORMAT
- output standard
.TP 2
This property allows you to control the output standard used on your TV output port.  You can select between NTSC-M, NTSC-443, NTSC-J, PAL-M, PAL-N, and PAL.

.PP
.B TV_Connector
- connector type
.TP 2
This config option should be added to xorg.conf TV monitor's section, it allows you to force the TV output connector type, which bypass load detect and TV will always be taken as connected. You can select between S-Video, Composite and Component.
d362 6
a367 5
.PP
.B BROADCAST_RGB
- method used to set RGB color range(full range 0-255, not full range 16-235)
.TP 2
Adjusting this propertie allows you to set RGB color range on each channel in order to match HDTV requirment(default 0 for full range). Setting 1 means RGB color range is 16-235, 0 means RGB color range is 0-255 on each channel.
a370 1

a376 78
.SH HARDWARE LVDS FIXED TIMINGS AND SCALING

Following here is a discussion that should shed some light on the
nature and reasoning behind the LVDSFixedMode option.

Unlike a CRT display, an LCD has a "native" resolution corresponding
to the actual pixel geometry.  A graphics controller under all normal
circumstances should always output that resolution (and timings) to
the display.  Anything else and the image might not fill the display,
it might not be centered, or it might have information missing - any
manner of strange effects can happen if an LCD panel is not fed with
the expected resolution and timings.

However there are cases where one might want to run an LCD panel at an
effective resolution other than the native one.  And for this reason,
GPUs which drive LCD panels typically include a hardware scaler to
match the user-configured frame buffer size to the actual size of the
panel.  Thus when one "sets" his/her 1280x1024 panel to only 1024x768,
the GPU happily configures a 1024x768 frame buffer, but it scans the
buffer out in such a way that the image is scaled to 1280x1024 and in
fact sends 1280x1024 to the panel.  This is normally invisible to the
user; when a "fuzzy" LCD image is seen, scaling like this is why this
happens.

In order to make this magic work, this driver logically has to be
configured with two sets of monitor timings - the set specified (or
otherwise determined) as the normal xorg "mode", and the "fixed"
timings that are actually sent to the monitor.  But with xorg, it's
only possible to specify the first user-driven set, and not the second
fixed set.  So how does the driver figure out the correct fixed panel
timings?  Normally it will attempt to detect the fixed timings, and it
uses a number of strategies to figure this out.  First it attempts to
read EDID data from whatever is connected to the LVDS port.  Failing
that, it will check if the LVDS output is already configured (perhaps
previously by the video BIOS) and will adopt those settings if found.
Failing that, it will scan the video BIOS ROM, looking for an embedded
mode table from which it can infer the proper timings.  If even that
fails, then the driver gives up, prints the message "Couldn't detect
panel mode.  Disabling panel" to the X server log, and shuts down the
LVDS output.

Under most circumstances, the detection scheme works.  However there
are cases when it can go awry.  For example, if you have a panel
without EDID support and it isn't integral to the motherboard
(i.e. not a laptop), then odds are the driver is either not going to
find something suitable to use or it is going to find something
flat-out wrong, leaving a messed up display.  Remember that this is
about the fixed timings being discussed here and not the
user-specified timings which can always be set in xorg.conf in the
worst case.  So when this process goes awry there seems to be little
recourse.  This sort of scenario can happen in some embedded
applications.

The LVDSFixedMode option is present to deal with this.  This option
normally enables the above-described detection strategy.  And since it
defaults to true, this is in fact what normally happens.  However if
the detection fails to do the right thing, the LVDSFixedMode option
can instead be set to false, which disables all the magic.  With
LVDSFixedMode set to false, the detection steps are skipped and the
driver proceeds without a specified fixed mode timing.  This then
causes the hardware scaler to be disabled, and the actual timings then
used fall back to those normally configured via the usual xorg
mechanisms.

Having LVDSFixedMode set to false means that whatever is used for the
monitor's mode (e.g. a modeline setting) is precisely what is sent to
the device connected to the LVDS port.  This also means that the user
now has to determine the correct mode to use - but it's really no
different than the work for correctly configuring an old-school CRT
anyway, and the alternative if detection fails will be a useless
display.

In short, leave LVDSFixedMode alone (thus set to true) and normal
fixed mode detection will take place, which in most cases is exactly
what is needed.  Set LVDSFixedMode to false and then the user has full
control over the resolution and timings sent to the LVDS-connected
device, through the usual means in xorg.

a408 1
.BI "  Identifier \*qIntel Multihead\*q"
@


1.5
log
@Update the intel driver to a more recent version based on more recent
upsteam code.

Backporting keeping UMS changes by me, some bugfixes from kettenis@@.

Has been in snapshots for a while, committed on request so we can be
sure what people are running. This is a prerequesite for sandybridge
support but has those chipsets disabled for now until the correct code
has been added.
@
text
@d502 1
@


1.4
log
@Update the intel driver to 2.9.1 plus backports.

2.9.1 is the last version of the intel DDX that supports UMS (User
modesetting), with 2.10 onwards being purely KMS only. As such, this
driver contains backports of almost every correctness or performance
related fix to the rendering layer in later intel drivers. This driver
*REQUIRES* a GEM enabled kernel. it claims to support non-gem mode but
this is essentially unmaintained and due to the way the abstraciton
works is slow, if it works at all (it often does not). You have been
warned.

tested by many many people on tech over the last few weeks.
@
text
@d207 14
d245 12
@


1.3
log
@update to xf86-video-intel 2.7.1. Tested by many.
@
text
@a58 5
.BI "Option \*qNoAccel\*q \*q" boolean \*q
Disable or enable acceleration.
.IP
Default: acceleration is enabled.
.TP
d90 10
d132 5
a158 10
.BI "Option \*qAccelMethod\*q \*q" string \*q
Choose acceleration architecture, either "XAA", "EXA", or "UXA".  XAA is the old
XFree86 based acceleration architecture.  EXA is a simpler
acceleration architecture designed to better accelerate the X Render extension.
UXA is a newer acceleration architecture built from the EXA acceleration
code but taking advantage of kernel memory management to provide simpler,
faster code.
.IP
Default: "UXA" if kernel-modesetting is available, "EXA" otherwise.
.TP
d189 25
@


1.2
log
@Update to xf86-video-intel 2.3.1. Tested by many.
@
text
@d28 1
a28 1
G33, Q33, and Q35 chipsets.
d36 4
a39 4
memory architecture and uses system memory for video ram.  For the i810 and
i815 family of chipset, operating system support for allocating system
memory for video use is required in order to use this driver.  For the 830M
and later, this is required in order for the driver to use more video ram
d44 7
a50 4
By default, the i810 will use 8 megabytes
of system memory for graphics.  For the 830M and later, the driver will
automatically size its memory allocation according to the features it will
support.  The
d60 3
a62 6
Disable or enable acceleration.  Default: acceleration is enabled.
.TP
.BI "Option \*qSWCursor\*q \*q" boolean \*q
Disable or enable software cursor.  Default: software cursor is disable
and a hardware cursor is used for configurations where the hardware cursor
is available.
d66 1
d74 1
d85 1
d90 3
a92 1
many cases (especially for complex rendering), tiling can improve performance.
d97 1
d107 1
d112 1
d118 1
d120 7
d139 9
a147 45
.BI "Option \*qXVideo\*q \*q" boolean \*q
Disable or enable XVideo support.
Default: XVideo is enabled for configurations where it is supported.
.TP
.BI "Option \*qLegacy3D\*q \*q" boolean \*q
Enable support for the legacy i915_dri.so 3D driver.
This will, among other things, make the 2D driver tell libGL to
load the 3D driver i915_dri.so instead of the newer i915tex_dri.so.
This option is only used for chipsets in the range i830-i945.
Default for i830-i945 series: Enabled.
Default for i810: The option is not used.
Default for i965: The option is always true.
.TP
.BI "Option \*qAperTexSize\*q \*q" integer \*q
Give the size in kiB of the AGP aperture area that is reserved for the
DRM memory manager present in i915 drm from version 1.7.0 and upwards,
and that is used with the 3D driver in Mesa from version 6.5.2 and
upwards. If the size is set too high to make room for pre-allocated
VideoRam, the driver will try to reduce it automatically. If you use only
older Mesa or DRM versions, you may set this value to zero, and
activate the legacy texture pool (see 
.B "Option \*qLegacy3D\*q"
). If you run 3D programs with large texture memory requirements, you might
gain some performance by increasing this value.
Default: 32768.
.TP
.BI "Option \*qPageFlip\*q \*q" boolean \*q
Enable support for page flipping. This should improve 3D performance at the
potential cost of worse performance with mixed 2D/3D. Also note that this gives
no benefit without corresponding support in the Mesa 3D driver and may not give
the full benefit without triple buffering (see
.B "Option \*qTripleBuffer\*q"
).
Default for i810: The option is not used.
Default for i830 and above: Disabled (This option is currently unstable).
.TP
.BI "Option \*qTripleBuffer\*q \*q" boolean \*q
Enable support for triple buffering. This should improve 3D performance at the
potential cost of worse performance with mixed 2D/3D. Also note that this gives
no benefit without corresponding support in the Mesa 3D driver and may not give
any benefit without page flipping either (see
.B "Option \*qPageFlip\*q"
).
Default for i810: The option is not used.
Default for i830 and above: Disabled.
d150 2
a151 2
Choose acceleration architecture, either "XAA" or "EXA".  XAA is the old
XFree86 based acceleration architecture.  EXA is a newer and simpler
d153 5
a157 1
Default: "EXA".
d162 8
d175 1
a175 2
a bug against xf86-video-intel at http://bugs.freedesktop.org which includes
the output of 'lspci -v' and 'lspci -vn'.
d188 3
a190 1
hardware.  Leaving this unset implies the default value of false,
d198 3
a200 1
xorg specified timings.  The default value if left unspecified is
d210 1
d219 1
a219 1
found).  Some outputs have unique properties which are described below.
d280 25
a304 1
Adjusting these properties allows you to control the placement of your TV output buffer on the screen.
d312 6
d324 8
d419 63
d483 1
a483 1
__xservername__(__appmansuffix__), __xconfigfile__(__filemansuffix__), xorgconfig(__appmansuffix__), Xserver(__appmansuffix__), X(__miscmansuffix__)
@


1.1
log
@Initial revision
@
text
@a177 4

.PP
The 830M and newer driver supports the following outputs through RandR 1.2:
.PP
d179 6
a184 2
.BI "VGA"
Analog VGA output
d186 16
a201 4
.BI "LVDS"
Laptop panel.  Properties:
  BACKLIGHT - set backlight level
  BACKLIGHT_CONTROL - set backlight level control method (i.e. use kernel interfaces, native LVDS power register, legacy register, or combination)
d203 8
a210 2
.BI "TV"
Integrated TV output
d212 81
a292 1
.BI "TMDS-1"
d294 2
a295 2
.TP
.BI "TMDS-2"
d297 1
d300 1
d303 81
a383 1
sections with these outputs for configuration.
@


1.1.1.1
log
@xf86-video-intel 2.2.0
@
text
@@


1.1.1.2
log
@Import intel driver v 2.2.0.90. tested by many, including krw@@ kettenis@@,
jakemsr@@, landry@@, beck@@ and oga@@. Thanks.
@
text
@a177 21
.TP
.BI "Option \*qForceEnablePipeA\*q \*q" boolean \*q
Force the driver to leave pipe A enabled.  May be necessary in configurations
where the BIOS accesses pipe registers during display hotswitch or lid close,
causing a crash.  If you find that your platform needs this option, please file
a bug against xf86-video-intel at http://bugs.freedesktop.org which includes
the output of 'lspci -v' and 'lspci -vn'.

.SH OUTPUT CONFIGURATION
On 830M and better chipsets, the driver supports runtime configuration of
detected outputs.  You can use the
.B xrandr
tool to control outputs on the command line.  Each output listed below may have
one or more properties associated with it (like a binary EDID block if one is
found).  Some outputs have unique properties which are described below.

.SS "VGA"
VGA output port (typically exposed via an HD15 connector).

.SS "LVDS"
Low Voltage Differential Signalling output (typically a laptop LCD panel).  Available properties:
d180 1
a180 5
.B BACKLIGHT
- current backlight level (adjustable)
.TP 2
By adjusting the BACKLIGHT property, the brightness on the LVDS output can be adjusted.  In some cases, this property may be unavailable (for example if your platform uses an external microcontroller to control the backlight).

d182 13
a194 37
.B BACKLIGHT_CONTROL
- method used to control backlight
.TP 2
The driver will attempt to automatically detect the backlight control method for your platform.  If this fails however, you can select another method which may allow you to control your backlight.  Available methods include:
.PP
.B NATIVE
.TP 4
Intel chipsets include backlight control registers, which on some platforms may be wired to control the backlight directly.  This method uses those registers.
.PP
.B LEGACY
.TP 4
The legacy backlight control registers exist in PCI configuration space, and have fewer available backlight levels than the native registers.  However, some platforms are wired this way and so need to use this method.
.PP
.B COMBO
.TP 4
This method attempts to use the native registers where possible, resorting to the legacy, configuration space registers only to enable the backlight if needed.  On platforms that have both wired this can be a good choice as it allows the fine grained backlight control of the native interface.
.PP
.B KERNEL
.TP 4
On some system, the kernel may provide a backlight control driver.  In that case, using the kernel interfaces is preferable, as the same driver may respond to hotkey events or external APIs.

.SS "TV"
Integrated TV output.  Available properties include:

.PP
.B BOTTOM, RIGHT, TOP, LEFT
- margins
.TP 2
Adjusting these properties allows you to control the placement of your TV output buffer on the screen.

.PP
.B TV_FORMAT
- output standard
.TP 2
This property allows you to control the output standard used on your TV output port.  You can select between NTSC-M, NTSC-443, NTSC-J, PAL-M, PAL-N, and PAL.

.SS "TMDS-1"
d196 2
a197 2

.SS "TMDS-2"
a198 1

a200 1

d203 1
a203 3
sections with these outputs for configuration.  Associating Monitor sections
with each output can be helpful if you need to ignore a specific output, for
example, or statically configure an extended desktop monitor layout.
@

