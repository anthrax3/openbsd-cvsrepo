head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.20
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.18
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.16
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.14
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.12
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.10
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.01.22.09.44.15;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	eqnV0ShUiED6Tid5;

1.6
date	2011.11.05.14.01.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.59.45;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.02.21.03.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.22.14.38.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.13.54.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.23.14.16.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xf86-input-joystick 1.6.3
@
text
@/*
 * Copyright 2007-2008 by Sascha Hlusiak. <saschahlusiak@@freedesktop.org>     
 *                                                                            
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is  hereby granted without fee, provided that
 * the  above copyright   notice appear  in   all  copies and  that both  that
 * copyright  notice   and   this  permission   notice  appear  in  supporting
 * documentation, and that   the  name of  Sascha   Hlusiak  not  be  used  in
 * advertising or publicity pertaining to distribution of the software without
 * specific,  written      prior  permission.     Sascha   Hlusiak   makes  no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.                   
 *                                                                            
 * SASCHA  HLUSIAK  DISCLAIMS ALL   WARRANTIES WITH REGARD  TO  THIS SOFTWARE,
 * INCLUDING ALL IMPLIED   WARRANTIES OF MERCHANTABILITY  AND   FITNESS, IN NO
 * EVENT  SHALL SASCHA  HLUSIAK  BE   LIABLE   FOR ANY  SPECIAL, INDIRECT   OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA  OR PROFITS, WHETHER  IN  AN ACTION OF  CONTRACT,  NEGLIGENCE OR OTHER
 * TORTIOUS  ACTION, ARISING    OUT OF OR   IN  CONNECTION  WITH THE USE    OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifndef __JSTK_H_INCLUDED__
#define __JSTK_H_INCLUDED__

#include <xf86Xinput.h>
#include <X11/extensions/XIproto.h>
#include "joystick-properties.h" /* definitions */


#define MAXBUTTONS 32
#define MAXAXES 32
#define MAXKEYSPERBUTTON 4
#define MIN_KEYCODE 8
#define BUTTONMAP_SIZE 32


/******************************************************************************
 * debugging macro
 *****************************************************************************/
#ifdef DBG
    #undef DBG
#endif

#if DEBUG
    extern char debug_level;
    #define DBG(lvl, f) {if ((lvl) <= debug_level) f;}
#else
    #define DBG(lvl, f)
#endif


#ifndef XI_JOYSTICK
#define XI_JOYSTICK "JOYSTICK"
#endif

#ifndef XI86_SERVER_FD
#define XI86_SERVER_FD 0x20
#endif

typedef enum _JOYSTICKEVENT {
    EVENT_NONE=0,
    EVENT_BUTTON,
    EVENT_AXIS
} JOYSTICKEVENT;

typedef struct _JoystickDevRec *JoystickDevPtr;

typedef int(*jstkOpenDeviceProc)(JoystickDevPtr joystick, Bool probe);
typedef void(*jstkCloseDeviceProc)(JoystickDevPtr joystick);
typedef int(*jstkReadDataProc)(JoystickDevPtr joystick,
                               JOYSTICKEVENT *event, int *number);

typedef unsigned char KEYSCANCODES [MAXKEYSPERBUTTON];

typedef struct _AXIS {
    JSTK_TYPE    type;
    JSTK_MAPPING mapping;
    int             value, oldvalue;
    int             valuator;
    int             deadzone;
    float           currentspeed; /* TYPE_ACCELERATED */
    float           previousposition; /* TYPE_ABSOLUTE */
    float           amplify;
    float           subpixel; /* Pending subpixel movement */

    KEYSCANCODES    keys_low, keys_high;  /* MAPPING_KEY */
    int             key_isdown;
    OsTimerPtr      timer;
    Bool            timerrunning;
} AXIS;

typedef struct _BUTTON {
    JSTK_MAPPING mapping;
    char            pressed;
    int             buttonnumber;    /* MAPPING_BUTTON */
    float           amplify;       /* MAPPING_X/Y/ZX/ZY, 
                                      MAPPING_SPEED_MULTIPLY */
    float           currentspeed;  /* MAPPING_X/Y/ZX/ZY */
    float           subpixel; /* Pending subpixel movement */
    KEYSCANCODES    keys;   /* MAPPING_KEY */
} BUTTON;

typedef struct _JoystickDevRec {
    int          fd;          /* Actual file descriptor */
    jstkOpenDeviceProc open_proc; /* Call for re-open backend */
    jstkCloseDeviceProc close_proc; /* Callback for closing the backend */
    jstkReadDataProc read_proc; /* Callback for reading data from the backend */
    void         *devicedata; /* Extra platform device dependend data */
    char         *device;     /* Name of the device */
    InputInfoPtr joystick_device; /* Back pointer to the joystick device */
    InputInfoPtr keyboard_device; /* Slave device for keyboard events */

    OsTimerPtr   timer;       /* Timer for axis movement */
    Bool         timerrunning;

    Bool         mouse_enabled, keys_enabled;
    float        amplify;     /* Global amplifier of axis movement */

    int          repeat_delay, repeat_interval; /* Key autorepeat */

    CARD8        num_buttons, num_axes; /* Detected number of buttons/axes */

    XkbRMLVOSet rmlvo;
    AXIS axis[MAXAXES];           /* Configuration per axis */
    BUTTON button[MAXBUTTONS];    /* Configuration per button */
} JoystickDevRec;

void jstkCloseDevice(JoystickDevPtr priv);

#endif
@


1.6
log
@Update to xf86-input-joystick 1.6.0 for good now.
@
text
@d58 3
d112 1
d129 2
@


1.5
log
@Revert update to xf86-input-joystick 1.6.0.
This driver depends on xserver 1.10.
@
text
@a57 11
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 5
typedef struct {
    char *rules;
    char *model;
    char *layout;
    char *variant;
    char *options;
} XkbRMLVOSet;
#endif


d109 1
a109 1
    LocalDevicePtr keyboard_device; /* Slave device for keyboard events */
@


1.4
log
@Update to xf86-input-joystick 1.6.0
@
text
@d58 11
d120 1
a120 1
    InputInfoPtr keyboard_device; /* Slave device for keyboard events */
@


1.3
log
@Update to xf86-input-joystick 1.5.0
@
text
@a57 11
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) < 5
typedef struct {
    char *rules;
    char *model;
    char *layout;
    char *variant;
    char *options;
} XkbRMLVOSet;
#endif


d109 1
a109 1
    LocalDevicePtr keyboard_device; /* Slave device for keyboard events */
@


1.2
log
@update to xf86-input-joystick 1.4.1
@
text
@d58 11
d83 1
a83 1
typedef unsigned int KEYSCANCODES [MAXKEYSPERBUTTON];
d132 1
a132 5
    struct _KEYMAP {
        int size;
        KeySym map[256-MIN_KEYCODE];
    } keymap;

@


1.1
log
@xf86-input joystick 1.3.2
@
text
@d27 4
d36 1
d47 1
a47 1
    extern int debug_level;
d53 6
d67 1
a71 22

typedef enum _JOYSTICKTYPE{
    TYPE_NONE=0,      /* Axis value is not relevant */
    TYPE_BYVALUE,     /* Speed of cursor is relative to amplitude */
    TYPE_ACCELERATED, /* Speed is accelerated */
    TYPE_ABSOLUTE     /* The amplitude defines the cursor position */
} JOYSTICKTYPE;

typedef enum _JOYSTICKMAPPING{
    MAPPING_NONE=0,           /* Nothing */
    MAPPING_X,              /* X-Axis */
    MAPPING_Y,              /* Y-Axis */
    MAPPING_ZX,             /* Horizontal scrolling */
    MAPPING_ZY,             /* Vertical scrolling */
    MAPPING_BUTTON,         /* Mouse button */
    MAPPING_KEY,            /* Keyboard event */
    MAPPING_SPEED_MULTIPLY, /* Will amplify all axis movement */
    MAPPING_DISABLE,        /* Disable mouse and key events */
    MAPPING_DISABLE_MOUSE,  /* Disable only mouse events */
    MAPPING_DISABLE_KEYS    /* Disable only key events */
} JOYSTICKMAPPING;

d75 2
a76 2
    JOYSTICKTYPE    type;
    JOYSTICKMAPPING mapping;
d84 1
d86 3
d92 1
a92 1
    JOYSTICKMAPPING mapping;
d104 1
d109 1
d119 2
a120 5
    struct _BUTTONMAP {
        int size;
        CARD8 scrollbutton[4];     /* Logical button numbers for scrollwheel */
        CARD8 map[MAXBUTTONS+1];
    } buttonmap;
@

