head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.6
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.2
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2015.08.29.08.48.29;	author shadchin;	state Exp;
branches;
next	1.13;
commitid	4W0lev75KAkLAmy0;

1.13
date	2013.10.30.18.05.34;	author shadchin;	state Exp;
branches;
next	1.12;

1.12
date	2012.06.12.17.44.56;	author shadchin;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.12.17.12.50;	author shadchin;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.12.17.04.44;	author shadchin;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.28.23.49.59;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.19.13.12.49;	author shadchin;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.19.13.09.16;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.19.12.59.55;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.16.17.54.08;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.16.17.51.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.10.16.33.44;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.26.18.18.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.26.16.45.02;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Read multiple events at once.

Before:
Both drivers currently do one read(2) per event, but since we use a
"sync" event we have a least two of them for ws(4) but more commonly
3 for ws(4) and 4 for synaptics(4).

most of the code and ok mpi@@
@
text
@/*
 * Copyright Â© 2009 Matthieu Herrb <matthieu@@herrb.eu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <dev/wscons/wsconsio.h>

/* #undef DEBUG */
#define DEBUG
#undef DBG
#ifdef DEBUG
extern int ws_debug_level;
# define DBG(lvl, f) { if ((lvl) <= ws_debug_level) f;}
#else
# define DBG(lvl, f)
#endif

#define NAXES		2	/* X and Y axes only */
#define NBUTTONS	32	/* max theoretical buttons */
#define DFLTBUTTONS	3	/* default number of buttons */

#define WS_NOMAP	0

#define NWSEVENTS	16	/* size of buffer */

/* axis specific data for wheel */
typedef struct {
	int negative;
	int positive;
	int traveled_distance;
} WheelAxis, *WheelAxisPtr;

typedef struct {
	unsigned int buttons;
	int dx, dy, dz, dw;
	int ax, ay;
} wsHwState;

typedef struct WSDevice {
	char *devName;			/* device name */
	int type;			/* ws device type */
	unsigned int lastButtons;	/* last state of buttons */
	int old_ax, old_ay;
	int min_x, max_x, min_y, max_y;	/* coord space */
	int swap_axes;
	int raw;
	int inv_x, inv_y;
	int screen_no;
	WheelAxis Z;
	WheelAxis W;
	struct wsmouse_calibcoords coords; /* mirror of the kernel values */

	/* # of buttons and config-file specified button mapping */
	unsigned int buttons;
	unsigned char btnmap[NBUTTONS + 1];

	/* Middle mouse button emulation */
	struct {
		BOOL enabled;
		BOOL pending;		/* timer waiting? */
		int buttonstate;	/* phys. button state */
		int state;		/* state machine (see emumb.c) */
		Time expires;		/* time of expiry */
		Time timeout;
	} emulateMB;

	/* Mouse wheel emulation */
	struct {
		BOOL enabled;
		int button;
		int button_state;
		int inertia;
		WheelAxis X;
		WheelAxis Y;
		Time expires;		/* time of expiry */
		Time timeout;
	} emulateWheel;

	struct wscons_event	events[NWSEVENTS];
	size_t			events_count;
	size_t			events_pos;
} WSDeviceRec, *WSDevicePtr;

/* Middle mouse button emulation */
extern int wsmbEmuTimer(InputInfoPtr);
extern BOOL wsmbEmuFilterEvent(InputInfoPtr, int, BOOL);
extern void wsmbEmuWakeupHandler(pointer, int, pointer);
extern void wsmbEmuBlockHandler(pointer, struct timeval **, pointer);
extern void wsmbEmuPreInit(InputInfoPtr);
extern void wsmbEmuOn(InputInfoPtr);
extern void wsmbEmuFinalize(InputInfoPtr);
extern void wsmbEmuInitProperty(DeviceIntPtr);

/* Mouse wheel emulation */
extern void wsWheelEmuPreInit(InputInfoPtr);
extern BOOL wsWheelEmuFilterButton(InputInfoPtr, unsigned int, int);
extern BOOL wsWheelEmuFilterMotion(InputInfoPtr, int, int);
extern void wsWheelEmuInitProperty(DeviceIntPtr);

extern void wsWheelHandleButtonMap(InputInfoPtr, WheelAxisPtr, const char *,
    const char *);
extern void wsButtonClicks(InputInfoPtr, int, int);
@


1.13
log
@Fix jagged diagonal lines (xenocara part)

Make sure that you have a recent kernel.

ok matthieu@@. tested edd@@, Henri Kemppainen and Alf Schlichting.
@
text
@d35 2
d89 4
@


1.12
log
@fix indent
@
text
@a31 1
#define NUMEVENTS	16	/* max # of ws events to read at once */
d42 6
a57 1
	pointer buffer;
@


1.11
log
@Add support ButtonMapping

ok matthieu@@
@
text
@d38 3
a40 3
    int negative;
    int positive;
    int traveled_distance;
d44 3
a46 3
	char *devName;		/* device name */
	int type;		/* ws device type */
	unsigned int lastButtons; /* last state of buttons */
d48 1
a48 1
	int min_x, max_x, min_y, max_y; /* coord space */
@


1.10
log
@Fix some obvious constness-related compile warnings

ok matthieu@@
@
text
@a45 1
	unsigned int buttons;	/* # of buttons */
d58 4
d65 4
a68 4
		BOOL pending;     /* timer waiting? */
		int buttonstate; /* phys. button state */
		int state;       /* state machine (see emumb.c) */
		Time expires;     /* time of expiry */
@


1.9
log
@Adding wheel emulation, ported from evdev(4)

ok matthieu@@
@
text
@d98 2
a99 1
extern void wsWheelHandleButtonMap(InputInfoPtr, WheelAxisPtr, char *, char *);
@


1.8
log
@Replace WS_NOZMAP on WS_NOMAP.

ok matthieu@@
@
text
@d36 7
d48 1
d55 2
a56 2
	int negativeZ, positiveZ; /* mappings for Z axis */
	int negativeW, positiveW; /* mappings for W axis */
d58 1
d68 12
d82 1
d91 9
@


1.7
log
@Simplify middle button emulation code.

ok matthieu@@
@
text
@d29 6
a34 4
#define NAXES 2			/* X and Y axes only */
#define NBUTTONS 32		/* max theoretical buttons */
#define DFLTBUTTONS 3		/* default number of buttons */
#define NUMEVENTS 16		/* max # of ws events to read at once */
@


1.6
log
@ws_debug_level used only if defined DEBUG.

ok matthieu@@
@
text
@a65 1
extern void wsmbEmuEnable(InputInfoPtr, BOOL);
@


1.5
log
@Some cleanup:
* remove trailing whitespace
* remove odd pInfo->private = priv
* remove wsChangeControl (not used)
* remove useless actions in wsControlProc

ok matthieu@@
@
text
@a18 1

d22 1
a23 1
#ifdef DEBUG
@


1.4
log
@Unifdef support for xinput ABI up to 10.
@
text
@a44 1
	int num, den, threshold; /* relative accel params */
@


1.3
log
@Remove unused screen_width and screen_height fields from
driver private data.
@
text
@a18 3
#if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 3
#define HAVE_PROPERTIES 1
#endif
@


1.2
log
@white space
@
text
@a46 1
	int screen_width, screen_height;
@


1.1
log
@Missed this file when adding middle button emulation.
@
text
@d62 1
a62 1
	} emulateMB; 
@

