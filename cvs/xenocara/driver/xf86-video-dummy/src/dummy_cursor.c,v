head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v0_2_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.09.09.21.31.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.03.11;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.03.11;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Upate to xf86-video-dummy 0.3.6
@
text
@#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

/* All drivers should typically include these */
#include "xf86.h"
#include "xf86_OSproc.h"

#include "xf86Cursor.h"
#include "cursorstr.h"
/* Driver specific headers */
#include "dummy.h"

static void
dummyShowCursor(ScrnInfoPtr pScrn)
{
    DUMMYPtr dPtr = DUMMYPTR(pScrn);

    /* turn cursor on */
    dPtr->DummyHWCursorShown = TRUE;    
}

static void
dummyHideCursor(ScrnInfoPtr pScrn)
{
    DUMMYPtr dPtr = DUMMYPTR(pScrn);

    /*
     * turn cursor off 
     *
     */
    dPtr->DummyHWCursorShown = FALSE;
}

#define MAX_CURS 64

static void
dummySetCursorPosition(ScrnInfoPtr pScrn, int x, int y)
{
    DUMMYPtr dPtr = DUMMYPTR(pScrn);

/*     unsigned char *_dest = ((unsigned char *)dPtr->FBBase + */
/* 			    pScrn->videoRam * 1024 - 1024); */
    dPtr->cursorX = x;
    dPtr->cursorY = y;
}

static void
dummySetCursorColors(ScrnInfoPtr pScrn, int bg, int fg)
{
    DUMMYPtr dPtr = DUMMYPTR(pScrn);
    
    dPtr->cursorFG = fg;
    dPtr->cursorBG = bg;
}

static void
dummyLoadCursorImage(ScrnInfoPtr pScrn, unsigned char *src)
{
}

static Bool
dummyUseHWCursor(ScreenPtr pScr, CursorPtr pCurs)
{
    DUMMYPtr dPtr = DUMMYPTR(xf86ScreenToScrn(pScr));
    return(!dPtr->swCursor);
}

#if 0
static unsigned char*
dummyRealizeCursor(xf86CursorInfoPtr infoPtr, CursorPtr pCurs)
{
    return NULL;
}
#endif

Bool
DUMMYCursorInit(ScreenPtr pScreen)
{
    DUMMYPtr dPtr = DUMMYPTR(xf86ScreenToScrn(pScreen));

    xf86CursorInfoPtr infoPtr;
    infoPtr = xf86CreateCursorInfoRec();
    if(!infoPtr) return FALSE;

    dPtr->CursorInfo = infoPtr;

    infoPtr->MaxHeight = 64;
    infoPtr->MaxWidth = 64;
    infoPtr->Flags = HARDWARE_CURSOR_TRUECOLOR_AT_8BPP;

    infoPtr->SetCursorColors = dummySetCursorColors;
    infoPtr->SetCursorPosition = dummySetCursorPosition;
    infoPtr->LoadCursorImage = dummyLoadCursorImage;
    infoPtr->HideCursor = dummyHideCursor;
    infoPtr->ShowCursor = dummyShowCursor;
    infoPtr->UseHWCursor = dummyUseHWCursor;
/*     infoPtr->RealizeCursor = dummyRealizeCursor; */
    
    return(xf86InitCursor(pScreen, infoPtr));
}



@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
    DUMMYPtr dPtr = DUMMYPTR(xf86Screens[pScr->myNum]);
d80 1
a80 1
    DUMMYPtr dPtr = DUMMYPTR(xf86Screens[pScreen->myNum]);
@


1.1.1.1
log
@Importing xf86-video-dummy 0.2.0
@
text
@@
