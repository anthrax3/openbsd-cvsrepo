head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.18
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.16
	OPENBSD_5_0:1.1.1.1.0.14
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.8
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.4
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	v2_10_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.12.16.23.04.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to xf86-video-geode 2.11.14
@
text
@/*
 * Copyright (c) 2007 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Neither the name of the Advanced Micro Devices, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 */

/* We want to share as much code between GX and LX as we possibly can for obvious reasons */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <string.h>             /* memcmp() */
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/ioctl.h>

#include "xf86.h"
#include "geode.h"

#define move0(d,s,n) \
  __asm__ __volatile__( \
  "   rep; movsl\n" \
  : "=&c" (d0), "=&S" (d1), "=&D" (d2) \
  : "0" (n), "1" (s), "2" (d) \
  : "memory")

#define move1(d,s,n) \
  __asm__ __volatile__( \
  "   rep; movsl\n" \
  "   movsb\n" \
  : "=&c" (d0), "=&S" (d1), "=&D" (d2) \
  : "0" (n), "1" (s), "2" (d) \
  : "memory")

#define move2(d,s,n) \
  __asm__ __volatile__( \
  "   rep; movsl\n" \
  "   movsw\n" \
  : "=&c" (d0), "=&S" (d1), "=&D" (d2) \
  : "0" (n), "1" (s), "2" (d) \
  : "memory")

#define move3(d,s,n) \
  __asm__ __volatile__( \
  "   rep; movsl\n" \
  "   movsw\n" \
  "   movsb\n" \
  : "=&c" (d0), "=&S" (d1), "=&D" (d2) \
  : "0" (n), "1" (s), "2" (d) \
  : "memory")

void
geode_memory_to_screen_blt(unsigned long src, unsigned long dst,
                           unsigned long sp, unsigned long dp, long w, long h,
                           int bpp)
{
    int d0, d1, d2;
    int n = w * (bpp >> 3);
    int m = n >> 2;

    switch (n & 3) {
    case 0:
        while (--h >= 0) {
            move0(dst, src, m);
            src += sp;
            dst += dp;
        }
        break;
    case 1:
        while (--h >= 0) {
            move1(dst, src, m);
            src += sp;
            dst += dp;
        }
        break;
    case 2:
        while (--h >= 0) {
            move2(dst, src, m);
            src += sp;
            dst += dp;
        }
        break;
    case 3:
        while (--h >= 0) {
            move3(dst, src, m);
            src += sp;
            dst += dp;
        }
        break;
    }
}

/* I borrowed this function from the i830 driver - its much better
   then what we had before
*/

int
GeodeGetRefreshRate(DisplayModePtr pMode)
{
    if (pMode->VRefresh)
        return (int) (pMode->VRefresh + 0.5);

    return (int) (pMode->Clock * 1000.0 / pMode->HTotal / pMode->VTotal + 0.5);
}

/* This is used by both GX and LX.  It could be accelerated for LX, probably, but
   that would involve a two pass blt, the first to copy the data, and the second
   to copy the grey (using a pattern).  That seems like a bit of work for a
   very underused format - so we'll just use the slow version.
*/

void
GeodeCopyGreyscale(unsigned char *src, unsigned char *dst,
                   int dstPitch, int srcPitch, int h, int w)
{
    int i;
    unsigned char *src2 = src;
    unsigned char *dst2 = dst;
    unsigned char *dst3;
    unsigned char *src3;

    dstPitch <<= 1;

    while (h--) {
        dst3 = dst2;
        src3 = src2;
        for (i = 0; i < w; i++) {
            *dst3++ = *src3++;  /* Copy Y data */
            *dst3++ = 0x80;     /* Fill UV with 0x80 - greyscale */
        }

        src3 = src2;
        for (i = 0; i < w; i++) {
            *dst3++ = *src3++;  /* Copy Y data */
            *dst3++ = 0x80;     /* Fill UV with 0x80 - greyscale */
        }

        dst2 += dstPitch;
        src2 += srcPitch;
    }
}

#if defined(linux)

#include <linux/fb.h>

int
GeodeGetSizeFromFB(unsigned int *size)
{
    struct fb_fix_screeninfo fix;
    int ret;
    int fd = open("/dev/fb0", O_RDONLY);

    if (fd == -1)
        return -1;

    ret = ioctl(fd, FBIOGET_FSCREENINFO, &fix);
    close(fd);

    if (!ret) {
        if (!memcmp(fix.id, "Geode", 5)) {
            *size = fix.smem_len;
            return 0;
        }
    }

    return -1;
}

#else

int
GeodeGetSizeFromFB(unsigned int *size)
{
    return -1;
}

#endif
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
#include <string.h>		       /* memcmp() */
d77 2
a78 1
    unsigned long sp, unsigned long dp, long w, long h, int bpp)
d86 6
a91 6
	while (--h >= 0) {
	    move0(dst, src, m);
	    src += sp;
	    dst += dp;
	}
	break;
d93 6
a98 6
	while (--h >= 0) {
	    move1(dst, src, m);
	    src += sp;
	    dst += dp;
	}
	break;
d100 6
a105 6
	while (--h >= 0) {
	    move2(dst, src, m);
	    src += sp;
	    dst += dp;
	}
	break;
d107 6
a112 6
	while (--h >= 0) {
	    move3(dst, src, m);
	    src += sp;
	    dst += dp;
	}
	break;
d124 1
a124 1
	return (int)(pMode->VRefresh + 0.5);
d126 1
a126 1
    return (int)(pMode->Clock * 1000.0 / pMode->HTotal / pMode->VTotal + 0.5);
d137 1
a137 1
    int dstPitch, int srcPitch, int h, int w)
d148 12
a159 12
	dst3 = dst2;
	src3 = src2;
	for (i = 0; i < w; i++) {
	    *dst3++ = *src3++;	       /* Copy Y data */
	    *dst3++ = 0x80;	       /* Fill UV with 0x80 - greyscale */
	}

	src3 = src2;
	for (i = 0; i < w; i++) {
	    *dst3++ = *src3++;	       /* Copy Y data */
	    *dst3++ = 0x80;	       /* Fill UV with 0x80 - greyscale */
	}
d161 2
a162 2
	dst2 += dstPitch;
	src2 += srcPitch;
d178 1
a178 1
	return -1;
d184 4
a187 4
	if (!memcmp(fix.id, "Geode", 5)) {
	    *size = fix.smem_len;
	    return 0;
	}
@


1.1.1.1
log
@Import the xf86-video-geode driver for the AMD Geode LX graphics processor.

with and ok matthieu
@
text
@@
