head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	OPENBSD_5_0:1.4.0.14
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	v2_10_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.01.02.16.35.51;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	gIvRZM87nqRE4oQw;

1.7
date	2014.09.24.06.36.07;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	JI4cIZNJlKMPR2TX;

1.6
date	2012.12.16.23.04.17;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.20.21.43.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.18.06.29.41;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.15.02.24.51;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.14.22.26.13;	author mbalmer;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xf86-video-geode 2.11.19. tested on Geode LX (Alix 3C3).
@
text
@/*
 * Copyright (c) 2008 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Neither the name of the Advanced Micro Devices, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <errno.h>

#ifdef __OpenBSD__
#include <sys/ioctl.h>
#include <machine/amdmsr.h>
#endif

#ifdef __FreeBSD__
#include <sys/ioctl.h>
#include <sys/cpuctl.h>
#endif

#include "os.h"
#include "geode.h"

#ifdef __OpenBSD__
#define _PATH_MSRDEV	"/dev/amdmsr"
#define X_PRIVSEP
#elif defined __FreeBSD__
#define _PATH_MSRDEV	"/dev/cpuctl0"
#else
#define _PATH_MSRDEV	"/dev/cpu/0/msr"
#endif

static int
_msr_open(void)
{
    static int msrfd = 0;

    if (msrfd == 0) {
#ifdef X_PRIVSEP
        msrfd = priv_open_device(_PATH_MSRDEV);
#else
        msrfd = open(_PATH_MSRDEV, O_RDWR);
#endif
        if (msrfd == -1)
            FatalError("Unable to open %s: %s\n", _PATH_MSRDEV,
                strerror(errno));
    }

    return msrfd;
}

int
GeodeReadMSR(unsigned long addr, unsigned long *lo, unsigned long *hi)
{
#ifdef __OpenBSD__
    struct amdmsr_req req;
    int fd = _msr_open();

    req.addr = addr;

    if (ioctl(fd, RDMSR, &req) == -1)
	FatalError("Unable to read MSR at address %0x06x: %s\n", addr,
	    strerror(errno));

    *hi = req.val >> 32;
    *lo = req.val & 0xffffffff;
#elif defined __FreeBSD__
    cpuctl_msr_args_t args;
    int fd = _msr_open();

    args.msr = addr;

    if (ioctl(fd, CPUCTL_RDMSR, &args) == -1)
	FatalError("Unable to read MSR at address %0x06x: %s\n", addr,
	    strerror(errno));

    *hi = args.data >> 32;
    *lo = args.data & 0xffffffff;
#else
    unsigned int data[2];
    int fd = _msr_open();
    int ret;

    if (fd == -1)
        return -1;

    ret = lseek(fd, (off_t) addr, SEEK_SET);

    if (ret == -1)
        return -1;

    ret = read(fd, (void *) data, sizeof(data));

    if (ret != 8)
        return -1;

    *hi = data[1];
    *lo = data[0];
#endif
    return 0;
}

int
GeodeWriteMSR(unsigned long addr, unsigned long lo, unsigned long hi)
{
#ifdef __OpenBSD__
    struct amdmsr_req req;
    int fd = _msr_open();

    req.addr = addr;
    req.val = (u_int64_t) hi << 32 | (u_int64_t)lo;

    if (ioctl(fd, WRMSR, &req) == -1)
        FatalError("Unable to write MSR at address 0x%06x: %s\n", addr,
            strerror(errno));
#elif defined __FreeBSD__
    cpuctl_msr_args_t args;
    int fd = _msr_open();

    args.msr = addr;
    args.data = (u_int64_t) hi << 32 | (u_int64_t)lo;

    if (ioctl(fd, CPUCTL_WRMSR, &args) == -1)
        FatalError("Unable to write MSR at address 0x%06x: %s\n", addr,
            strerror(errno));
#else
    unsigned int data[2];
    int fd = _msr_open();

    if (fd == -1)
        return -1;

    if (lseek(fd, (off_t) addr, SEEK_SET) == -1)
        return -1;

    data[0] = lo;
    data[1] = hi;

    if (write(fd, (void *) data, 8) != 8)
        return -1;
#endif
    return 0;
}
@


1.7
log
@Reduce diffs with upstreams. No functional change.
@
text
@d42 5
d53 2
d93 12
d140 10
@


1.6
log
@Update to xf86-video-geode 2.11.14
@
text
@a0 9
#define _LARGEFILE64_SOURCE

#include <sys/types.h>
#include <sys/ioctl.h>
#ifdef __OpenBSD__
#include <machine/amdmsr.h>
#endif

#include <errno.h>
d33 8
a75 1
#endif
a77 1
#ifdef __OpenBSD__
a114 1
#endif
a116 1
#ifdef __OpenBSD__
@


1.5
log
@Update to xf86-video-geode 2.11.13
@
text
@d10 26
d60 1
a60 1
	msrfd = priv_open_device(_PATH_MSRDEV);
d62 1
a62 1
	msrfd = open(_PATH_MSRDEV, O_RDWR);
d64 3
a66 3
	if (msrfd == -1)
	    FatalError("Unable to open %s: %s\n", _PATH_MSRDEV,
		strerror(errno));
d95 1
a95 1
	return -1;
d100 1
a100 1
	return -1;
d102 1
a102 1
    ret = read(fd, (void *)data, sizeof(data));
d105 1
a105 1
	return -1;
d123 1
a123 1
    req.val = (u_int64_t)hi << 32 | (u_int64_t)lo;
d126 2
a127 2
	FatalError("Unable to write MSR at address 0x%06x: %s\n", addr,
	    strerror(errno));
d133 1
a133 1
	return -1;
d136 1
a136 1
	return -1;
d141 2
a142 2
    if (write(fd, (void *)data, 8) != 8)
	return -1;
@


1.4
log
@Call FatalError() instead of ErrorF() in case the amdmsr(4) is not
available or an ioctl returns an error.  This properly terminates and
the X server and restores the text console instead of hanging in an
undefined screen mode.
@
text
@d10 4
a13 1
#include <fcntl.h>
d71 1
a71 1
    ret = lseek64(fd, (off64_t) addr, SEEK_SET);
d109 1
a109 1
    if (lseek64(fd, (off64_t) addr, SEEK_SET) == -1)
@


1.3
log
@it's <machine/amdmsh.h> not <sys/amdmsr.h> now.
@
text
@d36 2
a37 1
	    ErrorF("Unable to open %s: %s\n", _PATH_MSRDEV, strerror(errno));
d55 2
a56 1
	ErrorF("Unable to RDMSR %d\n", errno);
d97 2
a98 1
	ErrorF("Unable to WRMSR %d\n", errno);
@


1.2
log
@Changes needed to run on OpenBSD using the new amdmsr(4) driver.
@
text
@d6 1
a6 1
#include <sys/amdmsr.h>
@


1.1
log
@Initial revision
@
text
@d2 9
d13 1
a13 3
#include <fcntl.h>
#include <sys/types.h>
#include <sys/errno.h>
d17 7
d30 5
a34 1
	msrfd = open("/dev/cpu/0/msr", O_RDWR);
d36 1
a36 1
	    ErrorF("Unable to open /dev/cpu/0/msr: %d\n", errno);
d45 14
d78 1
a78 1

d85 12
d111 1
a111 1

@


1.1.1.1
log
@Import the xf86-video-geode driver for the AMD Geode LX graphics processor.

with and ok matthieu
@
text
@@
