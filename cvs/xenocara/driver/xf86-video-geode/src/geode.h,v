head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.16
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.14
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.10
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.4
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	v2_10_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.01.02.16.35.51;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	gIvRZM87nqRE4oQw;

1.5
date	2012.12.16.23.04.17;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.13.20.25.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.05.12.30.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.11.09.30.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.06.14.22.15.41;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xf86-video-geode 2.11.19. tested on Geode LX (Alix 3C3).
@
text
@ /*
  * (c) 2006-2008 Advanced Micro Devices, Inc.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a
  * copy of this software and associated documentation files (the "Software"),
  * to deal in the Software without restriction, including without limitation
  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
  * and/or sell copies of the Software, and to permit persons to whom the
  * Software is furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be included in
  * all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  * DEALINGS IN THE SOFTWARE.
  *
  * Neither the name of the Advanced Micro Devices, Inc. nor the names of its
  * contributors may be used to endorse or promote products derived from this
  * software without specific prior written permission.
  */

#ifndef _GEODE_H_
#define _GEODE_H_

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "geode_pcirename.h"

#ifdef HAVE_XAA_H
#include "xaa.h"
#endif
#include "exa.h"
#include "xf86Cursor.h"

#include "vgaHW.h"
#include "xf86int10.h"
#include <X11/extensions/randr.h>
#include "randrstr.h"

#include "xf86xv.h"

#include "compat-api.h"

/* We only support EXA version >=2 */

#if (EXA_VERSION_MAJOR >= 2)
#ifndef XF86EXA
#define XF86EXA 1
#endif
#else
#undef XF86EXA
#endif

#ifdef HAVE_XAA_H
#define XF86XAA 1
#else
#undef XF86XAA
#endif

#define CFB 0
#define INT10_SUPPORT 1

/* Existing Processor Models */
#define GX1     0x01
#define GX      0x10
#define LX      0x20

#define PCI_VENDOR_ID_CYRIX  0x1078
#define PCI_VENDOR_ID_NS     0x100b
#define PCI_VENDOR_ID_AMD    0x1022

#define PCI_CHIP_5530     0x0104
#define PCI_CHIP_SC1200   0x0504
#define PCI_CHIP_SC1400   0x0104
#define PCI_CHIP_GEODEGX  0x0030
#define PCI_CHIP_GEODELX  0x2081

#define GFX_CPU_GEODELX   4

#if defined(HAVE_GX) && XF86XAA
#define GX_FILL_RECT_SUPPORT 1
#define GX_BRES_LINE_SUPPORT 1
#define GX_DASH_LINE_SUPPORT 0  /* does not do dashed lines */
#define GX_MONO_8X8_PAT_SUPPORT 1
#define GX_CLREXP_8X8_PAT_SUPPORT 1
#define GX_SCR2SCREXP_SUPPORT 1
#define GX_SCR2SCRCPY_SUPPORT 1
#define GX_CPU2SCREXP_SUPPORT 1
#define GX_SCANLINE_SUPPORT 1
#define GX_USE_OFFSCRN_MEM 0
#define GX_ONE_LINE_AT_A_TIME 1
#define GX_WRITE_PIXMAP_SUPPORT 1
#endif

#define GFX(func) gfx_##func
#define GFX2(func) gfx2_##func

#define GEODEPTR(p) ((GeodeRec *)((p)->driverPrivate))

#define DEFAULT_EXA_SCRATCH_BFRSZ 0x40000

/* the LX hardware (and Cimarron) require a cursor memory size of 48x64.. */
#define LX_CURSOR_HW_WIDTH 48
#define LX_CURSOR_HW_HEIGHT 64

/* ...but xorg requires the cursor width to be a multiple of 32.  This is
the size of the *actual* cursor. */
#define LX_CURSOR_MAX_WIDTH 32
#define LX_CURSOR_MAX_HEIGHT 32

/* FIXME: Get rid of this from GX */

#define DEBUGMSG(cond, drv_msg)

#ifdef HAVE_LX
extern unsigned char cim_inb(unsigned short port);
extern void cim_outb(unsigned short port, unsigned char data);
extern unsigned short cim_inw(unsigned short port);
extern void cim_outw(unsigned short port, unsigned short data);
extern unsigned long cim_ind(unsigned short port);
extern void cim_outd(unsigned short port, unsigned long data);

#include "cim_rtns.h"

typedef struct _CIM_DISPLAYTIMING {
    unsigned short wPitch;
    unsigned short wBpp;
    VG_DISPLAY_MODE vgDisplayMode;
} CIM_DISPLAYTIMING;

#endif

#ifdef HAVE_GX
extern void gfx_write_reg32(int offset, int data);
extern void gfx_write_reg16(int offset, short data);
extern void gfx_write_reg8(int offset, char data);
extern int gfx_read_reg32(int offset);
extern short gfx_read_reg16(int offset);
extern void gfx_write_vid32(int offset, int data);
extern int gfx_read_vid32(int offset);
extern unsigned char gfx_inb(unsigned short port);
extern void gfx_outb(unsigned short port, unsigned char data);
extern unsigned short gfx_inw(unsigned short port);
extern void gfx_outw(unsigned short port, unsigned short data);
extern unsigned long gfx_ind(unsigned short port);
extern void gfx_outd(unsigned short port, unsigned long data);

#define Q_WORD QQ_WORD
#include "gfx_rtns.h"
#undef Q_WORD
#include "panel.h"

typedef struct tag_GFX_DISPLAYTIMING {
    unsigned int dwDotClock;
    unsigned short wPitch;
    unsigned short wBpp;
    unsigned short wHTotal;
    unsigned short wHActive;
    unsigned short wHSyncStart;
    unsigned short wHSyncEnd;
    unsigned short wHBlankStart;
    unsigned short wHBlankEnd;
    unsigned short wVTotal;
    unsigned short wVActive;
    unsigned short wVSyncStart;
    unsigned short wVSyncEnd;
    unsigned short wVBlankStart;
    unsigned short wVBlankEnd;
    unsigned short wPolarity;
} GFX_DISPLAYTIMING;

#endif

typedef struct _VESARec {
    xf86Int10InfoPtr pInt;
} VESARec;

typedef struct _GeodeMemRec {
    struct _GeodeMemRec *next;
    struct _GeodeMemRec *prev;
    unsigned int offset;
    int size;
} GeodeMemRec, *GeodeMemPtr;

#define OUTPUT_PANEL 0x01
#define OUTPUT_CRT   0x02
#define OUTPUT_TV    0x04
#define OUTPUT_VOP   0x08
#define OUTPUT_DCON  0x10

typedef struct _geodeRec {
    /* Common for both GX and LX */
    int Output;                 /* Bitmask indicating the valid output options */
    Bool HWCursor;
    Bool NoAccel;
    Bool useVGA;
    Bool VGAActive;             /* Flag indicating if LX VGA is active */
    Bool Compression;
    Bool useEXA;

    int rotation;
    int displayWidth;
    Bool starting;
    Bool tryCompression;
    Bool tryHWCursor;

    int mm_width, mm_height;    /* physical display size */

    unsigned long CursorStartOffset;

    int Pitch;                  /* display FB pitch */
    int displaySize;            /* The size of the visibile area */

    ExaOffscreenArea *shadowArea;

    /* Framebuffer memory */

    unsigned char *FBBase;
    unsigned int FBAvail;

    /* EXA structures */

    ExaDriverPtr pExa;
    unsigned int exaBfrOffset;
    unsigned int exaBfrSz;

    /* Other structures */

    EntityInfoPtr pEnt;
    ScreenBlockHandlerProcPtr BlockHandler;     /* needed for video */
    XF86VideoAdaptorPtr adaptor;

    /* State save structures */
    unsigned long FBDisplayOffset;
    unsigned long PrevDisplayOffset;

    VESARec *vesa;

    int FBCompressionEnable;

    VG_CURSOR_DATA FBCursor;

    /* Save the Cursor offset of the FB */
    unsigned long FBCursorOffset;
    unsigned char FBBIOSMode;

    /* Hooks */

    void (*PointerMoved) (POINTER_MOVED_ARGS_DECL);
    CloseScreenProcPtr CloseScreen;
    Bool (*CreateScreenResources) (ScreenPtr);

    /* ===== LX specific items ===== */

    /* Flags */
    Bool Scale;

    DisplayModePtr panelMode;   /* The mode for the panel (if attached) */

    /* Command buffer information */
    unsigned long CmdBfrOffset;
    unsigned long CmdBfrSize;

    /* Memory Management */
    GeodeMemPtr offscreenList;
    unsigned int offscreenStart;
    unsigned int offscreenSize;

    /* Save state */
    VG_COMPRESSION_DATA CBData;
    VG_COMPRESSION_DATA FBCBData;
    CIM_DISPLAYTIMING FBcimdisplaytiming;

    /* ===== GX specific items ===== */

    /* Flags */
    Bool Panel;

    int PanelX;
    int PanelY;

    int displayPitch;           /* The pitch ofthe visible area */
    int displayOffset;          /* The offset of the visible area */

    DisplayModePtr curMode;

    unsigned int shadowSize;
    unsigned int shadowOffset;

    int FBVGAActive;

    xf86CursorInfoPtr CursorInfo;

    /* XAA structures */

    unsigned int cpySrcOffset;
    int cpySrcPitch, cpySrcBpp;
    int cpyDx, cpyDy;
    unsigned int cmpSrcOffset;
    int cmpSrcPitch, cmpSrcBpp;
    unsigned int cmpSrcFmt, cmpDstFmt;
    int cmpOp;

    unsigned char **AccelImageWriteBuffers;
    int NoOfImgBuffers;
    unsigned char **AccelColorExpandBuffers;
    int NoOfColorExpandLines;
#if XF86XAA
    XAAInfoRecPtr AccelInfoRec;
#endif

    /* Save state */
    unsigned long FBCompressionOffset;
    unsigned short FBCompressionPitch;
    unsigned short FBCompressionSize;
    GFX_DISPLAYTIMING FBgfxdisplaytiming;

    /* Hooks */
    void (*WritePixmap) (ScrnInfoPtr pScrni, int x, int y, int w, int h,
                         unsigned char *src, int srcwidth, int rop,
                         unsigned int planemask, int trans, int bpp, int depth);

    /* Video information */
    int video_x;
    int video_y;
    short video_w;
    short video_h;
    short video_srcw;
    short video_srch;
    short video_dstw;
    short video_dsth;
    int video_id;
    int video_offset;
    ScrnInfoPtr video_scrnptr;
    BOOL OverlayON;
} GeodeRec, *GeodePtr;

/* option flags are self-explanatory */
#ifdef HAVE_LX
enum {
    LX_OPTION_SW_CURSOR,
    LX_OPTION_HW_CURSOR,
    LX_OPTION_NOCOMPRESSION,
    LX_OPTION_NOACCEL,
    LX_OPTION_EXA_SCRATCH_BFRSZ,
    LX_OPTION_TV_SUPPORT,
    LX_OPTION_TV_OUTPUT,
    LX_OPTION_TV_OVERSCAN,
    LX_OPTION_ROTATE,
    LX_OPTION_NOPANEL,
    LX_OPTION_FBSIZE,
    LX_OPTION_PANEL_MODE,
    LX_OPTION_DONT_PROGRAM
} LX_GeodeOpts;
#endif

#ifdef HAVE_GX
enum {
    GX_OPTION_SW_CURSOR,
    GX_OPTION_HW_CURSOR,
    GX_OPTION_NOCOMPRESSION,
    GX_OPTION_NOACCEL,
    GX_OPTION_ACCEL_METHOD,
    GX_OPTION_EXA_SCRATCH_BFRSZ,
    GX_OPTION_TV_SUPPORT,
    GX_OPTION_TV_OUTPUT,
    GX_OPTION_TV_OVERSCAN,
    GX_OPTION_ROTATE,
    GX_OPTION_NOPANEL,
    GX_OPTION_OSM_IMG_BUFS,
    GX_OPTION_OSM_CLR_BUFS,
    GX_OPTION_FBSIZE,
    GX_OPTION_PANEL_GEOMETRY,
    GX_OPTION_DONT_PROGRAM
} GX_GeodeOpts;
#endif

/* geode_dcon.c */
extern Bool dcon_init(ScrnInfoPtr pScrni);
extern int DCONDPMSSet(ScrnInfoPtr pScrni, int mode);

/* geode_common.c */

void geode_memory_to_screen_blt(unsigned long, unsigned long,
                                unsigned long, unsigned long, long, long, int);
int GeodeGetRefreshRate(DisplayModePtr);
void GeodeCopyGreyscale(unsigned char *, unsigned char *, int, int, int, int);
int GeodeGetSizeFromFB(unsigned int *);

/* gx_video.c */

int


GeodeQueryImageAttributes(ScrnInfoPtr, int id, unsigned short *w,
                          unsigned short *h, int *pitches, int *offsets);

Bool RegionsEqual(RegionPtr A, RegionPtr B);

/* gx_driver.c */

void GeodeProbeDDC(ScrnInfoPtr pScrni, int index);
xf86MonPtr GeodeDoDDC(ScrnInfoPtr pScrni, int index);
Bool GeodeI2CInit(ScrnInfoPtr pScrni, I2CBusPtr * ptr, char *name);

int GeodeGetFPGeometry(const char *str, int *width, int *height);
void GeodePointerMoved(POINTER_MOVED_ARGS_DECL);
void GeodeFreeScreen(FREE_SCREEN_ARGS_DECL);
int GeodeCalculatePitchBytes(unsigned int width, unsigned int bpp);
void GXSetupChipsetFPtr(ScrnInfoPtr pScrn);

/* geode_msr.c */
int GeodeReadMSR(unsigned long addr, unsigned long *lo, unsigned long *hi);
int GeodeWriteMSR(unsigned long addr, unsigned long lo, unsigned long hi);

/* gx_cursor.c */
Bool GXHWCursorInit(ScreenPtr pScrn);
void GXLoadCursorImage(ScrnInfoPtr pScrni, unsigned char *src);
void GXHideCursor(ScrnInfoPtr pScrni);
void GXShowCursor(ScrnInfoPtr pScrni);

/* gx_randr.c */
Rotation GXGetRotation(ScreenPtr pScreen);
Bool GXRandRInit(ScreenPtr pScreen, int rotation);
extern _X_EXPORT Bool GXRandRSetConfig(ScreenPtr pScreen, Rotation rotation,
                                       int rate, RRScreenSizePtr pSize);

/* gx_rotate.c */
Bool GXRotate(ScrnInfoPtr pScrni, DisplayModePtr mode);

/* gx_accel.c */
Bool GXAccelInit(ScreenPtr pScrn);
void GXAccelSync(ScrnInfoPtr pScrni);

/* gx_video.c */
void GXInitVideo(ScreenPtr pScrn);

/* lx_display.c */
void lx_enable_dac_power(ScrnInfoPtr pScrni, int option);
void lx_disable_dac_power(ScrnInfoPtr pScrni, int option);

/* lx_driver.c */
void LXSetupChipsetFPtr(ScrnInfoPtr pScrn);

/* lx_cursor.c */
Bool LXHWCursorInit(ScreenPtr pScrn);
void LXLoadARGBCursorImage(ScrnInfoPtr pScrni, unsigned char *src);
void LXHideCursor(ScrnInfoPtr pScrni);
void LXShowCursor(ScrnInfoPtr pScrni);

/* lx_exa.c */
Bool LXExaInit(ScreenPtr pScreen);

/* lx_video.c */
void LXInitVideo(ScreenPtr pScrn);

/* lx_output.c */
void LXSetupOutput(ScrnInfoPtr);

/* lx_panel.c */
DisplayModePtr LXGetLegacyPanelMode(ScrnInfoPtr pScrni);
DisplayModePtr LXGetManualPanelMode(char *modestr);

void LXAdjustFrame(ADJUST_FRAME_ARGS_DECL);

/* lx_display.c */
void LXSetupCrtc(ScrnInfoPtr pScrni);

/* lx_memory.c */
GeodeMemPtr GeodeAllocOffscreen(GeodeRec * pGeode, int size, int align);
void GeodeFreeOffscreen(GeodeRec * pGeode, GeodeMemPtr ptr);
void LXInitOffscreen(ScrnInfoPtr pScrni);
void GeodeCloseOffscreen(ScrnInfoPtr pScrni);
unsigned int GeodeOffscreenFreeSize(GeodeRec * pGeode);

/* lx_cursor.c */
Bool LXCursorInit(ScreenPtr pScrn);

#endif
@


1.5
log
@Update to xf86-video-geode 2.11.14
@
text
@d30 3
a33 1
#include "config.h"
d443 4
@


1.4
log
@Update to xf86-video-geode 2.11.12. Tested on Alix 3C3.
@
text
@d33 1
d35 1
d46 2
d58 6
d84 1
a84 1
#ifdef HAVE_GX
d87 1
a87 1
#define GX_DASH_LINE_SUPPORT 0	       /* does not do dashed lines */
d97 1
a100 1
#endif
d129 1
a129 2
typedef struct _CIM_DISPLAYTIMING
{
d157 1
a157 2
typedef struct tag_GFX_DISPLAYTIMING
{
d178 1
a178 2
typedef struct _VESARec
{
d182 1
a182 2
typedef struct _GeodeMemRec
{
d195 1
a195 2
typedef struct _geodeRec
{
d197 1
a197 1
    int Output;			       /* Bitmask indicating the valid output options */
d201 1
a201 1
    Bool VGAActive;		       /* Flag indicating if LX VGA is active */
d211 1
a211 1
    int mm_width, mm_height;           /* physical display size */
d215 2
a216 2
    int Pitch;			       /* display FB pitch */
    int displaySize;		       /* The size of the visibile area */
d234 1
a234 1
    ScreenBlockHandlerProcPtr BlockHandler;	/* needed for video */
d253 1
a253 1
    void (*PointerMoved) (int index, int x, int y);
d255 1
a255 1
        Bool(*CreateScreenResources) (ScreenPtr);
d262 1
a262 1
    DisplayModePtr panelMode;	       /* The mode for the panel (if attached) */
d286 2
a287 2
    int displayPitch;		       /* The pitch ofthe visible area */
    int displayOffset;		       /* The offset of the visible area */
d312 1
d314 1
d324 2
a325 2
	unsigned char *src, int srcwidth, int rop,
	unsigned int planemask, int trans, int bpp, int depth);
d340 1
a340 2
}
GeodeRec, *GeodePtr;
d344 1
a344 2
enum
{
d358 1
a358 2
}
LX_GeodeOpts;
d362 1
a362 2
enum
{
d379 1
a379 2
}
GX_GeodeOpts;
d389 1
a389 1
    unsigned long, unsigned long, long, long, int);
d397 2
d400 1
a400 1
    unsigned short *h, int *pitches, int *offsets);
d411 2
a412 2
void GeodePointerMoved(int index, int x, int y);
void GeodeFreeScreen(int scrnIndex, int flags);
d430 1
a430 1
				       int rate, RRScreenSizePtr pSize);
d464 1
a464 1
void LXAdjustFrame(int scrnIndex, int x, int y, int flags);
@


1.3
log
@Update to xf86-video-geode 2.11.9.
A bunch of bug fixes and performance improvements. Tested on Alix 3c3.
@
text
@d457 1
a457 1
DisplayModePtr LXGetLegacyPanelMode(void);
@


1.2
log
@update to xf86-video-geode 2.11.6. Tested on a Alix 3C3.
@
text
@d213 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
  * (c) 2006 Advanced Micro Devices, Inc.
d31 1
d63 1
a63 1
#define PCI_VENDOR_ID_NS     0x100B
d92 1
a92 13
#ifdef HAVE_LX
#define LX_FILL_RECT_SUPPORT 1
#define LX_BRES_LINE_SUPPORT 1
#define LX_DASH_LINE_SUPPORT 1
#define LX_MONO_8X8_PAT_SUPPORT 1
#define LX_CLREXP_8X8_PAT_SUPPORT 1
#define LX_SCR2SCREXP_SUPPORT 1
#define LX_SCR2SCRCPY_SUPPORT 1
#define LX_CPU2SCREXP_SUPPORT 1
#define LX_SCANLINE_SUPPORT 1
#define LX_USE_OFFSCRN_MEM 1
#define LX_WRITE_PIXMAP_SUPPORT 1
#endif
d94 1
a94 2
#define DEBUGTIM 0
#define DEBUGLVL 0
d96 8
a103 8
#ifndef DEBUGTIM
#define DEBUGTIM 0
#endif
#ifndef DEBUGLVL
#define DEBUGLVL 0
#endif

#define GEODEPTR(p) ((GeodeRec *)((p)->driverPrivate))
d105 1
a105 3
#define DEFAULT_IMG_LINE_BUFS 20
#define DEFAULT_CLR_LINE_BUFS 20
#define DEFAULT_EXA_SCRATCH_BFRSZ 0x40000
a106 8
/* 64x64 cursor used as 32x32 */
#define HW_CURSOR_W 64
#define HW_CURSOR_H 64

#define MYDBG 1
#if defined(MYDBG)
#define DEBUGMSG(cond, drv_msg) if((cond)) xf86DrvMsg drv_msg
#else
a107 1
#endif
d119 1
a119 4
#define CIM_CMD_BFR_SZ 0x200000L
#define CIM_CMD_BFR_MIN 0x20000L

typedef struct tag_CIM_DISPLAYTIMING
d123 2
a125 3
    VG_DISPLAY_MODE vgDisplayMode;
}
CIM_DISPLAYTIMING;
a147 12
typedef struct __TVPARAMS
{
    unsigned int dwFlags;
    unsigned short wWidth;
    unsigned short wHeight;
    unsigned short wStandard;
    unsigned short wType;
    unsigned short wOutput;
    unsigned short wResolution;
    Bool bState;
} TVPARAMS;

a167 18
/* TV Timings */
typedef struct __TVTIMING
{
    unsigned long HorzTim;
    unsigned long HorzSync;
    unsigned long VertSync;
    unsigned long LineEnd;
    unsigned long VertDownscale;
    unsigned long HorzScaling;
    unsigned long TimCtrl1;
    unsigned long TimCtrl2;
    unsigned long Subfreq;
    unsigned long DispPos;
    unsigned long DispSize;
    unsigned long Debug;
    unsigned long DacCtrl;
    unsigned int DotClock;
} TVTIMING;
d173 9
a181 2
}
VESARec;
d191 1
a191 2
    /* Common */

a192 1

a204 2
    unsigned int shadowSize;
    unsigned int shadowOffset;
d206 1
a206 4
    ExaOffscreenArea *shadowArea;

    DisplayModePtr curMode;
    VG_COMPRESSION_DATA CBData;
a208 8
    unsigned int CursorSize;
    xf86CursorInfoPtr CursorInfo;
    int CursorXHot;
    int CursorYHot;

    /* Geometry information */
    unsigned int maxWidth;	       /* Maximum possible width of the screen */
    unsigned int maxHeight;	       /* Maximum possible height of the screen */
a210 3

    int displayPitch;		       /* The pitch ofthe visible area */
    int displayOffset;		       /* The offset of the visible area */
a212 3
    int PanelX;
    int PanelY;

a214 1
    unsigned long FBLinearAddr;
a216 17
    unsigned int FBOffset;
    unsigned int FBSize;

    /* Video information */
    int video_x;
    int video_y;
    short video_w;
    short video_h;
    short video_srcw;
    short video_srch;
    short video_dstw;
    short video_dsth;
    int video_id;
    int video_offset;
    ScrnInfoPtr video_scrnptr;
    BOOL OverlayON;
    int videoKey;
a223 7
    /* XAA structures */
    unsigned char **AccelImageWriteBuffers;
    int NoOfImgBuffers;
    unsigned char **AccelColorExpandBuffers;
    int NoOfColorExpandLines;
    XAAInfoRecPtr AccelInfoRec;

a230 8

    gfx_vga_struct FBgfxVgaRegs;
    TVTIMING FBtvtiming;
    GFX_DISPLAYTIMING FBgfxdisplaytiming;
    CIM_DISPLAYTIMING FBcimdisplaytiming;

    unsigned int FBTVActive;
    unsigned int FBSupport;
d237 1
a237 1
    VG_COMPRESSION_DATA FBCBData;
a238 3
    unsigned long FBCompressionOffset;
    unsigned short FBCompressionPitch;
    unsigned short FBCompressionSize;
a245 4
    void (*WritePixmap) (ScrnInfoPtr pScrni, int x, int y, int w, int h,
	unsigned char *src, int srcwidth, int rop,
	unsigned int planemask, int trans, int bpp, int depth);

d250 1
a250 1
    /* LX only */
d252 6
d261 4
a264 12
#ifdef HAVE_TVSUPPORT
    Bool TVSupport;
    int tv_encoder;
    int tv_bus_fmt;
    int tv_flags;
    int tv_601_fmt;
    int tv_601_flags;
    int tv_conversion;
    int tv_vsync_shift;
    int tv_vsync_shift_count;
    int tv_vsync_select;
    int tvox, tvoy;
d266 9
a274 1
    TVPARAMS TvParam;
d276 7
a282 3
    int TVOx, TVOy, TVOw, TVOh;
    Bool TV_Overscan_On;
#endif
d284 2
a285 1
    /* To be killed! */
d288 5
d301 16
a316 1
    Bool Panel;
d318 13
a341 1
    LX_OPTION_ACCEL_METHOD,
a347 1
    LX_OPTION_COLOR_KEY,
d349 1
a349 1
    LX_OPTION_PANEL_GEOMETRY,
a368 4
    GX_OPTION_FLATPANEL_INFO,
    GX_OPTION_FLATPANEL_IN_BIOS,
    GX_OPTION_COLOR_KEY,
    GX_OPTION_OSM,
a377 7
/* OLPC defines */

#define DCON_DEFAULT_XRES  1200
#define DCON_DEFAULT_YRES   900
#define DCON_DEFAULT_BPP     16
#define DCON_DEFAULT_REFRESH 50

d380 1
a380 1
extern int DCONDPMSSet(ScrnInfoPtr pScrni, int mode, int flags);
d402 2
d423 2
a424 1
Bool GXRandRSetConfig(ScreenPtr pScreen, Rotation rotation, int rate, RRScreenSizePtr pSize);
d441 1
a441 1
void LXLoadCursorImage(ScrnInfoPtr pScrni, unsigned char *src);
a444 10
/* lx_randr.c */
Rotation LXGetRotation(ScreenPtr pScreen);
Bool LXRandRInit(ScreenPtr pScreen, int rotation);
Bool LXRandRSetConfig(ScreenPtr pScreen, Rotation rotation, int rate, RRScreenSizePtr pSize);

/* lx_rotate.c */
Bool LXSetRotatePitch(ScrnInfoPtr pScrni);
Bool LXRotate(ScrnInfoPtr pScrni, DisplayModePtr mode);
Bool LXAllocShadow(ScrnInfoPtr pScrni);

d450 22
@


1.1.1.1
log
@Import the xf86-video-geode driver for the AMD Geode LX graphics processor.

with and ok matthieu
@
text
@@
