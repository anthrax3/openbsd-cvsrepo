head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.4
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.2
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.4
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	v2_10_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2017.01.02.16.35.51;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	gIvRZM87nqRE4oQw;

1.11
date	2015.08.23.18.42.51;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	8x0jiqQcISUZbgE8;

1.10
date	2015.01.25.17.39.48;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	fjjT47K9ZeO3XLAO;

1.9
date	2014.06.08.18.15.12;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	1uKnvzDYjXIHQGfn;

1.8
date	2012.12.16.23.04.17;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.20.21.43.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.13.20.25.35;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.07.21.54.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.05.12.30.03;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.08.16.26.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.11.09.30.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.14.22.15.30;	author mbalmer;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.06.14.22.15.30;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xf86-video-geode 2.11.19. tested on Geode LX (Alix 3C3).
@
text
@#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ(2.60)
AC_INIT([xf86-video-geode],
        [2.11.19],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg&component=Driver%2Fgeode],
        [xf86-video-geode],
        [http://www.x.org/wiki/GeodeDriver])

AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_AUX_DIR([build-aux])

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AM_MAINTAINER_MODE

# Initialize libtool
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

# Require xorg-macros: XORG_DEFAULT_OPTIONS
m4_ifndef([XORG_MACROS_VERSION], 
          [m4_fatal([must install xorg-macros 1.4 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.4)
XORG_DEFAULT_OPTIONS

# Checks for programs.
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AH_TOP([#include "xorg-server.h"])

# -----------------------------------------------------------------------------
#			Configuration options
# -----------------------------------------------------------------------------
# Define a configure option for an alternate input module directory
AC_ARG_WITH(xorg-module-dir,
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])
AC_SUBST([moduledir])

# Define a configure option to enable/disable lcd panel support
AC_ARG_ENABLE(geodegx-panel, 
	      AS_HELP_STRING([--disable-geodegx-panel],
	      	             [Disable support for flatpanels with the Geode GX]),
	      [ ], 
	      [ PANEL_CPPFLAGS=-DPNL_SUP ])
AC_SUBST(PANEL_CPPFLAGS)

# Define a configure option to enable/disable ztv
AC_ARG_ENABLE(ztv,
	AS_HELP_STRING([--enable-ztv],
	    [Enable Video For Linux based ZTV driver (default: auto-detected)]),
	    [ztv=$enableval],
	    [ztv=auto])

# Check for Video4Linux Version 2 (V4L2) availability
AC_CHECK_HEADERS([linux/videodev2.h],[v4l2=yes],[v4l2=no])
if test "x$ztv" != "xno" ; then
    if test "x$v4l2" = "xno" ; then
	if test "x$ztv" = "xyes" ; then
	    # User really wants ztv but V4L2 is not found
	    AC_MSG_ERROR([ZTV driver requested, but videodev2.h not found.])
	fi
    else
	BUILD_ZTV=yes
    fi
fi
AM_CONDITIONAL(BUILD_ZTV, [test "x$BUILD_ZTV" = xyes])

# Check if GCC supports compiling in 32 bit mode for 64 bit computers
case $host_cpu in
    x86_64*|amd64*)
	if  test "x$GCC" = xyes ; then
	    SAVE_CFLAGS="$CFLAGS"
	    CFLAGS="$CFLAGS -m32"
	    AC_MSG_CHECKING([if $CC supports the -m32 Intel/AMD option])
	    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
#include <unistd.h>
int
main ()
{
  ;
  return 0;
}]])],
		[m32_support=yes; M32_CFLAGS=-m32],
		[m32_support=no])
	    AC_MSG_RESULT([$m32_support])
	    CFLAGS="$SAVE_CFLAGS"
	fi
	;;
esac
AC_SUBST([M32_CFLAGS])

# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(XV, videoproto)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Obtain compiler/linker options for the Geode driver dependencies
PKG_CHECK_MODULES(XORG, [xorg-server xproto fontsproto $REQUIRED_MODULES])
PKG_CHECK_MODULES(XEXT, [xextproto >= 7.0.99.1],
                  HAVE_XEXTPROTO_71="yes"; AC_DEFINE(HAVE_XEXTPROTO_71, 1, [xextproto 7.1 available]),
                  HAVE_XEXTPROTO_71="no")

# Define a configure option to enable/disable XAA support;
# handles unavailability of XAA since xserver-1.13
AC_ARG_ENABLE(xaa,
    AS_HELP_STRING([--enable-xaa],
                   [Enable legacy X Acceleration Architecture (XAA) [default=auto]]))

AS_IF([test "x$enable_xaa" != "xno"],
    [
        save_CFLAGS=$CFLAGS
        save_CPPFLAGS=$CPPFLAGS
        CFLAGS=$XORG_CFLAGS
        CPPFLAGS="$XORG_CFLAGS"
        AC_CHECK_HEADERS([xaa.h], have_XAA=yes, have_XAA=no)
        CFLAGS=$save_CFLAGS
        CPPFLAGS=$save_CPPFLAGS
])

AC_MSG_CHECKING([whether to include XAA support])

AS_IF([test "x$have_XAA" = "xyes"],
    [AC_MSG_RESULT([yes])],
    [AS_IF([test "x$enable_xaa" = "xyes"],
        [AC_MSG_ERROR([XAA requested but not found (perhaps building against xserver-1.13 or newer?)])],
        [AC_MSG_RESULT([no])
    ])
])

# Checks for libpciaccess support.
SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
AC_CHECK_DECL(XSERVER_LIBPCIACCESS,
              [XSERVER_LIBPCIACCESS=yes],[XSERVER_LIBPCIACCESS=no],
              [#include "xorg-server.h"])
CPPFLAGS="$SAVE_CPPFLAGS"

if test "x$XSERVER_LIBPCIACCESS" = xyes; then
    PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.8.0])
    XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS"
fi

AC_CONFIG_FILES([
	Makefile
	src/Makefile
])
AC_OUTPUT
@


1.11
log
@Update to xf86-video-geode 2.11.17

Add compatibility with xserver 1.17, but on OpenBSD I had to
disable reading of the 'XpressROM' that is used for directly
connected panels.
@
text
@d26 1
a26 1
        [2.11.17],
@


1.10
log
@Update to xf86-video-geode 2.11.16
@
text
@d26 1
a26 1
        [2.11.16],
@


1.9
log
@Update to xf86-video-geode 2.11.15
@
text
@d26 1
a26 1
        [2.11.15],
@


1.8
log
@Update to xf86-video-geode 2.11.14
@
text
@d24 1
a24 1
AC_PREREQ(2.59)
d26 1
a26 1
        [2.11.14],
d29 1
a29 1
	[http://www.x.org/wiki/GeodeDriver])
d33 2
a34 1
AC_CONFIG_AUX_DIR(.)
@


1.7
log
@Update to xf86-video-geode 2.11.13
@
text
@d26 1
a26 1
        [2.11.13],
d130 27
@


1.6
log
@Update to xf86-video-geode 2.11.12. Tested on Alix 3C3.
@
text
@d23 1
d26 1
a26 1
        [2.11.12],
d32 1
a32 1
AM_CONFIG_HEADER([config.h])
d35 8
a48 4
AM_INIT_AUTOMAKE([foreign dist-bzip2])

AM_MAINTAINER_MODE

a51 2
AC_PROG_CC
AM_PROG_AS
d55 4
d60 1
a60 1
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
d64 1
d66 1
d68 1
a68 1
	      AC_HELP_STRING([--disable-geodegx-panel],
d71 2
a72 1
	      [ AMD_CFLAGS="-DPNL_SUP $AMD_CFLAGS" ])
d74 18
a91 18
AC_ARG_ENABLE(werror,        AC_HELP_STRING([--enable-werror],
				  [Treat warnings as errors (default: disabled)]),
			        [WERROR=$enableval], [WERROR=no])
AC_ARG_ENABLE(visibility,
	      AC_HELP_STRING([--enable-visibility],
			     [Enable GCC visibility optimizations]),
			     [ AMD_CFLAGS="$AMD_CFLAGS -fvisibility=hidden" ],
			     [ : ])

if test "x$GCC" = "xyes"; then
       GCC_WARNINGS1="-Wall -Wpointer-arith -Wstrict-prototypes"
       GCC_WARNINGS2="-Wmissing-prototypes -Wmissing-declarations"
       GCC_WARNINGS3="-Wnested-externs -fno-strict-aliasing"
       GCC_WARNINGS="$GCC_WARNINGS1 $GCC_WARNINGS2 $GCC_WARNINGS3"
       if test "x$WERROR" = "xyes"; then
               GCC_WARNINGS="${GCC_WARNINGS} -Werror"
       fi
       AMD_CFLAGS="$GCC_WARNINGS $AMD_CFLAGS"
d93 1
d95 25
a119 1
# Checks for extensions
d125 1
a125 1
# Checks for pkg-config packages
a129 1
AM_CONDITIONAL(HAVE_XEXTPROTO_71, [ test "$HAVE_XEXTPROTO_71" = "yes" ])
d131 1
a131 1
# Checks for libraries.
a138 3
# Checks for header files.
AC_HEADER_STDC

d144 1
a144 23
AC_SUBST([XORG_CFLAGS])
AC_SUBST([moduledir])
AC_SUBST([AMD_CFLAGS])

is386=false

case $host_cpu in
  i*86)
	is386=true
	;;
esac

# Unset is386 if compiling for AMD64/EM64T
if test $is386 = true ; then
	AC_CHECK_DECLS([_LP64, __amd64__, amd64], [is386=false])
fi

AM_CONDITIONAL([I386ARCH], [test $is386 = true])

DRIVER_NAME=geode
AC_SUBST([DRIVER_NAME])

AC_OUTPUT([
d148 1
@


1.5
log
@Update to xf86-video-geode 2.11.10. Tested on Alix 3C3.
@
text
@d25 1
a25 1
        [2.11.10],
@


1.4
log
@Update to xf86-video-geode 2.11.9.
A bunch of bug fixes and performance improvements. Tested on Alix 3c3.
@
text
@d25 1
a25 1
        [2.11.9],
@


1.3
log
@Update to xf86-video-geode 2.11.8. Tested on Alix 3c3.
@
text
@d25 1
a25 1
        2.11.8,
d27 1
a27 1
        xf86-video-geode,
@


1.2
log
@update to xf86-video-geode 2.11.6. Tested on a Alix 3C3.
@
text
@d23 1
a23 1
AC_PREREQ(2.57)
d25 1
a25 1
        2.11.6,
d27 2
a28 1
        xf86-video-geode)
d34 5
a38 3
# Require xorg-macros: XORG_CHANGELOG
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.2 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.2)
d40 1
a40 1
AM_INIT_AUTOMAKE([dist-bzip2])
a88 1
XORG_DRIVER_CHECK_EXT(XFreeXDGA, xf86dgaproto)
a95 1
sdkdir=$(pkg-config --variable=sdkdir xorg-server)
a133 4

XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
XORG_CHANGELOG
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
        2.10.0,
d33 4
d90 4
d136 1
@


1.1.1.1
log
@Import the xf86-video-geode driver for the AMD Geode LX graphics processor.

with and ok matthieu
@
text
@@
