head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.10
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.10
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.05.23.15.02.40;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Ny6LuiDiL6vNudHo;

1.4
date	2012.08.16.16.13.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.06.15.41.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.22.16.01.56;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.02.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.02.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge cirrus driver version 1.5.3
@
text
@/*
   Copyright (c) 1999,2000  The XFree86 Project Inc. 
   based on code written by Mark Vojkovich <markv@@valinux.com>
*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "xf86.h"
#include "xf86_OSproc.h"
#include "xf86Pci.h"
#include "shadowfb.h"
#include "servermd.h"
#include "cir.h"
#include "alp.h"

#define MIN(a, b) (((a) < (b)) ? (a) : (b))
#define MAX(a, b) (((a) > (b)) ? (a) : (b))

_X_EXPORT void
cirRefreshArea(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
{
    CirPtr pCir = CIRPTR(pScrn);
    int width, height, Bpp, FBPitch, x1, x2, y1, y2;
    unsigned char *src, *dst;
   
    Bpp = pScrn->bitsPerPixel >> 3;
    FBPitch = BitmapBytePad(pScrn->displayWidth * pScrn->bitsPerPixel);

    while(num--) {
        x1 = MAX(pbox->x1, 0);
        y1 = MAX(pbox->y1, 0);
        x2 = MIN(pbox->x2, pScrn->virtualX);
        y2 = MIN(pbox->y2, pScrn->virtualY);

        width = (x2 - x1) * Bpp;
        height = y2 - y1;

        if (width <= 0 || height <= 0)
            continue;

        src = pCir->ShadowPtr + (y1 * pCir->ShadowPitch) + (x1 * Bpp);
        dst = pCir->FbBase + (y1 * FBPitch) + (x1 * Bpp);

        while(height--) {
            memcpy(dst, src, width);
            dst += FBPitch;
            src += pCir->ShadowPitch;
        }

        pbox++;
    }
} 

_X_EXPORT void
cirPointerMoved(SCRN_ARG_TYPE arg, int x, int y)
{
    SCRN_INFO_PTR(arg);
    CirPtr pCir = CIRPTR(pScrn);
    int newX, newY;

    if(pCir->rotate == 1) {
	newX = pScrn->pScreen->height - y - 1;
	newY = x;
    } else {
	newX = y;
	newY = pScrn->pScreen->width - x - 1;
    }

    (*pCir->PointerMoved)(arg, newX, newY);
}

_X_EXPORT void
cirRefreshArea8(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
{
    CirPtr pCir = CIRPTR(pScrn);
    int count, width, height, x1, x2, y1, y2, dstPitch, srcPitch;
    CARD8 *dstPtr, *srcPtr, *src;
    CARD32 *dst;

    dstPitch = pScrn->displayWidth;
    srcPitch = -pCir->rotate * pCir->ShadowPitch;

    while(num--) {
        x1 = MAX(pbox->x1, 0);
        y1 = MAX(pbox->y1, 0);
        x2 = MIN(pbox->x2, pScrn->virtualX);
        y2 = MIN(pbox->y2, pScrn->virtualY);

        width = x2 - x1;
        y1 = y1 & ~3;
        y2 = (y2 + 3) & ~3;
        height = (y2 - y1) / 4;  /* in dwords */

        if (width <= 0 || height <= 0)
            continue;

        if(pCir->rotate == 1) {
            dstPtr = pCir->FbBase +
			(x1 * dstPitch) + pScrn->virtualX - y2;
            srcPtr = pCir->ShadowPtr + ((1 - y2) * srcPitch) + x1;
        } else {
            dstPtr = pCir->FbBase +
			((pScrn->virtualY - x2) * dstPitch) + y1;
            srcPtr = pCir->ShadowPtr + (y1 * srcPitch) + x2 - 1;
        }

        while(width--) {
            src = srcPtr;
            dst = (CARD32*)dstPtr;
            count = height;
            while(count--) {
                *(dst++) = src[0] | (src[srcPitch] << 8) |
				(src[srcPitch * 2] << 16) |
				(src[srcPitch * 3] << 24);
                src += srcPitch * 4;
            }
            srcPtr += pCir->rotate;
            dstPtr += dstPitch;
        }

        pbox++;
    }
} 


_X_EXPORT void
cirRefreshArea16(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
{
    CirPtr pCir = CIRPTR(pScrn);
    int count, width, height, x1, x2, y1, y2, dstPitch, srcPitch;
    CARD16 *dstPtr, *srcPtr, *src;
    CARD32 *dst;

    dstPitch = pScrn->displayWidth;
    srcPitch = -pCir->rotate * pCir->ShadowPitch >> 1;

    while(num--) {
        x1 = MAX(pbox->x1, 0);
        y1 = MAX(pbox->y1, 0);
        x2 = MIN(pbox->x2, pScrn->virtualX);
        y2 = MIN(pbox->y2, pScrn->virtualY);

        width = x2 - x1;
        y1 = y1 & ~1;
        y2 = (y2 + 1) & ~1;
        height = (y2 - y1) / 2;  /* in dwords */

        if (width <= 0 || height <= 0)
            continue;

        if(pCir->rotate == 1) {
            dstPtr = (CARD16*)pCir->FbBase +
			(x1 * dstPitch) + pScrn->virtualX - y2;
            srcPtr = (CARD16*)pCir->ShadowPtr +
			((1 - y2) * srcPitch) + x1;
        } else {
            dstPtr = (CARD16*)pCir->FbBase +
			((pScrn->virtualY - x2) * dstPitch) + y1;
            srcPtr = (CARD16*)pCir->ShadowPtr +
			(y1 * srcPitch) + x2 - 1;
        }

        while(width--) {
            src = srcPtr;
            dst = (CARD32*)dstPtr;
            count = height;
            while(count--) {
                *(dst++) = src[0] | (src[srcPitch] << 16);
                src += srcPitch * 2;
            }
            srcPtr += pCir->rotate;
            dstPtr += dstPitch;
        }

        pbox++;
    }
}


/* this one could be faster */
_X_EXPORT void
cirRefreshArea24(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
{
    CirPtr pCir = CIRPTR(pScrn);
    int count, width, height, x1, x2, y1, y2, dstPitch, srcPitch;
    CARD8 *dstPtr, *srcPtr, *src;
    CARD32 *dst;

    dstPitch = BitmapBytePad(pScrn->displayWidth * 24);
    srcPitch = -pCir->rotate * pCir->ShadowPitch;

    while(num--) {
        x1 = MAX(pbox->x1, 0);
        y1 = MAX(pbox->y1, 0);
        x2 = MIN(pbox->x2, pScrn->virtualX);
        y2 = MIN(pbox->y2, pScrn->virtualY);

        width = x2 - x1;
        y1 = y1 & ~3;
        y2 = (y2 + 3) & ~3;
        height = (y2 - y1) / 4;  /* blocks of 3 dwords */

        if (width <= 0 || height <= 0)
            continue;

        if(pCir->rotate == 1) {
            dstPtr = pCir->FbBase +
			(x1 * dstPitch) + ((pScrn->virtualX - y2) * 3);
            srcPtr = pCir->ShadowPtr + ((1 - y2) * srcPitch) + (x1 * 3);
        } else {
            dstPtr = pCir->FbBase +
                ((pScrn->virtualY - x2) * dstPitch) + (y1 * 3);
            srcPtr = pCir->ShadowPtr + (y1 * srcPitch) + (x2 * 3) - 3;
        }

        while(width--) {
            src = srcPtr;
            dst = (CARD32*)dstPtr;
            count = height;
            while(count--) {
                dst[0] = src[0] | (src[1] << 8) | (src[2] << 16) |
				(src[srcPitch] << 24);		
                dst[1] = src[srcPitch + 1] | (src[srcPitch + 2] << 8) |
				(src[srcPitch * 2] << 16) |
				(src[(srcPitch * 2) + 1] << 24);		
                dst[2] = src[(srcPitch * 2) + 2] | (src[srcPitch * 3] << 8) |
				(src[(srcPitch * 3) + 1] << 16) |
				(src[(srcPitch * 3) + 2] << 24);	
                dst += 3;
                src += srcPitch * 4;
            }
            srcPtr += pCir->rotate * 3;
            dstPtr += dstPitch;
        }

        pbox++;
    }
}

_X_EXPORT void
cirRefreshArea32(ScrnInfoPtr pScrn, int num, BoxPtr pbox)
{
    CirPtr pCir = CIRPTR(pScrn);
    int count, width, height, x1, x2, y1, y2, dstPitch, srcPitch;
    CARD32 *dstPtr, *srcPtr, *src, *dst;

    dstPitch = pScrn->displayWidth;
    srcPitch = -pCir->rotate * pCir->ShadowPitch >> 2;

    while(num--) {
        x1 = MAX(pbox->x1, 0);
        y1 = MAX(pbox->y1, 0);
        x2 = MIN(pbox->x2, pScrn->virtualX);
        y2 = MIN(pbox->y2, pScrn->virtualY);

        width = x2 - x1;
        height = y2 - y1;

        if (width <= 0 || height <= 0)
            continue;

        if(pCir->rotate == 1) {
            dstPtr = (CARD32*)pCir->FbBase +
			(x1 * dstPitch) + pScrn->virtualX - y2;
            srcPtr = (CARD32*)pCir->ShadowPtr +
			((1 - y2) * srcPitch) + x1;
        } else {
            dstPtr = (CARD32*)pCir->FbBase +
			((pScrn->virtualY - x2) * dstPitch) + y1;
            srcPtr = (CARD32*)pCir->ShadowPtr +
			(y1 * srcPitch) + x2 - 1;
        }

        while(width--) {
            src = srcPtr;
            dst = dstPtr;
            count = height;
            while(count--) {
                *(dst++) = *src;
                src += srcPitch;
            }
            srcPtr += pCir->rotate;
            dstPtr += dstPitch;
        }

        pbox++;
    }
}



@


1.4
log
@Update to xf86-video-cirrus 1.5.1
@
text
@d18 3
d25 1
a25 1
    int width, height, Bpp, FBPitch;
d32 21
a52 13
	width = (pbox->x2 - pbox->x1) * Bpp;
	height = pbox->y2 - pbox->y1;
	src = pCir->ShadowPtr + (pbox->y1 * pCir->ShadowPitch) + 
						(pbox->x1 * Bpp);
	dst = pCir->FbBase + (pbox->y1 * FBPitch) + (pbox->x1 * Bpp);

	while(height--) {
	    memcpy(dst, src, width);
	    dst += FBPitch;
	    src += pCir->ShadowPitch;
	}
	
	pbox++;
d78 1
a78 1
    int count, width, height, y1, y2, dstPitch, srcPitch;
d86 36
a121 28
	width = pbox->x2 - pbox->x1;
	y1 = pbox->y1 & ~3;
	y2 = (pbox->y2 + 3) & ~3;
	height = (y2 - y1) >> 2;  /* in dwords */

	if(pCir->rotate == 1) {
	    dstPtr = pCir->FbBase + 
			(pbox->x1 * dstPitch) + pScrn->virtualX - y2;
	    srcPtr = pCir->ShadowPtr + ((1 - y2) * srcPitch) + pbox->x1;
	} else {
	    dstPtr = pCir->FbBase + 
			((pScrn->virtualY - pbox->x2) * dstPitch) + y1;
	    srcPtr = pCir->ShadowPtr + (y1 * srcPitch) + pbox->x2 - 1;
	}

	while(width--) {
	    src = srcPtr;
	    dst = (CARD32*)dstPtr;
	    count = height;
	    while(count--) {
		*(dst++) = src[0] | (src[srcPitch] << 8) | 
					(src[srcPitch * 2] << 16) | 
					(src[srcPitch * 3] << 24);
		src += srcPitch * 4;
	    }
	    srcPtr += pCir->rotate;
	    dstPtr += dstPitch;
	}
d123 1
a123 1
	pbox++;
d132 1
a132 1
    int count, width, height, y1, y2, dstPitch, srcPitch;
d140 36
a175 28
	width = pbox->x2 - pbox->x1;
	y1 = pbox->y1 & ~1;
	y2 = (pbox->y2 + 1) & ~1;
	height = (y2 - y1) >> 1;  /* in dwords */

	if(pCir->rotate == 1) {
	    dstPtr = (CARD16*)pCir->FbBase + 
			(pbox->x1 * dstPitch) + pScrn->virtualX - y2;
	    srcPtr = (CARD16*)pCir->ShadowPtr + 
			((1 - y2) * srcPitch) + pbox->x1;
	} else {
	    dstPtr = (CARD16*)pCir->FbBase + 
			((pScrn->virtualY - pbox->x2) * dstPitch) + y1;
	    srcPtr = (CARD16*)pCir->ShadowPtr + 
			(y1 * srcPitch) + pbox->x2 - 1;
	}

	while(width--) {
	    src = srcPtr;
	    dst = (CARD32*)dstPtr;
	    count = height;
	    while(count--) {
		*(dst++) = src[0] | (src[srcPitch] << 16);
		src += srcPitch * 2;
	    }
	    srcPtr += pCir->rotate;
	    dstPtr += dstPitch;
	}
d177 1
a177 1
	pbox++;
d187 1
a187 1
    int count, width, height, y1, y2, dstPitch, srcPitch;
d195 29
a223 21
        width = pbox->x2 - pbox->x1;
        y1 = pbox->y1 & ~3;
        y2 = (pbox->y2 + 3) & ~3;
        height = (y2 - y1) >> 2;  /* blocks of 3 dwords */

	if(pCir->rotate == 1) {
	    dstPtr = pCir->FbBase + 
			(pbox->x1 * dstPitch) + ((pScrn->virtualX - y2) * 3);
	    srcPtr = pCir->ShadowPtr + ((1 - y2) * srcPitch) + (pbox->x1 * 3);
	} else {
	    dstPtr = pCir->FbBase + 
			((pScrn->virtualY - pbox->x2) * dstPitch) + (y1 * 3);
	    srcPtr = pCir->ShadowPtr + (y1 * srcPitch) + (pbox->x2 * 3) - 3;
	}

	while(width--) {
	    src = srcPtr;
	    dst = (CARD32*)dstPtr;
	    count = height;
	    while(count--) {
		dst[0] = src[0] | (src[1] << 8) | (src[2] << 16) |
d225 1
a225 1
		dst[1] = src[srcPitch + 1] | (src[srcPitch + 2] << 8) |
d228 1
a228 1
		dst[2] = src[(srcPitch * 2) + 2] | (src[srcPitch * 3] << 8) |
d231 6
a236 6
		dst += 3;
		src += srcPitch * 4;
	    }
	    srcPtr += pCir->rotate * 3;
	    dstPtr += dstPitch; 
	}
d238 1
a238 1
	pbox++;
d246 1
a246 1
    int count, width, height, dstPitch, srcPitch;
d253 34
a286 26
	width = pbox->x2 - pbox->x1;
	height = pbox->y2 - pbox->y1;

	if(pCir->rotate == 1) {
	    dstPtr = (CARD32*)pCir->FbBase + 
			(pbox->x1 * dstPitch) + pScrn->virtualX - pbox->y2;
	    srcPtr = (CARD32*)pCir->ShadowPtr + 
			((1 - pbox->y2) * srcPitch) + pbox->x1;
	} else {
	    dstPtr = (CARD32*)pCir->FbBase + 
			((pScrn->virtualY - pbox->x2) * dstPitch) + pbox->y1;
	    srcPtr = (CARD32*)pCir->ShadowPtr + 
			(pbox->y1 * srcPitch) + pbox->x2 - 1;
	}

	while(width--) {
	    src = srcPtr;
	    dst = dstPtr;
	    count = height;
	    while(count--) {
		*(dst++) = *src;
		src += srcPitch;
	    }
	    srcPtr += pCir->rotate;
	    dstPtr += dstPitch;
	}
d288 1
a288 1
	pbox++;
@


1.3
log
@Upate to xf86-video-cirrus 1.4.0
@
text
@a11 1
#include "xf86PciInfo.h"
d46 1
a46 1
cirPointerMoved(int index, int x, int y)
d48 1
a48 1
    ScrnInfoPtr pScrn = xf86Screens[index];
d60 1
a60 1
    (*pCir->PointerMoved)(index, newX, newY);
@


1.2
log
@Update to xf86-video-cirrus 1.3.2
@
text
@a0 2
/* $XFree86: Exp $ */

@


1.1
log
@Initial revision
@
text
@a13 1
#include "xf86Resources.h"
d21 1
a21 1
void
d48 1
a48 1
void
d66 1
a66 1
void
d112 1
a112 1
void
d159 1
a159 1
void
d210 1
a210 1
void
@


1.1.1.1
log
@Importing xf86-video-cirrus 1.1.0
@
text
@@
