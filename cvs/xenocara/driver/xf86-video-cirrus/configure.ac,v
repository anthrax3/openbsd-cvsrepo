head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.2
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2016.04.04.20.49.36;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	XWUwM5Esw2Vx6it6;

1.8
date	2016.04.04.20.19.00;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	XHbTTNVbfixnUjko;

1.7
date	2015.05.23.15.02.40;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Ny6LuiDiL6vNudHo;

1.6
date	2013.06.29.09.16.23;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.16.16.13.04;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.06.15.41.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.22.16.01.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.16.22.02.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.20.02.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.20.02.02;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Revert part of previous I didn't intend to commit and clean-up.
@
text
@#  Copyright 2005 Adam Jackson.
#
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  on the rights to use, copy, modify, merge, publish, distribute, sub
#  license, and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice (including the next
#  paragraph) shall be included in all copies or substantial portions of the
#  Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
#  ADAM JACKSON BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Process this file with autoconf to produce a configure script

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([xf86-video-cirrus],
        [1.5.3],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        [xf86-video-cirrus])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_AUX_DIR(.)

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS

# Initialize libtool
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AH_TOP([#include "xorg-server.h"])

# Define a configure option for an alternate module directory
AC_ARG_WITH(xorg-module-dir,
            AS_HELP_STRING([--with-xorg-module-dir=DIR],
                           [Default xorg module directory [[default=$libdir/xorg/modules]]]),
            [moduledir="$withval"],
            [moduledir="$libdir/xorg/modules"])

# Store the list of server defined optional extensions in REQUIRED_MODULES
XORG_DRIVER_CHECK_EXT(RANDR, randrproto)
XORG_DRIVER_CHECK_EXT(RENDER, renderproto)
XORG_DRIVER_CHECK_EXT(XV, videoproto)
XORG_DRIVER_CHECK_EXT(DPMSExtension, xextproto)

# Obtain compiler/linker options for the driver dependencies
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.4 xproto fontsproto $REQUIRED_MODULES])

# Checks for libraries.
SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
AC_CHECK_DECL(XSERVER_LIBPCIACCESS,
              [XSERVER_LIBPCIACCESS=yes],[XSERVER_LIBPCIACCESS=no],
              [#include "xorg-server.h"])
AC_CHECK_HEADER(xf1bpp.h,[AC_DEFINE(HAVE_XF1BPP, 1, [Have 1bpp support])],[])
AC_CHECK_HEADER(xf4bpp.h,[AC_DEFINE(HAVE_XF4BPP, 1, [Have 4bpp support])],[])
CPPFLAGS="$SAVE_CPPFLAGS"

AC_ARG_ENABLE(xaa,
              AS_HELP_STRING([--enable-xaa],
                             [Enable legacy X Acceleration Architecture (XAA) [default=auto]]),
              [XAA="$enableval"],
              [XAA=auto])
if test "x$XAA" != xno; then
        save_CFLAGS=$CFLAGS
        save_CPPFLAGS=$CPPFLAGS
        CFLAGS=$XORG_CFLAGS
        CPPFLAGS="$XORG_CFLAGS"
        AC_CHECK_HEADERS([xaa.h], XAA=yes, XAA=no)
        CFLAGS=$save_CFLAGS
        CPPFLAGS=$save_CPPFLAGS
fi
AC_MSG_CHECKING([whether to include XAA support])
AM_CONDITIONAL(XAA, test "x$XAA" = xyes)
AC_MSG_RESULT([$XAA])

AC_ARG_ENABLE(exa, AS_HELP_STRING([--disable-exa],
				  [Disable EXA support [[default=enabled]]]),
              [EXA="$enableval"],
              [EXA=yes])
# Properly handle EXA.
AC_MSG_CHECKING([whether to enable EXA support])
if test "x$EXA" = xyes; then
        AC_MSG_RESULT(yes)

        SAVE_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
        AC_CHECK_HEADER(exa.h,
                       [have_exa_h="yes"], [have_exa_h="no"],
		       [#include "xorg-server.h"])
        CPPFLAGS="$SAVE_CPPFLAGS"
else
        AC_MSG_RESULT(no)
fi

SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
if test "x$have_exa_h" = xyes; then
        AC_MSG_CHECKING([whether EXA version is at least 2.0.0])
        AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[
#include <xorg-server.h>
#include "exa.h"
#if EXA_VERSION_MAJOR < 2
#error OLD EXA!
#endif
                          ]])],
                          [USE_EXA=yes],
                          [USE_EXA=no])
        AC_MSG_RESULT($USE_EXA)

        if test "x$USE_EXA" = xyes; then
                AC_DEFINE(USE_EXA, 1, [Build support for Exa])
        fi
fi
CPPFLAGS="$SAVE_CPPFLAGS"

AM_CONDITIONAL(USE_EXA, test "x$USE_EXA" = xyes)

if test "x$XSERVER_LIBPCIACCESS" = xyes; then
    PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.8.0])
    XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS"
fi
AM_CONDITIONAL(XSERVER_LIBPCIACCESS, test "x$XSERVER_LIBPCIACCESS" = xyes)


AC_SUBST([moduledir])

DRIVER_NAME=cirrus
AC_SUBST([DRIVER_NAME])

AC_CONFIG_FILES([
                Makefile
                src/Makefile
                man/Makefile
])
AC_OUTPUT
@


1.8
log
@Fix EXA detection.

As of 1.17.2, the xserver is more picky about the order in which
headers are included. We need to account for this in order for the
compile time exa.h check to succeed.
@
text
@a63 2
sdkdir=`$PKG_CONFIG --variable=sdkdir xorg-server`

d84 1
a84 3
        AC_CHECK_HEADERS([xaa.h], XAA=yes, XAA=no, [
#include <xorg-server.h>
])
a95 2
SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
d100 7
a106 1
	AC_CHECK_FILE(${sdkdir}/exa.h, [have_exa_h="yes"], [have_exa_h="no"])
d130 2
@


1.7
log
@Merge cirrus driver version 1.5.3
@
text
@d64 2
d86 3
a88 1
        AC_CHECK_HEADERS([xaa.h], XAA=yes, XAA=no)
d106 1
a106 6

        SAVE_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $XORG_CFLAGS"
        AC_CHECK_HEADER(exa.h,
                       [have_exa_h="yes"], [have_exa_h="no"])
        CPPFLAGS="$SAVE_CPPFLAGS"
d116 1
@


1.6
log
@Add basic EXA acceleration for the Alpine chipset.
@
text
@d26 1
a26 1
        [1.5.1],
a34 1
AM_MAINTAINER_MODE
@


1.5
log
@Update to xf86-video-cirrus 1.5.1
@
text
@d93 40
@


1.4
log
@Upate to xf86-video-cirrus 1.4.0
@
text
@d26 1
a26 1
        [1.4.0],
d74 18
@


1.3
log
@Update to xf86-video-cirrus 1.3.2
@
text
@d23 2
a24 1
AC_PREREQ(2.57)
d26 1
a26 1
        1.3.2,
d28 1
a28 2
        xf86-video-cirrus)

d30 1
a30 1
AM_CONFIG_HEADER([config.h])
d33 2
a34 2
AM_INIT_AUTOMAKE([dist-bzip2])

d37 5
a41 3
# Require xorg-macros: XORG_CWARNFLAGS, XORG_CHANGELOG
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.2 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.2)
d43 1
a43 1
# Checks for programs.
a45 2
AC_PROG_CC
XORG_CWARNFLAGS
d49 1
d51 1
a51 1
            AC_HELP_STRING([--with-xorg-module-dir=DIR],
d56 1
a56 1
# Checks for extensions
d62 1
a62 1
# Checks for pkg-config packages
a63 1
sdkdir=$(pkg-config --variable=sdkdir xorg-server)
a80 2
# Checks for header files.
AC_HEADER_STDC
a81 1
AC_SUBST([XORG_CFLAGS])
d87 4
a90 8
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
XORG_CHANGELOG

AC_OUTPUT([
	Makefile
	src/Makefile
	man/Makefile
d92 1
@


1.2
log
@xf86-video-cirrus 1.2.1 + one bug fix from git-current.
Tested on alpine gl5446 on alpha.
@
text
@d25 1
a25 1
        1.2.1,
d37 4
d45 1
d62 1
a62 1
PKG_CHECK_MODULES(XORG, [xorg-server >= 1.0.99.901 xproto fontsproto $REQUIRED_MODULES])
d92 1
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
        1.1.0,
d61 14
@


1.1.1.1
log
@Importing xf86-video-cirrus 1.1.0
@
text
@@
