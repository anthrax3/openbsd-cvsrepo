head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.20
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.18
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.16
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.14
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.10
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.16.16.42.10;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.22.18.35.19;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2010.11.21.15.13.52;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.03.16.21.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xf86-input-mouse 1.8.1

ok matthieu@@
@
text
@
/*
 * Copyright 1999 by The XFree86 Project, Inc.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <xorg-server.h>
#include <X11/X.h>
#include "xf86.h"
#include "xf86Xinput.h"
#include "mouse.h"
#include "xf86_OSlib.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

static int
SupportedInterfaces(void)
{
    return MSE_SERIAL | MSE_BUS | MSE_PS2 | MSE_XPS2 | MSE_AUTO;
}

static const char *
DefaultProtocol(void)
{
    return "Auto";
}

#define DEFAULT_MOUSE_DEV               "/dev/input/mice"
#define DEFAULT_PS2_DEV                 "/dev/psaux"
#define DEFAULT_GPM_DATA_DEV            "/dev/gpmdata"
#define DEFAULT_GPM_CTL_DEV             "/dev/gpmdata"

static const char *mouseDevs[] = {
        DEFAULT_MOUSE_DEV,
        DEFAULT_PS2_DEV,
        DEFAULT_GPM_DATA_DEV,
        NULL
};

typedef enum {
        MOUSE_PROTO_UNKNOWN = 0,
        MOUSE_PROTO_SERIAL,
        MOUSE_PROTO_PS2,
        MOUSE_PROTO_MSC,
        MOUSE_PROTO_GPM,
        MOUSE_PROTO_EXPPS2,
} protocolTypes;

static struct {
        protocolTypes proto;
        const char *name;
} devproto[] = {
        { MOUSE_PROTO_UNKNOWN,  NULL },
        { MOUSE_PROTO_PS2,      "PS/2" },
        { MOUSE_PROTO_MSC,      "MouseSystems" },
        { MOUSE_PROTO_GPM,      "GPM" },
        { MOUSE_PROTO_EXPPS2,   "ExplorerPS/2" },
};

static const char *
FindDevice(InputInfoPtr pInfo, const char *protocol, int flags)
{
    int fd = -1;
    const char **pdev;

    for (pdev = mouseDevs; *pdev; pdev++) {
        SYSCALL (fd = open(*pdev, O_RDWR | O_NONBLOCK | O_EXCL));
        if (fd == -1) {
#ifdef DEBUG
            ErrorF("Cannot open %s (%s)\n", *pdev, strerror(errno));
#endif
        } else
            break;
    }

    if (*pdev) {
        close(fd);
        /* Set the Device option. */
        pInfo->options =
            xf86AddNewOption(pInfo->options, "Device", *pdev);
        xf86Msg(X_INFO, "%s: Setting Device option to \"%s\"\n",
                pInfo->name, *pdev);
    }

    return *pdev;
}

static const char *
lnxMouseMagic(InputInfoPtr pInfo)
{
    int fd = -1;
    const char *dev;
    char *realdev;
    struct stat sbuf;
    int i;
    int proto = MOUSE_PROTO_UNKNOWN;

    dev = xf86SetStrOption(pInfo->options, "Device", NULL);
    if (!dev) {
#ifdef DEBUG
        ErrorF("xf86SetStrOption failed to return the device name\n");
#endif
        return NULL;
    }
    /* Look at the device name to guess the protocol. */
    realdev = NULL;
    if (strcmp(dev, DEFAULT_MOUSE_DEV) == 0) {
        if (lstat(dev, &sbuf) != 0) {
#ifdef DEBUG
            ErrorF("lstat failed for %s (%s)\n", dev, strerror(errno));
#endif
            return NULL;
        }
        if (S_ISLNK(sbuf.st_mode)) {
            realdev = xnfalloc(PATH_MAX + 1);
            i = readlink(dev, realdev, PATH_MAX);
            if (i <= 0) {
#ifdef DEBUG
                ErrorF("readlink failed for %s (%s)\n", dev, strerror(errno));
#endif
                free(realdev);
                return NULL;
            }
            realdev[i] = '\0';
        }
    }
    if (!realdev)
        realdev = xnfstrdup(dev);
    else {
        /* If realdev doesn't contain a '/' then prepend "/dev/" */
        if (!strchr(realdev, '/')) {
            char *tmp = xnfalloc(strlen(realdev) + 5 + 1);
            sprintf(tmp, "/dev/%s", realdev);
            free(realdev);
            realdev = tmp;
        }
    }

    if (strcmp(realdev, DEFAULT_MOUSE_DEV) == 0)
        proto = MOUSE_PROTO_EXPPS2;
    else if (strcmp(realdev, DEFAULT_PS2_DEV) == 0)
        proto = MOUSE_PROTO_EXPPS2;
    else if (strcmp(realdev, DEFAULT_GPM_DATA_DEV) == 0)
        proto = MOUSE_PROTO_MSC;
    else if (strcmp(realdev, DEFAULT_GPM_CTL_DEV) == 0)
        proto = MOUSE_PROTO_GPM;
    free(realdev);
    /*
     * If the protocol can't be guessed from the device name,
     * try to characterise it.
     */
    if (proto == MOUSE_PROTO_UNKNOWN) {
        SYSCALL (fd = open(dev, O_RDWR | O_NONBLOCK | O_EXCL));
        if (isatty(fd)) {
            /* Serial PnP has already failed, so give up. */
        } else {
            if (fstat(fd, &sbuf) != 0) {
#ifdef DEBUG
                ErrorF("fstat failed for %s (%s)\n", dev, strerror(errno));
#endif
                close(fd);
                return NULL;
            }
            if (S_ISFIFO(sbuf.st_mode)) {
                /* Assume GPM data in MSC format. */
                proto = MOUSE_PROTO_MSC;
            } else {
                /* Default to PS/2 */
                proto = MOUSE_PROTO_PS2;
            }
        }
        close(fd);
    }
    if (proto == MOUSE_PROTO_UNKNOWN) {
        xf86Msg(X_ERROR, "%s: Cannot find mouse protocol.\n",
                pInfo->name);
        return NULL;
    } else {
        for (i = 0; i < sizeof(devproto)/sizeof(devproto[0]); i++) {
            if (devproto[i].proto == proto) {
                xf86Msg(X_INFO,
                        "%s: Setting mouse protocol to \"%s\"\n",
                        pInfo->name, devproto[i].name);
                return devproto[i].name;
            }
        }
    }
    return NULL;
}

static const char *
GuessProtocol(InputInfoPtr pInfo, int flags)
{
    return lnxMouseMagic(pInfo);
}

static const char *
SetupAuto(InputInfoPtr pInfo, int *protoPara)
{
    return lnxMouseMagic(pInfo);
}

OSMouseInfoPtr
OSMouseInit(int flags)
{
    OSMouseInfoPtr p;

    p = calloc(sizeof(OSMouseInfoRec), 1);
    if (!p)
        return NULL;
    p->SupportedInterfaces = SupportedInterfaces;
    p->DefaultProtocol = DefaultProtocol;
    p->FindDevice = FindDevice;
    p->GuessProtocol = GuessProtocol;
    p->SetupAuto = SetupAuto;
    return p;
}

@


1.3
log
@update to xf86-input-mouse 1.7.0

ok matthieu@@
@
text
@d32 4
a35 4
#define DEFAULT_MOUSE_DEV		"/dev/input/mice"
#define DEFAULT_PS2_DEV			"/dev/psaux"
#define DEFAULT_GPM_DATA_DEV		"/dev/gpmdata"
#define DEFAULT_GPM_CTL_DEV		"/dev/gpmdata"
d38 4
a41 4
	DEFAULT_MOUSE_DEV,
	DEFAULT_PS2_DEV,
	DEFAULT_GPM_DATA_DEV,
	NULL
d45 6
a50 6
	MOUSE_PROTO_UNKNOWN = 0,
	MOUSE_PROTO_SERIAL,
	MOUSE_PROTO_PS2,
	MOUSE_PROTO_MSC,
	MOUSE_PROTO_GPM,
	MOUSE_PROTO_EXPPS2,
d54 2
a55 2
	protocolTypes proto;
	const char *name;
d57 5
a61 5
	{ MOUSE_PROTO_UNKNOWN,	NULL },
	{ MOUSE_PROTO_PS2,	"PS/2" },
	{ MOUSE_PROTO_MSC,	"MouseSystems" },
	{ MOUSE_PROTO_GPM,	"GPM" },
	{ MOUSE_PROTO_EXPPS2,   "ExplorerPS/2" },
d71 2
a72 2
	SYSCALL (fd = open(*pdev, O_RDWR | O_NONBLOCK | O_EXCL));
	if (fd == -1) {
d74 1
a74 1
	    ErrorF("Cannot open %s (%s)\n", *pdev, strerror(errno));
d76 2
a77 2
	} else
	    break;
d81 6
a86 6
	close(fd);
	/* Set the Device option. */
	pInfo->options =
	    xf86AddNewOption(pInfo->options, "Device", *pdev);
	xf86Msg(X_INFO, "%s: Setting Device option to \"%s\"\n",
		pInfo->name, *pdev);
d105 1
a105 1
	ErrorF("xf86SetStrOption failed to return the device name\n");
d107 1
a107 1
	return NULL;
d112 1
a112 1
	if (lstat(dev, &sbuf) != 0) {
d114 1
a114 1
	    ErrorF("lstat failed for %s (%s)\n", dev, strerror(errno));
d116 6
a121 6
	    return NULL;
	}
	if (S_ISLNK(sbuf.st_mode)) {
	    realdev = xnfalloc(PATH_MAX + 1);
	    i = readlink(dev, realdev, PATH_MAX);
	    if (i <= 0) {
d123 1
a123 1
		ErrorF("readlink failed for %s (%s)\n", dev, strerror(errno));
d125 5
a129 5
		free(realdev);
		return NULL;
	    }
	    realdev[i] = '\0';
	}
d132 1
a132 1
	realdev = xnfstrdup(dev);
d134 7
a140 7
	/* If realdev doesn't contain a '/' then prepend "/dev/" */
	if (!strchr(realdev, '/')) {
	    char *tmp = xnfalloc(strlen(realdev) + 5 + 1);
	    sprintf(tmp, "/dev/%s", realdev);
	    free(realdev);
	    realdev = tmp;
	}
d144 1
a144 1
	proto = MOUSE_PROTO_EXPPS2;
d146 1
a146 1
	proto = MOUSE_PROTO_EXPPS2;
d148 1
a148 1
	proto = MOUSE_PROTO_MSC;
d150 1
a150 1
	proto = MOUSE_PROTO_GPM;
d157 5
a161 5
	SYSCALL (fd = open(dev, O_RDWR | O_NONBLOCK | O_EXCL));
	if (isatty(fd)) {
	    /* Serial PnP has already failed, so give up. */
	} else {
	    if (fstat(fd, &sbuf) != 0) {
d163 1
a163 1
		ErrorF("fstat failed for %s (%s)\n", dev, strerror(errno));
d165 12
a176 12
		close(fd);
		return NULL;
	    }
	    if (S_ISFIFO(sbuf.st_mode)) {
		/* Assume GPM data in MSC format. */
		proto = MOUSE_PROTO_MSC;
	    } else {
		/* Default to PS/2 */
		proto = MOUSE_PROTO_PS2;
	    }
	}
	close(fd);
d179 3
a181 3
	xf86Msg(X_ERROR, "%s: Cannot find mouse protocol.\n",
		pInfo->name);
	return NULL;
d183 8
a190 8
	for (i = 0; i < sizeof(devproto)/sizeof(devproto[0]); i++) {
	    if (devproto[i].proto == proto) {
		xf86Msg(X_INFO,
			"%s: Setting mouse protocol to \"%s\"\n",
			pInfo->name, devproto[i].name);
		return devproto[i].name;
	    }
	}
d214 1
a214 1
	return NULL;
@


1.2
log
@Update to xf86-input-mouse 1.6.0.
ok matthieu@@
@
text
@d14 1
a14 1
#include "xf86OSmouse.h"
d83 2
a84 2
	pInfo->conf_idev->commonOptions =
	    xf86AddNewOption(pInfo->conf_idev->commonOptions, "Device", *pdev);
d102 1
a102 1
    dev = xf86SetStrOption(pInfo->conf_idev->commonOptions, "Device", NULL);
d125 1
a125 1
		xfree(realdev);
d138 1
a138 1
	    xfree(realdev);
d151 1
a151 1
    xfree(realdev);
d207 2
a208 2
_X_EXPORT OSMouseInfoPtr
xf86OSMouseInit(int flags)
d212 1
a212 1
    p = xcalloc(sizeof(OSMouseInfoRec), 1);
@


1.1
log
@update to xf86-input-mouse 1.4.0.
@
text
@d10 1
@

