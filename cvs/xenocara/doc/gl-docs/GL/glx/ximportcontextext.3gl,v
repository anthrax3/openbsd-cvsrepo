head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.24
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.10.24.10.14.44;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.29.17.01.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.02;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix a bunch of .TH syntax errors
ok matthieu@@
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp Feb 16 02:56
.ds Dm  Feb 10 17:2
.ds Xs 38402 4 ximportcontextext.gl
.TH GLXIMPORTCONTEXTEXT 3
.SH NAME
glXImportContextEXT
\- import another process's indirect rendering context.

.SH C SPECIFICATION
GLXContext \f3glXImportContextEXT\fP(
Display \fI*dpy\fP,
.nf
.ta \w'\f3GLXContext \fPglXImportContextEXT( 'u
	GLXContextID \fIcontextID\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIcontextID\fP\ \ 'u 
\f2dpy\fP
Specifies the connection to the X server.

.TP
\f2contextID\fP
Specifies a GLX rendering context.

.SH DESCRIPTION
\f3glXImportContextEXT\fP creates a GLXContext given the XID of an existing GLXContext.
It may be used in place of \f3glXCreateContext\fP,
to share another process's indirect rendering context.
.P
Only the server-side context information can be shared between
X clients; client-side state, such as pixel storage modes,
cannot be shared. Thus, \f3glXImportContextEXT\fP must allocate memory to store
client-side information. This memory is freed by calling
\f3glXFreeContextEXT\fP.
.P
This call does not create a new XID.  It merely makes an
existing object available to the importing client (Display *).
Like any XID, it goes away when the creating client drops its
connection or the ID is explicitly deleted. Note that this is
when the XID goes away. The object goes away when the XID
goes away AND the context is not current to any thread.
.P
If \f2contextID\fP refers to a
direct rendering context then no error is generated but
\f3glXImportContextEXT\fP returns NULL.
.P
\f3glXImportContextEXT\fP is part of the \f3EXT_import_context\fP extension,
not part of the core GLX command set. If \f3GLX_EXT_import_context\fP
is included in the string returned by \f3glXQueryExtensionsString\fP,
when called with argument \f3GLX_EXTENSIONS\fP,
extension \f3EXT_import_context\fP is supported.

.SH ERRORS
\f3GLXBadContext\fP is generated if \f2contextID\fP does not
refer to a valid context.

.SH SEE ALSO
\f3glXCreateContext\fP,
\f3glXQueryVersion\fP,
\f3glXQueryExtensionsString\fP,
\f3glXGetContextIDEXT\fP,
\f3glXFreeContextEXT\fP
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
.TH GLXIMPORTCONTEXTEXT
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
