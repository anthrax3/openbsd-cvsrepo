head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.24
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.10.24.10.14.44;	author schwarze;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.29.17.01.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.02;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix a bunch of .TH syntax errors
ok matthieu@@
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp Feb 16 02:56
.ds Dm  Feb 10 17:2
.ds Xs 58040 5 xswapbuffers.gl
.TH GLXSWAPBUFFERS 3
.SH NAME
glXSwapBuffers
\- exchange front and back buffers

.SH C SPECIFICATION
void \f3glXSwapBuffers\fP(
Display \fI*dpy\fP,
.nf
.ta \w'\f3void \fPglXSwapBuffers( 'u
	GLXDrawable \fIdrawable\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIdrawable\fP\ \ 'u 
\f2dpy\fP
Specifies the connection to the X server.
.TP
\f2drawable\fP
Specifies the drawable whose buffers are to be swapped.
.SH DESCRIPTION
\f3glXSwapBuffers\fP promotes the contents of the back buffer of \f2drawable\fP to become
the contents of the front buffer of \f2drawable\fP.
The contents of the back buffer then become undefined.
The update typically takes place during the vertical retrace of
the monitor,
rather than immediately after \f3glXSwapBuffers\fP is called.
.P
\f3glXSwapBuffers\fP performs an implicit \f3glFlush\fP before it returns.
Subsequent OpenGL commands may be issued immediately after calling \f3glXSwapBuffers\fP,
but are not executed until the buffer exchange is completed.
.P
If \f2drawable\fP was not created with respect to a double-buffered visual,
\f3glXSwapBuffers\fP has no effect,
and no error is generated.
.SH NOTES
The contents of the back buffer become undefined after
a swap. Note that this applies to pbuffers as well as windows.
.P
All GLX rendering contexts share the same notion of which are front buffers
and which are back buffers.
One consequence is that when multiple clients are rendering to the same
double-buffered window,
all of them should finish rendering before one of them issues the command
to swap buffers.
The clients are responsible for implementing this synchronization.
Typically this is accomplished by executing \f3glFinish\fP and then
using a semaphore in shared memory to rendezvous before swapping.
.SH ERRORS
\f3GLXBadDrawable\fP is generated if \f2drawable\fP is not a valid GLX drawable.
.P
\f3GLXBadCurrentWindow\fP is generated if \f2dpy\fP and \f2drawable\fP are
respectively the display and drawable associated with the current
context of the calling thread, and \f2drawable\fP identifies a window that
is no longer valid.
.SH SEE ALSO
\f3glFlush\fP,
\f3glXBindSwapBarrierSGIX\fP,
\f3glXJoinSwapGroupSGIX\fP,
\f3glXSwapIntervalSGI\fP

@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
.TH GLXSWAPBUFFERS
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
