head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.01.01;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.01;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" te
'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 vertex.gl
.ds Xs 13679 4 vertex.gl
.TH GLVERTEX 3G
.SH NAME
.B "glVertex2d, glVertex2f, glVertex2i, glVertex2s, glVertex3d, glVertex3f, glVertex3i, glVertex3s, glVertex4d, glVertex4f, glVertex4i, glVertex4s, glVertex2dv, glVertex2fv, glVertex2iv, glVertex2sv, glVertex3dv, glVertex3fv, glVertex3iv, glVertex3sv, glVertex4dv, glVertex4fv, glVertex4iv, glVertex4sv
\- specify a vertex

.SH C SPECIFICATION
void \f3glVertex2d\fP(
GLdouble \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex2d( 'u
	GLdouble \fIy\fP )
.fi
void \f3glVertex2f\fP(
GLfloat \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex2f( 'u
	GLfloat \fIy\fP )
.fi
void \f3glVertex2i\fP(
GLint \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex2i( 'u
	GLint \fIy\fP )
.fi
void \f3glVertex2s\fP(
GLshort \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex2s( 'u
	GLshort \fIy\fP )
.fi
void \f3glVertex3d\fP(
GLdouble \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex3d( 'u
	GLdouble \fIy\fP,
	GLdouble \fIz\fP )
.fi
void \f3glVertex3f\fP(
GLfloat \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex3f( 'u
	GLfloat \fIy\fP,
	GLfloat \fIz\fP )
.fi
void \f3glVertex3i\fP(
GLint \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex3i( 'u
	GLint \fIy\fP,
	GLint \fIz\fP )
.fi
void \f3glVertex3s\fP(
GLshort \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex3s( 'u
	GLshort \fIy\fP,
	GLshort \fIz\fP )
.fi
void \f3glVertex4d\fP(
GLdouble \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex4d( 'u
	GLdouble \fIy\fP,
	GLdouble \fIz\fP,
	GLdouble \fIw\fP )
.fi
void \f3glVertex4f\fP(
GLfloat \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex4f( 'u
	GLfloat \fIy\fP,
	GLfloat \fIz\fP,
	GLfloat \fIw\fP )
.fi
void \f3glVertex4i\fP(
GLint \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex4i( 'u
	GLint \fIy\fP,
	GLint \fIz\fP,
	GLint \fIw\fP )
.fi
void \f3glVertex4s\fP(
GLshort \fIx\fP,
.nf
.ta \w'\f3void \fPglVertex4s( 'u
	GLshort \fIy\fP,
	GLshort \fIz\fP,
	GLshort \fIw\fP )
.fi

.SH PARAMETERS
.TP \w'\f2x\fP\ \f2y\fP\ \f2z\fP\ \f2w\fP\ \ 'u 
\f2x\fP, \f2y\fP, \f2z\fP, \f2w\fP
Specify \f2x\fP, \f2y\fP, \f2z\fP, and \f2w\fP coordinates of a vertex.
Not all parameters are present in all forms of the command.
.SH C SPECIFICATION
void \f3glVertex2dv\fP(
const GLdouble \fI*v\fP )
.nf
.fi
void \f3glVertex2fv\fP(
const GLfloat \fI*v\fP )
.nf
.fi
void \f3glVertex2iv\fP(
const GLint \fI*v\fP )
.nf
.fi
void \f3glVertex2sv\fP(
const GLshort \fI*v\fP )
.nf
.fi
void \f3glVertex3dv\fP(
const GLdouble \fI*v\fP )
.nf
.fi
void \f3glVertex3fv\fP(
const GLfloat \fI*v\fP )
.nf
.fi
void \f3glVertex3iv\fP(
const GLint \fI*v\fP )
.nf
.fi
void \f3glVertex3sv\fP(
const GLshort \fI*v\fP )
.nf
.fi
void \f3glVertex4dv\fP(
const GLdouble \fI*v\fP )
.nf
.fi
void \f3glVertex4fv\fP(
const GLfloat \fI*v\fP )
.nf
.fi
void \f3glVertex4iv\fP(
const GLint \fI*v\fP )
.nf
.fi
void \f3glVertex4sv\fP(
const GLshort \fI*v\fP )
.nf
.fi

.SH PARAMETERS
.TP
\f2v\fP
Specifies a pointer to an array of two, three, or four elements.
The elements of a two-element array are \f2x\fP and \f2y\fP;
of a three-element array, \f2x\fP, \f2y\fP, and \f2z\fP;
and of a four-element array, \f2x\fP, \f2y\fP, \f2z\fP, and \f2w\fP.
.SH DESCRIPTION
\%\f3glVertex\fP commands are used within \%\f3glBegin\fP/\%\f3glEnd\fP pairs to specify
point, line, and polygon vertices.
The current color,
normal,
and texture coordinates are associated with the vertex when \%\f3glVertex\fP is called.
.P
When only \f2x\fP and \f2y\fP are specified,
\f2z\fP defaults to 0 and \f2w\fP defaults to 1.
When \f2x, y,\fP and \f2z\fP are specified,
\f2w\fP defaults to 1.
.SH NOTES
Invoking \%\f3glVertex\fP outside of a \%\f3glBegin\fP/\%\f3glEnd\fP pair
results in undefined behavior.
.SH SEE ALSO
\%\f3glBegin(3G)\fP,
\%\f3glCallList(3G)\fP,
\%\f3glColor(3G)\fP,
\%\f3glEdgeFlag(3G)\fP,
\%\f3glEvalCoord(3G)\fP,
\%\f3glIndex(3G)\fP,
\%\f3glMaterial(3G)\fP,
.br
\%\f3glNormal(3G)\fP,
\%\f3glRect(3G)\fP,
\%\f3glTexCoord(3G)\fP,
\%\f3glVertexPointer(3G)\fP
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
