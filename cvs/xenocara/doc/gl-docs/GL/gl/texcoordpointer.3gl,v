head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.40
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.00.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.00.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" te
'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 texcoordp
.ds Xs 65158 7 texcoordpointer.gl
.TH GLTEXCOORDPOINTER 3G
.SH NAME
.B "glTexCoordPointer
\- define an array of texture coordinates

.SH C SPECIFICATION
void \f3glTexCoordPointer\fP(
GLint \fIsize\fP,
.nf
.ta \w'\f3void \fPglTexCoordPointer( 'u
	GLenum \fItype\fP,
	GLsizei \fIstride\fP,
	const GLvoid \fI*ptr\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIstride\fP\ \ 'u 
\f2size\fP
Specifies the number of coordinates per array element. Must be 1, 2, 3
or 4. The initial value is 4.
.TP
\f2type\fP
Specifies the data type of each texture coordinate.
Symbolic constants
\%\f3GL_SHORT\fP,
\%\f3GL_INT\fP,
\%\f3GL_FLOAT\fP,
or \%\f3GL_DOUBLE\fP
are accepted. The initial value is \%\f3GL_FLOAT\fP.
.TP
\f2stride\fP
Specifies the byte offset between consecutive array elements.
If \f2stride\fP is 0, the array elements are understood 
to be tightly packed. The initial value is 0.
.TP
\f2ptr\fP
Specifies a pointer to the first coordinate of the first element in the 
array.  The initial value is 0.
.SH DESCRIPTION
\%\f3glTexCoordPointer\fP specifies the location and data  of an array of texture
coordinates to use when rendering.
\f2size\fP specifies the number of coordinates per
element, and must be 1, 2, 3, or 4.
\f2type\fP specifies the data type of each texture coordinate
and \f2stride\fP specifies the byte stride from one
array element to the next allowing vertices and attributes
to be packed into a single array or stored in separate arrays.
(Single-array storage may be more efficient on some implementations;
see 
.br
\%\f3glInterleavedArrays\fP.)
When a texture
coordinate array is specified, \f2size\fP, \f2type\fP, \f2stride\fP, and \f2ptr\fP
are saved client-side state. 
.P
To enable and disable the texture coordinate array, call 
\%\f3glEnableClientState\fP and \%\f3glDisableClientState\fP with the argument
\%\f3GL_TEXTURE_COORD_ARRAY\fP. If 
enabled, the texture coordinate array is used
when \%\f3glDrawArrays\fP, \%\f3glDrawElements\fP, \%\f3glDrawRangeElements\fP or 
\%\f3glArrayElement\fP is called.
.P
Use \%\f3glDrawArrays\fP to construct a sequence of primitives (all of the
same type) from prespecified vertex and vertex attribute arrays.
Use \%\f3glArrayElement\fP to specify primitives
by indexing vertices and vertex attributes and \%\f3glDrawElements\fP to
construct a sequence of primitives by indexing vertices and vertex attributes.
.SH NOTES
\%\f3glTexCoordPointer\fP is available only if the GL version is 1.1 or greater.
.P
The texture coordinate array is initially disabled and it won't be
accessed when 
\%\f3glArrayElement\fP, \%\f3glDrawElements\fP, \%\f3glDrawRangeElements\fP, or
\%\f3glDrawArrays\fP is called. 
.P
Execution of \%\f3glTexCoordPointer\fP is not allowed between the execution of
\%\f3glBegin\fP and the corresponding execution of \%\f3glEnd\fP,
but an error may or may not be generated. If no error is generated,
the operation is undefined.
.P
\%\f3glTexCoordPointer\fP is typically implemented on the client side with no protocol.
.P
The texture coordinate array parameters are client-side state and are
therefore not saved or restored by \%\f3glPushAttrib\fP and \%\f3glPopAttrib\fP.
Use \%\f3glPushClientAttrib\fP and 
\%\f3glPopClientAttrib\fP instead.
.P
When the \%\f3GL_ARB_imaging\fP extension is supported, \%\f3glTexCoordPointer\fP updates the
texture coordinate array state of the active client texture unit,
specified with \%\f3glClientActiveTextureARB\fP.
.SH ERRORS
\%\f3GL_INVALID_VALUE\fP is generated if \f2size\fP is not 1, 2, 3, or 4.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not an accepted value.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2stride\fP is negative.
.SH ASSOCIATED GETS  
\%\f3glIsEnabled\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY\fP
.br
\%\f3glGet\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP
.br
\%\f3glGet\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP
.br
\%\f3glGetPointerv\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_POINTER\fP
.SH SEE ALSO 
\%\f3glArrayElement(3G)\fP,
\%\f3glClientActiveTextureARB(3G)\fP,
\%\f3glColorPointer(3G)\fP,
\%\f3glDrawArrays(3G)\fP,
\%\f3glDrawElements(3G)\fP,
\%\f3glDrawRangeElements(3G)\fP,
\%\f3glEdgeFlagPointer(3G)\fP,
\%\f3glEnable(3G)\fP,
\%\f3glGetPointerv(3G)\fP,
\%\f3glIndexPointer(3G)\fP,
\%\f3glNormalPointer(3G)\fP,
\%\f3glPopClientAttrib(3G)\fP,
\%\f3glPushClientAttrib(3G)\fP,
\%\f3glTexCoord(3G)\fP,
\%\f3glVertexPointer(3G)\fP
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
