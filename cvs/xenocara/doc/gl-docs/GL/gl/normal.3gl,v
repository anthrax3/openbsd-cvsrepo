head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.00.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.00.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" te
'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 normal.gl
.ds Xs 22982 4 normal.gl
.TH GLNORMAL 3G
.SH NAME
.B "glNormal3b, glNormal3d, glNormal3f, glNormal3i, glNormal3s, glNormal3bv, glNormal3dv, glNormal3fv, glNormal3iv, glNormal3sv
\- set the current normal vector

.EQ
delim $$
.EN
.SH C SPECIFICATION
void \f3glNormal3b\fP(
GLbyte \fInx\fP,
.nf
.ta \w'\f3void \fPglNormal3b( 'u
	GLbyte \fIny\fP,
	GLbyte \fInz\fP )
.fi
void \f3glNormal3d\fP(
GLdouble \fInx\fP,
.nf
.ta \w'\f3void \fPglNormal3d( 'u
	GLdouble \fIny\fP,
	GLdouble \fInz\fP )
.fi
void \f3glNormal3f\fP(
GLfloat \fInx\fP,
.nf
.ta \w'\f3void \fPglNormal3f( 'u
	GLfloat \fIny\fP,
	GLfloat \fInz\fP )
.fi
void \f3glNormal3i\fP(
GLint \fInx\fP,
.nf
.ta \w'\f3void \fPglNormal3i( 'u
	GLint \fIny\fP,
	GLint \fInz\fP )
.fi
void \f3glNormal3s\fP(
GLshort \fInx\fP,
.nf
.ta \w'\f3void \fPglNormal3s( 'u
	GLshort \fIny\fP,
	GLshort \fInz\fP )
.fi

.SH PARAMETERS
.TP \w'\f2nx\fP\ \f2ny\fP\ \f2nz\fP\ \ 'u 
\f2nx\fP, \f2ny\fP, \f2nz\fP
Specify the $x$, $y$, and $z$ coordinates of the new current normal.
The initial value of the current normal is the unit vector, (0, 0, 1).
.P
.SH C SPECIFICATION
void \f3glNormal3bv\fP(
const GLbyte \fI*v\fP )
.nf
.fi
void \f3glNormal3dv\fP(
const GLdouble \fI*v\fP )
.nf
.fi
void \f3glNormal3fv\fP(
const GLfloat \fI*v\fP )
.nf
.fi
void \f3glNormal3iv\fP(
const GLint \fI*v\fP )
.nf
.fi
void \f3glNormal3sv\fP(
const GLshort \fI*v\fP )
.nf
.fi

.SH PARAMETERS
.TP
\f2v\fP
Specifies a pointer to an array of three elements:
the $x$, $y$, and $z$ coordinates of the new current normal.
.P
.SH DESCRIPTION
The current normal is set to the given coordinates
whenever \%\f3glNormal\fP is issued.
Byte, short, or integer arguments are converted to floating-point
 with a linear mapping that maps the most positive representable integer
value to 1.0,
and the most negative representable integer value to \-1.0.
.P
Normals specified with \%\f3glNormal\fP need not have unit length.
If \%\f3GL_NORMALIZE\fP is enabled,
then normals of any length specified with \%\f3glNormal\fP are normalized after transformation.
If \%\f3GL_RESCALE_NORMAL\fP is enabled, normals are scaled by a scaling factor
derived from the modelview matrix.  \%\f3GL_RESCALE_NORMAL\fP requires that the
originally specified normals were of unit length, and that the modelview
matrix contain only uniform scales for proper results.
To enable and disable normalization, call \%\f3glEnable\fP and \%\f3glDisable\fP
with either \%\f3GL_NORMALIZE\fP or \%\f3GL_RESCALE_NORMAL\fP.
Normalization is initially disabled.
.SH NOTES
The current normal can be updated at any time.
In particular, \%\f3glNormal\fP can be called between a call to \%\f3glBegin\fP and
the corresponding call to \%\f3glEnd\fP.
.SH ASSOCIATED GETS
\%\f3glGet\fP with argument \%\f3GL_CURRENT_NORMAL\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_NORMALIZE\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_RESCALE_NORMAL\fP
.SH SEE ALSO
\%\f3glBegin(3G)\fP,
\%\f3glColor(3G)\fP,
\%\f3glIndex(3G)\fP,
\%\f3glNormalPointer(3G)\fP,
\%\f3glTexCoord(3G)\fP,
\%\f3glVertex(3G)\fP
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
