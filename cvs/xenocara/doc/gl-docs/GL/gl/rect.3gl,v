head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.00.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.00.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Jan 14 18:30
.ds Dm 01 rect.gl -
.ds Xs 25554 4 rect.gl
.TH GLRECT 3G
.SH NAME
.B "glRectd, glRectf, glRecti, glRects, glRectdv, glRectfv, glRectiv, glRectsv
\- draw a rectangle

.SH C SPECIFICATION
void \f3glRectd\fP(
GLdouble \fIx1\fP,
.nf
.ta \w'\f3void \fPglRectd( 'u
	GLdouble \fIy1\fP,
	GLdouble \fIx2\fP,
	GLdouble \fIy2\fP )
.fi
void \f3glRectf\fP(
GLfloat \fIx1\fP,
.nf
.ta \w'\f3void \fPglRectf( 'u
	GLfloat \fIy1\fP,
	GLfloat \fIx2\fP,
	GLfloat \fIy2\fP )
.fi
void \f3glRecti\fP(
GLint \fIx1\fP,
.nf
.ta \w'\f3void \fPglRecti( 'u
	GLint \fIy1\fP,
	GLint \fIx2\fP,
	GLint \fIy2\fP )
.fi
void \f3glRects\fP(
GLshort \fIx1\fP,
.nf
.ta \w'\f3void \fPglRects( 'u
	GLshort \fIy1\fP,
	GLshort \fIx2\fP,
	GLshort \fIy2\fP )
.fi

.SH PARAMETERS
.TP \w'\f2x1\fP\ \f2y1\fP\ \ 'u 
\f2x1\fP, \f2y1\fP
Specify one vertex of a rectangle.
.TP
\f2x2\fP, \f2y2\fP
Specify the opposite vertex of the rectangle.
.SH C SPECIFICATION
void \f3glRectdv\fP(
const GLdouble \fI*v1\fP,
.nf
.ta \w'\f3void \fPglRectdv( 'u
	const GLdouble \fI*v2\fP )
.fi
void \f3glRectfv\fP(
const GLfloat \fI*v1\fP,
.nf
.ta \w'\f3void \fPglRectfv( 'u
	const GLfloat \fI*v2\fP )
.fi
void \f3glRectiv\fP(
const GLint \fI*v1\fP,
.nf
.ta \w'\f3void \fPglRectiv( 'u
	const GLint \fI*v2\fP )
.fi
void \f3glRectsv\fP(
const GLshort \fI*v1\fP,
.nf
.ta \w'\f3void \fPglRectsv( 'u
	const GLshort \fI*v2\fP )
.fi

.BP
.SH PARAMETERS
.TP
\f2v1\fP
Specifies a pointer to one vertex of a rectangle.
.TP
\f2v2\fP
Specifies a pointer to the opposite vertex of the rectangle.
.SH DESCRIPTION
\%\f3glRect\fP supports efficient specification of rectangles as two corner points.
Each 
rectangle command takes four arguments,
organized either as two consecutive pairs of (\f2x\fP,\f2y\fP) coordinates,
or as two pointers to arrays,
each containing an (\f2x\fP,\f2y\fP) pair.
The resulting rectangle is defined in the \f2z\fP = 0 plane.
.P
\%\f3glRect\fP(\f2x1\fP, \f2y1\fP, \f2x2\fP, \f2y2\fP)
is exactly equivalent to the following sequence:
.Ex 6
glBegin(\%\f3GL_POLYGON\fP);
glVertex2(\f2x1\fP, \f2y1\fP);
glVertex2(\f2x2\fP, \f2y1\fP);
glVertex2(\f2x2\fP, \f2y2\fP);
glVertex2(\f2x1\fP, \f2y2\fP);
glEnd();
.Ee
Note that if the second vertex is above and to the right of the first vertex,
the rectangle is constructed with a counterclockwise winding.
.SH ERRORS
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glRect\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.SH SEE ALSO
\%\f3glBegin(3G)\fP,
\%\f3glVertex(3G)\fP
@


1.1.1.1
log
@OpenGL manual pages from monolithic tree.
@
text
@@
