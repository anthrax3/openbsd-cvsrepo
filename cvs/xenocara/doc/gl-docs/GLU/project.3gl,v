head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.01.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@.\" $XFree86$
'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp May 02 11:53
.ds Dm 37 project.g
.ds Xs 21974 4 project.gl
.TH GLUPROJECT 3G
.SH NAME
.B "gluProject
\- map object coordinates to window coordinates

.SH C SPECIFICATION
GLint \f3gluProject\fP(
GLdouble \fIobjX\fP,
.nf
.ta \w'\f3GLint \fPgluProject( 'u
	GLdouble \fIobjY\fP,
	GLdouble \fIobjZ\fP,
	const GLdouble \fI*model\fP,
	const GLdouble \fI*proj\fP,
	const GLint \fI*view\fP,
	GLdouble* \fIwinX\fP,
	GLdouble* \fIwinY\fP,
	GLdouble* \fIwinZ\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2objX\fP\ \f2objY\fP\ \f2objZ\fP\ \ 'u 
\f2objX\fP, \f2objY\fP, \f2objZ\fP
Specify the object coordinates.
.TP
\f2model\fP
Specifies the current modelview matrix (as from a \f3glGetDoublev\fP call).
.TP
\f2proj\fP
Specifies the current projection matrix (as from a \f3glGetDoublev\fP call).
.TP
\f2view\fP
Specifies the current viewport (as from a \f3glGetIntegerv\fP call).
.TP
\f2winX\fP, \f2winY\fP, \f2winZ\fP
Return the computed window coordinates.
.SH DESCRIPTION
\%\f3gluProject\fP transforms the specified object coordinates into window coordinates
using \f2model\fP, \f2proj\fP, and \f2view\fP. The result is stored 
in \f2winX\fP, \f2winY\fP, and \f2winZ\fP. A return value of 
\%\f3GL_TRUE\fP indicates success, a return value of \%\f3GL_FALSE\fP
indicates failure.
.P
To compute the coordinates,
let $v ~=~ ("objX", "objY", "objZ", 1.0)$
represented as a matrix with 4 rows and 1 column.
Then \%\f3gluProject\fP computes $v sup prime$
as follows: 
.sp
.EQ
v sup prime ~=~ P ~times~ M ~times~ v
.EN
.sp
where $P$ is the current projection matrix \f2proj\fP, $M$ is the current
modelview matrix \f2model\fP (both represented as
$4 times 4$ matrices in column-major order) and '$times$' represents
matrix multiplication. 
.P 
The window coordinates are then computed as follows: 
.sp
.EQ
"winX" ~=~ "view" (0) ~+~ "view" (2) ~*~ (v sup prime (0) ~+~ 1)~/~2 
.EN
.sp
.EQ
"winY" ~=~ "view" (1) ~+~ "view" (3)~*~(v sup prime (1) ~+~ 1)~/~2
.EN
.sp
.EQ
"winZ" ~=~ (v sup prime (2)  ~+~ 1)~/~ 2
.EN
.sp
.SH SEE ALSO
\f3glGet(3G)\fP, \%\f3gluUnProject(3G)\fP

@


1.1.1.1
log
@GLU manual pages from monolithic tree
@
text
@@
