head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.01.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp May 02 11:53
.ds Dm 37 nurbscurv
.ds Xs 25594 5 nurbscurve.gl
.TH GLUNURBSCURVE 3G
.SH NAME
.B "gluNurbsCurve
\- define the shape of a NURBS curve

.SH C SPECIFICATION
void \f3gluNurbsCurve\fP(
GLUnurbs* \fInurb\fP,
.nf
.ta \w'\f3void \fPgluNurbsCurve( 'u
	GLint \fIknotCount\fP,
	GLfloat \fI*knots\fP,
	GLint \fIstride\fP,
	GLfloat \fI*control\fP,
	GLint \fIorder\fP,
	GLenum \fItype\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIknotCount\fP\ \ 'u 
\f2nurb\fP
Specifies the NURBS object (created with \%\f3gluNewNurbsRenderer\fP).
.TP
\f2knotCount\fP
Specifies the number of knots in \f2knots\fP.
\f2knotCount\fP equals the number of control points plus the order.
.TP
\f2knots\fP
Specifies an array of \f2knotCount\fP nondecreasing knot values.
.TP
\f2stride\fP
Specifies the offset (as a number of single-precision floating-point values)
between successive curve control points.
.TP
\f2control\fP
Specifies a pointer to an array of control points. The coordinates must
agree with \f2type\fP, specified below.
.TP
\f2order\fP
Specifies the order of the NURBS curve. \f2order\fP equals degree + 1, hence
a cubic curve has an order of 4.
.TP
\f2type\fP
Specifies the type of the curve. If this curve is defined within a 
\%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair, then 
the type can be any of the valid
one-dimensional evaluator types (such as \%\f3GL_MAP1_VERTEX_3\fP or 
\%\f3GL_MAP1_COLOR_4\fP). Between a \%\f3gluBeginTrim\fP/\%\f3gluEndTrim\fP pair,
the only valid types are \%\f3GLU_MAP1_TRIM_2\fP and \%\f3GLU_MAP1_TRIM_3\fP.
.SH DESCRIPTION
Use \%\f3gluNurbsCurve\fP to describe a NURBS curve.
.P
When \%\f3gluNurbsCurve\fP appears between a \%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair, it is 
used to describe a curve to be rendered.
Positional, texture, and color coordinates are associated
by presenting each as a separate \%\f3gluNurbsCurve\fP between a 
\%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP pair. No more than
one call to \%\f3gluNurbsCurve\fP for each of color, position, and texture
data can be made within a single \%\f3gluBeginCurve\fP/\%\f3gluEndCurve\fP
pair. Exactly one call must be made to describe the position of the 
curve (a \f2type\fP of \%\f3GL_MAP1_VERTEX_3\fP or \%\f3GL_MAP1_VERTEX_4\fP).
.P
When \%\f3gluNurbsCurve\fP appears between a \%\f3gluBeginTrim\fP/\%\f3gluEndTrim\fP pair, it is 
used to describe a trimming curve on a NURBS surface. If \f2type\fP is
\%\f3GLU_MAP1_TRIM_2\fP, then it describes a curve in two-dimensional (\f2u\fP 
and \f2v\fP)
parameter space. If it is \%\f3GLU_MAP1_TRIM_3\fP, then it describes a 
curve in two-dimensional homogeneous (\f2u\fP, \f2v\fP, and \f2w\fP) 
parameter space.
See the \%\f3gluBeginTrim\fP reference page for more discussion about trimming
curves.
.SH EXAMPLE
The following commands render a textured NURBS curve with normals:
.sp
.Ex
gluBeginCurve(nobj);
   gluNurbsCurve(nobj, ..., GL_MAP1_TEXTURE_COORD_2);
   gluNurbsCurve(nobj, ..., GL_MAP1_NORMAL);
   gluNurbsCurve(nobj, ..., GL_MAP1_VERTEX_4);
gluEndCurve(nobj);
.Ee
.sp
.SH NOTES
To define trim curves which stitch well, use \%\f3gluPwlCurve\fP.
.SH SEE ALSO
\%\f3gluBeginCurve(3G)\fP, \%\f3gluBeginTrim(3G)\fP, \%\f3gluNewNurbsRenderer(3G)\fP, \%\f3gluPwlCurve(3G)\fP

@


1.1.1.1
log
@GLU manual pages from monolithic tree
@
text
@@
