head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v6_9_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.29.17.01.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.29.17.01.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@'\" e
'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp May 02 11:53
.ds Dm 37 unproject
.ds Xs 63442 4 unproject.gl
.TH GLUUNPROJECT 3G
.SH NAME
.B "gluUnProject
\- map window coordinates to object coordinates

.SH C SPECIFICATION
GLint \f3gluUnProject\fP(
GLdouble \fIwinX\fP,
.nf
.ta \w'\f3GLint \fPgluUnProject( 'u
	GLdouble \fIwinY\fP,
	GLdouble \fIwinZ\fP,
	const GLdouble \fI*model\fP,
	const GLdouble \fI*proj\fP,
	const GLint \fI*view\fP,
	GLdouble* \fIobjX\fP,
	GLdouble* \fIobjY\fP,
	GLdouble* \fIobjZ\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2winX\fP\ \f2winY\fP\ \f2winZ\fP\ \ 'u 
\f2winX\fP, \f2winY\fP, \f2winZ\fP
Specify the window coordinates to be mapped.
.TP
\f2model\fP
Specifies the modelview matrix (as from a \f3glGetDoublev\fP call).
.TP
\f2proj\fP
Specifies the projection matrix (as from a \f3glGetDoublev\fP call).
.TP
\f2view\fP
Specifies the viewport (as from a \f3glGetIntegerv\fP call).
.TP
\f2objX\fP, \f2objY\fP, \f2objZ\fP
Returns the computed object coordinates.
.SH DESCRIPTION
\%\f3gluUnProject\fP maps the specified window coordinates into object 
coordinates using \f2model\fP, \f2proj\fP, and \f2view\fP.
The result is stored in \f2objX\fP, \f2objY\fP, and \f2objZ\fP. A return value of 
\%\f3GL_TRUE\fP indicates success; a return value of \%\f3GL_FALSE\fP
indicates failure.
.P
To compute the coordinates (\f2objX\fP, \f2objY\fP, and \f2objZ\fP),
\%\f3gluUnProject\fP multiplies the normalized device coordinates by the inverse of
\f2model\fP*\f2proj\fP as follows:

.P
.ce
.EQ
left ( down 70 {cpile { ~"objX" above ~"objY" above ~"objZ"
above ~W}} ~~ right ) ~=~ INV(P M) 
left ( down 140 {cpile { 
{ {2("winX" ~-~ "view"[0])} over {"view" [2]} ~-~ 1 }
above 
{ {2("winY" ~-~ "view"[1])} over {"view"[3]} ~-~ 1 }
above 
{ 2("winZ") ~-~ 1 }
above 
1}} ~~ right )
.EN
.bp
$INV()$ denotes matrix inversion. 
W is an unused variable, included for consistent matrix notation.
.SH SEE ALSO
\f3glGet(3G)\fP, \%\f3gluProject(3G)\fP
@


1.1.1.1
log
@GLU manual pages from monolithic tree
@
text
@@
