head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	v7_1O_3:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.09.05.15.12.02;	author jsg;	state dead;
branches;
next	1.2;

1.2
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.13.12.43.34;	author mpi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.07.13.12.43.34;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.3
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@/* This file is autogenerated by u_format_table.py from u_format.csv. Do not edit directly. */

/**************************************************************************
 *
 * Copyright 2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "u_format.h"
#include "u_format_s3tc.h"
#include "u_format_rgtc.h"
#include "u_format_latc.h"


#include "pipe/p_compiler.h"
#include "u_math.h"
#include "u_half.h"
#include "u_format.h"
#include "u_format_other.h"
#include "u_format_srgb.h"
#include "u_format_yuv.h"
#include "u_format_zs.h"

union util_format_none {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_none_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_none_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_none_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_none_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_none_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8a8_unorm {
   uint32_t value;
   struct {
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_b8g8r8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_b8g8r8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[2]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[0]) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8x8_unorm {
   uint32_t value;
   struct {
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
   } chan;
};

static INLINE void
util_format_b8g8r8x8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b8g8r8x8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[2]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[0]) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8r8g8b8_unorm {
   uint32_t value;
   struct {
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_a8r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((src[0]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[2]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8r8g8b8_unorm {
   uint32_t value;
   struct {
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_x8r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_x8r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((src[0]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[2]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8b8g8r8_unorm {
   uint32_t value;
   struct {
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
   } chan;
};

static INLINE void
util_format_a8b8g8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8b8g8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((src[2]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[0]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8b8g8r8_unorm {
   uint32_t value;
   struct {
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
   } chan;
};

static INLINE void
util_format_x8b8g8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_x8b8g8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((src[2]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[0]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_unorm {
   uint32_t value;
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
   } chan;
};

static INLINE void
util_format_r8g8b8x8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8x8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[0]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[2]) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g5r5x1_unorm {
   uint16_t value;
   struct {
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned x:1;
   } chan;
};

static INLINE void
util_format_b5g5r5x1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b5g5r5x1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g5r5a1_unorm {
   uint16_t value;
   struct {
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned a:1;
   } chan;
};

static INLINE void
util_format_b5g5r5a1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
         value |= ((uint16_t)(CLAMP(src[3], 0, 1) * 0x1)) << 15;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
}

static INLINE void
util_format_b5g5r5a1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x1); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
         value |= ((uint16_t)(src[3] >> 7)) << 15;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b4g4r4a4_unorm {
   uint16_t value;
   struct {
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned a:4;
   } chan;
};

static INLINE void
util_format_b4g4r4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
         value |= ((uint16_t)(CLAMP(src[3], 0, 1) * 0xf)) << 12;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
}

static INLINE void
util_format_b4g4r4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
         value |= ((uint16_t)(src[3] >> 4)) << 12;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b4g4r4x4_unorm {
   uint16_t value;
   struct {
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned x:4;
   } chan;
};

static INLINE void
util_format_b4g4r4x4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b4g4r4x4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g6r5_unorm {
   uint16_t value;
   struct {
      unsigned b:5;
      unsigned g:6;
      unsigned r:5;
   } chan;
};

static INLINE void
util_format_b5g6r5_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)(CLAMP(src[1], 0, 1) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)(CLAMP(src[0], 0, 1) * 0x1f)) << 11;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b5g6r5_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x3f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 2)) & 0x3f) << 5;
         value |= ((uint16_t)(src[0] >> 3)) << 11;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_unorm {
   uint32_t value;
   struct {
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
   } chan;
};

static INLINE void
util_format_r10g10b10a2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)(CLAMP(src[3], 0, 1) * 0x3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
}

static INLINE void
util_format_r10g10b10a2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_unorm {
   uint32_t value;
   struct {
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
   } chan;
};

static INLINE void
util_format_b10g10r10a2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)(CLAMP(src[3], 0, 1) * 0x3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
}

static INLINE void
util_format_b10g10r10a2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b2g3r3_unorm {
   uint8_t value;
   struct {
      unsigned b:2;
      unsigned g:3;
      unsigned r:3;
   } chan;
};

static INLINE void
util_format_b2g3r3_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= ((uint8_t)(CLAMP(src[2], 0, 1) * 0x3)) & 0x3;
         value |= (((uint8_t)(CLAMP(src[1], 0, 1) * 0x7)) & 0x7) << 2;
         value |= ((uint8_t)(CLAMP(src[0], 0, 1) * 0x7)) << 5;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b2g3r3_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x7); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x7); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3); /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= ((uint8_t)(src[2] >> 6)) & 0x3;
         value |= (((uint8_t)(src[1] >> 5)) & 0x7) << 2;
         value |= ((uint8_t)(src[0] >> 5)) << 5;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_unorm {
   uint8_t value;
   struct {
      uint8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[2]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[2];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_unorm {
   uint8_t value;
   struct {
      uint8_t a;
   } chan;
};

static INLINE void
util_format_a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[3]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[3];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_unorm {
   uint8_t value;
   struct {
      uint8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = ubyte_to_float(rgba); /* r */
         dst[1] = ubyte_to_float(rgba); /* g */
         dst[2] = ubyte_to_float(rgba); /* b */
         dst[3] = ubyte_to_float(rgba); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[3]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = ubyte_to_float(rgba); /* r */
         dst[1] = ubyte_to_float(rgba); /* g */
         dst[2] = ubyte_to_float(rgba); /* b */
         dst[3] = ubyte_to_float(rgba); /* a */
}

static INLINE void
util_format_i8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[3];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l4a4_unorm {
   uint8_t value;
   struct {
      unsigned rgb:4;
      unsigned a:4;
   } chan;
};

static INLINE void
util_format_l4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= ((uint8_t)(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)(CLAMP(src[3], 0, 1) * 0xf)) << 4;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
}

static INLINE void
util_format_l4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= ((uint8_t)(src[2] >> 4)) & 0xf;
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_unorm {
   uint16_t value;
   struct {
      uint8_t rgb;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_l8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (float_to_ubyte(src[2])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_l8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = a; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (src[2]) & 0xff;
         value |= (src[3]) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_unorm {
   uint16_t value;
   struct {
      uint16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = value;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(CLAMP(src[2], 0, 1) * 0xffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = value;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = value;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_unorm {
   uint16_t value;
   struct {
      uint16_t a;
   } chan;
};

static INLINE void
util_format_a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(CLAMP(src[3], 0, 1) * 0xffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_unorm {
   uint16_t value;
   struct {
      uint16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = value;
         dst[0] = (float)(rgba * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0xffff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0xffff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(CLAMP(src[3], 0, 1) * 0xffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = value;
         dst[0] = (float)(rgba * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0xffff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_i16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = value;
         dst[0] = (uint8_t)(rgba >> 8); /* r */
         dst[1] = (uint8_t)(rgba >> 8); /* g */
         dst[2] = (uint8_t)(rgba >> 8); /* b */
         dst[3] = (uint8_t)(rgba >> 8); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_unorm {
   uint32_t value;
   struct {
      uint16_t rgb;
      uint16_t a;
   } chan;
};

static INLINE void
util_format_l16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)(CLAMP(src[3], 0, 1) * 0xffff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_l16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_snorm {
   uint8_t value;
   struct {
      int8_t a;
   } chan;
};

static INLINE void
util_format_a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(CLAMP(src[3], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[3] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_snorm {
   uint8_t value;
   struct {
      int8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(CLAMP(src[2], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[2] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_snorm {
   uint16_t value;
   struct {
      int8_t rgb;
      int8_t a;
   } chan;
};

static INLINE void
util_format_l8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(CLAMP(src[3], -1, 1) * 0x7f)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_l8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[2] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_snorm {
   uint8_t value;
   struct {
      int8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7f)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7f)); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(CLAMP(src[3], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7f)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_i8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[3] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_snorm {
   uint16_t value;
   struct {
      int16_t a;
   } chan;
};

static INLINE void
util_format_a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(CLAMP(src[3], -1, 1) * 0x7fff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_snorm {
   uint16_t value;
   struct {
      int16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (int16_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(CLAMP(src[2], -1, 1) * 0x7fff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (int16_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(rgb, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgb, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgb, 0) >> 7); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_snorm {
   uint32_t value;
   struct {
      int16_t rgb;
      int16_t a;
   } chan;
};

static INLINE void
util_format_l16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(CLAMP(src[2], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(CLAMP(src[3], -1, 1) * 0x7fff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_l16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(rgb, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgb, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgb, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_snorm {
   uint16_t value;
   struct {
      int16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = (int16_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7fff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(CLAMP(src[3], -1, 1) * 0x7fff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = (int16_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_i16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgba = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(rgba, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgba, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgba, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(rgba, 0) >> 7); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_float {
   uint16_t value;
   struct {
      uint16_t a;
   } chan;
};

static INLINE void
util_format_a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
}

static INLINE void
util_format_a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_float {
   uint16_t value;
   struct {
      uint16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         pixel.chan.rgb = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         pixel.chan.rgb = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_float {
   uint32_t value;
   struct {
      uint16_t rgb;
      uint16_t a;
   } chan;
};

static INLINE void
util_format_l16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half(src[2]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
}

static INLINE void
util_format_l16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_float {
   uint16_t value;
   struct {
      uint16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgba); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgba); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgba); /* b */
         dst[3] = util_half_to_float(pixel.chan.rgba); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         pixel.chan.rgba = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgba); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgba); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgba); /* b */
         dst[3] = util_half_to_float(pixel.chan.rgba); /* a */
}

static INLINE void
util_format_i16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         pixel.chan.rgba = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a32_float {
   uint32_t value;
   struct {
      float a;
   } chan;
};

static INLINE void
util_format_a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
}

static INLINE void
util_format_a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32_float {
   uint32_t value;
   struct {
      float rgb;
   } chan;
};

static INLINE void
util_format_l32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         pixel.chan.rgb = src[2];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgb); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgb); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgb); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         pixel.chan.rgb = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32a32_float {
   uint64_t value;
   struct {
      float rgb;
      float a;
   } chan;
};

static INLINE void
util_format_l32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
}

static INLINE void
util_format_l32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgb); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgb); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgb); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = ubyte_to_float(src[2]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i32_float {
   uint32_t value;
   struct {
      float rgba;
   } chan;
};

static INLINE void
util_format_i32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgba; /* r */
         dst[1] = pixel.chan.rgba; /* g */
         dst[2] = pixel.chan.rgba; /* b */
         dst[3] = pixel.chan.rgba; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         pixel.chan.rgba = src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgba; /* r */
         dst[1] = pixel.chan.rgba; /* g */
         dst[2] = pixel.chan.rgba; /* b */
         dst[3] = pixel.chan.rgba; /* a */
}

static INLINE void
util_format_i32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgba); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgba); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgba); /* b */
         dst[3] = float_to_ubyte(pixel.chan.rgba); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         pixel.chan.rgba = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_srgb {
   uint8_t value;
   struct {
      uint8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= util_format_linear_float_to_srgb_8unorm(src[2]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= util_format_linear_to_srgb_8unorm(src[2]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_srgb {
   uint16_t value;
   struct {
      uint8_t rgb;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_l8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_l8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= (src[3]) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_srgb {
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_float_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_float_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_float_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_to_linear_8unorm(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_srgb {
   uint32_t value;
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_r8g8b8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_r8g8b8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8b8g8r8_srgb {
   uint32_t value;
   struct {
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
   } chan;
};

static INLINE void
util_format_a8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8b8g8r8_srgb {
   uint32_t value;
   struct {
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
   } chan;
};

static INLINE void
util_format_x8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_x8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8a8_srgb {
   uint32_t value;
   struct {
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_b8g8r8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_b8g8r8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8x8_srgb {
   uint32_t value;
   struct {
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
   } chan;
};

static INLINE void
util_format_b8g8r8x8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_b8g8r8x8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8r8g8b8_srgb {
   uint32_t value;
   struct {
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_a8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8r8g8b8_srgb {
   uint32_t value;
   struct {
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_x8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_x8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8sg8sb8ux8u_norm {
   uint32_t value;
   struct {
      int8_t r;
      int8_t g;
      uint8_t b;
      uint8_t x;
   } chan;
};

static INLINE void
util_format_r8sg8sb8ux8u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= ((src[2]) & 0xff) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10sg10sb10sa2u_norm {
   uint32_t value;
   struct {
      int r:10;
      int g:10;
      int b:10;
      unsigned a:2;
   } chan;
};

static INLINE void
util_format_r10sg10sb10sa2u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)(CLAMP(src[3], 0, 1) * 0x3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r5sg5sb6u_norm {
   uint16_t value;
   struct {
      int r:5;
      int g:5;
      unsigned b:6;
   } chan;
};

static INLINE void
util_format_r5sg5sb6u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(CLAMP(src[0], -1, 1) * 0xf)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 5) ;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0x3f)) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r5sg5sb6u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3f); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 5) ;
         value |= ((uint16_t)(src[2] >> 2)) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_uscaled {
   uint32_t value;
   struct {
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
   } chan;
};

static INLINE void
util_format_r10g10b10a2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
}

static INLINE void
util_format_r10g10b10a2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64_float {
   uint64_t value;
   struct {
      double r;
   } chan;
};

static INLINE void
util_format_r64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         pixel.chan.r = (double)src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64_float {
   struct {
      double r;
      double g;
   } chan;
};

static INLINE void
util_format_r64g64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r64g64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64b64_float {
   struct {
      double r;
      double g;
      double b;
   } chan;
};

static INLINE void
util_format_r64g64b64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 24;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 24;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64b64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r64g64b64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = 255; /* a */
         src += 24;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 24;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64b64a64_float {
   struct {
      double r;
      double g;
      double b;
      double a;
   } chan;
};

static INLINE void
util_format_r64g64b64a64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 32;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         pixel.chan.a = (double)src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 32;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
}

static INLINE void
util_format_r64g64b64a64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
         src += 32;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         pixel.chan.a = (double)(src[3] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 32;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_float {
   uint32_t value;
   struct {
      float r;
   } chan;
};

static INLINE void
util_format_r32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         pixel.chan.r = src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_float {
   uint64_t value;
   struct {
      float r;
      float g;
   } chan;
};

static INLINE void
util_format_r32g32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_float {
   struct {
      float r;
      float g;
      float b;
   } chan;
};

static INLINE void
util_format_r32g32b32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_float {
   struct {
      float r;
      float g;
      float b;
      float a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
}

static INLINE void
util_format_r32g32b32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_unorm {
   uint32_t value;
   struct {
      uint32_t r;
   } chan;
};

static INLINE void
util_format_r32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (uint8_t)(r >> 24); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_unorm {
   uint64_t value;
   struct {
      uint32_t r;
      uint32_t g;
   } chan;
};

static INLINE void
util_format_r32g32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_unorm {
   struct {
      uint32_t r;
      uint32_t g;
      uint32_t b;
   } chan;
};

static INLINE void
util_format_r32g32b32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_unorm {
   struct {
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
}

static INLINE void
util_format_r32g32b32a32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 24); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_uscaled {
   uint32_t value;
   struct {
      uint32_t r;
   } chan;
};

static INLINE void
util_format_r32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)CLAMP(src[0], 0, 4294967295);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = value;
         dst[0] = (uint8_t)(((uint64_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_uscaled {
   uint64_t value;
   struct {
      uint32_t r;
      uint32_t g;
   } chan;
};

static INLINE void
util_format_r32g32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_uscaled {
   struct {
      uint32_t r;
      uint32_t g;
      uint32_t b;
   } chan;
};

static INLINE void
util_format_r32g32b32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_uscaled {
   struct {
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
}

static INLINE void
util_format_r32g32b32a32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_snorm {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 23); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_snorm {
   uint64_t value;
   struct {
      int32_t r;
      int32_t g;
   } chan;
};

static INLINE void
util_format_r32g32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_snorm {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
   } chan;
};

static INLINE void
util_format_r32g32b32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_snorm {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
}

static INLINE void
util_format_r32g32b32a32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 23); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_sscaled {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)CLAMP(src[0], -2147483648, 2147483647)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(((uint64_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x1 / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_sscaled {
   uint64_t value;
   struct {
      int32_t r;
      int32_t g;
   } chan;
};

static INLINE void
util_format_r32g32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_sscaled {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
   } chan;
};

static INLINE void
util_format_r32g32b32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_sscaled {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
}

static INLINE void
util_format_r32g32b32a32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_float {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_float {
   uint32_t value;
   struct {
      uint16_t r;
      uint16_t g;
   } chan;
};

static INLINE void
util_format_r16g16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_float {
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
   } chan;
};

static INLINE void
util_format_r16g16b16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16b16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = 255; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_float {
   uint64_t value;
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
   } chan;
};

static INLINE void
util_format_r16g16b16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
}

static INLINE void
util_format_r16g16b16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_unorm {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_unorm {
   uint32_t value;
   struct {
      uint16_t r;
      uint16_t g;
   } chan;
};

static INLINE void
util_format_r16g16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)(CLAMP(src[1], 0, 1) * 0xffff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_unorm {
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
   } chan;
};

static INLINE void
util_format_r16g16b16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16b16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = 255; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_unorm {
   uint64_t value;
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
   } chan;
};

static INLINE void
util_format_r16g16b16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)(CLAMP(src[3], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_r16g16b16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 8); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_uscaled {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_uscaled {
   uint32_t value;
   struct {
      uint16_t r;
      uint16_t g;
   } chan;
};

static INLINE void
util_format_r16g16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_uscaled {
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
   } chan;
};

static INLINE void
util_format_r16g16b16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16b16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_uscaled {
   uint64_t value;
   struct {
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
   } chan;
};

static INLINE void
util_format_r16g16b16a16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
}

static INLINE void
util_format_r16g16b16a16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_snorm {
   uint16_t value;
   struct {
      int16_t r;
   } chan;
};

static INLINE void
util_format_r16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(CLAMP(src[0], -1, 1) * 0x7fff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_snorm {
   uint32_t value;
   struct {
      int16_t r;
      int16_t g;
   } chan;
};

static INLINE void
util_format_r16g16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(CLAMP(src[1], -1, 1) * 0x7fff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_snorm {
   struct {
      int16_t r;
      int16_t g;
      int16_t b;
   } chan;
};

static INLINE void
util_format_r16g16b16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)(CLAMP(src[2], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16b16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = 255; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_snorm {
   uint64_t value;
   struct {
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
   } chan;
};

static INLINE void
util_format_r16g16b16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)(CLAMP(src[3], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_r16g16b16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 7); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_sscaled {
   uint16_t value;
   struct {
      int16_t r;
   } chan;
};

static INLINE void
util_format_r16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_sscaled {
   uint32_t value;
   struct {
      int16_t r;
      int16_t g;
   } chan;
};

static INLINE void
util_format_r16g16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_sscaled {
   struct {
      int16_t r;
      int16_t g;
      int16_t b;
   } chan;
};

static INLINE void
util_format_r16g16b16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16g16b16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_sscaled {
   uint64_t value;
   struct {
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
   } chan;
};

static INLINE void
util_format_r16g16b16a16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
}

static INLINE void
util_format_r16g16b16a16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_unorm {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[0];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_unorm {
   uint16_t value;
   struct {
      uint8_t r;
      uint8_t g;
   } chan;
};

static INLINE void
util_format_r8g8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= (float_to_ubyte(src[1])) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (src[0]) & 0xff;
         value |= (src[1]) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_unorm {
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = float_to_ubyte(src[0]);
         pixel.chan.g = float_to_ubyte(src[1]);
         pixel.chan.b = float_to_ubyte(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_unorm {
   uint32_t value;
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_r8g8b8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_r8g8b8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (src[0]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[2]) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_uscaled {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_r8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_uscaled {
   uint16_t value;
   struct {
      uint8_t r;
      uint8_t g;
   } chan;
};

static INLINE void
util_format_r8g8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= ((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_uscaled {
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_uscaled {
   uint32_t value;
   struct {
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
   } chan;
};

static INLINE void
util_format_r8g8b8a8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
}

static INLINE void
util_format_r8g8b8a8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= (((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8;
         value |= (((uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16;
         value |= ((uint8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_snorm {
   uint8_t value;
   struct {
      int8_t r;
   } chan;
};

static INLINE void
util_format_r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[0] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_snorm {
   uint16_t value;
   struct {
      int8_t r;
      int8_t g;
   } chan;
};

static INLINE void
util_format_r8g8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_snorm {
   struct {
      int8_t r;
      int8_t g;
      int8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)(CLAMP(src[2], -1, 1) * 0x7f);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MAX2(pixel.chan.r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(pixel.chan.g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(pixel.chan.b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(src[0] >> 1);
         pixel.chan.g = (int8_t)(src[1] >> 1);
         pixel.chan.b = (int8_t)(src[2] >> 1);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_snorm {
   uint32_t value;
   struct {
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
   } chan;
};

static INLINE void
util_format_r8g8b8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(CLAMP(src[3], -1, 1) * 0x7f)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_r8g8b8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_sscaled {
   uint8_t value;
   struct {
      int8_t r;
   } chan;
};

static INLINE void
util_format_r8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_sscaled {
   uint16_t value;
   struct {
      int8_t r;
      int8_t g;
   } chan;
};

static INLINE void
util_format_r8g8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_sscaled {
   struct {
      int8_t r;
      int8_t g;
      int8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_sscaled {
   uint32_t value;
   struct {
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
   } chan;
};

static INLINE void
util_format_r8g8b8a8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
}

static INLINE void
util_format_r8g8b8a8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(a, 0, 1)) * 0xff / 0x1); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_fixed {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_fixed {
   uint64_t value;
   struct {
      int32_t r;
      int32_t g;
   } chan;
};

static INLINE void
util_format_r32g32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_fixed {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
   } chan;
};

static INLINE void
util_format_r32g32b32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32g32b32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = 255; /* a */
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_fixed {
   struct {
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
   } chan;
};

static INLINE void
util_format_r32g32b32a32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
}

static INLINE void
util_format_r32g32b32a32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = (uint8_t)((CLAMP(pixel.chan.a, 0, 65536) * (1.0/0x10000)) * 0xff); /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.a = (int32_t)((float)(src[3] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10x2_uscaled {
   uint32_t value;
   struct {
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned x:2;
   } chan;
};

static INLINE void
util_format_r10g10b10x2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r10g10b10x2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10x2_snorm {
   uint32_t value;
   struct {
      int r:10;
      int g:10;
      int b:10;
      unsigned x:2;
   } chan;
};

static INLINE void
util_format_r10g10b10x2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r10g10b10x2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

const struct util_format_description
util_format_none_description = {
   PIPE_FORMAT_NONE,
   "PIPE_FORMAT_NONE",
   "none",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_none_unpack_rgba_8unorm,
   &util_format_none_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_none_unpack_rgba_float,
   &util_format_none_pack_rgba_float,
   &util_format_none_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b8g8r8a8_unorm_description = {
   PIPE_FORMAT_B8G8R8A8_UNORM,
   "PIPE_FORMAT_B8G8R8A8_UNORM",
   "b8g8r8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b8g8r8a8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8a8_unorm_unpack_rgba_float,
   &util_format_b8g8r8a8_unorm_pack_rgba_float,
   &util_format_b8g8r8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b8g8r8x8_unorm_description = {
   PIPE_FORMAT_B8G8R8X8_UNORM,
   "PIPE_FORMAT_B8G8R8X8_UNORM",
   "b8g8r8x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b8g8r8x8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8x8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8x8_unorm_unpack_rgba_float,
   &util_format_b8g8r8x8_unorm_pack_rgba_float,
   &util_format_b8g8r8x8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8r8g8b8_unorm_description = {
   PIPE_FORMAT_A8R8G8B8_UNORM,
   "PIPE_FORMAT_A8R8G8B8_UNORM",
   "a8r8g8b8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_a8r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8r8g8b8_unorm_unpack_rgba_float,
   &util_format_a8r8g8b8_unorm_pack_rgba_float,
   &util_format_a8r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_x8r8g8b8_unorm_description = {
   PIPE_FORMAT_X8R8G8B8_UNORM,
   "PIPE_FORMAT_X8R8G8B8_UNORM",
   "x8r8g8b8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_x8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_x8r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8r8g8b8_unorm_unpack_rgba_float,
   &util_format_x8r8g8b8_unorm_pack_rgba_float,
   &util_format_x8r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8b8g8r8_unorm_description = {
   PIPE_FORMAT_A8B8G8R8_UNORM,
   "PIPE_FORMAT_A8B8G8R8_UNORM",
   "a8b8g8r8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
   },
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8b8g8r8_unorm_unpack_rgba_float,
   &util_format_a8b8g8r8_unorm_pack_rgba_float,
   &util_format_a8b8g8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_x8b8g8r8_unorm_description = {
   PIPE_FORMAT_X8B8G8R8_UNORM,
   "PIPE_FORMAT_X8B8G8R8_UNORM",
   "x8b8g8r8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
   },
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_x8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8b8g8r8_unorm_unpack_rgba_float,
   &util_format_x8b8g8r8_unorm_pack_rgba_float,
   &util_format_x8b8g8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8x8_unorm_description = {
   PIPE_FORMAT_R8G8B8X8_UNORM,
   "PIPE_FORMAT_R8G8B8X8_UNORM",
   "r8g8b8x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8x8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8x8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8x8_unorm_unpack_rgba_float,
   &util_format_r8g8b8x8_unorm_pack_rgba_float,
   &util_format_r8g8b8x8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b5g5r5x1_unorm_description = {
   PIPE_FORMAT_B5G5R5X1_UNORM,
   "PIPE_FORMAT_B5G5R5X1_UNORM",
   "b5g5r5x1_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 1}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g5r5x1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5x1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g5r5x1_unorm_unpack_rgba_float,
   &util_format_b5g5r5x1_unorm_pack_rgba_float,
   &util_format_b5g5r5x1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b5g5r5a1_unorm_description = {
   PIPE_FORMAT_B5G5R5A1_UNORM,
   "PIPE_FORMAT_B5G5R5A1_UNORM",
   "b5g5r5a1_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 1}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g5r5a1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5a1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g5r5a1_unorm_unpack_rgba_float,
   &util_format_b5g5r5a1_unorm_pack_rgba_float,
   &util_format_b5g5r5a1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b4g4r4a4_unorm_description = {
   PIPE_FORMAT_B4G4R4A4_UNORM,
   "PIPE_FORMAT_B4G4R4A4_UNORM",
   "b4g4r4a4_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b4g4r4a4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4a4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b4g4r4a4_unorm_unpack_rgba_float,
   &util_format_b4g4r4a4_unorm_pack_rgba_float,
   &util_format_b4g4r4a4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b4g4r4x4_unorm_description = {
   PIPE_FORMAT_B4G4R4X4_UNORM,
   "PIPE_FORMAT_B4G4R4X4_UNORM",
   "b4g4r4x4_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 4}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b4g4r4x4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4x4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b4g4r4x4_unorm_unpack_rgba_float,
   &util_format_b4g4r4x4_unorm_pack_rgba_float,
   &util_format_b4g4r4x4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b5g6r5_unorm_description = {
   PIPE_FORMAT_B5G6R5_UNORM,
   "PIPE_FORMAT_B5G6R5_UNORM",
   "b5g6r5_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g6r5_unorm_unpack_rgba_8unorm,
   &util_format_b5g6r5_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g6r5_unorm_unpack_rgba_float,
   &util_format_b5g6r5_unorm_pack_rgba_float,
   &util_format_b5g6r5_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r10g10b10a2_unorm_description = {
   PIPE_FORMAT_R10G10B10A2_UNORM,
   "PIPE_FORMAT_R10G10B10A2_UNORM",
   "r10g10b10a2_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_unorm_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_unorm_unpack_rgba_float,
   &util_format_r10g10b10a2_unorm_pack_rgba_float,
   &util_format_r10g10b10a2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b10g10r10a2_unorm_description = {
   PIPE_FORMAT_B10G10R10A2_UNORM,
   "PIPE_FORMAT_B10G10R10A2_UNORM",
   "b10g10r10a2_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10a2_unorm_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10a2_unorm_unpack_rgba_float,
   &util_format_b10g10r10a2_unorm_pack_rgba_float,
   &util_format_b10g10r10a2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b2g3r3_unorm_description = {
   PIPE_FORMAT_B2G3R3_UNORM,
   "PIPE_FORMAT_B2G3R3_UNORM",
   "b2g3r3_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 3},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 3},	/* z = r */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b2g3r3_unorm_unpack_rgba_8unorm,
   &util_format_b2g3r3_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b2g3r3_unorm_unpack_rgba_float,
   &util_format_b2g3r3_unorm_pack_rgba_float,
   &util_format_b2g3r3_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8_unorm_description = {
   PIPE_FORMAT_L8_UNORM,
   "PIPE_FORMAT_L8_UNORM",
   "l8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8_unorm_unpack_rgba_8unorm,
   &util_format_l8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_unorm_unpack_rgba_float,
   &util_format_l8_unorm_pack_rgba_float,
   &util_format_l8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8_unorm_description = {
   PIPE_FORMAT_A8_UNORM,
   "PIPE_FORMAT_A8_UNORM",
   "a8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8_unorm_unpack_rgba_8unorm,
   &util_format_a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8_unorm_unpack_rgba_float,
   &util_format_a8_unorm_pack_rgba_float,
   &util_format_a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i8_unorm_description = {
   PIPE_FORMAT_I8_UNORM,
   "PIPE_FORMAT_I8_UNORM",
   "i8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i8_unorm_unpack_rgba_8unorm,
   &util_format_i8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i8_unorm_unpack_rgba_float,
   &util_format_i8_unorm_pack_rgba_float,
   &util_format_i8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l4a4_unorm_description = {
   PIPE_FORMAT_L4A4_UNORM,
   "PIPE_FORMAT_L4A4_UNORM",
   "l4a4_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l4a4_unorm_unpack_rgba_8unorm,
   &util_format_l4a4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l4a4_unorm_unpack_rgba_float,
   &util_format_l4a4_unorm_pack_rgba_float,
   &util_format_l4a4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8a8_unorm_description = {
   PIPE_FORMAT_L8A8_UNORM,
   "PIPE_FORMAT_L8A8_UNORM",
   "l8a8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8a8_unorm_unpack_rgba_8unorm,
   &util_format_l8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_unorm_unpack_rgba_float,
   &util_format_l8a8_unorm_pack_rgba_float,
   &util_format_l8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16_unorm_description = {
   PIPE_FORMAT_L16_UNORM,
   "PIPE_FORMAT_L16_UNORM",
   "l16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_unorm_unpack_rgba_8unorm,
   &util_format_l16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_unorm_unpack_rgba_float,
   &util_format_l16_unorm_pack_rgba_float,
   &util_format_l16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a16_unorm_description = {
   PIPE_FORMAT_A16_UNORM,
   "PIPE_FORMAT_A16_UNORM",
   "a16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_unorm_unpack_rgba_8unorm,
   &util_format_a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_unorm_unpack_rgba_float,
   &util_format_a16_unorm_pack_rgba_float,
   &util_format_a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i16_unorm_description = {
   PIPE_FORMAT_I16_UNORM,
   "PIPE_FORMAT_I16_UNORM",
   "i16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_unorm_unpack_rgba_8unorm,
   &util_format_i16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_unorm_unpack_rgba_float,
   &util_format_i16_unorm_pack_rgba_float,
   &util_format_i16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16a16_unorm_description = {
   PIPE_FORMAT_L16A16_UNORM,
   "PIPE_FORMAT_L16A16_UNORM",
   "l16a16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_unorm_unpack_rgba_8unorm,
   &util_format_l16a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_unorm_unpack_rgba_float,
   &util_format_l16a16_unorm_pack_rgba_float,
   &util_format_l16a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8_snorm_description = {
   PIPE_FORMAT_A8_SNORM,
   "PIPE_FORMAT_A8_SNORM",
   "a8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8_snorm_unpack_rgba_8unorm,
   &util_format_a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8_snorm_unpack_rgba_float,
   &util_format_a8_snorm_pack_rgba_float,
   &util_format_a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8_snorm_description = {
   PIPE_FORMAT_L8_SNORM,
   "PIPE_FORMAT_L8_SNORM",
   "l8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8_snorm_unpack_rgba_8unorm,
   &util_format_l8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_snorm_unpack_rgba_float,
   &util_format_l8_snorm_pack_rgba_float,
   &util_format_l8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8a8_snorm_description = {
   PIPE_FORMAT_L8A8_SNORM,
   "PIPE_FORMAT_L8A8_SNORM",
   "l8a8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8a8_snorm_unpack_rgba_8unorm,
   &util_format_l8a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_snorm_unpack_rgba_float,
   &util_format_l8a8_snorm_pack_rgba_float,
   &util_format_l8a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i8_snorm_description = {
   PIPE_FORMAT_I8_SNORM,
   "PIPE_FORMAT_I8_SNORM",
   "i8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i8_snorm_unpack_rgba_8unorm,
   &util_format_i8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i8_snorm_unpack_rgba_float,
   &util_format_i8_snorm_pack_rgba_float,
   &util_format_i8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a16_snorm_description = {
   PIPE_FORMAT_A16_SNORM,
   "PIPE_FORMAT_A16_SNORM",
   "a16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_snorm_unpack_rgba_8unorm,
   &util_format_a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_snorm_unpack_rgba_float,
   &util_format_a16_snorm_pack_rgba_float,
   &util_format_a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16_snorm_description = {
   PIPE_FORMAT_L16_SNORM,
   "PIPE_FORMAT_L16_SNORM",
   "l16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_snorm_unpack_rgba_8unorm,
   &util_format_l16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_snorm_unpack_rgba_float,
   &util_format_l16_snorm_pack_rgba_float,
   &util_format_l16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16a16_snorm_description = {
   PIPE_FORMAT_L16A16_SNORM,
   "PIPE_FORMAT_L16A16_SNORM",
   "l16a16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_snorm_unpack_rgba_8unorm,
   &util_format_l16a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_snorm_unpack_rgba_float,
   &util_format_l16a16_snorm_pack_rgba_float,
   &util_format_l16a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i16_snorm_description = {
   PIPE_FORMAT_I16_SNORM,
   "PIPE_FORMAT_I16_SNORM",
   "i16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_snorm_unpack_rgba_8unorm,
   &util_format_i16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_snorm_unpack_rgba_float,
   &util_format_i16_snorm_pack_rgba_float,
   &util_format_i16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a16_float_description = {
   PIPE_FORMAT_A16_FLOAT,
   "PIPE_FORMAT_A16_FLOAT",
   "a16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_float_unpack_rgba_8unorm,
   &util_format_a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_float_unpack_rgba_float,
   &util_format_a16_float_pack_rgba_float,
   &util_format_a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16_float_description = {
   PIPE_FORMAT_L16_FLOAT,
   "PIPE_FORMAT_L16_FLOAT",
   "l16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_float_unpack_rgba_8unorm,
   &util_format_l16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_float_unpack_rgba_float,
   &util_format_l16_float_pack_rgba_float,
   &util_format_l16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l16a16_float_description = {
   PIPE_FORMAT_L16A16_FLOAT,
   "PIPE_FORMAT_L16A16_FLOAT",
   "l16a16_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_float_unpack_rgba_8unorm,
   &util_format_l16a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_float_unpack_rgba_float,
   &util_format_l16a16_float_pack_rgba_float,
   &util_format_l16a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i16_float_description = {
   PIPE_FORMAT_I16_FLOAT,
   "PIPE_FORMAT_I16_FLOAT",
   "i16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_float_unpack_rgba_8unorm,
   &util_format_i16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_float_unpack_rgba_float,
   &util_format_i16_float_pack_rgba_float,
   &util_format_i16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a32_float_description = {
   PIPE_FORMAT_A32_FLOAT,
   "PIPE_FORMAT_A32_FLOAT",
   "a32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = a */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a32_float_unpack_rgba_8unorm,
   &util_format_a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a32_float_unpack_rgba_float,
   &util_format_a32_float_pack_rgba_float,
   &util_format_a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l32_float_description = {
   PIPE_FORMAT_L32_FLOAT,
   "PIPE_FORMAT_L32_FLOAT",
   "l32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l32_float_unpack_rgba_8unorm,
   &util_format_l32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l32_float_unpack_rgba_float,
   &util_format_l32_float_pack_rgba_float,
   &util_format_l32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l32a32_float_description = {
   PIPE_FORMAT_L32A32_FLOAT,
   "PIPE_FORMAT_L32A32_FLOAT",
   "l32a32_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l32a32_float_unpack_rgba_8unorm,
   &util_format_l32a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l32a32_float_unpack_rgba_float,
   &util_format_l32a32_float_pack_rgba_float,
   &util_format_l32a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_i32_float_description = {
   PIPE_FORMAT_I32_FLOAT,
   "PIPE_FORMAT_I32_FLOAT",
   "i32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = rgba */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i32_float_unpack_rgba_8unorm,
   &util_format_i32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i32_float_unpack_rgba_float,
   &util_format_i32_float_pack_rgba_float,
   &util_format_i32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8_srgb_description = {
   PIPE_FORMAT_L8_SRGB,
   "PIPE_FORMAT_L8_SRGB",
   "l8_srgb",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_X,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_l8_srgb_unpack_rgba_8unorm,
   &util_format_l8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_srgb_unpack_rgba_float,
   &util_format_l8_srgb_pack_rgba_float,
   &util_format_l8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_l8a8_srgb_description = {
   PIPE_FORMAT_L8A8_SRGB,
   "PIPE_FORMAT_L8A8_SRGB",
   "l8a8_srgb",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = a */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_X,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_l8a8_srgb_unpack_rgba_8unorm,
   &util_format_l8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_srgb_unpack_rgba_float,
   &util_format_l8a8_srgb_pack_rgba_float,
   &util_format_l8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8_srgb_description = {
   PIPE_FORMAT_R8G8B8_SRGB,
   "PIPE_FORMAT_R8G8B8_SRGB",
   "r8g8b8_srgb",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_srgb_unpack_rgba_float,
   &util_format_r8g8b8_srgb_pack_rgba_float,
   &util_format_r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8a8_srgb_description = {
   PIPE_FORMAT_R8G8B8A8_SRGB,
   "PIPE_FORMAT_R8G8B8A8_SRGB",
   "r8g8b8a8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_r8g8b8a8_srgb_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_srgb_unpack_rgba_float,
   &util_format_r8g8b8a8_srgb_pack_rgba_float,
   &util_format_r8g8b8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8b8g8r8_srgb_description = {
   PIPE_FORMAT_A8B8G8R8_SRGB,
   "PIPE_FORMAT_A8B8G8R8_SRGB",
   "a8b8g8r8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
   },
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_a8b8g8r8_srgb_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8b8g8r8_srgb_unpack_rgba_float,
   &util_format_a8b8g8r8_srgb_pack_rgba_float,
   &util_format_a8b8g8r8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_x8b8g8r8_srgb_description = {
   PIPE_FORMAT_X8B8G8R8_SRGB,
   "PIPE_FORMAT_X8B8G8R8_SRGB",
   "x8b8g8r8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
   },
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_x8b8g8r8_srgb_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8b8g8r8_srgb_unpack_rgba_float,
   &util_format_x8b8g8r8_srgb_pack_rgba_float,
   &util_format_x8b8g8r8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b8g8r8a8_srgb_description = {
   PIPE_FORMAT_B8G8R8A8_SRGB,
   "PIPE_FORMAT_B8G8R8A8_SRGB",
   "b8g8r8a8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_b8g8r8a8_srgb_unpack_rgba_8unorm,
   &util_format_b8g8r8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8a8_srgb_unpack_rgba_float,
   &util_format_b8g8r8a8_srgb_pack_rgba_float,
   &util_format_b8g8r8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_b8g8r8x8_srgb_description = {
   PIPE_FORMAT_B8G8R8X8_SRGB,
   "PIPE_FORMAT_B8G8R8X8_SRGB",
   "b8g8r8x8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_b8g8r8x8_srgb_unpack_rgba_8unorm,
   &util_format_b8g8r8x8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8x8_srgb_unpack_rgba_float,
   &util_format_b8g8r8x8_srgb_pack_rgba_float,
   &util_format_b8g8r8x8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_a8r8g8b8_srgb_description = {
   PIPE_FORMAT_A8R8G8B8_SRGB,
   "PIPE_FORMAT_A8R8G8B8_SRGB",
   "a8r8g8b8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_a8r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_a8r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8r8g8b8_srgb_unpack_rgba_float,
   &util_format_a8r8g8b8_srgb_pack_rgba_float,
   &util_format_a8r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_x8r8g8b8_srgb_description = {
   PIPE_FORMAT_X8R8G8B8_SRGB,
   "PIPE_FORMAT_X8R8G8B8_SRGB",
   "x8r8g8b8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_x8r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_x8r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8r8g8b8_srgb_unpack_rgba_float,
   &util_format_x8r8g8b8_srgb_pack_rgba_float,
   &util_format_x8r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8sg8sb8ux8u_norm_description = {
   PIPE_FORMAT_R8SG8SB8UX8U_NORM,
   "PIPE_FORMAT_R8SG8SB8UX8U_NORM",
   "r8sg8sb8ux8u_norm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8sg8sb8ux8u_norm_unpack_rgba_8unorm,
   &util_format_r8sg8sb8ux8u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8sg8sb8ux8u_norm_unpack_rgba_float,
   &util_format_r8sg8sb8ux8u_norm_pack_rgba_float,
   &util_format_r8sg8sb8ux8u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r10sg10sb10sa2u_norm_description = {
   PIPE_FORMAT_R10SG10SB10SA2U_NORM,
   "PIPE_FORMAT_R10SG10SB10SA2U_NORM",
   "r10sg10sb10sa2u_norm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10sg10sb10sa2u_norm_unpack_rgba_8unorm,
   &util_format_r10sg10sb10sa2u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10sg10sb10sa2u_norm_unpack_rgba_float,
   &util_format_r10sg10sb10sa2u_norm_pack_rgba_float,
   &util_format_r10sg10sb10sa2u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r5sg5sb6u_norm_description = {
   PIPE_FORMAT_R5SG5SB6U_NORM,
   "PIPE_FORMAT_R5SG5SB6U_NORM",
   "r5sg5sb6u_norm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 5},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 6},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r5sg5sb6u_norm_unpack_rgba_8unorm,
   &util_format_r5sg5sb6u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r5sg5sb6u_norm_unpack_rgba_float,
   &util_format_r5sg5sb6u_norm_pack_rgba_float,
   &util_format_r5sg5sb6u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_s8_uscaled_description = {
   PIPE_FORMAT_S8_USCALED,
   "PIPE_FORMAT_S8_USCALED",
   "s8_uscaled",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = s */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_s8_uscaled_unpack_s_8uscaled,
   &util_format_s8_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_z16_unorm_description = {
   PIPE_FORMAT_Z16_UNORM,
   "PIPE_FORMAT_Z16_UNORM",
   "z16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = z */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z16_unorm_unpack_z_32unorm,
   &util_format_z16_unorm_pack_z_32unorm,
   &util_format_z16_unorm_unpack_z_float,
   &util_format_z16_unorm_pack_z_float,
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_z32_unorm_description = {
   PIPE_FORMAT_Z32_UNORM,
   "PIPE_FORMAT_Z32_UNORM",
   "z32_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* x = z */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_unorm_unpack_z_32unorm,
   &util_format_z32_unorm_pack_z_32unorm,
   &util_format_z32_unorm_unpack_z_float,
   &util_format_z32_unorm_pack_z_float,
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_z32_float_description = {
   PIPE_FORMAT_Z32_FLOAT,
   "PIPE_FORMAT_Z32_FLOAT",
   "z32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = z */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_float_unpack_z_32unorm,
   &util_format_z32_float_pack_z_32unorm,
   &util_format_z32_float_unpack_z_float,
   &util_format_z32_float_pack_z_float,
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_z24_unorm_s8_uscaled_description = {
   PIPE_FORMAT_Z24_UNORM_S8_USCALED,
   "PIPE_FORMAT_Z24_UNORM_S8_USCALED",
   "z24_unorm_s8_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 24},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = s */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z24_unorm_s8_uscaled_unpack_z_32unorm,
   &util_format_z24_unorm_s8_uscaled_pack_z_32unorm,
   &util_format_z24_unorm_s8_uscaled_unpack_z_float,
   &util_format_z24_unorm_s8_uscaled_pack_z_float,
   &util_format_z24_unorm_s8_uscaled_unpack_s_8uscaled,
   &util_format_z24_unorm_s8_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_s8_uscaled_z24_unorm_description = {
   PIPE_FORMAT_S8_USCALED_Z24_UNORM,
   "PIPE_FORMAT_S8_USCALED_Z24_UNORM",
   "s8_uscaled_z24_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = s */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 24},	/* y = z */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_s8_uscaled_z24_unorm_unpack_z_32unorm,
   &util_format_s8_uscaled_z24_unorm_pack_z_32unorm,
   &util_format_s8_uscaled_z24_unorm_unpack_z_float,
   &util_format_s8_uscaled_z24_unorm_pack_z_float,
   &util_format_s8_uscaled_z24_unorm_unpack_s_8uscaled,
   &util_format_s8_uscaled_z24_unorm_pack_s_8uscaled
};

const struct util_format_description
util_format_x24s8_uscaled_description = {
   PIPE_FORMAT_X24S8_USCALED,
   "PIPE_FORMAT_X24S8_USCALED",
   "x24s8_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = s */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_x24s8_uscaled_unpack_s_8uscaled,
   &util_format_x24s8_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_s8x24_uscaled_description = {
   PIPE_FORMAT_S8X24_USCALED,
   "PIPE_FORMAT_S8X24_USCALED",
   "s8x24_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 24},	/* y = x */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_s8x24_uscaled_unpack_s_8uscaled,
   &util_format_s8x24_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_z24x8_unorm_description = {
   PIPE_FORMAT_Z24X8_UNORM,
   "PIPE_FORMAT_Z24X8_UNORM",
   "z24x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 24},	/* x = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* y = x */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z24x8_unorm_unpack_z_32unorm,
   &util_format_z24x8_unorm_pack_z_32unorm,
   &util_format_z24x8_unorm_unpack_z_float,
   &util_format_z24x8_unorm_pack_z_float,
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_x8z24_unorm_description = {
   PIPE_FORMAT_X8Z24_UNORM,
   "PIPE_FORMAT_X8Z24_UNORM",
   "x8z24_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 24},	/* y = z */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_x8z24_unorm_unpack_z_32unorm,
   &util_format_x8z24_unorm_pack_z_32unorm,
   &util_format_x8z24_unorm_unpack_z_float,
   &util_format_x8z24_unorm_pack_z_float,
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_z32_float_s8x24_uscaled_description = {
   PIPE_FORMAT_Z32_FLOAT_S8X24_USCALED,
   "PIPE_FORMAT_Z32_FLOAT_S8X24_USCALED",
   "z32_float_s8x24_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   TRUE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 24},	/* z = x */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_float_s8x24_uscaled_unpack_z_32unorm,
   &util_format_z32_float_s8x24_uscaled_pack_z_32unorm,
   &util_format_z32_float_s8x24_uscaled_unpack_z_float,
   &util_format_z32_float_s8x24_uscaled_pack_z_float,
   &util_format_z32_float_s8x24_uscaled_unpack_s_8uscaled,
   &util_format_z32_float_s8x24_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_x32_s8x24_uscaled_description = {
   PIPE_FORMAT_X32_S8X24_USCALED,
   "PIPE_FORMAT_X32_S8X24_USCALED",
   "x32_s8x24_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 24},	/* z = x */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_x32_s8x24_uscaled_unpack_s_8uscaled,
   &util_format_x32_s8x24_uscaled_pack_s_8uscaled
};

const struct util_format_description
util_format_uyvy_description = {
   PIPE_FORMAT_UYVY,
   "PIPE_FORMAT_UYVY",
   "uyvy",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_1	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_uyvy_unpack_rgba_8unorm,
   &util_format_uyvy_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_uyvy_unpack_rgba_float,
   &util_format_uyvy_pack_rgba_float,
   &util_format_uyvy_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_yuyv_description = {
   PIPE_FORMAT_YUYV,
   "PIPE_FORMAT_YUYV",
   "yuyv",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_1	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_yuyv_unpack_rgba_8unorm,
   &util_format_yuyv_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_yuyv_unpack_rgba_float,
   &util_format_yuyv_pack_rgba_float,
   &util_format_yuyv_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8_b8g8_unorm_description = {
   PIPE_FORMAT_R8G8_B8G8_UNORM,
   "PIPE_FORMAT_R8G8_B8G8_UNORM",
   "r8g8_b8g8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_b8g8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8_b8g8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_b8g8_unorm_unpack_rgba_float,
   &util_format_r8g8_b8g8_unorm_pack_rgba_float,
   &util_format_r8g8_b8g8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_g8r8_g8b8_unorm_description = {
   PIPE_FORMAT_G8R8_G8B8_UNORM,
   "PIPE_FORMAT_G8R8_G8B8_UNORM",
   "g8r8_g8b8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g8r8_g8b8_unorm_unpack_rgba_8unorm,
   &util_format_g8r8_g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g8r8_g8b8_unorm_unpack_rgba_float,
   &util_format_g8r8_g8b8_unorm_pack_rgba_float,
   &util_format_g8r8_g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r10g10b10a2_uscaled_description = {
   PIPE_FORMAT_R10G10B10A2_USCALED,
   "PIPE_FORMAT_R10G10B10A2_USCALED",
   "r10g10b10a2_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 2}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_uscaled_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_uscaled_unpack_rgba_float,
   &util_format_r10g10b10a2_uscaled_pack_rgba_float,
   &util_format_r10g10b10a2_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r11g11b10_float_description = {
   PIPE_FORMAT_R11G11B10_FLOAT,
   "PIPE_FORMAT_R11G11B10_FLOAT",
   "r11g11b10_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r11g11b10_float_unpack_rgba_8unorm,
   &util_format_r11g11b10_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r11g11b10_float_unpack_rgba_float,
   &util_format_r11g11b10_float_pack_rgba_float,
   &util_format_r11g11b10_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r9g9b9e5_float_description = {
   PIPE_FORMAT_R9G9B9E5_FLOAT,
   "PIPE_FORMAT_R9G9B9E5_FLOAT",
   "r9g9b9e5_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 32},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r9g9b9e5_float_unpack_rgba_8unorm,
   &util_format_r9g9b9e5_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r9g9b9e5_float_unpack_rgba_float,
   &util_format_r9g9b9e5_float_pack_rgba_float,
   &util_format_r9g9b9e5_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r1_unorm_description = {
   PIPE_FORMAT_R1_UNORM,
   "PIPE_FORMAT_R1_UNORM",
   "r1_unorm",
   {8, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r1_unorm_unpack_rgba_8unorm,
   &util_format_r1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r1_unorm_unpack_rgba_float,
   &util_format_r1_unorm_pack_rgba_float,
   &util_format_r1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8bx_snorm_description = {
   PIPE_FORMAT_R8G8Bx_SNORM,
   "PIPE_FORMAT_R8G8Bx_SNORM",
   "r8g8bx_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = y */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8bx_snorm_unpack_rgba_8unorm,
   &util_format_r8g8bx_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8bx_snorm_unpack_rgba_float,
   &util_format_r8g8bx_snorm_pack_rgba_float,
   &util_format_r8g8bx_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt1_rgb_description = {
   PIPE_FORMAT_DXT1_RGB,
   "PIPE_FORMAT_DXT1_RGB",
   "dxt1_rgb",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt1_rgb_unpack_rgba_8unorm,
   &util_format_dxt1_rgb_pack_rgba_8unorm,
   &util_format_dxt1_rgb_fetch_rgba_8unorm,
   &util_format_dxt1_rgb_unpack_rgba_float,
   &util_format_dxt1_rgb_pack_rgba_float,
   &util_format_dxt1_rgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt1_rgba_description = {
   PIPE_FORMAT_DXT1_RGBA,
   "PIPE_FORMAT_DXT1_RGBA",
   "dxt1_rgba",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt1_rgba_unpack_rgba_8unorm,
   &util_format_dxt1_rgba_pack_rgba_8unorm,
   &util_format_dxt1_rgba_fetch_rgba_8unorm,
   &util_format_dxt1_rgba_unpack_rgba_float,
   &util_format_dxt1_rgba_pack_rgba_float,
   &util_format_dxt1_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt3_rgba_description = {
   PIPE_FORMAT_DXT3_RGBA,
   "PIPE_FORMAT_DXT3_RGBA",
   "dxt3_rgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt3_rgba_unpack_rgba_8unorm,
   &util_format_dxt3_rgba_pack_rgba_8unorm,
   &util_format_dxt3_rgba_fetch_rgba_8unorm,
   &util_format_dxt3_rgba_unpack_rgba_float,
   &util_format_dxt3_rgba_pack_rgba_float,
   &util_format_dxt3_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt5_rgba_description = {
   PIPE_FORMAT_DXT5_RGBA,
   "PIPE_FORMAT_DXT5_RGBA",
   "dxt5_rgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt5_rgba_unpack_rgba_8unorm,
   &util_format_dxt5_rgba_pack_rgba_8unorm,
   &util_format_dxt5_rgba_fetch_rgba_8unorm,
   &util_format_dxt5_rgba_unpack_rgba_float,
   &util_format_dxt5_rgba_pack_rgba_float,
   &util_format_dxt5_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt1_srgb_description = {
   PIPE_FORMAT_DXT1_SRGB,
   "PIPE_FORMAT_DXT1_SRGB",
   "dxt1_srgb",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt1_srgb_unpack_rgba_8unorm,
   &util_format_dxt1_srgb_pack_rgba_8unorm,
   &util_format_dxt1_srgb_fetch_rgba_8unorm,
   &util_format_dxt1_srgb_unpack_rgba_float,
   &util_format_dxt1_srgb_pack_rgba_float,
   &util_format_dxt1_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt1_srgba_description = {
   PIPE_FORMAT_DXT1_SRGBA,
   "PIPE_FORMAT_DXT1_SRGBA",
   "dxt1_srgba",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt1_srgba_unpack_rgba_8unorm,
   &util_format_dxt1_srgba_pack_rgba_8unorm,
   &util_format_dxt1_srgba_fetch_rgba_8unorm,
   &util_format_dxt1_srgba_unpack_rgba_float,
   &util_format_dxt1_srgba_pack_rgba_float,
   &util_format_dxt1_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt3_srgba_description = {
   PIPE_FORMAT_DXT3_SRGBA,
   "PIPE_FORMAT_DXT3_SRGBA",
   "dxt3_srgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt3_srgba_unpack_rgba_8unorm,
   &util_format_dxt3_srgba_pack_rgba_8unorm,
   &util_format_dxt3_srgba_fetch_rgba_8unorm,
   &util_format_dxt3_srgba_unpack_rgba_float,
   &util_format_dxt3_srgba_pack_rgba_float,
   &util_format_dxt3_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_dxt5_srgba_description = {
   PIPE_FORMAT_DXT5_SRGBA,
   "PIPE_FORMAT_DXT5_SRGBA",
   "dxt5_srgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt5_srgba_unpack_rgba_8unorm,
   &util_format_dxt5_srgba_pack_rgba_8unorm,
   &util_format_dxt5_srgba_fetch_rgba_8unorm,
   &util_format_dxt5_srgba_unpack_rgba_float,
   &util_format_dxt5_srgba_pack_rgba_float,
   &util_format_dxt5_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_rgtc1_unorm_description = {
   PIPE_FORMAT_RGTC1_UNORM,
   "PIPE_FORMAT_RGTC1_UNORM",
   "rgtc1_unorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc1_unorm_unpack_rgba_8unorm,
   &util_format_rgtc1_unorm_pack_rgba_8unorm,
   &util_format_rgtc1_unorm_fetch_rgba_8unorm,
   &util_format_rgtc1_unorm_unpack_rgba_float,
   &util_format_rgtc1_unorm_pack_rgba_float,
   &util_format_rgtc1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_rgtc1_snorm_description = {
   PIPE_FORMAT_RGTC1_SNORM,
   "PIPE_FORMAT_RGTC1_SNORM",
   "rgtc1_snorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc1_snorm_unpack_rgba_8unorm,
   &util_format_rgtc1_snorm_pack_rgba_8unorm,
   &util_format_rgtc1_snorm_fetch_rgba_8unorm,
   &util_format_rgtc1_snorm_unpack_rgba_float,
   &util_format_rgtc1_snorm_pack_rgba_float,
   &util_format_rgtc1_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_rgtc2_unorm_description = {
   PIPE_FORMAT_RGTC2_UNORM,
   "PIPE_FORMAT_RGTC2_UNORM",
   "rgtc2_unorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc2_unorm_unpack_rgba_8unorm,
   &util_format_rgtc2_unorm_pack_rgba_8unorm,
   &util_format_rgtc2_unorm_fetch_rgba_8unorm,
   &util_format_rgtc2_unorm_unpack_rgba_float,
   &util_format_rgtc2_unorm_pack_rgba_float,
   &util_format_rgtc2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_rgtc2_snorm_description = {
   PIPE_FORMAT_RGTC2_SNORM,
   "PIPE_FORMAT_RGTC2_SNORM",
   "rgtc2_snorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc2_snorm_unpack_rgba_8unorm,
   &util_format_rgtc2_snorm_pack_rgba_8unorm,
   &util_format_rgtc2_snorm_fetch_rgba_8unorm,
   &util_format_rgtc2_snorm_unpack_rgba_float,
   &util_format_rgtc2_snorm_pack_rgba_float,
   &util_format_rgtc2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_latc1_unorm_description = {
   PIPE_FORMAT_LATC1_UNORM,
   "PIPE_FORMAT_LATC1_UNORM",
   "latc1_unorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc1_unorm_unpack_rgba_8unorm,
   &util_format_latc1_unorm_pack_rgba_8unorm,
   &util_format_latc1_unorm_fetch_rgba_8unorm,
   &util_format_latc1_unorm_unpack_rgba_float,
   &util_format_latc1_unorm_pack_rgba_float,
   &util_format_latc1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_latc1_snorm_description = {
   PIPE_FORMAT_LATC1_SNORM,
   "PIPE_FORMAT_LATC1_SNORM",
   "latc1_snorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 64},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc1_snorm_unpack_rgba_8unorm,
   &util_format_latc1_snorm_pack_rgba_8unorm,
   &util_format_latc1_snorm_fetch_rgba_8unorm,
   &util_format_latc1_snorm_unpack_rgba_float,
   &util_format_latc1_snorm_pack_rgba_float,
   &util_format_latc1_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_latc2_unorm_description = {
   PIPE_FORMAT_LATC2_UNORM,
   "PIPE_FORMAT_LATC2_UNORM",
   "latc2_unorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc2_unorm_unpack_rgba_8unorm,
   &util_format_latc2_unorm_pack_rgba_8unorm,
   &util_format_latc2_unorm_fetch_rgba_8unorm,
   &util_format_latc2_unorm_unpack_rgba_float,
   &util_format_latc2_unorm_pack_rgba_float,
   &util_format_latc2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_latc2_snorm_description = {
   PIPE_FORMAT_LATC2_SNORM,
   "PIPE_FORMAT_LATC2_SNORM",
   "latc2_snorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, 128},	/* x = x */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc2_snorm_unpack_rgba_8unorm,
   &util_format_latc2_snorm_pack_rgba_8unorm,
   &util_format_latc2_snorm_fetch_rgba_8unorm,
   &util_format_latc2_snorm_unpack_rgba_float,
   &util_format_latc2_snorm_pack_rgba_float,
   &util_format_latc2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r64_float_description = {
   PIPE_FORMAT_R64_FLOAT,
   "PIPE_FORMAT_R64_FLOAT",
   "r64_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64_float_unpack_rgba_8unorm,
   &util_format_r64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64_float_unpack_rgba_float,
   &util_format_r64_float_pack_rgba_float,
   &util_format_r64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r64g64_float_description = {
   PIPE_FORMAT_R64G64_FLOAT,
   "PIPE_FORMAT_R64G64_FLOAT",
   "r64g64_float",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64_float_unpack_rgba_8unorm,
   &util_format_r64g64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64_float_unpack_rgba_float,
   &util_format_r64g64_float_pack_rgba_float,
   &util_format_r64g64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r64g64b64_float_description = {
   PIPE_FORMAT_R64G64B64_FLOAT,
   "PIPE_FORMAT_R64G64B64_FLOAT",
   "r64g64b64_float",
   {1, 1, 192},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64b64_float_unpack_rgba_8unorm,
   &util_format_r64g64b64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64b64_float_unpack_rgba_float,
   &util_format_r64g64b64_float_pack_rgba_float,
   &util_format_r64g64b64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r64g64b64a64_float_description = {
   PIPE_FORMAT_R64G64B64A64_FLOAT,
   "PIPE_FORMAT_R64G64B64A64_FLOAT",
   "r64g64b64a64_float",
   {1, 1, 256},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 64}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64b64a64_float_unpack_rgba_8unorm,
   &util_format_r64g64b64a64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64b64a64_float_unpack_rgba_float,
   &util_format_r64g64b64a64_float_pack_rgba_float,
   &util_format_r64g64b64a64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_float_description = {
   PIPE_FORMAT_R32_FLOAT,
   "PIPE_FORMAT_R32_FLOAT",
   "r32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_float_unpack_rgba_8unorm,
   &util_format_r32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_float_unpack_rgba_float,
   &util_format_r32_float_pack_rgba_float,
   &util_format_r32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_float_description = {
   PIPE_FORMAT_R32G32_FLOAT,
   "PIPE_FORMAT_R32G32_FLOAT",
   "r32g32_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_float_unpack_rgba_8unorm,
   &util_format_r32g32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_float_unpack_rgba_float,
   &util_format_r32g32_float_pack_rgba_float,
   &util_format_r32g32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_float_description = {
   PIPE_FORMAT_R32G32B32_FLOAT,
   "PIPE_FORMAT_R32G32B32_FLOAT",
   "r32g32b32_float",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_float_unpack_rgba_8unorm,
   &util_format_r32g32b32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_float_unpack_rgba_float,
   &util_format_r32g32b32_float_pack_rgba_float,
   &util_format_r32g32b32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_float_description = {
   PIPE_FORMAT_R32G32B32A32_FLOAT,
   "PIPE_FORMAT_R32G32B32A32_FLOAT",
   "r32g32b32a32_float",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_float_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_float_unpack_rgba_float,
   &util_format_r32g32b32a32_float_pack_rgba_float,
   &util_format_r32g32b32a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_unorm_description = {
   PIPE_FORMAT_R32_UNORM,
   "PIPE_FORMAT_R32_UNORM",
   "r32_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_unorm_unpack_rgba_8unorm,
   &util_format_r32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_unorm_unpack_rgba_float,
   &util_format_r32_unorm_pack_rgba_float,
   &util_format_r32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_unorm_description = {
   PIPE_FORMAT_R32G32_UNORM,
   "PIPE_FORMAT_R32G32_UNORM",
   "r32g32_unorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_unorm_unpack_rgba_float,
   &util_format_r32g32_unorm_pack_rgba_float,
   &util_format_r32g32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_unorm_description = {
   PIPE_FORMAT_R32G32B32_UNORM,
   "PIPE_FORMAT_R32G32B32_UNORM",
   "r32g32b32_unorm",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32b32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_unorm_unpack_rgba_float,
   &util_format_r32g32b32_unorm_pack_rgba_float,
   &util_format_r32g32b32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_unorm_description = {
   PIPE_FORMAT_R32G32B32A32_UNORM,
   "PIPE_FORMAT_R32G32B32A32_UNORM",
   "r32g32b32a32_unorm",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_unorm_unpack_rgba_float,
   &util_format_r32g32b32a32_unorm_pack_rgba_float,
   &util_format_r32g32b32a32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_uscaled_description = {
   PIPE_FORMAT_R32_USCALED,
   "PIPE_FORMAT_R32_USCALED",
   "r32_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_uscaled_unpack_rgba_8unorm,
   &util_format_r32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_uscaled_unpack_rgba_float,
   &util_format_r32_uscaled_pack_rgba_float,
   &util_format_r32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_uscaled_description = {
   PIPE_FORMAT_R32G32_USCALED,
   "PIPE_FORMAT_R32G32_USCALED",
   "r32g32_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_uscaled_unpack_rgba_float,
   &util_format_r32g32_uscaled_pack_rgba_float,
   &util_format_r32g32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_uscaled_description = {
   PIPE_FORMAT_R32G32B32_USCALED,
   "PIPE_FORMAT_R32G32B32_USCALED",
   "r32g32b32_uscaled",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_uscaled_unpack_rgba_float,
   &util_format_r32g32b32_uscaled_pack_rgba_float,
   &util_format_r32g32b32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_uscaled_description = {
   PIPE_FORMAT_R32G32B32A32_USCALED,
   "PIPE_FORMAT_R32G32B32A32_USCALED",
   "r32g32b32a32_uscaled",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_uscaled_unpack_rgba_float,
   &util_format_r32g32b32a32_uscaled_pack_rgba_float,
   &util_format_r32g32b32a32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_snorm_description = {
   PIPE_FORMAT_R32_SNORM,
   "PIPE_FORMAT_R32_SNORM",
   "r32_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_snorm_unpack_rgba_8unorm,
   &util_format_r32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_snorm_unpack_rgba_float,
   &util_format_r32_snorm_pack_rgba_float,
   &util_format_r32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_snorm_description = {
   PIPE_FORMAT_R32G32_SNORM,
   "PIPE_FORMAT_R32G32_SNORM",
   "r32g32_snorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_snorm_unpack_rgba_float,
   &util_format_r32g32_snorm_pack_rgba_float,
   &util_format_r32g32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_snorm_description = {
   PIPE_FORMAT_R32G32B32_SNORM,
   "PIPE_FORMAT_R32G32B32_SNORM",
   "r32g32b32_snorm",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32b32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_snorm_unpack_rgba_float,
   &util_format_r32g32b32_snorm_pack_rgba_float,
   &util_format_r32g32b32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_snorm_description = {
   PIPE_FORMAT_R32G32B32A32_SNORM,
   "PIPE_FORMAT_R32G32B32A32_SNORM",
   "r32g32b32a32_snorm",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_snorm_unpack_rgba_float,
   &util_format_r32g32b32a32_snorm_pack_rgba_float,
   &util_format_r32g32b32a32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_sscaled_description = {
   PIPE_FORMAT_R32_SSCALED,
   "PIPE_FORMAT_R32_SSCALED",
   "r32_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_sscaled_unpack_rgba_8unorm,
   &util_format_r32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_sscaled_unpack_rgba_float,
   &util_format_r32_sscaled_pack_rgba_float,
   &util_format_r32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_sscaled_description = {
   PIPE_FORMAT_R32G32_SSCALED,
   "PIPE_FORMAT_R32G32_SSCALED",
   "r32g32_sscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_sscaled_unpack_rgba_float,
   &util_format_r32g32_sscaled_pack_rgba_float,
   &util_format_r32g32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_sscaled_description = {
   PIPE_FORMAT_R32G32B32_SSCALED,
   "PIPE_FORMAT_R32G32B32_SSCALED",
   "r32g32b32_sscaled",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_sscaled_unpack_rgba_float,
   &util_format_r32g32b32_sscaled_pack_rgba_float,
   &util_format_r32g32b32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_sscaled_description = {
   PIPE_FORMAT_R32G32B32A32_SSCALED,
   "PIPE_FORMAT_R32G32B32A32_SSCALED",
   "r32g32b32a32_sscaled",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_sscaled_unpack_rgba_float,
   &util_format_r32g32b32a32_sscaled_pack_rgba_float,
   &util_format_r32g32b32a32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16_float_description = {
   PIPE_FORMAT_R16_FLOAT,
   "PIPE_FORMAT_R16_FLOAT",
   "r16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_float_unpack_rgba_8unorm,
   &util_format_r16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_float_unpack_rgba_float,
   &util_format_r16_float_pack_rgba_float,
   &util_format_r16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16_float_description = {
   PIPE_FORMAT_R16G16_FLOAT,
   "PIPE_FORMAT_R16G16_FLOAT",
   "r16g16_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_float_unpack_rgba_8unorm,
   &util_format_r16g16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_float_unpack_rgba_float,
   &util_format_r16g16_float_pack_rgba_float,
   &util_format_r16g16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16_float_description = {
   PIPE_FORMAT_R16G16B16_FLOAT,
   "PIPE_FORMAT_R16G16B16_FLOAT",
   "r16g16b16_float",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_float_unpack_rgba_8unorm,
   &util_format_r16g16b16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_float_unpack_rgba_float,
   &util_format_r16g16b16_float_pack_rgba_float,
   &util_format_r16g16b16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16a16_float_description = {
   PIPE_FORMAT_R16G16B16A16_FLOAT,
   "PIPE_FORMAT_R16G16B16A16_FLOAT",
   "r16g16b16a16_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 16}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_float_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_float_unpack_rgba_float,
   &util_format_r16g16b16a16_float_pack_rgba_float,
   &util_format_r16g16b16a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16_unorm_description = {
   PIPE_FORMAT_R16_UNORM,
   "PIPE_FORMAT_R16_UNORM",
   "r16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_unorm_unpack_rgba_8unorm,
   &util_format_r16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_unorm_unpack_rgba_float,
   &util_format_r16_unorm_pack_rgba_float,
   &util_format_r16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16_unorm_description = {
   PIPE_FORMAT_R16G16_UNORM,
   "PIPE_FORMAT_R16G16_UNORM",
   "r16g16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_unorm_unpack_rgba_float,
   &util_format_r16g16_unorm_pack_rgba_float,
   &util_format_r16g16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16_unorm_description = {
   PIPE_FORMAT_R16G16B16_UNORM,
   "PIPE_FORMAT_R16G16B16_UNORM",
   "r16g16b16_unorm",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16b16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_unorm_unpack_rgba_float,
   &util_format_r16g16b16_unorm_pack_rgba_float,
   &util_format_r16g16b16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16a16_unorm_description = {
   PIPE_FORMAT_R16G16B16A16_UNORM,
   "PIPE_FORMAT_R16G16B16A16_UNORM",
   "r16g16b16a16_unorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_unorm_unpack_rgba_float,
   &util_format_r16g16b16a16_unorm_pack_rgba_float,
   &util_format_r16g16b16a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16_uscaled_description = {
   PIPE_FORMAT_R16_USCALED,
   "PIPE_FORMAT_R16_USCALED",
   "r16_uscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_uscaled_unpack_rgba_8unorm,
   &util_format_r16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_uscaled_unpack_rgba_float,
   &util_format_r16_uscaled_pack_rgba_float,
   &util_format_r16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16_uscaled_description = {
   PIPE_FORMAT_R16G16_USCALED,
   "PIPE_FORMAT_R16G16_USCALED",
   "r16g16_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_uscaled_unpack_rgba_float,
   &util_format_r16g16_uscaled_pack_rgba_float,
   &util_format_r16g16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16_uscaled_description = {
   PIPE_FORMAT_R16G16B16_USCALED,
   "PIPE_FORMAT_R16G16B16_USCALED",
   "r16g16b16_uscaled",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_uscaled_unpack_rgba_float,
   &util_format_r16g16b16_uscaled_pack_rgba_float,
   &util_format_r16g16b16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16a16_uscaled_description = {
   PIPE_FORMAT_R16G16B16A16_USCALED,
   "PIPE_FORMAT_R16G16B16A16_USCALED",
   "r16g16b16a16_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 16}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_uscaled_unpack_rgba_float,
   &util_format_r16g16b16a16_uscaled_pack_rgba_float,
   &util_format_r16g16b16a16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16_snorm_description = {
   PIPE_FORMAT_R16_SNORM,
   "PIPE_FORMAT_R16_SNORM",
   "r16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_snorm_unpack_rgba_8unorm,
   &util_format_r16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_snorm_unpack_rgba_float,
   &util_format_r16_snorm_pack_rgba_float,
   &util_format_r16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16_snorm_description = {
   PIPE_FORMAT_R16G16_SNORM,
   "PIPE_FORMAT_R16G16_SNORM",
   "r16g16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_snorm_unpack_rgba_float,
   &util_format_r16g16_snorm_pack_rgba_float,
   &util_format_r16g16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16_snorm_description = {
   PIPE_FORMAT_R16G16B16_SNORM,
   "PIPE_FORMAT_R16G16B16_SNORM",
   "r16g16b16_snorm",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16b16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_snorm_unpack_rgba_float,
   &util_format_r16g16b16_snorm_pack_rgba_float,
   &util_format_r16g16b16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16a16_snorm_description = {
   PIPE_FORMAT_R16G16B16A16_SNORM,
   "PIPE_FORMAT_R16G16B16A16_SNORM",
   "r16g16b16a16_snorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 16}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_snorm_unpack_rgba_float,
   &util_format_r16g16b16a16_snorm_pack_rgba_float,
   &util_format_r16g16b16a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16_sscaled_description = {
   PIPE_FORMAT_R16_SSCALED,
   "PIPE_FORMAT_R16_SSCALED",
   "r16_sscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_sscaled_unpack_rgba_8unorm,
   &util_format_r16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_sscaled_unpack_rgba_float,
   &util_format_r16_sscaled_pack_rgba_float,
   &util_format_r16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16_sscaled_description = {
   PIPE_FORMAT_R16G16_SSCALED,
   "PIPE_FORMAT_R16G16_SSCALED",
   "r16g16_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_sscaled_unpack_rgba_float,
   &util_format_r16g16_sscaled_pack_rgba_float,
   &util_format_r16g16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16_sscaled_description = {
   PIPE_FORMAT_R16G16B16_SSCALED,
   "PIPE_FORMAT_R16G16B16_SSCALED",
   "r16g16b16_sscaled",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_sscaled_unpack_rgba_float,
   &util_format_r16g16b16_sscaled_pack_rgba_float,
   &util_format_r16g16b16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r16g16b16a16_sscaled_description = {
   PIPE_FORMAT_R16G16B16A16_SSCALED,
   "PIPE_FORMAT_R16G16B16A16_SSCALED",
   "r16g16b16a16_sscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 16}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_sscaled_unpack_rgba_float,
   &util_format_r16g16b16a16_sscaled_pack_rgba_float,
   &util_format_r16g16b16a16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8_unorm_description = {
   PIPE_FORMAT_R8_UNORM,
   "PIPE_FORMAT_R8_UNORM",
   "r8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_unorm_unpack_rgba_8unorm,
   &util_format_r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_unorm_unpack_rgba_float,
   &util_format_r8_unorm_pack_rgba_float,
   &util_format_r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8_unorm_description = {
   PIPE_FORMAT_R8G8_UNORM,
   "PIPE_FORMAT_R8G8_UNORM",
   "r8g8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_unorm_unpack_rgba_float,
   &util_format_r8g8_unorm_pack_rgba_float,
   &util_format_r8g8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8_unorm_description = {
   PIPE_FORMAT_R8G8B8_UNORM,
   "PIPE_FORMAT_R8G8B8_UNORM",
   "r8g8b8_unorm",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_unorm_unpack_rgba_float,
   &util_format_r8g8b8_unorm_pack_rgba_float,
   &util_format_r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8a8_unorm_description = {
   PIPE_FORMAT_R8G8B8A8_UNORM,
   "PIPE_FORMAT_R8G8B8A8_UNORM",
   "r8g8b8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_unorm_unpack_rgba_float,
   &util_format_r8g8b8a8_unorm_pack_rgba_float,
   &util_format_r8g8b8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8_uscaled_description = {
   PIPE_FORMAT_R8_USCALED,
   "PIPE_FORMAT_R8_USCALED",
   "r8_uscaled",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_uscaled_unpack_rgba_8unorm,
   &util_format_r8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_uscaled_unpack_rgba_float,
   &util_format_r8_uscaled_pack_rgba_float,
   &util_format_r8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8_uscaled_description = {
   PIPE_FORMAT_R8G8_USCALED,
   "PIPE_FORMAT_R8G8_USCALED",
   "r8g8_uscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_uscaled_unpack_rgba_float,
   &util_format_r8g8_uscaled_pack_rgba_float,
   &util_format_r8g8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8_uscaled_description = {
   PIPE_FORMAT_R8G8B8_USCALED,
   "PIPE_FORMAT_R8G8B8_USCALED",
   "r8g8b8_uscaled",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_uscaled_unpack_rgba_float,
   &util_format_r8g8b8_uscaled_pack_rgba_float,
   &util_format_r8g8b8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8a8_uscaled_description = {
   PIPE_FORMAT_R8G8B8A8_USCALED,
   "PIPE_FORMAT_R8G8B8A8_USCALED",
   "r8g8b8a8_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_uscaled_unpack_rgba_float,
   &util_format_r8g8b8a8_uscaled_pack_rgba_float,
   &util_format_r8g8b8a8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8_snorm_description = {
   PIPE_FORMAT_R8_SNORM,
   "PIPE_FORMAT_R8_SNORM",
   "r8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_snorm_unpack_rgba_8unorm,
   &util_format_r8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_snorm_unpack_rgba_float,
   &util_format_r8_snorm_pack_rgba_float,
   &util_format_r8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8_snorm_description = {
   PIPE_FORMAT_R8G8_SNORM,
   "PIPE_FORMAT_R8G8_SNORM",
   "r8g8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_snorm_unpack_rgba_float,
   &util_format_r8g8_snorm_pack_rgba_float,
   &util_format_r8g8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8_snorm_description = {
   PIPE_FORMAT_R8G8B8_SNORM,
   "PIPE_FORMAT_R8G8B8_SNORM",
   "r8g8b8_snorm",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8b8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_snorm_unpack_rgba_float,
   &util_format_r8g8b8_snorm_pack_rgba_float,
   &util_format_r8g8b8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8a8_snorm_description = {
   PIPE_FORMAT_R8G8B8A8_SNORM,
   "PIPE_FORMAT_R8G8B8A8_SNORM",
   "r8g8b8a8_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_snorm_unpack_rgba_float,
   &util_format_r8g8b8a8_snorm_pack_rgba_float,
   &util_format_r8g8b8a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8_sscaled_description = {
   PIPE_FORMAT_R8_SSCALED,
   "PIPE_FORMAT_R8_SSCALED",
   "r8_sscaled",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_sscaled_unpack_rgba_8unorm,
   &util_format_r8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_sscaled_unpack_rgba_float,
   &util_format_r8_sscaled_pack_rgba_float,
   &util_format_r8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8_sscaled_description = {
   PIPE_FORMAT_R8G8_SSCALED,
   "PIPE_FORMAT_R8G8_SSCALED",
   "r8g8_sscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_sscaled_unpack_rgba_float,
   &util_format_r8g8_sscaled_pack_rgba_float,
   &util_format_r8g8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8_sscaled_description = {
   PIPE_FORMAT_R8G8B8_SSCALED,
   "PIPE_FORMAT_R8G8B8_SSCALED",
   "r8g8b8_sscaled",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_sscaled_unpack_rgba_float,
   &util_format_r8g8b8_sscaled_pack_rgba_float,
   &util_format_r8g8b8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r8g8b8a8_sscaled_description = {
   PIPE_FORMAT_R8G8B8A8_SSCALED,
   "PIPE_FORMAT_R8G8B8A8_SSCALED",
   "r8g8b8a8_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, 8}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_sscaled_unpack_rgba_float,
   &util_format_r8g8b8a8_sscaled_pack_rgba_float,
   &util_format_r8g8b8a8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32_fixed_description = {
   PIPE_FORMAT_R32_FIXED,
   "PIPE_FORMAT_R32_FIXED",
   "r32_fixed",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* x = r */
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_fixed_unpack_rgba_8unorm,
   &util_format_r32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_fixed_unpack_rgba_float,
   &util_format_r32_fixed_pack_rgba_float,
   &util_format_r32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32_fixed_description = {
   PIPE_FORMAT_R32G32_FIXED,
   "PIPE_FORMAT_R32G32_FIXED",
   "r32g32_fixed",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* y = g */
      {0, 0, 0},
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_fixed_unpack_rgba_float,
   &util_format_r32g32_fixed_pack_rgba_float,
   &util_format_r32g32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32_fixed_description = {
   PIPE_FORMAT_R32G32B32_FIXED,
   "PIPE_FORMAT_R32G32B32_FIXED",
   "r32g32b32_fixed",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* z = b */
      {0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32b32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_fixed_unpack_rgba_float,
   &util_format_r32g32b32_fixed_pack_rgba_float,
   &util_format_r32g32b32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r32g32b32a32_fixed_description = {
   PIPE_FORMAT_R32G32B32A32_FIXED,
   "PIPE_FORMAT_R32G32B32A32_FIXED",
   "r32g32b32a32_fixed",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, 32}	/* w = a */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_fixed_unpack_rgba_float,
   &util_format_r32g32b32a32_fixed_pack_rgba_float,
   &util_format_r32g32b32a32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r10g10b10x2_uscaled_description = {
   PIPE_FORMAT_R10G10B10X2_USCALED,
   "PIPE_FORMAT_R10G10B10X2_USCALED",
   "r10g10b10x2_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 2}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10x2_uscaled_unpack_rgba_8unorm,
   &util_format_r10g10b10x2_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10x2_uscaled_unpack_rgba_float,
   &util_format_r10g10b10x2_uscaled_pack_rgba_float,
   &util_format_r10g10b10x2_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description
util_format_r10g10b10x2_snorm_description = {
   PIPE_FORMAT_R10G10B10X2_SNORM,
   "PIPE_FORMAT_R10G10B10X2_SNORM",
   "r10g10b10x2_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 2}	/* w = x */
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10x2_snorm_unpack_rgba_8unorm,
   &util_format_r10g10b10x2_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10x2_snorm_unpack_rgba_float,
   &util_format_r10g10b10x2_snorm_pack_rgba_float,
   &util_format_r10g10b10x2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uscaled */
   NULL /* pack_s_8uscaled */
};

const struct util_format_description *
util_format_description(enum pipe_format format)
{
   if (format >= PIPE_FORMAT_COUNT) {
      return NULL;
   }

   switch (format) {
   case PIPE_FORMAT_NONE:
      return &util_format_none_description;
   case PIPE_FORMAT_B8G8R8A8_UNORM:
      return &util_format_b8g8r8a8_unorm_description;
   case PIPE_FORMAT_B8G8R8X8_UNORM:
      return &util_format_b8g8r8x8_unorm_description;
   case PIPE_FORMAT_A8R8G8B8_UNORM:
      return &util_format_a8r8g8b8_unorm_description;
   case PIPE_FORMAT_X8R8G8B8_UNORM:
      return &util_format_x8r8g8b8_unorm_description;
   case PIPE_FORMAT_A8B8G8R8_UNORM:
      return &util_format_a8b8g8r8_unorm_description;
   case PIPE_FORMAT_X8B8G8R8_UNORM:
      return &util_format_x8b8g8r8_unorm_description;
   case PIPE_FORMAT_R8G8B8X8_UNORM:
      return &util_format_r8g8b8x8_unorm_description;
   case PIPE_FORMAT_B5G5R5X1_UNORM:
      return &util_format_b5g5r5x1_unorm_description;
   case PIPE_FORMAT_B5G5R5A1_UNORM:
      return &util_format_b5g5r5a1_unorm_description;
   case PIPE_FORMAT_B4G4R4A4_UNORM:
      return &util_format_b4g4r4a4_unorm_description;
   case PIPE_FORMAT_B4G4R4X4_UNORM:
      return &util_format_b4g4r4x4_unorm_description;
   case PIPE_FORMAT_B5G6R5_UNORM:
      return &util_format_b5g6r5_unorm_description;
   case PIPE_FORMAT_R10G10B10A2_UNORM:
      return &util_format_r10g10b10a2_unorm_description;
   case PIPE_FORMAT_B10G10R10A2_UNORM:
      return &util_format_b10g10r10a2_unorm_description;
   case PIPE_FORMAT_B2G3R3_UNORM:
      return &util_format_b2g3r3_unorm_description;
   case PIPE_FORMAT_L8_UNORM:
      return &util_format_l8_unorm_description;
   case PIPE_FORMAT_A8_UNORM:
      return &util_format_a8_unorm_description;
   case PIPE_FORMAT_I8_UNORM:
      return &util_format_i8_unorm_description;
   case PIPE_FORMAT_L4A4_UNORM:
      return &util_format_l4a4_unorm_description;
   case PIPE_FORMAT_L8A8_UNORM:
      return &util_format_l8a8_unorm_description;
   case PIPE_FORMAT_L16_UNORM:
      return &util_format_l16_unorm_description;
   case PIPE_FORMAT_A16_UNORM:
      return &util_format_a16_unorm_description;
   case PIPE_FORMAT_I16_UNORM:
      return &util_format_i16_unorm_description;
   case PIPE_FORMAT_L16A16_UNORM:
      return &util_format_l16a16_unorm_description;
   case PIPE_FORMAT_A8_SNORM:
      return &util_format_a8_snorm_description;
   case PIPE_FORMAT_L8_SNORM:
      return &util_format_l8_snorm_description;
   case PIPE_FORMAT_L8A8_SNORM:
      return &util_format_l8a8_snorm_description;
   case PIPE_FORMAT_I8_SNORM:
      return &util_format_i8_snorm_description;
   case PIPE_FORMAT_A16_SNORM:
      return &util_format_a16_snorm_description;
   case PIPE_FORMAT_L16_SNORM:
      return &util_format_l16_snorm_description;
   case PIPE_FORMAT_L16A16_SNORM:
      return &util_format_l16a16_snorm_description;
   case PIPE_FORMAT_I16_SNORM:
      return &util_format_i16_snorm_description;
   case PIPE_FORMAT_A16_FLOAT:
      return &util_format_a16_float_description;
   case PIPE_FORMAT_L16_FLOAT:
      return &util_format_l16_float_description;
   case PIPE_FORMAT_L16A16_FLOAT:
      return &util_format_l16a16_float_description;
   case PIPE_FORMAT_I16_FLOAT:
      return &util_format_i16_float_description;
   case PIPE_FORMAT_A32_FLOAT:
      return &util_format_a32_float_description;
   case PIPE_FORMAT_L32_FLOAT:
      return &util_format_l32_float_description;
   case PIPE_FORMAT_L32A32_FLOAT:
      return &util_format_l32a32_float_description;
   case PIPE_FORMAT_I32_FLOAT:
      return &util_format_i32_float_description;
   case PIPE_FORMAT_L8_SRGB:
      return &util_format_l8_srgb_description;
   case PIPE_FORMAT_L8A8_SRGB:
      return &util_format_l8a8_srgb_description;
   case PIPE_FORMAT_R8G8B8_SRGB:
      return &util_format_r8g8b8_srgb_description;
   case PIPE_FORMAT_R8G8B8A8_SRGB:
      return &util_format_r8g8b8a8_srgb_description;
   case PIPE_FORMAT_A8B8G8R8_SRGB:
      return &util_format_a8b8g8r8_srgb_description;
   case PIPE_FORMAT_X8B8G8R8_SRGB:
      return &util_format_x8b8g8r8_srgb_description;
   case PIPE_FORMAT_B8G8R8A8_SRGB:
      return &util_format_b8g8r8a8_srgb_description;
   case PIPE_FORMAT_B8G8R8X8_SRGB:
      return &util_format_b8g8r8x8_srgb_description;
   case PIPE_FORMAT_A8R8G8B8_SRGB:
      return &util_format_a8r8g8b8_srgb_description;
   case PIPE_FORMAT_X8R8G8B8_SRGB:
      return &util_format_x8r8g8b8_srgb_description;
   case PIPE_FORMAT_R8SG8SB8UX8U_NORM:
      return &util_format_r8sg8sb8ux8u_norm_description;
   case PIPE_FORMAT_R10SG10SB10SA2U_NORM:
      return &util_format_r10sg10sb10sa2u_norm_description;
   case PIPE_FORMAT_R5SG5SB6U_NORM:
      return &util_format_r5sg5sb6u_norm_description;
   case PIPE_FORMAT_S8_USCALED:
      return &util_format_s8_uscaled_description;
   case PIPE_FORMAT_Z16_UNORM:
      return &util_format_z16_unorm_description;
   case PIPE_FORMAT_Z32_UNORM:
      return &util_format_z32_unorm_description;
   case PIPE_FORMAT_Z32_FLOAT:
      return &util_format_z32_float_description;
   case PIPE_FORMAT_Z24_UNORM_S8_USCALED:
      return &util_format_z24_unorm_s8_uscaled_description;
   case PIPE_FORMAT_S8_USCALED_Z24_UNORM:
      return &util_format_s8_uscaled_z24_unorm_description;
   case PIPE_FORMAT_X24S8_USCALED:
      return &util_format_x24s8_uscaled_description;
   case PIPE_FORMAT_S8X24_USCALED:
      return &util_format_s8x24_uscaled_description;
   case PIPE_FORMAT_Z24X8_UNORM:
      return &util_format_z24x8_unorm_description;
   case PIPE_FORMAT_X8Z24_UNORM:
      return &util_format_x8z24_unorm_description;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_USCALED:
      return &util_format_z32_float_s8x24_uscaled_description;
   case PIPE_FORMAT_X32_S8X24_USCALED:
      return &util_format_x32_s8x24_uscaled_description;
   case PIPE_FORMAT_UYVY:
      return &util_format_uyvy_description;
   case PIPE_FORMAT_YUYV:
      return &util_format_yuyv_description;
   case PIPE_FORMAT_R8G8_B8G8_UNORM:
      return &util_format_r8g8_b8g8_unorm_description;
   case PIPE_FORMAT_G8R8_G8B8_UNORM:
      return &util_format_g8r8_g8b8_unorm_description;
   case PIPE_FORMAT_R10G10B10A2_USCALED:
      return &util_format_r10g10b10a2_uscaled_description;
   case PIPE_FORMAT_R11G11B10_FLOAT:
      return &util_format_r11g11b10_float_description;
   case PIPE_FORMAT_R9G9B9E5_FLOAT:
      return &util_format_r9g9b9e5_float_description;
   case PIPE_FORMAT_R1_UNORM:
      return &util_format_r1_unorm_description;
   case PIPE_FORMAT_R8G8Bx_SNORM:
      return &util_format_r8g8bx_snorm_description;
   case PIPE_FORMAT_DXT1_RGB:
      return &util_format_dxt1_rgb_description;
   case PIPE_FORMAT_DXT1_RGBA:
      return &util_format_dxt1_rgba_description;
   case PIPE_FORMAT_DXT3_RGBA:
      return &util_format_dxt3_rgba_description;
   case PIPE_FORMAT_DXT5_RGBA:
      return &util_format_dxt5_rgba_description;
   case PIPE_FORMAT_DXT1_SRGB:
      return &util_format_dxt1_srgb_description;
   case PIPE_FORMAT_DXT1_SRGBA:
      return &util_format_dxt1_srgba_description;
   case PIPE_FORMAT_DXT3_SRGBA:
      return &util_format_dxt3_srgba_description;
   case PIPE_FORMAT_DXT5_SRGBA:
      return &util_format_dxt5_srgba_description;
   case PIPE_FORMAT_RGTC1_UNORM:
      return &util_format_rgtc1_unorm_description;
   case PIPE_FORMAT_RGTC1_SNORM:
      return &util_format_rgtc1_snorm_description;
   case PIPE_FORMAT_RGTC2_UNORM:
      return &util_format_rgtc2_unorm_description;
   case PIPE_FORMAT_RGTC2_SNORM:
      return &util_format_rgtc2_snorm_description;
   case PIPE_FORMAT_LATC1_UNORM:
      return &util_format_latc1_unorm_description;
   case PIPE_FORMAT_LATC1_SNORM:
      return &util_format_latc1_snorm_description;
   case PIPE_FORMAT_LATC2_UNORM:
      return &util_format_latc2_unorm_description;
   case PIPE_FORMAT_LATC2_SNORM:
      return &util_format_latc2_snorm_description;
   case PIPE_FORMAT_R64_FLOAT:
      return &util_format_r64_float_description;
   case PIPE_FORMAT_R64G64_FLOAT:
      return &util_format_r64g64_float_description;
   case PIPE_FORMAT_R64G64B64_FLOAT:
      return &util_format_r64g64b64_float_description;
   case PIPE_FORMAT_R64G64B64A64_FLOAT:
      return &util_format_r64g64b64a64_float_description;
   case PIPE_FORMAT_R32_FLOAT:
      return &util_format_r32_float_description;
   case PIPE_FORMAT_R32G32_FLOAT:
      return &util_format_r32g32_float_description;
   case PIPE_FORMAT_R32G32B32_FLOAT:
      return &util_format_r32g32b32_float_description;
   case PIPE_FORMAT_R32G32B32A32_FLOAT:
      return &util_format_r32g32b32a32_float_description;
   case PIPE_FORMAT_R32_UNORM:
      return &util_format_r32_unorm_description;
   case PIPE_FORMAT_R32G32_UNORM:
      return &util_format_r32g32_unorm_description;
   case PIPE_FORMAT_R32G32B32_UNORM:
      return &util_format_r32g32b32_unorm_description;
   case PIPE_FORMAT_R32G32B32A32_UNORM:
      return &util_format_r32g32b32a32_unorm_description;
   case PIPE_FORMAT_R32_USCALED:
      return &util_format_r32_uscaled_description;
   case PIPE_FORMAT_R32G32_USCALED:
      return &util_format_r32g32_uscaled_description;
   case PIPE_FORMAT_R32G32B32_USCALED:
      return &util_format_r32g32b32_uscaled_description;
   case PIPE_FORMAT_R32G32B32A32_USCALED:
      return &util_format_r32g32b32a32_uscaled_description;
   case PIPE_FORMAT_R32_SNORM:
      return &util_format_r32_snorm_description;
   case PIPE_FORMAT_R32G32_SNORM:
      return &util_format_r32g32_snorm_description;
   case PIPE_FORMAT_R32G32B32_SNORM:
      return &util_format_r32g32b32_snorm_description;
   case PIPE_FORMAT_R32G32B32A32_SNORM:
      return &util_format_r32g32b32a32_snorm_description;
   case PIPE_FORMAT_R32_SSCALED:
      return &util_format_r32_sscaled_description;
   case PIPE_FORMAT_R32G32_SSCALED:
      return &util_format_r32g32_sscaled_description;
   case PIPE_FORMAT_R32G32B32_SSCALED:
      return &util_format_r32g32b32_sscaled_description;
   case PIPE_FORMAT_R32G32B32A32_SSCALED:
      return &util_format_r32g32b32a32_sscaled_description;
   case PIPE_FORMAT_R16_FLOAT:
      return &util_format_r16_float_description;
   case PIPE_FORMAT_R16G16_FLOAT:
      return &util_format_r16g16_float_description;
   case PIPE_FORMAT_R16G16B16_FLOAT:
      return &util_format_r16g16b16_float_description;
   case PIPE_FORMAT_R16G16B16A16_FLOAT:
      return &util_format_r16g16b16a16_float_description;
   case PIPE_FORMAT_R16_UNORM:
      return &util_format_r16_unorm_description;
   case PIPE_FORMAT_R16G16_UNORM:
      return &util_format_r16g16_unorm_description;
   case PIPE_FORMAT_R16G16B16_UNORM:
      return &util_format_r16g16b16_unorm_description;
   case PIPE_FORMAT_R16G16B16A16_UNORM:
      return &util_format_r16g16b16a16_unorm_description;
   case PIPE_FORMAT_R16_USCALED:
      return &util_format_r16_uscaled_description;
   case PIPE_FORMAT_R16G16_USCALED:
      return &util_format_r16g16_uscaled_description;
   case PIPE_FORMAT_R16G16B16_USCALED:
      return &util_format_r16g16b16_uscaled_description;
   case PIPE_FORMAT_R16G16B16A16_USCALED:
      return &util_format_r16g16b16a16_uscaled_description;
   case PIPE_FORMAT_R16_SNORM:
      return &util_format_r16_snorm_description;
   case PIPE_FORMAT_R16G16_SNORM:
      return &util_format_r16g16_snorm_description;
   case PIPE_FORMAT_R16G16B16_SNORM:
      return &util_format_r16g16b16_snorm_description;
   case PIPE_FORMAT_R16G16B16A16_SNORM:
      return &util_format_r16g16b16a16_snorm_description;
   case PIPE_FORMAT_R16_SSCALED:
      return &util_format_r16_sscaled_description;
   case PIPE_FORMAT_R16G16_SSCALED:
      return &util_format_r16g16_sscaled_description;
   case PIPE_FORMAT_R16G16B16_SSCALED:
      return &util_format_r16g16b16_sscaled_description;
   case PIPE_FORMAT_R16G16B16A16_SSCALED:
      return &util_format_r16g16b16a16_sscaled_description;
   case PIPE_FORMAT_R8_UNORM:
      return &util_format_r8_unorm_description;
   case PIPE_FORMAT_R8G8_UNORM:
      return &util_format_r8g8_unorm_description;
   case PIPE_FORMAT_R8G8B8_UNORM:
      return &util_format_r8g8b8_unorm_description;
   case PIPE_FORMAT_R8G8B8A8_UNORM:
      return &util_format_r8g8b8a8_unorm_description;
   case PIPE_FORMAT_R8_USCALED:
      return &util_format_r8_uscaled_description;
   case PIPE_FORMAT_R8G8_USCALED:
      return &util_format_r8g8_uscaled_description;
   case PIPE_FORMAT_R8G8B8_USCALED:
      return &util_format_r8g8b8_uscaled_description;
   case PIPE_FORMAT_R8G8B8A8_USCALED:
      return &util_format_r8g8b8a8_uscaled_description;
   case PIPE_FORMAT_R8_SNORM:
      return &util_format_r8_snorm_description;
   case PIPE_FORMAT_R8G8_SNORM:
      return &util_format_r8g8_snorm_description;
   case PIPE_FORMAT_R8G8B8_SNORM:
      return &util_format_r8g8b8_snorm_description;
   case PIPE_FORMAT_R8G8B8A8_SNORM:
      return &util_format_r8g8b8a8_snorm_description;
   case PIPE_FORMAT_R8_SSCALED:
      return &util_format_r8_sscaled_description;
   case PIPE_FORMAT_R8G8_SSCALED:
      return &util_format_r8g8_sscaled_description;
   case PIPE_FORMAT_R8G8B8_SSCALED:
      return &util_format_r8g8b8_sscaled_description;
   case PIPE_FORMAT_R8G8B8A8_SSCALED:
      return &util_format_r8g8b8a8_sscaled_description;
   case PIPE_FORMAT_R32_FIXED:
      return &util_format_r32_fixed_description;
   case PIPE_FORMAT_R32G32_FIXED:
      return &util_format_r32g32_fixed_description;
   case PIPE_FORMAT_R32G32B32_FIXED:
      return &util_format_r32g32b32_fixed_description;
   case PIPE_FORMAT_R32G32B32A32_FIXED:
      return &util_format_r32g32b32a32_fixed_description;
   case PIPE_FORMAT_R10G10B10X2_USCALED:
      return &util_format_r10g10b10x2_uscaled_description;
   case PIPE_FORMAT_R10G10B10X2_SNORM:
      return &util_format_r10g10b10x2_snorm_description;
   default:
      return NULL;
   }
}

@


1.2
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@@


1.1
log
@Initial revision
@
text
@d32 2
d2121 121
d2908 2
a2909 2
union util_format_l8_srgb {
   uint8_t value;
d2911 1
a2911 1
      uint8_t rgb;
d2916 1
a2916 1
util_format_l8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d2923 11
a2933 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
         src += 1;
d2942 1
a2942 1
util_format_l8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d2949 6
a2954 3
         uint8_t value = 0;
         value |= util_format_linear_float_to_srgb_8unorm(src[2]);
         *(uint8_t *)dst = value;
d2956 1
a2956 1
         dst += 1;
d2964 1
a2964 1
util_format_l8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d2966 10
a2975 7
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
d2979 1
a2979 1
util_format_l8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d2986 11
a2996 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = 255; /* a */
         src += 1;
d3005 1
a3005 1
util_format_l8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3012 6
a3017 3
         uint8_t value = 0;
         value |= util_format_linear_to_srgb_8unorm(src[2]);
         *(uint8_t *)dst = value;
d3019 1
a3019 1
         dst += 1;
d3026 1
a3026 1
union util_format_l8a8_srgb {
d3029 1
a3029 2
      uint8_t rgb;
      uint8_t a;
d3034 1
a3034 1
util_format_l8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3042 1
a3042 2
         uint16_t rgb;
         uint16_t a;
d3046 5
a3050 6
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3060 1
a3060 1
util_format_l8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3068 1
a3068 2
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
d3082 1
a3082 1
util_format_l8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3085 1
a3085 2
         uint16_t rgb;
         uint16_t a;
d3089 5
a3093 6
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3097 1
a3097 1
util_format_l8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3105 1
a3105 2
         uint16_t rgb;
         uint16_t a;
d3109 5
a3113 6
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
d3123 1
a3123 1
util_format_l8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3131 1
a3131 2
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= (src[3]) << 8;
d3144 2
a3145 1
union util_format_r8g8b8_srgb {
d3147 2
a3148 3
      uint8_t r;
      uint8_t g;
      uint8_t b;
d3153 1
a3153 1
util_format_r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3160 13
a3172 7
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
         src += 3;
d3181 1
a3181 1
util_format_r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3188 7
a3194 5
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_float_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_float_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_float_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
d3196 1
a3196 1
         dst += 3;
d3204 1
a3204 1
util_format_r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3206 12
a3217 6
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
d3221 1
a3221 1
util_format_r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3228 13
a3240 7
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_to_linear_8unorm(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
         src += 3;
d3249 1
a3249 1
util_format_r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3256 7
a3262 5
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
d3264 1
a3264 1
         dst += 3;
d3271 2
a3272 2
union util_format_r8g8b8a8_srgb {
   uint32_t value;
d3274 1
a3274 4
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
d3279 1
a3279 1
util_format_r8g8b8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3286 8
a3293 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
d3302 1
a3302 1
util_format_r8g8b8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3309 3
a3311 9
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3313 1
a3313 1
         dst += 4;
d3321 1
a3321 1
util_format_r8g8b8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3323 7
a3329 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3333 1
a3333 1
util_format_r8g8b8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3340 8
a3347 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
d3356 1
a3356 1
util_format_r8g8b8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3363 3
a3365 9
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3367 1
a3367 1
         dst += 4;
d3374 2
a3375 2
union util_format_a8b8g8r8_srgb {
   uint32_t value;
d3377 1
a3377 4
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
d3382 1
a3382 1
util_format_a8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3389 8
a3396 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
d3405 1
a3405 1
util_format_a8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3412 3
a3414 9
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3416 1
a3416 1
         dst += 4;
d3424 1
a3424 1
util_format_a8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3426 7
a3432 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3436 1
a3436 1
util_format_a8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3443 8
a3450 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
d3459 1
a3459 1
util_format_a8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3466 3
a3468 9
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3470 1
a3470 1
         dst += 4;
d3477 2
a3478 2
union util_format_x8b8g8r8_srgb {
   uint32_t value;
d3480 2
a3481 4
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
d3486 1
a3486 1
util_format_x8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3493 3
a3495 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3497 1
a3497 1
         value = util_bswap32(value);
d3499 14
a3512 15
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

d3514 1
a3514 1
util_format_x8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3521 3
a3523 4
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
d3525 1
a3525 1
         value = util_bswap32(value);
d3527 1
a3527 1
         *(uint32_t *)dst = value;
d3529 1
a3529 1
         dst += 4;
d3537 1
a3537 1
util_format_x8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3539 3
a3541 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3543 1
a3543 1
         value = util_bswap32(value);
d3545 6
a3550 7
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
d3554 1
a3554 1
util_format_x8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3561 3
a3563 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3565 1
a3565 1
         value = util_bswap32(value);
d3567 7
a3573 8
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
         src += 4;
d3582 1
a3582 1
util_format_x8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3589 3
a3591 4
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
d3593 1
a3593 1
         value = util_bswap32(value);
d3595 1
a3595 1
         *(uint32_t *)dst = value;
d3597 1
a3597 1
         dst += 4;
d3604 2
a3605 2
union util_format_b8g8r8a8_srgb {
   uint32_t value;
d3607 1
a3607 4
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
d3612 1
a3612 1
util_format_b8g8r8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3619 8
a3626 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
d3635 1
a3635 1
util_format_b8g8r8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3642 3
a3644 9
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3646 1
a3646 1
         dst += 4;
d3654 1
a3654 1
util_format_b8g8r8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3656 7
a3662 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3666 1
a3666 1
util_format_b8g8r8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3673 8
a3680 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
d3689 1
a3689 1
util_format_b8g8r8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3696 3
a3698 9
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d3700 1
a3700 1
         dst += 4;
d3707 2
a3708 2
union util_format_b8g8r8x8_srgb {
   uint32_t value;
d3710 1
a3710 4
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
d3715 1
a3715 1
util_format_b8g8r8x8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3722 2
a3723 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3725 1
a3725 1
         value = util_bswap32(value);
d3727 6
a3732 8
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
d3741 1
a3741 1
util_format_b8g8r8x8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3748 2
a3749 4
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
d3751 1
a3751 1
         value = util_bswap32(value);
d3753 1
a3753 1
         *(uint32_t *)dst = value;
d3755 1
a3755 1
         dst += 4;
d3763 1
a3763 1
util_format_b8g8r8x8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3765 2
a3766 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3768 1
a3768 1
         value = util_bswap32(value);
d3770 5
a3774 7
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
d3778 1
a3778 1
util_format_b8g8r8x8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3785 2
a3786 4
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
d3788 1
a3788 1
         value = util_bswap32(value);
d3790 6
a3795 8
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
         src += 4;
d3804 1
a3804 1
util_format_b8g8r8x8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3811 2
a3812 4
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
d3814 1
a3814 1
         value = util_bswap32(value);
d3816 1
a3816 1
         *(uint32_t *)dst = value;
d3818 1
a3818 1
         dst += 4;
d3825 2
a3826 2
union util_format_a8r8g8b8_srgb {
   uint32_t value;
d3828 1
a3828 4
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
d3833 1
a3833 1
util_format_a8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3840 2
a3841 5
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
d3843 1
a3843 1
         value = util_bswap32(value);
d3845 6
a3850 9
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
d3859 1
a3859 1
util_format_a8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3866 2
a3867 5
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
d3869 1
a3869 1
         value = util_bswap32(value);
d3871 1
a3871 1
         *(uint32_t *)dst = value;
d3873 1
a3873 1
         dst += 4;
d3881 1
a3881 1
util_format_a8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d3883 2
a3884 5
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
d3886 1
a3886 1
         value = util_bswap32(value);
d3888 5
a3892 8
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d3896 1
a3896 1
util_format_a8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3903 2
a3904 5
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
d3906 1
a3906 1
         value = util_bswap32(value);
d3908 6
a3913 9
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
         src += 4;
d3922 1
a3922 1
util_format_a8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3929 2
a3930 5
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
d3932 1
a3932 1
         value = util_bswap32(value);
d3934 1
a3934 1
         *(uint32_t *)dst = value;
d3936 1
a3936 1
         dst += 4;
d3943 1
a3943 1
union util_format_x8r8g8b8_srgb {
d3946 2
a3947 4
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
d3952 1
a3952 1
util_format_x8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d3960 2
a3961 3
         uint32_t r;
         uint32_t g;
         uint32_t b;
d3965 6
a3970 7
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
d3980 1
a3980 1
util_format_x8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d3988 2
a3989 3
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
d4003 1
a4003 1
util_format_x8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4006 2
a4007 3
         uint32_t r;
         uint32_t g;
         uint32_t b;
d4011 6
a4016 7
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
d4020 1
a4020 1
util_format_x8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4028 2
a4029 3
         uint32_t r;
         uint32_t g;
         uint32_t b;
d4033 6
a4038 7
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
d4048 1
a4048 1
util_format_x8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4056 2
a4057 3
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
d4070 2
a4071 2
union util_format_r8sg8sb8ux8u_norm {
   uint32_t value;
d4073 1
a4073 4
      int8_t r;
      int8_t g;
      uint8_t b;
      uint8_t x;
d4078 1
a4078 1
util_format_r8sg8sb8ux8u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4085 2
a4086 4
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
d4088 1
a4088 1
         value = util_bswap32(value);
d4090 6
a4095 8
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
         src += 4;
d4104 1
a4104 1
util_format_r8sg8sb8ux8u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4111 2
a4112 4
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
d4114 1
a4114 1
         value = util_bswap32(value);
d4116 1
a4116 1
         *(uint32_t *)dst = value;
d4118 1
a4118 1
         dst += 4;
d4126 1
a4126 1
util_format_r8sg8sb8ux8u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4128 2
a4129 4
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
d4131 1
a4131 1
         value = util_bswap32(value);
d4133 5
a4137 7
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
d4141 1
a4141 1
util_format_r8sg8sb8ux8u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4148 2
a4149 4
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
d4151 1
a4151 1
         value = util_bswap32(value);
d4153 6
a4158 8
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
         src += 4;
d4167 1
a4167 1
util_format_r8sg8sb8ux8u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4174 2
a4175 4
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= ((src[2]) & 0xff) << 16;
d4177 1
a4177 1
         value = util_bswap32(value);
d4179 1
a4179 1
         *(uint32_t *)dst = value;
d4181 1
a4181 1
         dst += 4;
d4188 2
a4189 2
union util_format_r10sg10sb10sa2u_norm {
   uint32_t value;
d4191 1
a4191 4
      int r:10;
      int g:10;
      int b:10;
      unsigned a:2;
d4196 1
a4196 1
util_format_r10sg10sb10sa2u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4203 7
a4209 17
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
         src += 4;
d4218 1
a4218 1
util_format_r10sg10sb10sa2u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4225 3
a4227 9
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)(CLAMP(src[3], 0, 1) * 0x3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d4229 1
a4229 1
         dst += 4;
d4237 1
a4237 1
util_format_r10sg10sb10sa2u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4239 6
a4244 16
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
d4248 1
a4248 1
util_format_r10sg10sb10sa2u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4255 7
a4261 17
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
         src += 4;
d4270 1
a4270 1
util_format_r10sg10sb10sa2u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4277 3
a4279 9
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d4281 1
a4281 1
         dst += 4;
d4288 1
a4288 1
union util_format_r5sg5sb6u_norm {
d4291 1
a4291 3
      int r:5;
      int g:5;
      unsigned b:6;
d4296 1
a4296 1
util_format_r5sg5sb6u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4303 5
a4307 13
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
d4318 1
a4318 1
util_format_r5sg5sb6u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4325 3
a4327 8
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(CLAMP(src[0], -1, 1) * 0xf)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 5) ;
         value |= ((uint16_t)(CLAMP(src[2], 0, 1) * 0x3f)) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d4337 1
a4337 1
util_format_r5sg5sb6u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4339 5
a4343 13
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
d4348 1
a4348 1
util_format_r5sg5sb6u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4355 5
a4359 13
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3f); /* b */
d4370 1
a4370 1
util_format_r5sg5sb6u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4377 3
a4379 8
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 5) ;
         value |= ((uint16_t)(src[2] >> 2)) << 10;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d4388 1
a4388 1
union util_format_r10g10b10a2_uscaled {
d4391 2
a4392 4
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
d4397 1
a4397 1
util_format_r10g10b10a2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4404 6
a4409 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
d4419 1
a4419 1
util_format_r10g10b10a2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4426 4
a4429 9
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d4439 1
a4439 1
util_format_r10g10b10a2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4441 6
a4446 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
d4450 1
a4450 1
util_format_r10g10b10a2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4457 6
a4462 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
d4472 1
a4472 1
util_format_r10g10b10a2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4479 4
a4482 9
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d4491 6
a4496 4
static INLINE void
util_format_r11g11b10_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}
d4499 1
a4499 1
util_format_r11g11b10_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4501 17
d4521 1
a4521 1
util_format_r11g11b10_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4523 14
d4540 1
a4540 1
util_format_r11g11b10_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4542 6
d4551 1
a4551 1
util_format_r11g11b10_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4553 17
d4573 1
a4573 1
util_format_rgtc1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4575 14
d4591 2
a4592 97
static INLINE void
util_format_rgtc1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
}

static INLINE void
util_format_rgtc1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
}

static INLINE void
util_format_rgtc1_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc1_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
}

static INLINE void
util_format_rgtc2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
}

static INLINE void
util_format_rgtc2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

static INLINE void
util_format_rgtc2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
}

union util_format_r64_float {
   uint64_t value;
d4594 1
a4594 1
      double r;
d4599 1
a4599 1
util_format_r64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4606 1
a4606 1
         union util_format_r64_float pixel;
d4608 1
a4608 1
         dst[0] = (float)pixel.chan.r; /* r */
d4611 2
a4612 2
         dst[3] = 1; /* a */
         src += 8;
d4621 1
a4621 1
util_format_r64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4628 2
a4629 2
         union util_format_r64_float pixel;
         pixel.chan.r = (double)src[0];
d4632 1
a4632 1
         dst += 8;
d4640 1
a4640 1
util_format_r64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4642 1
a4642 1
         union util_format_r64_float pixel;
d4644 1
a4644 1
         dst[0] = (float)pixel.chan.r; /* r */
d4647 1
a4647 1
         dst[3] = 1; /* a */
d4651 1
a4651 1
util_format_r64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4658 1
a4658 1
         union util_format_r64_float pixel;
d4660 1
a4660 1
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
d4663 2
a4664 2
         dst[3] = 255; /* a */
         src += 8;
d4673 1
a4673 1
util_format_r64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4680 2
a4681 2
         union util_format_r64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
d4684 1
a4684 1
         dst += 8;
d4691 2
a4692 1
union util_format_r64g64_float {
d4694 1
a4694 2
      double r;
      double g;
d4699 1
a4699 1
util_format_r64g64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4706 1
a4706 1
         union util_format_r64g64_float pixel;
d4708 3
a4710 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
d4712 1
a4712 1
         src += 16;
d4721 1
a4721 1
util_format_r64g64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4728 2
a4729 3
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
d4732 1
a4732 1
         dst += 16;
d4740 1
a4740 1
util_format_r64g64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4742 1
a4742 1
         union util_format_r64g64_float pixel;
d4744 3
a4746 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
d4751 1
a4751 1
util_format_r64g64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4758 1
a4758 1
         union util_format_r64g64_float pixel;
d4760 3
a4762 3
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = 0; /* b */
d4764 1
a4764 1
         src += 16;
d4773 1
a4773 1
util_format_r64g64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4780 2
a4781 3
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
d4784 1
a4784 1
         dst += 16;
d4791 2
a4792 1
union util_format_r64g64b64_float {
d4794 2
a4795 3
      double r;
      double g;
      double b;
d4800 1
a4800 1
util_format_r64g64b64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4807 1
a4807 1
         union util_format_r64g64b64_float pixel;
d4809 5
a4813 5
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 24;
d4822 1
a4822 1
util_format_r64g64b64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4829 3
a4831 4
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
d4834 1
a4834 1
         dst += 24;
d4842 1
a4842 1
util_format_r64g64b64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4844 1
a4844 1
         union util_format_r64g64b64_float pixel;
d4846 4
a4849 4
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
d4853 1
a4853 1
util_format_r64g64b64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4860 1
a4860 1
         union util_format_r64g64b64_float pixel;
d4862 5
a4866 5
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = 255; /* a */
         src += 24;
d4875 1
a4875 1
util_format_r64g64b64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4882 3
a4884 4
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
d4887 1
a4887 1
         dst += 24;
d4894 2
a4895 1
union util_format_r64g64b64a64_float {
d4897 1
a4897 4
      double r;
      double g;
      double b;
      double a;
d4902 1
a4902 1
util_format_r64g64b64a64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4909 1
a4909 1
         union util_format_r64g64b64a64_float pixel;
d4911 5
a4915 5
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 32;
d4924 1
a4924 1
util_format_r64g64b64a64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d4931 2
a4932 5
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         pixel.chan.a = (double)src[3];
d4935 1
a4935 1
         dst += 32;
d4943 1
a4943 1
util_format_r64g64b64a64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d4945 1
a4945 1
         union util_format_r64g64b64a64_float pixel;
d4947 4
a4950 4
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
d4954 1
a4954 1
util_format_r64g64b64a64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4961 1
a4961 1
         union util_format_r64g64b64a64_float pixel;
d4963 5
a4967 5
         dst[0] = (uint8_t)(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
         src += 32;
d4976 1
a4976 1
util_format_r64g64b64a64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d4983 2
a4984 5
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         pixel.chan.a = (double)(src[3] * (1.0f/0xff));
d4987 1
a4987 1
         dst += 32;
d4994 2
a4995 2
union util_format_r32_float {
   uint32_t value;
d4997 1
a4997 1
      float r;
d5002 1
a5002 1
util_format_r32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5009 6
a5014 5
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d5016 1
a5016 1
         src += 4;
d5025 1
a5025 1
util_format_r32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5032 3
a5034 3
         union util_format_r32_float pixel;
         pixel.chan.r = src[0];
         memcpy(dst, &pixel, sizeof pixel);
d5036 1
a5036 1
         dst += 4;
d5044 1
a5044 1
util_format_r32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5046 6
a5051 5
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d5056 1
a5056 1
util_format_r32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5063 6
a5068 5
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d5070 1
a5070 1
         src += 4;
d5079 1
a5079 1
util_format_r32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5086 3
a5088 3
         union util_format_r32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
d5090 1
a5090 1
         dst += 4;
d5097 2
a5098 2
union util_format_r32g32_float {
   uint64_t value;
d5100 2
a5101 2
      float r;
      float g;
d5106 1
a5106 1
util_format_r32g32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5113 13
a5125 7
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
d5134 1
a5134 1
util_format_r32g32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5141 7
a5147 4
         union util_format_r32g32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
d5149 1
a5149 1
         dst += 8;
d5157 1
a5157 1
util_format_r32g32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5159 12
a5170 6
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d5174 1
a5174 1
util_format_r32g32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5181 13
a5193 7
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
d5202 1
a5202 1
util_format_r32g32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5209 7
a5215 4
         union util_format_r32g32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
d5217 1
a5217 1
         dst += 8;
d5224 1
a5224 1
union util_format_r32g32b32_float {
d5226 3
a5228 3
      float r;
      float g;
      float b;
d5233 1
a5233 1
util_format_r32g32b32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5240 1
a5240 1
         union util_format_r32g32b32_float pixel;
d5242 3
a5244 3
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
d5246 1
a5246 1
         src += 12;
d5255 1
a5255 1
util_format_r32g32b32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5262 4
a5265 4
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
d5268 1
a5268 1
         dst += 12;
d5276 1
a5276 1
util_format_r32g32b32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5278 1
a5278 1
         union util_format_r32g32b32_float pixel;
d5280 3
a5282 3
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
d5287 1
a5287 1
util_format_r32g32b32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5294 1
a5294 1
         union util_format_r32g32b32_float pixel;
d5296 3
a5298 3
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
d5300 1
a5300 1
         src += 12;
d5309 1
a5309 1
util_format_r32g32b32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5316 4
a5319 4
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
d5322 1
a5322 1
         dst += 12;
d5329 2
a5330 1
union util_format_r32g32b32a32_float {
d5332 4
a5335 4
      float r;
      float g;
      float b;
      float a;
d5340 1
a5340 1
util_format_r32g32b32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5347 17
a5363 7
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
         src += 16;
d5372 1
a5372 1
util_format_r32g32b32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5379 9
a5387 6
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
d5389 1
a5389 1
         dst += 16;
d5397 1
a5397 1
util_format_r32g32b32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5399 16
a5414 6
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
d5418 1
a5418 1
util_format_r32g32b32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5425 17
a5441 7
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
         src += 16;
d5450 1
a5450 1
util_format_r32g32b32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5457 9
a5465 6
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
d5467 1
a5467 1
         dst += 16;
d5474 1
a5474 1
union util_format_r32_unorm {
d5477 4
a5480 1
      uint32_t r;
d5485 1
a5485 1
util_format_r32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5493 3
d5500 8
a5507 5
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d5517 1
a5517 1
util_format_r32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5525 4
a5528 1
         value |= (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
d5542 1
a5542 1
util_format_r32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5545 3
d5552 8
a5559 5
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d5563 1
a5563 1
util_format_r32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5571 3
d5578 8
a5585 5
         r = value;
         dst[0] = (uint8_t)(r >> 24); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
d5595 1
a5595 1
util_format_r32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5603 4
a5606 1
         value |= (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
d5619 2
a5620 2
union util_format_r32g32_unorm {
   uint64_t value;
d5622 4
a5625 2
      uint32_t r;
      uint32_t g;
d5630 1
a5630 1
util_format_r32g32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5637 13
a5649 5
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
d5651 1
a5651 1
         src += 8;
d5660 1
a5660 1
util_format_r32g32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5667 8
a5674 4
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
d5676 1
a5676 1
         dst += 8;
d5684 1
a5684 1
util_format_r32g32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5686 13
a5698 5
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
d5703 1
a5703 1
util_format_r32g32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5710 13
a5722 5
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = 0; /* b */
d5724 1
a5724 1
         src += 8;
d5733 1
a5733 1
util_format_r32g32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5740 8
a5747 4
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d5749 1
a5749 1
         dst += 8;
d5756 2
a5757 1
union util_format_r32g32b32_unorm {
d5759 4
a5762 3
      uint32_t r;
      uint32_t g;
      uint32_t b;
d5767 1
a5767 1
util_format_r32g32b32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5774 17
a5790 7
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
         src += 12;
d5799 1
a5799 1
util_format_r32g32b32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5806 9
a5814 5
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
d5816 1
a5816 1
         dst += 12;
d5824 1
a5824 1
util_format_r32g32b32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5826 16
a5841 6
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
d5845 1
a5845 1
util_format_r32g32b32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5852 17
a5868 7
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = 255; /* a */
         src += 12;
d5877 1
a5877 1
util_format_r32g32b32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5884 9
a5892 5
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d5894 1
a5894 1
         dst += 12;
d5901 2
a5902 1
union util_format_r32g32b32a32_unorm {
d5904 4
a5907 4
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
d5912 1
a5912 1
util_format_r32g32b32a32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5919 15
a5933 7
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
         src += 16;
d5942 1
a5942 1
util_format_r32g32b32a32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d5949 8
a5956 6
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
d5958 1
a5958 1
         dst += 16;
d5966 1
a5966 1
util_format_r32g32b32a32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d5968 14
a5981 6
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
d5985 1
a5985 1
util_format_r32g32b32a32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d5992 15
a6006 7
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 24); /* a */
         src += 16;
d6015 1
a6015 1
util_format_r32g32b32a32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6022 8
a6029 6
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d6031 1
a6031 1
         dst += 16;
d6038 1
a6038 1
union util_format_r32_uscaled {
d6041 4
a6044 1
      uint32_t r;
d6049 1
a6049 1
util_format_r32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6057 1
d6059 2
d6064 8
a6071 5
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d6081 1
a6081 1
util_format_r32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6089 4
a6092 1
         value |= (uint32_t)CLAMP(src[0], 0, 4294967295);
d6106 1
a6106 1
util_format_r32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6109 1
d6111 2
d6116 8
a6123 5
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d6127 1
a6127 1
util_format_r32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6135 1
d6137 2
d6142 8
a6149 5
         r = value;
         dst[0] = (uint8_t)(((uint64_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
d6159 1
a6159 1
util_format_r32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6167 4
a6170 1
         value |= (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
d6183 2
a6184 2
union util_format_r32g32_uscaled {
   uint64_t value;
d6186 4
a6189 2
      uint32_t r;
      uint32_t g;
d6194 1
a6194 1
util_format_r32g32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6201 13
a6213 5
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
d6215 1
a6215 1
         src += 8;
d6224 1
a6224 1
util_format_r32g32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6231 8
a6238 4
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
d6240 1
a6240 1
         dst += 8;
d6248 1
a6248 1
util_format_r32g32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6250 13
a6262 5
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
d6267 1
a6267 1
util_format_r32g32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6274 13
a6286 5
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
d6288 1
a6288 1
         src += 8;
d6297 1
a6297 1
util_format_r32g32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6304 8
a6311 4
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d6313 1
a6313 1
         dst += 8;
d6320 2
a6321 1
union util_format_r32g32b32_uscaled {
d6323 4
a6326 3
      uint32_t r;
      uint32_t g;
      uint32_t b;
d6331 1
a6331 1
util_format_r32g32b32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6338 13
a6350 5
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d6352 1
a6352 1
         src += 12;
d6361 1
a6361 1
util_format_r32g32b32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6368 8
a6375 5
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
d6377 1
a6377 1
         dst += 12;
d6385 1
a6385 1
util_format_r32g32b32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6387 13
a6399 5
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d6404 1
a6404 1
util_format_r32g32b32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6411 13
a6423 5
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
d6425 1
a6425 1
         src += 12;
d6434 1
a6434 1
util_format_r32g32b32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6441 8
a6448 5
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d6450 1
a6450 1
         dst += 12;
d6457 2
a6458 1
union util_format_r32g32b32a32_uscaled {
d6460 4
a6463 4
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
d6468 1
a6468 1
util_format_r32g32b32a32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6475 17
a6491 7
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 16;
d6500 1
a6500 1
util_format_r32g32b32a32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6507 9
a6515 6
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
d6517 1
a6517 1
         dst += 16;
d6525 1
a6525 1
util_format_r32g32b32a32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6527 16
a6542 6
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
d6546 1
a6546 1
util_format_r32g32b32a32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6553 17
a6569 7
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
         src += 16;
d6578 1
a6578 1
util_format_r32g32b32a32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6585 9
a6593 6
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d6595 1
a6595 1
         dst += 16;
d6602 2
a6603 2
union util_format_r32_snorm {
   uint32_t value;
d6605 3
a6607 1
      int32_t r;
d6612 1
a6612 1
util_format_r32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6619 4
a6622 2
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
d6624 1
a6624 1
         value = util_bswap32(value);
d6626 6
a6631 4
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d6633 1
a6633 1
         src += 4;
d6642 1
a6642 1
util_format_r32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6649 4
a6652 2
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff)) ;
d6654 1
a6654 1
         value = util_bswap32(value);
d6656 1
a6656 1
         *(uint32_t *)dst = value;
d6658 1
a6658 1
         dst += 4;
d6666 1
a6666 1
util_format_r32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6668 4
a6671 2
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
d6673 1
a6673 1
         value = util_bswap32(value);
d6675 6
a6680 4
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d6685 1
a6685 1
util_format_r32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6692 4
a6695 2
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
d6697 1
a6697 1
         value = util_bswap32(value);
d6699 6
a6704 4
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 23); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d6706 1
a6706 1
         src += 4;
d6715 1
a6715 1
util_format_r32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6722 4
a6725 2
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff)) ;
d6727 1
a6727 1
         value = util_bswap32(value);
d6729 1
a6729 1
         *(uint32_t *)dst = value;
d6731 1
a6731 1
         dst += 4;
d6738 2
a6739 2
union util_format_r32g32_snorm {
   uint64_t value;
d6741 4
a6744 2
      int32_t r;
      int32_t g;
d6749 1
a6749 1
util_format_r32g32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6756 17
a6772 7
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
d6781 1
a6781 1
util_format_r32g32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6788 9
a6796 4
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
d6798 1
a6798 1
         dst += 8;
d6806 1
a6806 1
util_format_r32g32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6808 16
a6823 6
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d6827 1
a6827 1
util_format_r32g32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6834 17
a6850 7
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
d6859 1
a6859 1
util_format_r32g32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6866 9
a6874 4
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d6876 1
a6876 1
         dst += 8;
d6883 2
a6884 1
union util_format_r32g32b32_snorm {
d6886 1
a6886 3
      int32_t r;
      int32_t g;
      int32_t b;
d6891 1
a6891 1
util_format_r32g32b32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6898 1
a6898 1
         union util_format_r32g32b32_snorm pixel;
d6900 3
a6902 3
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
d6904 1
a6904 1
         src += 12;
d6913 1
a6913 1
util_format_r32g32b32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d6920 2
a6921 4
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
d6924 1
a6924 1
         dst += 12;
d6932 1
a6932 1
util_format_r32g32b32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d6934 1
a6934 1
         union util_format_r32g32b32_snorm pixel;
d6936 3
a6938 3
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
d6943 1
a6943 1
util_format_r32g32b32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6950 1
a6950 1
         union util_format_r32g32b32_snorm pixel;
d6952 3
a6954 3
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
d6956 1
a6956 1
         src += 12;
d6965 1
a6965 1
util_format_r32g32b32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6972 2
a6973 4
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
d6976 1
a6976 1
         dst += 12;
d6983 1
a6983 1
union util_format_r32g32b32a32_snorm {
d6985 2
a6986 4
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
d6991 1
a6991 1
util_format_r32g32b32a32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d6998 1
a6998 1
         union util_format_r32g32b32a32_snorm pixel;
d7000 4
a7003 4
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
d7013 1
a7013 1
util_format_r32g32b32a32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7020 3
a7022 5
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
d7033 1
a7033 1
util_format_r32g32b32a32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7035 1
a7035 1
         union util_format_r32g32b32a32_snorm pixel;
d7037 4
a7040 4
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
d7044 1
a7044 1
util_format_r32g32b32a32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7051 1
a7051 1
         union util_format_r32g32b32a32_snorm pixel;
d7053 4
a7056 4
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 23); /* a */
d7066 1
a7066 1
util_format_r32g32b32a32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7073 3
a7075 5
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x7fffffff / 0xff);
d7085 1
a7085 2
union util_format_r32_sscaled {
   uint32_t value;
d7087 3
a7089 1
      int32_t r;
d7094 1
a7094 1
util_format_r32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7101 5
a7105 9
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7107 1
a7107 1
         src += 4;
d7116 1
a7116 1
util_format_r32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7123 5
a7127 6
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)CLAMP(src[0], -2147483648, 2147483647)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d7129 1
a7129 1
         dst += 4;
d7137 1
a7137 1
util_format_r32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7139 5
a7143 9
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7148 1
a7148 1
util_format_r32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7155 5
a7159 9
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(((uint64_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7161 1
a7161 1
         src += 4;
d7170 1
a7170 1
util_format_r32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7177 5
a7181 6
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x1 / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d7183 1
a7183 1
         dst += 4;
d7190 1
a7190 2
union util_format_r32g32_sscaled {
   uint64_t value;
d7192 4
a7195 2
      int32_t r;
      int32_t g;
d7200 1
a7200 1
util_format_r32g32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7207 1
a7207 1
         union util_format_r32g32_sscaled pixel;
d7211 3
a7213 3
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
d7222 1
a7222 1
util_format_r32g32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7229 5
a7233 3
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
d7236 1
a7236 1
         dst += 8;
d7244 1
a7244 1
util_format_r32g32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7246 1
a7246 1
         union util_format_r32g32_sscaled pixel;
d7250 2
a7251 2
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d7255 1
a7255 1
util_format_r32g32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7262 1
a7262 1
         union util_format_r32g32_sscaled pixel;
d7264 5
a7268 5
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
d7277 1
a7277 1
util_format_r32g32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7284 5
a7288 3
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
d7291 1
a7291 1
         dst += 8;
d7298 2
a7299 1
union util_format_r32g32b32_sscaled {
d7301 1
a7301 3
      int32_t r;
      int32_t g;
      int32_t b;
d7306 1
a7306 1
util_format_r32g32b32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7313 1
a7313 1
         union util_format_r32g32b32_sscaled pixel;
d7315 3
a7317 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d7319 1
a7319 1
         src += 12;
d7328 1
a7328 1
util_format_r32g32b32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7335 2
a7336 4
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
d7339 1
a7339 1
         dst += 12;
d7347 1
a7347 1
util_format_r32g32b32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7349 1
a7349 1
         union util_format_r32g32b32_sscaled pixel;
d7351 3
a7353 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d7358 1
a7358 1
util_format_r32g32b32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7365 1
a7365 1
         union util_format_r32g32b32_sscaled pixel;
d7367 3
a7369 3
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
d7371 1
a7371 1
         src += 12;
d7380 1
a7380 1
util_format_r32g32b32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7387 2
a7388 4
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
d7391 1
a7391 1
         dst += 12;
d7398 2
a7399 1
union util_format_r32g32b32a32_sscaled {
d7401 2
a7402 4
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
d7407 1
a7407 1
util_format_r32g32b32a32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7414 1
a7414 1
         union util_format_r32g32b32a32_sscaled pixel;
d7416 9
a7424 9
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
d7429 1
a7429 1
util_format_r32g32b32a32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7436 3
a7438 5
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
d7441 1
a7441 1
         dst += 16;
d7449 1
a7449 1
util_format_r32g32b32a32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7451 1
a7451 1
         union util_format_r32g32b32a32_sscaled pixel;
d7453 4
a7456 4
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
d7460 1
a7460 1
util_format_r32g32b32a32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7467 1
a7467 1
         union util_format_r32g32b32a32_sscaled pixel;
d7469 5
a7473 5
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
         src += 16;
d7482 1
a7482 1
util_format_r32g32b32a32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7489 3
a7491 5
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
d7494 1
a7494 1
         dst += 16;
d7501 1
a7501 2
union util_format_r16_float {
   uint16_t value;
d7503 3
a7505 1
      uint16_t r;
d7510 1
a7510 1
util_format_r16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7517 1
a7517 1
         union util_format_r16_float pixel;
d7519 3
a7521 3
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7523 1
a7523 1
         src += 2;
d7532 1
a7532 1
util_format_r16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7539 4
a7542 2
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
d7545 1
a7545 1
         dst += 2;
d7553 1
a7553 1
util_format_r16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7555 1
a7555 1
         union util_format_r16_float pixel;
d7557 3
a7559 3
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7564 1
a7564 1
util_format_r16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7571 1
a7571 1
         union util_format_r16_float pixel;
d7573 3
a7575 3
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7577 1
a7577 1
         src += 2;
d7586 1
a7586 1
util_format_r16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7593 4
a7596 2
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
d7599 1
a7599 1
         dst += 2;
d7606 1
a7606 2
union util_format_r16g16_float {
   uint32_t value;
d7608 4
a7611 2
      uint16_t r;
      uint16_t g;
d7616 1
a7616 1
util_format_r16g16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7623 1
a7623 1
         union util_format_r16g16_float pixel;
d7625 5
a7629 5
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
d7638 1
a7638 1
util_format_r16g16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7645 5
a7649 3
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
d7652 1
a7652 1
         dst += 4;
d7660 1
a7660 1
util_format_r16g16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7662 1
a7662 1
         union util_format_r16g16_float pixel;
d7664 4
a7667 4
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d7671 1
a7671 1
util_format_r16g16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7678 1
a7678 1
         union util_format_r16g16_float pixel;
d7680 5
a7684 5
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
d7693 1
a7693 1
util_format_r16g16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7700 5
a7704 3
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
d7707 1
a7707 1
         dst += 4;
d7714 2
a7715 1
union util_format_r16g16b16_float {
d7717 1
a7717 3
      uint16_t r;
      uint16_t g;
      uint16_t b;
d7722 1
a7722 1
util_format_r16g16b16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7729 9
a7737 5
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
d7739 1
a7739 1
         src += 6;
d7748 1
a7748 1
util_format_r16g16b16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7755 6
a7760 5
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
d7762 1
a7762 1
         dst += 6;
d7770 1
a7770 1
util_format_r16g16b16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7772 9
a7780 5
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
d7785 1
a7785 1
util_format_r16g16b16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7792 9
a7800 5
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
d7802 1
a7802 1
         src += 6;
d7811 1
a7811 1
util_format_r16g16b16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7818 6
a7823 5
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
d7825 1
a7825 1
         dst += 6;
d7832 1
a7832 1
union util_format_r16g16b16a16_float {
d7835 2
a7836 4
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
d7841 1
a7841 1
util_format_r16g16b16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7848 1
a7848 1
         union util_format_r16g16b16a16_float pixel;
d7850 4
a7853 4
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
d7863 1
a7863 1
util_format_r16g16b16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7870 3
a7872 5
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         pixel.chan.a = util_float_to_half(src[3]);
d7883 1
a7883 1
util_format_r16g16b16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7885 1
a7885 1
         union util_format_r16g16b16a16_float pixel;
d7887 4
a7890 4
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
d7894 1
a7894 1
util_format_r16g16b16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7901 1
a7901 1
         union util_format_r16g16b16a16_float pixel;
d7903 4
a7906 4
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
d7916 1
a7916 1
util_format_r16g16b16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7923 3
a7925 5
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
d7935 1
a7935 2
union util_format_r16_unorm {
   uint16_t value;
d7937 3
a7939 1
      uint16_t r;
d7944 1
a7944 1
util_format_r16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d7951 5
a7955 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7957 1
a7957 1
         src += 2;
d7966 1
a7966 1
util_format_r16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d7973 5
a7977 6
         uint16_t value = 0;
         value |= (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d7979 1
a7979 1
         dst += 2;
d7987 1
a7987 1
util_format_r16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d7989 5
a7993 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d7998 1
a7998 1
util_format_r16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8005 5
a8009 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d8011 1
a8011 1
         src += 2;
d8020 1
a8020 1
util_format_r16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8027 5
a8031 6
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d8033 1
a8033 1
         dst += 2;
d8040 1
a8040 2
union util_format_r16g16_unorm {
   uint32_t value;
d8042 4
a8045 2
      uint16_t r;
      uint16_t g;
d8050 1
a8050 1
util_format_r16g16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8057 7
a8063 13
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
d8072 1
a8072 1
util_format_r16g16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8079 6
a8084 7
         uint32_t value = 0;
         value |= ((uint16_t)(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)(CLAMP(src[1], 0, 1) * 0xffff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d8086 1
a8086 1
         dst += 4;
d8094 1
a8094 1
util_format_r16g16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8096 6
a8101 12
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d8105 1
a8105 1
util_format_r16g16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8112 7
a8118 13
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
d8127 1
a8127 1
util_format_r16g16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8134 6
a8139 7
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) << 16;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d8141 1
a8141 1
         dst += 4;
d8148 2
a8149 1
union util_format_r16g16b16_unorm {
d8151 1
a8151 3
      uint16_t r;
      uint16_t g;
      uint16_t b;
d8156 1
a8156 1
util_format_r16g16b16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8163 9
a8171 5
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
d8173 1
a8173 1
         src += 6;
d8182 1
a8182 1
util_format_r16g16b16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8189 6
a8194 5
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
d8196 1
a8196 1
         dst += 6;
d8204 1
a8204 1
util_format_r16g16b16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8206 9
a8214 5
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
d8219 1
a8219 1
util_format_r16g16b16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8226 9
a8234 5
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
d8236 1
a8236 1
         src += 6;
d8245 1
a8245 1
util_format_r16g16b16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8252 6
a8257 5
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d8259 1
a8259 1
         dst += 6;
d8266 1
a8266 1
union util_format_r16g16b16a16_unorm {
d8269 2
a8270 4
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
d8275 1
a8275 1
util_format_r16g16b16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8282 1
a8282 1
         union util_format_r16g16b16a16_unorm pixel;
d8284 4
a8287 4
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
d8297 1
a8297 1
util_format_r16g16b16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8304 3
a8306 5
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)(CLAMP(src[3], 0, 1) * 0xffff);
d8317 1
a8317 1
util_format_r16g16b16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8319 1
a8319 1
         union util_format_r16g16b16a16_unorm pixel;
d8321 4
a8324 4
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
d8328 1
a8328 1
util_format_r16g16b16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8335 1
a8335 1
         union util_format_r16g16b16a16_unorm pixel;
d8337 4
a8340 4
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 8); /* a */
d8350 1
a8350 1
util_format_r16g16b16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8357 3
a8359 5
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
d8369 1
a8369 2
union util_format_r16_uscaled {
   uint16_t value;
d8371 3
a8373 1
      uint16_t r;
d8378 1
a8378 1
util_format_r16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8385 5
a8389 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d8391 1
a8391 1
         src += 2;
d8400 1
a8400 1
util_format_r16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8407 5
a8411 6
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d8413 1
a8413 1
         dst += 2;
d8421 1
a8421 1
util_format_r16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8423 5
a8427 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d8432 1
a8432 1
util_format_r16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8439 5
a8443 9
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d8445 108
a8552 1
         src += 2;
d8561 1
a8561 1
util_format_r16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8568 6
a8573 6
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d8575 1
a8575 1
         dst += 2;
d8582 1
a8582 1
union util_format_r16g16_uscaled {
d8585 1
a8585 2
      uint16_t r;
      uint16_t g;
d8590 1
a8590 1
util_format_r16g16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8598 1
a8598 2
         uint32_t r;
         uint32_t g;
d8602 3
a8604 4
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
d8616 1
a8616 1
util_format_r16g16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8624 1
a8624 2
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) << 16;
d8638 1
a8638 1
util_format_r16g16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8641 1
a8641 2
         uint32_t r;
         uint32_t g;
d8645 3
a8647 4
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
d8653 1
a8653 1
util_format_r16g16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8661 1
a8661 2
         uint32_t r;
         uint32_t g;
d8665 3
a8667 4
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
d8679 1
a8679 1
util_format_r16g16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8687 1
a8687 2
         value |= ((uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16;
d8700 2
a8701 1
union util_format_r16g16b16_uscaled {
d8703 2
a8704 3
      uint16_t r;
      uint16_t g;
      uint16_t b;
d8709 1
a8709 1
util_format_r16g16b16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8716 1
a8716 1
         union util_format_r16g16b16_uscaled pixel;
d8718 3
a8720 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d8722 1
a8722 1
         src += 6;
d8731 1
a8731 1
util_format_r16g16b16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8738 3
a8740 4
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
d8743 1
a8743 1
         dst += 6;
d8751 1
a8751 1
util_format_r16g16b16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8753 1
a8753 1
         union util_format_r16g16b16_uscaled pixel;
d8755 3
a8757 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d8762 1
a8762 1
util_format_r16g16b16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8769 1
a8769 1
         union util_format_r16g16b16_uscaled pixel;
d8771 3
a8773 3
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
d8775 1
a8775 1
         src += 6;
d8784 1
a8784 1
util_format_r16g16b16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8791 3
a8793 4
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
d8796 1
a8796 1
         dst += 6;
d8803 1
a8803 2
union util_format_r16g16b16a16_uscaled {
   uint64_t value;
d8805 3
a8807 4
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
d8812 1
a8812 1
util_format_r16g16b16a16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8819 1
a8819 1
         union util_format_r16g16b16a16_uscaled pixel;
d8821 5
a8825 5
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 8;
d8834 1
a8834 1
util_format_r16g16b16a16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8841 4
a8844 5
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
d8847 1
a8847 1
         dst += 8;
d8855 1
a8855 1
util_format_r16g16b16a16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8857 1
a8857 1
         union util_format_r16g16b16a16_uscaled pixel;
d8859 4
a8862 4
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
d8866 1
a8866 1
util_format_r16g16b16a16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8873 1
a8873 1
         union util_format_r16g16b16a16_uscaled pixel;
d8875 5
a8879 5
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
         src += 8;
d8888 1
a8888 1
util_format_r16g16b16a16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8895 4
a8898 5
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
d8901 1
a8901 1
         dst += 8;
d8908 1
a8908 2
union util_format_r16_snorm {
   uint16_t value;
d8910 4
a8913 1
      int16_t r;
d8918 1
a8918 1
util_format_r16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8925 7
a8931 11
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
d8940 1
a8940 1
util_format_r16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d8947 6
a8952 6
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(CLAMP(src[0], -1, 1) * 0x7fff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d8954 1
a8954 1
         dst += 2;
d8962 1
a8962 1
util_format_r16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d8964 6
a8969 10
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d8973 1
a8973 1
util_format_r16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d8980 7
a8986 11
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
d8995 1
a8995 1
util_format_r16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9002 6
a9007 6
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d9009 1
a9009 1
         dst += 2;
d9016 1
a9016 1
union util_format_r16g16_snorm {
d9019 1
a9019 2
      int16_t r;
      int16_t g;
d9024 1
a9024 1
util_format_r16g16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a9032 1
         int32_t g;
d9036 3
a9038 4
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
d9050 1
a9050 1
util_format_r16g16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9058 1
a9058 2
         value |= (uint32_t)(((int16_t)(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(CLAMP(src[1], -1, 1) * 0x7fff)) << 16) ;
d9072 1
a9072 1
util_format_r16g16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a9075 1
         int32_t g;
d9079 3
a9081 4
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
d9087 1
a9087 1
util_format_r16g16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a9095 1
         int32_t g;
d9099 3
a9101 4
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
d9113 1
a9113 1
util_format_r16g16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9121 1
a9121 2
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) << 16) ;
d9134 2
a9135 1
union util_format_r16g16b16_snorm {
d9137 2
a9138 3
      int16_t r;
      int16_t g;
      int16_t b;
d9143 1
a9143 1
util_format_r16g16b16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9150 1
a9150 1
         union util_format_r16g16b16_snorm pixel;
d9152 3
a9154 3
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
d9156 1
a9156 1
         src += 6;
d9165 1
a9165 1
util_format_r16g16b16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9172 3
a9174 4
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)(CLAMP(src[2], -1, 1) * 0x7fff);
d9177 1
a9177 1
         dst += 6;
d9185 1
a9185 1
util_format_r16g16b16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9187 1
a9187 1
         union util_format_r16g16b16_snorm pixel;
d9189 3
a9191 3
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
d9196 1
a9196 1
util_format_r16g16b16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9203 1
a9203 1
         union util_format_r16g16b16_snorm pixel;
d9205 3
a9207 3
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
d9209 1
a9209 1
         src += 6;
d9218 1
a9218 1
util_format_r16g16b16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9225 3
a9227 4
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
d9230 1
a9230 1
         dst += 6;
d9237 1
a9237 2
union util_format_r16g16b16a16_snorm {
   uint64_t value;
d9239 3
a9241 4
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
d9246 1
a9246 1
util_format_r16g16b16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9253 1
a9253 1
         union util_format_r16g16b16a16_snorm pixel;
d9255 5
a9259 5
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
         src += 8;
d9268 1
a9268 1
util_format_r16g16b16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9275 4
a9278 5
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)(CLAMP(src[3], -1, 1) * 0x7fff);
d9281 1
a9281 1
         dst += 8;
d9289 1
a9289 1
util_format_r16g16b16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9291 1
a9291 1
         union util_format_r16g16b16a16_snorm pixel;
d9293 4
a9296 4
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
d9300 1
a9300 1
util_format_r16g16b16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9307 1
a9307 1
         union util_format_r16g16b16a16_snorm pixel;
d9309 5
a9313 5
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 7); /* a */
         src += 8;
d9322 1
a9322 1
util_format_r16g16b16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9329 4
a9332 5
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff);
d9335 1
a9335 1
         dst += 8;
d9342 1
a9342 2
union util_format_r16_sscaled {
   uint16_t value;
d9344 4
a9347 1
      int16_t r;
d9352 1
a9352 1
util_format_r16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9359 7
a9365 11
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
d9374 1
a9374 1
util_format_r16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9381 6
a9386 6
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d9388 1
a9388 1
         dst += 2;
d9396 1
a9396 1
util_format_r16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9398 6
a9403 10
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d9407 1
a9407 1
util_format_r16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9414 7
a9420 11
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
d9429 1
a9429 1
util_format_r16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9436 6
a9441 6
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap16(value);
#endif
         *(uint16_t *)dst = value;
d9443 1
a9443 1
         dst += 2;
d9450 2
a9451 2
union util_format_r16g16_sscaled {
   uint32_t value;
d9453 1
a9453 2
      int16_t r;
      int16_t g;
d9458 1
a9458 1
util_format_r16g16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9465 4
a9468 10
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
d9471 1
a9471 1
         src += 4;
d9480 1
a9480 1
util_format_r16g16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9487 3
a9489 7
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d9491 1
a9491 1
         dst += 4;
d9499 1
a9499 1
util_format_r16g16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9501 4
a9504 10
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
d9510 1
a9510 1
util_format_r16g16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9517 4
a9520 10
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
d9523 1
a9523 1
         src += 4;
d9532 1
a9532 1
util_format_r16g16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9539 3
a9541 7
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d9543 1
a9543 1
         dst += 4;
d9550 2
a9551 1
union util_format_r16g16b16_sscaled {
d9553 2
a9554 3
      int16_t r;
      int16_t g;
      int16_t b;
d9559 1
a9559 1
util_format_r16g16b16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9566 1
a9566 1
         union util_format_r16g16b16_sscaled pixel;
d9568 3
a9570 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d9572 1
a9572 1
         src += 6;
d9581 1
a9581 1
util_format_r16g16b16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9588 3
a9590 4
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
d9593 1
a9593 1
         dst += 6;
d9601 1
a9601 1
util_format_r16g16b16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9603 1
a9603 1
         union util_format_r16g16b16_sscaled pixel;
d9605 3
a9607 3
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d9612 1
a9612 1
util_format_r16g16b16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9619 1
a9619 1
         union util_format_r16g16b16_sscaled pixel;
d9621 3
a9623 3
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
d9625 1
a9625 1
         src += 6;
d9634 1
a9634 1
util_format_r16g16b16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9641 3
a9643 4
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
d9646 1
a9646 1
         dst += 6;
d9653 1
a9653 2
union util_format_r16g16b16a16_sscaled {
   uint64_t value;
d9655 3
a9657 4
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
d9662 1
a9662 1
util_format_r16g16b16a16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9669 1
a9669 1
         union util_format_r16g16b16a16_sscaled pixel;
d9671 5
a9675 5
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
         src += 8;
d9684 1
a9684 1
util_format_r16g16b16a16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9691 4
a9694 5
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
d9697 1
a9697 1
         dst += 8;
d9705 1
a9705 1
util_format_r16g16b16a16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9707 1
a9707 1
         union util_format_r16g16b16a16_sscaled pixel;
d9709 4
a9712 4
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
d9716 1
a9716 1
util_format_r16g16b16a16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9723 1
a9723 1
         union util_format_r16g16b16a16_sscaled pixel;
d9725 5
a9729 5
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
         src += 8;
d9738 1
a9738 1
util_format_r16g16b16a16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9745 4
a9748 5
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
d9751 1
a9751 1
         dst += 8;
d9758 2
a9759 2
union util_format_r8_unorm {
   uint8_t value;
d9761 4
a9764 1
      uint8_t r;
d9769 1
a9769 1
util_format_r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9776 7
a9782 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
d9791 1
a9791 1
util_format_r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9798 6
a9803 3
         uint8_t value = 0;
         value |= float_to_ubyte(src[0]);
         *(uint8_t *)dst = value;
d9805 1
a9805 1
         dst += 1;
d9813 1
a9813 1
util_format_r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d9815 6
a9820 7
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d9824 1
a9824 1
util_format_r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9831 7
a9837 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
d9846 1
a9846 1
util_format_r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9853 6
a9858 3
         uint8_t value = 0;
         value |= src[0];
         *(uint8_t *)dst = value;
d9860 1
a9860 1
         dst += 1;
d9867 1
a9867 1
union util_format_r8g8_unorm {
d9870 1
a9870 2
      uint8_t r;
      uint8_t g;
d9875 1
a9875 1
util_format_r8g8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a9883 1
         uint16_t g;
d9887 3
a9889 4
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
d9901 1
a9901 1
util_format_r8g8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d9909 1
a9909 2
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= (float_to_ubyte(src[1])) << 8;
d9923 1
a9923 1
util_format_r8g8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a9926 1
         uint16_t g;
d9930 3
a9932 4
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
d9938 1
a9938 1
util_format_r8g8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a9946 1
         uint16_t g;
d9950 3
a9952 4
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
d9964 1
a9964 1
util_format_r8g8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d9972 1
a9972 2
         value |= (src[0]) & 0xff;
         value |= (src[1]) << 8;
d9985 2
a9986 1
union util_format_r8g8b8_unorm {
d9988 2
a9989 3
      uint8_t r;
      uint8_t g;
      uint8_t b;
d9994 1
a9994 1
util_format_r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10001 11
a10011 5
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
d10013 1
a10013 1
         src += 3;
d10022 1
a10022 1
util_format_r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10029 7
a10035 5
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = float_to_ubyte(src[0]);
         pixel.chan.g = float_to_ubyte(src[1]);
         pixel.chan.b = float_to_ubyte(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
d10037 1
a10037 1
         dst += 3;
d10045 1
a10045 1
util_format_r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10047 11
a10057 5
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
d10062 1
a10062 1
util_format_r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10069 11
a10079 5
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
d10081 1
a10081 1
         src += 3;
d10090 1
a10090 1
util_format_r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10097 7
a10103 5
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
d10105 1
a10105 1
         dst += 3;
d10112 1
a10112 2
union util_format_r8g8b8a8_unorm {
   uint32_t value;
d10114 3
a10116 4
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
d10121 1
a10121 1
util_format_r8g8b8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10128 7
a10134 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 4;
d10143 1
a10143 1
util_format_r8g8b8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10150 5
a10154 9
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d10156 1
a10156 1
         dst += 4;
d10164 1
a10164 1
util_format_r8g8b8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10166 6
a10171 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
d10175 1
a10175 1
util_format_r8g8b8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10182 7
a10188 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
         src += 4;
d10197 1
a10197 1
util_format_r8g8b8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10204 5
a10208 9
         uint32_t value = 0;
         value |= (src[0]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[2]) & 0xff) << 16;
         value |= (src[3]) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d10210 1
a10210 1
         dst += 4;
d10217 2
a10218 2
union util_format_r8_uscaled {
   uint8_t value;
d10220 4
a10223 1
      uint8_t r;
d10228 1
a10228 1
util_format_r8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10235 7
a10241 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
d10250 1
a10250 1
util_format_r8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10257 6
a10262 3
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
d10264 1
a10264 1
         dst += 1;
d10272 1
a10272 1
util_format_r8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10274 6
a10279 7
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d10283 1
a10283 1
util_format_r8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10290 7
a10296 8
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
d10305 1
a10305 1
util_format_r8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10312 6
a10317 3
         uint8_t value = 0;
         value |= (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint8_t *)dst = value;
d10319 1
a10319 1
         dst += 1;
d10326 1
a10326 1
union util_format_r8g8_uscaled {
d10329 1
a10329 2
      uint8_t r;
      uint8_t g;
d10334 1
a10334 1
util_format_r8g8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a10342 1
         uint16_t g;
d10346 1
a10346 2
         r = (value) & 0xff;
         g = value >> 8;
d10348 1
a10348 1
         dst[1] = (float)g; /* g */
d10360 1
a10360 1
util_format_r8g8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10368 1
a10368 2
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) << 8;
d10382 1
a10382 1
util_format_r8g8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a10385 1
         uint16_t g;
d10389 1
a10389 2
         r = (value) & 0xff;
         g = value >> 8;
d10391 1
a10391 1
         dst[1] = (float)g; /* g */
d10397 1
a10397 1
util_format_r8g8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a10405 1
         uint16_t g;
d10409 1
a10409 2
         r = (value) & 0xff;
         g = value >> 8;
d10411 1
a10411 1
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
d10423 1
a10423 1
util_format_r8g8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10431 1
a10431 2
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= ((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8;
d10444 2
a10445 1
union util_format_r8g8b8_uscaled {
d10447 2
a10448 3
      uint8_t r;
      uint8_t g;
      uint8_t b;
d10453 1
a10453 1
util_format_r8g8b8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10460 11
a10470 5
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d10472 1
a10472 1
         src += 3;
d10481 1
a10481 1
util_format_r8g8b8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10488 7
a10494 5
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
d10496 1
a10496 1
         dst += 3;
d10504 1
a10504 1
util_format_r8g8b8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10506 11
a10516 5
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
d10521 1
a10521 1
util_format_r8g8b8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10528 11
a10538 5
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
d10540 1
a10540 1
         src += 3;
d10549 1
a10549 1
util_format_r8g8b8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10556 7
a10562 5
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
d10564 1
a10564 1
         dst += 3;
d10571 1
a10571 2
union util_format_r8g8b8a8_uscaled {
   uint32_t value;
d10573 3
a10575 4
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
d10580 1
a10580 1
util_format_r8g8b8a8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10587 7
a10593 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
         src += 4;
d10602 1
a10602 1
util_format_r8g8b8a8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10609 5
a10613 9
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d10615 1
a10615 1
         dst += 4;
d10623 1
a10623 1
util_format_r8g8b8a8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10625 6
a10630 16
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
d10634 1
a10634 1
util_format_r8g8b8a8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10641 7
a10647 17
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
         src += 4;
d10656 1
a10656 1
util_format_r8g8b8a8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10663 5
a10667 9
         uint32_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= (((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8;
         value |= (((uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16;
         value |= ((uint8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d10669 1
a10669 1
         dst += 4;
d10676 2
a10677 2
union util_format_r8_snorm {
   uint8_t value;
d10679 4
a10682 1
      int8_t r;
d10687 1
a10687 1
util_format_r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10694 7
a10700 8
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
d10709 1
a10709 1
util_format_r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10716 6
a10721 3
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
d10723 1
a10723 1
         dst += 1;
d10731 1
a10731 1
util_format_r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10733 6
a10738 7
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d10742 1
a10742 1
util_format_r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10749 7
a10755 8
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
d10764 1
a10764 1
util_format_r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10771 6
a10776 3
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[0] >> 1)) ;
         *(uint8_t *)dst = value;
d10778 1
a10778 1
         dst += 1;
d10785 1
a10785 1
union util_format_r8g8_snorm {
d10788 1
a10788 2
      int8_t r;
      int8_t g;
d10793 1
a10793 1
util_format_r8g8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a10801 1
         int16_t g;
d10805 3
a10807 4
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
d10819 1
a10819 1
util_format_r8g8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10827 1
a10827 2
         value |= (uint16_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) << 8) ;
d10841 1
a10841 1
util_format_r8g8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a10844 1
         int16_t g;
d10848 3
a10850 4
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
d10856 1
a10856 1
util_format_r8g8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a10864 1
         int16_t g;
d10868 3
a10870 4
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
d10882 1
a10882 1
util_format_r8g8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10890 1
a10890 2
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) << 8) ;
d10903 2
a10904 1
union util_format_r8g8b8_snorm {
d10906 2
a10907 3
      int8_t r;
      int8_t g;
      int8_t b;
d10912 1
a10912 1
util_format_r8g8b8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10919 11
a10929 5
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
d10931 1
a10931 1
         src += 3;
d10940 1
a10940 1
util_format_r8g8b8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d10947 7
a10953 5
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)(CLAMP(src[2], -1, 1) * 0x7f);
         memcpy(dst, &pixel, sizeof pixel);
d10955 1
a10955 1
         dst += 3;
d10963 1
a10963 1
util_format_r8g8b8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d10965 11
a10975 5
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
d10980 1
a10980 1
util_format_r8g8b8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d10987 11
a10997 5
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MAX2(pixel.chan.r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(pixel.chan.g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(pixel.chan.b, 0)) * 0xff / 0x7f); /* b */
d10999 1
a10999 1
         src += 3;
d11008 1
a11008 1
util_format_r8g8b8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11015 7
a11021 5
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(src[0] >> 1);
         pixel.chan.g = (int8_t)(src[1] >> 1);
         pixel.chan.b = (int8_t)(src[2] >> 1);
         memcpy(dst, &pixel, sizeof pixel);
d11023 1
a11023 1
         dst += 3;
d11030 1
a11030 2
union util_format_r8g8b8a8_snorm {
   uint32_t value;
d11032 3
a11034 4
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
d11039 1
a11039 1
util_format_r8g8b8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11046 7
a11052 17
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
         src += 4;
d11061 1
a11061 1
util_format_r8g8b8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11068 5
a11072 9
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(CLAMP(src[3], -1, 1) * 0x7f)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d11074 1
a11074 1
         dst += 4;
d11082 1
a11082 1
util_format_r8g8b8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11084 6
a11089 16
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
d11093 1
a11093 1
util_format_r8g8b8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11100 7
a11106 17
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
         src += 4;
d11115 1
a11115 1
util_format_r8g8b8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11122 5
a11126 9
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) << 24) ;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d11128 1
a11128 1
         dst += 4;
d11135 2
a11136 2
union util_format_r8_sscaled {
   uint8_t value;
d11138 4
a11141 1
      int8_t r;
d11146 1
a11146 1
util_format_r8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11153 7
a11159 8
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
d11168 1
a11168 1
util_format_r8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11175 6
a11180 3
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
d11182 1
a11182 1
         dst += 1;
d11190 1
a11190 1
util_format_r8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11192 6
a11197 7
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d11201 1
a11201 1
util_format_r8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11208 7
a11214 8
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
d11223 1
a11223 1
util_format_r8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11230 6
a11235 3
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
         *(uint8_t *)dst = value;
d11237 1
a11237 1
         dst += 1;
d11244 1
a11244 1
union util_format_r8g8_sscaled {
d11247 1
a11247 2
      int8_t r;
      int8_t g;
d11252 1
a11252 1
util_format_r8g8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a11260 1
         int16_t g;
d11264 1
a11264 2
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
d11266 1
a11266 1
         dst[1] = (float)g; /* g */
d11278 1
a11278 1
util_format_r8g8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11286 1
a11286 2
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) << 8) ;
d11300 1
a11300 1
util_format_r8g8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a11303 1
         int16_t g;
d11307 1
a11307 2
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
d11309 1
a11309 1
         dst[1] = (float)g; /* g */
d11315 1
a11315 1
util_format_r8g8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a11323 1
         int16_t g;
d11327 1
a11327 2
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
d11329 1
a11329 1
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
d11341 1
a11341 1
util_format_r8g8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11349 1
a11349 2
         value |= (uint16_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8) ;
d11362 1
a11362 106
union util_format_r8g8b8_sscaled {
   struct {
      int8_t r;
      int8_t g;
      int8_t b;
   } chan;
};

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_sscaled {
d11365 2
a11366 4
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
d11371 1
a11371 1
util_format_r8g8b8a8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a11380 2
         int32_t b;
         int32_t a;
d11384 2
a11385 4
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
d11388 2
a11389 2
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
d11399 1
a11399 1
util_format_r8g8b8a8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11407 2
a11408 4
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) << 24) ;
d11422 1
a11422 1
util_format_r8g8b8a8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
a11426 2
         int32_t b;
         int32_t a;
d11430 2
a11431 4
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
d11434 2
a11435 2
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
d11439 1
a11439 1
util_format_r8g8b8a8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
a11448 2
         int32_t b;
         int32_t a;
d11452 2
a11453 4
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
d11456 2
a11457 2
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(a, 0, 1)) * 0xff / 0x1); /* a */
d11467 1
a11467 1
util_format_r8g8b8a8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11475 2
a11476 4
         value |= (uint32_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24) ;
d11489 1
a11489 2
union util_format_r32_fixed {
   uint32_t value;
d11491 3
a11493 1
      int32_t r;
d11498 1
a11498 1
util_format_r32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11505 1
a11505 1
         union util_format_r32_fixed pixel;
d11507 3
a11509 3
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d11511 1
a11511 1
         src += 4;
d11520 1
a11520 1
util_format_r32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11527 4
a11530 2
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
d11533 1
a11533 1
         dst += 4;
d11541 1
a11541 1
util_format_r32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11543 1
a11543 1
         union util_format_r32_fixed pixel;
d11545 3
a11547 3
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d11552 1
a11552 1
util_format_r32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11559 1
a11559 1
         union util_format_r32_fixed pixel;
d11561 3
a11563 3
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
d11565 1
a11565 1
         src += 4;
d11574 1
a11574 1
util_format_r32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11581 4
a11584 2
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
d11587 1
a11587 1
         dst += 4;
d11594 1
a11594 1
union util_format_r32g32_fixed {
d11597 4
a11600 2
      int32_t r;
      int32_t g;
d11605 1
a11605 1
util_format_r32g32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11612 1
a11612 1
         union util_format_r32g32_fixed pixel;
d11614 4
a11617 4
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d11627 1
a11627 1
util_format_r32g32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11634 5
a11638 3
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
d11649 1
a11649 1
util_format_r32g32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11651 1
a11651 1
         union util_format_r32g32_fixed pixel;
d11653 4
a11656 4
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
d11660 1
a11660 1
util_format_r32g32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11667 1
a11667 1
         union util_format_r32g32_fixed pixel;
d11669 4
a11672 4
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
d11682 1
a11682 1
util_format_r32g32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11689 5
a11693 3
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
d11703 2
a11704 1
union util_format_r32g32b32_fixed {
d11706 1
a11706 3
      int32_t r;
      int32_t g;
      int32_t b;
d11711 1
a11711 1
util_format_r32g32b32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11718 6
a11723 5
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
d11725 1
a11725 1
         src += 12;
d11734 1
a11734 1
util_format_r32g32b32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11741 3
a11743 5
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
d11745 1
a11745 1
         dst += 12;
d11753 1
a11753 1
util_format_r32g32b32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11755 6
a11760 5
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
d11765 1
a11765 1
util_format_r32g32b32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11772 6
a11777 5
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
d11779 1
a11779 1
         src += 12;
d11788 1
a11788 1
util_format_r32g32b32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11795 3
a11797 5
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
d11799 1
a11799 1
         dst += 12;
d11806 2
a11807 1
union util_format_r32g32b32a32_fixed {
d11809 2
a11810 4
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
d11815 1
a11815 1
util_format_r32g32b32a32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11822 13
a11834 7
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
         src += 16;
d11843 1
a11843 1
util_format_r32g32b32a32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11850 7
a11856 6
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
d11858 1
a11858 1
         dst += 16;
d11866 1
a11866 1
util_format_r32g32b32a32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11868 12
a11879 6
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
d11883 1
a11883 1
util_format_r32g32b32a32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11890 13
a11902 7
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = (uint8_t)((CLAMP(pixel.chan.a, 0, 65536) * (1.0/0x10000)) * 0xff); /* a */
         src += 16;
d11911 1
a11911 1
util_format_r32g32b32a32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11918 11
a11928 10
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.a = (int32_t)((float)(src[3] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
d11933 1
a11933 2
union util_format_r10g10b10x2_uscaled {
   uint32_t value;
d11935 3
a11937 4
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned x:2;
d11942 1
a11942 1
util_format_r10g10b10x2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d11949 5
a11953 13
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
d11955 1
a11955 1
         src += 4;
d11964 1
a11964 1
util_format_r10g10b10x2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d11971 5
a11975 8
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d11977 1
a11977 1
         dst += 4;
d11985 1
a11985 1
util_format_r10g10b10x2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d11987 5
a11991 13
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
d11996 1
a11996 1
util_format_r10g10b10x2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d12003 5
a12007 13
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
d12009 1
a12009 1
         src += 4;
d12018 1
a12018 1
util_format_r10g10b10x2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d12025 5
a12029 8
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
#ifdef PIPE_ARCH_BIG_ENDIAN
         value = util_bswap32(value);
#endif
         *(uint32_t *)dst = value;
d12031 1
a12031 1
         dst += 4;
d12038 1
a12038 1
union util_format_r10g10b10x2_snorm {
d12041 4
a12044 4
      int r:10;
      int g:10;
      int b:10;
      unsigned x:2;
d12049 1
a12049 1
util_format_r10g10b10x2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d12057 4
a12060 3
         int32_t r;
         int32_t g;
         int32_t b;
d12064 8
a12071 7
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
d12081 1
a12081 1
util_format_r10g10b10x2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d12089 4
a12092 3
         value |= (uint32_t)(((uint32_t)(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
d12106 1
a12106 1
util_format_r10g10b10x2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d12109 4
a12112 3
         int32_t r;
         int32_t g;
         int32_t b;
d12116 8
a12123 7
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
d12127 1
a12127 1
util_format_r10g10b10x2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d12135 4
a12138 3
         int32_t r;
         int32_t g;
         int32_t b;
d12142 8
a12149 7
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = 255; /* a */
d12159 1
a12159 1
util_format_r10g10b10x2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d12167 4
a12170 3
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
d12183 2776
d14960 4
a14963 4
util_format_none_description = {
   PIPE_FORMAT_NONE,
   "PIPE_FORMAT_NONE",
   "none",
d14971 1
a14971 1
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, 8},	/* x = r */
d14977 1
a14977 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d14980 77
a15056 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15059 2
a15060 2
   &util_format_none_unpack_rgba_8unorm,
   &util_format_none_pack_rgba_8unorm,
d15062 3
a15064 3
   &util_format_none_unpack_rgba_float,
   &util_format_none_pack_rgba_float,
   &util_format_none_fetch_rgba_float,
d15074 5
a15078 5
util_format_b8g8r8a8_unorm_description = {
   PIPE_FORMAT_B8G8R8A8_UNORM,
   "PIPE_FORMAT_B8G8R8A8_UNORM",
   "b8g8r8a8_unorm",
   {1, 1, 32},	/* block */
d15080 1
a15080 1
   4,	/* nr_channels */
d15085 4
a15088 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = a */
d15091 2
a15092 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15094 1
a15094 1
      UTIL_FORMAT_SWIZZLE_W	/* a */
d15097 2
a15098 2
   &util_format_b8g8r8a8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8a8_unorm_pack_rgba_8unorm,
d15100 3
a15102 3
   &util_format_b8g8r8a8_unorm_unpack_rgba_float,
   &util_format_b8g8r8a8_unorm_pack_rgba_float,
   &util_format_b8g8r8a8_unorm_fetch_rgba_float,
d15112 5
a15116 5
util_format_b8g8r8x8_unorm_description = {
   PIPE_FORMAT_B8G8R8X8_UNORM,
   "PIPE_FORMAT_B8G8R8X8_UNORM",
   "b8g8r8x8_unorm",
   {1, 1, 32},	/* block */
d15118 1
a15118 1
   4,	/* nr_channels */
d15123 4
a15126 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
d15129 2
a15130 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15135 40
a15174 2
   &util_format_b8g8r8x8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8x8_unorm_pack_rgba_8unorm,
d15176 3
a15178 3
   &util_format_b8g8r8x8_unorm_unpack_rgba_float,
   &util_format_b8g8r8x8_unorm_pack_rgba_float,
   &util_format_b8g8r8x8_unorm_fetch_rgba_float,
d15188 5
a15192 5
util_format_a8r8g8b8_unorm_description = {
   PIPE_FORMAT_A8R8G8B8_UNORM,
   "PIPE_FORMAT_A8R8G8B8_UNORM",
   "a8r8g8b8_unorm",
   {1, 1, 32},	/* block */
d15194 1
a15194 1
   4,	/* nr_channels */
d15199 4
a15202 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
d15205 3
a15207 3
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
d15211 2
a15212 2
   &util_format_a8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_a8r8g8b8_unorm_pack_rgba_8unorm,
d15214 3
a15216 3
   &util_format_a8r8g8b8_unorm_unpack_rgba_float,
   &util_format_a8r8g8b8_unorm_pack_rgba_float,
   &util_format_a8r8g8b8_unorm_fetch_rgba_float,
d15226 4
a15229 4
util_format_x8r8g8b8_unorm_description = {
   PIPE_FORMAT_X8R8G8B8_UNORM,
   "PIPE_FORMAT_X8R8G8B8_UNORM",
   "x8r8g8b8_unorm",
d15232 1
a15232 1
   4,	/* nr_channels */
d15237 4
a15240 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = b */
d15243 4
a15246 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15249 2
a15250 2
   &util_format_x8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_x8r8g8b8_unorm_pack_rgba_8unorm,
d15252 3
a15254 3
   &util_format_x8r8g8b8_unorm_unpack_rgba_float,
   &util_format_x8r8g8b8_unorm_pack_rgba_float,
   &util_format_x8r8g8b8_unorm_fetch_rgba_float,
d15264 5
a15268 5
util_format_a8b8g8r8_unorm_description = {
   PIPE_FORMAT_A8B8G8R8_UNORM,
   "PIPE_FORMAT_A8B8G8R8_UNORM",
   "a8b8g8r8_unorm",
   {1, 1, 32},	/* block */
d15270 1
a15270 1
   4,	/* nr_channels */
d15275 4
a15278 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
d15281 3
a15283 3
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
d15287 2
a15288 2
   &util_format_a8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_unorm_pack_rgba_8unorm,
d15290 3
a15292 3
   &util_format_a8b8g8r8_unorm_unpack_rgba_float,
   &util_format_a8b8g8r8_unorm_pack_rgba_float,
   &util_format_a8b8g8r8_unorm_fetch_rgba_float,
d15302 5
a15306 5
util_format_x8b8g8r8_unorm_description = {
   PIPE_FORMAT_X8B8G8R8_UNORM,
   "PIPE_FORMAT_X8B8G8R8_UNORM",
   "x8b8g8r8_unorm",
   {1, 1, 32},	/* block */
d15308 1
a15308 1
   4,	/* nr_channels */
d15313 4
a15316 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8}	/* w = r */
d15319 3
a15321 3
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
d15325 2
a15326 2
   &util_format_x8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_unorm_pack_rgba_8unorm,
d15328 3
a15330 3
   &util_format_x8b8g8r8_unorm_unpack_rgba_float,
   &util_format_x8b8g8r8_unorm_pack_rgba_float,
   &util_format_x8b8g8r8_unorm_fetch_rgba_float,
d15340 5
a15344 5
util_format_r8g8b8x8_unorm_description = {
   PIPE_FORMAT_R8G8B8X8_UNORM,
   "PIPE_FORMAT_R8G8B8X8_UNORM",
   "r8g8b8x8_unorm",
   {1, 1, 32},	/* block */
d15346 1
a15346 1
   4,	/* nr_channels */
d15351 4
a15354 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 8}	/* w = x */
d15358 3
a15360 3
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15363 2
a15364 2
   &util_format_r8g8b8x8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8x8_unorm_pack_rgba_8unorm,
d15366 3
a15368 3
   &util_format_r8g8b8x8_unorm_unpack_rgba_float,
   &util_format_r8g8b8x8_unorm_pack_rgba_float,
   &util_format_r8g8b8x8_unorm_fetch_rgba_float,
d15378 5
a15382 5
util_format_b5g5r5x1_unorm_description = {
   PIPE_FORMAT_B5G5R5X1_UNORM,
   "PIPE_FORMAT_B5G5R5X1_UNORM",
   "b5g5r5x1_unorm",
   {1, 1, 16},	/* block */
d15384 2
a15385 2
   4,	/* nr_channels */
   FALSE,	/* is_array */
d15389 4
a15392 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 1}	/* w = x */
d15395 2
a15396 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15398 1
a15398 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15401 2
a15402 2
   &util_format_b5g5r5x1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5x1_unorm_pack_rgba_8unorm,
d15404 3
a15406 3
   &util_format_b5g5r5x1_unorm_unpack_rgba_float,
   &util_format_b5g5r5x1_unorm_pack_rgba_float,
   &util_format_b5g5r5x1_unorm_fetch_rgba_float,
d15416 4
a15419 4
util_format_b5g5r5a1_unorm_description = {
   PIPE_FORMAT_B5G5R5A1_UNORM,
   "PIPE_FORMAT_B5G5R5A1_UNORM",
   "b5g5r5a1_unorm",
d15422 2
a15423 2
   4,	/* nr_channels */
   FALSE,	/* is_array */
d15427 4
a15430 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 1}	/* w = a */
d15433 4
a15436 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d15439 2
a15440 2
   &util_format_b5g5r5a1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5a1_unorm_pack_rgba_8unorm,
d15442 3
a15444 3
   &util_format_b5g5r5a1_unorm_unpack_rgba_float,
   &util_format_b5g5r5a1_unorm_pack_rgba_float,
   &util_format_b5g5r5a1_unorm_fetch_rgba_float,
d15454 4
a15457 4
util_format_b4g4r4a4_unorm_description = {
   PIPE_FORMAT_B4G4R4A4_UNORM,
   "PIPE_FORMAT_B4G4R4A4_UNORM",
   "b4g4r4a4_unorm",
d15460 2
a15461 2
   4,	/* nr_channels */
   FALSE,	/* is_array */
d15465 4
a15468 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4}	/* w = a */
d15471 2
a15472 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15474 1
a15474 1
      UTIL_FORMAT_SWIZZLE_W	/* a */
d15477 2
a15478 2
   &util_format_b4g4r4a4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4a4_unorm_pack_rgba_8unorm,
d15480 3
a15482 3
   &util_format_b4g4r4a4_unorm_unpack_rgba_float,
   &util_format_b4g4r4a4_unorm_pack_rgba_float,
   &util_format_b4g4r4a4_unorm_fetch_rgba_float,
d15492 5
a15496 5
util_format_b4g4r4x4_unorm_description = {
   PIPE_FORMAT_B4G4R4X4_UNORM,
   "PIPE_FORMAT_B4G4R4X4_UNORM",
   "b4g4r4x4_unorm",
   {1, 1, 16},	/* block */
d15498 2
a15499 2
   4,	/* nr_channels */
   FALSE,	/* is_array */
d15503 4
a15506 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, 4}	/* w = x */
d15509 2
a15510 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15512 1
a15512 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15515 2
a15516 2
   &util_format_b4g4r4x4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4x4_unorm_pack_rgba_8unorm,
d15518 3
a15520 3
   &util_format_b4g4r4x4_unorm_unpack_rgba_float,
   &util_format_b4g4r4x4_unorm_pack_rgba_float,
   &util_format_b4g4r4x4_unorm_fetch_rgba_float,
d15530 4
a15533 4
util_format_b5g6r5_unorm_description = {
   PIPE_FORMAT_B5G6R5_UNORM,
   "PIPE_FORMAT_B5G6R5_UNORM",
   "b5g6r5_unorm",
d15536 2
a15537 2
   3,	/* nr_channels */
   FALSE,	/* is_array */
d15541 3
a15543 3
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 5},	/* z = r */
d15547 2
a15548 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15550 1
a15550 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15553 2
a15554 2
   &util_format_b5g6r5_unorm_unpack_rgba_8unorm,
   &util_format_b5g6r5_unorm_pack_rgba_8unorm,
d15556 3
a15558 3
   &util_format_b5g6r5_unorm_unpack_rgba_float,
   &util_format_b5g6r5_unorm_pack_rgba_float,
   &util_format_b5g6r5_unorm_fetch_rgba_float,
d15568 5
a15572 5
util_format_r10g10b10a2_unorm_description = {
   PIPE_FORMAT_R10G10B10A2_UNORM,
   "PIPE_FORMAT_R10G10B10A2_UNORM",
   "r10g10b10a2_unorm",
   {1, 1, 32},	/* block */
d15574 3
a15576 3
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
d15579 4
a15582 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2}	/* w = a */
d15585 4
a15588 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d15591 2
a15592 2
   &util_format_r10g10b10a2_unorm_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_unorm_pack_rgba_8unorm,
d15594 3
a15596 3
   &util_format_r10g10b10a2_unorm_unpack_rgba_float,
   &util_format_r10g10b10a2_unorm_pack_rgba_float,
   &util_format_r10g10b10a2_unorm_fetch_rgba_float,
d15606 5
a15610 5
util_format_b10g10r10a2_unorm_description = {
   PIPE_FORMAT_B10G10R10A2_UNORM,
   "PIPE_FORMAT_B10G10R10A2_UNORM",
   "b10g10r10a2_unorm",
   {1, 1, 32},	/* block */
d15612 3
a15614 3
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
d15617 4
a15620 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 10},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 2}	/* w = a */
d15623 2
a15624 2
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
d15626 1
a15626 1
      UTIL_FORMAT_SWIZZLE_W	/* a */
d15629 2
a15630 2
   &util_format_b10g10r10a2_unorm_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_unorm_pack_rgba_8unorm,
d15632 3
a15634 3
   &util_format_b10g10r10a2_unorm_unpack_rgba_float,
   &util_format_b10g10r10a2_unorm_pack_rgba_float,
   &util_format_b10g10r10a2_unorm_fetch_rgba_float,
d15644 5
a15648 5
util_format_l8_unorm_description = {
   PIPE_FORMAT_L8_UNORM,
   "PIPE_FORMAT_L8_UNORM",
   "l8_unorm",
   {1, 1, 8},	/* block */
d15650 1
a15650 1
   1,	/* nr_channels */
d15652 1
a15652 1
   TRUE,	/* is_bitmask */
d15655 2
a15656 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {0, 0, 0},
d15664 1
a15664 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15667 2
a15668 2
   &util_format_l8_unorm_unpack_rgba_8unorm,
   &util_format_l8_unorm_pack_rgba_8unorm,
d15670 3
a15672 3
   &util_format_l8_unorm_unpack_rgba_float,
   &util_format_l8_unorm_pack_rgba_float,
   &util_format_l8_unorm_fetch_rgba_float,
d15682 5
a15686 5
util_format_a8_unorm_description = {
   PIPE_FORMAT_A8_UNORM,
   "PIPE_FORMAT_A8_UNORM",
   "a8_unorm",
   {1, 1, 8},	/* block */
d15690 1
a15690 1
   TRUE,	/* is_bitmask */
d15693 1
a15693 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = a */
d15699 3
a15701 3
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
d15705 2
a15706 2
   &util_format_a8_unorm_unpack_rgba_8unorm,
   &util_format_a8_unorm_pack_rgba_8unorm,
d15708 3
a15710 3
   &util_format_a8_unorm_unpack_rgba_float,
   &util_format_a8_unorm_pack_rgba_float,
   &util_format_a8_unorm_fetch_rgba_float,
d15720 5
a15724 5
util_format_i8_unorm_description = {
   PIPE_FORMAT_I8_UNORM,
   "PIPE_FORMAT_I8_UNORM",
   "i8_unorm",
   {1, 1, 8},	/* block */
d15728 1
a15728 1
   TRUE,	/* is_bitmask */
d15731 1
a15731 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgba */
d15737 3
a15739 3
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d15743 2
a15744 2
   &util_format_i8_unorm_unpack_rgba_8unorm,
   &util_format_i8_unorm_pack_rgba_8unorm,
d15746 3
a15748 3
   &util_format_i8_unorm_unpack_rgba_float,
   &util_format_i8_unorm_pack_rgba_float,
   &util_format_i8_unorm_fetch_rgba_float,
d15758 5
a15762 5
util_format_l4a4_unorm_description = {
   PIPE_FORMAT_L4A4_UNORM,
   "PIPE_FORMAT_L4A4_UNORM",
   "l4a4_unorm",
   {1, 1, 8},	/* block */
d15764 3
a15766 3
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
d15769 2
a15770 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 4},	/* y = a */
d15778 1
a15778 1
      UTIL_FORMAT_SWIZZLE_Y	/* a */
d15781 2
a15782 2
   &util_format_l4a4_unorm_unpack_rgba_8unorm,
   &util_format_l4a4_unorm_pack_rgba_8unorm,
d15784 3
a15786 3
   &util_format_l4a4_unorm_unpack_rgba_float,
   &util_format_l4a4_unorm_pack_rgba_float,
   &util_format_l4a4_unorm_fetch_rgba_float,
d15796 5
a15800 5
util_format_l8a8_unorm_description = {
   PIPE_FORMAT_L8A8_UNORM,
   "PIPE_FORMAT_L8A8_UNORM",
   "l8a8_unorm",
   {1, 1, 16},	/* block */
d15804 1
a15804 1
   TRUE,	/* is_bitmask */
d15807 2
a15808 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 8},	/* y = a */
d15819 2
a15820 2
   &util_format_l8a8_unorm_unpack_rgba_8unorm,
   &util_format_l8a8_unorm_pack_rgba_8unorm,
d15822 3
a15824 3
   &util_format_l8a8_unorm_unpack_rgba_float,
   &util_format_l8a8_unorm_pack_rgba_float,
   &util_format_l8a8_unorm_fetch_rgba_float,
d15834 5
a15838 5
util_format_l16_unorm_description = {
   PIPE_FORMAT_L16_UNORM,
   "PIPE_FORMAT_L16_UNORM",
   "l16_unorm",
   {1, 1, 16},	/* block */
d15842 1
a15842 1
   TRUE,	/* is_bitmask */
d15845 1
a15845 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, 16},	/* x = rgb */
d15854 1
a15854 1
      UTIL_FORMAT_SWIZZLE_1	/* a */
d15857 2
a15858 2
   &util_format_l16_unorm_unpack_rgba_8unorm,
   &util_format_l16_unorm_pack_rgba_8unorm,
d15860 3
a15862 3
   &util_format_l16_unorm_unpack_rgba_float,
   &util_format_l16_unorm_pack_rgba_float,
   &util_format_l16_unorm_fetch_rgba_float,
d17017 2
a17018 2
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
d17023 3
a17025 3
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 11},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 11},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, 10},	/* z = b */
d17493 1
a17493 1
   NULL, /* fetch_rgba_8unorm */
d17531 1
a17531 1
   NULL, /* fetch_rgba_8unorm */
d17569 1
a17569 1
   NULL, /* fetch_rgba_8unorm */
d17607 1
a17607 1
   NULL, /* fetch_rgba_8unorm */
d17620 152
d20317 2
d20331 38
d20461 8
@


1.1.1.1
log
@Import the infrastructure for building Gallium3D graphics drivers.
Currently only software drivers are supported, looks ok to matthieu.
@
text
@@
