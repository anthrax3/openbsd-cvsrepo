head	1.15;
access;
symbols
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.2
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_3:1.1.0.2;
locks; strict;
comment	@# @;


1.15
date	2012.08.26.18.46.42;	author mpi;	state dead;
branches;
next	1.14;

1.14
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.03.15.36.21;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.29.14.57.54;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.23.13.57.36;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.22.20.14.15;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.03.12.44.10;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.17.20.20.24;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.10.16.06.51;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.05.07.18.26;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.02.15.01.32;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.14.19.47.42;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.31.16.36.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.23.16.43.25;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.02.17.24.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Merge libmesa and libmesagallium build makefiles because they share
a lot of common sources.

ok matthieu@@
@
text
@# $OpenBSD: Makefile,v 1.14 2012/08/17 13:58:00 mpi Exp $

MESA=	${.CURDIR}/../../../dist/Mesa/src/mesa
MAPI=	${.CURDIR}/../../../dist/Mesa/src/mapi
GLSL=	${.CURDIR}/../../../dist/Mesa/src/glsl

MESA_INCLUDE=	${.CURDIR}/../../../dist/Mesa/include

CPP=	cpp -notraditional

CPPFLAGS+= \
	-I. \
	-I${MAPI} \
	-I${MESA_INCLUDE} \
	-I${MESA_INCLUDE}/GL/internal \
	-I${MESA} \
	-I${MESA}/main \
	-I${MESA}/math \
	-I${MESA}/tnl \
	-I${GLSL} \
	-I${.OBJDIR}/shader/slang \
	-I${X11BASE}/include \
	-I/usr/include/dev/pci/drm \
	-DGLX_INDIRECT_RENDERING \
	-DGLX_DIRECT_RENDERING \
	-DUSE_EXTERNAL_DXTN_LIB=1 \
	-DPTHREADS \
	-DHAVE_ALIAS \
	-D_REENTRANT \
	-DIN_DRI_DRIVER

.if ${MACHINE_ARCH} == "i386"
CPPFLAGS += \
	-I${MESA}/x86 \
	-DUSE_X86_ASM \
	-DUSE_MMX_ASM \
	-DUSE_3DNOW_ASM \
	-DUSE_SSE_ASM
.elif ${MACHINE_ARCH} == "amd64"
CPPFLAGS += \
	-I${MESA}/x86 \
	-D__GLX_ALIGN64 -DUSE_X86_64_ASM
.endif

# this is part of MAIN_SOURCES
MAIN_ES_SOURCES = \
	api_exec_es1.c \
	api_exec_es2.c

# main
MAIN_SOURCES = \
	api_arrayelt.c \
	api_exec.c \
	api_loopback.c \
	api_noop.c \
	api_validate.c \
	accum.c \
	arbprogram.c \
	atifragshader.c \
	attrib.c \
	arrayobj.c \
	blend.c \
	bufferobj.c \
	buffers.c \
	clear.c \
	clip.c \
	colortab.c \
	condrender.c \
	context.c \
	convolve.c \
	cpuinfo.c \
	debug.c \
	depth.c \
	depthstencil.c \
	dlist.c \
	dlopen.c \
	drawpix.c \
	drawtex.c \
	enable.c \
	enums.c \
	eval.c \
	execmem.c \
	extensions.c \
	fbobject.c \
	feedback.c \
	ffvertex_prog.c \
	fog.c \
	formats.c \
	framebuffer.c \
	get.c \
	getstring.c \
	hash.c \
	hint.c \
	histogram.c \
	image.c \
	imports.c \
	light.c \
	lines.c \
	matrix.c \
	mipmap.c \
	mm.c \
	multisample.c \
	nvprogram.c \
	pack.c \
	pbo.c \
	pixel.c \
	pixelstore.c \
	pixeltransfer.c \
	points.c \
	polygon.c \
	queryobj.c \
	querymatrix.c \
	rastpos.c \
	readpix.c \
	remap.c \
	renderbuffer.c \
	samplerobj.c \
	scissor.c \
	shaderapi.c \
	shaderobj.c \
	shared.c \
	state.c \
	stencil.c \
	syncobj.c \
	texcompress.c \
	texcompress_rgtc.c \
	texcompress_s3tc.c \
	texcompress_fxt1.c \
	texenv.c \
	texfetch.c \
	texformat.c \
	texgen.c \
	texgetimage.c \
	teximage.c \
	texobj.c \
	texpal.c \
	texparam.c \
	texstate.c \
	texstore.c \
	texturebarrier.c \
	transformfeedback.c \
	uniforms.c \
	varray.c \
	version.c \
	viewport.c \
	vtxfmt.c \
	$(MAIN_ES_SOURCES)

MAIN_CXX_SOURCES = \
	ff_fragment_shader.cpp

# math
MATH_SOURCES= \
	m_debug_clip.c \
	m_debug_norm.c \
	m_debug_xform.c \
	m_eval.c \
	m_matrix.c \
	m_translate.c \
	m_vector.c

MATH_XFORM_SOURCES = \
	m_xform.c

# swrast
SWRAST_SOURCES= \
	s_aaline.c \
	s_aatriangle.c \
	s_accum.c \
	s_alpha.c \
	s_atifragshader.c \
	s_bitmap.c \
	s_blend.c \
	s_blit.c \
	s_clear.c \
	s_copypix.c \
	s_context.c \
	s_depth.c \
	s_drawpix.c \
	s_feedback.c \
	s_fog.c \
	s_fragprog.c \
	s_lines.c \
	s_logic.c \
	s_masking.c \
	s_points.c \
	s_readpix.c \
	s_span.c \
	s_stencil.c \
	s_texcombine.c \
	s_texfilter.c \
	s_texrender.c \
	s_triangle.c \
	s_zoom.c

# swrast_setup
SWRAST_SETUP_SOURCES= \
	ss_context.c \
	ss_triangle.c

# tnl
TNL_SOURCES = \
	t_context.c \
	t_pipeline.c \
	t_draw.c \
	t_rasterpos.c \
	t_vb_program.c \
	t_vb_render.c \
	t_vb_texgen.c \
	t_vb_texmat.c \
	t_vb_vertex.c \
	t_vb_fog.c \
	t_vb_light.c \
	t_vb_normals.c \
	t_vb_points.c \
	t_vp_build.c \
	t_vertex.c \
	t_vertex_sse.c \
	t_vertex_generic.c

VBO_SOURCES = \
	vbo_context.c \
	vbo_exec.c \
	vbo_exec_api.c \
	vbo_exec_array.c \
	vbo_exec_draw.c \
	vbo_exec_eval.c \
	vbo_rebase.c \
	vbo_split.c \
	vbo_split_copy.c \
	vbo_split_inplace.c \
	vbo_save.c \
	vbo_save_api.c \
	vbo_save_draw.c \
	vbo_save_loopback.c 

PROGRAM_SOURCES = \
	arbprogparse.c \
	hash_table.c \
	lex.yy.c \
	nvfragparse.c \
	nvvertparse.c \
	program.c \
	program_parse.tab.c \
	program_parse_extra.c \
	prog_cache.c \
	prog_execute.c \
	prog_instruction.c \
	prog_noise.c \
	prog_optimize.c \
	prog_parameter.c \
	prog_parameter_layout.c \
	prog_print.c \
	prog_statevars.c \
	prog_uniform.c \
	programopt.c \
	register_allocate.c \
	symbol_table.c

SHADER_CXX_SOURCES = \
	ir_to_mesa.cpp \
	sampler.cpp

.if ${MACHINE_ARCH} == i386
ASM_C_SOURCES= \
	common_x86.c \
	x86_xform.c \
	3dnow.c \
	sse.c \
	x86sse.c

ASM_SOURCES= \
	common_x86_asm.S \
	x86_xform2.S \
	x86_xform3.S \
	x86_xform4.S \
	x86_cliptest.S \
	mmx_blend.S \
	3dnow_xform1.S \
	3dnow_xform2.S \
	3dnow_xform3.S \
	3dnow_xform4.S \
	3dnow_normal.S \
	sse_xform1.S \
	sse_xform2.S \
	sse_xform3.S \
	sse_xform4.S \
	sse_normal.S \
	read_rgba_span_x86.S
.endif
.if ${MACHINE_ARCH} == amd64
ASM_C_SOURCES= \
	x86-64.c

ASM_SOURCES =		\
	xform4.S
.endif
.if ${MACHINE_ARCH} == sparc
ASM_C_SOURCES= \
	sparc.c
SPARC_SOURCES =			\
	clip.S			\
	norm.S			\
	xform.S
.endif
.if ${MACHINE_ARCH} == powerpc
ASM_C_SOURCES= \
	common_ppc.c
.endif

COMMON_DRIVER_SOURCES = \
	driverfuncs.c		\
	meta.c

MESA_SOURCES = \
	$(MAIN_SOURCES)		\
	$(MATH_SOURCES)		\
	$(MATH_XFORM_SOURCES)	\
	$(VBO_SOURCES)		\
	$(TNL_SOURCES)		\
	$(PROGRAM_SOURCES)	\
	$(SWRAST_SOURCES)	\
	$(SWRAST_SETUP_SOURCES) \
	$(COMMON_DRIVER_SOURCES) \
	$(ASM_C_SOURCES)

MESA_CXX_SOURCES = \
	$(MAIN_CXX_SOURCES) \
	$(SHADER_CXX_SOURCES)

SRCS=	${MESA_SOURCES}	\
	${MESA_CXX_SOURCES} \
	${ASM_SOURCES} \
	_atexit.c

OBJS+=  ${SRCS:N*.h:R:S/$/.so/g}

LIB=	libmesa

all: ${LIB}_pic.a

obj: _xenocara_obj

install:
	@@echo "Not installing libmesa"

clean: 
	rm -f ${LIB}_pic.a ${OBJS} $(CLEANFILES)

cleandir:	clean

.SUFFIXES:
.SUFFIXES: .a .c .cpp .o .S .s .so

.c.so:
	@@echo "${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.if ${MACHINE_ARCH} == alpha
# remove optimization flags to prevent gcc 4.2.1 ICE
prog_execute.so: prog_execute.c
	@@echo "${COMPILE.c} -fno-tree-ter ${PICFLAG} -DPIC ${.ALLSRC} -o ${.TARGET}"
	@@${COMPILE.c} -fno-tree-ter ${PICFLAG} -DPIC ${.ALLSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o
.endif

.cpp.so:
	@@echo "${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.S.so .s.so:
	@@echo "${CPP} -DPIC ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}"
	@@${CPP} -DPIC ${CPPFLAGS} ${CFLAGS:M-[ID]*} ${AINC} ${.IMPSRC} | \
	    ${AS} ${ASPICFLAG} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o


${LIB}_pic.a:	${OBJS} $(DPADD)
	@@rm -f ${LIB}_pic.a
	@@${AR} cq ${LIB}_pic.a `${LORDER} ${OBJS} | tsort -q`
	${RANLIB} ${LIB}_pic.a

.if ${MACHINE_ARCH} == i386 || ${MACHINE_ARCH} == amd64
gen_matypes: gen_matypes.c
	$(CC) $(CPPFLAGS) $(CFLAGS) ${MESA}/x86/gen_matypes.c -o gen_matypes


matypes.h: mtypes.h t_context.h gen_matypes
	./gen_matypes > matypes.h

CLEANFILES+= gen_matypes matypes.h

xform4.so: matypes.h
common_x86_asm.so: matypes.h
3dnow_normal.so: matypes.h
3dnow_xform1.so: matypes.h
3dnow_xform2.so: matypes.h
3dnow_xform3.so: matypes.h
3dnow_xform4.so: matypes.h
mmx_blend.so: matypes.h
sse_normal.so: matypes.h
sse_xform1.so: matypes.h
sse_xform2.so: matypes.h
sse_xform3.so: matypes.h
sse_xform4.so: matypes.h
x86_cliptest.so: matypes.h
x86_xform2.so: matypes.h
x86_xform3.so: matypes.h
x86_xform4.so: matypes.h
.endif

.if ${MACHINE_ARCH} == i386
.PATH: ${MESA}/x86
.PATH: ${MESA}/x86/rtasm
.endif
.if ${MACHINE_ARCH} == powerpc
.PATH: ${MESA}/ppc
.endif
.if ${MACHINE_ARCH} == sparc
.PATH: ${MESA}/sparc
.endif
.if ${MACHINE_ARCH} == amd64
.PATH: ${MESA}/x86-64
.PATH: ${MESA}/x86
.endif
.PATH: ${MAPI}/glapi
.PATH: ${MESA}/main
.PATH: ${MESA}/math
.PATH: ${MESA}/swrast
.PATH: ${MESA}/swrast_setup
.PATH: ${MESA}/tnl
.PATH: ${MESA}/program
.PATH: ${MESA}/vbo
.PATH: ${MESA}/drivers/common
.PATH: ${.CURDIR}/generated

.include <bsd.xorg.mk>

.if ${MACHINE_ARCH} == powerpc || ${MACHINE_ARCH} == sparc
PICFLAG=-fPIC
.endif
@


1.14
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2011/12/03 15:36:21 miod Exp $
@


1.13
log
@Compile prog_execute.c with -fno-tree-ter on alpha (instead of -O0) to skirt
the ICE, until a fix is devised (insert annoyed comment about hairy tricky
bugs in the ``reload'' code here).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2011/11/29 14:57:54 naddy Exp $
d105 1
d117 1
d126 1
a129 1
	texenvprogram.c \
a137 1
	texrender.c \
d140 1
d149 3
d192 1
d328 1
@


1.12
log
@on alpha, remove optimization flags when compiling prog_execute.c to
prevent an internal compiler error in gcc 4.2.1; ok matthieu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2011/10/23 13:57:36 matthieu Exp $
d357 2
a358 2
	@@echo "${COMPILE.c:N-O*} ${PICFLAG} -DPIC ${.ALLSRC} -o ${.TARGET}"
	@@${COMPILE.c:N-O*} ${PICFLAG} -DPIC ${.ALLSRC} -o ${.TARGET}.o
@


1.11
log
@Build system updates for Mesa 7.10.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2010/05/22 20:14:15 matthieu Exp $
d353 9
@


1.10
log
@Build infrastructure for Mesa 7.8.1.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2010/02/03 12:44:10 matthieu Exp $
d4 3
a8 2
SUBDIR = shader/slang/library

d13 1
a18 1
	-I${MESA}/glapi \
d20 1
a20 3
	-I${MESA}/shader \
	-I${MESA}/shader/grammar \
	-I${MESA}/shader/slang \
d45 5
d51 1
a51 1
MAIN_SOURCES= \
d58 2
d78 1
d103 2
d107 1
d111 1
a112 1
	rbadaptors.c \
d117 2
a118 1
	shaders.c \
d134 1
d139 2
d144 2
a145 1
	vtxfmt.c
d155 3
a157 1
	m_vector.c \
d196 1
a196 1
TNL_SOURCES= \
a205 1
	t_vb_cull.c \
d231 1
a231 2
# shader
SHADER_SOURCES=	\
a232 2
	arbprogram.c \
	atifragshader.c \
a235 1
	nvprogram.c \
d251 2
a252 2
	symbol_table.c \
	shader_api.c
d254 3
a256 21
# shader/slang
SLANG_SOURCES= \
	slang_builtin.c	\
	slang_codegen.c	\
	slang_compile.c	\
	slang_compile_function.c	\
	slang_compile_operation.c	\
	slang_compile_struct.c	\
	slang_compile_variable.c	\
	slang_emit.c	\
	slang_ir.c	\
	slang_label.c	\
	slang_link.c	\
	slang_log.c	\
	slang_mem.c	\
	slang_print.c	\
	slang_simplify.c	\
	slang_storage.c	\
	slang_typeinfo.c	\
	slang_vartable.c	\
	slang_utility.c
d312 1
d315 1
a315 1
	$(SHADER_SOURCES)	\
d319 4
a322 2
	$(ASM_C_SOURCES)	\
	$(SLANG_SOURCES)
d325 3
a327 1
	${ASM_SOURCES}
d333 1
a333 1
all: _SUBDIRUSE ${LIB}_pic.a
d340 1
a340 1
clean: _SUBDIRUSE
d346 1
a346 1
.SUFFIXES: .a .c .o .S .s .so
d354 6
d368 1
a373 1

d417 1
a417 1
.PATH: ${MESA}/glapi
d423 1
a423 7
.PATH: ${MESA}/shader
.PATH: ${MESA}/shader/grammar
.PATH: ${MESA}/shader/slang
.PATH: ${MESA}/shader/slang/MachineIndependent
.PATH: ${MESA}/shader/slang/MachineIndependent/preprocessor
.PATH: ${MESA}/shader/slang/OGLCompilersDLL
.PATH: ${MESA}/shader/slang/OSDependent/Linux
d426 1
a426 1

@


1.9
log
@Remove a workaround for a gcc ICE on mips64 that was fixed
by a recent gcc commit.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2009/05/17 20:20:24 matthieu Exp $
d6 2
d22 1
d62 1
d65 1
d81 1
d104 1
d108 1
d111 1
d117 1
d120 1
d128 2
d153 1
a153 1
	s_buffers.c \
a160 1
	s_imaging.c \
a169 1
	s_texstore.c \
d220 2
a221 1
	grammar_mesa.c \
d226 2
a228 1
	prog_debug.c \
d232 1
d234 1
d239 1
a256 1
	slang_preprocess.c	\
d267 1
a267 1
	x86.c \
d312 2
a313 1
	driverfuncs.c
d334 1
a334 1
all: ${LIB}_pic.a
d341 1
a341 1
clean:
d428 1
d431 1
a431 1
.if ${MACHINE} == sparc
@


1.8
log
@Update build infrastructure for Mesa 7.4.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2009/01/10 16:06:51 oga Exp $
a412 6

# Prevent a gcc ICE
.if ${MACHINE_ARCH} == mips64
s_copypix.so: s_copypix.c
	${CC} -c -O0 ${CPPFLAGS} -fpic -DPIC $<
.endif
@


1.7
log
@Switch over to using the kernel *_drm.h headers instead of the copies
thereof provided with libdrm. This has been annoying me forever, and it
a blight caused by developing widely used drivers out of the kernel
tree.

ok matthieu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2008/05/31 16:36:49 matthieu Exp $
d46 1
d56 1
d65 1
d74 1
d89 1
d91 1
d97 1
d99 1
d106 1
d109 1
d112 1
d130 36
a165 15
VBO_SOURCES = \
	vbo_context.c \
	vbo_exec.c \
	vbo_exec_api.c \
	vbo_exec_array.c \
	vbo_exec_draw.c \
	vbo_exec_eval.c \
	vbo_rebase.c \
	vbo_split.c \
	vbo_split_copy.c \
	vbo_split_inplace.c \
	vbo_save.c \
	vbo_save_api.c \
	vbo_save_draw.c \
	vbo_save_loopback.c 
d172 1
d186 17
a202 1
	t_vertex_generic.c \
d214 1
d218 1
d224 1
a224 41
	shader_api.c \

# swrast
SWRAST_SOURCES= \
	s_aaline.c \
	s_aatriangle.c \
	s_accum.c \
	s_alpha.c \
	s_atifragshader.c \
	s_bitmap.c \
	s_blend.c \
	s_blit.c \
	s_buffers.c \
	s_copypix.c \
	s_context.c \
	s_depth.c \
	s_drawpix.c \
	s_feedback.c \
	s_fog.c \
	s_fragprog.c \
	s_imaging.c \
	s_lines.c \
	s_logic.c \
	s_masking.c \
	s_points.c \
	s_readpix.c \
	s_span.c \
	s_stencil.c \
	s_texcombine.c \
	s_texfilter.c \
	s_texstore.c \
	s_triangle.c \
	s_zoom.c

# swrast_setup
SWRAST_SETUP_SOURCES= \
	ss_context.c \
	ss_triangle.c

COMMON_DRIVER_SOURCES = \
	driverfuncs.c
a237 1
	slang_library_noise.c	\
d296 4
a299 1
SOLO_SOURCES = \
d311 1
a311 1
SRCS=	${SOLO_SOURCES}	\
@


1.6
log
@add -fPIC for sparc
ugly, but ok matthieu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2008/11/02 15:01:32 matthieu Exp $
d21 1
a21 1
	-I${X11BASE}/include/drm \
@


1.5
log
@Update build infrastructure for libGL after Mesa 7.2 update.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2008/05/31 16:36:49 matthieu Exp $
d407 3
@


1.4
log
@Fix clean target.
@
text
@d119 15
a133 36
# swrast
SWRAST_SOURCES= \
	s_aaline.c \
	s_aatriangle.c \
	s_accum.c \
	s_alpha.c \
	s_atifragshader.c \
	s_bitmap.c \
	s_blend.c \
	s_blit.c \
	s_buffers.c \
	s_copypix.c \
	s_context.c \
	s_depth.c \
	s_drawpix.c \
	s_feedback.c \
	s_fog.c \
	s_fragprog.c \
	s_imaging.c \
	s_lines.c \
	s_logic.c \
	s_masking.c \
	s_points.c \
	s_readpix.c \
	s_span.c \
	s_stencil.c \
	s_texcombine.c \
	s_texfilter.c \
	s_texstore.c \
	s_triangle.c \
	s_zoom.c

# swrast_setup
SWRAST_SETUP_SOURCES= \
	ss_context.c \
	ss_triangle.c
a154 16
VBO_SOURCES = \
	vbo_context.c \
	vbo_exec.c \
	vbo_exec_api.c \
	vbo_exec_array.c \
	vbo_exec_draw.c \
	vbo_exec_eval.c \
	vbo_rebase.c \
	vbo_split.c \
	vbo_split_copy.c \
	vbo_split_inplace.c \
	vbo_save.c \
	vbo_save_api.c \
	vbo_save_draw.c \
	vbo_save_loopback.c 

d171 1
d175 40
d294 1
d313 1
a313 1
	rm -f ${LIB}_pic.a ${OBJS} ${CLEANFILES}
d400 7
@


1.3
log
@Update to Mesa 7.0.3. tested my oga@@ and johan@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2008/03/23 16:43:25 oga Exp $
d298 1
a298 1
LIB=	mesa
d308 1
a308 1
	rm -f ${LIB}_pic.a ${OBJS}
d330 3
a332 3
	@@rm -f lib${LIB}_pic.a
	@@${AR} cq lib${LIB}_pic.a `${LORDER} ${OBJS} | tsort -q`
	${RANLIB} lib${LIB}_pic.a
@


1.2
log
@Fix libmesa build on amd64 with XENOCARA_BUILD_DRI enabled.

Initial fix from phessler, help from matthieu. Thanks to both!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2008/02/02 17:24:30 matthieu Exp $
d32 1
d38 3
a40 1
CPPFLAGS += -D__GLX_ALIGN64 -DUSE_X86_64_ASM
@


1.1
log
@stuff for building libGL with dri support. Also includes clean-up
of the regular libGL build. bump major because some symbols were
removed. ok oga@@
@
text
@d1 1
a1 1
# $OpenBSD$
a264 1

d331 2
a332 1
.if ${MACHINE_ARCH} == i386
d336 1
d342 17
a358 16
common_x86_asm.o: matypes.h
3dnow_normal.o: matypes.h
3dnow_xform1.o: matypes.h
3dnow_xform2.o: matypes.h
3dnow_xform3.o: matypes.h
3dnow_xform4.o: matypes.h
mmx_blend.o: matypes.h
sse_normal.o: matypes.h
sse_xform1.o: matypes.h
sse_xform2.o: matypes.h
sse_xform3.o: matypes.h
sse_xform4.o: matypes.h
x86_cliptest.o: matypes.h
x86_xform2.o: matypes.h
x86_xform3.o: matypes.h
x86_xform4.o: matypes.h
d373 1
@

