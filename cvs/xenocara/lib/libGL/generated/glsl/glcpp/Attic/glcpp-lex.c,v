head	1.6;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2015.12.23.05.06.03;	author jsg;	state dead;
branches;
next	1.5;
commitid	jLBLHykYtPbp9N8b;

1.5
date	2015.02.20.23.31.05;	author jsg;	state Exp;
branches;
next	1.4;
commitid	96FH88ZMzjHy95WG;

1.4
date	2015.01.25.15.09.13;	author jsg;	state Exp;
branches;
next	1.3;
commitid	M1dxZ5qfRB65OrtK;

1.3
date	2014.07.09.21.32.41;	author jsg;	state Exp;
branches;
next	1.2;
commitid	uM5VFgRcH6JLiuF9;

1.2
date	2013.10.05.10.12.56;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.05.15.12.04;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove now unused local build system for Mesa
@
text
@#line 2 "glsl/glcpp/glcpp-lex.c"

#line 4 "glsl/glcpp/glcpp-lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glcpp_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glcpp_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void glcpp_restart (FILE *input_file ,yyscan_t yyscanner );
void glcpp__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE glcpp__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void glcpp__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void glcpp__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void glcpp_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void glcpp_pop_buffer_state (yyscan_t yyscanner );

static void glcpp_ensure_buffer_stack (yyscan_t yyscanner );
static void glcpp__load_buffer_state (yyscan_t yyscanner );
static void glcpp__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER glcpp__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE glcpp__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE glcpp__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE glcpp__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *glcpp_alloc (yy_size_t ,yyscan_t yyscanner );
void *glcpp_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void glcpp_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer glcpp__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glcpp_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glcpp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glcpp_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glcpp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glcpp_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 43
#define YY_END_OF_BUFFER 44
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[151] =
    {   0,
        0,    0,    0,    0,    3,    3,    0,    0,    0,    0,
        0,    0,    0,    0,   44,   39,   40,   41,   43,   38,
       43,   38,   38,   38,   25,   24,   38,   38,   38,   37,
       37,   38,   40,   23,    3,    4,    5,   42,   17,   17,
       17,   21,   39,   32,   35,   33,    2,    1,   25,   25,
        0,   24,   24,   27,   29,   31,   30,   28,   37,   37,
       34,    0,   23,   23,    0,    0,    0,    0,    0,    0,
        0,    3,    4,    5,    6,    5,    7,    0,    0,    0,
        0,   20,   21,    1,   26,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,   37,    0,    0,

        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,   37,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,    0,   14,   16,   18,    0,
       11,    0,   10,    0,   22,    0,   36,    0,   18,    0,
       12,    0,    0,   19,    0,    9,    0,    0,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
        7,   10,    7,    7,    7,    7,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   14,   14,    1,    7,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   20,   19,   19,   21,   19,   19,
        7,    1,    7,    7,   19,    1,   22,   18,   18,   23,

       24,   25,   26,   19,   27,   19,   19,   28,   29,   30,
       31,   32,   19,   33,   34,   35,   36,   37,   19,   38,
       19,   19,    7,   39,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[40] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    1,    1,    1,    5,    6,    6,
        6,    5,    7,    5,    5,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    6,    6,    6,    1
    } ;

static yyconst flex_int16_t yy_base[165] =
    {   0,
        0,   38,    0,    0,   38,   39,  319,  318,  317,   44,
       50,    0,    0,    0,  319,  317,  323,  323,  323,  301,
      310,  323,  307,   80,   80,   83,   83,  298,   88,    0,
      289,  273,  100,  118,  308,  323,  104,  323,  323,  106,
      107,  301,  308,  323,  323,  323,  323,    0,  113,  323,
        0,  115,  323,  323,  323,  323,  323,  323,    0,  283,
      323,  111,  301,  300,  281,  110,  279,  276,  269,  271,
      276,  296,  323,  149,  323,  153,  323,  130,  120,  151,
       15,  323,  289,    0,   74,  270,  271,   96,  272,  261,
      258,  135,  262,  269,  267,  256,  323,  258,  260,  261,

      261,  257,  252,  258,  323,  257,  257,  255,  252,  253,
      242,  245,  231,    0,  323,  228,  219,  216,  213,  208,
      216,  148,  151,  147,  150,  148,  323,  323,    0,  137,
      323,  145,  167,  146,  323,  136,    0,  164,    0,  135,
      323,    0,  131,  155,  108,    0,  135,   91,  109,  323,
      178,  186,  194,  202,  206,  214,  222,  228,  236,  240,
      247,  255,  259,  267
    } ;

static yyconst flex_int16_t yy_def[165] =
    {   0,
      150,    1,  151,  151,  152,  152,  153,  153,  154,  154,
      150,   11,  151,  151,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  155,
      155,  150,  150,  150,  156,  150,  157,  150,  150,  150,
      150,  158,  150,  150,  150,  150,  150,  159,  150,  150,
      160,  150,  150,  150,  150,  150,  150,  150,  155,  155,
      150,  150,   34,   34,  150,  150,  150,  150,  150,  150,
      150,  156,  150,  157,  150,  157,  150,  150,  150,  150,
      150,  150,  158,  159,  160,  155,  150,  150,  150,  150,
      150,  161,  150,  150,  150,  150,  150,  155,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  155,  150,  162,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  155,  150,  150,  150,  163,  150,
      150,  150,  150,  150,  150,  150,  155,  150,  163,  150,
      150,  164,  150,  150,  150,  164,  150,  150,  150,    0,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150
    } ;

static yyconst flex_int16_t yy_nxt[363] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   22,   22,
       24,   25,   26,   26,   27,   28,   29,   30,   30,   30,
       30,   30,   31,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   32,   33,
       36,   36,   88,   34,   89,   40,   18,   37,   37,   41,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   19,   47,
       48,   49,   49,   97,   52,   52,   52,   54,   55,   50,

       51,   62,   53,   57,   58,   63,   75,   78,   80,   97,
      149,   79,   62,   76,   77,   50,   63,   51,   53,   64,
      142,   80,  100,   45,   49,   49,   52,   52,   52,  101,
       81,   78,   50,   67,   53,   79,  149,   88,  148,   89,
       65,   66,   90,   81,   67,   68,   67,   91,   50,   69,
       53,   75,   80,   70,   71,   75,  144,  106,  150,  150,
      147,  145,   76,   77,  107,  144,  143,  142,  133,  141,
      140,  138,  137,  136,   81,  135,  134,   67,   19,   19,
       19,   19,   19,   19,   19,   19,   35,   35,   35,   35,
       35,   35,   35,   35,   38,   38,   38,   38,   38,   38,

       38,   38,   39,   39,   39,   39,   39,   39,   39,   39,
       59,   59,   59,   59,   72,   72,   72,  133,   72,   72,
       72,   72,   74,   74,   74,   74,   74,   74,   74,   74,
       83,  132,   83,   83,   83,   83,   84,  131,   84,   84,
       84,   84,   84,   84,   85,  130,   85,  105,  105,  105,
      105,  129,  128,  105,  105,  127,  127,  127,  127,  139,
      126,  139,  139,  139,  139,  139,  139,  146,  125,  146,
      146,  146,  146,  146,  146,  124,  123,  122,  121,  120,
      119,  118,  117,  116,  115,  114,  113,  112,  111,  110,
      109,  108,  104,  103,  102,   99,   98,   82,   73,   96,

       95,   94,   93,   92,   87,  150,  150,   86,   43,   82,
       73,   61,   60,   56,   46,   45,   44,   43,  150,   18,
       19,   19,   15,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150
    } ;

static yyconst flex_int16_t yy_chk[363] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        5,    6,   81,    2,   81,   10,   10,    5,    6,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   24,
       24,   25,   25,   85,   26,   26,   26,   27,   27,   25,

       25,   33,   26,   29,   29,   33,   37,   40,   41,   85,
      149,   40,   62,   37,   37,   25,   62,   25,   26,   34,
      148,   79,   88,   34,   49,   49,   52,   52,   52,   88,
       41,   78,   49,   41,   52,   78,  147,   66,  145,   66,
       34,   34,   66,   79,   34,   34,   79,   66,   49,   34,
       52,   74,   80,   34,   34,   76,  144,   92,   74,   74,
      143,  140,   76,   76,   92,  138,  136,  134,  133,  132,
      130,  126,  125,  124,   80,  123,  122,   80,  151,  151,
      151,  151,  151,  151,  151,  151,  152,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,  153,  153,  153,

      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      155,  155,  155,  155,  156,  156,  156,  121,  156,  156,
      156,  156,  157,  157,  157,  157,  157,  157,  157,  157,
      158,  120,  158,  158,  158,  158,  159,  119,  159,  159,
      159,  159,  159,  159,  160,  118,  160,  161,  161,  161,
      161,  117,  116,  161,  161,  162,  162,  162,  162,  163,
      113,  163,  163,  163,  163,  163,  163,  164,  112,  164,
      164,  164,  164,  164,  164,  111,  110,  109,  108,  107,
      106,  104,  103,  102,  101,  100,   99,   98,   96,   95,
       94,   93,   91,   90,   89,   87,   86,   83,   72,   71,

       70,   69,   68,   67,   65,   64,   63,   60,   43,   42,
       35,   32,   31,   28,   23,   21,   20,   16,   15,    9,
        8,    7,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
#line 2 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
/*
 * Copyright © 2010 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "glcpp.h"
#include "glcpp-parse.h"

/* Flex annoyingly generates some functions without making them
 * static. Let's declare them here. */
int glcpp_get_column  (yyscan_t yyscanner);
void glcpp_set_column (int  column_no , yyscan_t yyscanner);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_NO_INPUT

#define YY_USER_ACTION							\
	do {								\
		if (parser->has_new_line_number)			\
			yylineno = parser->new_line_number;		\
		if (parser->has_new_source_number)			\
			yylloc->source = parser->new_source_number;	\
		yylloc->first_column = yycolumn + 1;			\
		yylloc->first_line = yylloc->last_line = yylineno;	\
		yycolumn += yyleng;					\
		yylloc->last_column = yycolumn + 1;			\
		parser->has_new_line_number = 0;			\
		parser->has_new_source_number = 0;			\
 } while(0);

#define YY_USER_INIT			\
	do {				\
		yylineno = 1;		\
		yycolumn = 1;		\
		yylloc->source = 0;	\
	} while(0)

/* The OTHER class is simply a catch-all for things that the CPP
parser just doesn't care about. Since flex regular expressions that
match longer strings take priority over those matching shorter
strings, we have to be careful to avoid OTHER matching and hiding
something that CPP does care about. So we simply exclude all
characters that appear in any other expressions. */
#line 631 "glsl/glcpp/glcpp-lex.c"

#define INITIAL 0
#define DONE 1
#define COMMENT 2
#define UNREACHABLE 3
#define SKIP 4
#define DEFINE 5
#define NEWLINE_CATCHUP 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE glcpp_parser_t *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int glcpp_lex_init (yyscan_t* scanner);

int glcpp_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glcpp_lex_destroy (yyscan_t yyscanner );

int glcpp_get_debug (yyscan_t yyscanner );

void glcpp_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE glcpp_get_extra (yyscan_t yyscanner );

void glcpp_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *glcpp_get_in (yyscan_t yyscanner );

void glcpp_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *glcpp_get_out (yyscan_t yyscanner );

void glcpp_set_out  (FILE * out_str ,yyscan_t yyscanner );

int glcpp_get_leng (yyscan_t yyscanner );

char *glcpp_get_text (yyscan_t yyscanner );

int glcpp_get_lineno (yyscan_t yyscanner );

void glcpp_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * glcpp_get_lval (yyscan_t yyscanner );

void glcpp_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *glcpp_get_lloc (yyscan_t yyscanner );
    
        void glcpp_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glcpp_wrap (yyscan_t yyscanner );
#else
extern int glcpp_wrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glcpp_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int glcpp_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 95 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"


	glcpp_parser_t *parser = yyextra;

	/* When we lex a multi-line comment, we replace it (as
	 * specified) with a single space. But if the comment spanned
	 * multiple lines, then subsequent parsing stages will not
	 * count correct line numbers. To avoid this problem we keep
	 * track of all newlines that were commented out by a
	 * multi-line comment, and we emit a NEWLINE token for each at
	 * the next legal opportunity, (which is when the lexer would
	 * be emitting a NEWLINE token anyway).
	 */
	if (YY_START == NEWLINE_CATCHUP) {
		if (parser->commented_newlines)
			parser->commented_newlines--;
		if (parser->commented_newlines == 0)
			BEGIN INITIAL;
		return NEWLINE;
	}

	/* The handling of the SKIP vs INITIAL start states requires
	 * some special handling. Typically, a lexer would change
	 * start states with statements like "BEGIN SKIP" within the
	 * lexer rules. We can't get away with that here, since we
	 * need the parser to actually evaluate expressions for
	 * directives like "#if".
	 *
	 * So, here, in code that will be executed on every call to
	 * the lexer,and before any rules, we examine the skip_stack
	 * as set by the parser to know whether to change from INITIAL
	 * to SKIP or from SKIP back to INITIAL.
	 *
	 * Three cases cause us to switch out of the SKIP state and
	 * back to the INITIAL state:
	 *
	 *	1. The top of the skip_stack is of type SKIP_NO_SKIP
	 *	   This means we're still evaluating some #if
	 *	   hierarchy, but we're on a branch of it where
	 *	   content should not be skipped (such as "#if 1" or
	 *	   "#else" or so).
	 *
	 *	2. The skip_stack is NULL meaning that we've reached
	 *	   the last #endif.
	 *
	 *	3. The lexing_if bit is set. This indicates that we
	 *	   are lexing the expression following an "#if" of
	 *	   "#elif". Even inside an "#if 0" we need to lex this
	 *	   expression so the parser can correctly update the
	 *	   skip_stack state.
	 */
	if (YY_START == INITIAL || YY_START == SKIP) {
		if (parser->lexing_if ||
		    parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			BEGIN INITIAL;
		} else {
			BEGIN SKIP;
		}
	}

	/* Single-line comments */
#line 949 "glsl/glcpp/glcpp-lex.c"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glcpp_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				glcpp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		glcpp__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 151 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 150 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 158 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
}
	YY_BREAK
/* Multi-line comments */
case 2:
YY_RULE_SETUP
#line 162 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{ yy_push_state(COMMENT, yyscanner); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 163 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"

	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 164 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{ yylineno++; yycolumn = 0; parser->commented_newlines++; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 165 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"

	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 166 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{ yylineno++; yycolumn = 0; parser->commented_newlines++; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 167 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yy_pop_state(yyscanner);
	if (yyextra->space_tokens)
		return SPACE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 173 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	yyextra->space_tokens = 0;
	return HASH_VERSION;
}
	YY_BREAK
/* glcpp doesn't handle #extension, #version, or #pragma directives.
	 * Simply pass them through to the main compiler's lexer/parser. */
case 9:
YY_RULE_SETUP
#line 181 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (parser->commented_newlines)
		BEGIN NEWLINE_CATCHUP;
	yylval->str = ralloc_strdup (yyextra, yytext);
	yylineno++;
	yycolumn = 0;
	return OTHER;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 190 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return HASH_LINE;
}
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 195 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IFDEF;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 201 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IFNDEF;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 207 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IF;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 213 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_ELIF;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 219 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->space_tokens = 0;
	return HASH_ELSE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 224 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->space_tokens = 0;
	return HASH_ENDIF;
}
	YY_BREAK

case 17:
YY_RULE_SETUP
#line 230 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (parser->commented_newlines)
		BEGIN NEWLINE_CATCHUP;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 235 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	char *p;
	for (p = yytext; !isalpha(p[0]); p++); /* skip "  #   " */
	p += 5; /* skip "error" */
	glcpp_error(yylloc, yyextra, "#error%s", p);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 242 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->space_tokens = 0;
	yy_push_state(DEFINE, yyscanner);
	return HASH_DEFINE;
}
	YY_BREAK
case 20:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 248 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yy_pop_state(yyscanner);
	yylval->str = ralloc_strdup (yyextra, yytext);
	return FUNC_IDENTIFIER;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 254 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yy_pop_state(yyscanner);
	yylval->str = ralloc_strdup (yyextra, yytext);
	return OBJ_IDENTIFIER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 260 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->space_tokens = 0;
	return HASH_UNDEF;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 265 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yyextra->space_tokens = 0;
	return HASH;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 270 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 275 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 280 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 285 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return LEFT_SHIFT;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 289 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return RIGHT_SHIFT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 293 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 297 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 301 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return EQUAL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 305 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return NOT_EQUAL;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 309 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return AND;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 313 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return OR;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 317 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (parser->is_gles)
		glcpp_error(yylloc, yyextra, "Token pasting (##) is illegal in GLES");
	return PASTE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 323 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return DEFINED;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 327 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	return IDENTIFIER;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 332 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	return yytext[0];
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 336 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	yylval->str = ralloc_strdup (yyextra, yytext);
	return OTHER;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 341 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (yyextra->space_tokens) {
		return SPACE;
	}
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 347 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (parser->commented_newlines) {
		BEGIN NEWLINE_CATCHUP;
	}
	yyextra->lexing_if = 0;
	yylineno++;
	yycolumn = 0;
	return NEWLINE;
}
	YY_BREAK
/* Handle missing newline at EOF. */
case YY_STATE_EOF(INITIAL):
#line 358 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	BEGIN DONE; /* Don't keep matching this rule forever. */
	yyextra->lexing_if = 0;
	return NEWLINE;
}
	YY_BREAK
/* We don't actually use the UNREACHABLE start condition. We
	only have this action here so that we can pretend to call some
	generated functions, (to avoid "defined but not used"
	warnings. */
case 42:
YY_RULE_SETUP
#line 368 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	unput('.');
	yy_top_state(yyextra);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 373 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
ECHO;
	YY_BREAK
#line 1400 "glsl/glcpp/glcpp-lex.c"
case YY_STATE_EOF(DONE):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(UNREACHABLE):
case YY_STATE_EOF(SKIP):
case YY_STATE_EOF(DEFINE):
case YY_STATE_EOF(NEWLINE_CATCHUP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * glcpp_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( glcpp_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glcpp_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glcpp_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glcpp_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glcpp_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 151 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 151 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 150);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glcpp_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glcpp_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * @@param yyscanner The scanner object.
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void glcpp_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        glcpp_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            glcpp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	glcpp__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	glcpp__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * @@param yyscanner The scanner object.
 */
    void glcpp__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glcpp_pop_buffer_state();
	 *		glcpp_push_buffer_state(new_buffer);
     */
	glcpp_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glcpp__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (glcpp_wrap()) processing, but the only time this flag
	 * is looked at is after glcpp_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void glcpp__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * @@param yyscanner The scanner object.
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE glcpp__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glcpp_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glcpp__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glcpp_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glcpp__create_buffer()" );

	b->yy_is_our_buffer = 1;

	glcpp__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @@param b a buffer created with glcpp__create_buffer()
 * @@param yyscanner The scanner object.
 */
    void glcpp__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glcpp_free((void *) b->yy_ch_buf ,yyscanner );

	glcpp_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glcpp_restart() or at EOF.
 */
    static void glcpp__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	glcpp__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glcpp__init_buffer was _probably_
     * called from glcpp_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * @@param yyscanner The scanner object.
 */
    void glcpp__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glcpp__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  @@param yyscanner The scanner object.
 */
void glcpp_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	glcpp_ensure_buffer_stack(yyscanner);

	/* This block is copied from glcpp__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glcpp__switch_to_buffer. */
	glcpp__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @@param yyscanner The scanner object.
 */
void glcpp_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	glcpp__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		glcpp__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glcpp_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)glcpp_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in glcpp_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)glcpp_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in glcpp_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glcpp__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glcpp_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glcpp__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glcpp__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glcpp_lex() will
 * scan from a @@e copy of @@a str.
 * @@param yystr a NUL-terminated string to scan
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       glcpp__scan_bytes() instead.
 */
YY_BUFFER_STATE glcpp__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return glcpp__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to glcpp_lex() will
 * scan from a @@e copy of @@a bytes.
 * @@param bytes the byte buffer to scan
 * @@param len the number of bytes in the buffer pointed to by @@a bytes.
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glcpp__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glcpp_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glcpp__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glcpp__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glcpp__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) glcpp_alloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) glcpp_realloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @@param yyscanner The scanner object.
 */
YY_EXTRA_TYPE glcpp_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @@param yyscanner The scanner object.
 */
int glcpp_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @@param yyscanner The scanner object.
 */
int glcpp_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @@param yyscanner The scanner object.
 */
FILE *glcpp_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @@param yyscanner The scanner object.
 */
FILE *glcpp_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @@param yyscanner The scanner object.
 */
int glcpp_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @@param yyscanner The scanner object.
 */

char *glcpp_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @@param user_defined The data to be associated with this scanner.
 * @@param yyscanner The scanner object.
 */
void glcpp_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @@param line_number
 * @@param yyscanner The scanner object.
 */
void glcpp_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "glcpp_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @@param line_number
 * @@param yyscanner The scanner object.
 */
void glcpp_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "glcpp_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * @@param yyscanner The scanner object.
 * @@see glcpp__switch_to_buffer
 */
void glcpp_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void glcpp_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int glcpp_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void glcpp_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * glcpp_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void glcpp_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *glcpp_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void glcpp_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* glcpp_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int glcpp_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) glcpp_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* glcpp_lex_init_extra has the same functionality as glcpp_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to glcpp_alloc in
 * the yyextra field.
 */

int glcpp_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    glcpp_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) glcpp_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    glcpp_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glcpp_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glcpp_lex_init()
     */
    return 0;
}

/* glcpp_lex_destroy is for both reentrant and non-reentrant scanners. */
int glcpp_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glcpp__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glcpp_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	glcpp_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        glcpp_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glcpp_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    glcpp_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glcpp_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *glcpp_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glcpp_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see glcpp_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 373 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"



void
glcpp_lex_set_source_string(glcpp_parser_t *parser, const char *shader)
{
	glcpp__scan_string(shader,parser->scanner);
}

@


1.5
log
@switch back to Mesa 10.2

With 10.4.3 gpu compositing on chromium would result in a black window
on older Intel parts (ie x60s with 945gm) and at least some discrete
Radeon parts.  These problems do not seem to occur on recent Intel
parts, though those have coherent memory and hardware contexts.

It isn't clear what changes in Mesa are involved in the problem
though it also occurs with the 10.3 branch.
@
text
@@


1.4
log
@Mesa 10.4.3
@
text
@d352 2
a353 2
#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
d361 1
a361 1
static yyconst flex_int16_t yy_accept[174] =
d363 16
a378 19
        0,    0,    3,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   53,   48,   49,   50,   51,   50,
       47,    8,   47,   47,   47,   47,   47,   47,   31,   30,
       47,   47,   47,   45,   45,   47,    3,    4,    4,    5,
       29,   27,   51,   26,   24,   23,   13,   13,   24,   24,
       24,   24,   24,   24,   24,   24,   48,   50,   38,   43,
       39,   41,   42,   46,    2,    1,   46,   31,   46,   31,
       46,   30,   30,   33,   35,   37,   36,   34,   45,   45,
       40,    3,    4,    4,    4,    5,    6,    6,    5,    7,
       29,   27,   28,    1,   25,   26,   23,   13,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    1,   32,
       32,   45,    4,    6,   28,    1,    0,    0,    0,    0,
        0,    0,   16,    0,    0,    0,    0,    0,    0,   32,
       45,    0,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   45,    0,   17,   19,   20,    0,   14,
        0,   12,    0,   22,    0,   45,   21,   20,    0,   15,
       11,    0,   44,   21,    0,   11,   11,   10,    0,    0,
        9,   11,    0
d384 1
a384 1
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
d386 11
a396 11
        1,    2,    6,    1,    7,    1,    8,    9,    1,   10,
        8,   11,   12,    8,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,    1,    8,   19,
       20,   21,    1,    1,   22,   22,   22,   22,   23,   22,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   25,
       24,   24,   24,   24,   26,   24,   24,   27,   24,   24,
        8,    1,    8,    8,   24,    1,   28,   22,   22,   29,

       30,   31,   32,   24,   33,   24,   24,   34,   35,   36,
       37,   38,   24,   39,   40,   41,   42,   43,   24,   44,
       24,   24,    8,   45,    8,    8,    1,    1,    1,    1,
d413 1
a413 1
static yyconst flex_int32_t yy_meta[46] =
d415 4
a418 5
        1,    2,    3,    2,    3,    1,    1,    1,    1,    4,
        5,    1,    1,    6,    1,    7,    7,    7,    1,    1,
        1,    7,    7,    7,    7,    7,    7,    7,    8,    7,
        7,    7,    7,    7,    7,    8,    7,    7,    7,    7,
        7,    7,    7,    7,    1
d421 1
a421 1
static yyconst flex_int16_t yy_base[191] =
d423 18
a440 20
        0,    0,   43,   44,   55,    0,   47,   48,   99,  141,
      102,  103,  106,  107,  435,  433,  436,  428,  436,  429,
      411,  423,  436,  420,  416,  414,   99,  107,  169,  198,
      100,  406,  103,    0,  395,  379,  122,  418,  419,  144,
        0,  419,  115,  410,  436,  417,  413,  414,  120,  386,
      114,  384,  381,  374,  376,  381,  409,  436,  436,  436,
      436,  436,  436,  138,  436,    0,  139,  164,  197,  126,
      229,    0,  139,  436,  436,  436,  436,  436,    0,  378,
      436,  131,  403,  404,  436,  186,  401,  402,  197,  436,
        0,  402,    0,  163,  436,  393,  400,  436,  370,  133,

      371,  360,  357,  169,  361,  368,  366,  355,    0,  146,
      191,  360,  436,  436,    0,  227,  359,  360,  360,  356,
      351,  357,  436,  356,  356,  341,  329,  319,  301,  206,
      304,  297,    0,  436,  297,  288,  276,  280,  268,  261,
      220,  219,  216,  218,  214,  436,  436,    0,  203,  436,
      207,  232,  198,  436,  188,  164,  185,    0,  145,  436,
      251,  124,    0,  155,  117,  227,  259,  436,  138,   85,
      111,  234,  436,  264,  272,  280,  283,  285,  293,  301,
      309,  317,  322,  330,  338,  346,  354,  362,  368,  376
d443 1
a443 1
static yyconst flex_int16_t yy_def[191] =
d445 18
a462 20
      173,    1,  174,  174,  173,    5,  175,  175,  176,  176,
      175,  175,  175,  175,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  177,  177,
      173,  173,  173,  178,  178,  173,  179,  173,  173,  180,
      181,  173,  182,  183,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  177,  173,  184,  177,   30,  177,   69,
       69,   30,   69,  173,  173,  173,  173,  173,  178,  178,
      173,  179,  173,  173,  173,  180,  173,  173,  180,  173,
      181,  173,  185,  186,  173,  183,  173,  173,  173,  173,

      173,  173,  173,  187,  173,  173,  173,  173,  184,   71,
       71,  178,  173,  173,  185,  186,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   69,
      178,  173,  188,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  178,  173,  173,  173,  189,  173,  173,
      173,  173,  173,  173,  173,  178,  173,  189,  173,  173,
      190,  173,  178,  173,  173,  190,  190,  173,  173,  173,
      173,  190,    0,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173
d465 1
a465 1
static yyconst flex_int16_t yy_nxt[482] =
d467 40
a506 53
       16,   17,   18,   19,   20,   21,   22,   23,   24,   23,
       23,   25,   26,   27,   28,   29,   30,   30,   31,   32,
       33,   34,   34,   34,   34,   34,   34,   34,   35,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   38,   38,   39,   39,   18,
       18,   20,   20,   40,   40,   41,   42,   18,   19,   20,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       41,   41,   41,   41,   41,   41,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   41,

       46,   47,   19,   48,   18,   18,   20,   20,   18,   18,
       20,   20,  171,   49,   64,   64,   64,   65,   74,   75,
      172,   66,   77,   78,   83,   65,   84,   50,   51,   94,
       65,   52,   53,   83,   66,   84,   54,  173,  173,  171,
       55,   56,   46,   47,   19,   48,   87,  100,   88,  101,
      173,  173,  102,  170,   89,   49,  164,  103,   90,  169,
       69,   69,   69,   69,  109,  118,  109,   69,   69,   50,
       51,  130,  119,   52,   53,   69,   69,  165,   54,   68,
       68,   67,   55,   56,   68,   68,  164,  130,   87,   70,
       88,   69,  163,   69,   70,   71,  173,  124,   69,   87,

      173,   88,   67,   67,  125,   70,   69,   89,   67,   67,
       70,   90,   71,   72,   72,   72,  130,  173,  173,   69,
       69,   69,   69,   73,  162,  161,   69,   69,  109,  173,
      109,  173,  130,  152,   69,   69,  173,  160,  173,   73,
      173,  173,  159,  157,  110,  110,  110,  156,  155,  154,
      110,  111,  167,  168,  153,  168,  110,  110,  111,  110,
      167,  168,  152,  168,   37,   37,   37,   37,   37,   37,
       37,   37,   19,   19,   19,   19,   19,   19,   19,   19,
       45,   45,   45,   45,   45,   45,   45,   45,   67,   67,
       67,   79,   79,   82,   82,   82,   82,  151,   82,   82,

       82,   86,   86,   86,   86,   86,   86,   86,   86,   91,
      150,  149,   91,   91,   91,   91,   91,   93,   93,   93,
       93,   93,   93,   93,   93,   96,  148,  147,   96,   96,
      109,  109,  145,  109,  109,  109,  109,  109,  115,  144,
      143,  115,  115,  115,  115,  115,  116,  116,  142,  116,
      116,  116,  116,  116,  123,  123,  123,  123,  123,  123,
      141,  123,  146,  146,  146,  146,  146,  146,  158,  158,
      140,  158,  158,  158,  158,  158,  166,  166,  166,  166,
      166,  166,  166,  166,  139,  138,  137,  136,  135,  134,
      133,  132,  131,  129,  128,  127,  126,  122,  121,  120,

      117,   97,   95,   92,  114,  114,  113,  113,  112,   57,
      108,  107,  106,  105,  104,   99,   98,   98,   97,   95,
       92,   85,   85,   81,   80,   76,   63,   62,   61,   60,
       59,   58,   58,   57,  173,   15,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173
d509 1
a509 1
static yyconst flex_int16_t yy_chk[482] =
d514 37
a550 50
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    3,    4,    7,
        8,    7,    8,    3,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        9,    9,    9,    9,   11,   12,   11,   12,   13,   14,
       13,   14,  171,    9,   27,   27,   27,   28,   31,   31,
      170,   28,   33,   33,   37,   43,   37,    9,    9,   43,
       49,    9,    9,   82,   49,   82,    9,   70,   70,  169,
        9,    9,   10,   10,   10,   10,   40,   51,   40,   51,
       73,   73,   51,  165,   40,   10,  164,   51,   40,  162,
       64,   67,   64,   67,   94,  100,   94,   64,   67,   10,
       10,  110,  100,   10,   10,   64,   67,  159,   10,   68,
       68,   68,   10,   10,   29,   29,  157,  110,   86,   68,
       86,   29,  156,   29,   29,   29,   86,  104,   29,   89,

       86,   89,  111,  111,  104,   68,   29,   89,   69,   69,
       29,   89,   29,   30,   30,   30,  111,  130,  130,   69,
       30,   69,   30,   30,  155,  153,   69,   30,  116,  166,
      116,  166,  111,  152,   69,   30,  172,  151,  172,   30,
       71,   71,  149,  145,   71,   71,   71,  144,  143,  142,
       71,   71,  161,  161,  141,  161,   71,   71,   71,   71,
      167,  167,  140,  167,  174,  174,  174,  174,  174,  174,
      174,  174,  175,  175,  175,  175,  175,  175,  175,  175,
      176,  176,  176,  176,  176,  176,  176,  176,  177,  177,
      177,  178,  178,  179,  179,  179,  179,  139,  179,  179,

      179,  180,  180,  180,  180,  180,  180,  180,  180,  181,
      138,  137,  181,  181,  181,  181,  181,  182,  182,  182,
      182,  182,  182,  182,  182,  183,  136,  135,  183,  183,
      184,  184,  132,  184,  184,  184,  184,  184,  185,  131,
      129,  185,  185,  185,  185,  185,  186,  186,  128,  186,
      186,  186,  186,  186,  187,  187,  187,  187,  187,  187,
      127,  187,  188,  188,  188,  188,  188,  188,  189,  189,
      126,  189,  189,  189,  189,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  125,  124,  122,  121,  120,  119,
      118,  117,  112,  108,  107,  106,  105,  103,  102,  101,

       99,   97,   96,   92,   88,   87,   84,   83,   80,   57,
       56,   55,   54,   53,   52,   50,   48,   47,   46,   44,
       42,   39,   38,   36,   35,   32,   26,   25,   24,   22,
       21,   20,   18,   16,   15,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173
d615 1
a615 1
	} while(0);
d620 1
a620 1
		yycolumn = 0;		\
a623 96
/* It's ugly to have macros that have return statements inside of
 * them, but flex-based lexer generation is all built around the
 * return statement.
 *
 * To mitigate the ugliness, we defer as much of the logic as possible
 * to an actual function, not a macro (see
 * glcpplex_update_state_per_token) and we make the word RETURN
 * prominent in all of the macros which may return.
 *
 * The most-commonly-used macro is RETURN_TOKEN which will perform all
 * necessary state updates based on the provided token,, then
 * conditionally return the token. It will not return a token if the
 * parser is currently skipping tokens, (such as within #if
 * 0...#else).
 *
 * The RETURN_TOKEN_NEVER_SKIP macro is a lower-level variant that
 * makes the token returning unconditional. This is needed for things
 * like #if and the tokens of its condition, (since these must be
 * evaluated by the parser even when otherwise skipping).
 *
 * Finally, RETURN_STRING_TOKEN is a simple convenience wrapper on top
 * of RETURN_TOKEN that performs a string copy of yytext before the
 * return.
 */
#define RETURN_TOKEN_NEVER_SKIP(token)					\
	do {								\
		if (glcpp_lex_update_state_per_token (parser, token))	\
			return token;					\
	} while (0)

#define RETURN_TOKEN(token)						\
	do {								\
		if (! parser->skipping) {				\
			RETURN_TOKEN_NEVER_SKIP(token);			\
		}							\
	} while(0)

#define RETURN_STRING_TOKEN(token)					\
	do {								\
		if (! parser->skipping) {				\
			yylval->str = ralloc_strdup (yyextra, yytext);	\
			RETURN_TOKEN_NEVER_SKIP (token);		\
		}							\
	} while(0)


/* Update all state necessary for each token being returned.
 *
 * Here we'll be tracking newlines and spaces so that the lexer can
 * alter its behavior as necessary, (for example, '#' has special
 * significance if it is the first non-whitespace, non-comment token
 * in a line, but does not otherwise).
 *
 * NOTE: If this function returns FALSE, then no token should be
 * returned at all. This is used to suprress duplicate SPACE tokens.
 */
static int
glcpp_lex_update_state_per_token (glcpp_parser_t *parser, int token)
{
	/* After the first non-space token in a line, we won't
	 * allow any '#' to introduce a directive. */
	if (token == NEWLINE) {
		parser->first_non_space_token_this_line = 1;
	} else if (token != SPACE) {
		parser->first_non_space_token_this_line = 0;
	}

	/* Track newlines just to know whether a newline needs
	 * to be inserted if end-of-file comes early. */
	if (token == NEWLINE) {
		parser->last_token_was_newline = 1;
	} else {
		parser->last_token_was_newline = 0;
	}

	/* Track spaces to avoid emitting multiple SPACE
	 * tokens in a row. */
	if (token == SPACE) {
		if (! parser->last_token_was_space) {
			parser->last_token_was_space = 1;
			return 1;
		} else {
			parser->last_token_was_space = 1;
			return 0;
		}
	} else {
		parser->last_token_was_space = 0;
		return 1;
	}
}


/* Note: When adding any start conditions to this list, you must also
* update the "Internal compiler error" catch-all rule near the end of
* this file. */

d630 1
a630 1
#line 761 "glsl/glcpp/glcpp-lex.c"
d633 6
a638 6
#define COMMENT 1
#define DEFINE 2
#define DONE 3
#define HASH 4
#define NEWLINE_CATCHUP 5
#define UNREACHABLE 6
d870 3
d884 1
a884 1
#line 194 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d903 1
a903 1
		RETURN_TOKEN_NEVER_SKIP (NEWLINE);
d906 6
a911 1
	/* Set up the parser->skipping bit here before doing any lexing.
d913 4
a916 2
	 * This bit controls whether tokens are skipped, (as implemented by
         * RETURN_TOKEN), such as between "#if 0" and "#endif".
d918 2
a919 3
	 * The parser maintains a skip_stack indicating whether we should be
         * skipping, (and nested levels of #if/#ifdef/#ifndef/#endif) will
         * push and pop items from the stack.
d921 5
a925 1
	 * Here are the rules for determining whether we are skipping:
d927 2
a928 2
	 *	1. If the skip stack is NULL, we are outside of all #if blocks
	 *         and we are not skipping.
d930 5
a934 14
	 *	2. If the skip stack is non-NULL, the type of the top node in
	 *	   the stack determines whether to skip. A type of
	 *	   SKIP_NO_SKIP is used for blocks wheere we are emitting
	 *	   tokens, (such as between #if 1 and #endif, or after the
	 *	   #else of an #if 0, etc.).
	 *
	 *	3. The lexing_directive bit overrides the skip stack. This bit
	 *	   is set when we are actively lexing the expression for a
	 *	   pre-processor condition, (such as #if, #elif, or #else). In
	 *	   this case, even if otherwise skipping, we need to emit the
	 *	   tokens for this condition so that the parser can evaluate
	 *	   the expression. (For, #else, there's no expression, but we
	 *	   emit tokens so the parser can generate a nice error message
	 *	   if there are any tokens here).
d936 9
a944 7
	if (parser->skip_stack &&
	    parser->skip_stack->type != SKIP_NO_SKIP &&
	    ! parser->lexing_directive)
	{
		parser->skipping = 1;
	} else {
		parser->skipping = 0;
d948 1
a948 1
#line 1073 "glsl/glcpp/glcpp-lex.c"
d993 1
d1006 1
a1006 1
				if ( yy_current_state >= 174 )
d1012 1
a1012 1
		while ( yy_current_state != 173 );
d1034 1
a1034 1
#line 254 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1041 1
a1041 1
#line 258 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1046 1
a1046 1
#line 259 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1052 1
a1052 1
#line 260 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1057 1
a1057 1
#line 261 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1063 1
a1063 1
#line 262 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1068 1
a1068 1
#line 263 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1071 2
a1072 3
	/* In the <HASH> start condition, we don't want any SPACE token. */
	if (yyextra->space_tokens && YY_START != HASH)
		RETURN_TOKEN (SPACE);
d1077 1
a1077 1
#line 270 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1079 3
a1081 12

	/* If the '#' is the first non-whitespace, non-comment token on this
	 * line, then it introduces a directive, switch to the <HASH> start
	 * condition.
	 *
	 * Otherwise, this is just punctuation, so return the HASH_TOKEN
         * token. */
	if (parser->first_non_space_token_this_line) {
		BEGIN HASH;
	}

	RETURN_TOKEN_NEVER_SKIP (HASH_TOKEN);
d1084 2
d1088 1
a1088 1
#line 285 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1090 6
a1095 3
	BEGIN INITIAL;
	yyextra->space_tokens = 0;
	RETURN_STRING_TOKEN (VERSION_TOKEN);
a1097 8
/* Swallow empty #pragma directives, (to avoid confusing the
	 * downstream compiler).
	 *
	 * Note: We use a simple regular expression for the lookahead
	 * here. Specifically, we cannot use the complete {NEWLINE} expression
	 * since it uses alternation and we've found that there's a flex bug
	 * where using alternation in the lookahead portion of a pattern
	 * triggers a buffer overrun. */
a1098 4
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1100 1
a1100 1
#line 299 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1102 1
a1102 1
	BEGIN INITIAL;
d1105 1
a1105 2
/* glcpp doesn't handle #extension, #version, or #pragma directives.
	 * Simply pass them through to the main compiler's lexer/parser. */
d1108 1
a1108 1
#line 305 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1110 3
a1112 2
	BEGIN INITIAL;
	RETURN_STRING_TOKEN (PRAGMA);
d1117 1
a1117 1
#line 310 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1119 3
a1121 2
	BEGIN INITIAL;
	RETURN_TOKEN (LINE);
d1126 3
d1130 1
a1130 1
#line 315 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1132 3
a1134 2
	BEGIN INITIAL;
	RETURN_TOKEN_NEVER_SKIP (NEWLINE);
a1136 2
/* For the pre-processor directives, we return these tokens
	 * even when we are otherwise skipping. */
d1138 4
d1143 1
a1143 1
#line 322 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1145 1
a1145 2
	BEGIN INITIAL;
	yyextra->lexing_directive = 1;
d1147 1
a1147 1
	RETURN_TOKEN_NEVER_SKIP (IFDEF);
d1152 1
a1152 1
#line 329 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1153 2
	BEGIN INITIAL;
	yyextra->lexing_directive = 1;
d1155 1
a1155 1
	RETURN_TOKEN_NEVER_SKIP (IFNDEF);
a1158 4
/* rule 16 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1160 1
a1160 1
#line 336 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1161 2
	BEGIN INITIAL;
	yyextra->lexing_directive = 1;
d1163 1
a1163 1
	RETURN_TOKEN_NEVER_SKIP (IF);
d1166 1
a1167 4
/* rule 17 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1169 1
a1169 1
#line 343 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1171 2
a1172 4
	BEGIN INITIAL;
	yyextra->lexing_directive = 1;
	yyextra->space_tokens = 0;
	RETURN_TOKEN_NEVER_SKIP (ELIF);
d1177 1
a1177 1
#line 350 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1179 4
a1182 3
	BEGIN INITIAL;
	yyextra->space_tokens = 0;
	RETURN_TOKEN_NEVER_SKIP (ELSE);
d1187 1
a1187 1
#line 356 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1188 1
	BEGIN INITIAL;
d1190 2
a1191 1
	RETURN_TOKEN_NEVER_SKIP (ENDIF);
d1195 3
d1199 1
a1199 1
#line 362 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1201 3
a1203 2
	BEGIN INITIAL;
	RETURN_STRING_TOKEN (ERROR_TOKEN);
a1205 18
/* After we see a "#define" we enter the <DEFINE> start state
	 * for the lexer. Within <DEFINE> we are looking for the first
	 * identifier and specifically checking whether the identifier
	 * is followed by a '(' or not, (to lex either a
	 * FUNC_IDENTIFIER or an OBJ_IDENITIFIER token).
	 *
	 * While in the <DEFINE> state we also need to explicitly
	 * handle a few other things that may appear before the
	 * identifier:
	 * 
	 * 	* Comments, (handled above with the main support for
	 * 	  comments).
	 *
	 *	* Whitespace (simply ignored)
	 *
	 *	* Anything else, (not an identifier, not a comment,
	 *	  and not whitespace). This will generate an error.
	 */
d1208 1
a1208 1
#line 385 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1210 3
a1212 5
	if (! parser->skipping) {
		BEGIN DEFINE;
		yyextra->space_tokens = 0;
		RETURN_TOKEN (DEFINE_TOKEN);
	}
d1217 1
a1217 1
#line 393 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1218 1
	BEGIN INITIAL;
d1220 1
a1220 1
	RETURN_TOKEN (UNDEF);
d1225 1
a1225 1
#line 399 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1227 2
a1228 3
	/* Nothing to do here. Importantly, don't leave the <HASH>
	 * start condition, since it's legal to have space between the
	 * '#' and the directive.. */
a1230 1
/* This will catch any non-directive garbage after a HASH */
d1233 1
a1233 1
#line 406 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1235 2
a1236 2
	BEGIN INITIAL;
	RETURN_TOKEN (GARBAGE);
a1238 1
/* An identifier immediately followed by '(' */
a1239 3
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1241 1
a1241 1
#line 412 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1243 2
a1244 2
	BEGIN INITIAL;
	RETURN_STRING_TOKEN (FUNC_IDENTIFIER);
a1246 1
/* An identifier not immediately followed by '(' */
d1249 1
a1249 1
#line 418 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1251 2
a1252 2
	BEGIN INITIAL;
	RETURN_STRING_TOKEN (OBJ_IDENTIFIER);
a1254 1
/* Whitespace */
d1257 1
a1257 1
#line 424 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1259 1
a1259 1
	/* Just ignore it. Nothing to do here. */
a1261 1
/* '/' not followed by '*', so not a comment. This is an error. */
a1262 1
/* rule 28 can match eol */
d1264 1
a1264 1
#line 429 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1266 1
a1266 3
	BEGIN INITIAL;
	glcpp_error(yylloc, yyextra, "#define followed by a non-identifier: %s", yytext);
	RETURN_STRING_TOKEN (INTEGER_STRING);
a1268 2
/* A character that can't start an identifier, comment, or
	 * space. This is an error. */
d1271 1
a1271 1
#line 437 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1273 1
a1273 3
	BEGIN INITIAL;
	glcpp_error(yylloc, yyextra, "#define followed by a non-identifier: %s", yytext);
	RETURN_STRING_TOKEN (INTEGER_STRING);
d1278 1
a1278 1
#line 443 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1280 1
a1280 1
	RETURN_STRING_TOKEN (INTEGER_STRING);
d1285 1
a1285 1
#line 447 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1287 1
a1287 1
	RETURN_STRING_TOKEN (INTEGER_STRING);
d1292 1
a1292 1
#line 451 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1294 1
a1294 1
	RETURN_STRING_TOKEN (INTEGER_STRING);
d1299 1
a1299 1
#line 455 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1301 1
a1301 1
	RETURN_TOKEN (LEFT_SHIFT);
d1306 1
a1306 1
#line 459 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1308 1
a1308 1
	RETURN_TOKEN (RIGHT_SHIFT);
d1313 1
a1313 1
#line 463 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1315 3
a1317 1
	RETURN_TOKEN (LESS_OR_EQUAL);
d1322 1
a1322 1
#line 467 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1324 1
a1324 1
	RETURN_TOKEN (GREATER_OR_EQUAL);
d1329 1
a1329 1
#line 471 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1331 2
a1332 1
	RETURN_TOKEN (EQUAL);
d1337 1
a1337 1
#line 475 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1339 1
a1339 1
	RETURN_TOKEN (NOT_EQUAL);
d1344 1
a1344 1
#line 479 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1346 2
a1347 1
	RETURN_TOKEN (AND);
d1352 1
a1352 68
#line 483 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_TOKEN (OR);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 487 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_TOKEN (PLUS_PLUS);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 491 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_TOKEN (MINUS_MINUS);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 495 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	if (! parser->skipping) {
		if (parser->is_gles)
			glcpp_error(yylloc, yyextra, "Token pasting (##) is illegal in GLES");
		RETURN_TOKEN (PASTE);
	}
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 503 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_TOKEN (DEFINED);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 507 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_STRING_TOKEN (IDENTIFIER);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 511 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_STRING_TOKEN (OTHER);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 515 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_TOKEN (yytext[0]);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 519 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	RETURN_STRING_TOKEN (OTHER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 523 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1355 1
a1355 1
		RETURN_TOKEN (SPACE);
d1359 2
a1360 4
/* We preserve all newlines, even between #if 0..#endif, so no
	skipping.. */
case 50:
/* rule 50 can match eol */
d1362 1
a1362 1
#line 531 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1365 2
	} else {
		BEGIN INITIAL;
d1367 1
a1367 2
	yyextra->space_tokens = 1;
	yyextra->lexing_directive = 0;
d1370 1
a1370 1
	RETURN_TOKEN_NEVER_SKIP (NEWLINE);
d1373 1
d1375 1
a1375 4
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DEFINE):
case YY_STATE_EOF(HASH):
#line 544 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
a1376 2
	if (YY_START == COMMENT)
		glcpp_error(yylloc, yyextra, "Unterminated comment");
d1378 2
a1379 3
	yyextra->lexing_directive = 0;
	if (! parser->last_token_was_newline)
		RETURN_TOKEN (NEWLINE);
d1382 5
a1386 5
/* This is a catch-all to avoid the annoying default flex action which
	 * matches any character and prints it. If any input ever matches this
	 * rule, then we have made a mistake above and need to fix one or more
	 * of the preceding patterns to match that input. */
case 51:
d1388 1
a1388 1
#line 558 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1390 2
a1391 10
	glcpp_error(yylloc, yyextra, "Internal compiler error: Unexpected character: %s", yytext);

	/* We don't actually use the UNREACHABLE start condition. We
	only have this block here so that we can pretend to call some
	generated functions, (to avoid "defined but not used"
	warnings. */
        if (YY_START == UNREACHABLE) {
		unput('.');
		yy_top_state(yyextra);
	}
d1394 1
a1394 1
case 52:
d1396 2
a1397 2
#line 571 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
YY_FATAL_ERROR( "flex scanner jammed" );
d1399 1
a1399 1
#line 1660 "glsl/glcpp/glcpp-lex.c"
d1401 4
a1405 1
case YY_STATE_EOF(UNREACHABLE):
d1687 1
d1700 1
a1700 1
			if ( yy_current_state >= 174 )
d1729 1
a1729 1
		if ( yy_current_state >= 174 )
d1733 1
a1733 1
	yy_is_jam = (yy_current_state == 173);
d1847 2
d2623 1
a2623 1
#line 571 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
@


1.3
log
@Mesa 10.2.3
@
text
@d352 2
a353 2
#define YY_NUM_RULES 43
#define YY_END_OF_BUFFER 44
d361 1
a361 1
static yyconst flex_int16_t yy_accept[151] =
d363 19
a381 16
        0,    0,    0,    0,    3,    3,    0,    0,    0,    0,
        0,    0,    0,    0,   44,   39,   40,   41,   43,   38,
       43,   38,   38,   38,   25,   24,   38,   38,   38,   37,
       37,   38,   40,   23,    3,    4,    5,   42,   17,   17,
       17,   21,   39,   32,   35,   33,    2,    1,   25,   25,
        0,   24,   24,   27,   29,   31,   30,   28,   37,   37,
       34,    0,   23,   23,    0,    0,    0,    0,    0,    0,
        0,    3,    4,    5,    6,    5,    7,    0,    0,    0,
        0,   20,   21,    1,   26,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,   37,    0,    0,

        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,   37,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,    0,   14,   16,   18,    0,
       11,    0,   10,    0,   22,    0,   36,    0,   18,    0,
       12,    0,    0,   19,    0,    9,    0,    0,    8,    0
d387 1
a387 1
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
d389 11
a399 11
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
        7,   10,    7,    7,    7,    7,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   14,   14,    1,    7,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   20,   19,   19,   21,   19,   19,
        7,    1,    7,    7,   19,    1,   22,   18,   18,   23,

       24,   25,   26,   19,   27,   19,   19,   28,   29,   30,
       31,   32,   19,   33,   34,   35,   36,   37,   19,   38,
       19,   19,    7,   39,    7,    7,    1,    1,    1,    1,
d416 1
a416 1
static yyconst flex_int32_t yy_meta[40] =
d418 5
a422 4
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    1,    1,    1,    5,    6,    6,
        6,    5,    7,    5,    5,    6,    6,    6,    6,    8,
        6,    6,    6,    6,    6,    6,    6,    6,    1
d425 1
a425 1
static yyconst flex_int16_t yy_base[165] =
d427 20
a446 18
        0,   38,    0,    0,   38,   39,  319,  318,  317,   44,
       50,    0,    0,    0,  319,  317,  323,  323,  323,  301,
      310,  323,  307,   80,   80,   83,   83,  298,   88,    0,
      289,  273,  100,  118,  308,  323,  104,  323,  323,  106,
      107,  301,  308,  323,  323,  323,  323,    0,  113,  323,
        0,  115,  323,  323,  323,  323,  323,  323,    0,  283,
      323,  111,  301,  300,  281,  110,  279,  276,  269,  271,
      276,  296,  323,  149,  323,  153,  323,  130,  120,  151,
       15,  323,  289,    0,   74,  270,  271,   96,  272,  261,
      258,  135,  262,  269,  267,  256,  323,  258,  260,  261,

      261,  257,  252,  258,  323,  257,  257,  255,  252,  253,
      242,  245,  231,    0,  323,  228,  219,  216,  213,  208,
      216,  148,  151,  147,  150,  148,  323,  323,    0,  137,
      323,  145,  167,  146,  323,  136,    0,  164,    0,  135,
      323,    0,  131,  155,  108,    0,  135,   91,  109,  323,
      178,  186,  194,  202,  206,  214,  222,  228,  236,  240,
      247,  255,  259,  267
d449 1
a449 1
static yyconst flex_int16_t yy_def[165] =
d451 20
a470 18
      150,    1,  151,  151,  152,  152,  153,  153,  154,  154,
      150,   11,  151,  151,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  155,
      155,  150,  150,  150,  156,  150,  157,  150,  150,  150,
      150,  158,  150,  150,  150,  150,  150,  159,  150,  150,
      160,  150,  150,  150,  150,  150,  150,  150,  155,  155,
      150,  150,   34,   34,  150,  150,  150,  150,  150,  150,
      150,  156,  150,  157,  150,  157,  150,  150,  150,  150,
      150,  150,  158,  159,  160,  155,  150,  150,  150,  150,
      150,  161,  150,  150,  150,  150,  150,  155,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  155,  150,  162,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  155,  150,  150,  150,  163,  150,
      150,  150,  150,  150,  150,  150,  155,  150,  163,  150,
      150,  164,  150,  150,  150,  164,  150,  150,  150,    0,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150
d473 1
a473 1
static yyconst flex_int16_t yy_nxt[363] =
d475 53
a527 40
       16,   17,   18,   19,   20,   21,   22,   23,   22,   22,
       24,   25,   26,   26,   27,   28,   29,   30,   30,   30,
       30,   30,   31,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   32,   33,
       36,   36,   88,   34,   89,   40,   18,   37,   37,   41,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   19,   47,
       48,   49,   49,   97,   52,   52,   52,   54,   55,   50,

       51,   62,   53,   57,   58,   63,   75,   78,   80,   97,
      149,   79,   62,   76,   77,   50,   63,   51,   53,   64,
      142,   80,  100,   45,   49,   49,   52,   52,   52,  101,
       81,   78,   50,   67,   53,   79,  149,   88,  148,   89,
       65,   66,   90,   81,   67,   68,   67,   91,   50,   69,
       53,   75,   80,   70,   71,   75,  144,  106,  150,  150,
      147,  145,   76,   77,  107,  144,  143,  142,  133,  141,
      140,  138,  137,  136,   81,  135,  134,   67,   19,   19,
       19,   19,   19,   19,   19,   19,   35,   35,   35,   35,
       35,   35,   35,   35,   38,   38,   38,   38,   38,   38,

       38,   38,   39,   39,   39,   39,   39,   39,   39,   39,
       59,   59,   59,   59,   72,   72,   72,  133,   72,   72,
       72,   72,   74,   74,   74,   74,   74,   74,   74,   74,
       83,  132,   83,   83,   83,   83,   84,  131,   84,   84,
       84,   84,   84,   84,   85,  130,   85,  105,  105,  105,
      105,  129,  128,  105,  105,  127,  127,  127,  127,  139,
      126,  139,  139,  139,  139,  139,  139,  146,  125,  146,
      146,  146,  146,  146,  146,  124,  123,  122,  121,  120,
      119,  118,  117,  116,  115,  114,  113,  112,  111,  110,
      109,  108,  104,  103,  102,   99,   98,   82,   73,   96,

       95,   94,   93,   92,   87,  150,  150,   86,   43,   82,
       73,   61,   60,   56,   46,   45,   44,   43,  150,   18,
       19,   19,   15,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150
d530 1
a530 1
static yyconst flex_int16_t yy_chk[363] =
d535 50
a584 37
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        5,    6,   81,    2,   81,   10,   10,    5,    6,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   24,
       24,   25,   25,   85,   26,   26,   26,   27,   27,   25,

       25,   33,   26,   29,   29,   33,   37,   40,   41,   85,
      149,   40,   62,   37,   37,   25,   62,   25,   26,   34,
      148,   79,   88,   34,   49,   49,   52,   52,   52,   88,
       41,   78,   49,   41,   52,   78,  147,   66,  145,   66,
       34,   34,   66,   79,   34,   34,   79,   66,   49,   34,
       52,   74,   80,   34,   34,   76,  144,   92,   74,   74,
      143,  140,   76,   76,   92,  138,  136,  134,  133,  132,
      130,  126,  125,  124,   80,  123,  122,   80,  151,  151,
      151,  151,  151,  151,  151,  151,  152,  152,  152,  152,
      152,  152,  152,  152,  153,  153,  153,  153,  153,  153,

      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      155,  155,  155,  155,  156,  156,  156,  121,  156,  156,
      156,  156,  157,  157,  157,  157,  157,  157,  157,  157,
      158,  120,  158,  158,  158,  158,  159,  119,  159,  159,
      159,  159,  159,  159,  160,  118,  160,  161,  161,  161,
      161,  117,  116,  161,  161,  162,  162,  162,  162,  163,
      113,  163,  163,  163,  163,  163,  163,  164,  112,  164,
      164,  164,  164,  164,  164,  111,  110,  109,  108,  107,
      106,  104,  103,  102,  101,  100,   99,   98,   96,   95,
       94,   93,   91,   90,   89,   87,   86,   83,   72,   71,

       70,   69,   68,   67,   65,   64,   63,   60,   43,   42,
       35,   32,   31,   28,   23,   21,   20,   16,   15,    9,
        8,    7,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150
d649 1
a649 1
 } while(0);
d654 1
a654 1
		yycolumn = 1;		\
d658 96
d760 1
a760 1
#line 631 "glsl/glcpp/glcpp-lex.c"
d763 6
a768 6
#define DONE 1
#define COMMENT 2
#define UNREACHABLE 3
#define SKIP 4
#define DEFINE 5
#define NEWLINE_CATCHUP 6
a999 3
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
d1011 1
a1011 1
#line 95 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1030 1
a1030 1
		return NEWLINE;
d1033 1
a1033 6
	/* The handling of the SKIP vs INITIAL start states requires
	 * some special handling. Typically, a lexer would change
	 * start states with statements like "BEGIN SKIP" within the
	 * lexer rules. We can't get away with that here, since we
	 * need the parser to actually evaluate expressions for
	 * directives like "#if".
d1035 2
a1036 4
	 * So, here, in code that will be executed on every call to
	 * the lexer,and before any rules, we examine the skip_stack
	 * as set by the parser to know whether to change from INITIAL
	 * to SKIP or from SKIP back to INITIAL.
d1038 3
a1040 2
	 * Three cases cause us to switch out of the SKIP state and
	 * back to the INITIAL state:
d1042 1
a1042 5
	 *	1. The top of the skip_stack is of type SKIP_NO_SKIP
	 *	   This means we're still evaluating some #if
	 *	   hierarchy, but we're on a branch of it where
	 *	   content should not be skipped (such as "#if 1" or
	 *	   "#else" or so).
d1044 2
a1045 2
	 *	2. The skip_stack is NULL meaning that we've reached
	 *	   the last #endif.
d1047 14
a1060 5
	 *	3. The lexing_if bit is set. This indicates that we
	 *	   are lexing the expression following an "#if" of
	 *	   "#elif". Even inside an "#if 0" we need to lex this
	 *	   expression so the parser can correctly update the
	 *	   skip_stack state.
d1062 7
a1068 9
	if (YY_START == INITIAL || YY_START == SKIP) {
		if (parser->lexing_if ||
		    parser->skip_stack == NULL ||
		    parser->skip_stack->type == SKIP_NO_SKIP)
		{
			BEGIN INITIAL;
		} else {
			BEGIN SKIP;
		}
d1072 1
a1072 1
#line 949 "glsl/glcpp/glcpp-lex.c"
a1116 1
		yy_current_state += YY_AT_BOL();
d1129 1
a1129 1
				if ( yy_current_state >= 151 )
d1135 1
a1135 1
		while ( yy_current_state != 150 );
d1157 1
a1157 1
#line 158 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1164 1
a1164 1
#line 162 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1169 1
a1169 1
#line 163 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1175 1
a1175 1
#line 164 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1180 1
a1180 1
#line 165 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1186 1
a1186 1
#line 166 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1191 1
a1191 1
#line 167 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1194 3
a1196 2
	if (yyextra->space_tokens)
		return SPACE;
d1201 1
a1201 1
#line 173 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1203 12
a1214 3
	yylval->str = ralloc_strdup (yyextra, yytext);
	yyextra->space_tokens = 0;
	return HASH_VERSION;
a1216 2
/* glcpp doesn't handle #extension, #version, or #pragma directives.
	 * Simply pass them through to the main compiler's lexer/parser. */
d1219 1
a1219 1
#line 181 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1221 3
a1223 6
	if (parser->commented_newlines)
		BEGIN NEWLINE_CATCHUP;
	yylval->str = ralloc_strdup (yyextra, yytext);
	yylineno++;
	yycolumn = 0;
	return OTHER;
d1226 8
d1235 4
d1240 1
a1240 1
#line 190 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1242 1
a1242 1
	return HASH_LINE;
d1245 2
a1246 1

d1249 1
a1249 1
#line 195 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1251 2
a1252 3
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IFDEF;
d1257 1
a1257 1
#line 201 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1259 2
a1260 3
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IFNDEF;
a1264 3
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1266 1
a1266 1
#line 207 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1268 2
a1269 3
	yyextra->lexing_if = 1;
	yyextra->space_tokens = 0;
	return HASH_IF;
d1272 2
a1274 4
/* rule 14 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1276 1
a1276 1
#line 213 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1278 2
a1279 1
	yyextra->lexing_if = 1;
d1281 1
a1281 1
	return HASH_ELIF;
d1286 1
a1286 1
#line 219 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1288 2
d1291 1
a1291 1
	return HASH_ELSE;
d1295 4
d1300 1
a1300 1
#line 224 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1302 2
d1305 1
a1305 1
	return HASH_ENDIF;
a1307 1

d1309 4
d1314 1
a1314 1
#line 230 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1316 4
a1319 2
	if (parser->commented_newlines)
		BEGIN NEWLINE_CATCHUP;
d1324 1
a1324 1
#line 235 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1326 3
a1328 4
	char *p;
	for (p = yytext; !isalpha(p[0]); p++); /* skip "  #   " */
	p += 5; /* skip "error" */
	glcpp_error(yylloc, yyextra, "#error%s", p);
d1333 1
a1333 1
#line 242 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1335 1
d1337 1
a1337 2
	yy_push_state(DEFINE, yyscanner);
	return HASH_DEFINE;
a1340 3
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
d1342 1
a1342 1
#line 248 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1344 2
a1345 3
	yy_pop_state(yyscanner);
	yylval->str = ralloc_strdup (yyextra, yytext);
	return FUNC_IDENTIFIER;
d1348 18
d1368 1
a1368 1
#line 254 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1370 5
a1374 3
	yy_pop_state(yyscanner);
	yylval->str = ralloc_strdup (yyextra, yytext);
	return OBJ_IDENTIFIER;
d1379 1
a1379 1
#line 260 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1381 1
d1383 1
a1383 1
	return HASH_UNDEF;
d1388 1
a1388 1
#line 265 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1390 3
a1392 2
	yyextra->space_tokens = 0;
	return HASH;
d1395 1
d1398 1
a1398 1
#line 270 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1400 2
a1401 2
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
d1404 1
d1406 3
d1410 1
a1410 1
#line 275 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1412 2
a1413 2
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
d1416 1
d1419 1
a1419 1
#line 280 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1421 2
a1422 2
	yylval->str = ralloc_strdup (yyextra, yytext);
	return INTEGER_STRING;
d1425 1
d1428 1
a1428 1
#line 285 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1430 1
a1430 1
	return LEFT_SHIFT;
d1433 1
d1435 1
d1437 1
a1437 1
#line 289 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1439 3
a1441 1
	return RIGHT_SHIFT;
d1444 2
d1448 1
a1448 1
#line 293 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1450 3
a1452 1
	return LESS_OR_EQUAL;
d1457 1
a1457 1
#line 297 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1459 1
a1459 1
	return GREATER_OR_EQUAL;
d1464 1
a1464 1
#line 301 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1466 1
a1466 1
	return EQUAL;
d1471 1
a1471 1
#line 305 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1473 1
a1473 1
	return NOT_EQUAL;
d1478 1
a1478 1
#line 309 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1480 1
a1480 1
	return AND;
d1485 1
a1485 1
#line 313 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1487 1
a1487 1
	return OR;
d1492 1
a1492 1
#line 317 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1494 1
a1494 3
	if (parser->is_gles)
		glcpp_error(yylloc, yyextra, "Token pasting (##) is illegal in GLES");
	return PASTE;
d1499 1
a1499 1
#line 323 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1501 1
a1501 1
	return DEFINED;
d1506 1
a1506 1
#line 327 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1508 1
a1508 2
	yylval->str = ralloc_strdup (yyextra, yytext);
	return IDENTIFIER;
d1513 1
a1513 1
#line 332 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1515 1
a1515 1
	return yytext[0];
d1520 1
a1520 1
#line 336 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1522 1
a1522 2
	yylval->str = ralloc_strdup (yyextra, yytext);
	return OTHER;
d1527 68
a1594 1
#line 341 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1597 1
a1597 1
		return SPACE;
d1601 4
a1604 2
case 41:
/* rule 41 can match eol */
d1606 1
a1606 1
#line 347 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1610 2
d1613 2
a1614 1
	yyextra->lexing_if = 0;
d1617 1
a1617 1
	return NEWLINE;
a1619 1
/* Handle missing newline at EOF. */
d1621 4
a1624 1
#line 358 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1626 2
d1629 3
a1631 2
	yyextra->lexing_if = 0;
	return NEWLINE;
d1634 12
a1645 2
/* We don't actually use the UNREACHABLE start condition. We
	only have this action here so that we can pretend to call some
d1648 4
a1651 6
case 42:
YY_RULE_SETUP
#line 368 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{
	unput('.');
	yy_top_state(yyextra);
d1654 1
a1654 1
case 43:
d1656 2
a1657 2
#line 373 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
ECHO;
d1659 1
a1659 1
#line 1400 "glsl/glcpp/glcpp-lex.c"
d1661 1
a1661 1
case YY_STATE_EOF(COMMENT):
a1662 3
case YY_STATE_EOF(SKIP):
case YY_STATE_EOF(DEFINE):
case YY_STATE_EOF(NEWLINE_CATCHUP):
a1943 1
	yy_current_state += YY_AT_BOL();
d1956 1
a1956 1
			if ( yy_current_state >= 151 )
d1985 1
a1985 1
		if ( yy_current_state >= 151 )
d1989 1
a1989 1
	yy_is_jam = (yy_current_state == 150);
a2102 2
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

d2877 1
a2877 1
#line 373 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
@


1.2
log
@regen for Mesa 9.2.1
@
text
@d361 1
a361 1
static yyconst flex_int16_t yy_accept[150] =
d364 15
a378 15
        0,    0,   44,   39,   40,   41,   43,   38,   43,   38,
       38,   38,   25,   24,   38,   38,   38,   37,   37,   38,
       40,   23,    3,    4,    5,   42,   17,   17,   17,   21,
       39,   40,   32,   35,   33,    2,    1,   25,   25,    0,
       24,   24,   27,   29,   31,   30,   28,   37,   37,   34,
       40,   23,   23,    0,    0,    0,    0,    0,    0,    0,
        3,    4,    5,    6,    5,    7,    0,    0,    0,    0,
       20,   21,    1,   26,   37,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,   37,    0,    0,    0,

        0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
       37,    0,    0,   15,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   37,    0,   14,   16,   18,    0,   11,
        0,   10,    0,   22,    0,   36,    0,   18,    0,   12,
        0,    0,   19,    0,    9,    0,    0,    8,    0
d421 1
a421 1
static yyconst flex_int16_t yy_base[164] =
d423 18
a440 18
        0,   38,    0,    0,   38,   39,  321,  320,  319,   44,
       50,    0,  321,  319,  317,  325,  325,  302,  311,  325,
      308,   80,   80,   83,   83,  299,   88,    0,  290,  274,
      100,  118,  309,  325,  104,  325,  325,  106,  107,  302,
      309,  307,  325,  325,  325,  325,    0,  113,  325,    0,
      115,  325,  325,  325,  325,  325,  325,    0,  283,  325,
      111,  301,  300,  281,  110,  279,  276,  269,  271,  276,
      296,  325,  149,  325,  153,  325,  130,  120,  151,   15,
      325,  289,    0,   74,  270,  271,   96,  272,  261,  258,
      135,  262,  269,  267,  256,  325,  258,  260,  261,  261,

      257,  252,  258,  325,  257,  257,  255,  252,  253,  242,
      245,  231,    0,  325,  228,  219,  216,  213,  208,  216,
      148,  151,  147,  150,  148,  325,  325,    0,  137,  325,
      145,  167,  146,  325,  136,    0,  164,    0,  135,  325,
        0,  131,  155,  108,    0,  135,   91,  109,  325,  178,
      186,  194,  202,  206,  214,  222,  228,  236,  240,  247,
      255,  259,  267
d443 1
a443 1
static yyconst flex_int16_t yy_def[164] =
d445 18
a462 18
      149,    1,  150,  150,  151,  151,  152,  152,  153,  153,
      149,   11,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  154,  154,  149,
      149,  149,  155,  149,  156,  149,  149,  149,  149,  157,
      149,  149,  149,  149,  149,  149,  158,  149,  149,  159,
      149,  149,  149,  149,  149,  149,  149,  154,  154,  149,
      149,   32,   32,  149,  149,  149,  149,  149,  149,  149,
      155,  149,  156,  149,  156,  149,  149,  149,  149,  149,
      149,  157,  158,  159,  154,  149,  149,  149,  149,  149,
      160,  149,  149,  149,  149,  149,  154,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      154,  149,  161,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  154,  149,  149,  149,  162,  149,  149,
      149,  149,  149,  149,  149,  154,  149,  162,  149,  149,
      163,  149,  149,  149,  163,  149,  149,  149,    0,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149
d465 1
a465 1
static yyconst flex_int16_t yy_nxt[365] =
d467 40
a506 40
       14,   15,   16,   17,   18,   19,   20,   21,   20,   20,
       22,   23,   24,   24,   25,   26,   27,   28,   28,   28,
       28,   28,   29,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   30,   31,
       34,   34,   87,   32,   88,   38,   16,   35,   35,   39,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   17,   46,
       47,   48,   48,   96,   51,   51,   51,   53,   54,   49,

       50,   61,   52,   56,   57,   62,   74,   77,   79,   96,
      148,   78,   61,   75,   76,   49,   62,   50,   52,   63,
      141,   79,   99,   44,   48,   48,   51,   51,   51,  100,
       80,   77,   49,   66,   52,   78,  148,   87,  147,   88,
       64,   65,   89,   80,   66,   67,   66,   90,   49,   68,
       52,   74,   79,   69,   70,   74,  143,  105,  149,  149,
      146,  144,   75,   76,  106,  143,  142,  141,  132,  140,
      139,  137,  136,  135,   80,  134,  133,   66,   17,   17,
       17,   17,   17,   17,   17,   17,   33,   33,   33,   33,
       33,   33,   33,   33,   36,   36,   36,   36,   36,   36,

       36,   36,   37,   37,   37,   37,   37,   37,   37,   37,
       58,   58,   58,   58,   71,   71,   71,  132,   71,   71,
       71,   71,   73,   73,   73,   73,   73,   73,   73,   73,
       82,  131,   82,   82,   82,   82,   83,  130,   83,   83,
       83,   83,   83,   83,   84,  129,   84,  104,  104,  104,
      104,  128,  127,  104,  104,  126,  126,  126,  126,  138,
      125,  138,  138,  138,  138,  138,  138,  145,  124,  145,
      145,  145,  145,  145,  145,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  103,  102,  101,   98,   97,   81,   72,   95,

       94,   93,   92,   91,   86,  149,  149,   85,   42,   41,
       81,   72,   60,   59,   55,   45,   44,   43,   42,   41,
      149,   16,   17,   17,   13,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149
d509 1
a509 1
static yyconst flex_int16_t yy_chk[365] =
d515 1
a515 1
        5,    6,   80,    2,   80,   10,   10,    5,    6,   10,
d519 2
a520 2
       11,   11,   11,   11,   11,   11,   11,   11,   11,   22,
       22,   23,   23,   84,   24,   24,   24,   25,   25,   23,
d522 29
a550 29
       23,   31,   24,   27,   27,   31,   35,   38,   39,   84,
      148,   38,   61,   35,   35,   23,   61,   23,   24,   32,
      147,   78,   87,   32,   48,   48,   51,   51,   51,   87,
       39,   77,   48,   39,   51,   77,  146,   65,  144,   65,
       32,   32,   65,   78,   32,   32,   78,   65,   48,   32,
       51,   73,   79,   32,   32,   75,  143,   91,   73,   73,
      142,  139,   75,   75,   91,  137,  135,  133,  132,  131,
      129,  125,  124,  123,   79,  122,  121,   79,  150,  150,
      150,  150,  150,  150,  150,  150,  151,  151,  151,  151,
      151,  151,  151,  151,  152,  152,  152,  152,  152,  152,

      152,  152,  153,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,  154,  155,  155,  155,  120,  155,  155,
      155,  155,  156,  156,  156,  156,  156,  156,  156,  156,
      157,  119,  157,  157,  157,  157,  158,  118,  158,  158,
      158,  158,  158,  158,  159,  117,  159,  160,  160,  160,
      160,  116,  115,  160,  160,  161,  161,  161,  161,  162,
      112,  162,  162,  162,  162,  162,  162,  163,  111,  163,
      163,  163,  163,  163,  163,  110,  109,  108,  107,  106,
      105,  103,  102,  101,  100,   99,   98,   97,   95,   94,
       93,   92,   90,   89,   88,   86,   85,   82,   71,   70,

       69,   68,   67,   66,   64,   63,   62,   59,   42,   41,
       40,   33,   30,   29,   26,   21,   19,   18,   15,   14,
       13,    9,    8,    7,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149
d610 1
a610 1
		yylloc->first_line = yylineno;				\
d612 1
d630 1
a630 1
#line 630 "glsl/glcpp/glcpp-lex.c"
d638 1
d884 21
a904 1
#line 94 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d906 29
a934 2
	/* Implicitly switch between SKIP and INITIAL (non-skipping);
	 * don't switch if some other state was explicitly set.
d936 6
a941 4
	glcpp_parser_t *parser = yyextra;
	if (YY_START == 0 || YY_START == SKIP) {
		if (parser->lexing_if || parser->skip_stack == NULL || parser->skip_stack->type == SKIP_NO_SKIP) {
			BEGIN 0;
d948 1
a948 1
#line 898 "glsl/glcpp/glcpp-lex.c"
d1006 1
a1006 1
				if ( yy_current_state >= 150 )
d1012 1
a1012 1
		while ( yy_current_state != 149 );
d1034 1
a1034 1
#line 108 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1041 1
a1041 1
#line 112 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1046 1
a1046 1
#line 113 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1052 2
a1053 2
#line 114 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{ yylineno++; yycolumn = 0; return NEWLINE; }
d1057 1
a1057 1
#line 115 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1063 2
a1064 2
#line 116 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
{ yylineno++; yycolumn = 0; return NEWLINE; }
d1068 1
a1068 1
#line 117 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1077 1
a1077 1
#line 123 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1088 1
a1088 1
#line 131 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1090 2
d1100 1
a1100 1
#line 138 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1108 1
a1108 1
#line 143 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1117 1
a1117 1
#line 149 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1130 1
a1130 1
#line 155 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1143 1
a1143 1
#line 161 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1152 1
a1152 1
#line 167 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1160 1
a1160 1
#line 172 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1169 5
a1173 2
#line 178 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
;
d1177 1
a1177 1
#line 180 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1187 1
a1187 1
#line 187 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1199 1
a1199 1
#line 193 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1208 1
a1208 1
#line 199 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1217 1
a1217 1
#line 205 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1225 1
a1225 1
#line 210 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1233 1
a1233 1
#line 215 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1241 1
a1241 1
#line 220 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1249 1
a1249 1
#line 225 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1257 1
a1257 1
#line 230 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1264 1
a1264 1
#line 234 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1271 1
a1271 1
#line 238 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1278 1
a1278 1
#line 242 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1285 1
a1285 1
#line 246 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1292 1
a1292 1
#line 250 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1299 1
a1299 1
#line 254 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1306 1
a1306 1
#line 258 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1313 1
a1313 1
#line 262 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1322 1
a1322 1
#line 268 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1329 1
a1329 1
#line 272 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1337 1
a1337 1
#line 277 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1344 1
a1344 1
#line 281 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1352 1
a1352 1
#line 286 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1362 1
a1362 1
#line 292 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1364 3
d1375 1
a1375 1
#line 300 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1388 1
a1388 1
#line 310 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1396 1
a1396 1
#line 315 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1399 1
a1399 1
#line 1341 "glsl/glcpp/glcpp-lex.c"
d1405 1
d1700 1
a1700 1
			if ( yy_current_state >= 150 )
d1729 1
a1729 1
		if ( yy_current_state >= 150 )
d1733 1
a1733 1
	yy_is_jam = (yy_current_state == 149);
d2623 1
a2623 1
#line 315 "/usr/xenocara/lib/libGL/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
@


1.1
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@d560 2
a561 2
#line 1 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
#line 2 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d882 1
a882 1
#line 94 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d983 1
a983 1
#line 108 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d990 1
a990 1
#line 112 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d995 1
a995 1
#line 113 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1001 1
a1001 1
#line 114 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1006 1
a1006 1
#line 115 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1012 1
a1012 1
#line 116 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1017 1
a1017 1
#line 117 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1026 1
a1026 1
#line 123 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1037 1
a1037 1
#line 131 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1047 1
a1047 1
#line 138 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1055 1
a1055 1
#line 143 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1064 1
a1064 1
#line 149 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1077 1
a1077 1
#line 155 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1090 1
a1090 1
#line 161 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1099 1
a1099 1
#line 167 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1107 1
a1107 1
#line 172 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1116 1
a1116 1
#line 178 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1121 1
a1121 1
#line 180 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1131 1
a1131 1
#line 187 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1143 1
a1143 1
#line 193 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1152 1
a1152 1
#line 199 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1161 1
a1161 1
#line 205 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1169 1
a1169 1
#line 210 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1177 1
a1177 1
#line 215 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1185 1
a1185 1
#line 220 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1193 1
a1193 1
#line 225 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1201 1
a1201 1
#line 230 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1208 1
a1208 1
#line 234 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1215 1
a1215 1
#line 238 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1222 1
a1222 1
#line 242 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1229 1
a1229 1
#line 246 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1236 1
a1236 1
#line 250 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1243 1
a1243 1
#line 254 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1250 1
a1250 1
#line 258 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1257 1
a1257 1
#line 262 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1266 1
a1266 1
#line 268 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1273 1
a1273 1
#line 272 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1281 1
a1281 1
#line 277 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1288 1
a1288 1
#line 281 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1296 1
a1296 1
#line 286 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1306 1
a1306 1
#line 292 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1316 1
a1316 1
#line 300 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1329 1
a1329 1
#line 310 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d1337 1
a1337 1
#line 315 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
d2563 1
a2563 1
#line 315 "/usr/xenocara/lib/libGL-new/generated/../../../dist/Mesa/src/glsl/glcpp/glcpp-lex.l"
@

