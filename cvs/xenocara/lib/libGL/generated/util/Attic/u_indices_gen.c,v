head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.06.04;	author jsg;	state dead;
branches;
next	1.2;
commitid	jLBLHykYtPbp9N8b;

1.2
date	2014.07.09.21.32.41;	author jsg;	state Exp;
branches;
next	1.1;
commitid	uM5VFgRcH6JLiuF9;

1.1
date	2013.09.05.15.12.07;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove now unused local build system for Mesa
@
text
@/* File automatically generated by indices.py */

/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * @@file
 * Functions to translate and generate index lists
 */

#include "indices/u_indices.h"
#include "indices/u_indices_priv.h"
#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"


static unsigned out_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return OUT_UINT;
   case 2: return OUT_USHORT;
   default: assert(0); return OUT_USHORT;
   }
}

static unsigned in_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return IN_UINT;
   case 2: return IN_USHORT;
   case 1: return IN_UBYTE;
   default: assert(0); return IN_UBYTE;
   }
}


static u_translate_func translate[IN_COUNT][OUT_COUNT][PV_COUNT][PV_COUNT][PRIM_COUNT];
static u_generate_func  generate[OUT_COUNT][PV_COUNT][PV_COUNT][PRIM_COUNT];



static void generate_points_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
   }
}
static void generate_linestrip_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
}
static void generate_lineloop_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(0);
}
static void generate_tris_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
   }
}
static void generate_tristrip_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1+(i&1));
      (out+j)[2] = (ushort)(i+2-(i&1));
   }
}
static void generate_trifan_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_quads_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+1);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+1);
      (out+j+3)[1] = (ushort)(i+2);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_quadstrip_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+2);
      (out+j+0)[1] = (ushort)(i+0);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+0);
      (out+j+3)[1] = (ushort)(i+1);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_polygon_ushort_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_points_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i);
   }
}
static void generate_linestrip_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
}
static void generate_lineloop_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i);
}
static void generate_tris_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i);
   }
}
static void generate_tristrip_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1+(i&1));
      (out+j)[1] = (ushort)(i+2-(i&1));
      (out+j)[2] = (ushort)(i);
   }
}
static void generate_trifan_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(0);
   }
}
static void generate_quads_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+1);
      (out+j+0)[1] = (ushort)(i+3);
      (out+j+0)[2] = (ushort)(i+0);
      (out+j+3)[0] = (ushort)(i+2);
      (out+j+3)[1] = (ushort)(i+3);
      (out+j+3)[2] = (ushort)(i+1);
   }
}
static void generate_quadstrip_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+3);
      (out+j+0)[2] = (ushort)(i+2);
      (out+j+3)[0] = (ushort)(i+1);
      (out+j+3)[1] = (ushort)(i+3);
      (out+j+3)[2] = (ushort)(i+0);
   }
}
static void generate_polygon_ushort_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(0);
   }
}
static void generate_points_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i);
   }
}
static void generate_linestrip_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
}
static void generate_lineloop_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i);
}
static void generate_tris_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i+2);
      (out+i)[1] = (ushort)(i);
      (out+i)[2] = (ushort)(i+1);
   }
}
static void generate_tristrip_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i+(i&1));
      (out+j)[2] = (ushort)(i+1-(i&1));
   }
}
static void generate_trifan_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(0);
      (out+j)[2] = (ushort)(i+1);
   }
}
static void generate_quads_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+3);
      (out+j+0)[1] = (ushort)(i+0);
      (out+j+0)[2] = (ushort)(i+1);
      (out+j+3)[0] = (ushort)(i+3);
      (out+j+3)[1] = (ushort)(i+1);
      (out+j+3)[2] = (ushort)(i+2);
   }
}
static void generate_quadstrip_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+3);
      (out+j+0)[1] = (ushort)(i+2);
      (out+j+0)[2] = (ushort)(i+0);
      (out+j+3)[0] = (ushort)(i+3);
      (out+j+3)[1] = (ushort)(i+0);
      (out+j+3)[2] = (ushort)(i+1);
   }
}
static void generate_polygon_ushort_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_points_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
   }
}
static void generate_linestrip_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
}
static void generate_lineloop_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(0);
}
static void generate_tris_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
   }
}
static void generate_tristrip_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+(i&1));
      (out+j)[1] = (ushort)(i+1-(i&1));
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_trifan_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_quads_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+1);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+1);
      (out+j+3)[1] = (ushort)(i+2);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_quadstrip_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+2);
      (out+j+0)[1] = (ushort)(i+0);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+0);
      (out+j+3)[1] = (ushort)(i+1);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_polygon_ushort_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(0);
   }
}
static void generate_points_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
}
static void generate_linestrip_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
}
static void generate_lineloop_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(0);
}
static void generate_tris_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
   }
}
static void generate_tristrip_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1+(i&1));
      (out+j)[2] = (uint)(i+2-(i&1));
   }
}
static void generate_trifan_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_quads_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+1);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+1);
      (out+j+3)[1] = (uint)(i+2);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_quadstrip_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+2);
      (out+j+0)[1] = (uint)(i+0);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+0);
      (out+j+3)[1] = (uint)(i+1);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_polygon_uint_first2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_points_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i);
   }
}
static void generate_linestrip_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
}
static void generate_lineloop_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i);
}
static void generate_tris_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i);
   }
}
static void generate_tristrip_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1+(i&1));
      (out+j)[1] = (uint)(i+2-(i&1));
      (out+j)[2] = (uint)(i);
   }
}
static void generate_trifan_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(0);
   }
}
static void generate_quads_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+1);
      (out+j+0)[1] = (uint)(i+3);
      (out+j+0)[2] = (uint)(i+0);
      (out+j+3)[0] = (uint)(i+2);
      (out+j+3)[1] = (uint)(i+3);
      (out+j+3)[2] = (uint)(i+1);
   }
}
static void generate_quadstrip_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+3);
      (out+j+0)[2] = (uint)(i+2);
      (out+j+3)[0] = (uint)(i+1);
      (out+j+3)[1] = (uint)(i+3);
      (out+j+3)[2] = (uint)(i+0);
   }
}
static void generate_polygon_uint_first2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(0);
   }
}
static void generate_points_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i);
   }
}
static void generate_linestrip_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
}
static void generate_lineloop_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i);
}
static void generate_tris_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)(i+2);
      (out+i)[1] = (uint)(i);
      (out+i)[2] = (uint)(i+1);
   }
}
static void generate_tristrip_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i+(i&1));
      (out+j)[2] = (uint)(i+1-(i&1));
   }
}
static void generate_trifan_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(0);
      (out+j)[2] = (uint)(i+1);
   }
}
static void generate_quads_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+3);
      (out+j+0)[1] = (uint)(i+0);
      (out+j+0)[2] = (uint)(i+1);
      (out+j+3)[0] = (uint)(i+3);
      (out+j+3)[1] = (uint)(i+1);
      (out+j+3)[2] = (uint)(i+2);
   }
}
static void generate_quadstrip_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+3);
      (out+j+0)[1] = (uint)(i+2);
      (out+j+0)[2] = (uint)(i+0);
      (out+j+3)[0] = (uint)(i+3);
      (out+j+3)[1] = (uint)(i+0);
      (out+j+3)[2] = (uint)(i+1);
   }
}
static void generate_polygon_uint_last2first(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_points_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
}
static void generate_linestrip_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
}
static void generate_lineloop_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(0);
}
static void generate_tris_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
   }
}
static void generate_tristrip_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+(i&1));
      (out+j)[1] = (uint)(i+1-(i&1));
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_trifan_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_quads_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+1);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+1);
      (out+j+3)[1] = (uint)(i+2);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_quadstrip_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+2);
      (out+j+0)[1] = (uint)(i+0);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+0);
      (out+j+3)[1] = (uint)(i+1);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_polygon_uint_last2last(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(0);
   }
}
static void translate_points_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ubyte2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_quads_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_quadstrip_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ubyte2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[0];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ubyte2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ubyte2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ubyte2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_quads_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_quadstrip_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ubyte2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_points_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[0];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ubyte2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ubyte2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_points_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ushort2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_quads_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_quadstrip_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ushort2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[0];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ushort2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ushort2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ushort2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_quads_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_quadstrip_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ushort2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_points_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[0];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ushort2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ushort2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_points_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_uint2ushort_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_quads_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_quadstrip_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_uint2ushort_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[0];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_uint2ushort_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_points_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[0];
}
static void translate_tris_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_uint2ushort_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[0];
   }
}
static void translate_points_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_uint2uint_first2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_quads_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_quadstrip_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_uint2uint_first2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
static void translate_points_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[0];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_uint2uint_last2first(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_points_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[0];
}
static void translate_tris_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_uint2uint_last2last(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[0];
   }
}
void u_index_init( void )
{
  static int firsttime = 1;
  if (!firsttime) return;
  firsttime = 0;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2last;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2last;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2last;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2first;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2first;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2first;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2first;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2last;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2first;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2first;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2last;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2first;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2first;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2last;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2first;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2first;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2last;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2first;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2first;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2last;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2last;
}
#include "indices/u_indices.c"
@


1.2
log
@Mesa 10.2.3
@
text
@@


1.1
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@d68 1
d75 1
a75 1
  for (i = 0; i < nr; i++) { 
d80 1
d87 1
a87 1
  for (i = 0; i < nr; i+=2) { 
d93 1
d100 1
a100 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d106 1
d113 1
a113 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d121 1
d128 1
a128 1
  for (i = 0; i < nr; i+=3) { 
d135 1
d142 1
a142 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d149 1
d156 1
a156 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d163 1
d170 1
a170 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d180 1
d187 1
a187 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d197 1
d204 1
a204 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d211 1
d218 1
a218 1
  for (i = 0; i < nr; i++) { 
d223 1
d230 1
a230 1
  for (i = 0; i < nr; i+=2) { 
d236 1
d243 1
a243 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d249 1
d256 1
a256 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d264 1
d271 1
a271 1
  for (i = 0; i < nr; i+=3) { 
d278 1
d285 1
a285 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d292 1
d299 1
a299 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d306 1
d313 1
a313 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d323 1
d330 1
a330 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d340 1
d347 1
a347 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d354 1
d361 1
a361 1
  for (i = 0; i < nr; i++) { 
d366 1
d373 1
a373 1
  for (i = 0; i < nr; i+=2) { 
d379 1
d386 1
a386 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d392 1
d399 1
a399 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d407 1
d414 1
a414 1
  for (i = 0; i < nr; i+=3) { 
d421 1
d428 1
a428 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d435 1
d442 1
a442 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d449 1
d456 1
a456 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d466 1
d473 1
a473 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d483 1
d490 1
a490 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d497 1
d504 1
a504 1
  for (i = 0; i < nr; i++) { 
d509 1
d516 1
a516 1
  for (i = 0; i < nr; i+=2) { 
d522 1
d529 1
a529 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d535 1
d542 1
a542 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d550 1
d557 1
a557 1
  for (i = 0; i < nr; i+=3) { 
d564 1
d571 1
a571 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d578 1
d585 1
a585 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d592 1
d599 1
a599 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d609 1
d616 1
a616 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d626 1
d633 1
a633 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d640 1
d647 1
a647 1
  for (i = 0; i < nr; i++) { 
d652 1
d659 1
a659 1
  for (i = 0; i < nr; i+=2) { 
d665 1
d672 1
a672 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d678 1
d685 1
a685 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d693 1
d700 1
a700 1
  for (i = 0; i < nr; i+=3) { 
d707 1
d714 1
a714 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d721 1
d728 1
a728 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d735 1
d742 1
a742 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d752 1
d759 1
a759 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d769 1
d776 1
a776 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d783 1
d790 1
a790 1
  for (i = 0; i < nr; i++) { 
d795 1
d802 1
a802 1
  for (i = 0; i < nr; i+=2) { 
d808 1
d815 1
a815 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d821 1
d828 1
a828 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d836 1
d843 1
a843 1
  for (i = 0; i < nr; i+=3) { 
d850 1
d857 1
a857 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d864 1
d871 1
a871 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d878 1
d885 1
a885 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d895 1
d902 1
a902 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d912 1
d919 1
a919 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d926 1
d933 1
a933 1
  for (i = 0; i < nr; i++) { 
d938 1
d945 1
a945 1
  for (i = 0; i < nr; i+=2) { 
d951 1
d958 1
a958 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d964 1
d971 1
a971 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d979 1
d986 1
a986 1
  for (i = 0; i < nr; i+=3) { 
d993 1
d1000 1
a1000 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1007 1
d1014 1
a1014 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1021 1
d1028 1
a1028 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1038 1
d1045 1
a1045 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1055 1
d1062 1
a1062 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1069 1
d1076 1
a1076 1
  for (i = 0; i < nr; i++) { 
d1081 1
d1088 1
a1088 1
  for (i = 0; i < nr; i+=2) { 
d1094 1
d1101 1
a1101 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1107 1
d1114 1
a1114 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1122 1
d1129 1
a1129 1
  for (i = 0; i < nr; i+=3) { 
d1136 1
d1143 1
a1143 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1150 1
d1157 1
a1157 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1164 1
d1171 1
a1171 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1181 1
d1188 1
a1188 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1198 1
d1205 1
a1205 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1213 1
d1221 1
a1221 1
  for (i = 0; i < nr; i++) { 
d1227 1
d1235 1
a1235 1
  for (i = 0; i < nr; i+=2) { 
d1242 1
d1250 1
a1250 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1257 1
d1265 1
a1265 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1274 1
d1282 1
a1282 1
  for (i = 0; i < nr; i+=3) { 
d1290 1
d1298 1
a1298 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1306 1
d1314 1
a1314 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1322 1
d1330 1
a1330 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1341 1
d1349 1
a1349 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1360 1
d1368 1
a1368 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1376 1
d1384 1
a1384 1
  for (i = 0; i < nr; i++) { 
d1390 1
d1398 1
a1398 1
  for (i = 0; i < nr; i+=2) { 
d1405 1
d1413 1
a1413 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1420 1
d1428 1
a1428 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1437 1
d1445 1
a1445 1
  for (i = 0; i < nr; i+=3) { 
d1453 1
d1461 1
a1461 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1469 1
d1477 1
a1477 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1485 1
d1493 1
a1493 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1504 1
d1512 1
a1512 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1523 1
d1531 1
a1531 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1539 1
d1547 1
a1547 1
  for (i = 0; i < nr; i++) { 
d1553 1
d1561 1
a1561 1
  for (i = 0; i < nr; i+=2) { 
d1568 1
d1576 1
a1576 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1583 1
d1591 1
a1591 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1600 1
d1608 1
a1608 1
  for (i = 0; i < nr; i+=3) { 
d1616 1
d1624 1
a1624 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1632 1
d1640 1
a1640 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1648 1
d1656 1
a1656 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1667 1
d1675 1
a1675 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1686 1
d1694 1
a1694 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1702 1
d1710 1
a1710 1
  for (i = 0; i < nr; i++) { 
d1716 1
d1724 1
a1724 1
  for (i = 0; i < nr; i+=2) { 
d1731 1
d1739 1
a1739 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1746 1
d1754 1
a1754 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1763 1
d1771 1
a1771 1
  for (i = 0; i < nr; i+=3) { 
d1779 1
d1787 1
a1787 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1795 1
d1803 1
a1803 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1811 1
d1819 1
a1819 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1830 1
d1838 1
a1838 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d1849 1
d1857 1
a1857 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1865 1
d1873 1
a1873 1
  for (i = 0; i < nr; i++) { 
d1879 1
d1887 1
a1887 1
  for (i = 0; i < nr; i+=2) { 
d1894 1
d1902 1
a1902 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d1909 1
d1917 1
a1917 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d1926 1
d1934 1
a1934 1
  for (i = 0; i < nr; i+=3) { 
d1942 1
d1950 1
a1950 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1958 1
d1966 1
a1966 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d1974 1
d1982 1
a1982 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d1993 1
d2001 1
a2001 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2012 1
d2020 1
a2020 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2028 1
d2036 1
a2036 1
  for (i = 0; i < nr; i++) { 
d2042 1
d2050 1
a2050 1
  for (i = 0; i < nr; i+=2) { 
d2057 1
d2065 1
a2065 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2072 1
d2080 1
a2080 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2089 1
d2097 1
a2097 1
  for (i = 0; i < nr; i+=3) { 
d2105 1
d2113 1
a2113 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2121 1
d2129 1
a2129 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2137 1
d2145 1
a2145 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2156 1
d2164 1
a2164 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2175 1
d2183 1
a2183 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2191 1
d2199 1
a2199 1
  for (i = 0; i < nr; i++) { 
d2205 1
d2213 1
a2213 1
  for (i = 0; i < nr; i+=2) { 
d2220 1
d2228 1
a2228 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2235 1
d2243 1
a2243 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2252 1
d2260 1
a2260 1
  for (i = 0; i < nr; i+=3) { 
d2268 1
d2276 1
a2276 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2284 1
d2292 1
a2292 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2300 1
d2308 1
a2308 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2319 1
d2327 1
a2327 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2338 1
d2346 1
a2346 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2354 1
d2362 1
a2362 1
  for (i = 0; i < nr; i++) { 
d2368 1
d2376 1
a2376 1
  for (i = 0; i < nr; i+=2) { 
d2383 1
d2391 1
a2391 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2398 1
d2406 1
a2406 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2415 1
d2423 1
a2423 1
  for (i = 0; i < nr; i+=3) { 
d2431 1
d2439 1
a2439 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2447 1
d2455 1
a2455 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2463 1
d2471 1
a2471 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2482 1
d2490 1
a2490 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2501 1
d2509 1
a2509 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2517 1
d2525 1
a2525 1
  for (i = 0; i < nr; i++) { 
d2531 1
d2539 1
a2539 1
  for (i = 0; i < nr; i+=2) { 
d2546 1
d2554 1
a2554 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2561 1
d2569 1
a2569 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2578 1
d2586 1
a2586 1
  for (i = 0; i < nr; i+=3) { 
d2594 1
d2602 1
a2602 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2610 1
d2618 1
a2618 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2626 1
d2634 1
a2634 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2645 1
d2653 1
a2653 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2664 1
d2672 1
a2672 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2680 1
d2688 1
a2688 1
  for (i = 0; i < nr; i++) { 
d2694 1
d2702 1
a2702 1
  for (i = 0; i < nr; i+=2) { 
d2709 1
d2717 1
a2717 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2724 1
d2732 1
a2732 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2741 1
d2749 1
a2749 1
  for (i = 0; i < nr; i+=3) { 
d2757 1
d2765 1
a2765 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2773 1
d2781 1
a2781 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2789 1
d2797 1
a2797 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2808 1
d2816 1
a2816 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2827 1
d2835 1
a2835 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2843 1
d2851 1
a2851 1
  for (i = 0; i < nr; i++) { 
d2857 1
d2865 1
a2865 1
  for (i = 0; i < nr; i+=2) { 
d2872 1
d2880 1
a2880 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d2887 1
d2895 1
a2895 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d2904 1
d2912 1
a2912 1
  for (i = 0; i < nr; i+=3) { 
d2920 1
d2928 1
a2928 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2936 1
d2944 1
a2944 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d2952 1
d2960 1
a2960 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d2971 1
d2979 1
a2979 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d2990 1
d2998 1
a2998 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3006 1
d3014 1
a3014 1
  for (i = 0; i < nr; i++) { 
d3020 1
d3028 1
a3028 1
  for (i = 0; i < nr; i+=2) { 
d3035 1
d3043 1
a3043 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3050 1
d3058 1
a3058 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3067 1
d3075 1
a3075 1
  for (i = 0; i < nr; i+=3) { 
d3083 1
d3091 1
a3091 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3099 1
d3107 1
a3107 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3115 1
d3123 1
a3123 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3134 1
d3142 1
a3142 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3153 1
d3161 1
a3161 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3169 1
d3177 1
a3177 1
  for (i = 0; i < nr; i++) { 
d3183 1
d3191 1
a3191 1
  for (i = 0; i < nr; i+=2) { 
d3198 1
d3206 1
a3206 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3213 1
d3221 1
a3221 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3230 1
d3238 1
a3238 1
  for (i = 0; i < nr; i+=3) { 
d3246 1
d3254 1
a3254 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3262 1
d3270 1
a3270 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3278 1
d3286 1
a3286 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3297 1
d3305 1
a3305 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3316 1
d3324 1
a3324 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3332 1
d3340 1
a3340 1
  for (i = 0; i < nr; i++) { 
d3346 1
d3354 1
a3354 1
  for (i = 0; i < nr; i+=2) { 
d3361 1
d3369 1
a3369 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3376 1
d3384 1
a3384 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3393 1
d3401 1
a3401 1
  for (i = 0; i < nr; i+=3) { 
d3409 1
d3417 1
a3417 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3425 1
d3433 1
a3433 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3441 1
d3449 1
a3449 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3460 1
d3468 1
a3468 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3479 1
d3487 1
a3487 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3495 1
d3503 1
a3503 1
  for (i = 0; i < nr; i++) { 
d3509 1
d3517 1
a3517 1
  for (i = 0; i < nr; i+=2) { 
d3524 1
d3532 1
a3532 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3539 1
d3547 1
a3547 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3556 1
d3564 1
a3564 1
  for (i = 0; i < nr; i+=3) { 
d3572 1
d3580 1
a3580 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3588 1
d3596 1
a3596 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3604 1
d3612 1
a3612 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3623 1
d3631 1
a3631 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3642 1
d3650 1
a3650 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3658 1
d3666 1
a3666 1
  for (i = 0; i < nr; i++) { 
d3672 1
d3680 1
a3680 1
  for (i = 0; i < nr; i+=2) { 
d3687 1
d3695 1
a3695 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3702 1
d3710 1
a3710 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3719 1
d3727 1
a3727 1
  for (i = 0; i < nr; i+=3) { 
d3735 1
d3743 1
a3743 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3751 1
d3759 1
a3759 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3767 1
d3775 1
a3775 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3786 1
d3794 1
a3794 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3805 1
d3813 1
a3813 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3821 1
d3829 1
a3829 1
  for (i = 0; i < nr; i++) { 
d3835 1
d3843 1
a3843 1
  for (i = 0; i < nr; i+=2) { 
d3850 1
d3858 1
a3858 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d3865 1
d3873 1
a3873 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d3882 1
d3890 1
a3890 1
  for (i = 0; i < nr; i+=3) { 
d3898 1
d3906 1
a3906 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3914 1
d3922 1
a3922 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3930 1
d3938 1
a3938 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d3949 1
d3957 1
a3957 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d3968 1
d3976 1
a3976 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d3984 1
d3992 1
a3992 1
  for (i = 0; i < nr; i++) { 
d3998 1
d4006 1
a4006 1
  for (i = 0; i < nr; i+=2) { 
d4013 1
d4021 1
a4021 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4028 1
d4036 1
a4036 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4045 1
d4053 1
a4053 1
  for (i = 0; i < nr; i+=3) { 
d4061 1
d4069 1
a4069 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4077 1
d4085 1
a4085 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4093 1
d4101 1
a4101 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4112 1
d4120 1
a4120 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4131 1
d4139 1
a4139 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4147 1
d4155 1
a4155 1
  for (i = 0; i < nr; i++) { 
d4161 1
d4169 1
a4169 1
  for (i = 0; i < nr; i+=2) { 
d4176 1
d4184 1
a4184 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4191 1
d4199 1
a4199 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4208 1
d4216 1
a4216 1
  for (i = 0; i < nr; i+=3) { 
d4224 1
d4232 1
a4232 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4240 1
d4248 1
a4248 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4256 1
d4264 1
a4264 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4275 1
d4283 1
a4283 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4294 1
d4302 1
a4302 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4310 1
d4318 1
a4318 1
  for (i = 0; i < nr; i++) { 
d4324 1
d4332 1
a4332 1
  for (i = 0; i < nr; i+=2) { 
d4339 1
d4347 1
a4347 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4354 1
d4362 1
a4362 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4371 1
d4379 1
a4379 1
  for (i = 0; i < nr; i+=3) { 
d4387 1
d4395 1
a4395 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4403 1
d4411 1
a4411 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4419 1
d4427 1
a4427 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4438 1
d4446 1
a4446 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4457 1
d4465 1
a4465 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4473 1
d4481 1
a4481 1
  for (i = 0; i < nr; i++) { 
d4487 1
d4495 1
a4495 1
  for (i = 0; i < nr; i+=2) { 
d4502 1
d4510 1
a4510 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4517 1
d4525 1
a4525 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4534 1
d4542 1
a4542 1
  for (i = 0; i < nr; i+=3) { 
d4550 1
d4558 1
a4558 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4566 1
d4574 1
a4574 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4582 1
d4590 1
a4590 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4601 1
d4609 1
a4609 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4620 1
d4628 1
a4628 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4636 1
d4644 1
a4644 1
  for (i = 0; i < nr; i++) { 
d4650 1
d4658 1
a4658 1
  for (i = 0; i < nr; i+=2) { 
d4665 1
d4673 1
a4673 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4680 1
d4688 1
a4688 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4697 1
d4705 1
a4705 1
  for (i = 0; i < nr; i+=3) { 
d4713 1
d4721 1
a4721 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4729 1
d4737 1
a4737 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4745 1
d4753 1
a4753 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4764 1
d4772 1
a4772 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4783 1
d4791 1
a4791 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4799 1
d4807 1
a4807 1
  for (i = 0; i < nr; i++) { 
d4813 1
d4821 1
a4821 1
  for (i = 0; i < nr; i+=2) { 
d4828 1
d4836 1
a4836 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d4843 1
d4851 1
a4851 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d4860 1
d4868 1
a4868 1
  for (i = 0; i < nr; i+=3) { 
d4876 1
d4884 1
a4884 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4892 1
d4900 1
a4900 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4908 1
d4916 1
a4916 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d4927 1
d4935 1
a4935 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d4946 1
d4954 1
a4954 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d4962 1
d4970 1
a4970 1
  for (i = 0; i < nr; i++) { 
d4976 1
d4984 1
a4984 1
  for (i = 0; i < nr; i+=2) { 
d4991 1
d4999 1
a4999 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d5006 1
d5014 1
a5014 1
  for (j = i = 0; j < nr - 2; j+=2, i++) { 
d5023 1
d5031 1
a5031 1
  for (i = 0; i < nr; i+=3) { 
d5039 1
d5047 1
a5047 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d5055 1
d5063 1
a5063 1
  for (j = i = 0; j < nr; j+=3, i++) { 
d5071 1
d5079 1
a5079 1
  for (j = i = 0; j < nr; j+=6, i+=4) { 
d5090 1
d5098 1
a5098 1
  for (j = i = 0; j < nr; j+=6, i+=2) { 
d5109 1
d5117 1
a5117 1
  for (j = i = 0; j < nr; j+=3, i++) { 
@

