head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.23.05.06.04;	author jsg;	state dead;
branches;
next	1.4;
commitid	jLBLHykYtPbp9N8b;

1.4
date	2015.02.20.23.31.05;	author jsg;	state Exp;
branches;
next	1.3;
commitid	96FH88ZMzjHy95WG;

1.3
date	2015.01.25.15.09.14;	author jsg;	state Exp;
branches;
next	1.2;
commitid	M1dxZ5qfRB65OrtK;

1.2
date	2014.07.09.21.32.41;	author jsg;	state Exp;
branches;
next	1.1;
commitid	uM5VFgRcH6JLiuF9;

1.1
date	2013.09.05.15.12.06;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove now unused local build system for Mesa
@
text
@/* This file is autogenerated by u_format_table.py from u_format.csv. Do not edit directly. */

/**************************************************************************
 *
 * Copyright 2010 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "u_format.h"
#include "u_format_s3tc.h"
#include "u_format_rgtc.h"
#include "u_format_latc.h"
#include "u_format_etc.h"


#include "pipe/p_compiler.h"
#include "u_math.h"
#include "u_half.h"
#include "u_format.h"
#include "u_format_other.h"
#include "u_format_srgb.h"
#include "u_format_yuv.h"
#include "u_format_zs.h"

union util_format_none {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_none_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_none_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_none_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_none_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_none_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8a8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
#else
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_b8g8r8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) << 24;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_b8g8r8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[2]) << 24;
         value |= ((src[1]) & 0xff) << 16;
         value |= ((src[0]) & 0xff) << 8;
         value |= (src[3]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[2]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[0]) & 0xff) << 16;
         value |= (src[3]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8x8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
#else
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_b8g8r8x8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) << 24;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[2])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b8g8r8x8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[2]) << 24;
         value |= ((src[1]) & 0xff) << 16;
         value |= ((src[0]) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[2]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[0]) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8r8g8b8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_a8r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) << 24;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= (float_to_ubyte(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[3]) << 24;
         value |= ((src[0]) & 0xff) << 16;
         value |= ((src[1]) & 0xff) << 8;
         value |= (src[2]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((src[0]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[2]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8r8g8b8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_x8r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= (float_to_ubyte(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[0])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_x8r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((src[0]) & 0xff) << 16;
         value |= ((src[1]) & 0xff) << 8;
         value |= (src[2]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((src[0]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[2]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8b8g8r8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#else
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_a8b8g8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) << 24;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= (float_to_ubyte(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8b8g8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[3]) << 24;
         value |= ((src[2]) & 0xff) << 16;
         value |= ((src[1]) & 0xff) << 8;
         value |= (src[0]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((src[2]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[0]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8b8g8r8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#else
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_x8b8g8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= (float_to_ubyte(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= (float_to_ubyte(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_x8b8g8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((src[2]) & 0xff) << 16;
         value |= ((src[1]) & 0xff) << 8;
         value |= (src[0]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((src[2]) & 0xff) << 8;
         value |= ((src[1]) & 0xff) << 16;
         value |= (src[0]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8x8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) << 24;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8x8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[0]) << 24;
         value |= ((src[1]) & 0xff) << 16;
         value |= ((src[2]) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[0]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[2]) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g5r5x1_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned x:1;
#else
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned x:1;
#endif
   } chan;
};

static INLINE void
util_format_b5g5r5x1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 6;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 1;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b5g5r5x1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5x1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) << 11;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 6;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 1;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g5r5a1_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned a:1;
#else
      unsigned b:5;
      unsigned g:5;
      unsigned r:5;
      unsigned a:1;
#endif
   } chan;
};

static INLINE void
util_format_b5g5r5a1_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 6;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 1;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0x1)) & 0x1;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0x1)) << 15;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x1f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
}

static INLINE void
util_format_b5g5r5a1_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x1); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x1f;
         r = (value >> 10) & 0x1f;
         a = value >> 15;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x1f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x1); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g5r5a1_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) << 11;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 6;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 1;
         value |= ((uint16_t)(src[3] >> 7)) & 0x1;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
         value |= ((uint16_t)(src[3] >> 7)) << 15;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b4g4r4a4_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned a:4;
#else
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned a:4;
#endif
   } chan;
};

static INLINE void
util_format_b4g4r4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) << 12;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 4;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 12;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
}

static INLINE void
util_format_b4g4r4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         a = value >> 12;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) << 12;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 4;
         value |= ((uint16_t)(src[3] >> 4)) & 0xf;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
         value |= ((uint16_t)(src[3] >> 4)) << 12;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b4g4r4x4_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned x:4;
#else
      unsigned b:4;
      unsigned g:4;
      unsigned r:4;
      unsigned x:4;
#endif
   } chan;
};

static INLINE void
util_format_b4g4r4x4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) << 12;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 4;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0xf)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b4g4r4x4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0xf;
         g = (value >> 4) & 0xf;
         r = (value >> 8) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0xf); /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b4g4r4x4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) << 12;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 4;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g6r5_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:5;
      unsigned g:6;
      unsigned r:5;
#else
      unsigned b:5;
      unsigned g:6;
      unsigned r:5;
#endif
   } chan;
};

static INLINE void
util_format_b5g6r5_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) << 11;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (float)(r * (1.0f/0x1f)); /* r */
         dst[1] = (float)(g * (1.0f/0x3f)); /* g */
         dst[2] = (float)(b * (1.0f/0x1f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b5g6r5_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x3f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x1f); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x3f); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x1f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) << 11;
         value |= (((uint16_t)(src[1] >> 2)) & 0x3f) << 5;
         value |= ((uint16_t)(src[0] >> 3)) & 0x1f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
         value |= (((uint16_t)(src[1] >> 2)) & 0x3f) << 5;
         value |= ((uint16_t)(src[0] >> 3)) << 11;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#else
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10a2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff) << 2;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
}

static INLINE void
util_format_r10g10b10a2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#else
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10a2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 2;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
}

static INLINE void
util_format_b10g10r10a2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b2g3r3_unorm {
   uint8_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:2;
      unsigned g:3;
      unsigned r:3;
#else
      unsigned b:2;
      unsigned g:3;
      unsigned r:3;
#endif
   } chan;
};

static INLINE void
util_format_b2g3r3_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0, 1) * 0x3)) << 6;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0, 1) * 0x7)) & 0x7) << 3;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0x7)) & 0x7;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0, 1) * 0x3)) & 0x3;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0, 1) * 0x7)) & 0x7) << 2;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0x7)) << 5;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (float)(r * (1.0f/0x7)); /* r */
         dst[1] = (float)(g * (1.0f/0x7)); /* g */
         dst[2] = (float)(b * (1.0f/0x3)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b2g3r3_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x7); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x7); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3); /* b */
         dst[3] = 255; /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t b;
         uint8_t g;
         uint8_t r;
         b = (value) & 0x3;
         g = (value >> 2) & 0x7;
         r = value >> 5;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0x7); /* r */
         dst[1] = (uint8_t)(((uint32_t)g) * 0xff / 0x7); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3); /* b */
         dst[3] = 255; /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b2g3r3_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)(src[2] >> 6)) << 6;
         value |= (((uint8_t)(src[1] >> 5)) & 0x7) << 3;
         value |= ((uint8_t)(src[0] >> 5)) & 0x7;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)(src[2] >> 6)) & 0x3;
         value |= (((uint8_t)(src[1] >> 5)) & 0x7) << 2;
         value |= ((uint8_t)(src[0] >> 5)) << 5;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_unorm {
   uint8_t value;
   struct {
      uint8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[0];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_unorm {
   uint8_t value;
   struct {
      uint8_t a;
   } chan;
};

static INLINE void
util_format_a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[3]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
}

static INLINE void
util_format_a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[3];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_unorm {
   uint8_t value;
   struct {
      uint8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = ubyte_to_float(rgba); /* r */
         dst[1] = ubyte_to_float(rgba); /* g */
         dst[2] = ubyte_to_float(rgba); /* b */
         dst[3] = ubyte_to_float(rgba); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = ubyte_to_float(rgba); /* r */
         dst[1] = ubyte_to_float(rgba); /* g */
         dst[2] = ubyte_to_float(rgba); /* b */
         dst[3] = ubyte_to_float(rgba); /* a */
}

static INLINE void
util_format_i8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[0];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l4a4_unorm {
   uint8_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned rgb:4;
      unsigned a:4;
#else
      unsigned rgb:4;
      unsigned a:4;
#endif
   } chan;
};

static INLINE void
util_format_l4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(rgb * (1.0f/0xf)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xf)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xf)); /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
}

static INLINE void
util_format_l4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         uint8_t a;
         rgb = (value) & 0xf;
         a = value >> 4;
         dst[0] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)rgb) * 0xff / 0xf); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t rgb;
      uint8_t a;
#else
      uint8_t rgb;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_l8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_l8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[0]) << 8;
         value |= (src[3]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[0]) & 0xff;
         value |= (src[3]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_unorm {
   uint16_t value;
   struct {
      uint16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_unorm {
   uint16_t value;
   struct {
      uint16_t a;
   } chan;
};

static INLINE void
util_format_a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_unorm {
   uint16_t value;
   struct {
      uint16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (float)(rgba * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0xffff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0xffff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (float)(rgba * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0xffff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0xffff)); /* a */
}

static INLINE void
util_format_i16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (uint8_t)(rgba >> 8); /* r */
         dst[1] = (uint8_t)(rgba >> 8); /* g */
         dst[2] = (uint8_t)(rgba >> 8); /* b */
         dst[3] = (uint8_t)(rgba >> 8); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t rgb;
      uint16_t a;
#else
      uint16_t rgb;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_l16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
}

static INLINE void
util_format_l16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_snorm {
   uint8_t value;
   struct {
      int8_t a;
   } chan;
};

static INLINE void
util_format_a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[3] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_snorm {
   uint8_t value;
   struct {
      int8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[0] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_snorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t rgb;
      int8_t a;
#else
      int8_t rgb;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_l8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
}

static INLINE void
util_format_l8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) << 8) ;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_snorm {
   uint8_t value;
   struct {
      int8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7f)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7f)); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7f)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7f)); /* a */
}

static INLINE void
util_format_i8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(rgba, 0)) * 0xff / 0x7f); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[0] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_snorm {
   uint16_t value;
   struct {
      int16_t a;
   } chan;
};

static INLINE void
util_format_a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_snorm {
   uint16_t value;
   struct {
      int16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(rgb, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgb, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgb, 0) >> 7); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t rgb;
      int16_t a;
#else
      int16_t rgb;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_l16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(rgb * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#endif
}

static INLINE void
util_format_l16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (uint8_t)(MAX2(rgb, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgb, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgb, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(rgb, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgb, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgb, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) << 16) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_snorm {
   uint16_t value;
   struct {
      int16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7fff)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (float)(rgba * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(rgba * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(rgba * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(rgba * (1.0f/0x7fff)); /* a */
}

static INLINE void
util_format_i16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(rgba, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(rgba, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(rgba, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(rgba, 0) >> 7); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_float {
   uint16_t value;
   struct {
      uint16_t a;
   } chan;
};

static INLINE void
util_format_a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
}

static INLINE void
util_format_a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a16_float pixel;
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_float {
   uint16_t value;
   struct {
      uint16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         pixel.chan.rgb = util_float_to_half(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l16_float pixel;
         pixel.chan.rgb = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_float {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t rgb;
      uint16_t a;
#else
      uint16_t rgb;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_l16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half(src[0]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half(src[0]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgb); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgb); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgb); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
}

static INLINE void
util_format_l16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#else
         union util_format_l16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgb)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l16a16_float pixel;
         pixel.chan.rgb = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_float {
   uint16_t value;
   struct {
      uint16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgba); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgba); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgba); /* b */
         dst[3] = util_half_to_float(pixel.chan.rgba); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         pixel.chan.rgba = util_float_to_half(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.rgba); /* r */
         dst[1] = util_half_to_float(pixel.chan.rgba); /* g */
         dst[2] = util_half_to_float(pixel.chan.rgba); /* b */
         dst[3] = util_half_to_float(pixel.chan.rgba); /* a */
}

static INLINE void
util_format_i16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.rgba)); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i16_float pixel;
         pixel.chan.rgba = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a32_float {
   uint32_t value;
   struct {
      float a;
   } chan;
};

static INLINE void
util_format_a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
}

static INLINE void
util_format_a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_a32_float pixel;
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32_float {
   uint32_t value;
   struct {
      float rgb;
   } chan;
};

static INLINE void
util_format_l32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         pixel.chan.rgb = src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgb); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgb); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgb); /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_l32_float pixel;
         pixel.chan.rgb = ubyte_to_float(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32a32_float {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float rgb;
      float a;
#else
      float rgb;
      float a;
#endif
   } chan;
};

static INLINE void
util_format_l32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_l32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgb); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgb); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgb); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#else
         union util_format_l32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgb); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgb); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgb); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = ubyte_to_float(src[0]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_float pixel;
         pixel.chan.rgb = ubyte_to_float(src[0]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i32_float {
   uint32_t value;
   struct {
      float rgba;
   } chan;
};

static INLINE void
util_format_i32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgba; /* r */
         dst[1] = pixel.chan.rgba; /* g */
         dst[2] = pixel.chan.rgba; /* b */
         dst[3] = pixel.chan.rgba; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         pixel.chan.rgba = src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgba; /* r */
         dst[1] = pixel.chan.rgba; /* g */
         dst[2] = pixel.chan.rgba; /* b */
         dst[3] = pixel.chan.rgba; /* a */
}

static INLINE void
util_format_i32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.rgba); /* r */
         dst[1] = float_to_ubyte(pixel.chan.rgba); /* g */
         dst[2] = float_to_ubyte(pixel.chan.rgba); /* b */
         dst[3] = float_to_ubyte(pixel.chan.rgba); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_i32_float pixel;
         pixel.chan.rgba = ubyte_to_float(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_srgb {
   uint8_t value;
   struct {
      uint8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= util_format_linear_float_to_srgb_8unorm(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= util_format_linear_to_srgb_8unorm(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_srgb {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t rgb;
      uint8_t a;
#else
      uint8_t rgb;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_l8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_l8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 8;
         value |= (src[3]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         value |= (src[3]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_srgb {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_float_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_float_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_float_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_float_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_float_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_float_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_8unorm_to_linear_float(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_to_linear_8unorm(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r8g8b8_srgb pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_format_srgb_to_linear_8unorm(pixel.chan.r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(pixel.chan.g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_srgb pixel;
         pixel.chan.r = util_format_linear_to_srgb_8unorm(src[0]);
         pixel.chan.g = util_format_linear_to_srgb_8unorm(src[1]);
         pixel.chan.b = util_format_linear_to_srgb_8unorm(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= (src[3]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= (src[3]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8b8g8r8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#else
      uint8_t a;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_a8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 24;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = (value) & 0xff;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[3]) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8b8g8r8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#else
      uint8_t x;
      uint8_t b;
      uint8_t g;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_x8b8g8r8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_x8b8g8r8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         r = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8a8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
#else
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_b8g8r8a8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_b8g8r8a8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8a8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= (src[3]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= (src[3]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b8g8r8x8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
#else
      uint8_t b;
      uint8_t g;
      uint8_t r;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_b8g8r8x8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b8g8r8x8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 24;
         g = (value >> 16) & 0xff;
         r = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0xff;
         g = (value >> 8) & 0xff;
         r = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b8g8r8x8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8r8g8b8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t a;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_a8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 24;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = (value) & 0xff;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[3]) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[3]) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8r8g8b8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t x;
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_x8r8g8b8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_x8r8g8b8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 16) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value >> 8) & 0xff;
         g = (value >> 16) & 0xff;
         b = value >> 24;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8r8g8b8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((util_format_linear_to_srgb_8unorm(src[0])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= (util_format_linear_to_srgb_8unorm(src[2])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8sg8sb8ux8u_norm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      uint8_t b;
      uint8_t x;
#else
      int8_t r;
      int8_t g;
      uint8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8sg8sb8ux8u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = (value >> 8) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = (value >> 8) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = (value >> 8) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         uint32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = (value >> 16) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8sg8sb8ux8u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(src[0] >> 1)) << 24) ;
         value |= (uint32_t)((((uint32_t)(src[1] >> 1)) & 0xff) << 16) ;
         value |= ((src[2]) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((uint32_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= ((src[2]) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10sg10sb10sa2u_norm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int r:10;
      int g:10;
      int b:10;
      unsigned a:2;
#else
      int r:10;
      int g:10;
      int b:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10sg10sb10sa2u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x3)); /* a */
#endif
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = value >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0x3); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10sg10sb10sa2u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r5sg5sb6u_norm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int r:5;
      int g:5;
      unsigned b:6;
#else
      int r:5;
      int g:5;
      unsigned b:6;
#endif
   } chan;
};

static INLINE void
util_format_r5sg5sb6u_norm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1, 1) * 0xf)) << 11) ;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 6) ;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x3f)) & 0x3f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1, 1) * 0xf)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 5) ;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x3f)) << 10;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = (float)(g * (1.0f/0xf)); /* g */
         dst[2] = (float)(b * (1.0f/0x3f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r5sg5sb6u_norm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3f); /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value << 11) ) >> 11;
         g = ((int16_t)(value << 6) ) >> 11;
         b = value >> 10;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0xf); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0xf); /* g */
         dst[2] = (uint8_t)(((uint32_t)b) * 0xff / 0x3f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r5sg5sb6u_norm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) << 11) ;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 6) ;
         value |= ((uint16_t)(src[2] >> 2)) & 0x3f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 5) ;
         value |= ((uint16_t)(src[2] >> 2)) << 10;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64_float {
   uint64_t value;
   struct {
      double r;
   } chan;
};

static INLINE void
util_format_r64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         pixel.chan.r = (double)src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      double r;
      double g;
#else
      double r;
      double g;
#endif
   } chan;
};

static INLINE void
util_format_r64g64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r64g64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r64g64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64b64_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      double r;
      double g;
      double b;
#else
      double r;
      double g;
      double b;
#endif
   } chan;
};

static INLINE void
util_format_r64g64b64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 24;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 24;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64b64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r64g64b64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r64g64b64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = 255; /* a */
#endif
         src += 24;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64b64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 24;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r64g64b64a64_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      double r;
      double g;
      double b;
      double a;
#else
      double r;
      double g;
      double b;
      double a;
#endif
   } chan;
};

static INLINE void
util_format_r64g64b64a64_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
         src += 32;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         pixel.chan.a = (double)src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)src[0];
         pixel.chan.g = (double)src[1];
         pixel.chan.b = (double)src[2];
         pixel.chan.a = (double)src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 32;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r64g64b64a64_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
#else
         union util_format_r64g64b64a64_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
#endif
         src += 32;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r64g64b64a64_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         pixel.chan.a = (double)(src[3] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r64g64b64a64_float pixel;
         pixel.chan.r = (double)(src[0] * (1.0f/0xff));
         pixel.chan.g = (double)(src[1] * (1.0f/0xff));
         pixel.chan.b = (double)(src[2] * (1.0f/0xff));
         pixel.chan.a = (double)(src[3] * (1.0f/0xff));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 32;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_float {
   uint32_t value;
   struct {
      float r;
   } chan;
};

static INLINE void
util_format_r32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         pixel.chan.r = src[0];
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_float {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float r;
      float g;
#else
      float r;
      float g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float r;
      float g;
      float b;
#else
      float r;
      float g;
      float b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float r;
      float g;
      float b;
      float a;
#else
      float r;
      float g;
      float b;
      float a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#else
         union util_format_r32g32b32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_unorm {
   uint32_t value;
   struct {
      uint32_t r;
   } chan;
};

static INLINE void
util_format_r32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (float)(r * (1.0/0xffffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (uint8_t)(r >> 24); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_unorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
#else
      uint32_t r;
      uint32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_unorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_unorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
#else
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
#else
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0xffffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0xffffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0xffffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0xffffffff)); /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 24); /* a */
#else
         union util_format_r32g32b32a32_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 24); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 24); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 24); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 24); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_unorm pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0xffffffff / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0xffffffff / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0xffffffff / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0xffffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_uscaled {
   uint32_t value;
   struct {
      uint32_t r;
   } chan;
};

static INLINE void
util_format_r32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)CLAMP(src[0], 0, 4294967295);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (uint8_t)(((uint64_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_uscaled {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
#else
      uint32_t r;
      uint32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_uscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_uscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
#else
         union util_format_r32g32b32a32_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_uscaled pixel;
         pixel.chan.r = (uint32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_snorm {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (float)(r * (1.0/0x7fffffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 23); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_snorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
#else
      int32_t r;
      int32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_snorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
#else
      int32_t r;
      int32_t g;
      int32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_snorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#else
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
#else
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
#else
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x7fffffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x7fffffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x7fffffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x7fffffff)); /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 23); /* a */
#else
         union util_format_r32g32b32a32_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 23); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 23); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 23); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 23); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_snorm pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x7fffffff / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x7fffffff / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x7fffffff / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x7fffffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_sscaled {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)CLAMP(src[0], -2147483648, 2147483647)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (uint8_t)(((uint64_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)(((uint64_t)src[0]) * 0x1 / 0xff)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_sscaled {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
#else
      int32_t r;
      int32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_sscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
#else
      int32_t r;
      int32_t g;
      int32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_sscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#else
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
#else
         union util_format_r32g32b32a32_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint64_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_sscaled pixel;
         pixel.chan.r = (int32_t)(((uint64_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int32_t)(((uint64_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int32_t)(((uint64_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int32_t)(((uint64_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_float {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_float {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
#else
      uint16_t r;
      uint16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = 255; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_float {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#else
         union util_format_r16g16b16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_unorm {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
#else
      uint16_t r;
      uint16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_unorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = 255; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_unorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
#else
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
#else
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0xffff)); /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 8); /* a */
#else
         union util_format_r16g16b16a16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = (uint8_t)(pixel.chan.a >> 8); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_uscaled {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_uscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
#else
      uint16_t r;
      uint16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) << 16;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_uscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_uscaled {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
#else
         union util_format_r16g16b16a16_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(pixel.chan.a, 1)) * 0xff / 0x1); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_uscaled pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (uint16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_snorm {
   uint16_t value;
   struct {
      int16_t r;
   } chan;
};

static INLINE void
util_format_r16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
#else
      int16_t r;
      int16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) << 16) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_snorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
#else
      int16_t r;
      int16_t g;
      int16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = 255; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_snorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#else
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
#else
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
#else
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0f/0x7fff)); /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 7); /* a */
#else
         union util_format_r16g16b16a16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = (uint8_t)(MAX2(pixel.chan.a, 0) >> 7); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_sscaled {
   uint16_t value;
   struct {
      int16_t r;
   } chan;
};

static INLINE void
util_format_r16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_sscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
#else
      int16_t r;
      int16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 16) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_sscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
#else
      int16_t r;
      int16_t g;
      int16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_sscaled {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#else
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = (float)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
#else
         union util_format_r16g16b16a16_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.a, 0, 1)) * 0xff / 0x1); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_sscaled pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         pixel.chan.a = (int16_t)(((uint32_t)src[3]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_unorm {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= float_to_ubyte(src[0]);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= src[0];
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
#else
      uint8_t r;
      uint8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) << 8;
         value |= (float_to_ubyte(src[1])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= (float_to_ubyte(src[1])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[0]) << 8;
         value |= (src[1]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[0]) & 0xff;
         value |= (src[1]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_unorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = float_to_ubyte(src[0]);
         pixel.chan.g = float_to_ubyte(src[1]);
         pixel.chan.b = float_to_ubyte(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = float_to_ubyte(src[0]);
         pixel.chan.g = float_to_ubyte(src[1]);
         pixel.chan.b = float_to_ubyte(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = ubyte_to_float(pixel.chan.r); /* r */
         dst[1] = ubyte_to_float(pixel.chan.g); /* g */
         dst[2] = ubyte_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r8g8b8_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 255; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_unorm pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) << 24;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 16;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= ((float_to_ubyte(src[1])) & 0xff) << 8;
         value |= ((float_to_ubyte(src[2])) & 0xff) << 16;
         value |= (float_to_ubyte(src[3])) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = ubyte_to_float(b); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = b; /* b */
         dst[3] = a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (src[0]) << 24;
         value |= ((src[1]) & 0xff) << 16;
         value |= ((src[2]) & 0xff) << 8;
         value |= (src[3]) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (src[0]) & 0xff;
         value |= ((src[1]) & 0xff) << 8;
         value |= ((src[2]) & 0xff) << 16;
         value |= (src[3]) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_uscaled {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_r8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_uscaled {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
#else
      uint8_t r;
      uint8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 8;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 8;
         value |= ((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= ((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_uscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r8g8b8_uscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MIN2(pixel.chan.r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(pixel.chan.g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(pixel.chan.b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_uscaled pixel;
         pixel.chan.r = (uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_uscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 24;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 16;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 24;
         value |= (((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 16;
         value |= (((uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 8;
         value |= ((uint8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff;
         value |= (((uint8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8;
         value |= (((uint8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16;
         value |= ((uint8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_snorm {
   uint8_t value;
   struct {
      int8_t r;
   } chan;
};

static INLINE void
util_format_r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(src[0] >> 1)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_snorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
#else
      int8_t r;
      int8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) << 8) ;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_snorm {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
#else
      int8_t r;
      int8_t g;
      int8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MAX2(pixel.chan.r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(pixel.chan.g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(pixel.chan.b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r8g8b8_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)MAX2(pixel.chan.r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(pixel.chan.g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(pixel.chan.b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(src[0] >> 1);
         pixel.chan.g = (int8_t)(src[1] >> 1);
         pixel.chan.b = (int8_t)(src[2] >> 1);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_snorm pixel;
         pixel.chan.r = (int8_t)(src[0] >> 1);
         pixel.chan.g = (int8_t)(src[1] >> 1);
         pixel.chan.b = (int8_t)(src[2] >> 1);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#else
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) << 24) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_sscaled {
   uint8_t value;
   struct {
      int8_t r;
   } chan;
};

static INLINE void
util_format_r8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (float)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_sscaled {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
#else
      int8_t r;
      int8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 8) ;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_sscaled {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
#else
      int8_t r;
      int8_t g;
      int8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)pixel.chan.r; /* r */
         dst[1] = (float)pixel.chan.g; /* g */
         dst[2] = (float)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r8g8b8_sscaled pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(pixel.chan.b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_sscaled pixel;
         pixel.chan.r = (int8_t)(((uint32_t)src[0]) * 0x1 / 0xff);
         pixel.chan.g = (int8_t)(((uint32_t)src[1]) * 0x1 / 0xff);
         pixel.chan.b = (int8_t)(((uint32_t)src[2]) * 0x1 / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_sscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#else
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) << 24) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(a, 0, 1)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)CLAMP(a, 0, 1)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 24) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_fixed {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         union util_format_r32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_fixed {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
#else
      int32_t r;
      int32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_fixed {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
#else
      int32_t r;
      int32_t g;
      int32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = 255; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_fixed {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#else
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_fixed_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
#else
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
#else
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0/0x10000)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0/0x10000)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0/0x10000)); /* b */
         dst[3] = (float)(pixel.chan.a * (1.0/0x10000)); /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_fixed_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround((CLAMP(pixel.chan.a, 0, 65536) * (1.0/0x10000)) * 0xff); /* a */
#else
         union util_format_r32g32b32a32_fixed pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)util_iround((CLAMP(pixel.chan.r, 0, 65536) * (1.0/0x10000)) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround((CLAMP(pixel.chan.g, 0, 65536) * (1.0/0x10000)) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround((CLAMP(pixel.chan.b, 0, 65536) * (1.0/0x10000)) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround((CLAMP(pixel.chan.a, 0, 65536) * (1.0/0x10000)) * 0xff); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_fixed_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.a = (int32_t)((float)(src[3] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_fixed pixel;
         pixel.chan.r = (int32_t)((float)(src[0] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.g = (int32_t)((float)(src[1] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.b = (int32_t)((float)(src[2] * (1.0f/0xff)) * (double)0x10000);
         pixel.chan.a = (int32_t)((float)(src[3] * (1.0f/0xff)) * (double)0x10000);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10x2_uscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned x:2;
#else
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned x:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10x2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r10g10b10x2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10x2_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int r:10;
      int g:10;
      int b:10;
      unsigned x:2;
#else
      int r:10;
      int g:10;
      int b:10;
      unsigned x:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10x2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r10g10b10x2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10x2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a4r4_unorm {
   uint8_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned a:4;
      unsigned r:4;
#else
      unsigned a:4;
      unsigned r:4;
#endif
   } chan;
};

static INLINE void
util_format_a4r4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = (value) & 0xf;
         r = value >> 4;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a4r4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a4r4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = (value) & 0xf;
         r = value >> 4;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
}

static INLINE void
util_format_a4r4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         uint8_t r;
         a = (value) & 0xf;
         r = value >> 4;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a4r4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r4a4_unorm {
   uint8_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned r:4;
      unsigned a:4;
#else
      unsigned r:4;
      unsigned a:4;
#endif
   } chan;
};

static INLINE void
util_format_r4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = (value) & 0xf;
         a = value >> 4;
         dst[0] = (float)(r * (1.0f/0xf)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xf)); /* a */
#endif
}

static INLINE void
util_format_r4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#else
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         uint8_t a;
         r = (value) & 0xf;
         a = value >> 4;
         dst[0] = (uint8_t)(((uint32_t)r) * 0xff / 0xf); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)a) * 0xff / 0xf); /* a */
#endif
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint8_t value = 0;
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
         *(uint8_t *)dst = value;
#else
         uint8_t value = 0;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         *(uint8_t *)dst = value;
#endif
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8a8_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t a;
#else
      uint8_t r;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8a8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) << 8;
         value |= (float_to_ubyte(src[3])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[0])) & 0xff;
         value |= (float_to_ubyte(src[3])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8a8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_r8a8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[0]) << 8;
         value |= (src[3]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[0]) & 0xff;
         value |= (src[3]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8r8_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t r;
#else
      uint8_t a;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_a8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = value >> 8;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = (value) & 0xff;
         r = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) << 8;
         value |= (float_to_ubyte(src[0])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= (float_to_ubyte(src[0])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = value >> 8;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = (value) & 0xff;
         r = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = value >> 8;
         r = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t r;
         a = (value) & 0xff;
         r = value >> 8;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[3]) << 8;
         value |= (src[0]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[3]) & 0xff;
         value |= (src[0]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_uscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#else
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10a2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_r10g10b10a2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_sscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int r:10;
      int g:10;
      int b:10;
      int a:2;
#else
      int r:10;
      int g:10;
      int b:10;
      int a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10a2_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512, 511)) << 22) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_r10g10b10a2_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int r:10;
      int g:10;
      int b:10;
      int a:2;
#else
      int r:10;
      int g:10;
      int b:10;
      int a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10a2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
}

static INLINE void
util_format_r10g10b10a2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_uscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#else
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10a2_uscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_b10g10r10a2_uscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (uint8_t)(((uint32_t)MIN2(r, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)MIN2(g, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)MIN2(b, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MIN2(a, 1)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_sscaled {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int b:10;
      int g:10;
      int r:10;
      int a:2;
#else
      int b:10;
      int g:10;
      int r:10;
      int a:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10a2_sscaled_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_sscaled_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512, 511)) << 22) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_sscaled_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)r; /* r */
         dst[1] = (float)g; /* g */
         dst[2] = (float)b; /* b */
         dst[3] = (float)a; /* a */
#endif
}

static INLINE void
util_format_b10g10r10a2_sscaled_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (uint8_t)(((uint32_t)CLAMP(r, 0, 1)) * 0xff / 0x1); /* r */
         dst[1] = (uint8_t)(((uint32_t)CLAMP(g, 0, 1)) * 0xff / 0x1); /* g */
         dst[2] = (uint8_t)(((uint32_t)CLAMP(b, 0, 1)) * 0xff / 0x1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_sscaled_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int b:10;
      int g:10;
      int r:10;
      int a:2;
#else
      int b:10;
      int g:10;
      int r:10;
      int a:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10a2_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (float)(r * (1.0f/0x1ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x1ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x1ff)); /* b */
         dst[3] = (float)(a * (1.0f/0x1)); /* a */
#endif
}

static INLINE void
util_format_b10g10r10a2_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value << 22) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 2) ) >> 22;
         a = ((int32_t)(value) ) >> 30;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 1); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 1); /* g */
         dst[2] = (uint8_t)(MAX2(b, 0) >> 1); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x1); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) & 0x3) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) << 30) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_uint {
   uint8_t value;
   struct {
      uint8_t r;
   } chan;
};

static INLINE void
util_format_r8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)MIN2(src[0], 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t r;
         r = value;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_uint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
#else
      uint8_t r;
      uint8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) << 8;
         value |= ((uint8_t)MIN2(src[1], 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) & 0xff;
         value |= ((uint8_t)MIN2(src[1], 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = value >> 8;
         g = (value) & 0xff;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t g;
         r = (value) & 0xff;
         g = value >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 8;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_uint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uint pixel;
         pixel.chan.r = (uint8_t)MIN2(src[0], 255);
         pixel.chan.g = (uint8_t)MIN2(src[1], 255);
         pixel.chan.b = (uint8_t)MIN2(src[2], 255);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_uint pixel;
         pixel.chan.r = (uint8_t)MIN2(src[0], 255);
         pixel.chan.g = (uint8_t)MIN2(src[1], 255);
         pixel.chan.b = (uint8_t)MIN2(src[2], 255);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_uint pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_uint pixel;
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) << 24;
         value |= (((uint8_t)MIN2(src[1], 255)) & 0xff) << 16;
         value |= (((uint8_t)MIN2(src[2], 255)) & 0xff) << 8;
         value |= ((uint8_t)MIN2(src[3], 255)) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) & 0xff;
         value |= (((uint8_t)MIN2(src[1], 255)) & 0xff) << 8;
         value |= (((uint8_t)MIN2(src[2], 255)) & 0xff) << 16;
         value |= ((uint8_t)MIN2(src[3], 255)) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         a = (value) & 0xff;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         a = value >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 24;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 16;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) & 0xff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 24;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8_sint {
   uint8_t value;
   struct {
      int8_t r;
   } chan;
};

static INLINE void
util_format_r8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t r;
         r = (int8_t)(value) ;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)MIN2(src[0], 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8_sint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
#else
      int8_t r;
      int8_t g;
#endif
   } chan;
};

static INLINE void
util_format_r8g8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value) ) >> 8;
         g = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t g;
         r = ((int16_t)(value << 8) ) >> 8;
         g = ((int16_t)(value) ) >> 8;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) << 8) ;
         value |= (uint16_t)(((int8_t)MIN2(src[1], 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)MIN2(src[1], 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8_sint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
#else
      int8_t r;
      int8_t g;
      int8_t b;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sint pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_sint pixel;
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r8g8b8_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 3;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r8g8b8_sint pixel;
         pixel.chan.r = (int8_t)MIN2(src[0], 127);
         pixel.chan.g = (int8_t)MIN2(src[1], 127);
         pixel.chan.b = (int8_t)MIN2(src[2], 127);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r8g8b8_sint pixel;
         pixel.chan.r = (int8_t)MIN2(src[0], 127);
         pixel.chan.g = (int8_t)MIN2(src[1], 127);
         pixel.chan.b = (int8_t)MIN2(src[2], 127);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 3;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8a8_sint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#else
      int8_t r;
      int8_t g;
      int8_t b;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8a8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) << 24) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#endif
}

static INLINE void
util_format_r8g8b8a8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         a = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = (unsigned)MAX2(b, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         a = ((int32_t)(value) ) >> 24;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = (unsigned)MAX2(b, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8a8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)MIN2(src[0], 127)) << 24) ;
         value |= (uint32_t)((((int8_t)MIN2(src[1], 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)MIN2(src[2], 127)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)MIN2(src[3], 127)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)MIN2(src[0], 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)MIN2(src[1], 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)MIN2(src[2], 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)MIN2(src[3], 127)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_uint {
   uint16_t value;
   struct {
      uint16_t r;
   } chan;
};

static INLINE void
util_format_r16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)MIN2(src[0], 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         r = value;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
#else
      uint16_t r;
      uint16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) << 16;
         value |= ((uint16_t)MIN2(src[1], 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) & 0xffff;
         value |= ((uint16_t)MIN2(src[1], 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = value >> 16;
         g = (value) & 0xffff;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         r = (value) & 0xffff;
         g = value >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) << 16;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_uint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_uint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = (unsigned)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = (unsigned)pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         pixel.chan.a = (uint16_t)MIN2(src[3], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         pixel.chan.a = (uint16_t)MIN2(src[3], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = (unsigned)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = (unsigned)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16_sint {
   uint16_t value;
   struct {
      int16_t r;
   } chan;
};

static INLINE void
util_format_r16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         r = (int16_t)(value) ;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)MIN2(src[0], 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16_sint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
#else
      int16_t r;
      int16_t g;
#endif
   } chan;
};

static INLINE void
util_format_r16g16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value) ) >> 16;
         g = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         r = ((int32_t)(value << 16) ) >> 16;
         g = ((int32_t)(value) ) >> 16;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)MIN2(src[1], 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)MIN2(src[1], 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16_sint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
#else
      int16_t r;
      int16_t g;
      int16_t b;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 6;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 6;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16a16_sint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#else
      int16_t r;
      int16_t g;
      int16_t b;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16a16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#else
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = (int)pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r16g16b16a16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#else
         union util_format_r16g16b16a16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16a16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16a16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         pixel.chan.a = (int16_t)MIN2(src[3], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16a16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         pixel.chan.a = (int16_t)MIN2(src[3], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_uint {
   uint32_t value;
   struct {
      uint32_t r;
   } chan;
};

static INLINE void
util_format_r32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= src[0];
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         r = value;
         dst[0] = (int)MIN2(r, 2147483647); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)MAX2(src[0], 0);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_uint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
#else
      uint32_t r;
      uint32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_uint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_uint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#else
         union util_format_r32g32b32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32_sint {
   uint32_t value;
   struct {
      int32_t r;
   } chan;
};

static INLINE void
util_format_r32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(src[0]) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_r32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         r = (int32_t)(value) ;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)MIN2(src[0], 2147483647)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32_sint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
#else
      int32_t r;
      int32_t g;
#endif
   } chan;
};

static INLINE void
util_format_r32g32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32_sint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
#else
      int32_t r;
      int32_t g;
      int32_t b;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 12;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 12;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32a32_sint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#else
      int32_t r;
      int32_t g;
      int32_t b;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32a32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32g32b32a32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#else
         union util_format_r32g32b32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32a32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32a32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32a32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_uint {
   uint8_t value;
   struct {
      uint8_t a;
   } chan;
};

static INLINE void
util_format_a8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)MIN2(src[3], 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
}

static INLINE void
util_format_a8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[3], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_uint {
   uint8_t value;
   struct {
      uint8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = (unsigned)rgba; /* r */
         dst[1] = (unsigned)rgba; /* g */
         dst[2] = (unsigned)rgba; /* b */
         dst[3] = (unsigned)rgba; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)MIN2(src[0], 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = (unsigned)rgba; /* r */
         dst[1] = (unsigned)rgba; /* g */
         dst[2] = (unsigned)rgba; /* b */
         dst[3] = (unsigned)rgba; /* a */
}

static INLINE void
util_format_i8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgba;
         rgba = value;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_uint {
   uint8_t value;
   struct {
      uint8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)MIN2(src[0], 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         uint8_t rgb;
         rgb = value;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)CLAMP(src[0], 0, 255);
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_uint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t rgb;
      uint8_t a;
#else
      uint8_t rgb;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_l8a8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) << 8;
         value |= ((uint8_t)MIN2(src[3], 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) & 0xff;
         value |= ((uint8_t)MIN2(src[3], 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_l8a8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = value >> 8;
         a = (value) & 0xff;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         uint16_t a;
         rgb = (value) & 0xff;
         a = value >> 8;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8_sint {
   uint8_t value;
   struct {
      int8_t a;
   } chan;
};

static INLINE void
util_format_a8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[3], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
}

static INLINE void
util_format_a8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t a;
         a = (int8_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)MIN2(src[3], 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i8_sint {
   uint8_t value;
   struct {
      int8_t rgba;
   } chan;
};

static INLINE void
util_format_i8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
}

static INLINE void
util_format_i8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgba;
         rgba = (int8_t)(value) ;
         dst[0] = (unsigned)MAX2(rgba, 0); /* r */
         dst[1] = (unsigned)MAX2(rgba, 0); /* g */
         dst[2] = (unsigned)MAX2(rgba, 0); /* b */
         dst[3] = (unsigned)MAX2(rgba, 0); /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)MIN2(src[0], 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8_sint {
   uint8_t value;
   struct {
      int8_t rgb;
   } chan;
};

static INLINE void
util_format_l8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = *(const uint8_t *)src;
         int8_t rgb;
         rgb = (int8_t)(value) ;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = 1; /* a */
         src += 1;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint8_t value = 0;
         value |= (uint8_t)((int8_t)MIN2(src[0], 127)) ;
         *(uint8_t *)dst = value;
         src += 4;
         dst += 1;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l8a8_sint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t rgb;
      int8_t a;
#else
      int8_t rgb;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_l8a8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[3], -128, 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[3], -128, 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l8a8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
}

static INLINE void
util_format_l8a8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         int16_t a;
         rgb = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l8a8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) << 8) ;
         value |= (uint16_t)(((int8_t)MIN2(src[3], 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)MIN2(src[3], 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_uint {
   uint16_t value;
   struct {
      uint16_t a;
   } chan;
};

static INLINE void
util_format_a16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)MIN2(src[3], 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
}

static INLINE void
util_format_a16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[3], 0, 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_uint {
   uint16_t value;
   struct {
      uint16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (unsigned)rgba; /* r */
         dst[1] = (unsigned)rgba; /* g */
         dst[2] = (unsigned)rgba; /* b */
         dst[3] = (unsigned)rgba; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)MIN2(src[0], 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (unsigned)rgba; /* r */
         dst[1] = (unsigned)rgba; /* g */
         dst[2] = (unsigned)rgba; /* b */
         dst[3] = (unsigned)rgba; /* a */
}

static INLINE void
util_format_i16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgba;
         rgba = value;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_uint {
   uint16_t value;
   struct {
      uint16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)MIN2(src[0], 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         uint16_t rgb;
         rgb = value;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t rgb;
      uint16_t a;
#else
      uint16_t rgb;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_l16a16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) << 16;
         value |= ((uint16_t)MIN2(src[3], 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) & 0xffff;
         value |= ((uint16_t)MIN2(src[3], 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (unsigned)rgb; /* r */
         dst[1] = (unsigned)rgb; /* g */
         dst[2] = (unsigned)rgb; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_l16a16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         uint32_t a;
         rgb = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) << 16;
         value |= ((uint16_t)CLAMP(src[3], 0, 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[3], 0, 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16_sint {
   uint16_t value;
   struct {
      int16_t a;
   } chan;
};

static INLINE void
util_format_a16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[3], -32768, 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
}

static INLINE void
util_format_a16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         a = (int16_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)MIN2(src[3], 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i16_sint {
   uint16_t value;
   struct {
      int16_t rgba;
   } chan;
};

static INLINE void
util_format_i16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (int)rgba; /* r */
         dst[1] = (int)rgba; /* g */
         dst[2] = (int)rgba; /* b */
         dst[3] = (int)rgba; /* a */
}

static INLINE void
util_format_i16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgba;
         rgba = (int16_t)(value) ;
         dst[0] = (unsigned)MAX2(rgba, 0); /* r */
         dst[1] = (unsigned)MAX2(rgba, 0); /* g */
         dst[2] = (unsigned)MAX2(rgba, 0); /* b */
         dst[3] = (unsigned)MAX2(rgba, 0); /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)MIN2(src[0], 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16_sint {
   uint16_t value;
   struct {
      int16_t rgb;
   } chan;
};

static INLINE void
util_format_l16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = *(const uint16_t *)src;
         int16_t rgb;
         rgb = (int16_t)(value) ;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = 1; /* a */
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint16_t value = 0;
         value |= (uint16_t)((int16_t)MIN2(src[0], 32767)) ;
         *(uint16_t *)dst = value;
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l16a16_sint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t rgb;
      int16_t a;
#else
      int16_t rgb;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_l16a16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[3], -32768, 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[3], -32768, 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l16a16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (int)rgb; /* r */
         dst[1] = (int)rgb; /* g */
         dst[2] = (int)rgb; /* b */
         dst[3] = (int)a; /* a */
#endif
}

static INLINE void
util_format_l16a16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         int32_t a;
         rgb = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l16a16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)MIN2(src[3], 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)MIN2(src[3], 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a32_uint {
   uint32_t value;
   struct {
      uint32_t a;
   } chan;
};

static INLINE void
util_format_a32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= src[3];
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
}

static INLINE void
util_format_a32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         a = value;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)MIN2(a, 2147483647); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)MAX2(src[3], 0);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i32_uint {
   uint32_t value;
   struct {
      uint32_t rgba;
   } chan;
};

static INLINE void
util_format_i32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgba;
         rgba = value;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= src[0];
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgba;
         rgba = value;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
}

static INLINE void
util_format_i32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgba;
         rgba = value;
         dst[0] = (int)MIN2(rgba, 2147483647); /* r */
         dst[1] = (int)MIN2(rgba, 2147483647); /* g */
         dst[2] = (int)MIN2(rgba, 2147483647); /* b */
         dst[3] = (int)MIN2(rgba, 2147483647); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)MAX2(src[0], 0);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32_uint {
   uint32_t value;
   struct {
      uint32_t rgb;
   } chan;
};

static INLINE void
util_format_l32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         rgb = value;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= src[0];
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         rgb = value;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         uint32_t rgb;
         rgb = value;
         dst[0] = (int)MIN2(rgb, 2147483647); /* r */
         dst[1] = (int)MIN2(rgb, 2147483647); /* g */
         dst[2] = (int)MIN2(rgb, 2147483647); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)MAX2(src[0], 0);
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32a32_uint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t rgb;
      uint32_t a;
#else
      uint32_t rgb;
      uint32_t a;
#endif
   } chan;
};

static INLINE void
util_format_l32a32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_uint pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_uint pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32a32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_l32a32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.rgb, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.rgb, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.rgb, 2147483647); /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#else
         union util_format_l32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.rgb, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.rgb, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.rgb, 2147483647); /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_uint pixel;
         pixel.chan.rgb = (uint32_t)MAX2(src[0], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_uint pixel;
         pixel.chan.rgb = (uint32_t)MAX2(src[0], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a32_sint {
   uint32_t value;
   struct {
      int32_t a;
   } chan;
};

static INLINE void
util_format_a32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         a = (int32_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(src[3]) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         a = (int32_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = a; /* a */
}

static INLINE void
util_format_a32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         a = (int32_t)(value) ;
         dst[0] = 0; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)MIN2(src[3], 2147483647)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_i32_sint {
   uint32_t value;
   struct {
      int32_t rgba;
   } chan;
};

static INLINE void
util_format_i32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgba;
         rgba = (int32_t)(value) ;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(src[0]) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_i32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t rgba;
         rgba = (int32_t)(value) ;
         dst[0] = rgba; /* r */
         dst[1] = rgba; /* g */
         dst[2] = rgba; /* b */
         dst[3] = rgba; /* a */
}

static INLINE void
util_format_i32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgba;
         rgba = (int32_t)(value) ;
         dst[0] = (unsigned)MAX2(rgba, 0); /* r */
         dst[1] = (unsigned)MAX2(rgba, 0); /* g */
         dst[2] = (unsigned)MAX2(rgba, 0); /* b */
         dst[3] = (unsigned)MAX2(rgba, 0); /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_i32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)MIN2(src[0], 2147483647)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32_sint {
   uint32_t value;
   struct {
      int32_t rgb;
   } chan;
};

static INLINE void
util_format_l32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         rgb = (int32_t)(value) ;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)(src[0]) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         rgb = (int32_t)(value) ;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = 1; /* a */
}

static INLINE void
util_format_l32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = *(const uint32_t *)src;
         int32_t rgb;
         rgb = (int32_t)(value) ;
         dst[0] = (unsigned)MAX2(rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(rgb, 0); /* b */
         dst[3] = 1; /* a */
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
         uint32_t value = 0;
         value |= (uint32_t)((int32_t)MIN2(src[0], 2147483647)) ;
         *(uint32_t *)dst = value;
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_l32a32_sint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t rgb;
      int32_t a;
#else
      int32_t rgb;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_l32a32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_sint pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_sint pixel;
         pixel.chan.rgb = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_l32a32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.rgb; /* r */
         dst[1] = pixel.chan.rgb; /* g */
         dst[2] = pixel.chan.rgb; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_l32a32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#else
         union util_format_l32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.rgb, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.rgb, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.rgb, 0); /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_l32a32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_l32a32_sint pixel;
         pixel.chan.rgb = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_l32a32_sint pixel;
         pixel.chan.rgb = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10a2_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#else
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10a2_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)MIN2(src[2], 1023)) << 22;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)MIN2(src[0], 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)MIN2(src[3], 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)MIN2(src[2], 1023)) & 0x3ff;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)MIN2(src[0], 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)MIN2(src[3], 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_b10g10r10a2_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10a2_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
      uint8_t x;
#else
      int8_t r;
      int8_t g;
      int8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8x8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 8) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8x8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) << 24) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 8) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_srgb {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8x8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 24;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[2])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8x8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(r); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 24;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 16;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         value |= ((util_format_linear_to_srgb_8unorm(src[1])) & 0xff) << 8;
         value |= ((util_format_linear_to_srgb_8unorm(src[2])) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#else
      uint8_t r;
      uint8_t g;
      uint8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8x8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) << 24;
         value |= (((uint8_t)MIN2(src[1], 255)) & 0xff) << 16;
         value |= (((uint8_t)MIN2(src[2], 255)) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) & 0xff;
         value |= (((uint8_t)MIN2(src[1], 255)) & 0xff) << 8;
         value |= (((uint8_t)MIN2(src[2], 255)) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8x8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = value >> 24;
         g = (value >> 16) & 0xff;
         b = (value >> 8) & 0xff;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         r = (value) & 0xff;
         g = (value >> 8) & 0xff;
         b = (value >> 16) & 0xff;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 24;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 16;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 8;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8g8b8x8_sint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t g;
      int8_t b;
      uint8_t x;
#else
      int8_t r;
      int8_t g;
      int8_t b;
      uint8_t x;
#endif
   } chan;
};

static INLINE void
util_format_r8g8b8x8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) << 24) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 8) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8g8b8x8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r8g8b8x8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = (unsigned)MAX2(b, 0); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t g;
         int32_t b;
         r = ((int32_t)(value << 24) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = (unsigned)MAX2(g, 0); /* g */
         dst[2] = (unsigned)MAX2(b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8g8b8x8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)MIN2(src[0], 127)) << 24) ;
         value |= (uint32_t)((((int8_t)MIN2(src[1], 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)MIN2(src[2], 127)) & 0xff) << 8) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)MIN2(src[0], 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)MIN2(src[1], 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)MIN2(src[2], 127)) & 0xff) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b10g10r10x2_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned x:2;
#else
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
      unsigned x:2;
#endif
   } chan;
};

static INLINE void
util_format_b10g10r10x2_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10x2_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 2;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b10g10r10x2_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         dst[0] = (float)(r * (1.0f/0x3ff)); /* r */
         dst[1] = (float)(g * (1.0f/0x3ff)); /* g */
         dst[2] = (float)(b * (1.0f/0x3ff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b10g10r10x2_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t b;
         uint32_t g;
         uint32_t r;
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         dst[0] = (uint8_t)(r >> 2); /* r */
         dst[1] = (uint8_t)(g >> 2); /* g */
         dst[2] = (uint8_t)(b >> 2); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b10g10r10x2_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 2;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16x16_unorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16x16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_unorm pixel;
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16x16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0xffff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0xffff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16x16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16x16_unorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(pixel.chan.r >> 8); /* r */
         dst[1] = (uint8_t)(pixel.chan.g >> 8); /* g */
         dst[2] = (uint8_t)(pixel.chan.b >> 8); /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_unorm pixel;
         pixel.chan.r = (uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff);
         pixel.chan.g = (uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff);
         pixel.chan.b = (uint16_t)(((uint32_t)src[2]) * 0xffff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16x16_snorm {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
      uint16_t x;
#else
      int16_t r;
      int16_t g;
      int16_t b;
      uint16_t x;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16x16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_snorm pixel;
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16x16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (float)(pixel.chan.r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(pixel.chan.g * (1.0f/0x7fff)); /* g */
         dst[2] = (float)(pixel.chan.b * (1.0f/0x7fff)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16x16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16x16_snorm pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (uint8_t)(MAX2(pixel.chan.r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(pixel.chan.g, 0) >> 7); /* g */
         dst[2] = (uint8_t)(MAX2(pixel.chan.b, 0) >> 7); /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_snorm pixel;
         pixel.chan.r = (int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff);
         pixel.chan.g = (int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff);
         pixel.chan.b = (int16_t)(((uint32_t)src[2]) * 0x7fff / 0xff);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16x16_float {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16x16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.g = util_float_to_half(src[1]);
         pixel.chan.b = util_float_to_half(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16x16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = util_half_to_float(pixel.chan.g); /* g */
         dst[2] = util_half_to_float(pixel.chan.b); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16x16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r16g16b16x16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = float_to_ubyte(util_half_to_float(pixel.chan.g)); /* g */
         dst[2] = float_to_ubyte(util_half_to_float(pixel.chan.b)); /* b */
         dst[3] = 255; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.g = util_float_to_half((float)(src[1] * (1.0f/0xff)));
         pixel.chan.b = util_float_to_half((float)(src[2] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16x16_uint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#else
      uint16_t r;
      uint16_t g;
      uint16_t b;
      uint16_t x;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16x16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_uint pixel;
         pixel.chan.r = (uint16_t)MIN2(src[0], 65535);
         pixel.chan.g = (uint16_t)MIN2(src[1], 65535);
         pixel.chan.b = (uint16_t)MIN2(src[2], 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16x16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)pixel.chan.r; /* r */
         dst[1] = (unsigned)pixel.chan.g; /* g */
         dst[2] = (unsigned)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16x16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_uint pixel;
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16g16b16x16_sint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t g;
      int16_t b;
      uint16_t x;
#else
      int16_t r;
      int16_t g;
      int16_t b;
      uint16_t x;
#endif
   } chan;
};

static INLINE void
util_format_r16g16b16x16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_sint pixel;
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16g16b16x16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)pixel.chan.r; /* r */
         dst[1] = (int)pixel.chan.g; /* g */
         dst[2] = (int)pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r16g16b16x16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r16g16b16x16_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16g16b16x16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16g16b16x16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16g16b16x16_sint pixel;
         pixel.chan.r = (int16_t)MIN2(src[0], 32767);
         pixel.chan.g = (int16_t)MIN2(src[1], 32767);
         pixel.chan.b = (int16_t)MIN2(src[2], 32767);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32x32_float {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float r;
      float g;
      float b;
      uint32_t x;
#else
      float r;
      float g;
      float b;
      uint32_t x;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32x32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32x32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32x32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#else
         union util_format_r32g32b32x32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = float_to_ubyte(pixel.chan.g); /* g */
         dst[2] = float_to_ubyte(pixel.chan.b); /* b */
         dst[3] = 255; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.g = ubyte_to_float(src[1]);
         pixel.chan.b = ubyte_to_float(src[2]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32x32_uint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t x;
#else
      uint32_t r;
      uint32_t g;
      uint32_t b;
      uint32_t x;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32x32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32x32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32x32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = (int)MIN2(pixel.chan.g, 2147483647); /* g */
         dst[2] = (int)MIN2(pixel.chan.b, 2147483647); /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.g = (uint32_t)MAX2(src[1], 0);
         pixel.chan.b = (uint32_t)MAX2(src[2], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32g32b32x32_sint {
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t g;
      int32_t b;
      uint32_t x;
#else
      int32_t r;
      int32_t g;
      int32_t b;
      uint32_t x;
#endif
   } chan;
};

static INLINE void
util_format_r32g32b32x32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.g = src[1];
         pixel.chan.b = src[2];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32g32b32x32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = pixel.chan.g; /* g */
         dst[2] = pixel.chan.b; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_r32g32b32x32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#else
         union util_format_r32g32b32x32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = (unsigned)MAX2(pixel.chan.g, 0); /* g */
         dst[2] = (unsigned)MAX2(pixel.chan.b, 0); /* b */
         dst[3] = 1; /* a */
#endif
         src += 16;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32g32b32x32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32g32b32x32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32g32b32x32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.g = (int32_t)MIN2(src[1], 2147483647);
         pixel.chan.b = (int32_t)MIN2(src[2], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 16;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8a8_snorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t a;
#else
      int8_t r;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8a8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8a8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
}

static INLINE void
util_format_r8a8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) << 8) ;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16a16_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t a;
#else
      uint16_t r;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16a16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16a16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
}

static INLINE void
util_format_r16a16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16a16_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t a;
#else
      int16_t r;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16a16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16a16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (float)(a * (1.0f/0x7fff)); /* a */
#endif
}

static INLINE void
util_format_r16a16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (uint8_t)(MAX2(a, 0) >> 7); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) << 16) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[3]) * 0x7fff / 0xff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16a16_float {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t a;
#else
      uint16_t r;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16a16_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16a16_float pixel;
         pixel.chan.r = util_float_to_half(src[0]);
         pixel.chan.a = util_float_to_half(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16a16_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#else
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = util_half_to_float(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = util_half_to_float(pixel.chan.a); /* a */
#endif
}

static INLINE void
util_format_r16a16_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#else
         union util_format_r16a16_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(util_half_to_float(pixel.chan.r)); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(util_half_to_float(pixel.chan.a)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r16a16_float pixel;
         pixel.chan.r = util_float_to_half((float)(src[0] * (1.0f/0xff)));
         pixel.chan.a = util_float_to_half((float)(src[3] * (1.0f/0xff)));
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32a32_float {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      float r;
      float a;
#else
      float r;
      float a;
#endif
   } chan;
};

static INLINE void
util_format_r32a32_float_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_float_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_float pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32a32_float_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32a32_float_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#else
         union util_format_r32a32_float pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = float_to_ubyte(pixel.chan.r); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = float_to_ubyte(pixel.chan.a); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_float_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_float pixel;
         pixel.chan.r = ubyte_to_float(src[0]);
         pixel.chan.a = ubyte_to_float(src[3]);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8a8_uint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t r;
      uint8_t a;
#else
      uint8_t r;
      uint8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8a8_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) << 8;
         value |= ((uint8_t)MIN2(src[3], 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)MIN2(src[0], 255)) & 0xff;
         value |= ((uint8_t)MIN2(src[3], 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8a8_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_r8a8_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = value >> 8;
         a = (value) & 0xff;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t r;
         uint16_t a;
         r = (value) & 0xff;
         a = value >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r8a8_sint {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t r;
      int8_t a;
#else
      int8_t r;
      int8_t a;
#endif
   } chan;
};

static INLINE void
util_format_r8a8_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[3], -128, 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[3], -128, 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r8a8_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
}

static INLINE void
util_format_r8a8_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value) ) >> 8;
         a = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t r;
         int16_t a;
         r = ((int16_t)(value << 8) ) >> 8;
         a = ((int16_t)(value) ) >> 8;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r8a8_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) << 8) ;
         value |= (uint16_t)(((int8_t)MIN2(src[3], 127)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)MIN2(src[0], 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)MIN2(src[3], 127)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16a16_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t r;
      uint16_t a;
#else
      uint16_t r;
      uint16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16a16_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) << 16;
         value |= ((uint16_t)MIN2(src[3], 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)MIN2(src[0], 65535)) & 0xffff;
         value |= ((uint16_t)MIN2(src[3], 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16a16_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (unsigned)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_r16a16_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = value >> 16;
         a = (value) & 0xffff;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t a;
         r = (value) & 0xffff;
         a = value >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) << 16;
         value |= ((uint16_t)CLAMP(src[3], 0, 65535)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[3], 0, 65535)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r16a16_sint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t r;
      int16_t a;
#else
      int16_t r;
      int16_t a;
#endif
   } chan;
};

static INLINE void
util_format_r16a16_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[3], -32768, 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[3], -32768, 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r16a16_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (int)r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)a; /* a */
#endif
}

static INLINE void
util_format_r16a16_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value) ) >> 16;
         a = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t r;
         int32_t a;
         r = ((int32_t)(value << 16) ) >> 16;
         a = ((int32_t)(value) ) >> 16;
         dst[0] = (unsigned)MAX2(r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(a, 0); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r16a16_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)MIN2(src[3], 32767)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)MIN2(src[0], 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)MIN2(src[3], 32767)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32a32_uint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint32_t r;
      uint32_t a;
#else
      uint32_t r;
      uint32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32a32_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_uint pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32a32_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32a32_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#else
         union util_format_r32a32_uint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (int)MIN2(pixel.chan.r, 2147483647); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (int)MIN2(pixel.chan.a, 2147483647); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_uint pixel;
         pixel.chan.r = (uint32_t)MAX2(src[0], 0);
         pixel.chan.a = (uint32_t)MAX2(src[3], 0);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r32a32_sint {
   uint64_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int32_t r;
      int32_t a;
#else
      int32_t r;
      int32_t a;
#endif
   } chan;
};

static INLINE void
util_format_r32a32_sint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_sint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_sint pixel;
         pixel.chan.r = src[0];
         pixel.chan.a = src[3];
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r32a32_sint_fetch_signed(int *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#else
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = pixel.chan.r; /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = pixel.chan.a; /* a */
#endif
}

static INLINE void
util_format_r32a32_sint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#else
         union util_format_r32a32_sint pixel;
         memcpy(&pixel, src, sizeof pixel);
         dst[0] = (unsigned)MAX2(pixel.chan.r, 0); /* r */
         dst[1] = 0; /* g */
         dst[2] = 0; /* b */
         dst[3] = (unsigned)MAX2(pixel.chan.a, 0); /* a */
#endif
         src += 8;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r32a32_sint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         union util_format_r32a32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#else
         union util_format_r32a32_sint pixel;
         pixel.chan.r = (int32_t)MIN2(src[0], 2147483647);
         pixel.chan.a = (int32_t)MIN2(src[3], 2147483647);
         memcpy(dst, &pixel, sizeof pixel);
#endif
         src += 4;
         dst += 8;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_r10g10b10a2_uint {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#else
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
#endif
   } chan;
};

static INLINE void
util_format_r10g10b10a2_uint_unpack_unsigned(unsigned *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      unsigned *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uint_pack_unsigned(uint8_t *dst_row, unsigned dst_stride, const unsigned *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const unsigned *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)MIN2(src[0], 1023)) << 22;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)MIN2(src[2], 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)MIN2(src[3], 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)MIN2(src[0], 1023)) & 0x3ff;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)MIN2(src[2], 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)MIN2(src[3], 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uint_fetch_unsigned(unsigned *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (unsigned)r; /* r */
         dst[1] = (unsigned)g; /* g */
         dst[2] = (unsigned)b; /* b */
         dst[3] = (unsigned)a; /* a */
#endif
}

static INLINE void
util_format_r10g10b10a2_uint_unpack_signed(int *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      int *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t r;
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value >> 20) & 0x3ff;
         a = value >> 30;
         dst[0] = (int)r; /* r */
         dst[1] = (int)g; /* g */
         dst[2] = (int)b; /* b */
         dst[3] = (int)a; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_r10g10b10a2_uint_pack_signed(uint8_t *dst_row, unsigned dst_stride, const int *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const int *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_b5g6r5_srgb {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      unsigned b:5;
      unsigned g:6;
      unsigned r:5;
#else
      unsigned b:5;
      unsigned g:6;
      unsigned r:5;
#endif
   } chan;
};

static INLINE void
util_format_b5g6r5_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b << 3 | b >> 2); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b << 3 | b >> 2); /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2]) >> 3) << 11;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1]) >> 2) & 0x3f) << 5;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0]) >> 3) & 0x1f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (util_format_linear_float_to_srgb_8unorm(src[2]) >> 3) & 0x1f;
         value |= ((util_format_linear_float_to_srgb_8unorm(src[1]) >> 2) & 0x3f) << 5;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0]) >> 3) << 11;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_b5g6r5_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b << 3 | b >> 2); /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = util_format_srgb_8unorm_to_linear_float(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(b << 3 | b >> 2); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_b5g6r5_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 5) & 0x3f;
         r = (value) & 0x1f;
         dst[0] = util_format_srgb_to_linear_8unorm(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b << 3 | b >> 2); /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t b;
         uint16_t g;
         uint16_t r;
         b = (value) & 0x1f;
         g = (value >> 5) & 0x3f;
         r = value >> 11;
         dst[0] = util_format_srgb_to_linear_8unorm(r << 3 | r >> 2); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(g << 2 | g >> 4); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(b << 3 | b >> 2); /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_b5g6r5_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2]) >> 3) << 11;
         value |= ((util_format_linear_to_srgb_8unorm(src[1]) >> 2) & 0x3f) << 5;
         value |= (util_format_linear_to_srgb_8unorm(src[0]) >> 3) & 0x1f;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (util_format_linear_to_srgb_8unorm(src[2]) >> 3) & 0x1f;
         value |= ((util_format_linear_to_srgb_8unorm(src[1]) >> 2) & 0x3f) << 5;
         value |= (util_format_linear_to_srgb_8unorm(src[0]) >> 3) << 11;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

const struct util_format_description
util_format_none_description = {
   PIPE_FORMAT_NONE,
   "PIPE_FORMAT_NONE",
   "none",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_none_unpack_rgba_8unorm,
   &util_format_none_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_none_unpack_rgba_float,
   &util_format_none_pack_rgba_float,
   &util_format_none_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b8g8r8a8_unorm_description = {
   PIPE_FORMAT_B8G8R8A8_UNORM,
   "PIPE_FORMAT_B8G8R8A8_UNORM",
   "b8g8r8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b8g8r8a8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8a8_unorm_unpack_rgba_float,
   &util_format_b8g8r8a8_unorm_pack_rgba_float,
   &util_format_b8g8r8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b8g8r8x8_unorm_description = {
   PIPE_FORMAT_B8G8R8X8_UNORM,
   "PIPE_FORMAT_B8G8R8X8_UNORM",
   "b8g8r8x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b8g8r8x8_unorm_unpack_rgba_8unorm,
   &util_format_b8g8r8x8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8x8_unorm_unpack_rgba_float,
   &util_format_b8g8r8x8_unorm_pack_rgba_float,
   &util_format_b8g8r8x8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8r8g8b8_unorm_description = {
   PIPE_FORMAT_A8R8G8B8_UNORM,
   "PIPE_FORMAT_A8R8G8B8_UNORM",
   "a8r8g8b8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = b */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = b */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_a8r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8r8g8b8_unorm_unpack_rgba_float,
   &util_format_a8r8g8b8_unorm_pack_rgba_float,
   &util_format_a8r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8r8g8b8_unorm_description = {
   PIPE_FORMAT_X8R8G8B8_UNORM,
   "PIPE_FORMAT_X8R8G8B8_UNORM",
   "x8r8g8b8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = b */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = b */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_x8r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_x8r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8r8g8b8_unorm_unpack_rgba_float,
   &util_format_x8r8g8b8_unorm_pack_rgba_float,
   &util_format_x8r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8b8g8r8_unorm_description = {
   PIPE_FORMAT_A8B8G8R8_UNORM,
   "PIPE_FORMAT_A8B8G8R8_UNORM",
   "a8b8g8r8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8b8g8r8_unorm_unpack_rgba_float,
   &util_format_a8b8g8r8_unorm_pack_rgba_float,
   &util_format_a8b8g8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8b8g8r8_unorm_description = {
   PIPE_FORMAT_X8B8G8R8_UNORM,
   "PIPE_FORMAT_X8B8G8R8_UNORM",
   "x8b8g8r8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_x8b8g8r8_unorm_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8b8g8r8_unorm_unpack_rgba_float,
   &util_format_x8b8g8r8_unorm_pack_rgba_float,
   &util_format_x8b8g8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8x8_unorm_description = {
   PIPE_FORMAT_R8G8B8X8_UNORM,
   "PIPE_FORMAT_R8G8B8X8_UNORM",
   "r8g8b8x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8x8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8x8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8x8_unorm_unpack_rgba_float,
   &util_format_r8g8b8x8_unorm_pack_rgba_float,
   &util_format_r8g8b8x8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b5g5r5x1_unorm_description = {
   PIPE_FORMAT_B5G5R5X1_UNORM,
   "PIPE_FORMAT_B5G5R5X1_UNORM",
   "b5g5r5x1_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 1},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 1, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 10},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 1, 15}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g5r5x1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5x1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g5r5x1_unorm_unpack_rgba_float,
   &util_format_b5g5r5x1_unorm_pack_rgba_float,
   &util_format_b5g5r5x1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b5g5r5a1_unorm_description = {
   PIPE_FORMAT_B5G5R5A1_UNORM,
   "PIPE_FORMAT_B5G5R5A1_UNORM",
   "b5g5r5a1_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 1},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 1, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 10},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 1, 15}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g5r5a1_unorm_unpack_rgba_8unorm,
   &util_format_b5g5r5a1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g5r5a1_unorm_unpack_rgba_float,
   &util_format_b5g5r5a1_unorm_pack_rgba_float,
   &util_format_b5g5r5a1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b4g4r4a4_unorm_description = {
   PIPE_FORMAT_B4G4R4A4_UNORM,
   "PIPE_FORMAT_B4G4R4A4_UNORM",
   "b4g4r4a4_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b4g4r4a4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4a4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b4g4r4a4_unorm_unpack_rgba_float,
   &util_format_b4g4r4a4_unorm_pack_rgba_float,
   &util_format_b4g4r4a4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b4g4r4x4_unorm_description = {
   PIPE_FORMAT_B4G4R4X4_UNORM,
   "PIPE_FORMAT_B4G4R4X4_UNORM",
   "b4g4r4x4_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 4, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 4, 12}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b4g4r4x4_unorm_unpack_rgba_8unorm,
   &util_format_b4g4r4x4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b4g4r4x4_unorm_unpack_rgba_float,
   &util_format_b4g4r4x4_unorm_pack_rgba_float,
   &util_format_b4g4r4x4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b5g6r5_unorm_description = {
   PIPE_FORMAT_B5G6R5_UNORM,
   "PIPE_FORMAT_B5G6R5_UNORM",
   "b5g6r5_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b5g6r5_unorm_unpack_rgba_8unorm,
   &util_format_b5g6r5_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g6r5_unorm_unpack_rgba_float,
   &util_format_b5g6r5_unorm_pack_rgba_float,
   &util_format_b5g6r5_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10a2_unorm_description = {
   PIPE_FORMAT_R10G10B10A2_UNORM,
   "PIPE_FORMAT_R10G10B10A2_UNORM",
   "r10g10b10a2_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_unorm_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_unorm_unpack_rgba_float,
   &util_format_r10g10b10a2_unorm_pack_rgba_float,
   &util_format_r10g10b10a2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10a2_unorm_description = {
   PIPE_FORMAT_B10G10R10A2_UNORM,
   "PIPE_FORMAT_B10G10R10A2_UNORM",
   "b10g10r10a2_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10a2_unorm_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10a2_unorm_unpack_rgba_float,
   &util_format_b10g10r10a2_unorm_pack_rgba_float,
   &util_format_b10g10r10a2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b2g3r3_unorm_description = {
   PIPE_FORMAT_B2G3R3_UNORM,
   "PIPE_FORMAT_B2G3R3_UNORM",
   "b2g3r3_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 6},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 3},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 0},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 2},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 5},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b2g3r3_unorm_unpack_rgba_8unorm,
   &util_format_b2g3r3_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b2g3r3_unorm_unpack_rgba_float,
   &util_format_b2g3r3_unorm_pack_rgba_float,
   &util_format_b2g3r3_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8_unorm_description = {
   PIPE_FORMAT_L8_UNORM,
   "PIPE_FORMAT_L8_UNORM",
   "l8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8_unorm_unpack_rgba_8unorm,
   &util_format_l8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_unorm_unpack_rgba_float,
   &util_format_l8_unorm_pack_rgba_float,
   &util_format_l8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8_unorm_description = {
   PIPE_FORMAT_A8_UNORM,
   "PIPE_FORMAT_A8_UNORM",
   "a8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8_unorm_unpack_rgba_8unorm,
   &util_format_a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8_unorm_unpack_rgba_float,
   &util_format_a8_unorm_pack_rgba_float,
   &util_format_a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i8_unorm_description = {
   PIPE_FORMAT_I8_UNORM,
   "PIPE_FORMAT_I8_UNORM",
   "i8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i8_unorm_unpack_rgba_8unorm,
   &util_format_i8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i8_unorm_unpack_rgba_float,
   &util_format_i8_unorm_pack_rgba_float,
   &util_format_i8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l4a4_unorm_description = {
   PIPE_FORMAT_L4A4_UNORM,
   "PIPE_FORMAT_L4A4_UNORM",
   "l4a4_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l4a4_unorm_unpack_rgba_8unorm,
   &util_format_l4a4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l4a4_unorm_unpack_rgba_float,
   &util_format_l4a4_unorm_pack_rgba_float,
   &util_format_l4a4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8a8_unorm_description = {
   PIPE_FORMAT_L8A8_UNORM,
   "PIPE_FORMAT_L8A8_UNORM",
   "l8a8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8a8_unorm_unpack_rgba_8unorm,
   &util_format_l8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_unorm_unpack_rgba_float,
   &util_format_l8a8_unorm_pack_rgba_float,
   &util_format_l8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16_unorm_description = {
   PIPE_FORMAT_L16_UNORM,
   "PIPE_FORMAT_L16_UNORM",
   "l16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_unorm_unpack_rgba_8unorm,
   &util_format_l16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_unorm_unpack_rgba_float,
   &util_format_l16_unorm_pack_rgba_float,
   &util_format_l16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16_unorm_description = {
   PIPE_FORMAT_A16_UNORM,
   "PIPE_FORMAT_A16_UNORM",
   "a16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_unorm_unpack_rgba_8unorm,
   &util_format_a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_unorm_unpack_rgba_float,
   &util_format_a16_unorm_pack_rgba_float,
   &util_format_a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i16_unorm_description = {
   PIPE_FORMAT_I16_UNORM,
   "PIPE_FORMAT_I16_UNORM",
   "i16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_unorm_unpack_rgba_8unorm,
   &util_format_i16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_unorm_unpack_rgba_float,
   &util_format_i16_unorm_pack_rgba_float,
   &util_format_i16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16a16_unorm_description = {
   PIPE_FORMAT_L16A16_UNORM,
   "PIPE_FORMAT_L16A16_UNORM",
   "l16a16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_unorm_unpack_rgba_8unorm,
   &util_format_l16a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_unorm_unpack_rgba_float,
   &util_format_l16a16_unorm_pack_rgba_float,
   &util_format_l16a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8_snorm_description = {
   PIPE_FORMAT_A8_SNORM,
   "PIPE_FORMAT_A8_SNORM",
   "a8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8_snorm_unpack_rgba_8unorm,
   &util_format_a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8_snorm_unpack_rgba_float,
   &util_format_a8_snorm_pack_rgba_float,
   &util_format_a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8_snorm_description = {
   PIPE_FORMAT_L8_SNORM,
   "PIPE_FORMAT_L8_SNORM",
   "l8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8_snorm_unpack_rgba_8unorm,
   &util_format_l8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_snorm_unpack_rgba_float,
   &util_format_l8_snorm_pack_rgba_float,
   &util_format_l8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8a8_snorm_description = {
   PIPE_FORMAT_L8A8_SNORM,
   "PIPE_FORMAT_L8A8_SNORM",
   "l8a8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l8a8_snorm_unpack_rgba_8unorm,
   &util_format_l8a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_snorm_unpack_rgba_float,
   &util_format_l8a8_snorm_pack_rgba_float,
   &util_format_l8a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i8_snorm_description = {
   PIPE_FORMAT_I8_SNORM,
   "PIPE_FORMAT_I8_SNORM",
   "i8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i8_snorm_unpack_rgba_8unorm,
   &util_format_i8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i8_snorm_unpack_rgba_float,
   &util_format_i8_snorm_pack_rgba_float,
   &util_format_i8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16_snorm_description = {
   PIPE_FORMAT_A16_SNORM,
   "PIPE_FORMAT_A16_SNORM",
   "a16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_snorm_unpack_rgba_8unorm,
   &util_format_a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_snorm_unpack_rgba_float,
   &util_format_a16_snorm_pack_rgba_float,
   &util_format_a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16_snorm_description = {
   PIPE_FORMAT_L16_SNORM,
   "PIPE_FORMAT_L16_SNORM",
   "l16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_snorm_unpack_rgba_8unorm,
   &util_format_l16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_snorm_unpack_rgba_float,
   &util_format_l16_snorm_pack_rgba_float,
   &util_format_l16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16a16_snorm_description = {
   PIPE_FORMAT_L16A16_SNORM,
   "PIPE_FORMAT_L16A16_SNORM",
   "l16a16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_snorm_unpack_rgba_8unorm,
   &util_format_l16a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_snorm_unpack_rgba_float,
   &util_format_l16a16_snorm_pack_rgba_float,
   &util_format_l16a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i16_snorm_description = {
   PIPE_FORMAT_I16_SNORM,
   "PIPE_FORMAT_I16_SNORM",
   "i16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_snorm_unpack_rgba_8unorm,
   &util_format_i16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_snorm_unpack_rgba_float,
   &util_format_i16_snorm_pack_rgba_float,
   &util_format_i16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16_float_description = {
   PIPE_FORMAT_A16_FLOAT,
   "PIPE_FORMAT_A16_FLOAT",
   "a16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16_float_unpack_rgba_8unorm,
   &util_format_a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16_float_unpack_rgba_float,
   &util_format_a16_float_pack_rgba_float,
   &util_format_a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16_float_description = {
   PIPE_FORMAT_L16_FLOAT,
   "PIPE_FORMAT_L16_FLOAT",
   "l16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16_float_unpack_rgba_8unorm,
   &util_format_l16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16_float_unpack_rgba_float,
   &util_format_l16_float_pack_rgba_float,
   &util_format_l16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16a16_float_description = {
   PIPE_FORMAT_L16A16_FLOAT,
   "PIPE_FORMAT_L16A16_FLOAT",
   "l16a16_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l16a16_float_unpack_rgba_8unorm,
   &util_format_l16a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l16a16_float_unpack_rgba_float,
   &util_format_l16a16_float_pack_rgba_float,
   &util_format_l16a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i16_float_description = {
   PIPE_FORMAT_I16_FLOAT,
   "PIPE_FORMAT_I16_FLOAT",
   "i16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i16_float_unpack_rgba_8unorm,
   &util_format_i16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i16_float_unpack_rgba_float,
   &util_format_i16_float_pack_rgba_float,
   &util_format_i16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a32_float_description = {
   PIPE_FORMAT_A32_FLOAT,
   "PIPE_FORMAT_A32_FLOAT",
   "a32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a32_float_unpack_rgba_8unorm,
   &util_format_a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a32_float_unpack_rgba_float,
   &util_format_a32_float_pack_rgba_float,
   &util_format_a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32_float_description = {
   PIPE_FORMAT_L32_FLOAT,
   "PIPE_FORMAT_L32_FLOAT",
   "l32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l32_float_unpack_rgba_8unorm,
   &util_format_l32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l32_float_unpack_rgba_float,
   &util_format_l32_float_pack_rgba_float,
   &util_format_l32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32a32_float_description = {
   PIPE_FORMAT_L32A32_FLOAT,
   "PIPE_FORMAT_L32A32_FLOAT",
   "l32a32_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_l32a32_float_unpack_rgba_8unorm,
   &util_format_l32a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l32a32_float_unpack_rgba_float,
   &util_format_l32a32_float_pack_rgba_float,
   &util_format_l32a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i32_float_description = {
   PIPE_FORMAT_I32_FLOAT,
   "PIPE_FORMAT_I32_FLOAT",
   "i32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_i32_float_unpack_rgba_8unorm,
   &util_format_i32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_i32_float_unpack_rgba_float,
   &util_format_i32_float_pack_rgba_float,
   &util_format_i32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8_srgb_description = {
   PIPE_FORMAT_L8_SRGB,
   "PIPE_FORMAT_L8_SRGB",
   "l8_srgb",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_X,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_l8_srgb_unpack_rgba_8unorm,
   &util_format_l8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8_srgb_unpack_rgba_float,
   &util_format_l8_srgb_pack_rgba_float,
   &util_format_l8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8a8_srgb_description = {
   PIPE_FORMAT_L8A8_SRGB,
   "PIPE_FORMAT_L8A8_SRGB",
   "l8a8_srgb",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_X,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_X,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_l8a8_srgb_unpack_rgba_8unorm,
   &util_format_l8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_l8a8_srgb_unpack_rgba_float,
   &util_format_l8a8_srgb_pack_rgba_float,
   &util_format_l8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_srgb_description = {
   PIPE_FORMAT_R8G8B8_SRGB,
   "PIPE_FORMAT_R8G8B8_SRGB",
   "r8g8b8_srgb",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_srgb_unpack_rgba_float,
   &util_format_r8g8b8_srgb_pack_rgba_float,
   &util_format_r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_srgb_description = {
   PIPE_FORMAT_R8G8B8A8_SRGB,
   "PIPE_FORMAT_R8G8B8A8_SRGB",
   "r8g8b8a8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_r8g8b8a8_srgb_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_srgb_unpack_rgba_float,
   &util_format_r8g8b8a8_srgb_pack_rgba_float,
   &util_format_r8g8b8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8b8g8r8_srgb_description = {
   PIPE_FORMAT_A8B8G8R8_SRGB,
   "PIPE_FORMAT_A8B8G8R8_SRGB",
   "a8b8g8r8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_a8b8g8r8_srgb_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8b8g8r8_srgb_unpack_rgba_float,
   &util_format_a8b8g8r8_srgb_pack_rgba_float,
   &util_format_a8b8g8r8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8b8g8r8_srgb_description = {
   PIPE_FORMAT_X8B8G8R8_SRGB,
   "PIPE_FORMAT_X8B8G8R8_SRGB",
   "x8b8g8r8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_x8b8g8r8_srgb_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8b8g8r8_srgb_unpack_rgba_float,
   &util_format_x8b8g8r8_srgb_pack_rgba_float,
   &util_format_x8b8g8r8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b8g8r8a8_srgb_description = {
   PIPE_FORMAT_B8G8R8A8_SRGB,
   "PIPE_FORMAT_B8G8R8A8_SRGB",
   "b8g8r8a8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_b8g8r8a8_srgb_unpack_rgba_8unorm,
   &util_format_b8g8r8a8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8a8_srgb_unpack_rgba_float,
   &util_format_b8g8r8a8_srgb_pack_rgba_float,
   &util_format_b8g8r8a8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b8g8r8x8_srgb_description = {
   PIPE_FORMAT_B8G8R8X8_SRGB,
   "PIPE_FORMAT_B8G8R8X8_SRGB",
   "b8g8r8x8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_b8g8r8x8_srgb_unpack_rgba_8unorm,
   &util_format_b8g8r8x8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b8g8r8x8_srgb_unpack_rgba_float,
   &util_format_b8g8r8x8_srgb_pack_rgba_float,
   &util_format_b8g8r8x8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8r8g8b8_srgb_description = {
   PIPE_FORMAT_A8R8G8B8_SRGB,
   "PIPE_FORMAT_A8R8G8B8_SRGB",
   "a8r8g8b8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = b */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = b */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_a8r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_a8r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8r8g8b8_srgb_unpack_rgba_float,
   &util_format_a8r8g8b8_srgb_pack_rgba_float,
   &util_format_a8r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8r8g8b8_srgb_description = {
   PIPE_FORMAT_X8R8G8B8_SRGB,
   "PIPE_FORMAT_X8R8G8B8_SRGB",
   "x8r8g8b8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = b */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = b */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Z,	/* sg */
      UTIL_FORMAT_SWIZZLE_W,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_x8r8g8b8_srgb_unpack_rgba_8unorm,
   &util_format_x8r8g8b8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8r8g8b8_srgb_unpack_rgba_float,
   &util_format_x8r8g8b8_srgb_pack_rgba_float,
   &util_format_x8r8g8b8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8sg8sb8ux8u_norm_description = {
   PIPE_FORMAT_R8SG8SB8UX8U_NORM,
   "PIPE_FORMAT_R8SG8SB8UX8U_NORM",
   "r8sg8sb8ux8u_norm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8sg8sb8ux8u_norm_unpack_rgba_8unorm,
   &util_format_r8sg8sb8ux8u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8sg8sb8ux8u_norm_unpack_rgba_float,
   &util_format_r8sg8sb8ux8u_norm_pack_rgba_float,
   &util_format_r8sg8sb8ux8u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10sg10sb10sa2u_norm_description = {
   PIPE_FORMAT_R10SG10SB10SA2U_NORM,
   "PIPE_FORMAT_R10SG10SB10SA2U_NORM",
   "r10sg10sb10sa2u_norm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10sg10sb10sa2u_norm_unpack_rgba_8unorm,
   &util_format_r10sg10sb10sa2u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10sg10sb10sa2u_norm_unpack_rgba_float,
   &util_format_r10sg10sb10sa2u_norm_pack_rgba_float,
   &util_format_r10sg10sb10sa2u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r5sg5sb6u_norm_description = {
   PIPE_FORMAT_R5SG5SB6U_NORM,
   "PIPE_FORMAT_R5SG5SB6U_NORM",
   "r5sg5sb6u_norm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 11},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 10},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r5sg5sb6u_norm_unpack_rgba_8unorm,
   &util_format_r5sg5sb6u_norm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r5sg5sb6u_norm_unpack_rgba_float,
   &util_format_r5sg5sb6u_norm_pack_rgba_float,
   &util_format_r5sg5sb6u_norm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_s8_uint_description = {
   PIPE_FORMAT_S8_UINT,
   "PIPE_FORMAT_S8_UINT",
   "s8_uint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = s */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_s8_uint_unpack_s_8uint,
   &util_format_s8_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z16_unorm_description = {
   PIPE_FORMAT_Z16_UNORM,
   "PIPE_FORMAT_Z16_UNORM",
   "z16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z16_unorm_unpack_z_32unorm,
   &util_format_z16_unorm_pack_z_32unorm,
   &util_format_z16_unorm_unpack_z_float,
   &util_format_z16_unorm_pack_z_float,
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z32_unorm_description = {
   PIPE_FORMAT_Z32_UNORM,
   "PIPE_FORMAT_Z32_UNORM",
   "z32_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* x = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_unorm_unpack_z_32unorm,
   &util_format_z32_unorm_pack_z_32unorm,
   &util_format_z32_unorm_unpack_z_float,
   &util_format_z32_unorm_pack_z_float,
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z32_float_description = {
   PIPE_FORMAT_Z32_FLOAT,
   "PIPE_FORMAT_Z32_FLOAT",
   "z32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_float_unpack_z_32unorm,
   &util_format_z32_float_pack_z_32unorm,
   &util_format_z32_float_unpack_z_float,
   &util_format_z32_float_pack_z_float,
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z24_unorm_s8_uint_description = {
   PIPE_FORMAT_Z24_UNORM_S8_UINT,
   "PIPE_FORMAT_Z24_UNORM_S8_UINT",
   "z24_unorm_s8_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z24_unorm_s8_uint_unpack_z_32unorm,
   &util_format_z24_unorm_s8_uint_pack_z_32unorm,
   &util_format_z24_unorm_s8_uint_unpack_z_float,
   &util_format_z24_unorm_s8_uint_pack_z_float,
   &util_format_z24_unorm_s8_uint_unpack_s_8uint,
   &util_format_z24_unorm_s8_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_s8_uint_z24_unorm_description = {
   PIPE_FORMAT_S8_UINT_Z24_UNORM,
   "PIPE_FORMAT_S8_UINT_Z24_UNORM",
   "s8_uint_z24_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = s */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* y = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_s8_uint_z24_unorm_unpack_z_32unorm,
   &util_format_s8_uint_z24_unorm_pack_z_32unorm,
   &util_format_s8_uint_z24_unorm_unpack_z_float,
   &util_format_s8_uint_z24_unorm_pack_z_float,
   &util_format_s8_uint_z24_unorm_unpack_s_8uint,
   &util_format_s8_uint_z24_unorm_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x24s8_uint_description = {
   PIPE_FORMAT_X24S8_UINT,
   "PIPE_FORMAT_X24S8_UINT",
   "x24s8_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_x24s8_uint_unpack_s_8uint,
   &util_format_x24s8_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_s8x24_uint_description = {
   PIPE_FORMAT_S8X24_UINT,
   "PIPE_FORMAT_S8X24_UINT",
   "s8x24_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* y = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* y = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_s8x24_uint_unpack_s_8uint,
   &util_format_s8x24_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z24x8_unorm_description = {
   PIPE_FORMAT_Z24X8_UNORM,
   "PIPE_FORMAT_Z24X8_UNORM",
   "z24x8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* y = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* x = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* y = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z24x8_unorm_unpack_z_32unorm,
   &util_format_z24x8_unorm_pack_z_32unorm,
   &util_format_z24x8_unorm_unpack_z_float,
   &util_format_z24x8_unorm_pack_z_float,
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8z24_unorm_description = {
   PIPE_FORMAT_X8Z24_UNORM,
   "PIPE_FORMAT_X8Z24_UNORM",
   "x8z24_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* y = z */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_NONE,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_x8z24_unorm_unpack_z_32unorm,
   &util_format_x8z24_unorm_pack_z_32unorm,
   &util_format_x8z24_unorm_unpack_z_float,
   &util_format_x8z24_unorm_pack_z_float,
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_z32_float_s8x24_uint_description = {
   PIPE_FORMAT_Z32_FLOAT_S8X24_UINT,
   "PIPE_FORMAT_Z32_FLOAT_S8X24_UINT",
   "z32_float_s8x24_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   TRUE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* z = x */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 32},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 40},	/* z = x */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   &util_format_z32_float_s8x24_uint_unpack_z_32unorm,
   &util_format_z32_float_s8x24_uint_pack_z_32unorm,
   &util_format_z32_float_s8x24_uint_unpack_z_float,
   &util_format_z32_float_s8x24_uint_pack_z_float,
   &util_format_z32_float_s8x24_uint_unpack_s_8uint,
   &util_format_z32_float_s8x24_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x32_s8x24_uint_description = {
   PIPE_FORMAT_X32_S8X24_UINT,
   "PIPE_FORMAT_X32_S8X24_UINT",
   "x32_s8x24_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 32},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* z = x */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 32},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 40},	/* z = x */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_NONE,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
      UTIL_FORMAT_SWIZZLE_NONE,	/* ignored */
      UTIL_FORMAT_SWIZZLE_NONE	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_ZS,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   &util_format_x32_s8x24_uint_unpack_s_8uint,
   &util_format_x32_s8x24_uint_pack_s_8uint,
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_uyvy_description = {
   PIPE_FORMAT_UYVY,
   "PIPE_FORMAT_UYVY",
   "uyvy",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_1	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_uyvy_unpack_rgba_8unorm,
   &util_format_uyvy_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_uyvy_unpack_rgba_float,
   &util_format_uyvy_pack_rgba_float,
   &util_format_uyvy_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_yuyv_description = {
   PIPE_FORMAT_YUYV,
   "PIPE_FORMAT_YUYV",
   "yuyv",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_1	/* ignored */
   },
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_yuyv_unpack_rgba_8unorm,
   &util_format_yuyv_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_yuyv_unpack_rgba_float,
   &util_format_yuyv_pack_rgba_float,
   &util_format_yuyv_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_b8g8_unorm_description = {
   PIPE_FORMAT_R8G8_B8G8_UNORM,
   "PIPE_FORMAT_R8G8_B8G8_UNORM",
   "r8g8_b8g8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_b8g8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8_b8g8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_b8g8_unorm_unpack_rgba_float,
   &util_format_r8g8_b8g8_unorm_pack_rgba_float,
   &util_format_r8g8_b8g8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g8r8_g8b8_unorm_description = {
   PIPE_FORMAT_G8R8_G8B8_UNORM,
   "PIPE_FORMAT_G8R8_G8B8_UNORM",
   "g8r8_g8b8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g8r8_g8b8_unorm_unpack_rgba_8unorm,
   &util_format_g8r8_g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g8r8_g8b8_unorm_unpack_rgba_float,
   &util_format_g8r8_g8b8_unorm_pack_rgba_float,
   &util_format_g8r8_g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g8r8_b8r8_unorm_description = {
   PIPE_FORMAT_G8R8_B8R8_UNORM,
   "PIPE_FORMAT_G8R8_B8R8_UNORM",
   "g8r8_b8r8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g8r8_b8r8_unorm_unpack_rgba_8unorm,
   &util_format_g8r8_b8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g8r8_b8r8_unorm_unpack_rgba_float,
   &util_format_g8r8_b8r8_unorm_pack_rgba_float,
   &util_format_g8r8_b8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_r8b8_unorm_description = {
   PIPE_FORMAT_R8G8_R8B8_UNORM,
   "PIPE_FORMAT_R8G8_R8B8_UNORM",
   "r8g8_r8b8_unorm",
   {2, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_SUBSAMPLED,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_r8b8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8_r8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_r8b8_unorm_unpack_rgba_float,
   &util_format_r8g8_r8b8_unorm_pack_rgba_float,
   &util_format_r8g8_r8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r11g11b10_float_description = {
   PIPE_FORMAT_R11G11B10_FLOAT,
   "PIPE_FORMAT_R11G11B10_FLOAT",
   "r11g11b10_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r11g11b10_float_unpack_rgba_8unorm,
   &util_format_r11g11b10_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r11g11b10_float_unpack_rgba_float,
   &util_format_r11g11b10_float_pack_rgba_float,
   &util_format_r11g11b10_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r9g9b9e5_float_description = {
   PIPE_FORMAT_R9G9B9E5_FLOAT,
   "PIPE_FORMAT_R9G9B9E5_FLOAT",
   "r9g9b9e5_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r9g9b9e5_float_unpack_rgba_8unorm,
   &util_format_r9g9b9e5_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r9g9b9e5_float_unpack_rgba_float,
   &util_format_r9g9b9e5_float_pack_rgba_float,
   &util_format_r9g9b9e5_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r1_unorm_description = {
   PIPE_FORMAT_R1_UNORM,
   "PIPE_FORMAT_R1_UNORM",
   "r1_unorm",
   {8, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r1_unorm_unpack_rgba_8unorm,
   &util_format_r1_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r1_unorm_unpack_rgba_float,
   &util_format_r1_unorm_pack_rgba_float,
   &util_format_r1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8bx_snorm_description = {
   PIPE_FORMAT_R8G8Bx_SNORM,
   "PIPE_FORMAT_R8G8Bx_SNORM",
   "r8g8bx_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = y */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = y */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8bx_snorm_unpack_rgba_8unorm,
   &util_format_r8g8bx_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8bx_snorm_unpack_rgba_float,
   &util_format_r8g8bx_snorm_pack_rgba_float,
   &util_format_r8g8bx_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt1_rgb_description = {
   PIPE_FORMAT_DXT1_RGB,
   "PIPE_FORMAT_DXT1_RGB",
   "dxt1_rgb",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt1_rgb_unpack_rgba_8unorm,
   &util_format_dxt1_rgb_pack_rgba_8unorm,
   &util_format_dxt1_rgb_fetch_rgba_8unorm,
   &util_format_dxt1_rgb_unpack_rgba_float,
   &util_format_dxt1_rgb_pack_rgba_float,
   &util_format_dxt1_rgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt1_rgba_description = {
   PIPE_FORMAT_DXT1_RGBA,
   "PIPE_FORMAT_DXT1_RGBA",
   "dxt1_rgba",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt1_rgba_unpack_rgba_8unorm,
   &util_format_dxt1_rgba_pack_rgba_8unorm,
   &util_format_dxt1_rgba_fetch_rgba_8unorm,
   &util_format_dxt1_rgba_unpack_rgba_float,
   &util_format_dxt1_rgba_pack_rgba_float,
   &util_format_dxt1_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt3_rgba_description = {
   PIPE_FORMAT_DXT3_RGBA,
   "PIPE_FORMAT_DXT3_RGBA",
   "dxt3_rgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt3_rgba_unpack_rgba_8unorm,
   &util_format_dxt3_rgba_pack_rgba_8unorm,
   &util_format_dxt3_rgba_fetch_rgba_8unorm,
   &util_format_dxt3_rgba_unpack_rgba_float,
   &util_format_dxt3_rgba_pack_rgba_float,
   &util_format_dxt3_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt5_rgba_description = {
   PIPE_FORMAT_DXT5_RGBA,
   "PIPE_FORMAT_DXT5_RGBA",
   "dxt5_rgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_dxt5_rgba_unpack_rgba_8unorm,
   &util_format_dxt5_rgba_pack_rgba_8unorm,
   &util_format_dxt5_rgba_fetch_rgba_8unorm,
   &util_format_dxt5_rgba_unpack_rgba_float,
   &util_format_dxt5_rgba_pack_rgba_float,
   &util_format_dxt5_rgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt1_srgb_description = {
   PIPE_FORMAT_DXT1_SRGB,
   "PIPE_FORMAT_DXT1_SRGB",
   "dxt1_srgb",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt1_srgb_unpack_rgba_8unorm,
   &util_format_dxt1_srgb_pack_rgba_8unorm,
   &util_format_dxt1_srgb_fetch_rgba_8unorm,
   &util_format_dxt1_srgb_unpack_rgba_float,
   &util_format_dxt1_srgb_pack_rgba_float,
   &util_format_dxt1_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt1_srgba_description = {
   PIPE_FORMAT_DXT1_SRGBA,
   "PIPE_FORMAT_DXT1_SRGBA",
   "dxt1_srgba",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt1_srgba_unpack_rgba_8unorm,
   &util_format_dxt1_srgba_pack_rgba_8unorm,
   &util_format_dxt1_srgba_fetch_rgba_8unorm,
   &util_format_dxt1_srgba_unpack_rgba_float,
   &util_format_dxt1_srgba_pack_rgba_float,
   &util_format_dxt1_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt3_srgba_description = {
   PIPE_FORMAT_DXT3_SRGBA,
   "PIPE_FORMAT_DXT3_SRGBA",
   "dxt3_srgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt3_srgba_unpack_rgba_8unorm,
   &util_format_dxt3_srgba_pack_rgba_8unorm,
   &util_format_dxt3_srgba_fetch_rgba_8unorm,
   &util_format_dxt3_srgba_unpack_rgba_float,
   &util_format_dxt3_srgba_pack_rgba_float,
   &util_format_dxt3_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_dxt5_srgba_description = {
   PIPE_FORMAT_DXT5_SRGBA,
   "PIPE_FORMAT_DXT5_SRGBA",
   "dxt5_srgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_S3TC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_dxt5_srgba_unpack_rgba_8unorm,
   &util_format_dxt5_srgba_pack_rgba_8unorm,
   &util_format_dxt5_srgba_fetch_rgba_8unorm,
   &util_format_dxt5_srgba_unpack_rgba_float,
   &util_format_dxt5_srgba_pack_rgba_float,
   &util_format_dxt5_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_rgtc1_unorm_description = {
   PIPE_FORMAT_RGTC1_UNORM,
   "PIPE_FORMAT_RGTC1_UNORM",
   "rgtc1_unorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc1_unorm_unpack_rgba_8unorm,
   &util_format_rgtc1_unorm_pack_rgba_8unorm,
   &util_format_rgtc1_unorm_fetch_rgba_8unorm,
   &util_format_rgtc1_unorm_unpack_rgba_float,
   &util_format_rgtc1_unorm_pack_rgba_float,
   &util_format_rgtc1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_rgtc1_snorm_description = {
   PIPE_FORMAT_RGTC1_SNORM,
   "PIPE_FORMAT_RGTC1_SNORM",
   "rgtc1_snorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc1_snorm_unpack_rgba_8unorm,
   &util_format_rgtc1_snorm_pack_rgba_8unorm,
   &util_format_rgtc1_snorm_fetch_rgba_8unorm,
   &util_format_rgtc1_snorm_unpack_rgba_float,
   &util_format_rgtc1_snorm_pack_rgba_float,
   &util_format_rgtc1_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_rgtc2_unorm_description = {
   PIPE_FORMAT_RGTC2_UNORM,
   "PIPE_FORMAT_RGTC2_UNORM",
   "rgtc2_unorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc2_unorm_unpack_rgba_8unorm,
   &util_format_rgtc2_unorm_pack_rgba_8unorm,
   &util_format_rgtc2_unorm_fetch_rgba_8unorm,
   &util_format_rgtc2_unorm_unpack_rgba_float,
   &util_format_rgtc2_unorm_pack_rgba_float,
   &util_format_rgtc2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_rgtc2_snorm_description = {
   PIPE_FORMAT_RGTC2_SNORM,
   "PIPE_FORMAT_RGTC2_SNORM",
   "rgtc2_snorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_rgtc2_snorm_unpack_rgba_8unorm,
   &util_format_rgtc2_snorm_pack_rgba_8unorm,
   &util_format_rgtc2_snorm_fetch_rgba_8unorm,
   &util_format_rgtc2_snorm_unpack_rgba_float,
   &util_format_rgtc2_snorm_pack_rgba_float,
   &util_format_rgtc2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_latc1_unorm_description = {
   PIPE_FORMAT_LATC1_UNORM,
   "PIPE_FORMAT_LATC1_UNORM",
   "latc1_unorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc1_unorm_unpack_rgba_8unorm,
   &util_format_latc1_unorm_pack_rgba_8unorm,
   &util_format_latc1_unorm_fetch_rgba_8unorm,
   &util_format_latc1_unorm_unpack_rgba_float,
   &util_format_latc1_unorm_pack_rgba_float,
   &util_format_latc1_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_latc1_snorm_description = {
   PIPE_FORMAT_LATC1_SNORM,
   "PIPE_FORMAT_LATC1_SNORM",
   "latc1_snorm",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc1_snorm_unpack_rgba_8unorm,
   &util_format_latc1_snorm_pack_rgba_8unorm,
   &util_format_latc1_snorm_fetch_rgba_8unorm,
   &util_format_latc1_snorm_unpack_rgba_float,
   &util_format_latc1_snorm_pack_rgba_float,
   &util_format_latc1_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_latc2_unorm_description = {
   PIPE_FORMAT_LATC2_UNORM,
   "PIPE_FORMAT_LATC2_UNORM",
   "latc2_unorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc2_unorm_unpack_rgba_8unorm,
   &util_format_latc2_unorm_pack_rgba_8unorm,
   &util_format_latc2_unorm_fetch_rgba_8unorm,
   &util_format_latc2_unorm_unpack_rgba_float,
   &util_format_latc2_unorm_pack_rgba_float,
   &util_format_latc2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_latc2_snorm_description = {
   PIPE_FORMAT_LATC2_SNORM,
   "PIPE_FORMAT_LATC2_SNORM",
   "latc2_snorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_RGTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_latc2_snorm_unpack_rgba_8unorm,
   &util_format_latc2_snorm_pack_rgba_8unorm,
   &util_format_latc2_snorm_fetch_rgba_8unorm,
   &util_format_latc2_snorm_unpack_rgba_float,
   &util_format_latc2_snorm_pack_rgba_float,
   &util_format_latc2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_etc1_rgb8_description = {
   PIPE_FORMAT_ETC1_RGB8,
   "PIPE_FORMAT_ETC1_RGB8",
   "etc1_rgb8",
   {4, 4, 64},	/* block */
   UTIL_FORMAT_LAYOUT_ETC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 64, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_etc1_rgb8_unpack_rgba_8unorm,
   &util_format_etc1_rgb8_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_etc1_rgb8_unpack_rgba_float,
   &util_format_etc1_rgb8_pack_rgba_float,
   &util_format_etc1_rgb8_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r64_float_description = {
   PIPE_FORMAT_R64_FLOAT,
   "PIPE_FORMAT_R64_FLOAT",
   "r64_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64_float_unpack_rgba_8unorm,
   &util_format_r64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64_float_unpack_rgba_float,
   &util_format_r64_float_pack_rgba_float,
   &util_format_r64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r64g64_float_description = {
   PIPE_FORMAT_R64G64_FLOAT,
   "PIPE_FORMAT_R64G64_FLOAT",
   "r64g64_float",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64_float_unpack_rgba_8unorm,
   &util_format_r64g64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64_float_unpack_rgba_float,
   &util_format_r64g64_float_pack_rgba_float,
   &util_format_r64g64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r64g64b64_float_description = {
   PIPE_FORMAT_R64G64B64_FLOAT,
   "PIPE_FORMAT_R64G64B64_FLOAT",
   "r64g64b64_float",
   {1, 1, 192},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 128},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 128},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64b64_float_unpack_rgba_8unorm,
   &util_format_r64g64b64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64b64_float_unpack_rgba_float,
   &util_format_r64g64b64_float_pack_rgba_float,
   &util_format_r64g64b64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r64g64b64a64_float_description = {
   PIPE_FORMAT_R64G64B64A64_FLOAT,
   "PIPE_FORMAT_R64G64B64A64_FLOAT",
   "r64g64b64a64_float",
   {1, 1, 256},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 192},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 128},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 128},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 64, 192}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r64g64b64a64_float_unpack_rgba_8unorm,
   &util_format_r64g64b64a64_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r64g64b64a64_float_unpack_rgba_float,
   &util_format_r64g64b64a64_float_pack_rgba_float,
   &util_format_r64g64b64a64_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_float_description = {
   PIPE_FORMAT_R32_FLOAT,
   "PIPE_FORMAT_R32_FLOAT",
   "r32_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_float_unpack_rgba_8unorm,
   &util_format_r32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_float_unpack_rgba_float,
   &util_format_r32_float_pack_rgba_float,
   &util_format_r32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_float_description = {
   PIPE_FORMAT_R32G32_FLOAT,
   "PIPE_FORMAT_R32G32_FLOAT",
   "r32g32_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_float_unpack_rgba_8unorm,
   &util_format_r32g32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_float_unpack_rgba_float,
   &util_format_r32g32_float_pack_rgba_float,
   &util_format_r32g32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_float_description = {
   PIPE_FORMAT_R32G32B32_FLOAT,
   "PIPE_FORMAT_R32G32B32_FLOAT",
   "r32g32b32_float",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_float_unpack_rgba_8unorm,
   &util_format_r32g32b32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_float_unpack_rgba_float,
   &util_format_r32g32b32_float_pack_rgba_float,
   &util_format_r32g32b32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_float_description = {
   PIPE_FORMAT_R32G32B32A32_FLOAT,
   "PIPE_FORMAT_R32G32B32A32_FLOAT",
   "r32g32b32a32_float",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_float_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_float_unpack_rgba_float,
   &util_format_r32g32b32a32_float_pack_rgba_float,
   &util_format_r32g32b32a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_unorm_description = {
   PIPE_FORMAT_R32_UNORM,
   "PIPE_FORMAT_R32_UNORM",
   "r32_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_unorm_unpack_rgba_8unorm,
   &util_format_r32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_unorm_unpack_rgba_float,
   &util_format_r32_unorm_pack_rgba_float,
   &util_format_r32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_unorm_description = {
   PIPE_FORMAT_R32G32_UNORM,
   "PIPE_FORMAT_R32G32_UNORM",
   "r32g32_unorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_unorm_unpack_rgba_float,
   &util_format_r32g32_unorm_pack_rgba_float,
   &util_format_r32g32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_unorm_description = {
   PIPE_FORMAT_R32G32B32_UNORM,
   "PIPE_FORMAT_R32G32B32_UNORM",
   "r32g32b32_unorm",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32b32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_unorm_unpack_rgba_float,
   &util_format_r32g32b32_unorm_pack_rgba_float,
   &util_format_r32g32b32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_unorm_description = {
   PIPE_FORMAT_R32G32B32A32_UNORM,
   "PIPE_FORMAT_R32G32B32A32_UNORM",
   "r32g32b32a32_unorm",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_unorm_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_unorm_unpack_rgba_float,
   &util_format_r32g32b32a32_unorm_pack_rgba_float,
   &util_format_r32g32b32a32_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_uscaled_description = {
   PIPE_FORMAT_R32_USCALED,
   "PIPE_FORMAT_R32_USCALED",
   "r32_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_uscaled_unpack_rgba_8unorm,
   &util_format_r32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_uscaled_unpack_rgba_float,
   &util_format_r32_uscaled_pack_rgba_float,
   &util_format_r32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_uscaled_description = {
   PIPE_FORMAT_R32G32_USCALED,
   "PIPE_FORMAT_R32G32_USCALED",
   "r32g32_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_uscaled_unpack_rgba_float,
   &util_format_r32g32_uscaled_pack_rgba_float,
   &util_format_r32g32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_uscaled_description = {
   PIPE_FORMAT_R32G32B32_USCALED,
   "PIPE_FORMAT_R32G32B32_USCALED",
   "r32g32b32_uscaled",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_uscaled_unpack_rgba_float,
   &util_format_r32g32b32_uscaled_pack_rgba_float,
   &util_format_r32g32b32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_uscaled_description = {
   PIPE_FORMAT_R32G32B32A32_USCALED,
   "PIPE_FORMAT_R32G32B32A32_USCALED",
   "r32g32b32a32_uscaled",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_uscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_uscaled_unpack_rgba_float,
   &util_format_r32g32b32a32_uscaled_pack_rgba_float,
   &util_format_r32g32b32a32_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_snorm_description = {
   PIPE_FORMAT_R32_SNORM,
   "PIPE_FORMAT_R32_SNORM",
   "r32_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_snorm_unpack_rgba_8unorm,
   &util_format_r32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_snorm_unpack_rgba_float,
   &util_format_r32_snorm_pack_rgba_float,
   &util_format_r32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_snorm_description = {
   PIPE_FORMAT_R32G32_SNORM,
   "PIPE_FORMAT_R32G32_SNORM",
   "r32g32_snorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_snorm_unpack_rgba_float,
   &util_format_r32g32_snorm_pack_rgba_float,
   &util_format_r32g32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_snorm_description = {
   PIPE_FORMAT_R32G32B32_SNORM,
   "PIPE_FORMAT_R32G32B32_SNORM",
   "r32g32b32_snorm",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32b32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_snorm_unpack_rgba_float,
   &util_format_r32g32b32_snorm_pack_rgba_float,
   &util_format_r32g32b32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_snorm_description = {
   PIPE_FORMAT_R32G32B32A32_SNORM,
   "PIPE_FORMAT_R32G32B32A32_SNORM",
   "r32g32b32a32_snorm",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_snorm_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_snorm_unpack_rgba_float,
   &util_format_r32g32b32a32_snorm_pack_rgba_float,
   &util_format_r32g32b32a32_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_sscaled_description = {
   PIPE_FORMAT_R32_SSCALED,
   "PIPE_FORMAT_R32_SSCALED",
   "r32_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_sscaled_unpack_rgba_8unorm,
   &util_format_r32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_sscaled_unpack_rgba_float,
   &util_format_r32_sscaled_pack_rgba_float,
   &util_format_r32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_sscaled_description = {
   PIPE_FORMAT_R32G32_SSCALED,
   "PIPE_FORMAT_R32G32_SSCALED",
   "r32g32_sscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_sscaled_unpack_rgba_float,
   &util_format_r32g32_sscaled_pack_rgba_float,
   &util_format_r32g32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_sscaled_description = {
   PIPE_FORMAT_R32G32B32_SSCALED,
   "PIPE_FORMAT_R32G32B32_SSCALED",
   "r32g32b32_sscaled",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_sscaled_unpack_rgba_float,
   &util_format_r32g32b32_sscaled_pack_rgba_float,
   &util_format_r32g32b32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_sscaled_description = {
   PIPE_FORMAT_R32G32B32A32_SSCALED,
   "PIPE_FORMAT_R32G32B32A32_SSCALED",
   "r32g32b32a32_sscaled",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_sscaled_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_sscaled_unpack_rgba_float,
   &util_format_r32g32b32a32_sscaled_pack_rgba_float,
   &util_format_r32g32b32a32_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_float_description = {
   PIPE_FORMAT_R16_FLOAT,
   "PIPE_FORMAT_R16_FLOAT",
   "r16_float",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_float_unpack_rgba_8unorm,
   &util_format_r16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_float_unpack_rgba_float,
   &util_format_r16_float_pack_rgba_float,
   &util_format_r16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_float_description = {
   PIPE_FORMAT_R16G16_FLOAT,
   "PIPE_FORMAT_R16G16_FLOAT",
   "r16g16_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_float_unpack_rgba_8unorm,
   &util_format_r16g16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_float_unpack_rgba_float,
   &util_format_r16g16_float_pack_rgba_float,
   &util_format_r16g16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_float_description = {
   PIPE_FORMAT_R16G16B16_FLOAT,
   "PIPE_FORMAT_R16G16B16_FLOAT",
   "r16g16b16_float",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_float_unpack_rgba_8unorm,
   &util_format_r16g16b16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_float_unpack_rgba_float,
   &util_format_r16g16b16_float_pack_rgba_float,
   &util_format_r16g16b16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_float_description = {
   PIPE_FORMAT_R16G16B16A16_FLOAT,
   "PIPE_FORMAT_R16G16B16A16_FLOAT",
   "r16g16b16a16_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_float_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_float_unpack_rgba_float,
   &util_format_r16g16b16a16_float_pack_rgba_float,
   &util_format_r16g16b16a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_unorm_description = {
   PIPE_FORMAT_R16_UNORM,
   "PIPE_FORMAT_R16_UNORM",
   "r16_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_unorm_unpack_rgba_8unorm,
   &util_format_r16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_unorm_unpack_rgba_float,
   &util_format_r16_unorm_pack_rgba_float,
   &util_format_r16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_unorm_description = {
   PIPE_FORMAT_R16G16_UNORM,
   "PIPE_FORMAT_R16G16_UNORM",
   "r16g16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_unorm_unpack_rgba_float,
   &util_format_r16g16_unorm_pack_rgba_float,
   &util_format_r16g16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_unorm_description = {
   PIPE_FORMAT_R16G16B16_UNORM,
   "PIPE_FORMAT_R16G16B16_UNORM",
   "r16g16b16_unorm",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16b16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_unorm_unpack_rgba_float,
   &util_format_r16g16b16_unorm_pack_rgba_float,
   &util_format_r16g16b16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_unorm_description = {
   PIPE_FORMAT_R16G16B16A16_UNORM,
   "PIPE_FORMAT_R16G16B16A16_UNORM",
   "r16g16b16a16_unorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_unorm_unpack_rgba_float,
   &util_format_r16g16b16a16_unorm_pack_rgba_float,
   &util_format_r16g16b16a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_uscaled_description = {
   PIPE_FORMAT_R16_USCALED,
   "PIPE_FORMAT_R16_USCALED",
   "r16_uscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_uscaled_unpack_rgba_8unorm,
   &util_format_r16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_uscaled_unpack_rgba_float,
   &util_format_r16_uscaled_pack_rgba_float,
   &util_format_r16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_uscaled_description = {
   PIPE_FORMAT_R16G16_USCALED,
   "PIPE_FORMAT_R16G16_USCALED",
   "r16g16_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_uscaled_unpack_rgba_float,
   &util_format_r16g16_uscaled_pack_rgba_float,
   &util_format_r16g16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_uscaled_description = {
   PIPE_FORMAT_R16G16B16_USCALED,
   "PIPE_FORMAT_R16G16B16_USCALED",
   "r16g16b16_uscaled",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_uscaled_unpack_rgba_float,
   &util_format_r16g16b16_uscaled_pack_rgba_float,
   &util_format_r16g16b16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_uscaled_description = {
   PIPE_FORMAT_R16G16B16A16_USCALED,
   "PIPE_FORMAT_R16G16B16A16_USCALED",
   "r16g16b16a16_uscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_uscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_uscaled_unpack_rgba_float,
   &util_format_r16g16b16a16_uscaled_pack_rgba_float,
   &util_format_r16g16b16a16_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_snorm_description = {
   PIPE_FORMAT_R16_SNORM,
   "PIPE_FORMAT_R16_SNORM",
   "r16_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_snorm_unpack_rgba_8unorm,
   &util_format_r16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_snorm_unpack_rgba_float,
   &util_format_r16_snorm_pack_rgba_float,
   &util_format_r16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_snorm_description = {
   PIPE_FORMAT_R16G16_SNORM,
   "PIPE_FORMAT_R16G16_SNORM",
   "r16g16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_snorm_unpack_rgba_float,
   &util_format_r16g16_snorm_pack_rgba_float,
   &util_format_r16g16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_snorm_description = {
   PIPE_FORMAT_R16G16B16_SNORM,
   "PIPE_FORMAT_R16G16B16_SNORM",
   "r16g16b16_snorm",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16b16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_snorm_unpack_rgba_float,
   &util_format_r16g16b16_snorm_pack_rgba_float,
   &util_format_r16g16b16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_snorm_description = {
   PIPE_FORMAT_R16G16B16A16_SNORM,
   "PIPE_FORMAT_R16G16B16A16_SNORM",
   "r16g16b16a16_snorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_snorm_unpack_rgba_float,
   &util_format_r16g16b16a16_snorm_pack_rgba_float,
   &util_format_r16g16b16a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_sscaled_description = {
   PIPE_FORMAT_R16_SSCALED,
   "PIPE_FORMAT_R16_SSCALED",
   "r16_sscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16_sscaled_unpack_rgba_8unorm,
   &util_format_r16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16_sscaled_unpack_rgba_float,
   &util_format_r16_sscaled_pack_rgba_float,
   &util_format_r16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_sscaled_description = {
   PIPE_FORMAT_R16G16_SSCALED,
   "PIPE_FORMAT_R16G16_SSCALED",
   "r16g16_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16_sscaled_unpack_rgba_float,
   &util_format_r16g16_sscaled_pack_rgba_float,
   &util_format_r16g16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_sscaled_description = {
   PIPE_FORMAT_R16G16B16_SSCALED,
   "PIPE_FORMAT_R16G16B16_SSCALED",
   "r16g16b16_sscaled",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16_sscaled_unpack_rgba_float,
   &util_format_r16g16b16_sscaled_pack_rgba_float,
   &util_format_r16g16b16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_sscaled_description = {
   PIPE_FORMAT_R16G16B16A16_SSCALED,
   "PIPE_FORMAT_R16G16B16A16_SSCALED",
   "r16g16b16a16_sscaled",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16a16_sscaled_unpack_rgba_8unorm,
   &util_format_r16g16b16a16_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16a16_sscaled_unpack_rgba_float,
   &util_format_r16g16b16a16_sscaled_pack_rgba_float,
   &util_format_r16g16b16a16_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_unorm_description = {
   PIPE_FORMAT_R8_UNORM,
   "PIPE_FORMAT_R8_UNORM",
   "r8_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_unorm_unpack_rgba_8unorm,
   &util_format_r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_unorm_unpack_rgba_float,
   &util_format_r8_unorm_pack_rgba_float,
   &util_format_r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_unorm_description = {
   PIPE_FORMAT_R8G8_UNORM,
   "PIPE_FORMAT_R8G8_UNORM",
   "r8g8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_unorm_unpack_rgba_float,
   &util_format_r8g8_unorm_pack_rgba_float,
   &util_format_r8g8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_unorm_description = {
   PIPE_FORMAT_R8G8B8_UNORM,
   "PIPE_FORMAT_R8G8B8_UNORM",
   "r8g8b8_unorm",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_unorm_unpack_rgba_float,
   &util_format_r8g8b8_unorm_pack_rgba_float,
   &util_format_r8g8b8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_unorm_description = {
   PIPE_FORMAT_R8G8B8A8_UNORM,
   "PIPE_FORMAT_R8G8B8A8_UNORM",
   "r8g8b8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_unorm_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_unorm_unpack_rgba_float,
   &util_format_r8g8b8a8_unorm_pack_rgba_float,
   &util_format_r8g8b8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_uscaled_description = {
   PIPE_FORMAT_R8_USCALED,
   "PIPE_FORMAT_R8_USCALED",
   "r8_uscaled",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_uscaled_unpack_rgba_8unorm,
   &util_format_r8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_uscaled_unpack_rgba_float,
   &util_format_r8_uscaled_pack_rgba_float,
   &util_format_r8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_uscaled_description = {
   PIPE_FORMAT_R8G8_USCALED,
   "PIPE_FORMAT_R8G8_USCALED",
   "r8g8_uscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_uscaled_unpack_rgba_float,
   &util_format_r8g8_uscaled_pack_rgba_float,
   &util_format_r8g8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_uscaled_description = {
   PIPE_FORMAT_R8G8B8_USCALED,
   "PIPE_FORMAT_R8G8B8_USCALED",
   "r8g8b8_uscaled",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_uscaled_unpack_rgba_float,
   &util_format_r8g8b8_uscaled_pack_rgba_float,
   &util_format_r8g8b8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_uscaled_description = {
   PIPE_FORMAT_R8G8B8A8_USCALED,
   "PIPE_FORMAT_R8G8B8A8_USCALED",
   "r8g8b8a8_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_uscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_uscaled_unpack_rgba_float,
   &util_format_r8g8b8a8_uscaled_pack_rgba_float,
   &util_format_r8g8b8a8_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_snorm_description = {
   PIPE_FORMAT_R8_SNORM,
   "PIPE_FORMAT_R8_SNORM",
   "r8_snorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_snorm_unpack_rgba_8unorm,
   &util_format_r8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_snorm_unpack_rgba_float,
   &util_format_r8_snorm_pack_rgba_float,
   &util_format_r8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_snorm_description = {
   PIPE_FORMAT_R8G8_SNORM,
   "PIPE_FORMAT_R8G8_SNORM",
   "r8g8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_snorm_unpack_rgba_float,
   &util_format_r8g8_snorm_pack_rgba_float,
   &util_format_r8g8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_snorm_description = {
   PIPE_FORMAT_R8G8B8_SNORM,
   "PIPE_FORMAT_R8G8B8_SNORM",
   "r8g8b8_snorm",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8b8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_snorm_unpack_rgba_float,
   &util_format_r8g8b8_snorm_pack_rgba_float,
   &util_format_r8g8b8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_snorm_description = {
   PIPE_FORMAT_R8G8B8A8_SNORM,
   "PIPE_FORMAT_R8G8B8A8_SNORM",
   "r8g8b8a8_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_snorm_unpack_rgba_float,
   &util_format_r8g8b8a8_snorm_pack_rgba_float,
   &util_format_r8g8b8a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_sscaled_description = {
   PIPE_FORMAT_R8_SSCALED,
   "PIPE_FORMAT_R8_SSCALED",
   "r8_sscaled",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8_sscaled_unpack_rgba_8unorm,
   &util_format_r8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8_sscaled_unpack_rgba_float,
   &util_format_r8_sscaled_pack_rgba_float,
   &util_format_r8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_sscaled_description = {
   PIPE_FORMAT_R8G8_SSCALED,
   "PIPE_FORMAT_R8G8_SSCALED",
   "r8g8_sscaled",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8_sscaled_unpack_rgba_float,
   &util_format_r8g8_sscaled_pack_rgba_float,
   &util_format_r8g8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_sscaled_description = {
   PIPE_FORMAT_R8G8B8_SSCALED,
   "PIPE_FORMAT_R8G8B8_SSCALED",
   "r8g8b8_sscaled",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8_sscaled_unpack_rgba_float,
   &util_format_r8g8b8_sscaled_pack_rgba_float,
   &util_format_r8g8b8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_sscaled_description = {
   PIPE_FORMAT_R8G8B8A8_SSCALED,
   "PIPE_FORMAT_R8G8B8A8_SSCALED",
   "r8g8b8a8_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8a8_sscaled_unpack_rgba_8unorm,
   &util_format_r8g8b8a8_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8a8_sscaled_unpack_rgba_float,
   &util_format_r8g8b8a8_sscaled_pack_rgba_float,
   &util_format_r8g8b8a8_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_fixed_description = {
   PIPE_FORMAT_R32_FIXED,
   "PIPE_FORMAT_R32_FIXED",
   "r32_fixed",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32_fixed_unpack_rgba_8unorm,
   &util_format_r32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32_fixed_unpack_rgba_float,
   &util_format_r32_fixed_pack_rgba_float,
   &util_format_r32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_fixed_description = {
   PIPE_FORMAT_R32G32_FIXED,
   "PIPE_FORMAT_R32G32_FIXED",
   "r32g32_fixed",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32_fixed_unpack_rgba_float,
   &util_format_r32g32_fixed_pack_rgba_float,
   &util_format_r32g32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_fixed_description = {
   PIPE_FORMAT_R32G32B32_FIXED,
   "PIPE_FORMAT_R32G32B32_FIXED",
   "r32g32b32_fixed",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32b32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32_fixed_unpack_rgba_float,
   &util_format_r32g32b32_fixed_pack_rgba_float,
   &util_format_r32g32b32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_fixed_description = {
   PIPE_FORMAT_R32G32B32A32_FIXED,
   "PIPE_FORMAT_R32G32B32A32_FIXED",
   "r32g32b32a32_fixed",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_FIXED, FALSE, FALSE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32a32_fixed_unpack_rgba_8unorm,
   &util_format_r32g32b32a32_fixed_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32a32_fixed_unpack_rgba_float,
   &util_format_r32g32b32a32_fixed_pack_rgba_float,
   &util_format_r32g32b32a32_fixed_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10x2_uscaled_description = {
   PIPE_FORMAT_R10G10B10X2_USCALED,
   "PIPE_FORMAT_R10G10B10X2_USCALED",
   "r10g10b10x2_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10x2_uscaled_unpack_rgba_8unorm,
   &util_format_r10g10b10x2_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10x2_uscaled_unpack_rgba_float,
   &util_format_r10g10b10x2_uscaled_pack_rgba_float,
   &util_format_r10g10b10x2_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10x2_snorm_description = {
   PIPE_FORMAT_R10G10B10X2_SNORM,
   "PIPE_FORMAT_R10G10B10X2_SNORM",
   "r10g10b10x2_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10x2_snorm_unpack_rgba_8unorm,
   &util_format_r10g10b10x2_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10x2_snorm_unpack_rgba_float,
   &util_format_r10g10b10x2_snorm_pack_rgba_float,
   &util_format_r10g10b10x2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_yv12_description = {
   PIPE_FORMAT_YV12,
   "PIPE_FORMAT_YV12",
   "yv12",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = w */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = w */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_yv12_unpack_rgba_8unorm,
   &util_format_yv12_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_yv12_unpack_rgba_float,
   &util_format_yv12_pack_rgba_float,
   &util_format_yv12_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_yv16_description = {
   PIPE_FORMAT_YV16,
   "PIPE_FORMAT_YV16",
   "yv16",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = w */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = w */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_yv16_unpack_rgba_8unorm,
   &util_format_yv16_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_yv16_unpack_rgba_float,
   &util_format_yv16_pack_rgba_float,
   &util_format_yv16_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_iyuv_description = {
   PIPE_FORMAT_IYUV,
   "PIPE_FORMAT_IYUV",
   "iyuv",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = w */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = w */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_iyuv_unpack_rgba_8unorm,
   &util_format_iyuv_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_iyuv_unpack_rgba_float,
   &util_format_iyuv_pack_rgba_float,
   &util_format_iyuv_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_nv12_description = {
   PIPE_FORMAT_NV12,
   "PIPE_FORMAT_NV12",
   "nv12",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = w */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = w */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_nv12_unpack_rgba_8unorm,
   &util_format_nv12_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_nv12_unpack_rgba_float,
   &util_format_nv12_pack_rgba_float,
   &util_format_nv12_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_nv21_description = {
   PIPE_FORMAT_NV21,
   "PIPE_FORMAT_NV21",
   "nv21",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_OTHER,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = w */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 8},	/* y = y */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 16},	/* z = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = w */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* y */
      UTIL_FORMAT_SWIZZLE_Y,	/* u */
      UTIL_FORMAT_SWIZZLE_Z,	/* v */
      UTIL_FORMAT_SWIZZLE_W	/* ignored */
   },
#endif
   UTIL_FORMAT_COLORSPACE_YUV,
   &util_format_nv21_unpack_rgba_8unorm,
   &util_format_nv21_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_nv21_unpack_rgba_float,
   &util_format_nv21_pack_rgba_float,
   &util_format_nv21_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a4r4_unorm_description = {
   PIPE_FORMAT_A4R4_UNORM,
   "PIPE_FORMAT_A4R4_UNORM",
   "a4r4_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a4r4_unorm_unpack_rgba_8unorm,
   &util_format_a4r4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a4r4_unorm_unpack_rgba_float,
   &util_format_a4r4_unorm_pack_rgba_float,
   &util_format_a4r4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r4a4_unorm_description = {
   PIPE_FORMAT_R4A4_UNORM,
   "PIPE_FORMAT_R4A4_UNORM",
   "r4a4_unorm",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r4a4_unorm_unpack_rgba_8unorm,
   &util_format_r4a4_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r4a4_unorm_unpack_rgba_float,
   &util_format_r4a4_unorm_pack_rgba_float,
   &util_format_r4a4_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8a8_unorm_description = {
   PIPE_FORMAT_R8A8_UNORM,
   "PIPE_FORMAT_R8A8_UNORM",
   "r8a8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8a8_unorm_unpack_rgba_8unorm,
   &util_format_r8a8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8a8_unorm_unpack_rgba_float,
   &util_format_r8a8_unorm_pack_rgba_float,
   &util_format_r8a8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8r8_unorm_description = {
   PIPE_FORMAT_A8R8_UNORM,
   "PIPE_FORMAT_A8R8_UNORM",
   "a8r8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8r8_unorm_unpack_rgba_8unorm,
   &util_format_a8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8r8_unorm_unpack_rgba_float,
   &util_format_a8r8_unorm_pack_rgba_float,
   &util_format_a8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10a2_uscaled_description = {
   PIPE_FORMAT_R10G10B10A2_USCALED,
   "PIPE_FORMAT_R10G10B10A2_USCALED",
   "r10g10b10a2_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_uscaled_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_uscaled_unpack_rgba_float,
   &util_format_r10g10b10a2_uscaled_pack_rgba_float,
   &util_format_r10g10b10a2_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10a2_sscaled_description = {
   PIPE_FORMAT_R10G10B10A2_SSCALED,
   "PIPE_FORMAT_R10G10B10A2_SSCALED",
   "r10g10b10a2_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_sscaled_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_sscaled_unpack_rgba_float,
   &util_format_r10g10b10a2_sscaled_pack_rgba_float,
   &util_format_r10g10b10a2_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10a2_snorm_description = {
   PIPE_FORMAT_R10G10B10A2_SNORM,
   "PIPE_FORMAT_R10G10B10A2_SNORM",
   "r10g10b10a2_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r10g10b10a2_snorm_unpack_rgba_8unorm,
   &util_format_r10g10b10a2_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r10g10b10a2_snorm_unpack_rgba_float,
   &util_format_r10g10b10a2_snorm_pack_rgba_float,
   &util_format_r10g10b10a2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10a2_uscaled_description = {
   PIPE_FORMAT_B10G10R10A2_USCALED,
   "PIPE_FORMAT_B10G10R10A2_USCALED",
   "b10g10r10a2_uscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10a2_uscaled_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_uscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10a2_uscaled_unpack_rgba_float,
   &util_format_b10g10r10a2_uscaled_pack_rgba_float,
   &util_format_b10g10r10a2_uscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10a2_sscaled_description = {
   PIPE_FORMAT_B10G10R10A2_SSCALED,
   "PIPE_FORMAT_B10G10R10A2_SSCALED",
   "b10g10r10a2_sscaled",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10a2_sscaled_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_sscaled_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10a2_sscaled_unpack_rgba_float,
   &util_format_b10g10r10a2_sscaled_pack_rgba_float,
   &util_format_b10g10r10a2_sscaled_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10a2_snorm_description = {
   PIPE_FORMAT_B10G10R10A2_SNORM,
   "PIPE_FORMAT_B10G10R10A2_SNORM",
   "b10g10r10a2_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10a2_snorm_unpack_rgba_8unorm,
   &util_format_b10g10r10a2_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10a2_snorm_unpack_rgba_float,
   &util_format_b10g10r10a2_snorm_pack_rgba_float,
   &util_format_b10g10r10a2_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_uint_description = {
   PIPE_FORMAT_R8_UINT,
   "PIPE_FORMAT_R8_UINT",
   "r8_uint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_uint_description = {
   PIPE_FORMAT_R8G8_UINT,
   "PIPE_FORMAT_R8G8_UINT",
   "r8g8_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8g8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_uint_description = {
   PIPE_FORMAT_R8G8B8_UINT,
   "PIPE_FORMAT_R8G8B8_UINT",
   "r8g8b8_uint",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8g8b8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_uint_description = {
   PIPE_FORMAT_R8G8B8A8_UINT,
   "PIPE_FORMAT_R8G8B8A8_UINT",
   "r8g8b8a8_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8a8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8a8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8a8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8a8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8g8b8a8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8_sint_description = {
   PIPE_FORMAT_R8_SINT,
   "PIPE_FORMAT_R8_SINT",
   "r8_sint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8_sint_description = {
   PIPE_FORMAT_R8G8_SINT,
   "PIPE_FORMAT_R8G8_SINT",
   "r8g8_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8g8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8_sint_description = {
   PIPE_FORMAT_R8G8B8_SINT,
   "PIPE_FORMAT_R8G8B8_SINT",
   "r8g8b8_sint",
   {1, 1, 24},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8g8b8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8a8_sint_description = {
   PIPE_FORMAT_R8G8B8A8_SINT,
   "PIPE_FORMAT_R8G8B8A8_SINT",
   "r8g8b8a8_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8a8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8a8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8a8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8a8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8g8b8a8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_uint_description = {
   PIPE_FORMAT_R16_UINT,
   "PIPE_FORMAT_R16_UINT",
   "r16_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_uint_description = {
   PIPE_FORMAT_R16G16_UINT,
   "PIPE_FORMAT_R16G16_UINT",
   "r16g16_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16g16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_uint_description = {
   PIPE_FORMAT_R16G16B16_UINT,
   "PIPE_FORMAT_R16G16B16_UINT",
   "r16g16b16_uint",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16g16b16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_uint_description = {
   PIPE_FORMAT_R16G16B16A16_UINT,
   "PIPE_FORMAT_R16G16B16A16_UINT",
   "r16g16b16a16_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16a16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16a16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16a16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16a16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16g16b16a16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16_sint_description = {
   PIPE_FORMAT_R16_SINT,
   "PIPE_FORMAT_R16_SINT",
   "r16_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16_sint_description = {
   PIPE_FORMAT_R16G16_SINT,
   "PIPE_FORMAT_R16G16_SINT",
   "r16g16_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16g16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16_sint_description = {
   PIPE_FORMAT_R16G16B16_SINT,
   "PIPE_FORMAT_R16G16B16_SINT",
   "r16g16b16_sint",
   {1, 1, 48},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16g16b16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16a16_sint_description = {
   PIPE_FORMAT_R16G16B16A16_SINT,
   "PIPE_FORMAT_R16G16B16A16_SINT",
   "r16g16b16a16_sint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 48}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16a16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16a16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16a16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16a16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16g16b16a16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_uint_description = {
   PIPE_FORMAT_R32_UINT,
   "PIPE_FORMAT_R32_UINT",
   "r32_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_uint_description = {
   PIPE_FORMAT_R32G32_UINT,
   "PIPE_FORMAT_R32G32_UINT",
   "r32g32_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32g32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_uint_description = {
   PIPE_FORMAT_R32G32B32_UINT,
   "PIPE_FORMAT_R32G32B32_UINT",
   "r32g32b32_uint",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32g32b32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_uint_description = {
   PIPE_FORMAT_R32G32B32A32_UINT,
   "PIPE_FORMAT_R32G32B32A32_UINT",
   "r32g32b32a32_uint",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32a32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32a32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32a32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32a32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32g32b32a32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32_sint_description = {
   PIPE_FORMAT_R32_SINT,
   "PIPE_FORMAT_R32_SINT",
   "r32_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32_sint_description = {
   PIPE_FORMAT_R32G32_SINT,
   "PIPE_FORMAT_R32G32_SINT",
   "r32g32_sint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32g32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32_sint_description = {
   PIPE_FORMAT_R32G32B32_SINT,
   "PIPE_FORMAT_R32G32B32_SINT",
   "r32g32b32_sint",
   {1, 1, 96},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32g32b32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32a32_sint_description = {
   PIPE_FORMAT_R32G32B32A32_SINT,
   "PIPE_FORMAT_R32G32B32A32_SINT",
   "r32g32b32a32_sint",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 96}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32a32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32a32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32a32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32a32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32g32b32a32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8_uint_description = {
   PIPE_FORMAT_A8_UINT,
   "PIPE_FORMAT_A8_UINT",
   "a8_uint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_a8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i8_uint_description = {
   PIPE_FORMAT_I8_UINT,
   "PIPE_FORMAT_I8_UINT",
   "i8_uint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_i8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8_uint_description = {
   PIPE_FORMAT_L8_UINT,
   "PIPE_FORMAT_L8_UINT",
   "l8_uint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8a8_uint_description = {
   PIPE_FORMAT_L8A8_UINT,
   "PIPE_FORMAT_L8A8_UINT",
   "l8a8_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l8a8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l8a8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l8a8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l8a8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l8a8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8_sint_description = {
   PIPE_FORMAT_A8_SINT,
   "PIPE_FORMAT_A8_SINT",
   "a8_sint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_a8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i8_sint_description = {
   PIPE_FORMAT_I8_SINT,
   "PIPE_FORMAT_I8_SINT",
   "i8_sint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_i8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8_sint_description = {
   PIPE_FORMAT_L8_SINT,
   "PIPE_FORMAT_L8_SINT",
   "l8_sint",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l8a8_sint_description = {
   PIPE_FORMAT_L8A8_SINT,
   "PIPE_FORMAT_L8A8_SINT",
   "l8a8_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l8a8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l8a8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l8a8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l8a8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l8a8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16_uint_description = {
   PIPE_FORMAT_A16_UINT,
   "PIPE_FORMAT_A16_UINT",
   "a16_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_a16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i16_uint_description = {
   PIPE_FORMAT_I16_UINT,
   "PIPE_FORMAT_I16_UINT",
   "i16_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_i16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16_uint_description = {
   PIPE_FORMAT_L16_UINT,
   "PIPE_FORMAT_L16_UINT",
   "l16_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16a16_uint_description = {
   PIPE_FORMAT_L16A16_UINT,
   "PIPE_FORMAT_L16A16_UINT",
   "l16a16_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l16a16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l16a16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l16a16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l16a16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l16a16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16_sint_description = {
   PIPE_FORMAT_A16_SINT,
   "PIPE_FORMAT_A16_SINT",
   "a16_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_a16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i16_sint_description = {
   PIPE_FORMAT_I16_SINT,
   "PIPE_FORMAT_I16_SINT",
   "i16_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_i16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16_sint_description = {
   PIPE_FORMAT_L16_SINT,
   "PIPE_FORMAT_L16_SINT",
   "l16_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l16a16_sint_description = {
   PIPE_FORMAT_L16A16_SINT,
   "PIPE_FORMAT_L16A16_SINT",
   "l16a16_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l16a16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l16a16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l16a16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l16a16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l16a16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a32_uint_description = {
   PIPE_FORMAT_A32_UINT,
   "PIPE_FORMAT_A32_UINT",
   "a32_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_a32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i32_uint_description = {
   PIPE_FORMAT_I32_UINT,
   "PIPE_FORMAT_I32_UINT",
   "i32_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_i32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32_uint_description = {
   PIPE_FORMAT_L32_UINT,
   "PIPE_FORMAT_L32_UINT",
   "l32_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32a32_uint_description = {
   PIPE_FORMAT_L32A32_UINT,
   "PIPE_FORMAT_L32A32_UINT",
   "l32a32_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l32a32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l32a32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l32a32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l32a32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_l32a32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a32_sint_description = {
   PIPE_FORMAT_A32_SINT,
   "PIPE_FORMAT_A32_SINT",
   "a32_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_0,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_a32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_a32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_a32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_a32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_a32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_i32_sint_description = {
   PIPE_FORMAT_I32_SINT,
   "PIPE_FORMAT_I32_SINT",
   "i32_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = rgba */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_i32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_i32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_i32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_i32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_i32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32_sint_description = {
   PIPE_FORMAT_L32_SINT,
   "PIPE_FORMAT_L32_SINT",
   "l32_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_l32a32_sint_description = {
   PIPE_FORMAT_L32A32_SINT,
   "PIPE_FORMAT_L32A32_SINT",
   "l32a32_sint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = rgb */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_l32a32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_l32a32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_l32a32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_l32a32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_l32a32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10a2_uint_description = {
   PIPE_FORMAT_B10G10R10A2_UINT,
   "PIPE_FORMAT_B10G10R10A2_UINT",
   "b10g10r10a2_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_b10g10r10a2_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_b10g10r10a2_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_b10g10r10a2_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_b10g10r10a2_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_b10g10r10a2_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8x8_snorm_description = {
   PIPE_FORMAT_R8G8B8X8_SNORM,
   "PIPE_FORMAT_R8G8B8X8_SNORM",
   "r8g8b8x8_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8g8b8x8_snorm_unpack_rgba_8unorm,
   &util_format_r8g8b8x8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8x8_snorm_unpack_rgba_float,
   &util_format_r8g8b8x8_snorm_pack_rgba_float,
   &util_format_r8g8b8x8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8x8_srgb_description = {
   PIPE_FORMAT_R8G8B8X8_SRGB,
   "PIPE_FORMAT_R8G8B8X8_SRGB",
   "r8g8b8x8_srgb",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_r8g8b8x8_srgb_unpack_rgba_8unorm,
   &util_format_r8g8b8x8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8g8b8x8_srgb_unpack_rgba_float,
   &util_format_r8g8b8x8_srgb_pack_rgba_float,
   &util_format_r8g8b8x8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8x8_uint_description = {
   PIPE_FORMAT_R8G8B8X8_UINT,
   "PIPE_FORMAT_R8G8B8X8_UINT",
   "r8g8b8x8_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8x8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8x8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8x8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8x8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8g8b8x8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8g8b8x8_sint_description = {
   PIPE_FORMAT_R8G8B8X8_SINT,
   "PIPE_FORMAT_R8G8B8X8_SINT",
   "r8g8b8x8_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 24},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8g8b8x8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8g8b8x8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8g8b8x8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8g8b8x8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8g8b8x8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b10g10r10x2_unorm_description = {
   PIPE_FORMAT_B10G10R10X2_UNORM,
   "PIPE_FORMAT_B10G10R10X2_UNORM",
   "b10g10r10x2_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_b10g10r10x2_unorm_unpack_rgba_8unorm,
   &util_format_b10g10r10x2_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b10g10r10x2_unorm_unpack_rgba_float,
   &util_format_b10g10r10x2_unorm_pack_rgba_float,
   &util_format_b10g10r10x2_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16x16_unorm_description = {
   PIPE_FORMAT_R16G16B16X16_UNORM,
   "PIPE_FORMAT_R16G16B16X16_UNORM",
   "r16g16b16x16_unorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 48}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16x16_unorm_unpack_rgba_8unorm,
   &util_format_r16g16b16x16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16x16_unorm_unpack_rgba_float,
   &util_format_r16g16b16x16_unorm_pack_rgba_float,
   &util_format_r16g16b16x16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16x16_snorm_description = {
   PIPE_FORMAT_R16G16B16X16_SNORM,
   "PIPE_FORMAT_R16G16B16X16_SNORM",
   "r16g16b16x16_snorm",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 48}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16x16_snorm_unpack_rgba_8unorm,
   &util_format_r16g16b16x16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16x16_snorm_unpack_rgba_float,
   &util_format_r16g16b16x16_snorm_pack_rgba_float,
   &util_format_r16g16b16x16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16x16_float_description = {
   PIPE_FORMAT_R16G16B16X16_FLOAT,
   "PIPE_FORMAT_R16G16B16X16_FLOAT",
   "r16g16b16x16_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 48}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16g16b16x16_float_unpack_rgba_8unorm,
   &util_format_r16g16b16x16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16g16b16x16_float_unpack_rgba_float,
   &util_format_r16g16b16x16_float_pack_rgba_float,
   &util_format_r16g16b16x16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16x16_uint_description = {
   PIPE_FORMAT_R16G16B16X16_UINT,
   "PIPE_FORMAT_R16G16B16X16_UINT",
   "r16g16b16x16_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 48}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16x16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16x16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16x16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16x16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16g16b16x16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16g16b16x16_sint_description = {
   PIPE_FORMAT_R16G16B16X16_SINT,
   "PIPE_FORMAT_R16G16B16X16_SINT",
   "r16g16b16x16_sint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 48},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 16, 48}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16g16b16x16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16g16b16x16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16g16b16x16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16g16b16x16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16g16b16x16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32x32_float_description = {
   PIPE_FORMAT_R32G32B32X32_FLOAT,
   "PIPE_FORMAT_R32G32B32X32_FLOAT",
   "r32g32b32x32_float",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 96}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32g32b32x32_float_unpack_rgba_8unorm,
   &util_format_r32g32b32x32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32g32b32x32_float_unpack_rgba_float,
   &util_format_r32g32b32x32_float_pack_rgba_float,
   &util_format_r32g32b32x32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32x32_uint_description = {
   PIPE_FORMAT_R32G32B32X32_UINT,
   "PIPE_FORMAT_R32G32B32X32_UINT",
   "r32g32b32x32_uint",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 96}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32x32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32x32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32x32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32x32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32g32b32x32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32g32b32x32_sint_description = {
   PIPE_FORMAT_R32G32B32X32_SINT,
   "PIPE_FORMAT_R32G32B32X32_SINT",
   "r32g32b32x32_sint",
   {1, 1, 128},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 96},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 0}	/* w = x */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 64},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 32, 96}	/* w = x */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32g32b32x32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32g32b32x32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32g32b32x32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32g32b32x32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32g32b32x32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8a8_snorm_description = {
   PIPE_FORMAT_R8A8_SNORM,
   "PIPE_FORMAT_R8A8_SNORM",
   "r8a8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r8a8_snorm_unpack_rgba_8unorm,
   &util_format_r8a8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r8a8_snorm_unpack_rgba_float,
   &util_format_r8a8_snorm_pack_rgba_float,
   &util_format_r8a8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16a16_unorm_description = {
   PIPE_FORMAT_R16A16_UNORM,
   "PIPE_FORMAT_R16A16_UNORM",
   "r16a16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16a16_unorm_unpack_rgba_8unorm,
   &util_format_r16a16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16a16_unorm_unpack_rgba_float,
   &util_format_r16a16_unorm_pack_rgba_float,
   &util_format_r16a16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16a16_snorm_description = {
   PIPE_FORMAT_R16A16_SNORM,
   "PIPE_FORMAT_R16A16_SNORM",
   "r16a16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16a16_snorm_unpack_rgba_8unorm,
   &util_format_r16a16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16a16_snorm_unpack_rgba_float,
   &util_format_r16a16_snorm_pack_rgba_float,
   &util_format_r16a16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16a16_float_description = {
   PIPE_FORMAT_R16A16_FLOAT,
   "PIPE_FORMAT_R16A16_FLOAT",
   "r16a16_float",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r16a16_float_unpack_rgba_8unorm,
   &util_format_r16a16_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r16a16_float_unpack_rgba_float,
   &util_format_r16a16_float_pack_rgba_float,
   &util_format_r16a16_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32a32_float_description = {
   PIPE_FORMAT_R32A32_FLOAT,
   "PIPE_FORMAT_R32A32_FLOAT",
   "r32a32_float",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_FLOAT, FALSE, FALSE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_r32a32_float_unpack_rgba_8unorm,
   &util_format_r32a32_float_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_r32a32_float_unpack_rgba_float,
   &util_format_r32a32_float_pack_rgba_float,
   &util_format_r32a32_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8a8_uint_description = {
   PIPE_FORMAT_R8A8_UINT,
   "PIPE_FORMAT_R8A8_UINT",
   "r8a8_uint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8a8_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8a8_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8a8_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8a8_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r8a8_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r8a8_sint_description = {
   PIPE_FORMAT_R8A8_SINT,
   "PIPE_FORMAT_R8A8_SINT",
   "r8a8_sint",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 8, 8},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r8a8_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r8a8_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r8a8_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r8a8_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r8a8_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16a16_uint_description = {
   PIPE_FORMAT_R16A16_UINT,
   "PIPE_FORMAT_R16A16_UINT",
   "r16a16_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16a16_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16a16_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16a16_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16a16_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r16a16_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r16a16_sint_description = {
   PIPE_FORMAT_R16A16_SINT,
   "PIPE_FORMAT_R16A16_SINT",
   "r16a16_sint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 16, 16},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r16a16_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r16a16_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r16a16_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r16a16_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r16a16_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32a32_uint_description = {
   PIPE_FORMAT_R32A32_UINT,
   "PIPE_FORMAT_R32A32_UINT",
   "r32a32_uint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32a32_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32a32_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32a32_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32a32_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r32a32_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r32a32_sint_description = {
   PIPE_FORMAT_R32A32_SINT,
   "PIPE_FORMAT_R32A32_SINT",
   "r32a32_sint",
   {1, 1, 64},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, TRUE, 32, 32},	/* y = a */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r32a32_sint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r32a32_sint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r32a32_sint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r32a32_sint_pack_signed,  /* pack_rgba_sint */
   NULL,  /* fetch_rgba_uint */
   &util_format_r32a32_sint_fetch_signed  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_r10g10b10a2_uint_description = {
   PIPE_FORMAT_R10G10B10A2_UINT,
   "PIPE_FORMAT_R10G10B10A2_UINT",
   "r10g10b10a2_uint",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 0},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 10},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 20},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 30}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   NULL, /* unpack_rgba_8unorm */
   NULL, /* pack_rgba_8unorm */
   NULL, /* fetch_rgba_8unorm */
   NULL, /* unpack_rgba_float */
   NULL, /* pack_rgba_float */
   NULL, /* fetch_rgba_float */
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   &util_format_r10g10b10a2_uint_unpack_unsigned, /* unpack_rgba_uint */
   &util_format_r10g10b10a2_uint_pack_unsigned, /* pack_rgba_uint */
   &util_format_r10g10b10a2_uint_unpack_signed, /* unpack_rgba_sint */
   &util_format_r10g10b10a2_uint_pack_signed,  /* pack_rgba_sint */
   &util_format_r10g10b10a2_uint_fetch_unsigned,  /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b5g6r5_srgb_description = {
   PIPE_FORMAT_B5G6R5_SRGB,
   "PIPE_FORMAT_B5G6R5_SRGB",
   "b5g6r5_srgb",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   3,	/* nr_channels */
   FALSE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* z = r */
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_b5g6r5_srgb_unpack_rgba_8unorm,
   &util_format_b5g6r5_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_b5g6r5_srgb_unpack_rgba_float,
   &util_format_b5g6r5_srgb_pack_rgba_float,
   &util_format_b5g6r5_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description *
util_format_description(enum pipe_format format)
{
   if (format >= PIPE_FORMAT_COUNT) {
      return NULL;
   }

   switch (format) {
   case PIPE_FORMAT_NONE:
      return &util_format_none_description;
   case PIPE_FORMAT_B8G8R8A8_UNORM:
      return &util_format_b8g8r8a8_unorm_description;
   case PIPE_FORMAT_B8G8R8X8_UNORM:
      return &util_format_b8g8r8x8_unorm_description;
   case PIPE_FORMAT_A8R8G8B8_UNORM:
      return &util_format_a8r8g8b8_unorm_description;
   case PIPE_FORMAT_X8R8G8B8_UNORM:
      return &util_format_x8r8g8b8_unorm_description;
   case PIPE_FORMAT_A8B8G8R8_UNORM:
      return &util_format_a8b8g8r8_unorm_description;
   case PIPE_FORMAT_X8B8G8R8_UNORM:
      return &util_format_x8b8g8r8_unorm_description;
   case PIPE_FORMAT_R8G8B8X8_UNORM:
      return &util_format_r8g8b8x8_unorm_description;
   case PIPE_FORMAT_B5G5R5X1_UNORM:
      return &util_format_b5g5r5x1_unorm_description;
   case PIPE_FORMAT_B5G5R5A1_UNORM:
      return &util_format_b5g5r5a1_unorm_description;
   case PIPE_FORMAT_B4G4R4A4_UNORM:
      return &util_format_b4g4r4a4_unorm_description;
   case PIPE_FORMAT_B4G4R4X4_UNORM:
      return &util_format_b4g4r4x4_unorm_description;
   case PIPE_FORMAT_B5G6R5_UNORM:
      return &util_format_b5g6r5_unorm_description;
   case PIPE_FORMAT_R10G10B10A2_UNORM:
      return &util_format_r10g10b10a2_unorm_description;
   case PIPE_FORMAT_B10G10R10A2_UNORM:
      return &util_format_b10g10r10a2_unorm_description;
   case PIPE_FORMAT_B2G3R3_UNORM:
      return &util_format_b2g3r3_unorm_description;
   case PIPE_FORMAT_L8_UNORM:
      return &util_format_l8_unorm_description;
   case PIPE_FORMAT_A8_UNORM:
      return &util_format_a8_unorm_description;
   case PIPE_FORMAT_I8_UNORM:
      return &util_format_i8_unorm_description;
   case PIPE_FORMAT_L4A4_UNORM:
      return &util_format_l4a4_unorm_description;
   case PIPE_FORMAT_L8A8_UNORM:
      return &util_format_l8a8_unorm_description;
   case PIPE_FORMAT_L16_UNORM:
      return &util_format_l16_unorm_description;
   case PIPE_FORMAT_A16_UNORM:
      return &util_format_a16_unorm_description;
   case PIPE_FORMAT_I16_UNORM:
      return &util_format_i16_unorm_description;
   case PIPE_FORMAT_L16A16_UNORM:
      return &util_format_l16a16_unorm_description;
   case PIPE_FORMAT_A8_SNORM:
      return &util_format_a8_snorm_description;
   case PIPE_FORMAT_L8_SNORM:
      return &util_format_l8_snorm_description;
   case PIPE_FORMAT_L8A8_SNORM:
      return &util_format_l8a8_snorm_description;
   case PIPE_FORMAT_I8_SNORM:
      return &util_format_i8_snorm_description;
   case PIPE_FORMAT_A16_SNORM:
      return &util_format_a16_snorm_description;
   case PIPE_FORMAT_L16_SNORM:
      return &util_format_l16_snorm_description;
   case PIPE_FORMAT_L16A16_SNORM:
      return &util_format_l16a16_snorm_description;
   case PIPE_FORMAT_I16_SNORM:
      return &util_format_i16_snorm_description;
   case PIPE_FORMAT_A16_FLOAT:
      return &util_format_a16_float_description;
   case PIPE_FORMAT_L16_FLOAT:
      return &util_format_l16_float_description;
   case PIPE_FORMAT_L16A16_FLOAT:
      return &util_format_l16a16_float_description;
   case PIPE_FORMAT_I16_FLOAT:
      return &util_format_i16_float_description;
   case PIPE_FORMAT_A32_FLOAT:
      return &util_format_a32_float_description;
   case PIPE_FORMAT_L32_FLOAT:
      return &util_format_l32_float_description;
   case PIPE_FORMAT_L32A32_FLOAT:
      return &util_format_l32a32_float_description;
   case PIPE_FORMAT_I32_FLOAT:
      return &util_format_i32_float_description;
   case PIPE_FORMAT_L8_SRGB:
      return &util_format_l8_srgb_description;
   case PIPE_FORMAT_L8A8_SRGB:
      return &util_format_l8a8_srgb_description;
   case PIPE_FORMAT_R8G8B8_SRGB:
      return &util_format_r8g8b8_srgb_description;
   case PIPE_FORMAT_R8G8B8A8_SRGB:
      return &util_format_r8g8b8a8_srgb_description;
   case PIPE_FORMAT_A8B8G8R8_SRGB:
      return &util_format_a8b8g8r8_srgb_description;
   case PIPE_FORMAT_X8B8G8R8_SRGB:
      return &util_format_x8b8g8r8_srgb_description;
   case PIPE_FORMAT_B8G8R8A8_SRGB:
      return &util_format_b8g8r8a8_srgb_description;
   case PIPE_FORMAT_B8G8R8X8_SRGB:
      return &util_format_b8g8r8x8_srgb_description;
   case PIPE_FORMAT_A8R8G8B8_SRGB:
      return &util_format_a8r8g8b8_srgb_description;
   case PIPE_FORMAT_X8R8G8B8_SRGB:
      return &util_format_x8r8g8b8_srgb_description;
   case PIPE_FORMAT_R8SG8SB8UX8U_NORM:
      return &util_format_r8sg8sb8ux8u_norm_description;
   case PIPE_FORMAT_R10SG10SB10SA2U_NORM:
      return &util_format_r10sg10sb10sa2u_norm_description;
   case PIPE_FORMAT_R5SG5SB6U_NORM:
      return &util_format_r5sg5sb6u_norm_description;
   case PIPE_FORMAT_S8_UINT:
      return &util_format_s8_uint_description;
   case PIPE_FORMAT_Z16_UNORM:
      return &util_format_z16_unorm_description;
   case PIPE_FORMAT_Z32_UNORM:
      return &util_format_z32_unorm_description;
   case PIPE_FORMAT_Z32_FLOAT:
      return &util_format_z32_float_description;
   case PIPE_FORMAT_Z24_UNORM_S8_UINT:
      return &util_format_z24_unorm_s8_uint_description;
   case PIPE_FORMAT_S8_UINT_Z24_UNORM:
      return &util_format_s8_uint_z24_unorm_description;
   case PIPE_FORMAT_X24S8_UINT:
      return &util_format_x24s8_uint_description;
   case PIPE_FORMAT_S8X24_UINT:
      return &util_format_s8x24_uint_description;
   case PIPE_FORMAT_Z24X8_UNORM:
      return &util_format_z24x8_unorm_description;
   case PIPE_FORMAT_X8Z24_UNORM:
      return &util_format_x8z24_unorm_description;
   case PIPE_FORMAT_Z32_FLOAT_S8X24_UINT:
      return &util_format_z32_float_s8x24_uint_description;
   case PIPE_FORMAT_X32_S8X24_UINT:
      return &util_format_x32_s8x24_uint_description;
   case PIPE_FORMAT_UYVY:
      return &util_format_uyvy_description;
   case PIPE_FORMAT_YUYV:
      return &util_format_yuyv_description;
   case PIPE_FORMAT_R8G8_B8G8_UNORM:
      return &util_format_r8g8_b8g8_unorm_description;
   case PIPE_FORMAT_G8R8_G8B8_UNORM:
      return &util_format_g8r8_g8b8_unorm_description;
   case PIPE_FORMAT_G8R8_B8R8_UNORM:
      return &util_format_g8r8_b8r8_unorm_description;
   case PIPE_FORMAT_R8G8_R8B8_UNORM:
      return &util_format_r8g8_r8b8_unorm_description;
   case PIPE_FORMAT_R11G11B10_FLOAT:
      return &util_format_r11g11b10_float_description;
   case PIPE_FORMAT_R9G9B9E5_FLOAT:
      return &util_format_r9g9b9e5_float_description;
   case PIPE_FORMAT_R1_UNORM:
      return &util_format_r1_unorm_description;
   case PIPE_FORMAT_R8G8Bx_SNORM:
      return &util_format_r8g8bx_snorm_description;
   case PIPE_FORMAT_DXT1_RGB:
      return &util_format_dxt1_rgb_description;
   case PIPE_FORMAT_DXT1_RGBA:
      return &util_format_dxt1_rgba_description;
   case PIPE_FORMAT_DXT3_RGBA:
      return &util_format_dxt3_rgba_description;
   case PIPE_FORMAT_DXT5_RGBA:
      return &util_format_dxt5_rgba_description;
   case PIPE_FORMAT_DXT1_SRGB:
      return &util_format_dxt1_srgb_description;
   case PIPE_FORMAT_DXT1_SRGBA:
      return &util_format_dxt1_srgba_description;
   case PIPE_FORMAT_DXT3_SRGBA:
      return &util_format_dxt3_srgba_description;
   case PIPE_FORMAT_DXT5_SRGBA:
      return &util_format_dxt5_srgba_description;
   case PIPE_FORMAT_RGTC1_UNORM:
      return &util_format_rgtc1_unorm_description;
   case PIPE_FORMAT_RGTC1_SNORM:
      return &util_format_rgtc1_snorm_description;
   case PIPE_FORMAT_RGTC2_UNORM:
      return &util_format_rgtc2_unorm_description;
   case PIPE_FORMAT_RGTC2_SNORM:
      return &util_format_rgtc2_snorm_description;
   case PIPE_FORMAT_LATC1_UNORM:
      return &util_format_latc1_unorm_description;
   case PIPE_FORMAT_LATC1_SNORM:
      return &util_format_latc1_snorm_description;
   case PIPE_FORMAT_LATC2_UNORM:
      return &util_format_latc2_unorm_description;
   case PIPE_FORMAT_LATC2_SNORM:
      return &util_format_latc2_snorm_description;
   case PIPE_FORMAT_ETC1_RGB8:
      return &util_format_etc1_rgb8_description;
   case PIPE_FORMAT_R64_FLOAT:
      return &util_format_r64_float_description;
   case PIPE_FORMAT_R64G64_FLOAT:
      return &util_format_r64g64_float_description;
   case PIPE_FORMAT_R64G64B64_FLOAT:
      return &util_format_r64g64b64_float_description;
   case PIPE_FORMAT_R64G64B64A64_FLOAT:
      return &util_format_r64g64b64a64_float_description;
   case PIPE_FORMAT_R32_FLOAT:
      return &util_format_r32_float_description;
   case PIPE_FORMAT_R32G32_FLOAT:
      return &util_format_r32g32_float_description;
   case PIPE_FORMAT_R32G32B32_FLOAT:
      return &util_format_r32g32b32_float_description;
   case PIPE_FORMAT_R32G32B32A32_FLOAT:
      return &util_format_r32g32b32a32_float_description;
   case PIPE_FORMAT_R32_UNORM:
      return &util_format_r32_unorm_description;
   case PIPE_FORMAT_R32G32_UNORM:
      return &util_format_r32g32_unorm_description;
   case PIPE_FORMAT_R32G32B32_UNORM:
      return &util_format_r32g32b32_unorm_description;
   case PIPE_FORMAT_R32G32B32A32_UNORM:
      return &util_format_r32g32b32a32_unorm_description;
   case PIPE_FORMAT_R32_USCALED:
      return &util_format_r32_uscaled_description;
   case PIPE_FORMAT_R32G32_USCALED:
      return &util_format_r32g32_uscaled_description;
   case PIPE_FORMAT_R32G32B32_USCALED:
      return &util_format_r32g32b32_uscaled_description;
   case PIPE_FORMAT_R32G32B32A32_USCALED:
      return &util_format_r32g32b32a32_uscaled_description;
   case PIPE_FORMAT_R32_SNORM:
      return &util_format_r32_snorm_description;
   case PIPE_FORMAT_R32G32_SNORM:
      return &util_format_r32g32_snorm_description;
   case PIPE_FORMAT_R32G32B32_SNORM:
      return &util_format_r32g32b32_snorm_description;
   case PIPE_FORMAT_R32G32B32A32_SNORM:
      return &util_format_r32g32b32a32_snorm_description;
   case PIPE_FORMAT_R32_SSCALED:
      return &util_format_r32_sscaled_description;
   case PIPE_FORMAT_R32G32_SSCALED:
      return &util_format_r32g32_sscaled_description;
   case PIPE_FORMAT_R32G32B32_SSCALED:
      return &util_format_r32g32b32_sscaled_description;
   case PIPE_FORMAT_R32G32B32A32_SSCALED:
      return &util_format_r32g32b32a32_sscaled_description;
   case PIPE_FORMAT_R16_FLOAT:
      return &util_format_r16_float_description;
   case PIPE_FORMAT_R16G16_FLOAT:
      return &util_format_r16g16_float_description;
   case PIPE_FORMAT_R16G16B16_FLOAT:
      return &util_format_r16g16b16_float_description;
   case PIPE_FORMAT_R16G16B16A16_FLOAT:
      return &util_format_r16g16b16a16_float_description;
   case PIPE_FORMAT_R16_UNORM:
      return &util_format_r16_unorm_description;
   case PIPE_FORMAT_R16G16_UNORM:
      return &util_format_r16g16_unorm_description;
   case PIPE_FORMAT_R16G16B16_UNORM:
      return &util_format_r16g16b16_unorm_description;
   case PIPE_FORMAT_R16G16B16A16_UNORM:
      return &util_format_r16g16b16a16_unorm_description;
   case PIPE_FORMAT_R16_USCALED:
      return &util_format_r16_uscaled_description;
   case PIPE_FORMAT_R16G16_USCALED:
      return &util_format_r16g16_uscaled_description;
   case PIPE_FORMAT_R16G16B16_USCALED:
      return &util_format_r16g16b16_uscaled_description;
   case PIPE_FORMAT_R16G16B16A16_USCALED:
      return &util_format_r16g16b16a16_uscaled_description;
   case PIPE_FORMAT_R16_SNORM:
      return &util_format_r16_snorm_description;
   case PIPE_FORMAT_R16G16_SNORM:
      return &util_format_r16g16_snorm_description;
   case PIPE_FORMAT_R16G16B16_SNORM:
      return &util_format_r16g16b16_snorm_description;
   case PIPE_FORMAT_R16G16B16A16_SNORM:
      return &util_format_r16g16b16a16_snorm_description;
   case PIPE_FORMAT_R16_SSCALED:
      return &util_format_r16_sscaled_description;
   case PIPE_FORMAT_R16G16_SSCALED:
      return &util_format_r16g16_sscaled_description;
   case PIPE_FORMAT_R16G16B16_SSCALED:
      return &util_format_r16g16b16_sscaled_description;
   case PIPE_FORMAT_R16G16B16A16_SSCALED:
      return &util_format_r16g16b16a16_sscaled_description;
   case PIPE_FORMAT_R8_UNORM:
      return &util_format_r8_unorm_description;
   case PIPE_FORMAT_R8G8_UNORM:
      return &util_format_r8g8_unorm_description;
   case PIPE_FORMAT_R8G8B8_UNORM:
      return &util_format_r8g8b8_unorm_description;
   case PIPE_FORMAT_R8G8B8A8_UNORM:
      return &util_format_r8g8b8a8_unorm_description;
   case PIPE_FORMAT_R8_USCALED:
      return &util_format_r8_uscaled_description;
   case PIPE_FORMAT_R8G8_USCALED:
      return &util_format_r8g8_uscaled_description;
   case PIPE_FORMAT_R8G8B8_USCALED:
      return &util_format_r8g8b8_uscaled_description;
   case PIPE_FORMAT_R8G8B8A8_USCALED:
      return &util_format_r8g8b8a8_uscaled_description;
   case PIPE_FORMAT_R8_SNORM:
      return &util_format_r8_snorm_description;
   case PIPE_FORMAT_R8G8_SNORM:
      return &util_format_r8g8_snorm_description;
   case PIPE_FORMAT_R8G8B8_SNORM:
      return &util_format_r8g8b8_snorm_description;
   case PIPE_FORMAT_R8G8B8A8_SNORM:
      return &util_format_r8g8b8a8_snorm_description;
   case PIPE_FORMAT_R8_SSCALED:
      return &util_format_r8_sscaled_description;
   case PIPE_FORMAT_R8G8_SSCALED:
      return &util_format_r8g8_sscaled_description;
   case PIPE_FORMAT_R8G8B8_SSCALED:
      return &util_format_r8g8b8_sscaled_description;
   case PIPE_FORMAT_R8G8B8A8_SSCALED:
      return &util_format_r8g8b8a8_sscaled_description;
   case PIPE_FORMAT_R32_FIXED:
      return &util_format_r32_fixed_description;
   case PIPE_FORMAT_R32G32_FIXED:
      return &util_format_r32g32_fixed_description;
   case PIPE_FORMAT_R32G32B32_FIXED:
      return &util_format_r32g32b32_fixed_description;
   case PIPE_FORMAT_R32G32B32A32_FIXED:
      return &util_format_r32g32b32a32_fixed_description;
   case PIPE_FORMAT_R10G10B10X2_USCALED:
      return &util_format_r10g10b10x2_uscaled_description;
   case PIPE_FORMAT_R10G10B10X2_SNORM:
      return &util_format_r10g10b10x2_snorm_description;
   case PIPE_FORMAT_YV12:
      return &util_format_yv12_description;
   case PIPE_FORMAT_YV16:
      return &util_format_yv16_description;
   case PIPE_FORMAT_IYUV:
      return &util_format_iyuv_description;
   case PIPE_FORMAT_NV12:
      return &util_format_nv12_description;
   case PIPE_FORMAT_NV21:
      return &util_format_nv21_description;
   case PIPE_FORMAT_A4R4_UNORM:
      return &util_format_a4r4_unorm_description;
   case PIPE_FORMAT_R4A4_UNORM:
      return &util_format_r4a4_unorm_description;
   case PIPE_FORMAT_R8A8_UNORM:
      return &util_format_r8a8_unorm_description;
   case PIPE_FORMAT_A8R8_UNORM:
      return &util_format_a8r8_unorm_description;
   case PIPE_FORMAT_R10G10B10A2_USCALED:
      return &util_format_r10g10b10a2_uscaled_description;
   case PIPE_FORMAT_R10G10B10A2_SSCALED:
      return &util_format_r10g10b10a2_sscaled_description;
   case PIPE_FORMAT_R10G10B10A2_SNORM:
      return &util_format_r10g10b10a2_snorm_description;
   case PIPE_FORMAT_B10G10R10A2_USCALED:
      return &util_format_b10g10r10a2_uscaled_description;
   case PIPE_FORMAT_B10G10R10A2_SSCALED:
      return &util_format_b10g10r10a2_sscaled_description;
   case PIPE_FORMAT_B10G10R10A2_SNORM:
      return &util_format_b10g10r10a2_snorm_description;
   case PIPE_FORMAT_R8_UINT:
      return &util_format_r8_uint_description;
   case PIPE_FORMAT_R8G8_UINT:
      return &util_format_r8g8_uint_description;
   case PIPE_FORMAT_R8G8B8_UINT:
      return &util_format_r8g8b8_uint_description;
   case PIPE_FORMAT_R8G8B8A8_UINT:
      return &util_format_r8g8b8a8_uint_description;
   case PIPE_FORMAT_R8_SINT:
      return &util_format_r8_sint_description;
   case PIPE_FORMAT_R8G8_SINT:
      return &util_format_r8g8_sint_description;
   case PIPE_FORMAT_R8G8B8_SINT:
      return &util_format_r8g8b8_sint_description;
   case PIPE_FORMAT_R8G8B8A8_SINT:
      return &util_format_r8g8b8a8_sint_description;
   case PIPE_FORMAT_R16_UINT:
      return &util_format_r16_uint_description;
   case PIPE_FORMAT_R16G16_UINT:
      return &util_format_r16g16_uint_description;
   case PIPE_FORMAT_R16G16B16_UINT:
      return &util_format_r16g16b16_uint_description;
   case PIPE_FORMAT_R16G16B16A16_UINT:
      return &util_format_r16g16b16a16_uint_description;
   case PIPE_FORMAT_R16_SINT:
      return &util_format_r16_sint_description;
   case PIPE_FORMAT_R16G16_SINT:
      return &util_format_r16g16_sint_description;
   case PIPE_FORMAT_R16G16B16_SINT:
      return &util_format_r16g16b16_sint_description;
   case PIPE_FORMAT_R16G16B16A16_SINT:
      return &util_format_r16g16b16a16_sint_description;
   case PIPE_FORMAT_R32_UINT:
      return &util_format_r32_uint_description;
   case PIPE_FORMAT_R32G32_UINT:
      return &util_format_r32g32_uint_description;
   case PIPE_FORMAT_R32G32B32_UINT:
      return &util_format_r32g32b32_uint_description;
   case PIPE_FORMAT_R32G32B32A32_UINT:
      return &util_format_r32g32b32a32_uint_description;
   case PIPE_FORMAT_R32_SINT:
      return &util_format_r32_sint_description;
   case PIPE_FORMAT_R32G32_SINT:
      return &util_format_r32g32_sint_description;
   case PIPE_FORMAT_R32G32B32_SINT:
      return &util_format_r32g32b32_sint_description;
   case PIPE_FORMAT_R32G32B32A32_SINT:
      return &util_format_r32g32b32a32_sint_description;
   case PIPE_FORMAT_A8_UINT:
      return &util_format_a8_uint_description;
   case PIPE_FORMAT_I8_UINT:
      return &util_format_i8_uint_description;
   case PIPE_FORMAT_L8_UINT:
      return &util_format_l8_uint_description;
   case PIPE_FORMAT_L8A8_UINT:
      return &util_format_l8a8_uint_description;
   case PIPE_FORMAT_A8_SINT:
      return &util_format_a8_sint_description;
   case PIPE_FORMAT_I8_SINT:
      return &util_format_i8_sint_description;
   case PIPE_FORMAT_L8_SINT:
      return &util_format_l8_sint_description;
   case PIPE_FORMAT_L8A8_SINT:
      return &util_format_l8a8_sint_description;
   case PIPE_FORMAT_A16_UINT:
      return &util_format_a16_uint_description;
   case PIPE_FORMAT_I16_UINT:
      return &util_format_i16_uint_description;
   case PIPE_FORMAT_L16_UINT:
      return &util_format_l16_uint_description;
   case PIPE_FORMAT_L16A16_UINT:
      return &util_format_l16a16_uint_description;
   case PIPE_FORMAT_A16_SINT:
      return &util_format_a16_sint_description;
   case PIPE_FORMAT_I16_SINT:
      return &util_format_i16_sint_description;
   case PIPE_FORMAT_L16_SINT:
      return &util_format_l16_sint_description;
   case PIPE_FORMAT_L16A16_SINT:
      return &util_format_l16a16_sint_description;
   case PIPE_FORMAT_A32_UINT:
      return &util_format_a32_uint_description;
   case PIPE_FORMAT_I32_UINT:
      return &util_format_i32_uint_description;
   case PIPE_FORMAT_L32_UINT:
      return &util_format_l32_uint_description;
   case PIPE_FORMAT_L32A32_UINT:
      return &util_format_l32a32_uint_description;
   case PIPE_FORMAT_A32_SINT:
      return &util_format_a32_sint_description;
   case PIPE_FORMAT_I32_SINT:
      return &util_format_i32_sint_description;
   case PIPE_FORMAT_L32_SINT:
      return &util_format_l32_sint_description;
   case PIPE_FORMAT_L32A32_SINT:
      return &util_format_l32a32_sint_description;
   case PIPE_FORMAT_B10G10R10A2_UINT:
      return &util_format_b10g10r10a2_uint_description;
   case PIPE_FORMAT_R8G8B8X8_SNORM:
      return &util_format_r8g8b8x8_snorm_description;
   case PIPE_FORMAT_R8G8B8X8_SRGB:
      return &util_format_r8g8b8x8_srgb_description;
   case PIPE_FORMAT_R8G8B8X8_UINT:
      return &util_format_r8g8b8x8_uint_description;
   case PIPE_FORMAT_R8G8B8X8_SINT:
      return &util_format_r8g8b8x8_sint_description;
   case PIPE_FORMAT_B10G10R10X2_UNORM:
      return &util_format_b10g10r10x2_unorm_description;
   case PIPE_FORMAT_R16G16B16X16_UNORM:
      return &util_format_r16g16b16x16_unorm_description;
   case PIPE_FORMAT_R16G16B16X16_SNORM:
      return &util_format_r16g16b16x16_snorm_description;
   case PIPE_FORMAT_R16G16B16X16_FLOAT:
      return &util_format_r16g16b16x16_float_description;
   case PIPE_FORMAT_R16G16B16X16_UINT:
      return &util_format_r16g16b16x16_uint_description;
   case PIPE_FORMAT_R16G16B16X16_SINT:
      return &util_format_r16g16b16x16_sint_description;
   case PIPE_FORMAT_R32G32B32X32_FLOAT:
      return &util_format_r32g32b32x32_float_description;
   case PIPE_FORMAT_R32G32B32X32_UINT:
      return &util_format_r32g32b32x32_uint_description;
   case PIPE_FORMAT_R32G32B32X32_SINT:
      return &util_format_r32g32b32x32_sint_description;
   case PIPE_FORMAT_R8A8_SNORM:
      return &util_format_r8a8_snorm_description;
   case PIPE_FORMAT_R16A16_UNORM:
      return &util_format_r16a16_unorm_description;
   case PIPE_FORMAT_R16A16_SNORM:
      return &util_format_r16a16_snorm_description;
   case PIPE_FORMAT_R16A16_FLOAT:
      return &util_format_r16a16_float_description;
   case PIPE_FORMAT_R32A32_FLOAT:
      return &util_format_r32a32_float_description;
   case PIPE_FORMAT_R8A8_UINT:
      return &util_format_r8a8_uint_description;
   case PIPE_FORMAT_R8A8_SINT:
      return &util_format_r8a8_sint_description;
   case PIPE_FORMAT_R16A16_UINT:
      return &util_format_r16a16_uint_description;
   case PIPE_FORMAT_R16A16_SINT:
      return &util_format_r16a16_sint_description;
   case PIPE_FORMAT_R32A32_UINT:
      return &util_format_r32a32_uint_description;
   case PIPE_FORMAT_R32A32_SINT:
      return &util_format_r32a32_sint_description;
   case PIPE_FORMAT_R10G10B10A2_UINT:
      return &util_format_r10g10b10a2_uint_description;
   case PIPE_FORMAT_B5G6R5_SRGB:
      return &util_format_b5g6r5_srgb_description;
   default:
      return NULL;
   }
}

@


1.4
log
@switch back to Mesa 10.2

With 10.4.3 gpu compositing on chromium would result in a black window
on older Intel parts (ie x60s with 945gm) and at least some discrete
Radeon parts.  These problems do not seem to occur on recent Intel
parts, though those have coherent memory and hardware contexts.

It isn't clear what changes in Mesa are involved in the problem
though it also occurs with the 10.3 branch.
@
text
@@


1.3
log
@Mesa 10.4.3
@
text
@a34 1
#include "u_format_bptc.h"
d42 1
a42 1
#include "util/format_srgb.h"
d85 1
a85 1
         value |= (uint8_t)CLAMP(src[0], 0.0f, 255.0f);
d1510 3
a1513 3
      unsigned r:5;
      unsigned g:5;
      unsigned b:5;
d1533 2
d1536 3
a1538 5
         uint16_t g;
         uint16_t b;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1574 3
a1576 3
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 10;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
d1580 3
a1582 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 10;
d1598 2
d1601 3
a1603 5
         uint16_t g;
         uint16_t b;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1633 2
d1636 3
a1638 5
         uint16_t g;
         uint16_t b;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1674 3
a1676 3
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
d1697 3
a1700 3
      unsigned r:5;
      unsigned g:5;
      unsigned b:5;
d1720 3
d1724 4
a1727 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 15;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1765 4
a1768 4
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x1)) << 15;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 10;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
d1772 4
a1775 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) & 0x1f) << 10;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x1)) << 15;
d1791 3
d1795 4
a1798 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 15;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1830 3
d1834 4
a1837 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 15;
         r = (value >> 10) & 0x1f;
         g = (value >> 5) & 0x1f;
         b = (value) & 0x1f;
d1875 4
a1878 4
         value |= ((uint16_t)(src[3] >> 7)) << 15;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 10;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 5;
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
d1900 3
a1903 3
      unsigned r:4;
      unsigned g:4;
      unsigned b:4;
d1923 3
d1927 4
a1930 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 12;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d1968 4
a1971 4
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 12;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xf)) & 0xf) << 4;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xf)) & 0xf;
d1975 4
a1978 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf) << 8;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 12;
d1994 3
d1998 4
a2001 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 12;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d2033 3
d2037 4
a2040 7
         uint16_t r;
         uint16_t g;
         uint16_t b;
         a = value >> 12;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d2078 4
a2081 4
         value |= ((uint16_t)(src[3] >> 4)) << 12;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
d2103 3
a2106 3
      unsigned r:4;
      unsigned g:4;
      unsigned b:4;
d2126 2
d2129 3
a2131 5
         uint16_t g;
         uint16_t b;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d2167 3
a2169 3
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xf)) & 0xf) << 4;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xf)) & 0xf;
d2173 3
a2175 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf) << 8;
d2191 2
d2194 3
a2196 5
         uint16_t g;
         uint16_t b;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d2226 2
d2229 3
a2231 5
         uint16_t g;
         uint16_t b;
         r = (value >> 8) & 0xf;
         g = (value >> 4) & 0xf;
         b = (value) & 0xf;
d2267 3
a2269 3
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 4;
         value |= ((uint16_t)(src[2] >> 4)) & 0xf;
d2290 2
a2292 2
      unsigned g:6;
      unsigned b:5;
d2311 2
d2314 1
a2314 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d2316 1
a2316 1
         b = (value) & 0x1f;
d2352 3
a2354 3
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
d2358 3
a2360 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x1f)) << 11;
d2376 2
d2379 1
a2379 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d2381 1
a2381 1
         b = (value) & 0x1f;
d2411 2
d2414 1
a2414 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d2416 1
a2416 1
         b = (value) & 0x1f;
d2452 1
a2452 1
         value |= ((uint16_t)(src[0] >> 3)) << 11;
d2454 1
a2454 1
         value |= ((uint16_t)(src[2] >> 3)) & 0x1f;
d2475 3
a2478 3
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
d2498 3
d2502 4
a2505 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d2543 4
a2546 4
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
d2550 4
a2553 4
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
d2569 3
d2573 4
a2576 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d2608 3
d2612 4
a2615 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d2653 4
a2656 4
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff;
d2678 3
a2681 3
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
d2701 3
d2705 4
a2708 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d2746 4
a2749 4
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
d2753 4
a2756 4
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
d2772 3
d2776 4
a2779 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d2811 3
d2815 4
a2818 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d2856 4
a2859 4
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff;
d2881 2
a2883 2
      unsigned g:3;
      unsigned b:2;
d2902 2
d2905 3
a2907 5
         uint8_t g;
         uint8_t b;
         r = value >> 5;
         g = (value >> 2) & 0x7;
         b = (value) & 0x3;
d2943 3
a2945 3
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x7)) << 5;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x7)) & 0x7) << 2;
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3)) & 0x3;
d2949 3
a2951 3
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3)) & 0x3;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x7)) & 0x7) << 2;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x7)) << 5;
d2967 2
d2970 3
a2972 5
         uint8_t g;
         uint8_t b;
         r = value >> 5;
         g = (value >> 2) & 0x7;
         b = (value) & 0x3;
d3002 2
d3005 3
a3007 5
         uint8_t g;
         uint8_t b;
         r = value >> 5;
         g = (value >> 2) & 0x7;
         b = (value) & 0x3;
d3043 3
a3045 3
         value |= ((uint8_t)(src[0] >> 5)) << 5;
         value |= (((uint8_t)(src[1] >> 5)) & 0x7) << 2;
         value |= ((uint8_t)(src[2] >> 6)) & 0x3;
d3375 1
a3376 1
      unsigned rgb:4;
d3394 1
d3396 2
a3397 3
         uint8_t rgb;
         a = value >> 4;
         rgb = (value) & 0xf;
d3431 2
a3432 2
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf;
d3436 2
a3437 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 4;
d3453 1
d3455 2
a3456 3
         uint8_t rgb;
         a = value >> 4;
         rgb = (value) & 0xf;
d3484 1
d3486 2
a3487 3
         uint8_t rgb;
         a = value >> 4;
         rgb = (value) & 0xf;
d3521 2
a3522 2
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
d3744 1
a3744 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
d3847 1
a3847 1
         value |= (uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff);
d3950 1
a3950 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
d4074 2
a4075 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) & 0xffff;
d4079 2
a4080 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) << 16;
d4220 1
a4220 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) ;
d4323 1
a4323 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) ;
d4447 2
a4448 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
d4452 2
a4453 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) << 8) ;
d4593 1
a4593 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) ;
d4696 1
a4696 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff)) ;
d4799 1
a4799 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) ;
d4923 2
a4924 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
d4928 2
a4929 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff)) << 16) ;
d5069 1
a5069 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) ;
d7896 2
a7897 2
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 24) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
d7902 2
a7903 2
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
d8019 3
a8022 3
      int b:10;
      int g:10;
      int r:10;
d8042 3
d8046 4
a8049 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = value >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d8087 4
a8090 4
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
d8094 4
a8097 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0x3)) << 30;
d8113 3
d8117 4
a8120 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = value >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d8152 3
d8156 4
a8159 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = value >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d8197 4
a8200 4
         value |= ((uint32_t)(src[3] >> 6)) << 30;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
d8222 2
a8224 2
      int g:5;
      int r:5;
d8243 2
d8246 3
a8248 5
         int16_t g;
         int16_t r;
         b = value >> 10;
         g = ((int16_t)(value << 6) ) >> 11;
         r = ((int16_t)(value << 11) ) >> 11;
d8284 3
a8286 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3f)) << 10;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0xf)) & 0x1f) << 5) ;
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0xf)) & 0x1f) ;
d8290 3
a8292 3
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0xf)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0xf)) & 0x1f) << 5) ;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3f)) << 10;
d8308 2
d8311 3
a8313 5
         int16_t g;
         int16_t r;
         b = value >> 10;
         g = ((int16_t)(value << 6) ) >> 11;
         r = ((int16_t)(value << 11) ) >> 11;
d8343 2
d8346 3
a8348 5
         int16_t g;
         int16_t r;
         b = value >> 10;
         g = ((int16_t)(value << 6) ) >> 11;
         r = ((int16_t)(value << 11) ) >> 11;
d8384 3
a8386 3
         value |= ((uint16_t)(src[2] >> 2)) << 10;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 5) ;
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) & 0x1f) ;
d8472 1
a8472 1
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
d8604 2
a8605 2
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
d8611 2
a8612 2
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
d8756 3
a8758 3
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0.0, 1.0) * 0xff); /* b */
d8763 3
a8765 3
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0.0, 1.0) * 0xff); /* b */
d8914 4
a8917 4
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0.0, 1.0) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0.0, 1.0) * 0xff); /* a */
d8921 4
a8924 4
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0.0, 1.0) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0.0, 1.0) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0.0, 1.0) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0.0, 1.0) * 0xff); /* a */
d9567 1
a9567 1
         value |= (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
d9685 2
a9686 2
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
d9690 2
a9691 2
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
d9835 3
a9837 3
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0.0f, 1.0f) * (double)0xffffffff);
d9841 3
a9843 3
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0.0f, 1.0f) * (double)0xffffffff);
d9991 4
a9994 4
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0.0f, 1.0f) * (double)0xffffffff);
d9998 4
a10001 4
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0.0f, 1.0f) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0.0f, 1.0f) * (double)0xffffffff);
d10133 1
a10133 1
         value |= (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
d10251 2
a10252 2
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
d10256 2
a10257 2
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
d10401 3
a10403 3
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0.0f, 4294967040.0f);
d10407 3
a10409 3
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0.0f, 4294967040.0f);
d10557 4
a10560 4
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0.0f, 4294967040.0f);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0.0f, 4294967040.0f);
d10564 4
a10567 4
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0.0f, 4294967040.0f);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0.0f, 4294967040.0f);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0.0f, 4294967040.0f);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0.0f, 4294967040.0f);
d10699 1
a10699 1
         value |= (uint32_t)((int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff)) ;
d10817 2
a10818 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
d10822 2
a10823 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
d10967 3
a10969 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1.0f, 1.0f) * (double)0x7fffffff);
d10973 3
a10975 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1.0f, 1.0f) * (double)0x7fffffff);
d11123 4
a11126 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1.0f, 1.0f) * (double)0x7fffffff);
d11130 4
a11133 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1.0f, 1.0f) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1.0f, 1.0f) * (double)0x7fffffff);
d11265 1
a11265 1
         value |= (uint32_t)((int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f)) ;
d11383 2
a11384 2
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
d11388 2
a11389 2
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
d11533 3
a11535 3
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648.0f, 2147483520.0f);
d11539 3
a11541 3
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648.0f, 2147483520.0f);
d11689 4
a11692 4
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648.0f, 2147483520.0f);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648.0f, 2147483520.0f);
d11696 4
a11699 4
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648.0f, 2147483520.0f);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648.0f, 2147483520.0f);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648.0f, 2147483520.0f);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648.0f, 2147483520.0f);
d12395 1
a12395 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
d12519 2
a12520 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff)) & 0xffff;
d12524 2
a12525 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff)) << 16;
d12681 3
a12683 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
d12687 3
a12689 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
d12838 4
a12841 4
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff);
d12845 4
a12848 4
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff);
d12980 1
a12980 1
         value |= (uint16_t)CLAMP(src[0], 0.0f, 65535.0f);
d13104 2
a13105 2
         value |= ((uint16_t)CLAMP(src[0], 0.0f, 65535.0f)) << 16;
         value |= ((uint16_t)CLAMP(src[1], 0.0f, 65535.0f)) & 0xffff;
d13109 2
a13110 2
         value |= ((uint16_t)CLAMP(src[0], 0.0f, 65535.0f)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0.0f, 65535.0f)) << 16;
d13266 3
a13268 3
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0.0f, 65535.0f);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0.0f, 65535.0f);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0.0f, 65535.0f);
d13272 3
a13274 3
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0.0f, 65535.0f);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0.0f, 65535.0f);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0.0f, 65535.0f);
d13423 4
a13426 4
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0.0f, 65535.0f);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0.0f, 65535.0f);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0.0f, 65535.0f);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0.0f, 65535.0f);
d13430 4
a13433 4
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0.0f, 65535.0f);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0.0f, 65535.0f);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0.0f, 65535.0f);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0.0f, 65535.0f);
d13565 1
a13565 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) ;
d13689 2
a13690 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
d13694 2
a13695 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff)) << 16) ;
d13851 3
a13853 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
d13857 3
a13859 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
d14008 4
a14011 4
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff);
d14015 4
a14018 4
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff);
d14150 1
a14150 1
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768.0f, 32767.0f)) ;
d14274 2
a14275 2
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768.0f, 32767.0f)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768.0f, 32767.0f)) & 0xffff) ;
d14279 2
a14280 2
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768.0f, 32767.0f)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768.0f, 32767.0f)) << 16) ;
d14436 3
a14438 3
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768.0f, 32767.0f);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768.0f, 32767.0f);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768.0f, 32767.0f);
d14442 3
a14444 3
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768.0f, 32767.0f);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768.0f, 32767.0f);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768.0f, 32767.0f);
d14593 4
a14596 4
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768.0f, 32767.0f);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768.0f, 32767.0f);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768.0f, 32767.0f);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768.0f, 32767.0f);
d14600 4
a14603 4
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768.0f, 32767.0f);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768.0f, 32767.0f);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768.0f, 32767.0f);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768.0f, 32767.0f);
d15362 1
a15362 1
         value |= (uint8_t)CLAMP(src[0], 0.0f, 255.0f);
d15486 2
a15487 2
         value |= ((uint8_t)CLAMP(src[0], 0.0f, 255.0f)) << 8;
         value |= ((uint8_t)CLAMP(src[1], 0.0f, 255.0f)) & 0xff;
d15491 2
a15492 2
         value |= ((uint8_t)CLAMP(src[0], 0.0f, 255.0f)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0.0f, 255.0f)) << 8;
d15648 3
a15650 3
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0.0f, 255.0f);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0.0f, 255.0f);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0.0f, 255.0f);
d15654 3
a15656 3
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0.0f, 255.0f);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0.0f, 255.0f);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0.0f, 255.0f);
d15819 4
a15822 4
         value |= ((uint8_t)CLAMP(src[0], 0.0f, 255.0f)) << 24;
         value |= (((uint8_t)CLAMP(src[1], 0.0f, 255.0f)) & 0xff) << 16;
         value |= (((uint8_t)CLAMP(src[2], 0.0f, 255.0f)) & 0xff) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0.0f, 255.0f)) & 0xff;
d15826 4
a15829 4
         value |= ((uint8_t)CLAMP(src[0], 0.0f, 255.0f)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0.0f, 255.0f)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0.0f, 255.0f)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0.0f, 255.0f)) << 24;
d15989 1
a15989 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) ;
d16113 2
a16114 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
d16118 2
a16119 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) << 8) ;
d16275 3
a16277 3
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f);
d16281 3
a16283 3
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f);
d16446 4
a16449 4
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
d16453 4
a16456 4
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) << 24) ;
d16616 1
a16616 1
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128.0f, 127.0f)) ;
d16740 2
a16741 2
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128.0f, 127.0f)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128.0f, 127.0f)) & 0xff) ;
d16745 2
a16746 2
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128.0f, 127.0f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128.0f, 127.0f)) << 8) ;
d16902 3
a16904 3
         pixel.chan.r = (int8_t)CLAMP(src[0], -128.0f, 127.0f);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128.0f, 127.0f);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128.0f, 127.0f);
d16908 3
a16910 3
         pixel.chan.r = (int8_t)CLAMP(src[0], -128.0f, 127.0f);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128.0f, 127.0f);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128.0f, 127.0f);
d17073 4
a17076 4
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128.0f, 127.0f)) << 24) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128.0f, 127.0f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128.0f, 127.0f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128.0f, 127.0f)) & 0xff) ;
d17080 4
a17083 4
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128.0f, 127.0f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128.0f, 127.0f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128.0f, 127.0f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128.0f, 127.0f)) << 24) ;
d17242 1
a17242 1
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
d17358 2
a17359 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
d17363 2
a17364 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
d17508 3
a17510 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536.0f, 65535.0f) * (double)0x10000);
d17514 3
a17516 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536.0f, 65535.0f) * (double)0x10000);
d17664 4
a17667 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536.0f, 65535.0f) * (double)0x10000);
d17671 4
a17674 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536.0f, 65535.0f) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536.0f, 65535.0f) * (double)0x10000);
d17771 3
a17774 3
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
d17794 2
d17797 3
a17799 5
         uint32_t g;
         uint32_t r;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d17835 3
a17837 3
         value |= (((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff) << 20;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= ((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff;
d17841 3
a17843 3
         value |= ((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff) << 20;
d17859 2
d17862 3
a17864 5
         uint32_t g;
         uint32_t r;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d17894 2
d17897 3
a17899 5
         uint32_t g;
         uint32_t r;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d17935 3
a17937 3
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
d17958 3
a17961 3
      int b:10;
      int g:10;
      int r:10;
d17981 2
d17984 3
a17986 5
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d18022 3
a18024 3
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
d18028 3
a18030 3
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
d18046 2
d18049 3
a18051 5
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d18081 2
d18084 3
a18086 5
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d18122 3
a18124 3
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
d18145 1
a18146 1
      unsigned a:4;
d18164 1
d18166 2
a18167 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18201 2
a18202 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) & 0xf;
d18206 2
a18207 2
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) << 4;
d18223 1
d18225 2
a18226 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18254 1
d18256 2
a18257 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18291 2
a18292 2
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
d18312 1
a18313 1
      unsigned r:4;
d18331 1
d18333 2
a18334 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18368 2
a18369 2
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf;
d18373 2
a18374 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xf)) << 4;
d18390 1
d18392 2
a18393 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18421 1
d18423 2
a18424 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18458 2
a18459 2
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
d18813 3
a18816 3
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
d18836 3
d18840 4
a18843 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d18881 4
a18884 4
         value |= ((uint32_t)CLAMP(src[3], 0.0f, 3.0f)) << 30;
         value |= (((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff) << 20;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= ((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff;
d18888 4
a18891 4
         value |= ((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0.0f, 3.0f)) << 30;
d18907 3
d18911 4
a18914 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d18946 3
d18950 4
a18953 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d18991 4
a18994 4
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff;
d19016 3
a19019 3
      int b:10;
      int g:10;
      int r:10;
d19039 3
d19043 4
a19046 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19084 4
a19087 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2.0f, 1.0f)) << 30) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512.0f, 511.0f)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512.0f, 511.0f)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512.0f, 511.0f)) & 0x3ff) ;
d19091 4
a19094 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512.0f, 511.0f)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512.0f, 511.0f)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512.0f, 511.0f)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2.0f, 1.0f)) << 30) ;
d19110 3
d19114 4
a19117 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19149 3
d19153 4
a19156 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19194 4
a19197 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) ;
d19219 3
a19222 3
      int b:10;
      int g:10;
      int r:10;
d19242 3
d19246 4
a19249 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19287 4
a19290 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x1)) << 30) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
d19294 4
a19297 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x1)) << 30) ;
d19313 3
d19317 4
a19320 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19352 3
d19356 4
a19359 7
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 30;
         b = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         r = ((int32_t)(value << 22) ) >> 22;
d19397 4
a19400 4
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) << 30) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) ;
d19422 3
a19425 3
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
d19445 3
d19449 4
a19452 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d19490 4
a19493 4
         value |= ((uint32_t)CLAMP(src[3], 0.0f, 3.0f)) << 30;
         value |= (((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff) << 20;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= ((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff;
d19497 4
a19500 4
         value |= ((uint32_t)CLAMP(src[2], 0.0f, 1023.0f)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0.0f, 1023.0f)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[0], 0.0f, 1023.0f)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0.0f, 3.0f)) << 30;
d19516 3
d19520 4
a19523 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d19555 3
d19559 4
a19562 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d19600 4
a19603 4
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff;
d19625 3
a19628 3
      int r:10;
      int g:10;
      int b:10;
d19648 3
d19652 4
a19655 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d19693 4
a19696 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2.0f, 1.0f)) << 30) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512.0f, 511.0f)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512.0f, 511.0f)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512.0f, 511.0f)) & 0x3ff) ;
d19700 4
a19703 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512.0f, 511.0f)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512.0f, 511.0f)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512.0f, 511.0f)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2.0f, 1.0f)) << 30) ;
d19719 3
d19723 4
a19726 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d19758 3
d19762 4
a19765 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d19803 4
a19806 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) << 30) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) ;
d19828 3
a19831 3
      int r:10;
      int g:10;
      int b:10;
d19851 3
d19855 4
a19858 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d19896 4
a19899 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x1)) << 30) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
d19903 4
a19906 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x1)) << 30) ;
d19922 3
d19926 4
a19929 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d19961 3
d19965 4
a19968 7
         int32_t r;
         int32_t g;
         int32_t b;
         a = ((int32_t)(value) ) >> 30;
         r = ((int32_t)(value << 2) ) >> 22;
         g = ((int32_t)(value << 12) ) >> 22;
         b = ((int32_t)(value << 22) ) >> 22;
d20006 4
a20009 4
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) << 30) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) << 20) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 10) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) ;
d26407 3
a26410 3
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
d26430 3
d26434 4
a26437 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d26475 4
a26478 4
         value |= ((uint32_t)MIN2(src[3], 3)) << 30;
         value |= (((uint32_t)MIN2(src[0], 1023)) & 0x3ff) << 20;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 10;
         value |= ((uint32_t)MIN2(src[2], 1023)) & 0x3ff;
d26501 3
d26505 4
a26508 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d26540 3
d26544 4
a26547 7
         uint32_t r;
         uint32_t g;
         uint32_t b;
         a = value >> 30;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d26585 4
a26588 4
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 20;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff;
d26674 3
a26676 3
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
d26680 3
a26682 3
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
d27358 3
a27361 3
      unsigned r:10;
      unsigned g:10;
      unsigned b:10;
d27381 2
d27384 3
a27386 5
         uint32_t g;
         uint32_t b;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d27422 3
a27424 3
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
d27428 3
a27430 3
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0x3ff)) & 0x3ff) << 20;
d27446 2
d27449 3
a27451 5
         uint32_t g;
         uint32_t b;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d27481 2
d27484 3
a27486 5
         uint32_t g;
         uint32_t b;
         r = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         b = (value) & 0x3ff;
d27522 3
a27524 3
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 20;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 10;
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff;
d27599 3
a27601 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
d27605 3
a27607 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0.0f, 1.0f) * 0xffff);
d27756 3
a27758 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
d27762 3
a27764 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7fff);
d28854 2
a28855 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
d28859 2
a28860 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) << 8) ;
d29021 2
a29022 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) & 0xffff;
d29026 2
a29027 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) << 16;
d29188 2
a29189 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
d29193 2
a29194 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7fff)) << 16) ;
d30563 3
a30566 3
      unsigned b:10;
      unsigned g:10;
      unsigned r:10;
d30586 3
d30590 4
a30593 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d30631 4
a30634 4
         value |= ((uint32_t)MIN2(src[3], 3)) << 30;
         value |= (((uint32_t)MIN2(src[2], 1023)) & 0x3ff) << 20;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 10;
         value |= ((uint32_t)MIN2(src[0], 1023)) & 0x3ff;
d30657 3
d30661 4
a30664 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d30696 3
d30700 4
a30703 7
         uint32_t b;
         uint32_t g;
         uint32_t r;
         a = value >> 30;
         b = (value >> 20) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value) & 0x3ff;
d30741 4
a30744 4
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
d30766 2
a30768 2
      unsigned g:6;
      unsigned b:5;
d30787 2
d30790 1
a30790 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d30792 1
a30792 1
         b = (value) & 0x1f;
d30828 1
a30828 1
         value |= (util_format_linear_float_to_srgb_8unorm(src[0]) >> 3) << 11;
d30830 1
a30830 1
         value |= (util_format_linear_float_to_srgb_8unorm(src[2]) >> 3) & 0x1f;
d30852 2
d30855 1
a30855 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d30857 1
a30857 1
         b = (value) & 0x1f;
d30887 2
d30890 1
a30890 3
         uint16_t g;
         uint16_t b;
         r = value >> 11;
d30892 1
a30892 1
         b = (value) & 0x1f;
d30928 1
a30928 1
         value |= (util_format_linear_to_srgb_8unorm(src[0]) >> 3) << 11;
d30930 1
a30930 1
         value |= (util_format_linear_to_srgb_8unorm(src[2]) >> 3) & 0x1f;
d30947 55
a31001 3
union util_format_a8l8_unorm {
   uint16_t value;
   struct {
d31003 6
a31008 2
      uint8_t a;
      uint8_t rgb;
d31010 6
a31015 2
      uint8_t a;
      uint8_t rgb;
d31017 7
a31023 1793
   } chan;
};

static INLINE void
util_format_a8l8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) << 8;
         value |= (float_to_ubyte(src[0])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= (float_to_ubyte(src[0])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8l8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = ubyte_to_float(rgb); /* r */
         dst[1] = ubyte_to_float(rgb); /* g */
         dst[2] = ubyte_to_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8l8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = rgb; /* r */
         dst[1] = rgb; /* g */
         dst[2] = rgb; /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[3]) << 8;
         value |= (src[0]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[3]) & 0xff;
         value |= (src[0]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8l8_snorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t a;
      int8_t rgb;
#else
      int8_t a;
      int8_t rgb;
#endif
   } chan;
};

static INLINE void
util_format_a8l8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value) ) >> 8;
         rgb = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value << 8) ) >> 8;
         rgb = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8l8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value) ) >> 8;
         rgb = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value << 8) ) >> 8;
         rgb = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(rgb * (1.0f/0x7f)); /* r */
         dst[1] = (float)(rgb * (1.0f/0x7f)); /* g */
         dst[2] = (float)(rgb * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
}

static INLINE void
util_format_a8l8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value) ) >> 8;
         rgb = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t a;
         int16_t rgb;
         a = ((int16_t)(value << 8) ) >> 8;
         rgb = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(rgb, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) << 8) ;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[3] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8l8_srgb {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t a;
      uint8_t rgb;
#else
      uint8_t a;
      uint8_t rgb;
#endif
   } chan;
};

static INLINE void
util_format_a8l8_srgb_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_srgb_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) << 8;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[3])) & 0xff;
         value |= (util_format_linear_float_to_srgb_8unorm(src[0])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8l8_srgb_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = util_format_srgb_8unorm_to_linear_float(rgb); /* r */
         dst[1] = util_format_srgb_8unorm_to_linear_float(rgb); /* g */
         dst[2] = util_format_srgb_8unorm_to_linear_float(rgb); /* b */
         dst[3] = ubyte_to_float(a); /* a */
#endif
}

static INLINE void
util_format_a8l8_srgb_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = value >> 8;
         rgb = (value) & 0xff;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t a;
         uint16_t rgb;
         a = (value) & 0xff;
         rgb = value >> 8;
         dst[0] = util_format_srgb_to_linear_8unorm(rgb); /* r */
         dst[1] = util_format_srgb_to_linear_8unorm(rgb); /* g */
         dst[2] = util_format_srgb_to_linear_8unorm(rgb); /* b */
         dst[3] = a; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8l8_srgb_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[3]) << 8;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[3]) & 0xff;
         value |= (util_format_linear_to_srgb_8unorm(src[0])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a16l16_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t a;
      uint16_t rgb;
#else
      uint16_t a;
      uint16_t rgb;
#endif
   } chan;
};

static INLINE void
util_format_a16l16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = value >> 16;
         rgb = (value) & 0xffff;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = (value) & 0xffff;
         rgb = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16l16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a16l16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = value >> 16;
         rgb = (value) & 0xffff;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = (value) & 0xffff;
         rgb = value >> 16;
         dst[0] = (float)(rgb * (1.0f/0xffff)); /* r */
         dst[1] = (float)(rgb * (1.0f/0xffff)); /* g */
         dst[2] = (float)(rgb * (1.0f/0xffff)); /* b */
         dst[3] = (float)(a * (1.0f/0xffff)); /* a */
#endif
}

static INLINE void
util_format_a16l16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = value >> 16;
         rgb = (value) & 0xffff;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t a;
         uint32_t rgb;
         a = (value) & 0xffff;
         rgb = value >> 16;
         dst[0] = (uint8_t)(rgb >> 8); /* r */
         dst[1] = (uint8_t)(rgb >> 8); /* g */
         dst[2] = (uint8_t)(rgb >> 8); /* b */
         dst[3] = (uint8_t)(a >> 8); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a16l16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[3]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_g8r8_unorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t g;
      uint8_t r;
#else
      uint8_t g;
      uint8_t r;
#endif
   } chan;
};

static INLINE void
util_format_g8r8_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = value >> 8;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = (value) & 0xff;
         r = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g8r8_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (float_to_ubyte(src[1])) << 8;
         value |= (float_to_ubyte(src[0])) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (float_to_ubyte(src[1])) & 0xff;
         value |= (float_to_ubyte(src[0])) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_g8r8_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = value >> 8;
         r = (value) & 0xff;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = (value) & 0xff;
         r = value >> 8;
         dst[0] = ubyte_to_float(r); /* r */
         dst[1] = ubyte_to_float(g); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_g8r8_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = value >> 8;
         r = (value) & 0xff;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         uint16_t g;
         uint16_t r;
         g = (value) & 0xff;
         r = value >> 8;
         dst[0] = r; /* r */
         dst[1] = g; /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g8r8_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (src[1]) << 8;
         value |= (src[0]) & 0xff;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (src[1]) & 0xff;
         value |= (src[0]) << 8;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_g8r8_snorm {
   uint16_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t g;
      int8_t r;
#else
      int8_t g;
      int8_t r;
#endif
   } chan;
};

static INLINE void
util_format_g8r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value) ) >> 8;
         r = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value << 8) ) >> 8;
         r = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g8r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_g8r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value) ) >> 8;
         r = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value << 8) ) >> 8;
         r = ((int16_t)(value) ) >> 8;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_g8r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value) ) >> 8;
         r = ((int16_t)(value << 8) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint16_t value = *(const uint16_t *)src;
         int16_t g;
         int16_t r;
         g = ((int16_t)(value << 8) ) >> 8;
         r = ((int16_t)(value) ) >> 8;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 2;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g8r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) << 8) ;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         *(uint16_t *)dst = value;
#else
         uint16_t value = 0;
         value |= (uint16_t)(((int8_t)(src[1] >> 1)) & 0xff) ;
         value |= (uint16_t)(((int8_t)(src[0] >> 1)) << 8) ;
         *(uint16_t *)dst = value;
#endif
         src += 4;
         dst += 2;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_g16r16_unorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint16_t g;
      uint16_t r;
#else
      uint16_t g;
      uint16_t r;
#endif
   } chan;
};

static INLINE void
util_format_g16r16_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = value >> 16;
         r = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = (value) & 0xffff;
         r = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g16r16_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0.0f, 1.0f) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0.0f, 1.0f) * 0xffff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_g16r16_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = value >> 16;
         r = (value) & 0xffff;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = (value) & 0xffff;
         r = value >> 16;
         dst[0] = (float)(r * (1.0f/0xffff)); /* r */
         dst[1] = (float)(g * (1.0f/0xffff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_g16r16_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = value >> 16;
         r = (value) & 0xffff;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         uint32_t g;
         uint32_t r;
         g = (value) & 0xffff;
         r = value >> 16;
         dst[0] = (uint8_t)(r >> 8); /* r */
         dst[1] = (uint8_t)(g >> 8); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g16r16_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) << 16;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) & 0xffff;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= ((uint16_t)(((uint32_t)src[1]) * 0xffff / 0xff)) & 0xffff;
         value |= ((uint16_t)(((uint32_t)src[0]) * 0xffff / 0xff)) << 16;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_g16r16_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int16_t g;
      int16_t r;
#else
      int16_t g;
      int16_t r;
#endif
   } chan;
};

static INLINE void
util_format_g16r16_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value) ) >> 16;
         r = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value << 16) ) >> 16;
         r = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g16r16_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7fff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_g16r16_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value) ) >> 16;
         r = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value << 16) ) >> 16;
         r = ((int32_t)(value) ) >> 16;
         dst[0] = (float)(r * (1.0f/0x7fff)); /* r */
         dst[1] = (float)(g * (1.0f/0x7fff)); /* g */
         dst[2] = 0; /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_g16r16_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value) ) >> 16;
         r = ((int32_t)(value << 16) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t g;
         int32_t r;
         g = ((int32_t)(value << 16) ) >> 16;
         r = ((int32_t)(value) ) >> 16;
         dst[0] = (uint8_t)(MAX2(r, 0) >> 7); /* r */
         dst[1] = (uint8_t)(MAX2(g, 0) >> 7); /* g */
         dst[2] = 0; /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_g16r16_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) << 16) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) & 0xffff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[1]) * 0x7fff / 0xff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)(((uint32_t)src[0]) * 0x7fff / 0xff)) << 16) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_a8b8g8r8_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      int8_t a;
      int8_t b;
      int8_t g;
      int8_t r;
#else
      int8_t a;
      int8_t b;
      int8_t g;
      int8_t r;
#endif
   } chan;
};

static INLINE void
util_format_a8b8g8r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value << 24) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_a8b8g8r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value << 24) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = (float)(a * (1.0f/0x7f)); /* a */
#endif
}

static INLINE void
util_format_a8b8g8r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value) ) >> 24;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t a;
         int32_t b;
         int32_t g;
         int32_t r;
         a = ((int32_t)(value << 24) ) >> 24;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = (uint8_t)(((uint32_t)MAX2(a, 0)) * 0xff / 0x7f); /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_a8b8g8r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) << 24) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)(((int8_t)(src[3] >> 1)) & 0xff) ;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

union util_format_x8b8g8r8_snorm {
   uint32_t value;
   struct {
#ifdef PIPE_ARCH_BIG_ENDIAN
      uint8_t x;
      int8_t b;
      int8_t g;
      int8_t r;
#else
      uint8_t x;
      int8_t b;
      int8_t g;
      int8_t r;
#endif
   } chan;
};

static INLINE void
util_format_x8b8g8r8_snorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      float *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_snorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const float *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1.0f, 1.0f) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1.0f, 1.0f) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1.0f, 1.0f) * 0x7f)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

static INLINE void
util_format_x8b8g8r8_snorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
{
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (float)(r * (1.0f/0x7f)); /* r */
         dst[1] = (float)(g * (1.0f/0x7f)); /* g */
         dst[2] = (float)(b * (1.0f/0x7f)); /* b */
         dst[3] = 1; /* a */
#endif
}

static INLINE void
util_format_x8b8g8r8_snorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      uint8_t *dst = dst_row;
      const uint8_t *src = src_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 8) ) >> 24;
         g = ((int32_t)(value << 16) ) >> 24;
         r = ((int32_t)(value << 24) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#else
         uint32_t value = *(const uint32_t *)src;
         int32_t b;
         int32_t g;
         int32_t r;
         b = ((int32_t)(value << 16) ) >> 24;
         g = ((int32_t)(value << 8) ) >> 24;
         r = ((int32_t)(value) ) >> 24;
         dst[0] = (uint8_t)(((uint32_t)MAX2(r, 0)) * 0xff / 0x7f); /* r */
         dst[1] = (uint8_t)(((uint32_t)MAX2(g, 0)) * 0xff / 0x7f); /* g */
         dst[2] = (uint8_t)(((uint32_t)MAX2(b, 0)) * 0xff / 0x7f); /* b */
         dst[3] = 255; /* a */
#endif
         src += 4;
         dst += 4;
      }
      src_row += src_stride;
      dst_row += dst_stride/sizeof(*dst_row);
   }
}

static INLINE void
util_format_x8b8g8r8_snorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
{
   unsigned x, y;
   for(y = 0; y < height; y += 1) {
      const uint8_t *src = src_row;
      uint8_t *dst = dst_row;
      for(x = 0; x < width; x += 1) {
#ifdef PIPE_ARCH_BIG_ENDIAN
         uint32_t value = 0;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) & 0xff) ;
         *(uint32_t *)dst = value;
#else
         uint32_t value = 0;
         value |= (uint32_t)((((int8_t)(src[2] >> 1)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)(src[1] >> 1)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)(src[0] >> 1)) << 24) ;
         *(uint32_t *)dst = value;
#endif
         src += 4;
         dst += 4;
      }
      dst_row += dst_stride;
      src_row += src_stride/sizeof(*src_row);
   }
}

const struct util_format_description
util_format_none_description = {
   PIPE_FORMAT_NONE,
   "PIPE_FORMAT_NONE",
   "none",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_none_unpack_rgba_8unorm,
   &util_format_none_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_none_unpack_rgba_float,
   &util_format_none_pack_rgba_float,
   &util_format_none_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_b8g8r8a8_unorm_description = {
   PIPE_FORMAT_B8G8R8A8_UNORM,
   "PIPE_FORMAT_B8G8R8A8_UNORM",
   "b8g8r8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0}	/* w = a */
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 16},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 24}	/* w = a */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
d31438 4
a31441 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 1, 15},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 10},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 5},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0}	/* w = b */
d31453 3
a31455 3
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
d31500 4
a31503 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 1, 15},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 10},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 5},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0}	/* w = b */
d31515 4
a31518 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d31562 4
a31565 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0}	/* w = b */
d31577 4
a31580 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d31624 4
a31627 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 4, 12},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0}	/* w = b */
d31639 3
a31641 3
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
d31686 1
a31686 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = r */
d31688 1
a31688 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = b */
d31701 1
a31701 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d31703 1
a31703 1
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
d31748 4
a31751 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0}	/* w = r */
d31763 4
a31766 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d31810 4
a31813 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0}	/* w = b */
d31825 4
a31828 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d31872 3
a31874 3
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 5},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 2},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0},	/* z = b */
d31887 1
a31887 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d31889 1
a31889 1
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
d32066 2
a32067 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = rgb */
d32081 4
a32084 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d33824 4
a33827 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0}	/* w = r */
d33839 4
a33842 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d33886 3
a33888 3
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 10},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 5},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 0},	/* z = r */
d33901 1
a33901 1
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
d33903 1
a33903 1
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d34124 2
a34125 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
d34139 2
a34140 2
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
d34186 2
a34187 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
d34201 2
a34202 2
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d34248 2
a34249 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* y = x */
d34264 1
a34264 1
      UTIL_FORMAT_SWIZZLE_X,	/* s */
d34310 2
a34311 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
d34326 1
a34326 1
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d34372 2
a34373 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
d34387 1
a34387 1
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
d34434 2
a34435 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* y = x */
d34449 1
a34449 1
      UTIL_FORMAT_SWIZZLE_X,	/* z */
d34497 2
a34498 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* y = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* z = s */
d34512 1
a34512 1
      UTIL_FORMAT_SWIZZLE_Z,	/* s */
d34559 2
a34560 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* y = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* z = s */
d34574 1
a34574 1
      UTIL_FORMAT_SWIZZLE_Z,	/* s */
a35813 176
util_format_bptc_rgba_unorm_description = {
   PIPE_FORMAT_BPTC_RGBA_UNORM,
   "PIPE_FORMAT_BPTC_RGBA_UNORM",
   "bptc_rgba_unorm",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_BPTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_bptc_rgba_unorm_unpack_rgba_8unorm,
   &util_format_bptc_rgba_unorm_pack_rgba_8unorm,
   &util_format_bptc_rgba_unorm_fetch_rgba_8unorm,
   &util_format_bptc_rgba_unorm_unpack_rgba_float,
   &util_format_bptc_rgba_unorm_pack_rgba_float,
   &util_format_bptc_rgba_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_bptc_srgba_description = {
   PIPE_FORMAT_BPTC_SRGBA,
   "PIPE_FORMAT_BPTC_SRGBA",
   "bptc_srgba",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_BPTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
      UTIL_FORMAT_SWIZZLE_W	/* a */
   },
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_bptc_srgba_unpack_rgba_8unorm,
   &util_format_bptc_srgba_pack_rgba_8unorm,
   &util_format_bptc_srgba_fetch_rgba_8unorm,
   &util_format_bptc_srgba_unpack_rgba_float,
   &util_format_bptc_srgba_pack_rgba_float,
   &util_format_bptc_srgba_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_bptc_rgb_float_description = {
   PIPE_FORMAT_BPTC_RGB_FLOAT,
   "PIPE_FORMAT_BPTC_RGB_FLOAT",
   "bptc_rgb_float",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_BPTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_bptc_rgb_float_unpack_rgba_8unorm,
   &util_format_bptc_rgb_float_pack_rgba_8unorm,
   &util_format_bptc_rgb_float_fetch_rgba_8unorm,
   &util_format_bptc_rgb_float_unpack_rgba_float,
   &util_format_bptc_rgb_float_pack_rgba_float,
   &util_format_bptc_rgb_float_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_bptc_rgb_ufloat_description = {
   PIPE_FORMAT_BPTC_RGB_UFLOAT,
   "PIPE_FORMAT_BPTC_RGB_UFLOAT",
   "bptc_rgb_ufloat",
   {4, 4, 128},	/* block */
   UTIL_FORMAT_LAYOUT_BPTC,
   1,	/* nr_channels */
   FALSE,	/* is_array */
   FALSE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 128, 0},	/* x = x */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_bptc_rgb_ufloat_unpack_rgba_8unorm,
   &util_format_bptc_rgb_ufloat_pack_rgba_8unorm,
   &util_format_bptc_rgb_ufloat_fetch_rgba_8unorm,
   &util_format_bptc_rgb_ufloat_unpack_rgba_float,
   &util_format_bptc_rgb_ufloat_pack_rgba_float,
   &util_format_bptc_rgb_ufloat_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
d39506 4
a39509 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0}	/* w = r */
d39521 3
a39523 3
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
d39568 4
a39571 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0}	/* w = r */
d39583 3
a39585 3
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
d39940 2
a39941 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = a */
d39955 1
a39955 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d39958 1
a39958 1
      UTIL_FORMAT_SWIZZLE_Y	/* a */
d40002 2
a40003 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = r */
d40017 1
a40017 1
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
d40020 1
a40020 1
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40188 4
a40191 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0}	/* w = r */
d40203 4
a40206 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40250 4
a40253 4
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 0}	/* w = r */
d40265 4
a40268 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40312 4
a40315 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0}	/* w = r */
d40327 4
a40330 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40374 4
a40377 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 0}	/* w = b */
d40389 4
a40392 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40436 4
a40439 4
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 0}	/* w = b */
d40451 4
a40454 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d40498 4
a40501 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 0}	/* w = b */
d40513 4
a40516 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d43104 4
a43107 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 0}	/* w = b */
d43119 4
a43122 4
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d43414 4
a43417 4
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 30},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 20},	/* y = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 0}	/* w = b */
d43429 3
a43431 3
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_W,	/* b */
d44654 4
a44657 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 30},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 20},	/* y = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 10},	/* z = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 0}	/* w = r */
d44669 4
a44672 4
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
d44716 1
a44716 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = r */
d44718 1
a44718 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = b */
d44731 1
a44731 1
      UTIL_FORMAT_SWIZZLE_X,	/* sr */
d44733 1
a44733 1
      UTIL_FORMAT_SWIZZLE_Z,	/* sb */
a44764 620
const struct util_format_description
util_format_a8l8_unorm_description = {
   PIPE_FORMAT_A8L8_UNORM,
   "PIPE_FORMAT_A8L8_UNORM",
   "a8l8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8l8_unorm_unpack_rgba_8unorm,
   &util_format_a8l8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8l8_unorm_unpack_rgba_float,
   &util_format_a8l8_unorm_pack_rgba_float,
   &util_format_a8l8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8l8_snorm_description = {
   PIPE_FORMAT_A8L8_SNORM,
   "PIPE_FORMAT_A8L8_SNORM",
   "a8l8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8l8_snorm_unpack_rgba_8unorm,
   &util_format_a8l8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8l8_snorm_unpack_rgba_float,
   &util_format_a8l8_snorm_pack_rgba_float,
   &util_format_a8l8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8l8_srgb_description = {
   PIPE_FORMAT_A8L8_SRGB,
   "PIPE_FORMAT_A8L8_SRGB",
   "a8l8_srgb",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* sr */
      UTIL_FORMAT_SWIZZLE_Y,	/* sg */
      UTIL_FORMAT_SWIZZLE_Y,	/* sb */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_SRGB,
   &util_format_a8l8_srgb_unpack_rgba_8unorm,
   &util_format_a8l8_srgb_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8l8_srgb_unpack_rgba_float,
   &util_format_a8l8_srgb_pack_rgba_float,
   &util_format_a8l8_srgb_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a16l16_unorm_description = {
   PIPE_FORMAT_A16L16_UNORM,
   "PIPE_FORMAT_A16L16_UNORM",
   "a16l16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = rgb */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a16l16_unorm_unpack_rgba_8unorm,
   &util_format_a16l16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a16l16_unorm_unpack_rgba_float,
   &util_format_a16l16_unorm_pack_rgba_float,
   &util_format_a16l16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g8r8_unorm_description = {
   PIPE_FORMAT_G8R8_UNORM,
   "PIPE_FORMAT_G8R8_UNORM",
   "g8r8_unorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* x = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 0},	/* x = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g8r8_unorm_unpack_rgba_8unorm,
   &util_format_g8r8_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g8r8_unorm_unpack_rgba_float,
   &util_format_g8r8_unorm_pack_rgba_float,
   &util_format_g8r8_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g8r8_snorm_description = {
   PIPE_FORMAT_G8R8_SNORM,
   "PIPE_FORMAT_G8R8_SNORM",
   "g8r8_snorm",
   {1, 1, 16},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* x = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g8r8_snorm_unpack_rgba_8unorm,
   &util_format_g8r8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g8r8_snorm_unpack_rgba_float,
   &util_format_g8r8_snorm_pack_rgba_float,
   &util_format_g8r8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g16r16_unorm_description = {
   PIPE_FORMAT_G16R16_UNORM,
   "PIPE_FORMAT_G16R16_UNORM",
   "g16r16_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* x = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 0},	/* x = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 16, 16},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g16r16_unorm_unpack_rgba_8unorm,
   &util_format_g16r16_unorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g16r16_unorm_unpack_rgba_float,
   &util_format_g16r16_unorm_pack_rgba_float,
   &util_format_g16r16_unorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_g16r16_snorm_description = {
   PIPE_FORMAT_G16R16_SNORM,
   "PIPE_FORMAT_G16R16_SNORM",
   "g16r16_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   2,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* x = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 0},	/* x = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 16, 16},	/* y = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_g16r16_snorm_unpack_rgba_8unorm,
   &util_format_g16r16_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_g16r16_snorm_unpack_rgba_float,
   &util_format_g16r16_snorm_pack_rgba_float,
   &util_format_g16r16_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_a8b8g8r8_snorm_description = {
   PIPE_FORMAT_A8B8G8R8_SNORM,
   "PIPE_FORMAT_A8B8G8R8_SNORM",
   "a8b8g8r8_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0},	/* x = a */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_X	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_a8b8g8r8_snorm_unpack_rgba_8unorm,
   &util_format_a8b8g8r8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_a8b8g8r8_snorm_unpack_rgba_float,
   &util_format_a8b8g8r8_snorm_pack_rgba_float,
   &util_format_a8b8g8r8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

const struct util_format_description
util_format_x8b8g8r8_snorm_description = {
   PIPE_FORMAT_X8B8G8R8_SNORM,
   "PIPE_FORMAT_X8B8G8R8_SNORM",
   "x8b8g8r8_snorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 0}	/* w = r */
   },
#else
   {
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* x = x */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 8},	/* y = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 16},	/* z = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 8, 24}	/* w = r */
   },
#endif
#ifdef PIPE_ARCH_BIG_ENDIAN
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#else
   {
      UTIL_FORMAT_SWIZZLE_W,	/* r */
      UTIL_FORMAT_SWIZZLE_Z,	/* g */
      UTIL_FORMAT_SWIZZLE_Y,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
#endif
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_x8b8g8r8_snorm_unpack_rgba_8unorm,
   &util_format_x8b8g8r8_snorm_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_x8b8g8r8_snorm_unpack_rgba_float,
   &util_format_x8b8g8r8_snorm_pack_rgba_float,
   &util_format_x8b8g8r8_snorm_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
};

a44958 8
   case PIPE_FORMAT_BPTC_RGBA_UNORM:
      return &util_format_bptc_rgba_unorm_description;
   case PIPE_FORMAT_BPTC_SRGBA:
      return &util_format_bptc_srgba_description;
   case PIPE_FORMAT_BPTC_RGB_FLOAT:
      return &util_format_bptc_rgb_float_description;
   case PIPE_FORMAT_BPTC_RGB_UFLOAT:
      return &util_format_bptc_rgb_ufloat_description;
a45270 20
   case PIPE_FORMAT_A8L8_UNORM:
      return &util_format_a8l8_unorm_description;
   case PIPE_FORMAT_A8L8_SNORM:
      return &util_format_a8l8_snorm_description;
   case PIPE_FORMAT_A8L8_SRGB:
      return &util_format_a8l8_srgb_description;
   case PIPE_FORMAT_A16L16_UNORM:
      return &util_format_a16l16_unorm_description;
   case PIPE_FORMAT_G8R8_UNORM:
      return &util_format_g8r8_unorm_description;
   case PIPE_FORMAT_G8R8_SNORM:
      return &util_format_g8r8_snorm_description;
   case PIPE_FORMAT_G16R16_UNORM:
      return &util_format_g16r16_unorm_description;
   case PIPE_FORMAT_G16R16_SNORM:
      return &util_format_g16r16_snorm_description;
   case PIPE_FORMAT_A8B8G8R8_SNORM:
      return &util_format_a8b8g8r8_snorm_description;
   case PIPE_FORMAT_X8B8G8R8_SNORM:
      return &util_format_x8b8g8r8_snorm_description;
@


1.2
log
@Mesa 10.2.3
@
text
@d35 1
d43 1
a43 1
#include "u_format_srgb.h"
d86 1
a86 1
         value |= (uint8_t)CLAMP(src[0], 0, 255);
d1511 3
a1514 3
      unsigned g:5;
      unsigned r:5;
      unsigned x:1;
d1534 2
d1537 3
a1539 5
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
d1575 3
a1577 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 6;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 1;
d1581 3
a1583 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
d1599 2
d1602 3
a1604 5
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
d1634 2
d1637 3
a1639 5
         uint16_t g;
         uint16_t r;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
d1675 3
a1677 3
         value |= ((uint16_t)(src[2] >> 3)) << 11;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 6;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 1;
d1698 3
a1701 3
      unsigned g:5;
      unsigned r:5;
      unsigned a:1;
d1721 3
d1725 4
a1728 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
d1766 4
a1769 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 6;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 1;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0x1)) & 0x1;
d1773 4
a1776 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x1f)) & 0x1f) << 5;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f) << 10;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0x1)) << 15;
d1792 3
d1796 4
a1799 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
d1831 3
d1835 4
a1838 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 11;
         g = (value >> 6) & 0x1f;
         r = (value >> 1) & 0x1f;
         a = (value) & 0x1;
d1876 4
a1879 4
         value |= ((uint16_t)(src[2] >> 3)) << 11;
         value |= (((uint16_t)(src[1] >> 3)) & 0x1f) << 6;
         value |= (((uint16_t)(src[0] >> 3)) & 0x1f) << 1;
         value |= ((uint16_t)(src[3] >> 7)) & 0x1;
d1901 3
a1904 3
      unsigned g:4;
      unsigned r:4;
      unsigned a:4;
d1924 3
d1928 4
a1931 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
d1969 4
a1972 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) << 12;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 4;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
d1976 4
a1979 4
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 12;
d1995 3
d1999 4
a2002 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
d2034 3
d2038 4
a2041 7
         uint16_t g;
         uint16_t r;
         uint16_t a;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
         a = (value) & 0xf;
d2079 4
a2082 4
         value |= ((uint16_t)(src[2] >> 4)) << 12;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 4;
         value |= ((uint16_t)(src[3] >> 4)) & 0xf;
d2104 3
a2107 3
      unsigned g:4;
      unsigned r:4;
      unsigned x:4;
d2127 2
d2130 3
a2132 5
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
d2168 3
a2170 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) << 12;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 8;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 4;
d2174 3
a2176 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xf)) & 0xf;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xf)) & 0xf) << 4;
         value |= (((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf) << 8;
d2192 2
d2195 3
a2197 5
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
d2227 2
d2230 3
a2232 5
         uint16_t g;
         uint16_t r;
         b = value >> 12;
         g = (value >> 8) & 0xf;
         r = (value >> 4) & 0xf;
d2268 3
a2270 3
         value |= ((uint16_t)(src[2] >> 4)) << 12;
         value |= (((uint16_t)(src[1] >> 4)) & 0xf) << 8;
         value |= (((uint16_t)(src[0] >> 4)) & 0xf) << 4;
d2291 2
a2293 2
      unsigned g:6;
      unsigned r:5;
d2312 2
d2315 1
a2315 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d2317 1
a2317 1
         r = (value) & 0x1f;
d2353 3
a2355 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) << 11;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) & 0x1f;
d2359 3
a2361 3
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x1f)) & 0x1f;
         value |= (((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0x3f)) & 0x3f) << 5;
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0x1f)) << 11;
d2377 2
d2380 1
a2380 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d2382 1
a2382 1
         r = (value) & 0x1f;
d2412 2
d2415 1
a2415 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d2417 1
a2417 1
         r = (value) & 0x1f;
d2453 1
a2453 1
         value |= ((uint16_t)(src[2] >> 3)) << 11;
d2455 1
a2455 1
         value |= ((uint16_t)(src[0] >> 3)) & 0x1f;
d2476 3
a2479 3
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
d2499 3
d2503 4
a2506 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2544 4
a2547 4
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff) << 2;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
d2551 4
a2554 4
         value |= ((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
d2570 3
d2574 4
a2577 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2609 3
d2613 4
a2616 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2654 4
a2657 4
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
d2679 3
a2682 3
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
d2702 3
d2706 4
a2709 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2747 4
a2750 4
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 2;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
d2754 4
a2757 4
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 20;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
d2773 3
d2777 4
a2780 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2812 3
d2816 4
a2819 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d2857 4
a2860 4
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
d2882 2
a2884 2
      unsigned g:3;
      unsigned r:3;
d2903 2
d2906 3
a2908 5
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
d2944 3
a2946 3
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0, 1) * 0x3)) << 6;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0, 1) * 0x7)) & 0x7) << 3;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0x7)) & 0x7;
d2950 3
a2952 3
         value |= ((uint8_t)util_iround(CLAMP(src[2], 0, 1) * 0x3)) & 0x3;
         value |= (((uint8_t)util_iround(CLAMP(src[1], 0, 1) * 0x7)) & 0x7) << 2;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0x7)) << 5;
d2968 2
d2971 3
a2973 5
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
d3003 2
d3006 3
a3008 5
         uint8_t g;
         uint8_t r;
         b = value >> 6;
         g = (value >> 3) & 0x7;
         r = (value) & 0x7;
d3044 3
a3046 3
         value |= ((uint8_t)(src[2] >> 6)) << 6;
         value |= (((uint8_t)(src[1] >> 5)) & 0x7) << 3;
         value |= ((uint8_t)(src[0] >> 5)) & 0x7;
d3376 1
a3377 1
      unsigned a:4;
d3395 1
d3397 2
a3398 3
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
d3432 2
a3433 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
d3437 2
a3438 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
d3454 1
d3456 2
a3457 3
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
d3485 1
d3487 2
a3488 3
         uint8_t a;
         rgb = value >> 4;
         a = (value) & 0xf;
d3522 2
a3523 2
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
d3745 1
a3745 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
d3848 1
a3848 1
         value |= (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
d3951 1
a3951 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
d4075 2
a4076 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) & 0xffff;
d4080 2
a4081 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) << 16;
d4221 1
a4221 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) ;
d4324 1
a4324 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
d4448 2
a4449 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
d4453 2
a4454 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 8) ;
d4594 1
a4594 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
d4697 1
a4697 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) ;
d4800 1
a4800 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
d4924 2
a4925 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) & 0xffff) ;
d4929 2
a4930 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) << 16) ;
d5070 1
a5070 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
d7897 2
a7898 2
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
d7903 2
a7904 2
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
d8020 3
a8023 3
      int g:10;
      int b:10;
      unsigned a:2;
d8043 3
d8047 4
a8050 7
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
d8088 4
a8091 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) & 0x3;
d8095 4
a8098 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= ((uint32_t)util_iround(CLAMP(src[3], 0, 1) * 0x3)) << 30;
d8114 3
d8118 4
a8121 7
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
d8153 3
d8157 4
a8160 7
         int32_t g;
         int32_t b;
         uint32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = (value) & 0x3;
d8198 4
a8201 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= ((uint32_t)(src[3] >> 6)) & 0x3;
d8223 2
a8225 2
      int g:5;
      unsigned b:6;
d8244 2
d8247 3
a8249 5
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
d8285 3
a8287 3
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1, 1) * 0xf)) << 11) ;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 6) ;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x3f)) & 0x3f;
d8291 3
a8293 3
         value |= (uint16_t)(((uint16_t)util_iround(CLAMP(src[0], -1, 1) * 0xf)) & 0x1f) ;
         value |= (uint16_t)((((uint16_t)util_iround(CLAMP(src[1], -1, 1) * 0xf)) & 0x1f) << 5) ;
         value |= ((uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0x3f)) << 10;
d8309 2
d8312 3
a8314 5
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
d8344 2
d8347 3
a8349 5
         int16_t g;
         uint16_t b;
         r = ((int16_t)(value) ) >> 11;
         g = ((int16_t)(value << 5) ) >> 11;
         b = (value) & 0x3f;
d8385 3
a8387 3
         value |= (uint16_t)(((uint16_t)(src[0] >> 4)) << 11) ;
         value |= (uint16_t)((((uint16_t)(src[1] >> 4)) & 0x1f) << 6) ;
         value |= ((uint16_t)(src[2] >> 2)) & 0x3f;
d8473 1
a8473 1
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
d8605 2
a8606 2
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
d8612 2
a8613 2
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
d8757 3
a8759 3
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
d8764 3
a8766 3
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
d8915 4
a8918 4
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
d8922 4
a8925 4
         dst[0] = (uint8_t)util_iround(CLAMP(pixel.chan.r, 0, 1) * 0xff); /* r */
         dst[1] = (uint8_t)util_iround(CLAMP(pixel.chan.g, 0, 1) * 0xff); /* g */
         dst[2] = (uint8_t)util_iround(CLAMP(pixel.chan.b, 0, 1) * 0xff); /* b */
         dst[3] = (uint8_t)util_iround(CLAMP(pixel.chan.a, 0, 1) * 0xff); /* a */
d9568 1
a9568 1
         value |= (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
d9686 2
a9687 2
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
d9691 2
a9692 2
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
d9836 3
a9838 3
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
d9842 3
a9844 3
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
d9992 4
a9995 4
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
d9999 4
a10002 4
         pixel.chan.r = (uint32_t)(CLAMP(src[0], 0, 1) * (double)0xffffffff);
         pixel.chan.g = (uint32_t)(CLAMP(src[1], 0, 1) * (double)0xffffffff);
         pixel.chan.b = (uint32_t)(CLAMP(src[2], 0, 1) * (double)0xffffffff);
         pixel.chan.a = (uint32_t)(CLAMP(src[3], 0, 1) * (double)0xffffffff);
d10134 1
a10134 1
         value |= (uint32_t)CLAMP(src[0], 0, 4294967295);
d10252 2
a10253 2
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
d10257 2
a10258 2
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
d10402 3
a10404 3
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
d10408 3
a10410 3
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
d10558 4
a10561 4
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
d10565 4
a10568 4
         pixel.chan.r = (uint32_t)CLAMP(src[0], 0, 4294967295);
         pixel.chan.g = (uint32_t)CLAMP(src[1], 0, 4294967295);
         pixel.chan.b = (uint32_t)CLAMP(src[2], 0, 4294967295);
         pixel.chan.a = (uint32_t)CLAMP(src[3], 0, 4294967295);
d10700 1
a10700 1
         value |= (uint32_t)((int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff)) ;
d10818 2
a10819 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
d10823 2
a10824 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
d10968 3
a10970 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
d10974 3
a10976 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
d11124 4
a11127 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
d11131 4
a11134 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -1, 1) * (double)0x7fffffff);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -1, 1) * (double)0x7fffffff);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -1, 1) * (double)0x7fffffff);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -1, 1) * (double)0x7fffffff);
d11266 1
a11266 1
         value |= (uint32_t)((int32_t)CLAMP(src[0], -2147483648, 2147483647)) ;
d11384 2
a11385 2
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
d11389 2
a11390 2
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
d11534 3
a11536 3
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
d11540 3
a11542 3
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
d11690 4
a11693 4
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
d11697 4
a11700 4
         pixel.chan.r = (int32_t)CLAMP(src[0], -2147483648, 2147483647);
         pixel.chan.g = (int32_t)CLAMP(src[1], -2147483648, 2147483647);
         pixel.chan.b = (int32_t)CLAMP(src[2], -2147483648, 2147483647);
         pixel.chan.a = (int32_t)CLAMP(src[3], -2147483648, 2147483647);
d12396 1
a12396 1
         value |= (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
d12520 2
a12521 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff)) & 0xffff;
d12525 2
a12526 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff)) << 16;
d12682 3
a12684 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
d12688 3
a12690 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
d12839 4
a12842 4
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
d12846 4
a12849 4
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
         pixel.chan.a = (uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff);
d12981 1
a12981 1
         value |= (uint16_t)CLAMP(src[0], 0, 65535);
d13105 2
a13106 2
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) << 16;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) & 0xffff;
d13110 2
a13111 2
         value |= ((uint16_t)CLAMP(src[0], 0, 65535)) & 0xffff;
         value |= ((uint16_t)CLAMP(src[1], 0, 65535)) << 16;
d13267 3
a13269 3
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
d13273 3
a13275 3
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
d13424 4
a13427 4
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
d13431 4
a13434 4
         pixel.chan.r = (uint16_t)CLAMP(src[0], 0, 65535);
         pixel.chan.g = (uint16_t)CLAMP(src[1], 0, 65535);
         pixel.chan.b = (uint16_t)CLAMP(src[2], 0, 65535);
         pixel.chan.a = (uint16_t)CLAMP(src[3], 0, 65535);
d13566 1
a13566 1
         value |= (uint16_t)((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) ;
d13690 2
a13691 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff)) & 0xffff) ;
d13695 2
a13696 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff)) << 16) ;
d13852 3
a13854 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
d13858 3
a13860 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
d14009 4
a14012 4
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff);
d14016 4
a14019 4
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
         pixel.chan.a = (int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff);
d14151 1
a14151 1
         value |= (uint16_t)((int16_t)CLAMP(src[0], -32768, 32767)) ;
d14275 2
a14276 2
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) << 16) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) & 0xffff) ;
d14280 2
a14281 2
         value |= (uint32_t)(((int16_t)CLAMP(src[0], -32768, 32767)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)CLAMP(src[1], -32768, 32767)) << 16) ;
d14437 3
a14439 3
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
d14443 3
a14445 3
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
d14594 4
a14597 4
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
d14601 4
a14604 4
         pixel.chan.r = (int16_t)CLAMP(src[0], -32768, 32767);
         pixel.chan.g = (int16_t)CLAMP(src[1], -32768, 32767);
         pixel.chan.b = (int16_t)CLAMP(src[2], -32768, 32767);
         pixel.chan.a = (int16_t)CLAMP(src[3], -32768, 32767);
d15363 1
a15363 1
         value |= (uint8_t)CLAMP(src[0], 0, 255);
d15487 2
a15488 2
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 8;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) & 0xff;
d15492 2
a15493 2
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= ((uint8_t)CLAMP(src[1], 0, 255)) << 8;
d15649 3
a15651 3
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
d15655 3
a15657 3
         pixel.chan.r = (uint8_t)CLAMP(src[0], 0, 255);
         pixel.chan.g = (uint8_t)CLAMP(src[1], 0, 255);
         pixel.chan.b = (uint8_t)CLAMP(src[2], 0, 255);
d15820 4
a15823 4
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) << 24;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 16;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 8;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) & 0xff;
d15827 4
a15830 4
         value |= ((uint8_t)CLAMP(src[0], 0, 255)) & 0xff;
         value |= (((uint8_t)CLAMP(src[1], 0, 255)) & 0xff) << 8;
         value |= (((uint8_t)CLAMP(src[2], 0, 255)) & 0xff) << 16;
         value |= ((uint8_t)CLAMP(src[3], 0, 255)) << 24;
d15990 1
a15990 1
         value |= (uint8_t)((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) ;
d16114 2
a16115 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) ;
d16119 2
a16120 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) << 8) ;
d16276 3
a16278 3
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f);
d16282 3
a16284 3
         pixel.chan.r = (int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f);
         pixel.chan.g = (int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f);
         pixel.chan.b = (int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f);
d16447 4
a16450 4
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
d16454 4
a16457 4
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 24) ;
d16617 1
a16617 1
         value |= (uint8_t)((int8_t)CLAMP(src[0], -128, 127)) ;
d16741 2
a16742 2
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) << 8) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) & 0xff) ;
d16746 2
a16747 2
         value |= (uint16_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint16_t)(((int8_t)CLAMP(src[1], -128, 127)) << 8) ;
d16903 3
a16905 3
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
d16909 3
a16911 3
         pixel.chan.r = (int8_t)CLAMP(src[0], -128, 127);
         pixel.chan.g = (int8_t)CLAMP(src[1], -128, 127);
         pixel.chan.b = (int8_t)CLAMP(src[2], -128, 127);
d17074 4
a17077 4
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) << 24) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) & 0xff) ;
d17081 4
a17084 4
         value |= (uint32_t)(((int8_t)CLAMP(src[0], -128, 127)) & 0xff) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[1], -128, 127)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)CLAMP(src[2], -128, 127)) & 0xff) << 16) ;
         value |= (uint32_t)(((int8_t)CLAMP(src[3], -128, 127)) << 24) ;
d17243 1
a17243 1
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
d17359 2
a17360 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
d17364 2
a17365 2
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
d17509 3
a17511 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
d17515 3
a17517 3
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
d17665 4
a17668 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
d17672 4
a17675 4
         pixel.chan.r = (int32_t)(CLAMP(src[0], -65536, 65535) * (double)0x10000);
         pixel.chan.g = (int32_t)(CLAMP(src[1], -65536, 65535) * (double)0x10000);
         pixel.chan.b = (int32_t)(CLAMP(src[2], -65536, 65535) * (double)0x10000);
         pixel.chan.a = (int32_t)(CLAMP(src[3], -65536, 65535) * (double)0x10000);
d17772 3
a17775 3
      unsigned g:10;
      unsigned b:10;
      unsigned x:2;
d17795 2
d17798 3
a17800 5
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
d17836 3
a17838 3
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
d17842 3
a17844 3
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
d17860 2
d17863 3
a17865 5
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
d17895 2
d17898 3
a17900 5
         uint32_t g;
         uint32_t b;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
d17936 3
a17938 3
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2;
d17959 3
a17962 3
      int g:10;
      int b:10;
      unsigned x:2;
d17982 2
d17985 3
a17987 5
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
d18023 3
a18025 3
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
d18029 3
a18031 3
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
d18047 2
d18050 3
a18052 5
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
d18082 2
d18085 3
a18087 5
         int32_t g;
         int32_t b;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
d18123 3
a18125 3
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
d18146 1
a18147 1
      unsigned r:4;
d18165 1
d18167 2
a18168 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18202 2
a18203 2
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
d18207 2
a18208 2
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
d18224 1
d18226 2
a18227 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18255 1
d18257 2
a18258 3
         uint8_t r;
         a = value >> 4;
         r = (value) & 0xf;
d18292 2
a18293 2
         value |= ((uint8_t)(src[3] >> 4)) << 4;
         value |= ((uint8_t)(src[0] >> 4)) & 0xf;
d18313 1
a18314 1
      unsigned a:4;
d18332 1
d18334 2
a18335 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18369 2
a18370 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) << 4;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) & 0xf;
d18374 2
a18375 2
         value |= ((uint8_t)util_iround(CLAMP(src[0], 0, 1) * 0xf)) & 0xf;
         value |= ((uint8_t)util_iround(CLAMP(src[3], 0, 1) * 0xf)) << 4;
d18391 1
d18393 2
a18394 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18422 1
d18424 2
a18425 3
         uint8_t a;
         r = value >> 4;
         a = (value) & 0xf;
d18459 2
a18460 2
         value |= ((uint8_t)(src[0] >> 4)) << 4;
         value |= ((uint8_t)(src[3] >> 4)) & 0xf;
d18814 3
a18817 3
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
d18837 3
d18841 4
a18844 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d18882 4
a18885 4
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
d18889 4
a18892 4
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
d18908 3
d18912 4
a18915 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d18947 3
d18951 4
a18954 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d18992 4
a18995 4
         value |= ((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3;
d19017 3
a19020 3
      int g:10;
      int b:10;
      int a:2;
d19040 3
d19044 4
a19047 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19085 4
a19088 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512, 511)) << 22) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) & 0x3) ;
d19092 4
a19095 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) << 30) ;
d19111 3
d19115 4
a19118 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19150 3
d19154 4
a19157 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19195 4
a19198 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3) ;
d19220 3
a19223 3
      int g:10;
      int b:10;
      int a:2;
d19243 3
d19247 4
a19250 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19288 4
a19291 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) & 0x3) ;
d19295 4
a19298 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) << 30) ;
d19314 3
d19318 4
a19321 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19353 3
d19357 4
a19360 7
         int32_t g;
         int32_t b;
         int32_t a;
         r = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         b = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19398 4
a19401 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) & 0x3) ;
d19423 3
a19426 3
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
d19446 3
d19450 4
a19453 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d19491 4
a19494 4
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
d19498 4
a19501 4
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 10;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 20;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) << 30;
d19517 3
d19521 4
a19524 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d19556 3
d19560 4
a19563 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d19601 4
a19604 4
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 2;
         value |= ((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3;
d19626 3
a19629 3
      int g:10;
      int r:10;
      int a:2;
d19649 3
d19653 4
a19656 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19694 4
a19697 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512, 511)) << 22) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) & 0x3) ;
d19701 4
a19704 4
         value |= (uint32_t)(((uint32_t)CLAMP(src[2], -512, 511)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[1], -512, 511)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)CLAMP(src[0], -512, 511)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)CLAMP(src[3], -2, 1)) << 30) ;
d19720 3
d19724 4
a19727 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19759 3
d19763 4
a19766 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19804 4
a19807 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1 / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1 / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1 / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[3]) * 0x1 / 0xff)) & 0x3) ;
d19829 3
a19832 3
      int g:10;
      int r:10;
      int a:2;
d19852 3
d19856 4
a19859 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19897 4
a19900 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) << 22) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) & 0x3) ;
d19904 4
a19907 4
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[2], -1, 1) * 0x1ff)) & 0x3ff) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[1], -1, 1) * 0x1ff)) & 0x3ff) << 10) ;
         value |= (uint32_t)((((uint32_t)util_iround(CLAMP(src[0], -1, 1) * 0x1ff)) & 0x3ff) << 20) ;
         value |= (uint32_t)(((uint32_t)util_iround(CLAMP(src[3], -1, 1) * 0x1)) << 30) ;
d19923 3
d19927 4
a19930 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d19962 3
d19966 4
a19969 7
         int32_t g;
         int32_t r;
         int32_t a;
         b = ((int32_t)(value) ) >> 22;
         g = ((int32_t)(value << 10) ) >> 22;
         r = ((int32_t)(value << 20) ) >> 22;
         a = ((int32_t)(value << 30) ) >> 30;
d20007 4
a20010 4
         value |= (uint32_t)(((uint32_t)(((uint32_t)src[2]) * 0x1ff / 0xff)) << 22) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[1]) * 0x1ff / 0xff)) & 0x3ff) << 12) ;
         value |= (uint32_t)((((uint32_t)(((uint32_t)src[0]) * 0x1ff / 0xff)) & 0x3ff) << 2) ;
         value |= (uint32_t)(((uint32_t)(src[3] >> 7)) & 0x3) ;
d26408 3
a26411 3
      unsigned g:10;
      unsigned r:10;
      unsigned a:2;
d26431 3
d26435 4
a26438 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d26476 4
a26479 4
         value |= ((uint32_t)MIN2(src[2], 1023)) << 22;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)MIN2(src[0], 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)MIN2(src[3], 3)) & 0x3;
d26502 3
d26506 4
a26509 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d26541 3
d26545 4
a26548 7
         uint32_t g;
         uint32_t r;
         uint32_t a;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d26586 4
a26589 4
         value |= ((uint32_t)CLAMP(src[2], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[0], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
d26675 3
a26677 3
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 24) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 16) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 8) ;
d26681 3
a26683 3
         value |= (uint32_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[1], -1, 1) * 0x7f)) & 0xff) << 8) ;
         value |= (uint32_t)((((int8_t)util_iround(CLAMP(src[2], -1, 1) * 0x7f)) & 0xff) << 16) ;
d27359 3
a27362 3
      unsigned g:10;
      unsigned r:10;
      unsigned x:2;
d27382 2
d27385 3
a27387 5
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
d27423 3
a27425 3
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) << 22;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 12;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 2;
d27429 3
a27431 3
         value |= ((uint32_t)util_iround(CLAMP(src[2], 0, 1) * 0x3ff)) & 0x3ff;
         value |= (((uint32_t)util_iround(CLAMP(src[1], 0, 1) * 0x3ff)) & 0x3ff) << 10;
         value |= (((uint32_t)util_iround(CLAMP(src[0], 0, 1) * 0x3ff)) & 0x3ff) << 20;
d27447 2
d27450 3
a27452 5
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
d27482 2
d27485 3
a27487 5
         uint32_t g;
         uint32_t r;
         b = value >> 22;
         g = (value >> 12) & 0x3ff;
         r = (value >> 2) & 0x3ff;
d27523 3
a27525 3
         value |= ((uint32_t)(((uint32_t)src[2]) * 0x3ff / 0xff)) << 22;
         value |= (((uint32_t)(((uint32_t)src[1]) * 0x3ff / 0xff)) & 0x3ff) << 12;
         value |= (((uint32_t)(((uint32_t)src[0]) * 0x3ff / 0xff)) & 0x3ff) << 2;
d27600 3
a27602 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
d27606 3
a27608 3
         pixel.chan.r = (uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff);
         pixel.chan.g = (uint16_t)util_iround(CLAMP(src[1], 0, 1) * 0xffff);
         pixel.chan.b = (uint16_t)util_iround(CLAMP(src[2], 0, 1) * 0xffff);
d27757 3
a27759 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
d27763 3
a27765 3
         pixel.chan.r = (int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff);
         pixel.chan.g = (int16_t)util_iround(CLAMP(src[1], -1, 1) * 0x7fff);
         pixel.chan.b = (int16_t)util_iround(CLAMP(src[2], -1, 1) * 0x7fff);
d28855 2
a28856 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) << 8) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) & 0xff) ;
d28860 2
a28861 2
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[0], -1, 1) * 0x7f)) & 0xff) ;
         value |= (uint16_t)(((int8_t)util_iround(CLAMP(src[3], -1, 1) * 0x7f)) << 8) ;
d29022 2
a29023 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) << 16;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) & 0xffff;
d29027 2
a29028 2
         value |= ((uint16_t)util_iround(CLAMP(src[0], 0, 1) * 0xffff)) & 0xffff;
         value |= ((uint16_t)util_iround(CLAMP(src[3], 0, 1) * 0xffff)) << 16;
d29189 2
a29190 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) << 16) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) & 0xffff) ;
d29194 2
a29195 2
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[0], -1, 1) * 0x7fff)) & 0xffff) ;
         value |= (uint32_t)(((int16_t)util_iround(CLAMP(src[3], -1, 1) * 0x7fff)) << 16) ;
d30564 3
a30567 3
      unsigned g:10;
      unsigned b:10;
      unsigned a:2;
d30587 3
d30591 4
a30594 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d30632 4
a30635 4
         value |= ((uint32_t)MIN2(src[0], 1023)) << 22;
         value |= (((uint32_t)MIN2(src[1], 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)MIN2(src[2], 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)MIN2(src[3], 3)) & 0x3;
d30658 3
d30662 4
a30665 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d30697 3
d30701 4
a30704 7
         uint32_t g;
         uint32_t b;
         uint32_t a;
         r = value >> 22;
         g = (value >> 12) & 0x3ff;
         b = (value >> 2) & 0x3ff;
         a = (value) & 0x3;
d30742 4
a30745 4
         value |= ((uint32_t)CLAMP(src[0], 0, 1023)) << 22;
         value |= (((uint32_t)CLAMP(src[1], 0, 1023)) & 0x3ff) << 12;
         value |= (((uint32_t)CLAMP(src[2], 0, 1023)) & 0x3ff) << 2;
         value |= ((uint32_t)CLAMP(src[3], 0, 3)) & 0x3;
d30767 2
a30769 2
      unsigned g:6;
      unsigned r:5;
d30788 2
d30791 1
a30791 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d30793 1
a30793 1
         r = (value) & 0x1f;
d30829 1
a30829 1
         value |= (util_format_linear_float_to_srgb_8unorm(src[2]) >> 3) << 11;
d30831 1
a30831 1
         value |= (util_format_linear_float_to_srgb_8unorm(src[0]) >> 3) & 0x1f;
d30853 2
d30856 1
a30856 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d30858 1
a30858 1
         r = (value) & 0x1f;
d30888 2
d30891 1
a30891 3
         uint16_t g;
         uint16_t r;
         b = value >> 11;
d30893 1
a30893 1
         r = (value) & 0x1f;
d30929 1
a30929 1
         value |= (util_format_linear_to_srgb_8unorm(src[2]) >> 3) << 11;
d30931 1
a30931 1
         value |= (util_format_linear_to_srgb_8unorm(src[0]) >> 3) & 0x1f;
d30948 11
a30958 42
const struct util_format_description
util_format_none_description = {
   PIPE_FORMAT_NONE,
   "PIPE_FORMAT_NONE",
   "none",
   {1, 1, 8},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   1,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
   {
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 8, 0},	/* x = r */
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0}
   },
   {
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_0,	/* g */
      UTIL_FORMAT_SWIZZLE_0,	/* b */
      UTIL_FORMAT_SWIZZLE_1	/* a */
   },
   UTIL_FORMAT_COLORSPACE_RGB,
   &util_format_none_unpack_rgba_8unorm,
   &util_format_none_pack_rgba_8unorm,
   NULL, /* fetch_rgba_8unorm */
   &util_format_none_unpack_rgba_float,
   &util_format_none_pack_rgba_float,
   &util_format_none_fetch_rgba_float,
   NULL, /* unpack_z_32unorm */
   NULL, /* pack_z_32unorm */
   NULL, /* unpack_z_float */
   NULL, /* pack_z_float */
   NULL, /* unpack_s_8uint */
   NULL, /* pack_s_8uint */
   NULL, /* unpack_rgba_uint */
   NULL, /* pack_rgba_uint */
   NULL, /* unpack_rgba_sint */
   NULL, /* pack_rgba_sint */
   NULL, /* fetch_rgba_uint */
   NULL  /* fetch_rgba_sint */
d30961 1768
a32728 11
const struct util_format_description
util_format_b8g8r8a8_unorm_description = {
   PIPE_FORMAT_B8G8R8A8_UNORM,
   "PIPE_FORMAT_B8G8R8A8_UNORM",
   "b8g8r8a8_unorm",
   {1, 1, 32},	/* block */
   UTIL_FORMAT_LAYOUT_PLAIN,
   4,	/* nr_channels */
   TRUE,	/* is_array */
   TRUE,	/* is_bitmask */
   FALSE,	/* is_mixed */
d33165 4
a33168 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 1},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 1, 0}	/* w = x */
d33180 3
a33182 3
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d33227 4
a33230 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 1},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 1, 0}	/* w = a */
d33242 4
a33245 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d33289 4
a33292 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0}	/* w = a */
d33304 4
a33307 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d33351 4
a33354 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 12},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 8},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 4, 0}	/* w = x */
d33366 3
a33368 3
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d33413 1
a33413 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
d33415 1
a33415 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = r */
d33428 1
a33428 1
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
d33430 1
a33430 1
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d33475 4
a33478 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
d33490 4
a33493 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d33537 4
a33540 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
d33552 4
a33555 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d33599 3
a33601 3
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 6},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 3},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 3, 0},	/* z = r */
d33614 1
a33614 1
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
d33616 1
a33616 1
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d33793 2
a33794 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = rgb */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = a */
d33808 4
a33811 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_X,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_Y	/* a */
d35551 4
a35554 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 2, 0}	/* w = a */
d35566 4
a35569 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d35613 3
a35615 3
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 11},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 5, 6},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 6, 0},	/* z = b */
d35628 1
a35628 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d35630 1
a35630 1
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
d35851 2
a35852 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
d35866 2
a35867 2
      UTIL_FORMAT_SWIZZLE_X,	/* z */
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d35913 2
a35914 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
d35928 2
a35929 2
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
      UTIL_FORMAT_SWIZZLE_X,	/* s */
d35975 2
a35976 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 8},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 0},	/* y = s */
d35991 1
a35991 1
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d36037 2
a36038 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* x = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* y = x */
d36053 1
a36053 1
      UTIL_FORMAT_SWIZZLE_X,	/* s */
d36099 2
a36100 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 8},	/* x = z */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 0},	/* y = x */
d36114 1
a36114 1
      UTIL_FORMAT_SWIZZLE_X,	/* z */
d36161 2
a36162 2
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 8, 24},	/* x = x */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 24, 0},	/* y = z */
d36176 1
a36176 1
      UTIL_FORMAT_SWIZZLE_Y,	/* z */
d36224 2
a36225 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* z = x */
d36239 1
a36239 1
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d36286 2
a36287 2
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 8, 24},	/* y = s */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 24, 0},	/* z = x */
d36301 1
a36301 1
      UTIL_FORMAT_SWIZZLE_Y,	/* s */
d37541 176
d41409 4
a41412 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
d41424 3
a41426 3
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
d41471 4
a41474 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
d41486 3
a41488 3
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
d41843 2
a41844 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = a */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = r */
d41858 1
a41858 1
      UTIL_FORMAT_SWIZZLE_Y,	/* r */
d41861 1
a41861 1
      UTIL_FORMAT_SWIZZLE_X	/* a */
d41905 2
a41906 2
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 4},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 4, 0},	/* y = a */
d41920 1
a41920 1
      UTIL_FORMAT_SWIZZLE_X,	/* r */
d41923 1
a41923 1
      UTIL_FORMAT_SWIZZLE_Y	/* a */
d42091 4
a42094 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 0}	/* w = a */
d42106 4
a42109 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d42153 4
a42156 4
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 0}	/* w = a */
d42168 4
a42171 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d42215 4
a42218 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 0}	/* w = a */
d42230 4
a42233 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d42277 4
a42280 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, FALSE, 2, 0}	/* w = a */
d42292 4
a42295 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d42339 4
a42342 4
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, FALSE, FALSE, 2, 0}	/* w = a */
d42354 4
a42357 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d42401 4
a42404 4
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_SIGNED, TRUE, FALSE, 2, 0}	/* w = a */
d42416 4
a42419 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d45007 4
a45010 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 0}	/* w = a */
d45022 4
a45025 4
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d45317 4
a45320 4
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 22},	/* x = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 10, 2},	/* z = r */
      {UTIL_FORMAT_TYPE_VOID, FALSE, FALSE, 2, 0}	/* w = x */
d45332 3
a45334 3
      UTIL_FORMAT_SWIZZLE_Z,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_X,	/* b */
d46557 4
a46560 4
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 22},	/* x = r */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 12},	/* y = g */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 10, 2},	/* z = b */
      {UTIL_FORMAT_TYPE_UNSIGNED, FALSE, TRUE, 2, 0}	/* w = a */
d46572 4
a46575 4
      UTIL_FORMAT_SWIZZLE_X,	/* r */
      UTIL_FORMAT_SWIZZLE_Y,	/* g */
      UTIL_FORMAT_SWIZZLE_Z,	/* b */
      UTIL_FORMAT_SWIZZLE_W	/* a */
d46619 1
a46619 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 11},	/* x = b */
d46621 1
a46621 1
      {UTIL_FORMAT_TYPE_UNSIGNED, TRUE, FALSE, 5, 0},	/* z = r */
d46634 1
a46634 1
      UTIL_FORMAT_SWIZZLE_Z,	/* sr */
d46636 1
a46636 1
      UTIL_FORMAT_SWIZZLE_X,	/* sb */
d46668 620
d47482 8
d47802 20
@


1.1
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@d152 1
d157 6
d174 15
d202 1
d219 8
d233 1
d245 15
d273 1
d284 15
d312 1
d329 8
d343 1
d355 6
d365 1
d377 13
d401 1
d418 7
d430 1
d442 13
d466 1
d477 13
d501 1
d518 7
d530 1
d542 6
d552 1
d564 15
d592 1
d609 8
d623 1
d635 15
d663 1
d674 15
d702 1
d719 8
d733 1
d745 6
d755 1
d767 13
d791 1
d808 7
d820 1
d832 13
d856 1
d867 13
d891 1
d908 7
d920 1
d932 6
d942 1
d954 15
d982 1
d999 8
d1013 1
d1025 15
d1053 1
d1064 15
d1092 1
d1109 8
d1123 1
d1135 6
d1145 1
d1157 13
d1181 1
d1198 7
d1210 1
d1222 13
d1246 1
d1257 13
d1281 1
d1298 7
d1310 1
d1322 6
d1332 1
d1344 13
d1368 1
d1385 7
d1397 1
d1409 13
d1433 1
d1444 13
d1468 1
d1485 7
d1497 1
d1509 6
d1519 1
d1531 13
d1555 1
d1572 7
d1584 1
d1596 13
d1620 1
d1631 13
d1655 1
d1672 7
d1684 1
d1696 6
d1706 1
d1718 15
d1746 1
d1763 8
d1777 1
d1789 15
d1817 1
d1828 15
d1856 1
d1873 8
d1887 1
d1899 6
d1909 1
d1921 15
d1949 1
d1966 8
d1980 1
d1992 15
d2020 1
d2031 15
d2059 1
d2076 8
d2090 1
d2102 6
d2112 1
d2124 13
d2148 1
d2165 7
d2177 1
d2189 13
d2213 1
d2224 13
d2248 1
d2265 7
d2277 1
d2289 5
d2297 1
d2309 13
d2333 1
d2350 7
d2362 1
d2374 1
d2379 1
a2379 1
         b = (value) & 0x1f;
d2381 1
a2381 1
         r = value >> 11;
d2386 13
d2409 13
d2433 1
d2450 7
d2462 1
d2474 6
d2484 1
d2496 15
d2524 1
d2541 8
d2555 1
d2567 15
d2595 1
d2606 15
d2634 1
d2651 8
d2665 1
d2677 6
d2687 1
d2699 15
d2727 1
d2744 8
d2758 1
d2770 15
d2798 1
d2809 15
d2837 1
d2854 8
d2868 1
d2880 1
d2884 5
d2900 13
d2924 1
d2941 7
d2953 1
d2965 13
d2989 1
d3000 13
d3024 1
d3041 7
d3053 1
d3374 4
d3380 1
d3392 11
d3412 1
d3429 6
d3439 1
d3451 11
d3471 1
d3482 11
d3502 1
d3519 6
d3529 1
d3541 4
d3547 1
d3559 11
d3579 1
d3596 6
d3606 1
d3618 11
d3638 1
d3649 11
d3669 1
d3686 6
d3696 1
d4017 4
d4023 1
d4035 11
d4055 1
d4072 6
d4082 1
d4094 11
d4114 1
d4125 11
d4145 1
d4162 6
d4172 1
d4390 4
d4396 1
d4408 11
d4428 1
d4445 6
d4455 1
d4467 11
d4487 1
d4498 11
d4518 1
d4535 6
d4545 1
d4866 4
d4872 1
d4884 11
d4904 1
d4921 6
d4931 1
d4943 11
d4963 1
d4974 11
d4994 1
d5011 6
d5021 1
d5336 1
d5339 4
d5354 8
d5368 1
d5385 6
d5395 1
d5407 1
d5414 8
d5432 8
d5446 1
d5463 6
d5473 1
d5785 1
d5788 4
d5803 8
d5817 1
d5834 1
d5839 6
d5856 8
d5870 1
d5881 8
d5895 1
d5912 1
d5917 6
d6137 1
d6140 4
d6155 11
d6175 1
d6192 6
d6202 1
d6214 11
d6234 1
d6245 11
d6265 1
d6282 6
d6292 1
d6303 1
d6307 5
d6323 8
d6337 1
d6354 7
d6366 1
d6378 8
d6392 1
d6403 1
d6410 8
d6434 7
d6446 1
d6458 6
d6468 1
d6480 15
d6508 1
d6525 8
d6539 1
d6551 15
d6579 1
d6590 15
d6618 1
d6635 8
d6649 1
d6661 6
d6671 1
d6683 15
d6711 1
d6728 8
d6742 1
d6754 15
d6782 1
d6793 15
d6821 1
d6838 8
d6852 1
d6864 6
d6874 1
d6886 13
d6910 1
d6927 7
d6939 1
d6951 13
d6975 1
d6986 13
d7010 1
d7027 7
d7039 1
d7051 1
d7056 6
d7073 15
d7101 1
d7118 8
d7132 1
d7144 15
d7172 1
d7183 15
d7211 1
d7228 8
d7242 1
d7254 6
d7264 1
d7276 13
d7300 1
d7317 7
d7329 1
d7341 13
d7365 1
d7376 13
d7400 1
d7417 7
d7429 1
d7441 6
d7451 1
d7463 15
d7491 1
d7508 8
d7522 1
d7534 15
d7562 1
d7573 15
d7601 1
d7618 8
d7632 1
d7644 6
d7654 1
d7666 13
d7690 1
d7707 7
d7719 1
d7731 13
d7755 1
d7766 13
d7790 1
d7807 7
d7819 1
d7831 6
d7841 1
d7853 13
d7877 1
d7894 7
d7906 1
d7918 13
d7942 1
d7953 13
d7977 1
d7994 7
d8006 1
d8018 6
d8028 1
d8040 15
d8068 1
d8085 8
d8099 1
d8111 15
d8139 1
d8150 15
d8178 1
d8195 8
d8209 1
d8221 1
d8225 5
d8241 13
d8265 1
d8282 7
d8294 1
d8306 13
d8330 1
d8341 13
d8365 1
d8382 7
d8394 1
d8505 4
d8511 1
d8523 8
d8537 1
d8554 6
d8564 1
d8576 8
d8590 1
d8601 8
d8615 1
d8632 6
d8642 1
d8653 5
d8661 1
d8673 8
d8687 1
d8704 1
d8710 7
d8728 8
d8742 1
d8753 8
d8767 1
d8784 7
d8796 1
d8807 6
d8817 1
d8829 8
d8843 1
d8860 1
d8867 8
d8886 8
d8900 1
d8911 8
d8925 1
d8942 8
d8956 1
d9068 1
d9071 4
d9086 8
d9100 1
d9117 1
d9122 6
d9139 8
d9153 1
d9164 8
d9178 1
d9195 1
d9200 6
d9216 1
d9220 5
d9236 8
d9250 1
d9267 7
d9279 1
d9291 8
d9305 1
d9316 1
d9323 8
d9347 7
d9359 1
d9370 6
d9380 1
d9392 8
d9406 1
d9423 8
d9437 1
d9449 1
d9456 8
d9474 8
d9488 1
d9505 8
d9519 1
d9634 4
d9640 1
d9652 8
d9666 1
d9683 6
d9693 1
d9705 8
d9719 1
d9730 8
d9744 1
d9761 6
d9771 1
d9782 5
d9790 1
d9802 8
d9816 1
d9833 7
d9845 1
d9857 8
d9871 1
d9882 8
d9896 1
d9913 7
d9925 1
d9936 1
d9941 6
d9958 8
d9972 1
d9989 8
d10003 1
d10015 1
d10022 8
d10040 8
d10054 1
d10071 8
d10085 1
d10200 4
d10206 1
d10218 8
d10232 1
d10249 6
d10259 1
d10271 8
d10285 1
d10296 8
d10310 1
d10327 6
d10337 1
d10348 5
d10356 1
d10368 8
d10382 1
d10399 7
d10411 1
d10423 8
d10437 1
d10448 8
d10462 1
d10479 1
d10485 7
d10502 6
d10512 1
d10524 8
d10538 1
d10555 8
d10569 1
d10581 8
d10595 1
d10606 8
d10620 1
d10637 8
d10651 1
d10766 4
d10772 1
d10784 8
d10798 1
d10815 6
d10825 1
d10837 8
d10851 1
d10862 8
d10876 1
d10893 6
d10903 1
d10914 5
d10922 1
d10934 8
d10948 1
d10965 7
d10977 1
d10989 8
d11003 1
d11014 8
d11028 1
d11045 7
d11057 1
d11068 6
d11078 1
d11090 8
d11104 1
d11121 8
d11135 1
d11147 8
d11161 1
d11172 1
d11179 8
d11203 8
d11217 1
d11332 1
d11335 4
d11350 8
d11364 1
d11381 6
d11391 1
d11403 1
d11410 8
d11428 8
d11442 1
d11459 6
d11469 1
d11480 1
d11484 5
d11500 8
d11514 1
d11531 7
d11543 1
d11555 8
d11569 1
d11580 8
d11594 1
d11611 7
d11623 1
d11634 6
d11644 1
d11656 8
d11670 1
d11687 8
d11701 1
d11713 8
d11727 1
d11738 8
d11752 1
d11769 8
d11783 1
d11895 4
d11901 1
d11913 8
d11927 1
d11944 6
d11954 1
d11966 8
d11980 1
d11991 8
d12005 1
d12022 6
d12032 1
d12043 5
d12051 1
d12063 1
d12070 8
d12094 7
d12106 1
d12118 8
d12132 1
d12143 8
d12157 1
d12174 7
d12186 1
d12198 6
d12208 1
d12220 1
d12227 8
d12251 8
d12265 1
d12277 8
d12291 1
d12302 8
d12316 1
d12333 1
d12340 8
d12462 4
d12468 1
d12480 11
d12500 1
d12517 6
d12527 1
d12539 11
d12559 1
d12570 11
d12590 1
d12607 6
d12617 1
d12628 5
d12636 1
d12648 1
d12655 8
d12679 7
d12691 1
d12703 8
d12717 1
d12728 8
d12742 1
d12759 7
d12771 1
d12783 1
d12788 6
d12805 8
d12819 1
d12836 8
d12850 1
d12862 1
d12869 8
d12887 8
d12901 1
d12918 8
d12932 1
d13047 4
d13053 1
d13065 11
d13085 1
d13102 6
d13112 1
d13124 11
d13144 1
d13155 11
d13175 1
d13192 6
d13202 1
d13213 5
d13221 1
d13233 1
d13240 8
d13264 7
d13276 1
d13288 8
d13302 1
d13313 8
d13327 1
d13344 7
d13356 1
d13368 6
d13378 1
d13390 1
d13397 8
d13421 8
d13435 1
d13447 8
d13461 1
d13472 8
d13486 1
d13503 1
d13510 8
d13632 4
d13638 1
d13650 11
d13670 1
d13687 6
d13697 1
d13709 11
d13729 1
d13740 11
d13760 1
d13777 6
d13787 1
d13798 5
d13806 1
d13818 8
d13832 1
d13849 7
d13861 1
d13873 8
d13887 1
d13898 8
d13912 1
d13929 7
d13941 1
d13953 1
d13958 6
d13975 8
d13989 1
d14006 8
d14020 1
d14032 1
d14039 8
d14057 8
d14071 1
d14088 8
d14102 1
d14217 4
d14223 1
d14235 11
d14255 1
d14272 6
d14282 1
d14294 11
d14314 1
d14325 11
d14345 1
d14362 6
d14372 1
d14383 5
d14391 1
d14403 1
d14410 8
d14434 7
d14446 1
d14458 8
d14472 1
d14483 8
d14497 1
d14514 7
d14526 1
d14538 6
d14548 1
d14560 1
d14567 8
d14591 8
d14605 1
d14617 8
d14631 1
d14642 8
d14656 1
d14673 1
d14680 8
d14802 4
d14808 1
d14820 11
d14840 1
d14857 6
d14867 1
d14879 11
d14899 1
d14910 11
d14930 1
d14947 6
d14957 1
d14968 5
d14976 1
d14988 8
d15002 1
d15019 7
d15031 1
d15043 8
d15057 1
d15068 8
d15082 1
d15099 1
d15105 7
d15123 6
d15133 1
d15145 15
d15173 1
d15190 8
d15204 1
d15216 15
d15244 1
d15255 15
d15283 1
d15300 8
d15314 1
d15429 1
d15432 4
d15447 11
d15467 1
d15484 6
d15494 1
d15506 11
d15526 1
d15537 11
d15557 1
d15574 6
d15584 1
d15595 5
d15603 1
d15615 8
d15629 1
d15646 7
d15658 1
d15670 1
d15677 8
d15695 8
d15709 1
d15726 1
d15732 7
d15750 6
d15760 1
d15772 15
d15800 1
d15817 8
d15831 1
d15843 15
d15871 1
d15882 15
d15910 1
d15927 8
d15941 1
d16056 1
d16059 4
d16074 11
d16094 1
d16111 6
d16121 1
d16133 11
d16153 1
d16164 11
d16184 1
d16201 6
d16211 1
d16222 5
d16230 1
d16242 8
d16256 1
d16273 7
d16285 1
d16297 8
d16311 1
d16322 8
d16336 1
d16353 7
d16365 1
d16377 6
d16387 1
d16399 15
d16427 1
d16444 8
d16458 1
d16470 15
d16498 1
d16509 15
d16537 1
d16554 8
d16568 1
d16683 4
d16689 1
d16701 11
d16721 1
d16738 6
d16748 1
d16760 11
d16780 1
d16791 11
d16811 1
d16828 6
d16838 1
d16849 1
d16853 5
d16869 8
d16883 1
d16900 7
d16912 1
d16924 8
d16938 1
d16949 8
d16963 1
d16980 7
d16992 1
d17004 6
d17014 1
d17026 15
d17054 1
d17071 8
d17085 1
d17097 15
d17125 1
d17136 15
d17164 1
d17181 8
d17195 1
d17307 4
d17313 1
d17325 8
d17339 1
d17356 6
d17366 1
d17378 8
d17392 1
d17403 8
d17417 1
d17434 6
d17444 1
d17455 5
d17463 1
d17475 8
d17489 1
d17506 7
d17518 1
d17530 8
d17544 1
d17555 8
d17569 1
d17586 1
d17592 7
d17609 6
d17619 1
d17631 8
d17645 1
d17662 8
d17676 1
d17688 8
d17702 1
d17713 8
d17727 1
d17744 8
d17758 1
d17770 6
d17780 1
d17792 13
d17816 1
d17833 7
d17845 1
d17857 13
d17881 1
d17892 13
d17916 1
d17933 7
d17945 1
d17957 6
d17967 1
d17979 13
d18003 1
d18020 7
d18032 1
d18044 13
d18068 1
d18079 13
d18103 1
d18120 7
d18132 1
d18141 1
a18141 1
union util_format_r4a4_unorm {
d18144 4
d18150 1
d18155 1
a18155 1
util_format_r4a4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18162 11
d18182 1
d18192 1
a18192 1
util_format_r4a4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d18199 6
d18209 1
d18219 1
a18219 1
util_format_r4a4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d18221 11
d18241 1
d18245 1
a18245 1
util_format_r4a4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18252 11
d18272 1
d18282 1
a18282 1
util_format_r4a4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18289 6
d18299 1
d18308 1
a18308 1
union util_format_a4r4_unorm {
d18311 4
d18317 1
d18322 1
a18322 1
util_format_a4r4_unorm_unpack_rgba_float(float *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18329 11
d18349 1
d18359 1
a18359 1
util_format_a4r4_unorm_pack_rgba_float(uint8_t *dst_row, unsigned dst_stride, const float *src_row, unsigned src_stride, unsigned width, unsigned height)
d18366 6
d18376 1
d18386 1
a18386 1
util_format_a4r4_unorm_fetch_rgba_float(float *dst, const uint8_t *src, unsigned i, unsigned j)
d18388 11
d18408 1
d18412 1
a18412 1
util_format_a4r4_unorm_unpack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18419 11
d18439 1
d18449 1
a18449 1
util_format_a4r4_unorm_pack_rgba_8unorm(uint8_t *dst_row, unsigned dst_stride, const uint8_t *src_row, unsigned src_stride, unsigned width, unsigned height)
d18456 6
d18466 1
d18478 4
d18484 1
d18496 11
d18516 1
d18533 6
d18543 1
d18555 1
d18559 2
a18560 2
         r = (value) & 0xff;
         a = value >> 8;
d18565 11
d18586 11
d18606 1
d18623 6
d18633 1
d18645 4
d18651 1
d18663 11
d18683 1
d18700 6
d18710 1
d18722 11
d18742 1
d18753 11
d18773 1
d18790 6
d18800 1
d18812 6
d18822 1
d18834 15
d18862 1
d18879 8
d18893 1
d18905 15
d18933 1
d18944 15
d18972 1
d18989 8
d19003 1
d19015 6
d19025 1
d19037 15
d19065 1
d19082 8
d19096 1
d19108 15
d19136 1
d19147 15
d19175 1
d19192 8
d19206 1
d19218 6
d19228 1
d19240 15
d19268 1
d19285 8
d19299 1
d19311 15
d19339 1
d19350 15
d19378 1
d19395 8
d19409 1
d19421 1
d19426 6
d19443 15
d19471 1
d19488 8
d19502 1
d19514 15
d19542 1
d19553 15
d19581 1
d19598 8
d19612 1
d19624 6
d19634 1
d19646 15
d19674 1
d19691 8
d19705 1
d19717 15
d19745 1
d19756 15
d19784 1
d19801 8
d19815 1
d19827 6
d19837 1
d19849 15
d19877 1
d19894 8
d19908 1
d19920 15
d19948 1
d19959 15
d19987 1
d20004 8
d20018 1
d20133 4
d20139 1
d20151 11
d20171 1
d20188 6
d20198 1
d20210 11
d20230 1
d20241 11
d20261 1
d20278 6
d20288 1
d20299 5
d20307 1
d20319 8
d20333 1
d20350 1
d20356 7
d20374 8
d20388 1
d20399 8
d20413 1
d20430 7
d20442 1
d20454 6
d20464 1
d20476 15
d20504 1
d20521 8
d20535 1
d20547 15
d20575 1
d20586 15
d20614 1
d20631 8
d20645 1
d20760 4
d20766 1
d20778 11
d20798 1
d20815 6
d20825 1
d20837 11
d20857 1
d20868 11
d20888 1
d20905 6
d20915 1
d20926 1
d20930 5
d20946 8
d20960 1
d20977 7
d20989 1
d21001 8
d21015 1
d21026 8
d21040 1
d21057 7
d21069 1
d21081 6
d21091 1
d21103 15
d21131 1
d21148 8
d21162 1
d21174 15
d21202 1
d21213 15
d21241 1
d21258 8
d21272 1
d21387 4
d21393 1
d21405 11
d21425 1
d21442 6
d21452 1
d21464 11
d21484 1
d21495 11
d21515 1
d21532 6
d21542 1
d21553 5
d21561 1
d21573 1
d21580 8
d21604 7
d21616 1
d21628 1
d21635 8
d21653 8
d21667 1
d21684 7
d21696 1
d21708 6
d21718 1
d21730 1
d21737 8
d21761 8
d21775 1
d21787 8
d21801 1
d21812 8
d21826 1
d21843 1
d21850 8
d21972 4
d21978 1
d21990 11
d22010 1
d22027 6
d22037 1
d22049 11
d22069 1
d22080 11
d22100 1
d22117 6
d22127 1
d22138 5
d22146 1
d22158 8
d22172 1
d22189 7
d22201 1
d22213 8
d22227 1
d22238 8
d22252 1
d22269 7
d22281 1
d22293 1
d22298 6
d22315 8
d22329 1
d22346 8
d22360 1
d22372 1
d22379 8
d22397 8
d22411 1
d22428 8
d22442 1
d22557 4
d22563 1
d22575 8
d22589 1
d22606 6
d22616 1
d22628 8
d22642 1
d22653 8
d22667 1
d22684 6
d22694 1
d22705 5
d22713 1
d22725 8
d22739 1
d22756 7
d22768 1
d22780 8
d22794 1
d22805 8
d22819 1
d22836 1
d22842 7
d22859 6
d22869 1
d22881 8
d22895 1
d22912 8
d22926 1
d22938 8
d22952 1
d22963 8
d22977 1
d22994 8
d23008 1
d23123 4
d23129 1
d23141 8
d23155 1
d23172 6
d23182 1
d23194 8
d23208 1
d23219 8
d23233 1
d23250 6
d23260 1
d23271 5
d23279 1
d23291 8
d23305 1
d23322 7
d23334 1
d23346 8
d23360 1
d23371 8
d23385 1
d23402 7
d23414 1
d23425 6
d23435 1
d23447 8
d23461 1
d23478 8
d23492 1
d23504 8
d23518 1
d23529 1
d23536 8
d23560 8
d23574 1
d23895 1
d23898 4
d23913 11
d23933 1
d23950 6
d23960 1
d23972 11
d23992 1
d24003 11
d24023 1
d24040 6
d24050 1
d24371 4
d24377 1
d24389 11
d24409 1
d24426 6
d24436 1
d24448 11
d24468 1
d24479 11
d24499 1
d24516 6
d24526 1
d24847 4
d24853 1
d24865 11
d24885 1
d24902 6
d24912 1
d24924 11
d24944 1
d24955 11
d24975 1
d24992 6
d25002 1
d25323 1
d25326 4
d25341 11
d25361 1
d25378 6
d25388 1
d25400 11
d25420 1
d25431 11
d25451 1
d25468 6
d25478 1
d25799 4
d25805 1
d25817 8
d25831 1
d25848 6
d25858 1
d25870 8
d25884 1
d25895 8
d25909 1
d25926 6
d25936 1
d26257 4
d26263 1
d26275 8
d26289 1
d26306 6
d26316 1
d26328 8
d26342 1
d26353 8
d26367 1
d26384 6
d26394 1
d26406 6
d26416 1
d26428 15
d26456 1
d26473 8
d26487 1
d26499 1
d26505 4
a26508 4
         b = (value) & 0x3ff;
         g = (value >> 10) & 0x3ff;
         r = (value >> 20) & 0x3ff;
         a = value >> 30;
d26513 15
d26538 15
d26566 1
d26583 8
d26597 1
d26609 6
d26619 1
d26631 13
d26655 1
d26672 7
d26684 1
d26696 13
d26720 1
d26731 13
d26755 1
d26772 7
d26784 1
d26796 6
d26806 1
d26818 13
d26842 1
d26859 7
d26871 1
d26883 13
d26907 1
d26918 13
d26942 1
d26959 7
d26971 1
d26983 6
d26993 1
d27005 13
d27029 1
d27046 7
d27058 1
d27070 13
d27094 1
d27105 13
d27129 1
d27146 7
d27158 1
d27170 6
d27180 1
d27192 13
d27216 1
d27233 7
d27245 1
d27257 13
d27281 1
d27292 13
d27316 1
d27333 7
d27345 1
d27357 6
d27367 1
d27379 13
d27403 1
d27420 7
d27432 1
d27444 13
d27468 1
d27479 13
d27503 1
d27520 7
d27532 1
d27544 6
d27554 1
d27566 8
d27580 1
d27597 1
d27603 7
d27621 8
d27635 1
d27646 8
d27660 1
d27677 7
d27689 1
d27701 6
d27711 1
d27723 8
d27737 1
d27754 1
d27760 7
d27778 8
d27792 1
d27803 8
d27817 1
d27834 7
d27846 1
d27858 6
d27868 1
d27880 8
d27894 1
d27911 1
d27917 7
d27935 8
d27949 1
d27960 8
d27974 1
d27991 7
d28003 1
d28015 6
d28025 1
d28037 8
d28051 1
d28068 1
d28074 7
d28092 8
d28106 1
d28117 8
d28131 1
d28148 7
d28160 1
d28172 6
d28182 1
d28194 8
d28208 1
d28225 1
d28231 7
d28249 8
d28263 1
d28274 8
d28288 1
d28305 7
d28317 1
d28328 6
d28338 1
d28350 8
d28364 1
d28381 1
d28387 7
d28405 8
d28419 1
d28430 8
d28444 1
d28461 7
d28473 1
d28484 6
d28494 1
d28506 8
d28520 1
d28537 1
d28543 7
d28561 8
d28575 1
d28586 8
d28600 1
d28617 7
d28629 1
d28640 6
d28650 1
d28662 8
d28676 1
d28693 1
d28699 7
d28717 8
d28731 1
d28742 8
d28756 1
d28773 7
d28785 1
d28797 4
d28803 1
d28815 11
d28835 1
d28852 6
d28862 1
d28874 11
d28894 1
d28905 11
d28925 1
d28942 6
d28952 1
d28964 4
d28970 1
d28982 11
d29002 1
d29019 6
d29029 1
d29041 11
d29061 1
d29072 1
d29076 2
a29077 2
         r = (value) & 0xffff;
         a = value >> 16;
d29082 11
d29109 6
d29119 1
d29131 4
d29137 1
d29149 11
d29169 1
d29186 6
d29196 1
d29208 11
d29228 1
d29239 11
d29259 1
d29276 6
d29286 1
d29298 1
d29301 4
d29316 1
d29323 8
d29347 6
d29357 1
d29369 8
d29383 1
d29394 1
d29401 8
d29425 1
d29430 6
d29447 4
d29453 1
d29465 8
d29479 1
d29496 6
d29506 1
d29518 8
d29532 1
d29543 1
d29550 8
d29574 1
d29579 6
d29596 4
d29602 1
d29614 11
d29634 1
d29651 6
d29661 1
d29673 11
d29693 1
d29704 11
d29724 1
d29741 6
d29751 1
d29763 4
d29769 1
d29781 11
d29801 1
d29818 6
d29828 1
d29840 11
d29860 1
d29871 11
d29891 1
d29908 6
d29918 1
d29930 1
d29933 4
d29948 11
d29968 1
d29985 6
d29995 1
d30007 11
d30027 1
d30038 11
d30058 1
d30075 6
d30085 1
d30097 4
d30103 1
d30115 11
d30135 1
d30152 6
d30162 1
d30174 11
d30194 1
d30205 11
d30225 1
d30242 6
d30252 1
d30264 4
d30270 1
d30282 8
d30296 1
d30313 1
d30318 6
d30335 8
d30349 1
d30360 1
d30367 8
d30391 6
d30401 1
d30413 1
d30416 4
d30431 1
d30438 8
d30462 6
d30472 1
d30484 1
d30491 8
d30509 8
d30523 1
d30540 1
d30545 6
d30559 388
d31002 8
d31016 9
d31031 1
d31064 8
d31078 9
d31093 1
d31126 8
d31140 9
d31155 1
d31188 8
d31202 9
d31217 1
d31250 8
d31264 9
d31279 1
d31312 8
d31326 9
d31341 1
d31374 8
d31388 9
d31403 1
d31436 8
d31450 9
d31465 1
d31498 8
d31512 9
d31527 1
d31560 8
d31574 9
d31589 1
d31622 8
d31636 9
d31651 1
d31684 8
d31698 9
d31713 1
d31746 8
d31760 9
d31775 1
d31808 8
d31822 9
d31837 1
d31870 8
d31884 9
d31899 1
d32064 8
d32078 9
d32093 1
d32126 8
d32140 9
d32155 1
d32320 8
d32334 9
d32349 1
d32470 8
d32484 9
d32499 1
d32664 8
d32678 9
d32693 1
d32858 8
d32872 9
d32887 1
d33052 8
d33066 9
d33081 1
d33202 8
d33216 9
d33231 1
d33264 8
d33278 9
d33293 1
d33326 8
d33340 9
d33355 1
d33388 8
d33402 9
d33417 1
d33450 8
d33464 9
d33479 1
d33512 8
d33526 9
d33541 1
d33574 8
d33588 9
d33603 1
d33636 8
d33650 9
d33665 1
d33698 8
d33712 9
d33727 1
d33760 8
d33774 9
d33789 1
d33822 8
d33836 9
d33851 1
d33884 8
d33898 2
d33906 8
d34122 8
d34136 9
d34151 1
d34184 8
d34198 9
d34213 1
d34246 8
d34260 9
d34275 1
d34308 8
d34322 2
d34330 8
d34370 8
d34384 9
d34399 1
d34432 8
d34446 9
d34461 1
d34494 8
d34508 9
d34523 1
d34556 8
d34570 2
d34578 8
d35014 8
d35028 9
d35043 1
d35868 8
d35882 9
d35897 1
d35930 8
d35944 9
d35959 1
d35992 8
d36006 9
d36021 1
d36098 8
d36112 2
d36120 8
d36160 8
d36174 9
d36189 1
d36222 8
d36236 9
d36251 1
d36328 8
d36342 9
d36357 1
d36390 8
d36404 9
d36419 1
d36452 8
d36466 9
d36481 1
d36558 8
d36572 2
d36580 8
d36620 8
d36634 9
d36649 1
d36682 8
d36696 9
d36711 1
d36788 8
d36802 9
d36817 1
d36850 8
d36864 9
d36879 1
d36912 8
d36926 9
d36941 1
d37018 8
d37032 2
d37040 8
d37080 8
d37094 9
d37109 1
d37142 8
d37156 9
d37171 1
d37248 8
d37262 9
d37277 1
d37310 8
d37324 9
d37339 1
d37372 8
d37386 9
d37401 1
d37478 8
d37492 2
d37500 8
d37540 8
d37554 9
d37569 1
d37602 8
d37616 9
d37631 1
d37708 8
d37722 9
d37737 1
d37770 8
d37784 9
d37799 1
d37832 8
d37846 9
d37861 1
d37938 8
d37952 2
d37960 8
d38000 8
d38014 9
d38029 1
d38062 8
d38076 9
d38091 1
d38168 8
d38182 9
d38197 1
d38230 8
d38244 9
d38259 1
d38292 8
d38306 9
d38321 1
d38398 8
d38412 2
d38420 8
d38460 8
d38474 9
d38489 1
d38522 8
d38536 9
d38551 1
d38628 8
d38642 9
d38657 1
d38690 8
d38704 9
d38719 1
d38752 8
d38766 9
d38781 1
d38858 8
d38872 2
d38880 8
d38920 8
d38934 9
d38949 1
d38982 8
d38996 9
d39011 1
d39088 8
d39102 9
d39117 1
d39150 8
d39164 9
d39179 1
d39212 8
d39226 9
d39241 1
d39318 8
d39332 2
d39340 8
d39380 8
d39394 9
d39409 1
d39442 8
d39456 9
d39471 1
d39504 8
d39518 9
d39533 1
d39566 8
d39580 9
d39595 1
d39628 8
d39642 9
d39657 1
d39690 8
d39704 9
d39719 1
d39752 8
d39766 9
d39781 1
d39814 8
d39828 9
d39843 1
d39876 8
d39890 9
d39905 1
d39928 4
a39931 4
util_format_r4a4_unorm_description = {
   PIPE_FORMAT_R4A4_UNORM,
   "PIPE_FORMAT_R4A4_UNORM",
   "r4a4_unorm",
d39938 8
d39952 9
d39967 1
d39969 2
a39970 2
   &util_format_r4a4_unorm_unpack_rgba_8unorm,
   &util_format_r4a4_unorm_pack_rgba_8unorm,
d39972 3
a39974 3
   &util_format_r4a4_unorm_unpack_rgba_float,
   &util_format_r4a4_unorm_pack_rgba_float,
   &util_format_r4a4_unorm_fetch_rgba_float,
d39990 4
a39993 4
util_format_a4r4_unorm_description = {
   PIPE_FORMAT_A4R4_UNORM,
   "PIPE_FORMAT_A4R4_UNORM",
   "a4r4_unorm",
d40000 8
d40014 2
d40022 8
d40031 2
a40032 2
   &util_format_a4r4_unorm_unpack_rgba_8unorm,
   &util_format_a4r4_unorm_pack_rgba_8unorm,
d40034 3
a40036 3
   &util_format_a4r4_unorm_unpack_rgba_float,
   &util_format_a4r4_unorm_pack_rgba_float,
   &util_format_a4r4_unorm_fetch_rgba_float,
d40062 8
d40076 9
d40091 1
d40124 8
d40138 9
d40153 1
d40186 8
d40200 9
d40215 1
d40248 8
d40262 9
d40277 1
d40310 8
d40324 9
d40339 1
d40372 8
d40386 9
d40401 1
d40434 8
d40448 9
d40463 1
d40496 8
d40510 9
d40525 1
d40602 8
d40616 2
d40624 8
d40664 8
d40678 9
d40693 1
d40726 8
d40740 9
d40755 1
d40832 8
d40846 9
d40861 1
d40894 8
d40908 9
d40923 1
d40956 8
d40970 9
d40985 1
d41062 8
d41076 2
d41084 8
d41124 8
d41138 9
d41153 1
d41186 8
d41200 9
d41215 1
d41292 8
d41306 9
d41321 1
d41354 8
d41368 9
d41383 1
d41416 8
d41430 9
d41445 1
d41522 8
d41536 2
d41544 8
d41584 8
d41598 9
d41613 1
d41646 8
d41660 9
d41675 1
d41752 8
d41766 9
d41781 1
d41814 8
d41828 9
d41843 1
d41876 8
d41890 9
d41905 1
d42070 8
d42084 2
d42092 8
d42264 8
d42278 9
d42293 1
d42458 8
d42472 9
d42487 1
d42652 8
d42666 9
d42681 1
d42846 8
d42860 2
d42868 8
d43040 8
d43054 9
d43069 1
d43102 8
d43116 9
d43131 1
d43164 8
d43178 9
d43193 1
d43226 8
d43240 9
d43255 1
d43288 8
d43302 9
d43317 1
d43350 8
d43364 9
d43379 1
d43412 8
d43426 9
d43441 1
d43474 8
d43488 9
d43503 1
d43536 8
d43550 9
d43565 1
d43598 8
d43612 9
d43627 1
d43660 8
d43674 9
d43689 1
d43722 8
d43736 9
d43751 1
d43784 8
d43798 9
d43813 1
d43846 8
d43860 9
d43875 1
d43908 8
d43922 9
d43937 1
d43970 8
d43984 9
d43999 1
d44032 8
d44046 9
d44061 1
d44094 8
d44108 2
d44116 8
d44156 8
d44170 9
d44185 1
d44218 8
d44232 9
d44247 1
d44280 8
d44294 9
d44309 1
d44342 8
d44356 2
d44364 8
d44404 8
d44418 9
d44433 1
d44466 8
d44480 9
d44495 1
d44528 8
d44542 9
d44557 1
d44590 8
d44604 2
d44612 8
d44641 124
d45101 2
a45104 2
   case PIPE_FORMAT_A4R4_UNORM:
      return &util_format_a4r4_unorm_description;
d45267 4
@

