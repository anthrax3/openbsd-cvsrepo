head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.12.23.05.06.04;	author jsg;	state dead;
branches;
next	1.2;
commitid	jLBLHykYtPbp9N8b;

1.2
date	2014.07.09.21.32.41;	author jsg;	state Exp;
branches;
next	1.1;
commitid	uM5VFgRcH6JLiuF9;

1.1
date	2013.09.05.15.12.07;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove now unused local build system for Mesa
@
text
@/* File automatically generated by u_unfilled_gen.py */

/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * @@file
 * Functions to translate and generate index lists
 */

#include "indices/u_indices.h"
#include "indices/u_indices_priv.h"
#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"


static unsigned out_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return OUT_UINT;
   case 2: return OUT_USHORT;
   default: assert(0); return OUT_USHORT;
   }
}

static unsigned in_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return IN_UINT;
   case 2: return IN_USHORT;
   case 1: return IN_UBYTE;
   default: assert(0); return IN_UBYTE;
   }
}


static u_generate_func generate_line[OUT_COUNT][PRIM_COUNT];
static u_translate_func translate_line[IN_COUNT][OUT_COUNT][PRIM_COUNT];


static void generate_tris_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
      (out+j+2)[0] = (ushort)(i+1);
      (out+j+2)[1] = (ushort)(i+2);
      (out+j+4)[0] = (ushort)(i+2);
      (out+j+4)[1] = (ushort)(i);
   }
}
static void generate_tristrip_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1/*+(i&1)*/);
      (out+j+2)[0] = (ushort)(i+1/*+(i&1)*/);
      (out+j+2)[1] = (ushort)(i+2/*-(i&1)*/);
      (out+j+4)[0] = (ushort)(i+2/*-(i&1)*/);
      (out+j+4)[1] = (ushort)(i);
   }
}
static void generate_trifan_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)(0);
      (out+j)[1] = (ushort)(i+1);
      (out+j+2)[0] = (ushort)(i+1);
      (out+j+2)[1] = (ushort)(i+2);
      (out+j+4)[0] = (ushort)(i+2);
      (out+j+4)[1] = (ushort)(0);
   }
}
static void generate_quads_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j+2)[0] = (ushort)(i+1);
      (out+j+2)[1] = (ushort)(i+2);
      (out+j+4)[0] = (ushort)(i+2);
      (out+j+4)[1] = (ushort)(i+3);
      (out+j+6)[0] = (ushort)(i+3);
      (out+j+6)[1] = (ushort)(i+0);
   }
}
static void generate_quadstrip_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i+0);
      (out+j+2)[0] = (ushort)(i+0);
      (out+j+2)[1] = (ushort)(i+1);
      (out+j+4)[0] = (ushort)(i+1);
      (out+j+4)[1] = (ushort)(i+3);
      (out+j+6)[0] = (ushort)(i+3);
      (out+j+6)[1] = (ushort)(i+2);
   }
}
static void generate_polygon_ushort(
    unsigned start,
    unsigned nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)((i+1)%(nr/2));
   }
}
static void generate_tris_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
      (out+j+2)[0] = (uint)(i+1);
      (out+j+2)[1] = (uint)(i+2);
      (out+j+4)[0] = (uint)(i+2);
      (out+j+4)[1] = (uint)(i);
   }
}
static void generate_tristrip_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1/*+(i&1)*/);
      (out+j+2)[0] = (uint)(i+1/*+(i&1)*/);
      (out+j+2)[1] = (uint)(i+2/*-(i&1)*/);
      (out+j+4)[0] = (uint)(i+2/*-(i&1)*/);
      (out+j+4)[1] = (uint)(i);
   }
}
static void generate_trifan_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)(0);
      (out+j)[1] = (uint)(i+1);
      (out+j+2)[0] = (uint)(i+1);
      (out+j+2)[1] = (uint)(i+2);
      (out+j+4)[0] = (uint)(i+2);
      (out+j+4)[1] = (uint)(0);
   }
}
static void generate_quads_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j+2)[0] = (uint)(i+1);
      (out+j+2)[1] = (uint)(i+2);
      (out+j+4)[0] = (uint)(i+2);
      (out+j+4)[1] = (uint)(i+3);
      (out+j+6)[0] = (uint)(i+3);
      (out+j+6)[1] = (uint)(i+0);
   }
}
static void generate_quadstrip_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i+0);
      (out+j+2)[0] = (uint)(i+0);
      (out+j+2)[1] = (uint)(i+1);
      (out+j+4)[0] = (uint)(i+1);
      (out+j+4)[1] = (uint)(i+3);
      (out+j+6)[0] = (uint)(i+3);
      (out+j+6)[1] = (uint)(i+2);
   }
}
static void generate_polygon_uint(
    unsigned start,
    unsigned nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)((i+1)%(nr/2));
   }
}
static void translate_tris_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_tristrip_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_trifan_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[0];
   }
}
static void translate_quads_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+0];
      (out+j+2)[0] = (ushort)in[i+0];
      (out+j+2)[1] = (ushort)in[i+1];
      (out+j+4)[0] = (ushort)in[i+1];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+2];
   }
}
static void translate_polygon_ubyte2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[(i+1)%(nr/2)];
   }
}
static void translate_tris_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_tristrip_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_trifan_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[0];
   }
}
static void translate_quads_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+0];
      (out+j+2)[0] = (uint)in[i+0];
      (out+j+2)[1] = (uint)in[i+1];
      (out+j+4)[0] = (uint)in[i+1];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+2];
   }
}
static void translate_polygon_ubyte2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[(i+1)%(nr/2)];
   }
}
static void translate_tris_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_tristrip_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_trifan_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[0];
   }
}
static void translate_quads_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+0];
      (out+j+2)[0] = (ushort)in[i+0];
      (out+j+2)[1] = (ushort)in[i+1];
      (out+j+4)[0] = (ushort)in[i+1];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+2];
   }
}
static void translate_polygon_ushort2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[(i+1)%(nr/2)];
   }
}
static void translate_tris_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_tristrip_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_trifan_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[0];
   }
}
static void translate_quads_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+0];
      (out+j+2)[0] = (uint)in[i+0];
      (out+j+2)[1] = (uint)in[i+1];
      (out+j+4)[0] = (uint)in[i+1];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+2];
   }
}
static void translate_polygon_ushort2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[(i+1)%(nr/2)];
   }
}
static void translate_tris_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_tristrip_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (ushort)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (ushort)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (ushort)in[i];
   }
}
static void translate_trifan_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (ushort)in[0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[0];
   }
}
static void translate_quads_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j+2)[0] = (ushort)in[i+1];
      (out+j+2)[1] = (ushort)in[i+2];
      (out+j+4)[0] = (ushort)in[i+2];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+0];
      (out+j+2)[0] = (ushort)in[i+0];
      (out+j+2)[1] = (ushort)in[i+1];
      (out+j+4)[0] = (ushort)in[i+1];
      (out+j+4)[1] = (ushort)in[i+3];
      (out+j+6)[0] = (ushort)in[i+3];
      (out+j+6)[1] = (ushort)in[i+2];
   }
}
static void translate_polygon_uint2ushort(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[(i+1)%(nr/2)];
   }
}
static void translate_tris_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i+=3) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_tristrip_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[0] = (uint)in[i+1/*+(i&1)*/];
      (out+j+2)[1] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[0] = (uint)in[i+2/*-(i&1)*/];
      (out+j+4)[1] = (uint)in[i];
   }
}
static void translate_trifan_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=6, i++) { 
      (out+j)[0] = (uint)in[0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[0];
   }
}
static void translate_quads_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=4) { 
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j+2)[0] = (uint)in[i+1];
      (out+j+2)[1] = (uint)in[i+2];
      (out+j+4)[0] = (uint)in[i+2];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+0];
   }
}
static void translate_quadstrip_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=8, i+=2) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+0];
      (out+j+2)[0] = (uint)in[i+0];
      (out+j+2)[1] = (uint)in[i+1];
      (out+j+4)[0] = (uint)in[i+1];
      (out+j+4)[1] = (uint)in[i+3];
      (out+j+6)[0] = (uint)in[i+3];
      (out+j+6)[1] = (uint)in[i+2];
   }
}
static void translate_polygon_uint2uint(
    const void * _in,
    unsigned start,
    unsigned nr,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[(i+1)%(nr/2)];
   }
}
void u_unfilled_init( void )
{
  static int firsttime = 1;
  if (!firsttime) return;
  firsttime = 0;
generate_line[OUT_USHORT][PIPE_PRIM_TRIANGLES] = generate_tris_ushort;
generate_line[OUT_USHORT][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort;
generate_line[OUT_USHORT][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort;
generate_line[OUT_USHORT][PIPE_PRIM_QUADS] = generate_quads_ushort;
generate_line[OUT_USHORT][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort;
generate_line[OUT_USHORT][PIPE_PRIM_POLYGON] = generate_polygon_ushort;
generate_line[OUT_UINT][PIPE_PRIM_TRIANGLES] = generate_tris_uint;
generate_line[OUT_UINT][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint;
generate_line[OUT_UINT][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint;
generate_line[OUT_UINT][PIPE_PRIM_QUADS] = generate_quads_uint;
generate_line[OUT_UINT][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint;
generate_line[OUT_UINT][PIPE_PRIM_POLYGON] = generate_polygon_uint;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort;
translate_line[IN_UBYTE][OUT_USHORT][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint;
translate_line[IN_UBYTE][OUT_UINT][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort;
translate_line[IN_USHORT][OUT_USHORT][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_QUADS] = translate_quads_ushort2uint;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint;
translate_line[IN_USHORT][OUT_UINT][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_QUADS] = translate_quads_uint2ushort;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort;
translate_line[IN_UINT][OUT_USHORT][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_QUADS] = translate_quads_uint2uint;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint;
translate_line[IN_UINT][OUT_UINT][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint;
}
#include "indices/u_unfilled_indices.c"
@


1.2
log
@Mesa 10.2.3
@
text
@@


1.1
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@d67 1
d74 1
a74 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d84 1
d91 1
a91 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d101 1
d108 1
a108 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d118 1
d125 1
a125 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d137 1
d144 1
a144 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d156 1
d163 1
a163 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d169 1
d176 1
a176 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d186 1
d193 1
a193 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d203 1
d210 1
a210 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d220 1
d227 1
a227 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d239 1
d246 1
a246 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d258 1
d265 1
a265 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d272 1
d280 1
a280 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d291 1
d299 1
a299 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d310 1
d318 1
a318 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d329 1
d337 1
a337 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d350 1
d358 1
a358 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d371 1
d379 1
a379 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d386 1
d394 1
a394 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d405 1
d413 1
a413 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d424 1
d432 1
a432 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d443 1
d451 1
a451 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d464 1
d472 1
a472 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d485 1
d493 1
a493 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d500 1
d508 1
a508 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d519 1
d527 1
a527 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d538 1
d546 1
a546 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d557 1
d565 1
a565 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d578 1
d586 1
a586 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d599 1
d607 1
a607 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d614 1
d622 1
a622 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d633 1
d641 1
a641 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d652 1
d660 1
a660 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d671 1
d679 1
a679 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d692 1
d700 1
a700 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d713 1
d721 1
a721 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d728 1
d736 1
a736 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d747 1
d755 1
a755 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d766 1
d774 1
a774 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d785 1
d793 1
a793 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d806 1
d814 1
a814 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d827 1
d835 1
a835 1
  for (j = i = 0; j < nr; j+=2, i++) { 
d842 1
d850 1
a850 1
  for (j = i = 0; j < nr; j+=6, i+=3) { 
d861 1
d869 1
a869 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d880 1
d888 1
a888 1
  for (j = i = 0; j < nr; j+=6, i++) { 
d899 1
d907 1
a907 1
  for (j = i = 0; j < nr; j+=8, i+=4) { 
d920 1
d928 1
a928 1
  for (j = i = 0; j < nr; j+=8, i+=2) { 
d941 1
d949 1
a949 1
  for (j = i = 0; j < nr; j+=2, i++) { 
@

