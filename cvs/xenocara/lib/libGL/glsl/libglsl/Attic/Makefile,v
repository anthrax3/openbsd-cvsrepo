head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@# @;


1.11
date	2015.12.23.05.06.04;	author jsg;	state dead;
branches;
next	1.10;
commitid	jLBLHykYtPbp9N8b;

1.10
date	2015.02.20.23.31.06;	author jsg;	state Exp;
branches;
next	1.9;
commitid	96FH88ZMzjHy95WG;

1.9
date	2015.01.25.15.09.14;	author jsg;	state Exp;
branches;
next	1.8;
commitid	M1dxZ5qfRB65OrtK;

1.8
date	2014.07.09.21.32.41;	author jsg;	state Exp;
branches;
next	1.7;
commitid	uM5VFgRcH6JLiuF9;

1.7
date	2014.01.11.12.39.14;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2013.09.05.15.12.08;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.17.13.58.00;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.31.18.36.06;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.27.07.07.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.26.21.48.08;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.23.13.57.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove now unused local build system for Mesa
@
text
@# $OpenBSD: Makefile,v 1.10 2015/02/20 23:31:06 jsg Exp $
.include <bsd.xconf.mk>
.include "../../config.mk"

MESA=	${.CURDIR}/../../../../dist/Mesa/src/mesa
MAPI=	${.CURDIR}/../../../../dist/Mesa/src/mapi
GLSL=	${.CURDIR}/../../../../dist/Mesa/src/glsl

MESA_INCLUDE=	${.CURDIR}/../../../../dist/Mesa/include


LIBGLCPP_SOURCES = \
	glcpp-lex.c \
	glcpp-parse.c \
	pp.c

GLCPP_SOURCES = \
	$(LIBGLCPP_SOURCES) \
	ralloc.c \
	glcpp.c

C_SOURCES = \
	strtod.c \
	ralloc.c \
	$(LIBGLCPP_SOURCES)

GENERATED_CXX_SOURCES = \
	glsl_lexer.cpp \
	glsl_parser.cpp

CXX_SOURCES = \
	ast_array_index.cpp \
	ast_expr.cpp \
	ast_function.cpp \
	ast_to_hir.cpp \
	ast_type.cpp \
	builtin_functions.cpp \
	builtin_types.cpp \
	builtin_variables.cpp \
	glsl_parser_extras.cpp \
	glsl_types.cpp \
	glsl_symbol_table.cpp \
	hir_field_selection.cpp \
	ir_basic_block.cpp \
	ir_builder.cpp \
	ir_clone.cpp \
	ir_constant_expression.cpp \
	ir.cpp \
	ir_equals.cpp \
	ir_expression_flattening.cpp \
	ir_function_can_inline.cpp \
	ir_function_detect_recursion.cpp \
	ir_function.cpp \
	ir_hierarchical_visitor.cpp \
	ir_hv_accept.cpp \
	ir_import_prototypes.cpp \
	ir_print_visitor.cpp \
	ir_reader.cpp \
	ir_rvalue_visitor.cpp \
	ir_set_program_inouts.cpp \
	ir_validate.cpp \
	ir_variable_refcount.cpp \
	linker.cpp \
	link_atomics.cpp \
	link_functions.cpp \
	link_interface_blocks.cpp \
	link_uniforms.cpp \
	link_uniform_initializers.cpp \
	link_uniform_block_active_visitor.cpp \
	link_uniform_blocks.cpp \
	link_varyings.cpp \
	loop_analysis.cpp \
	loop_controls.cpp \
	loop_unroll.cpp \
	lower_clip_distance.cpp \
	lower_discard.cpp \
	lower_discard_flow.cpp \
	lower_if_to_cond_assign.cpp \
	lower_instructions.cpp \
	lower_jumps.cpp \
	lower_mat_op_to_vec.cpp \
	lower_noise.cpp \
	lower_offset_array.cpp \
	lower_packed_varyings.cpp \
	lower_named_interface_blocks.cpp \
	lower_packing_builtins.cpp \
	lower_texture_projection.cpp \
	lower_variable_index_to_cond_assign.cpp \
	lower_vec_index_to_cond_assign.cpp \
	lower_vec_index_to_swizzle.cpp \
	lower_vector.cpp \
	lower_vector_insert.cpp \
	lower_output_reads.cpp \
	lower_ubo_reference.cpp \
	opt_algebraic.cpp \
	opt_array_splitting.cpp \
	opt_constant_folding.cpp \
	opt_constant_propagation.cpp \
	opt_constant_variable.cpp \
	opt_copy_propagation.cpp \
	opt_copy_propagation_elements.cpp \
	opt_cse.cpp \
	opt_dead_builtin_varyings.cpp \
	opt_dead_code.cpp \
	opt_dead_code_local.cpp \
	opt_dead_functions.cpp \
	opt_flatten_nested_if_blocks.cpp \
	opt_flip_matrices.cpp \
	opt_function_inlining.cpp \
	opt_if_simplification.cpp \
	opt_noop_swizzle.cpp \
	opt_redundant_jumps.cpp \
	opt_structure_splitting.cpp \
	opt_swizzle_swizzle.cpp \
	opt_tree_grafting.cpp \
	opt_vectorize.cpp \
	s_expression.cpp \
	$(GENERATED_CXX_SOURCES)

LIB=	libglsl

SRCS=	\
	$(C_SOURCES) \
	$(CXX_SOURCES)

OBJS+= $(C_SOURCES:.c=.so) $(CXX_SOURCES:.cpp=.so)

INCLUDES= \
	-I${X11BASE}/include/GL \
	-I$(GLSL) \
	-I$(GLSL)/glcpp \
	-I${.CURDIR}/../../generated/glsl \
	-I${.CURDIR}/../../generated/glsl/glcpp \
	-I$(MESA) \
	-I$(MESA)/.. \
	-I$(MAPI) \
	-I$(MESA_INCLUDE)

CPPFLAGS+= $(INCLUDES) $(DEFINES)

all: ${LIB}_pic.a

obj:	_xenocara_obj

install:
	@@echo "Not installing libglsl"

clean:
	rm -f ${LIB}_pic.a ${OBJS}

cleandir: clean

# Tweak suffixes: only .cpp is used for C++,
# ignore .l and .y to avoid rebuilding cpp-{lex,parse}.c
# which need bison/recent flex.
.SUFFIXES:
.SUFFIXES: .a .so .c .cpp

.c.so:
	@@echo "${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

.cpp.so:
	@@echo "${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${PICFLAG} -DPIC ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r ${.TARGET}.o -o ${.TARGET}
	@@rm -f ${.TARGET}.o

${LIB}_pic.a:	${OBJS} ${DPADD}
	@@rm -f ${LIB}_pic.a
	@@${AR} cq ${LIB}_pic.a `${LORDER} ${OBJS} | tsort -q`
	${RANLIB} ${LIB}_pic.a

.include <bsd.xorg.mk>

.PATH: ${GLSL}
.PATH.cpp: ${GLSL}
.PATH: ${GLSL}/glcpp
.PATH: ${GLSL}/builtin_compiler
.PATH: ${.CURDIR}/../../generated/glsl
.PATH: ${.CURDIR}/../../generated/glsl/glcpp
@


1.10
log
@switch back to Mesa 10.2

With 10.4.3 gpu compositing on chromium would result in a black window
on older Intel parts (ie x60s with 945gm) and at least some discrete
Radeon parts.  These problems do not seem to occur on recent Intel
parts, though those have coherent memory and hardware contexts.

It isn't clear what changes in Mesa are involved in the problem
though it also occurs with the 10.3 branch.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2015/01/25 15:09:14 jsg Exp $
@


1.9
log
@Mesa 10.4.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2014/07/09 21:32:41 jsg Exp $
d19 1
d23 2
a75 1
	lower_const_arrays_to_uniforms.cpp \
a92 1
	lower_vertex_id.cpp \
a102 1
	opt_dead_builtin_variables.cpp \
a110 1
	opt_minmax.cpp \
a111 1
	opt_rebalance_tree.cpp \
@


1.8
log
@Mesa 10.2.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2014/01/11 12:39:14 miod Exp $
a18 1
	ralloc.c \
a21 2
	strtod.c \
	ralloc.c \
d73 1
d91 1
d102 1
d111 1
d113 1
d137 1
d173 1
a173 1
${LIB}_pic.a:	${OBJS} $(DPADD)
@


1.7
log
@m68k needs libGL compiled with -fPIC
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2013/09/05 15:12:08 jsg Exp $
d3 1
d27 4
a30 2
#	builtin_stubs.cpp is used instead of builtin_function.cpp
#	when bootstrapping builtin_compiler
d37 1
a37 1
	builtin_function.cpp \
a39 2
	glsl_lexer.cpp \
	glsl_parser.cpp \
d41 1
a42 1
	glsl_types.cpp \
a43 1
	ir.cpp \
d48 2
a50 1
	ir_function.cpp \
d53 1
d63 2
d67 2
a70 2
	link_uniform_initializers.cpp \
	link_uniforms.cpp \
a71 1
	linker.cpp \
a81 1
	lower_named_interface_blocks.cpp \
d83 1
a83 1
	lower_output_reads.cpp \
d85 1
a87 2
	lower_texture_projection.cpp \
	lower_ubo_reference.cpp \
d93 2
a94 1
	main.cpp \
d102 1
d116 1
d118 1
a118 3
	standalone_scaffolding.cpp \
	test.cpp \
	test_optpass.cpp
d124 1
a124 1
	$(CXX_SOURCES) \
a139 2
CFLAGS+= -std=c99

a182 5

.if ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "powerpc" || \
    ${MACHINE_ARCH} == "sparc"
PICFLAG=-fPIC
.endif
@


1.6
log
@build infrastructure changes for Mesa 9.2.0
ok matthieu@@ mpi@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2012/08/17 13:58:00 mpi Exp $
d184 2
a185 1
.if ${MACHINE_ARCH} == powerpc || ${MACHINE_ARCH} == sparc
@


1.5
log
@Upate to libGL 7.11.2

Tested by jsg@@, matthieu@@ and ajacoutot@@, ok mattieu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2011/10/31 18:36:06 matthieu Exp $
d26 2
d29 1
d35 2
d45 1
a59 1
	ir_variable.cpp \
d62 6
d72 1
d74 1
d79 1
d81 3
d85 2
d91 1
d94 1
d100 1
d104 2
a105 1
	opt_discard_simplification.cpp \
d113 4
a116 1
	s_expression.cpp
d130 2
d138 2
d180 3
@


1.4
log
@Use -fPIC consistently with libmesa. fixes build on sparc.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2011/10/27 07:07:39 matthieu Exp $
d18 1
d45 1
d78 1
d96 1
a96 1
	$(CXX_SOURCES)
@


1.3
log
@Fix previous, which left out C sources.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2011/10/26 21:48:08 matthieu Exp $
d147 4
@


1.2
log
@fix build on mips64. problem spotted by todd@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2011/10/23 13:57:36 matthieu Exp $
d95 1
a95 1
OBJS+= $(CXX_SOURCES:.cpp=.so)
d119 1
a119 1
# Tweak suffixes: only .cpp is used for C++, 
d123 1
a123 1
.SUFFIXES: .out .o .go .po .so .S .s .c .cc .cpp .f  .ln .m4 .m
d125 3
a127 3
.cpp.o:
	@@echo "${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.cc} ${.IMPSRC} -o ${.TARGET}.o
@


1.1
log
@Build system updates for Mesa 7.10.3
@
text
@d1 1
a1 1
# $OpenBSD$
d89 1
a89 1
LIB=	glsl
d95 1
a95 1
OBJS+= $(CXX_SOURCES:.cpp=.o)
d107 1
a107 1
NOPROFILE=
d114 4
a117 1
.include <bsd.lib.mk>
d136 5
@

