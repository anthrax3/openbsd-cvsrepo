head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.2
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.16
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.14
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.8
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2016.08.09.07.16.10;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	C8TgUUJolulx9B5d;

1.10
date	2016.05.29.11.57.14;	author dcoppa;	state Exp;
branches;
next	1.9;
commitid	1dOLexdOAzW2mQjp;

1.9
date	2015.12.07.09.34.04;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	wZOPiDmcwgRFTDVL;

1.8
date	2015.06.28.08.27.50;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	qXwIGV2h9uFjxAmt;

1.7
date	2015.01.10.17.17.24;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	2tSYQMWVSV3t7clo;

1.6
date	2014.12.26.17.52.36;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	gwhRExMduYqoPQHI;

1.5
date	2014.01.12.15.08.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.07.17.21.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.21.05.09.10;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.22.17.37.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.44.55;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.44.55;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.33.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@
Update to FreeType 2.6.5

ok matthieu@@
@
text
@#
#  tohtml.py
#
#    A sub-class container of the `Formatter' class to produce HTML.
#
#  Copyright 2002-2016 by
#  David Turner.
#
#  This file is part of the FreeType project, and may only be used,
#  modified, and distributed under the terms of the FreeType project
#  license, LICENSE.TXT.  By continuing to use, modify, or distribute
#  this file you indicate that you have read the license and
#  understand and accept it fully.

# The parent class is contained in file `formatter.py'.


from sources import *
from content import *
from formatter import *

import time


# The following strings define the HTML header used by all generated pages.
html_header_1 = """\
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>\
"""

html_header_2 = """\
 API Reference</title>
<style type="text/css">
  a:link { color: #0000EF; }
  a:visited { color: #51188E; }
  a:hover { color: #FF0000; }

  body { font-family: Verdana, Geneva, Arial, Helvetica, serif;
         color: #000000;
         background: #FFFFFF;
         width: 87%;
         margin: auto; }

  div.section { width: 75%;
                margin: auto; }
  div.section hr { margin: 4ex 0 1ex 0; }
  div.section h4 { background-color: #EEEEFF;
                   font-size: medium;
                   font-style: oblique;
                   font-weight: bold;
                   margin: 3ex 0 1.5ex 9%;
                   padding: 0.3ex 0 0.3ex 1%; }
  div.section p { margin: 1.5ex 0 1.5ex 10%; }
  div.section pre { margin: 3ex 0 3ex 9%;
                    background-color: #D6E8FF;
                    padding: 2ex 0 2ex 1%; }
  div.section table.fields { width: 90%;
                             margin: 1.5ex 0 1.5ex 10%; }
  div.section table.toc { width: 95%;
                          margin: 1.5ex 0 1.5ex 5%; }
  div.timestamp { text-align: center;
                  font-size: 69%;
                  margin: 1.5ex 0 1.5ex 0; }

  h1 { text-align: center; }
  h3 { font-size: medium;
       margin: 4ex 0 1.5ex 0; }

  p { text-align: justify; }

  pre.colored { color: blue; }

  span.keyword { font-family: monospace;
                 text-align: left;
                 white-space: pre;
                 color: darkblue; }

  table.fields td.val { font-weight: bold;
                        text-align: right;
                        width: 30%;
                        vertical-align: baseline;
                        padding: 1ex 1em 1ex 0; }
  table.fields td.desc { vertical-align: baseline;
                         padding: 1ex 0 1ex 1em; }
  table.fields td.desc p:first-child { margin: 0; }
  table.fields td.desc p { margin: 1.5ex 0 0 0; }
  table.index { margin: 6ex auto 6ex auto;
                border: 0;
                border-collapse: separate;
                border-spacing: 1em 0.3ex; }
  table.index tr { padding: 0; }
  table.index td { padding: 0; }
  table.index-toc-link { width: 100%;
                         border: 0;
                         border-spacing: 0;
                         margin: 1ex 0 1ex 0; }
  table.index-toc-link td.left { padding: 0 0.5em 0 0.5em;
                                 font-size: 83%;
                                 text-align: left; }
  table.index-toc-link td.middle { padding: 0 0.5em 0 0.5em;
                                   font-size: 83%;
                                   text-align: center; }
  table.index-toc-link td.right { padding: 0 0.5em 0 0.5em;
                                  font-size: 83%;
                                  text-align: right; }
  table.synopsis { margin: 6ex auto 6ex auto;
                   border: 0;
                   border-collapse: separate;
                   border-spacing: 2em 0.6ex; }
  table.synopsis tr { padding: 0; }
  table.synopsis td { padding: 0; }
  table.toc td.link { width: 30%;
                      text-align: right;
                      vertical-align: baseline;
                      padding: 1ex 1em 1ex 0; }
  table.toc td.desc { vertical-align: baseline;
                      padding: 1ex 0 1ex 1em;
                      text-align: left; }
  table.toc td.desc p:first-child { margin: 0;
                                    text-align: left; }
  table.toc td.desc p { margin: 1.5ex 0 0 0;
                        text-align: left; }

</style>
</head>
<body>
"""

html_header_3l = """
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""

html_header_3r = """
<table class="index-toc-link"><tr><td class="right">[<a href="\
"""

html_header_4 = """\
">Index</a>]</td><td class="right">[<a href="\
"""

html_header_5t = """\
">TOC</a>]</td></tr></table>
<h1>\
"""

html_header_5i = """\
">Index</a>]</td></tr></table>
<h1>\
"""

html_header_6 = """\
 API Reference</h1>
"""


# The HTML footer used by all generated pages.
html_footer = """\
</body>
</html>\
"""

# The header and footer used for each section.
section_title_header1 = '<h1 id="'
section_title_header2 = '">'
section_title_footer = "</h1>"

# The header and footer used for code segments.
code_header = '<pre class="colored">'
code_footer = '</pre>'

# Paragraph header and footer.
para_header = "<p>"
para_footer = "</p>"

# Block header and footer.
block_header        = '<div class="section">'
block_footer_start  = """\
<hr>
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""
block_footer_middle = """\
">Index</a>]</td>\
<td class="middle">[<a href="#">Top</a>]</td>\
<td class="right">[<a href="\
"""
block_footer_end    = """\
">TOC</a>]</td></tr></table></div>
"""

# Description header/footer.
description_header = ""
description_footer = ""

# Marker header/inter/footer combination.
marker_header = "<h4>"
marker_inter  = "</h4>"
marker_footer = ""

# Header location header/footer.
header_location_header = "<p>"
header_location_footer = "</p>"

# Source code extracts header/footer.
source_header = "<pre>"
source_footer = "</pre>"

# Chapter header/inter/footer.
chapter_header = """\
<div class="section">
<h2>\
"""
chapter_inter  = '</h2>'
chapter_footer = '</div>'

# Index footer.
index_footer_start = """\
<hr>
<table class="index-toc-link"><tr><td class="right">[<a href="\
"""
index_footer_end = """\
">TOC</a>]</td></tr></table>
"""

# TOC footer.
toc_footer_start = """\
<hr>
<table class="index-toc-link"><tr><td class="left">[<a href="\
"""
toc_footer_end = """\
">Index</a>]</td></tr></table>
"""


# Source language keyword coloration and styling.
keyword_prefix = '<span class="keyword">'
keyword_suffix = '</span>'

section_synopsis_header = '<h2>Synopsis</h2>'
section_synopsis_footer = ''


# Translate a single line of source to HTML.  This converts `<', `>', and
# `&' into `&lt;',`&gt;', and `&amp;'.
#
def  html_quote( line ):
    result = string.replace( line,   "&", "&amp;" )
    result = string.replace( result, "<", "&lt;"  )
    result = string.replace( result, ">", "&gt;"  )
    return result


################################################################
##
##  HTML FORMATTER CLASS
##
class  HtmlFormatter( Formatter ):

    def  __init__( self, processor, project_title, file_prefix ):
        Formatter.__init__( self, processor )

        global html_header_1
        global html_header_2
        global html_header_3l, html_header_3r
        global html_header_4
        global html_header_5t, html_header_5i
        global html_header_6
        global html_footer

        if file_prefix:
            file_prefix = file_prefix + "-"
        else:
            file_prefix = ""

        self.headers       = processor.headers
        self.project_title = project_title
        self.file_prefix   = file_prefix
        self.html_header   = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_4 + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_index_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3r + file_prefix + "toc.html"
          + html_header_5t + project_title
          + html_header_6 )
        self.html_toc_header = (
          html_header_1 + project_title
          + html_header_2
          + html_header_3l + file_prefix + "index.html"
          + html_header_5i + project_title
          + html_header_6 )
        self.html_footer = (
          '<div class="timestamp">generated on '
          + time.asctime( time.localtime( time.time() ) )
          + "</div>" + html_footer )

        self.columns = 3

    def  make_section_url( self, section ):
        return self.file_prefix + section.name + ".html"

    def  make_block_url( self, block, name = None ):
        if name == None:
            name = block.name

        try:
            section_url = self.make_section_url( block.section )
        except:
            # we already have a section
            section_url = self.make_section_url( block )

        return section_url + "#" + name

    def  make_html_word( self, word ):
        """Analyze a simple word to detect cross-references and markup."""
        # handle cross-references
        m = re_crossref.match( word )
        if m:
            try:
                name = m.group( 'name' )
                rest = m.group( 'rest' )
                block = self.identifiers[name]
                url   = self.make_block_url( block )
                # display `foo[bar]' as `foo'
                name = re.sub( r'\[.*\]', '', name )
                # normalize url, following RFC 3986
                url = string.replace( url, "[", "(" )
                url = string.replace( url, "]", ")" )

                try:
                    # for sections, display title
                    url = ( '&lsquo;<a href="' + url + '">'
                            + block.title + '</a>&rsquo;'
                            + rest )
                except:
                    url = ( '<a href="' + url + '">'
                            + name + '</a>'
                            + rest )

                return url
            except:
                # we detected a cross-reference to an unknown item
                sys.stderr.write( "WARNING: undefined cross reference"
                                  + " '" + name + "'.\n" )
                return '?' + name + '?' + rest

        # handle markup for italic and bold
        m = re_italic.match( word )
        if m:
            name = m.group( 1 )
            rest = m.group( 2 )
            return '<i>' + name + '</i>' + rest

        m = re_bold.match( word )
        if m:
            name = m.group( 1 )
            rest = m.group( 2 )
            return '<b>' + name + '</b>' + rest

        return html_quote( word )

    def  make_html_para( self, words ):
        """Convert words of a paragraph into tagged HTML text.  Also handle
           cross references."""
        line = ""
        if words:
            line = self.make_html_word( words[0] )
            for word in words[1:]:
                line = line + " " + self.make_html_word( word )
            # handle hyperlinks
            line = re_url.sub( r'<a href="\1">\1</a>', line )
            # convert `...' quotations into real left and right single quotes
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
                           line )
            # convert tilde into non-breakable space
            line = string.replace( line, "~", "&nbsp;" )

        return para_header + line + para_footer

    def  make_html_code( self, lines ):
        """Convert a code sequence to HTML."""
        line = code_header + '\n'
        for l in lines:
            line = line + html_quote( l ).rstrip() + '\n'

        return line + code_footer

    def  make_html_items( self, items ):
        """Convert a field's content into HTML."""
        lines = []
        for item in items:
            if item.lines:
                lines.append( self.make_html_code( item.lines ) )
            else:
                lines.append( self.make_html_para( item.words ) )

        return string.join( lines, '\n' )

    def  print_html_items( self, items ):
        print self.make_html_items( items )

    def  print_html_field( self, field ):
        if field.name:
            print( '<table><tr valign="top"><td><b>'
                   + field.name
                   + "</b></td><td>" )

        print self.make_html_items( field.items )

        if field.name:
            print "</td></tr></table>"

    def  html_source_quote( self, line, block_name = None ):
        result = ""
        while line:
            m = re_source_crossref.match( line )
            if m:
                name   = m.group( 2 )
                prefix = html_quote( m.group( 1 ) )
                length = len( m.group( 0 ) )

                if name == block_name:
                    # this is the current block name, if any
                    result = result + prefix + '<b>' + name + '</b>'
                elif re_source_keywords.match( name ):
                    # this is a C keyword
                    result = ( result + prefix
                               + keyword_prefix + name + keyword_suffix )
                elif name in self.identifiers:
                    # this is a known identifier
                    block = self.identifiers[name]
                    id = block.name

                    # link to a field ID if possible
                    try:
                      for markup in block.markups:
                          if markup.tag == 'values':
                              for field in markup.fields:
                                  if field.name:
                                      id = name

                      result = ( result + prefix
                                 + '<a href="'
                                 + self.make_block_url( block, id )
                                 + '">' + name + '</a>' )
                    except:
                      # sections don't have `markups'; however, we don't
                      # want references to sections here anyway
                      result = result + html_quote( line[:length] )

                else:
                    result = result + html_quote( line[:length] )

                line = line[length:]
            else:
                result = result + html_quote( line )
                line   = []

        return result

    def  print_html_field_list( self, fields ):
        print '<table class="fields">'
        for field in fields:
            print ( '<tr><td class="val" id="' + field.name + '">'
                    + field.name
                    + '</td><td class="desc">' )
            self.print_html_items( field.items )
            print "</td></tr>"
        print "</table>"

    def  print_html_markup( self, markup ):
        table_fields = []
        for field in markup.fields:
            if field.name:
                # We begin a new series of field or value definitions.  We
                # record them in the `table_fields' list before outputting
                # all of them as a single table.
                table_fields.append( field )
            else:
                if table_fields:
                    self.print_html_field_list( table_fields )
                    table_fields = []

                self.print_html_items( field.items )

        if table_fields:
            self.print_html_field_list( table_fields )

    #
    # formatting the index
    #
    def  index_enter( self ):
        print self.html_index_header
        self.index_items = {}

    def  index_name_enter( self, name ):
        block = self.identifiers[name]
        url   = self.make_block_url( block )
        self.index_items[name] = url

    def  index_exit( self ):
        # `block_index' already contains the sorted list of index names
        count = len( self.block_index )
        rows  = ( count + self.columns - 1 ) // self.columns

        print '<table class="index">'
        for r in range( rows ):
            line = "<tr>"
            for c in range( self.columns ):
                i = r + c * rows
                if i < count:
                    bname = self.block_index[r + c * rows]
                    url   = self.index_items[bname]
                    # display `foo[bar]' as `foo (bar)'
                    bname = string.replace( bname, "[", " (" )
                    bname = string.replace( bname, "]", ")"  )
                    # normalize url, following RFC 3986
                    url = string.replace( url, "[", "(" )
                    url = string.replace( url, "]", ")" )
                    line  = ( line + '<td><a href="' + url + '">'
                              + bname + '</a></td>' )
                else:
                    line = line + '<td></td>'
            line = line + "</tr>"
            print line

        print "</table>"

        print( index_footer_start
               + self.file_prefix + "toc.html"
               + index_footer_end )

        print self.html_footer

        self.index_items = {}

    def  index_dump( self, index_filename = None ):
        if index_filename == None:
            index_filename = self.file_prefix + "index.html"

        Formatter.index_dump( self, index_filename )

    #
    # formatting the table of contents
    #
    def  toc_enter( self ):
        print self.html_toc_header
        print "<h1>Table of Contents</h1>"

    def  toc_chapter_enter( self, chapter ):
        print chapter_header + string.join( chapter.title ) + chapter_inter
        print '<table class="toc">'

    def  toc_section_enter( self, section ):
        print ( '<tr><td class="link">'
                + '<a href="' + self.make_section_url( section ) + '">'
                + section.title + '</a></td><td class="desc">' )
        print self.make_html_para( section.abstract )

    def  toc_section_exit( self, section ):
        print "</td></tr>"

    def  toc_chapter_exit( self, chapter ):
        print "</table>"
        print chapter_footer

    def  toc_index( self, index_filename ):
        print( chapter_header
               + '<a href="' + index_filename + '">Global Index</a>'
               + chapter_inter + chapter_footer )

    def  toc_exit( self ):
        print( toc_footer_start
               + self.file_prefix + "index.html"
               + toc_footer_end )

        print self.html_footer

    def  toc_dump( self, toc_filename = None, index_filename = None ):
        if toc_filename == None:
            toc_filename = self.file_prefix + "toc.html"

        if index_filename == None:
            index_filename = self.file_prefix + "index.html"

        Formatter.toc_dump( self, toc_filename, index_filename )

    #
    # formatting sections
    #
    def  section_enter( self, section ):
        print self.html_header

        print ( section_title_header1 + section.name + section_title_header2
                + section.title
                + section_title_footer )

        maxwidth = 0
        for b in section.blocks.values():
            if len( b.name ) > maxwidth:
                maxwidth = len( b.name )

        width = 70  # XXX magic number
        if maxwidth > 0:
            # print section synopsis
            print section_synopsis_header
            print '<table class="synopsis">'

            columns = width // maxwidth
            if columns < 1:
                columns = 1

            count = len( section.block_names )
            # don't handle last entry if it is empty
            if section.block_names[-1] == "/empty/":
                count -= 1
            rows  = ( count + columns - 1 ) // columns

            for r in range( rows ):
                line = "<tr>"
                for c in range( columns ):
                    i = r + c * rows
                    line = line + '<td>'
                    if i < count:
                        name = section.block_names[i]
                        if name == "/empty/":
                            # it can happen that a complete row is empty, and
                            # without a proper `filler' the browser might
                            # collapse the row to a much smaller height (or
                            # even omit it completely)
                            line = line + "&nbsp;"
                        else:
                            url = name
                            # display `foo[bar]' as `foo'
                            name = re.sub( r'\[.*\]', '', name )
                            # normalize url, following RFC 3986
                            url = string.replace( url, "[", "(" )
                            url = string.replace( url, "]", ")" )
                            line = ( line + '<a href="#' + url + '">'
                                     + name + '</a>' )

                    line = line + '</td>'
                line = line + "</tr>"
                print line

            print "</table>"
            print section_synopsis_footer

        print description_header
        print self.make_html_items( section.description )
        print description_footer

    def  block_enter( self, block ):
        print block_header

        # place html anchor if needed
        if block.name:
            url = block.name
            # display `foo[bar]' as `foo'
            name = re.sub( r'\[.*\]', '', block.name )
            # normalize url, following RFC 3986
            url = string.replace( url, "[", "(" )
            url = string.replace( url, "]", ")" )
            print( '<h3 id="' + url + '">' + name + '</h3>' )

        # dump the block C source lines now
        if block.code:
            header = ''
            for f in self.headers.keys():
                if block.source.filename.find( f ) >= 0:
                    header = self.headers[f] + ' (' + f + ')'
                    break

#           if not header:
#               sys.stderr.write(
#                 "WARNING: No header macro for"
#                 + " '" + block.source.filename + "'.\n" )

            if header:
                print ( header_location_header
                        + 'Defined in ' + header + '.'
                        + header_location_footer )

            print source_header
            for l in block.code:
                print self.html_source_quote( l, block.name )
            print source_footer

    def  markup_enter( self, markup, block ):
        if markup.tag == "description":
            print description_header
        else:
            print marker_header + markup.tag + marker_inter

        self.print_html_markup( markup )

    def  markup_exit( self, markup, block ):
        if markup.tag == "description":
            print description_footer
        else:
            print marker_footer

    def  block_exit( self, block ):
        print( block_footer_start + self.file_prefix + "index.html"
               + block_footer_middle + self.file_prefix + "toc.html"
               + block_footer_end )

    def  section_exit( self, section ):
        print html_footer

    def  section_dump_all( self ):
        for section in self.sections:
            self.section_dump( section,
                               self.file_prefix + section.name + '.html' )

# eof
@


1.10
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d393 1
a393 1
            line = line + html_quote( l ) + '\n'
@


1.9
log
@
Bugfixing update to freetype-2.6.2

Tested on amd64, i386, macppc, sparc64, loongson and compile-tested
on arm by matthieu@@
Also tested in a ports bulk build by naddy@@

OK matthieu@@
@
text
@d6 1
a6 1
#  Copyright 2002-2015 by
@


1.8
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d167 2
a168 1
section_title_header = "<h1>"
d313 8
a320 1
        return self.make_section_url( block.section ) + "#" + name
d328 2
a329 2
                name = m.group( 1 )
                rest = m.group( 2 )
d332 17
a348 1
                return '<a href="' + url + '">' + name + '</a>' + rest
d444 15
a458 5
                    for markup in block.markups:
                        if markup.tag == 'values':
                            for field in markup.fields:
                                if field.name:
                                    id = name
a459 4
                    result = ( result + prefix
                               + '<a href="'
                               + self.make_block_url( block, id )
                               + '">' + name + '</a>' )
d523 6
d603 3
a605 1
        print section_title_header + section.title + section_title_footer
d642 7
a648 1
                            line = ( line + '<a href="#' + name + '">'
d667 7
a673 1
            print( '<h3 id="' + block.name + '">' + block.name + '</h3>' )
@


1.7
log
@
Bugfixing update to freetype-2.5.5

ok matthieu@@
@
text
@d6 1
a6 1
#  Copyright 2002, 2003, 2005-2008, 2013, 2014 by
@


1.6
log
@
Update to freetype-2.5.4

ports bulk build by landry@@

OK matthieu@@
@
text
@d631 1
a631 1
                    break;
@


1.5
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d1 16
a16 2
#  ToHTML (c) 2002, 2003, 2005-2008, 2013
#    David Turner <david@@freetype.org>
d25 1
a25 1
# The following defines the HTML header used by all generated pages.
d38 4
d44 28
a71 1
         background: #FFFFFF; }
a73 5
  h1 { text-align: center; }
  li { text-align: justify; }
  td { padding: 0 0.5em 0 0.5em; }
  td.left { padding: 0 0.5em 0 0.5em;
            text-align: left; }
d75 1
a75 3
  a:link { color: #0000EF; }
  a:visited { color: #51188E; }
  a:hover { color: #FF0000; }
d82 45
a126 1
  pre.colored { color: blue; }
a127 1
  ul.empty { list-style-type: none; }
d133 2
a134 2
html_header_3 = """
<table align=center><tr><td><font size=-1>[<a href="\
d137 2
a138 3
html_header_3i = """
<table align=center><tr><td width="100%"></td>
<td><font size=-1>[<a href="\
d142 1
a142 3
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-1>[<a href="\
d145 3
a147 3
html_header_5 = """\
">TOC</a>]</font></td></tr></table>
<center><h1>\
d150 3
a152 4
html_header_5t = """\
">Index</a>]</font></td>
<td width="100%"></td></tr></table>
<center><h1>\
d156 1
a156 1
 API Reference</h1></center>
d167 2
a168 2
section_title_header = "<center><h1>"
section_title_footer = "</h1></center>"
d179 1
a179 1
block_header        = '<table align=center width="75%"><tr><td>'
d181 2
a182 3
</td></tr></table>
<hr width="75%">
<table align=center width="75%"><tr><td><font size=-2>[<a href="\
d185 3
a187 3
">Index</a>]</font></td>
<td width="100%"></td>
<td><font size=-2>[<a href="\
d190 1
a190 1
">TOC</a>]</font></td></tr></table>
d194 2
a195 2
description_header = '<table align=center width="87%"><tr><td>'
description_footer = "</td></tr></table><br>"
d198 3
a200 3
marker_header = '<table align=center width="87%" cellpadding=5><tr bgcolor="#EEEEFF"><td><em><b>'
marker_inter  = "</b></em></td></tr><tr><td>"
marker_footer = "</td></tr></table>"
d203 2
a204 2
header_location_header = '<table align=center width="87%"><tr><td>'
header_location_footer = "</td></tr></table><br>"
d207 2
a208 2
source_header = '<table align=center width="87%"><tr bgcolor="#D6E8FF"><td><pre>\n'
source_footer = "\n</pre></table><br>"
d211 6
a216 3
chapter_header = '<br><table align=center width="75%"><tr><td><h2>'
chapter_inter  = '</h2><ul class="empty"><li>'
chapter_footer = '</li></ul></td></tr></table>'
d221 1
a221 2
<table><tr><td width="100%"></td>
<td><font size=-2>[<a href="\
d224 1
a224 1
">TOC</a>]</font></td></tr></table>
d230 1
a230 1
<table><tr><td><font size=-2>[<a href="\
d233 1
a233 3
">Index</a>]</font></td>
<td width="100%"></td>
</tr></table>
d237 1
a237 1
# source language keyword coloration/styling
d245 3
a247 2
# Translate a single line of source to HTML.  This will convert
# a "<" into "&lt.", ">" into "&gt.", etc.
d249 3
a251 3
    result = string.replace( line, "&", "&amp;" )
    result = string.replace( result, "<", "&lt;" )
    result = string.replace( result, ">", "&gt;" )
d255 4
a258 1

d264 7
a270 2
        global html_header_1, html_header_2, html_header_3
        global html_header_4, html_header_5, html_footer
d277 26
a302 25
        self.headers           = processor.headers
        self.project_title     = project_title
        self.file_prefix       = file_prefix
        self.html_header       = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_4 + file_prefix + "toc.html" +   \
                                 html_header_5 + project_title +              \
                                 html_header_6

        self.html_index_header = html_header_1 + project_title +             \
                                 html_header_2 +                             \
                                 html_header_3i + file_prefix + "toc.html" + \
                                 html_header_5 + project_title +             \
                                 html_header_6

        self.html_toc_header   = html_header_1 + project_title +              \
                                 html_header_2 +                              \
                                 html_header_3 + file_prefix + "index.html" + \
                                 html_header_5t + project_title +             \
                                 html_header_6

        self.html_footer       = "<center><font size=""-2"">generated on " +     \
                                 time.asctime( time.localtime( time.time() ) ) + \
                                 "</font></center>" + html_footer
d309 4
a312 2
    def  make_block_url( self, block ):
        return self.make_section_url( block.section ) + "#" + block.name
d315 2
a316 2
        """analyze a simple word to detect cross-references and styling"""
        # look for cross-references
d327 2
a328 2
                sys.stderr.write( \
                   "WARNING: undefined cross reference '" + name + "'.\n" )
d331 1
a331 1
        # look for italics and bolds
d335 1
a335 1
            rest = m.group( 3 )
d341 1
a341 1
            rest = m.group( 3 )
d347 2
a348 1
        """ convert words of a paragraph into tagged HTML text, handle xrefs """
d357 2
a358 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",  \
                           r'\1&lsquo;\2&rsquo;\3', \
d366 1
a366 1
        """ convert a code sequence to HTML """
d374 1
a374 1
        """ convert a field's content into some valid HTML """
d389 3
a391 1
            print "<table><tr valign=top><td><b>" + field.name + "</b></td><td>"
d412 3
a414 2
                    result = result + prefix + keyword_prefix + name + keyword_suffix
                elif self.identifiers.has_key( name ):
d417 13
a429 2
                    result = result + prefix + '<a href="' + \
                             self.make_block_url( block ) + '">' + name + '</a>'
d441 1
a441 2
        print "<p></p>"
        print "<table cellpadding=3 border=0>"
d443 3
a445 6
            if len( field.name ) > 22:
              print "<tr valign=top><td colspan=0><b>" + field.name + "</b></td></tr>"
              print "<tr valign=top><td></td><td>"
            else:
              print "<tr valign=top><td><b>" + field.name + "</b></td><td>"

d454 3
a456 4
                # we begin a new series of field or value definitions, we
                # will record them in the 'table_fields' list before outputting
                # all of them as a single table
                #
d469 1
a469 1
    #  Formatting the index
d481 1
a481 1
        # block_index already contains the sorted list of index names
d483 1
a483 1
        rows  = ( count + self.columns - 1 ) / self.columns
d485 1
a485 1
        print "<table align=center border=0 cellpadding=0 cellspacing=0>"
d493 2
a494 1
                    line = line + '<td><a href="' + url + '">' + bname + '</a></td>'
d502 3
a504 3
        print index_footer_start +            \
              self.file_prefix + "toc.html" + \
              index_footer_end
d517 1
a517 1
    #  Formatting the table of content
d521 1
a521 1
        print "<center><h1>Table of Contents</h1></center>"
d524 2
a525 2
        print  chapter_header + string.join( chapter.title ) + chapter_inter
        print "<table cellpadding=5>"
d528 3
a530 4
        print '<tr valign=top><td class="left">'
        print '<a href="' + self.make_section_url( section ) + '">' + \
               section.title + '</a></td><td>'

d541 3
a543 3
        print chapter_header +                                      \
              '<a href="' + index_filename + '">Global Index</a>' + \
              chapter_inter + chapter_footer
d546 3
a548 3
        print toc_footer_start +                \
              self.file_prefix + "index.html" + \
              toc_footer_end
d562 1
a562 1
    #  Formatting sections
d567 1
a567 3
        print section_title_header
        print section.title
        print section_title_footer
d575 1
a575 1
        if maxwidth <> 0:
d578 1
a578 1
            print "<table align=center cellspacing=5 cellpadding=0 border=0>"
d580 1
a580 1
            columns = width / maxwidth
d585 4
a588 1
            rows  = ( count + columns - 1 ) / columns
d594 1
a594 1
                    line = line + '<td></td><td>'
d597 9
a605 1
                        line = line + '<a href="#' + name + '">' + name + '</a>'
d611 1
a611 1
            print "</table><br><br>"
d623 1
a623 1
            print '<h4><a name="' + block.name + '">' + block.name + '</a></h4>'
d634 3
a636 2
#               sys.stderr.write( \
#                 'WARNING: No header macro for ' + block.source.filename + '.\n' )
d639 3
a641 3
                print header_location_header
                print 'Defined in ' + header + '.'
                print header_location_footer
d663 3
a665 3
        print block_footer_start + self.file_prefix + "index.html" + \
              block_footer_middle + self.file_prefix + "toc.html" +  \
              block_footer_end
d672 2
a673 1
            self.section_dump( section, self.file_prefix + section.name + '.html' )
@


1.4
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d1 1
a1 1
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007, 2008
a177 19
# same as 'html_quote', but ignores left and right brackets
def  html_quote0( line ):
    return string.replace( line, "&", "&amp;" )


def  dump_html_code( lines, prefix = "" ):
    # clean the last empty lines
    l = len( self.lines )
    while l > 0 and string.strip( self.lines[l - 1] ) == "":
        l = l - 1

    # The code footer should be directly appended to the last code
    # line to avoid an additional blank line.
    print prefix + code_header,
    for line in self.lines[0 : l + 1]:
        print '\n' + prefix + html_quote( line ),
    print prefix + code_footer,


a225 10
    def  make_html_words( self, words ):
        """ convert a series of simple words into some HTML text """
        line = ""
        if words:
            line = html_quote( words[0] )
            for w in words[1:]:
                line = line + " " + html_quote( w )

        return line

d265 2
@


1.3
log
@Update to Freetype 2.3.7. This is a bug fix release. No API change.
@
text
@d552 1
a552 1
                
@


1.2
log
@Update to freetype 2.3.6.
Contains security fixes for CVE-2008-1806, CVE-2008-1807 and CVE-2008-1808.
Tested by many.
@
text
@d18 2
a19 1
<title>"""
d21 2
a22 1
html_header_2= """ API Reference</title>
d50 21
a70 1
<center><h1>"""
d72 8
a79 1
html_header_3=""" API Reference</h1></center>
d86 2
a87 1
</html>"""
d143 1
a143 1
<td><font size=-2>[<a href="
d149 11
d203 2
a204 1
        global html_header_1, html_header_2, html_header_3, html_footer
d211 25
a235 9
        self.headers       = processor.headers
        self.project_title = project_title
        self.file_prefix   = file_prefix
        self.html_header   = html_header_1 + project_title + html_header_2 + \
                             project_title + html_header_3

        self.html_footer = "<center><font size=""-2"">generated on " +      \
                            time.asctime( time.localtime( time.time() ) ) + \
                           "</font></center>" + html_footer
d288 1
a288 1
        """ convert a paragraph's words into tagged HTML text, handle xrefs """
d298 2
d401 1
a401 1
        print self.html_header
d434 2
d448 1
a448 1
        print self.html_header
d467 1
a467 1
        print  chapter_footer
d475 4
@


1.1
log
@Initial revision
@
text
@d1 3
d10 1
a11 1
#
d29 3
a31 1
  td { padding: 0 0.5em 0 0.5em }
a53 1

a54 1
#
a59 1
#
a63 1
#
a67 1
#
a71 1
#
d76 1
a76 1
<table align=center width="75%"><tr><td><font size=-2>[<a href="
d81 1
a81 1
<td><font size=-2>[<a href="
a87 1
#
a91 1
#
d96 4
a100 1
#
a104 1
#
d109 10
a120 1
#
d127 1
d130 2
a131 3
#
def html_quote( line ):
    result = string.replace( line,   "&", "&amp;" )
d138 1
a138 2
#
def html_quote0( line ):
d142 1
a142 1
def dump_html_code( lines, prefix = "" ):
a143 1
    #
a149 1
    #
d151 2
a152 2
    for line in self.lines[0 : l+1]:
        print '\n' + prefix + html_quote(line),
d157 1
a157 3
class HtmlFormatter(Formatter):

    def __init__( self, processor, project_title, file_prefix ):
d159 1
d169 1
a183 1

a186 1

a196 1

a199 1
        #
d203 2
a204 2
                name = m.group(1)
                rest = m.group(2)
d217 2
a218 2
            name = m.group(1)
            rest = m.group(3)
d223 2
a224 2
            name = m.group(1)
            rest = m.group(3)
d227 1
a227 2
        return html_quote(word)

d237 2
a238 2
            line = re.sub( r"(^|\W)`(.*?)'(\W|$)",
                           r'\1&lsquo;\2&rsquo;\3',
a242 1

a250 1

a261 1

d265 1
a265 2

    def print_html_field( self, field ):
d267 1
a267 1
            print "<table><tr valign=top><td><p><b>"+field.name+"</b></p></td><td>"
d274 1
a274 2

    def html_source_quote( self, line, block_name = None ):
d279 3
a281 3
                name   = m.group(2)
                prefix = html_quote( m.group(1) )
                length = len( m.group(0) )
d286 1
a286 2

                elif re_source_keywords.match(name):
d289 1
a289 2

                elif self.identifiers.has_key(name):
d293 1
a293 1
                             self.make_block_url(block) + '">' + name + '</a>'
d295 1
a295 1
                    result = result + html_quote(line[:length])
d299 1
a299 1
                result = result + html_quote(line)
d304 2
a305 2

    def print_html_field_list( self, fields ):
d308 2
a309 2
            if len(field.name) > 22:
              print "<tr valign=top><td colspan=0><b>"+field.name+"</b></td></tr>"
d318 1
a318 2

    def print_html_markup( self, markup ):
a326 1

a339 1

a349 1

d352 1
a352 1
        rows  = (count + self.columns - 1)/self.columns
d355 1
a355 1
        for r in range(rows):
d357 2
a358 2
            for c in range(self.columns):
                i = r + c*rows
d369 5
a373 1
        print self.html_footer
a376 1

d390 1
a390 1
        print  chapter_header + string.join(chapter.title) + chapter_inter
d394 1
a394 1
        print "<tr valign=top><td>"
d408 3
a410 1
        print chapter_header + '<a href="' + index_filename + '">Global Index</a>' + chapter_inter + chapter_footer
d439 1
a439 1
        width  = 70  # XXX magic number
d481 15
a500 1

d517 1
a517 1
              block_footer_middle + self.file_prefix + "toc.html" + \
a519 1

d523 1
a523 2

    def section_dump_all( self ):
d527 1
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@a0 3
#  ToHTML (c) 2002, 2003, 2005, 2006, 2007
#    David Turner <david@@freetype.org>

a109 10
# Index footer.
index_footer_start = """\
<hr>
<table><tr><td width="100%"></td>
<td><font size=-2>[<a href="
"""
index_footer_end = """\
">TOC</a>]</font></td></tr></table>
"""

d363 1
a363 1
        rows  = (count + self.columns - 1) / self.columns
d380 1
a380 5

        print index_footer_start + \
              self.file_prefix + "toc.html" + \
              index_footer_end

a520 1
# eof
@

