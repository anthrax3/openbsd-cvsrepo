head	1.19;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.2
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2017.06.23.16.15.19;	author dcoppa;	state Exp;
branches;
next	1.18;
commitid	nHj0O50aY5QcUcQ4;

1.18
date	2017.01.13.11.19.59;	author dcoppa;	state Exp;
branches;
next	1.17;
commitid	ESXG9TuEmwmBXggf;

1.17
date	2016.08.09.07.16.09;	author dcoppa;	state Exp;
branches;
next	1.16;
commitid	C8TgUUJolulx9B5d;

1.16
date	2015.12.07.09.34.04;	author dcoppa;	state Exp;
branches;
next	1.15;
commitid	wZOPiDmcwgRFTDVL;

1.15
date	2015.10.19.07.51.37;	author dcoppa;	state Exp;
branches;
next	1.14;
commitid	d2XmJCtYff11VIDu;

1.14
date	2015.06.28.08.27.49;	author dcoppa;	state Exp;
branches;
next	1.13;
commitid	qXwIGV2h9uFjxAmt;

1.13
date	2015.01.10.17.17.23;	author dcoppa;	state Exp;
branches;
next	1.12;
commitid	2tSYQMWVSV3t7clo;

1.12
date	2014.12.26.17.52.35;	author dcoppa;	state Exp;
branches;
next	1.11;
commitid	gwhRExMduYqoPQHI;

1.11
date	2014.03.14.08.18.01;	author dcoppa;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2014.01.12.15.08.28;	author matthieu;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2013.10.10.19.49.55;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.07.17.21.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.14.09.45.47;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.18.20.29.59;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.17.14.06.43;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.25.20.49.55;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.26.07.31.45;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.10.20.28.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.44.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.44.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.32.27;	author matthieu;	state Exp;
branches;
next	;

1.10.2.1
date	2015.03.11.19.50.48;	author tedu;	state Exp;
branches;
next	;
commitid	gSxuITleqkyrLFtk;

1.11.2.1
date	2015.03.11.19.50.17;	author tedu;	state Exp;
branches;
next	;
commitid	DBjn1kYKEwrb9ob6;


desc
@@


1.19
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/*  pcfread.c

    FreeType font driver for pcf fonts

  Copyright 2000-2010, 2012-2014 by
  Francesco Zappa Nardelli

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


#include <ft2build.h>

#include FT_INTERNAL_DEBUG_H
#include FT_INTERNAL_STREAM_H
#include FT_INTERNAL_OBJECTS_H

#include "pcf.h"
#include "pcfread.h"

#include "pcferror.h"


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_pcfread


#ifdef FT_DEBUG_LEVEL_TRACE
  static const char* const  tableNames[] =
  {
    "properties",
    "accelerators",
    "metrics",
    "bitmaps",
    "ink metrics",
    "encodings",
    "swidths",
    "glyph names",
    "BDF accelerators"
  };
#endif


  static
  const FT_Frame_Field  pcf_toc_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_TocRec

    FT_FRAME_START( 8 ),
      FT_FRAME_ULONG_LE( version ),
      FT_FRAME_ULONG_LE( count ),
    FT_FRAME_END
  };


  static
  const FT_Frame_Field  pcf_table_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_TableRec

    FT_FRAME_START( 16  ),
      FT_FRAME_ULONG_LE( type ),
      FT_FRAME_ULONG_LE( format ),
      FT_FRAME_ULONG_LE( size ),   /* rounded up to a multiple of 4 */
      FT_FRAME_ULONG_LE( offset ),
    FT_FRAME_END
  };


  static FT_Error
  pcf_read_TOC( FT_Stream  stream,
                PCF_Face   face )
  {
    FT_Error   error;
    PCF_Toc    toc = &face->toc;
    PCF_Table  tables;

    FT_Memory  memory = FT_FACE( face )->memory;
    FT_UInt    n;

    FT_ULong   size;


    if ( FT_STREAM_SEEK( 0 )                          ||
         FT_STREAM_READ_FIELDS( pcf_toc_header, toc ) )
      return FT_THROW( Cannot_Open_Resource );

    if ( toc->version != PCF_FILE_VERSION ||
         toc->count   == 0                )
      return FT_THROW( Invalid_File_Format );

    if ( stream->size < 16 )
      return FT_THROW( Invalid_File_Format );

    /* we need 16 bytes per TOC entry, */
    /* and there can be most 9 tables  */
    if ( toc->count > ( stream->size >> 4 ) ||
         toc->count > 9                     )
    {
      FT_TRACE0(( "pcf_read_TOC: adjusting number of tables"
                  " (from %d to %d)\n",
                  toc->count,
                  FT_MIN( stream->size >> 4, 9 ) ));
      toc->count = FT_MIN( stream->size >> 4, 9 );
    }

    if ( FT_NEW_ARRAY( face->toc.tables, toc->count ) )
      return error;

    tables = face->toc.tables;
    for ( n = 0; n < toc->count; n++ )
    {
      if ( FT_STREAM_READ_FIELDS( pcf_table_header, tables ) )
        goto Exit;
      tables++;
    }

    /* Sort tables and check for overlaps.  Because they are almost      */
    /* always ordered already, an in-place bubble sort with simultaneous */
    /* boundary checking seems appropriate.                              */
    tables = face->toc.tables;

    for ( n = 0; n < toc->count - 1; n++ )
    {
      FT_UInt  i, have_change;


      have_change = 0;

      for ( i = 0; i < toc->count - 1 - n; i++ )
      {
        PCF_TableRec  tmp;


        if ( tables[i].offset > tables[i + 1].offset )
        {
          tmp           = tables[i];
          tables[i]     = tables[i + 1];
          tables[i + 1] = tmp;

          have_change = 1;
        }

        if ( ( tables[i].size   > tables[i + 1].offset )                  ||
             ( tables[i].offset > tables[i + 1].offset - tables[i].size ) )
        {
          error = FT_THROW( Invalid_Offset );
          goto Exit;
        }
      }

      if ( !have_change )
        break;
    }

    /*
     *  We now check whether the `size' and `offset' values are reasonable:
     *  `offset' + `size' must not exceed the stream size.
     *
     *  Note, however, that X11's `pcfWriteFont' routine (used by the
     *  `bdftopcf' program to create PDF font files) has two special
     *  features.
     *
     *  - It always assigns the accelerator table a size of 100 bytes in the
     *    TOC, regardless of its real size, which can vary between 34 and 72
     *    bytes.
     *
     *  - Due to the way the routine is designed, it ships out the last font
     *    table with its real size, ignoring the TOC's size value.  Since
     *    the TOC size values are always rounded up to a multiple of 4, the
     *    difference can be up to three bytes for all tables except the
     *    accelerator table, for which the difference can be as large as 66
     *    bytes.
     *
     */

    tables = face->toc.tables;
    size   = stream->size;

    for ( n = 0; n < toc->count - 1; n++ )
    {
      /* we need two checks to avoid overflow */
      if ( ( tables->size   > size                ) ||
           ( tables->offset > size - tables->size ) )
      {
        error = FT_THROW( Invalid_Table );
        goto Exit;
      }
      tables++;
    }

    /* only check `tables->offset' for last table element ... */
    if ( ( tables->offset > size ) )
    {
      error = FT_THROW( Invalid_Table );
      goto Exit;
    }
    /* ... and adjust `tables->size' to the real value if necessary */
    if ( tables->size > size - tables->offset )
      tables->size = size - tables->offset;

#ifdef FT_DEBUG_LEVEL_TRACE

    {
      FT_UInt      i, j;
      const char*  name = "?";


      FT_TRACE4(( "pcf_read_TOC:\n" ));

      FT_TRACE4(( "  number of tables: %ld\n", face->toc.count ));

      tables = face->toc.tables;
      for ( i = 0; i < toc->count; i++ )
      {
        for ( j = 0; j < sizeof ( tableNames ) / sizeof ( tableNames[0] );
              j++ )
          if ( tables[i].type == (FT_UInt)( 1 << j ) )
            name = tableNames[j];

        FT_TRACE4(( "  %d: type=%s, format=0x%X,"
                    " size=%ld (0x%lX), offset=%ld (0x%lX)\n",
                    i, name,
                    tables[i].format,
                    tables[i].size, tables[i].size,
                    tables[i].offset, tables[i].offset ));
      }
    }

#endif

    return FT_Err_Ok;

  Exit:
    FT_FREE( face->toc.tables );
    return error;
  }


#define PCF_METRIC_SIZE  12

  static
  const FT_Frame_Field  pcf_metric_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_MetricRec

    FT_FRAME_START( PCF_METRIC_SIZE ),
      FT_FRAME_SHORT_LE( leftSideBearing ),
      FT_FRAME_SHORT_LE( rightSideBearing ),
      FT_FRAME_SHORT_LE( characterWidth ),
      FT_FRAME_SHORT_LE( ascent ),
      FT_FRAME_SHORT_LE( descent ),
      FT_FRAME_SHORT_LE( attributes ),
    FT_FRAME_END
  };


  static
  const FT_Frame_Field  pcf_metric_msb_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_MetricRec

    FT_FRAME_START( PCF_METRIC_SIZE ),
      FT_FRAME_SHORT( leftSideBearing ),
      FT_FRAME_SHORT( rightSideBearing ),
      FT_FRAME_SHORT( characterWidth ),
      FT_FRAME_SHORT( ascent ),
      FT_FRAME_SHORT( descent ),
      FT_FRAME_SHORT( attributes ),
    FT_FRAME_END
  };


#define PCF_COMPRESSED_METRIC_SIZE  5

  static
  const FT_Frame_Field  pcf_compressed_metric_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_Compressed_MetricRec

    FT_FRAME_START( PCF_COMPRESSED_METRIC_SIZE ),
      FT_FRAME_BYTE( leftSideBearing ),
      FT_FRAME_BYTE( rightSideBearing ),
      FT_FRAME_BYTE( characterWidth ),
      FT_FRAME_BYTE( ascent ),
      FT_FRAME_BYTE( descent ),
    FT_FRAME_END
  };


  static FT_Error
  pcf_get_metric( FT_Stream   stream,
                  FT_ULong    format,
                  PCF_Metric  metric )
  {
    FT_Error  error = FT_Err_Ok;


    if ( PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
    {
      const FT_Frame_Field*  fields;


      /* parsing normal metrics */
      fields = ( PCF_BYTE_ORDER( format ) == MSBFirst )
               ? pcf_metric_msb_header
               : pcf_metric_header;

      /* the following sets `error' but doesn't return in case of failure */
      (void)FT_STREAM_READ_FIELDS( fields, metric );
    }
    else
    {
      PCF_Compressed_MetricRec  compr;


      /* parsing compressed metrics */
      if ( FT_STREAM_READ_FIELDS( pcf_compressed_metric_header, &compr ) )
        goto Exit;

      metric->leftSideBearing  = (FT_Short)( compr.leftSideBearing  - 0x80 );
      metric->rightSideBearing = (FT_Short)( compr.rightSideBearing - 0x80 );
      metric->characterWidth   = (FT_Short)( compr.characterWidth   - 0x80 );
      metric->ascent           = (FT_Short)( compr.ascent           - 0x80 );
      metric->descent          = (FT_Short)( compr.descent          - 0x80 );
      metric->attributes       = 0;
    }

    FT_TRACE5(( " width=%d,"
                " lsb=%d, rsb=%d,"
                " ascent=%d, descent=%d,"
                " attributes=%d\n",
                metric->characterWidth,
                metric->leftSideBearing,
                metric->rightSideBearing,
                metric->ascent,
                metric->descent,
                metric->attributes ));

  Exit:
    return error;
  }


  static FT_Error
  pcf_seek_to_table_type( FT_Stream  stream,
                          PCF_Table  tables,
                          FT_ULong   ntables, /* same as PCF_Toc->count */
                          FT_ULong   type,
                          FT_ULong  *aformat,
                          FT_ULong  *asize )
  {
    FT_Error  error = FT_ERR( Invalid_File_Format );
    FT_ULong  i;


    for ( i = 0; i < ntables; i++ )
      if ( tables[i].type == type )
      {
        if ( stream->pos > tables[i].offset )
        {
          error = FT_THROW( Invalid_Stream_Skip );
          goto Fail;
        }

        if ( FT_STREAM_SKIP( tables[i].offset - stream->pos ) )
        {
          error = FT_THROW( Invalid_Stream_Skip );
          goto Fail;
        }

        *asize   = tables[i].size;
        *aformat = tables[i].format;

        return FT_Err_Ok;
      }

  Fail:
    *asize = 0;
    return error;
  }


  static FT_Bool
  pcf_has_table_type( PCF_Table  tables,
                      FT_ULong   ntables, /* same as PCF_Toc->count */
                      FT_ULong   type )
  {
    FT_ULong  i;


    for ( i = 0; i < ntables; i++ )
      if ( tables[i].type == type )
        return TRUE;

    return FALSE;
  }


#define PCF_PROPERTY_SIZE  9

  static
  const FT_Frame_Field  pcf_property_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_ParsePropertyRec

    FT_FRAME_START( PCF_PROPERTY_SIZE ),
      FT_FRAME_LONG_LE( name ),
      FT_FRAME_BYTE   ( isString ),
      FT_FRAME_LONG_LE( value ),
    FT_FRAME_END
  };


  static
  const FT_Frame_Field  pcf_property_msb_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_ParsePropertyRec

    FT_FRAME_START( PCF_PROPERTY_SIZE ),
      FT_FRAME_LONG( name ),
      FT_FRAME_BYTE( isString ),
      FT_FRAME_LONG( value ),
    FT_FRAME_END
  };


  FT_LOCAL_DEF( PCF_Property )
  pcf_find_property( PCF_Face          face,
                     const FT_String*  prop )
  {
    PCF_Property  properties = face->properties;
    FT_Bool       found      = 0;
    int           i;


    for ( i = 0; i < face->nprops && !found; i++ )
    {
      if ( !ft_strcmp( properties[i].name, prop ) )
        found = 1;
    }

    if ( found )
      return properties + i - 1;
    else
      return NULL;
  }


  static FT_Error
  pcf_get_properties( FT_Stream  stream,
                      PCF_Face   face )
  {
    PCF_ParseProperty  props      = NULL;
    PCF_Property       properties = NULL;
    FT_ULong           nprops, orig_nprops, i;
    FT_ULong           format, size;
    FT_Error           error;
    FT_Memory          memory     = FT_FACE( face )->memory;
    FT_ULong           string_size;
    FT_String*         strings    = NULL;


    error = pcf_seek_to_table_type( stream,
                                    face->toc.tables,
                                    face->toc.count,
                                    PCF_PROPERTIES,
                                    &format,
                                    &size );
    if ( error )
      goto Bail;

    if ( FT_READ_ULONG_LE( format ) )
      goto Bail;

    FT_TRACE4(( "pcf_get_properties:\n"
                "  format: 0x%lX (%s)\n",
                format,
                PCF_BYTE_ORDER( format ) == MSBFirst ? "MSB" : "LSB" ));

    if ( !PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
      goto Bail;

    if ( PCF_BYTE_ORDER( format ) == MSBFirst )
      (void)FT_READ_ULONG( orig_nprops );
    else
      (void)FT_READ_ULONG_LE( orig_nprops );
    if ( error )
      goto Bail;

    FT_TRACE4(( "  number of properties: %ld\n", orig_nprops ));

    /* rough estimate */
    if ( orig_nprops > size / PCF_PROPERTY_SIZE )
    {
      error = FT_THROW( Invalid_Table );
      goto Bail;
    }

    /* as a heuristic limit to avoid excessive allocation in */
    /* gzip bombs (i.e., very small, invalid input data that */
    /* pretends to expand to an insanely large file) we only */
    /* load the first 256 properties                         */
    if ( orig_nprops > 256 )
    {
      FT_TRACE0(( "pcf_get_properties:"
                  " only loading first 256 properties\n" ));
      nprops = 256;
    }
    else
      nprops = orig_nprops;

    face->nprops = (int)nprops;

    if ( FT_NEW_ARRAY( props, nprops ) )
      goto Bail;

    for ( i = 0; i < nprops; i++ )
    {
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
      {
        if ( FT_STREAM_READ_FIELDS( pcf_property_msb_header, props + i ) )
          goto Bail;
      }
      else
      {
        if ( FT_STREAM_READ_FIELDS( pcf_property_header, props + i ) )
          goto Bail;
      }
    }

    /* this skip will only work if we really have an extremely large */
    /* number of properties; it will fail for fake data, avoiding an */
    /* unnecessarily large allocation later on                       */
    if ( FT_STREAM_SKIP( ( orig_nprops - nprops ) * PCF_PROPERTY_SIZE ) )
    {
      error = FT_THROW( Invalid_Stream_Skip );
      goto Bail;
    }

    /* pad the property array                                            */
    /*                                                                   */
    /* clever here - nprops is the same as the number of odd-units read, */
    /* as only isStringProp are odd length   (Keith Packard)             */
    /*                                                                   */
    if ( orig_nprops & 3 )
    {
      i = 4 - ( orig_nprops & 3 );
      if ( FT_STREAM_SKIP( i ) )
      {
        error = FT_THROW( Invalid_Stream_Skip );
        goto Bail;
      }
    }

    if ( PCF_BYTE_ORDER( format ) == MSBFirst )
      (void)FT_READ_ULONG( string_size );
    else
      (void)FT_READ_ULONG_LE( string_size );
    if ( error )
      goto Bail;

    FT_TRACE4(( "  string size: %ld\n", string_size ));

    /* rough estimate */
    if ( string_size > size - orig_nprops * PCF_PROPERTY_SIZE )
    {
      error = FT_THROW( Invalid_Table );
      goto Bail;
    }

    /* the strings in the `strings' array are PostScript strings, */
    /* which can have a maximum length of 65536 characters each   */
    if ( string_size > 16777472 )   /* 256 * (65536 + 1) */
    {
      FT_TRACE0(( "pcf_get_properties:"
                  " loading only 16777472 bytes of strings array\n" ));
      string_size = 16777472;
    }

    /* allocate one more byte so that we have a final null byte */
    if ( FT_NEW_ARRAY( strings, string_size + 1 ) )
      goto Bail;

    error = FT_Stream_Read( stream, (FT_Byte*)strings, string_size );
    if ( error )
      goto Bail;

    if ( FT_NEW_ARRAY( properties, nprops ) )
      goto Bail;

    face->properties = properties;

    FT_TRACE4(( "\n" ));
    for ( i = 0; i < nprops; i++ )
    {
      FT_Long  name_offset = props[i].name;


      if ( ( name_offset < 0 )                     ||
           ( (FT_ULong)name_offset > string_size ) )
      {
        error = FT_THROW( Invalid_Offset );
        goto Bail;
      }

      if ( FT_STRDUP( properties[i].name, strings + name_offset ) )
        goto Bail;

      FT_TRACE4(( "  %s:", properties[i].name ));

      properties[i].isString = props[i].isString;

      if ( props[i].isString )
      {
        FT_Long  value_offset = props[i].value;


        if ( ( value_offset < 0 )                     ||
             ( (FT_ULong)value_offset > string_size ) )
        {
          error = FT_THROW( Invalid_Offset );
          goto Bail;
        }

        if ( FT_STRDUP( properties[i].value.atom, strings + value_offset ) )
          goto Bail;

        FT_TRACE4(( " `%s'\n", properties[i].value.atom ));
      }
      else
      {
        properties[i].value.l = props[i].value;

        FT_TRACE4(( " %d\n", properties[i].value.l ));
      }
    }

    error = FT_Err_Ok;

  Bail:
    FT_FREE( props );
    FT_FREE( strings );

    return error;
  }


  static FT_Error
  pcf_get_metrics( FT_Stream  stream,
                   PCF_Face   face )
  {
    FT_Error    error;
    FT_Memory   memory  = FT_FACE( face )->memory;
    FT_ULong    format, size;
    PCF_Metric  metrics = NULL;
    FT_ULong    nmetrics, orig_nmetrics, i;


    error = pcf_seek_to_table_type( stream,
                                    face->toc.tables,
                                    face->toc.count,
                                    PCF_METRICS,
                                    &format,
                                    &size );
    if ( error )
      return error;

    if ( FT_READ_ULONG_LE( format ) )
      goto Bail;

    FT_TRACE4(( "pcf_get_metrics:\n"
                "  format: 0x%lX (%s, %s)\n",
                format,
                PCF_BYTE_ORDER( format ) == MSBFirst ? "MSB" : "LSB",
                PCF_FORMAT_MATCH( format, PCF_COMPRESSED_METRICS ) ?
                  "compressed" : "uncompressed" ));

    if ( !PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT )     &&
         !PCF_FORMAT_MATCH( format, PCF_COMPRESSED_METRICS ) )
      return FT_THROW( Invalid_File_Format );

    if ( PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
    {
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
        (void)FT_READ_ULONG( orig_nmetrics );
      else
        (void)FT_READ_ULONG_LE( orig_nmetrics );
    }
    else
    {
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
        (void)FT_READ_USHORT( orig_nmetrics );
      else
        (void)FT_READ_USHORT_LE( orig_nmetrics );
    }
    if ( error )
      return FT_THROW( Invalid_File_Format );

    FT_TRACE4(( "  number of metrics: %ld\n", orig_nmetrics ));

    /* rough estimate */
    if ( PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
    {
      if ( orig_nmetrics > size / PCF_METRIC_SIZE )
        return FT_THROW( Invalid_Table );
    }
    else
    {
      if ( orig_nmetrics > size / PCF_COMPRESSED_METRIC_SIZE )
        return FT_THROW( Invalid_Table );
    }

    if ( !orig_nmetrics )
      return FT_THROW( Invalid_Table );

    /* PCF is a format from ancient times; Unicode was in its       */
    /* infancy, and widely used two-byte character sets for CJK     */
    /* scripts (Big 5, GB 2312, JIS X 0208, etc.) did have at most  */
    /* 15000 characters.  Even the more exotic CNS 11643 and CCCII  */
    /* standards, which were essentially three-byte character sets, */
    /* provided less then 65536 assigned characters.                */
    /*                                                              */
    /* While technically possible to have a larger number of glyphs */
    /* in PCF files, we thus limit the number to 65536.             */
    if ( orig_nmetrics > 65536 )
    {
      FT_TRACE0(( "pcf_get_metrics:"
                  " only loading first 65536 metrics\n" ));
      nmetrics = 65536;
    }
    else
      nmetrics = orig_nmetrics;

    face->nmetrics = nmetrics;

    if ( FT_NEW_ARRAY( face->metrics, nmetrics ) )
      return error;

    metrics = face->metrics;

    FT_TRACE4(( "\n" ));
    for ( i = 0; i < nmetrics; i++, metrics++ )
    {
      FT_TRACE5(( "  idx %ld:", i ));
      error = pcf_get_metric( stream, format, metrics );

      metrics->bits = 0;

      if ( error )
        break;

      /* sanity checks -- those values are used in `PCF_Glyph_Load' to     */
      /* compute a glyph's bitmap dimensions, thus setting them to zero in */
      /* case of an error disables this particular glyph only              */
      if ( metrics->rightSideBearing < metrics->leftSideBearing ||
           metrics->ascent < -metrics->descent                  )
      {
        metrics->characterWidth   = 0;
        metrics->leftSideBearing  = 0;
        metrics->rightSideBearing = 0;
        metrics->ascent           = 0;
        metrics->descent          = 0;

        FT_TRACE0(( "pcf_get_metrics:"
                    " invalid metrics for glyph %d\n", i ));
      }
    }

    if ( error )
      FT_FREE( face->metrics );

  Bail:
    return error;
  }


  static FT_Error
  pcf_get_bitmaps( FT_Stream  stream,
                   PCF_Face   face )
  {
    FT_Error   error;
    FT_Memory  memory  = FT_FACE( face )->memory;
    FT_Long*   offsets = NULL;
    FT_Long    bitmapSizes[GLYPHPADOPTIONS];
    FT_ULong   format, size;
    FT_ULong   nbitmaps, orig_nbitmaps, i, sizebitmaps = 0;


    error = pcf_seek_to_table_type( stream,
                                    face->toc.tables,
                                    face->toc.count,
                                    PCF_BITMAPS,
                                    &format,
                                    &size );
    if ( error )
      return error;

    error = FT_Stream_EnterFrame( stream, 8 );
    if ( error )
      return error;

    format = FT_GET_ULONG_LE();
    if ( PCF_BYTE_ORDER( format ) == MSBFirst )
      orig_nbitmaps = FT_GET_ULONG();
    else
      orig_nbitmaps = FT_GET_ULONG_LE();

    FT_Stream_ExitFrame( stream );

    FT_TRACE4(( "pcf_get_bitmaps:\n"
                "  format: 0x%lX\n"
                "          (%s, %s,\n"
                "           padding=%d bits, scanning=%d bits)\n",
                format,
                PCF_BYTE_ORDER( format ) == MSBFirst
                  ? "most significant byte first"
                  : "least significant byte first",
                PCF_BIT_ORDER( format ) == MSBFirst
                  ? "most significant bit first"
                  : "least significant bit first",
                8 << PCF_GLYPH_PAD_INDEX( format ),
                8 << PCF_SCAN_UNIT_INDEX( format ) ));

    if ( !PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
      return FT_THROW( Invalid_File_Format );

    FT_TRACE4(( "  number of bitmaps: %ld\n", orig_nbitmaps ));

    /* see comment in `pcf_get_metrics' */
    if ( orig_nbitmaps > 65536 )
    {
      FT_TRACE0(( "pcf_get_bitmaps:"
                  " only loading first 65536 bitmaps\n" ));
      nbitmaps = 65536;
    }
    else
      nbitmaps = orig_nbitmaps;

    if ( nbitmaps != face->nmetrics )
      return FT_THROW( Invalid_File_Format );

    if ( FT_NEW_ARRAY( offsets, nbitmaps ) )
      return error;

    FT_TRACE5(( "\n" ));
    for ( i = 0; i < nbitmaps; i++ )
    {
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
        (void)FT_READ_LONG( offsets[i] );
      else
        (void)FT_READ_LONG_LE( offsets[i] );

      FT_TRACE5(( "  bitmap %ld: offset %ld (0x%lX)\n",
                  i, offsets[i], offsets[i] ));
    }
    if ( error )
      goto Bail;

    for ( i = 0; i < GLYPHPADOPTIONS; i++ )
    {
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
        (void)FT_READ_LONG( bitmapSizes[i] );
      else
        (void)FT_READ_LONG_LE( bitmapSizes[i] );
      if ( error )
        goto Bail;

      sizebitmaps = (FT_ULong)bitmapSizes[PCF_GLYPH_PAD_INDEX( format )];

      FT_TRACE4(( "  %ld-bit padding implies a size of %ld\n",
                  8 << i, bitmapSizes[i] ));
    }

    FT_TRACE4(( "  %ld bitmaps, using %ld-bit padding\n",
                nbitmaps,
                8 << PCF_GLYPH_PAD_INDEX( format ) ));
    FT_TRACE4(( "  bitmap size: %ld\n", sizebitmaps ));

    FT_UNUSED( sizebitmaps );       /* only used for debugging */

    /* right now, we only check the bitmap offsets; */
    /* actual bitmaps are only loaded on demand     */
    for ( i = 0; i < nbitmaps; i++ )
    {
      /* rough estimate */
      if ( ( offsets[i] < 0 )              ||
           ( (FT_ULong)offsets[i] > size ) )
      {
        FT_TRACE0(( "pcf_get_bitmaps:"
                    " invalid offset to bitmap data of glyph %ld\n", i ));
      }
      else
        face->metrics[i].bits = stream->pos + (FT_ULong)offsets[i];
    }

    face->bitmapsFormat = format;

  Bail:
    FT_FREE( offsets );
    return error;
  }


  static FT_Error
  pcf_get_encodings( FT_Stream  stream,
                     PCF_Face   face )
  {
    FT_Error      error;
    FT_Memory     memory = FT_FACE( face )->memory;
    FT_ULong      format, size;
    int           firstCol, lastCol;
    int           firstRow, lastRow;
    FT_ULong      nencoding;
    FT_UShort     encodingOffset;
    int           i, j;
    FT_ULong      k;
    PCF_Encoding  encoding = NULL;


    error = pcf_seek_to_table_type( stream,
                                    face->toc.tables,
                                    face->toc.count,
                                    PCF_BDF_ENCODINGS,
                                    &format,
                                    &size );
    if ( error )
      return error;

    error = FT_Stream_EnterFrame( stream, 14 );
    if ( error )
      return error;

    format = FT_GET_ULONG_LE();

    if ( PCF_BYTE_ORDER( format ) == MSBFirst )
    {
      firstCol          = FT_GET_SHORT();
      lastCol           = FT_GET_SHORT();
      firstRow          = FT_GET_SHORT();
      lastRow           = FT_GET_SHORT();
      face->defaultChar = FT_GET_SHORT();
    }
    else
    {
      firstCol          = FT_GET_SHORT_LE();
      lastCol           = FT_GET_SHORT_LE();
      firstRow          = FT_GET_SHORT_LE();
      lastRow           = FT_GET_SHORT_LE();
      face->defaultChar = FT_GET_SHORT_LE();
    }

    FT_Stream_ExitFrame( stream );

    FT_TRACE4(( "pcf_get_encodings:\n"
                "  format: 0x%lX (%s)\n",
                format,
                PCF_BYTE_ORDER( format ) == MSBFirst ? "MSB" : "LSB" ));

    if ( !PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
      return FT_THROW( Invalid_File_Format );

    FT_TRACE4(( "  firstCol 0x%X, lastCol 0x%X\n"
                "  firstRow 0x%X, lastRow 0x%X\n",
                firstCol, lastCol,
                firstRow, lastRow ));

    /* sanity checks; we limit numbers of rows and columns to 256 */
    if ( firstCol < 0       ||
         firstCol > lastCol ||
         lastCol  > 0xFF    ||
         firstRow < 0       ||
         firstRow > lastRow ||
         lastRow  > 0xFF    )
      return FT_THROW( Invalid_Table );

    nencoding = (FT_ULong)( lastCol - firstCol + 1 ) *
                (FT_ULong)( lastRow - firstRow + 1 );

    if ( FT_NEW_ARRAY( encoding, nencoding ) )
      return error;

    error = FT_Stream_EnterFrame( stream, 2 * nencoding );
    if ( error )
      goto Bail;

    FT_TRACE5(( "\n" ));

    k = 0;
    for ( i = firstRow; i <= lastRow; i++ )
    {
      for ( j = firstCol; j <= lastCol; j++ )
      {
        /* X11's reference implementation uses the equivalent to  */
        /* `FT_GET_SHORT', however PCF fonts with more than 32768 */
        /* characters (e.g. `unifont.pcf') clearly show that an   */
        /* unsigned value is needed.                              */
        if ( PCF_BYTE_ORDER( format ) == MSBFirst )
          encodingOffset = FT_GET_USHORT();
        else
          encodingOffset = FT_GET_USHORT_LE();

        if ( encodingOffset != 0xFFFFU )
        {
          encoding[k].enc   = i * 256 + j;
          encoding[k].glyph = encodingOffset;

          FT_TRACE5(( "  code %d (0x%04X): idx %d\n",
                      encoding[k].enc, encoding[k].enc, encoding[k].glyph ));

          k++;
        }
      }
    }
    FT_Stream_ExitFrame( stream );

    if ( FT_RENEW_ARRAY( encoding, nencoding, k ) )
      goto Bail;

    face->nencodings = k;
    face->encodings  = encoding;

    return error;

  Bail:
    FT_FREE( encoding );
    return error;
  }


  static
  const FT_Frame_Field  pcf_accel_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_AccelRec

    FT_FRAME_START( 20 ),
      FT_FRAME_BYTE      ( noOverlap ),
      FT_FRAME_BYTE      ( constantMetrics ),
      FT_FRAME_BYTE      ( terminalFont ),
      FT_FRAME_BYTE      ( constantWidth ),
      FT_FRAME_BYTE      ( inkInside ),
      FT_FRAME_BYTE      ( inkMetrics ),
      FT_FRAME_BYTE      ( drawDirection ),
      FT_FRAME_SKIP_BYTES( 1 ),
      FT_FRAME_LONG_LE   ( fontAscent ),
      FT_FRAME_LONG_LE   ( fontDescent ),
      FT_FRAME_LONG_LE   ( maxOverlap ),
    FT_FRAME_END
  };


  static
  const FT_Frame_Field  pcf_accel_msb_header[] =
  {
#undef  FT_STRUCTURE
#define FT_STRUCTURE  PCF_AccelRec

    FT_FRAME_START( 20 ),
      FT_FRAME_BYTE      ( noOverlap ),
      FT_FRAME_BYTE      ( constantMetrics ),
      FT_FRAME_BYTE      ( terminalFont ),
      FT_FRAME_BYTE      ( constantWidth ),
      FT_FRAME_BYTE      ( inkInside ),
      FT_FRAME_BYTE      ( inkMetrics ),
      FT_FRAME_BYTE      ( drawDirection ),
      FT_FRAME_SKIP_BYTES( 1 ),
      FT_FRAME_LONG      ( fontAscent ),
      FT_FRAME_LONG      ( fontDescent ),
      FT_FRAME_LONG      ( maxOverlap ),
    FT_FRAME_END
  };


  static FT_Error
  pcf_get_accel( FT_Stream  stream,
                 PCF_Face   face,
                 FT_ULong   type )
  {
    FT_ULong   format, size;
    FT_Error   error;
    PCF_Accel  accel = &face->accel;


    error = pcf_seek_to_table_type( stream,
                                    face->toc.tables,
                                    face->toc.count,
                                    type,
                                    &format,
                                    &size );
    if ( error )
      goto Bail;

    if ( FT_READ_ULONG_LE( format ) )
      goto Bail;

    FT_TRACE4(( "pcf_get_accel%s:\n"
                "  format: 0x%lX (%s, %s)\n",
                type == PCF_BDF_ACCELERATORS ? " (getting BDF accelerators)"
                                             : "",
                format,
                PCF_BYTE_ORDER( format ) == MSBFirst ? "MSB" : "LSB",
                PCF_FORMAT_MATCH( format, PCF_ACCEL_W_INKBOUNDS ) ?
                  "accelerated" : "not accelerated" ));

    if ( !PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT )    &&
         !PCF_FORMAT_MATCH( format, PCF_ACCEL_W_INKBOUNDS ) )
      goto Bail;

    if ( PCF_BYTE_ORDER( format ) == MSBFirst )
    {
      if ( FT_STREAM_READ_FIELDS( pcf_accel_msb_header, accel ) )
        goto Bail;
    }
    else
    {
      if ( FT_STREAM_READ_FIELDS( pcf_accel_header, accel ) )
        goto Bail;
    }

    FT_TRACE5(( "  noOverlap=%s, constantMetrics=%s,"
                " terminalFont=%s, constantWidth=%s\n"
                "  inkInside=%s, inkMetrics=%s, drawDirection=%s\n"
                "  fontAscent=%ld, fontDescent=%ld, maxOverlap=%ld\n",
                accel->noOverlap ? "yes" : "no",
                accel->constantMetrics ? "yes" : "no",
                accel->terminalFont ? "yes" : "no",
                accel->constantWidth ? "yes" : "no",
                accel->inkInside ? "yes" : "no",
                accel->inkMetrics ? "yes" : "no",
                accel->drawDirection ? "RTL" : "LTR",
                accel->fontAscent,
                accel->fontDescent,
                accel->maxOverlap ));

    FT_TRACE5(( "  minbounds:" ));
    error = pcf_get_metric( stream,
                            format & ( ~PCF_FORMAT_MASK ),
                            &(accel->minbounds) );
    if ( error )
      goto Bail;

    FT_TRACE5(( "  maxbounds:" ));
    error = pcf_get_metric( stream,
                            format & ( ~PCF_FORMAT_MASK ),
                            &(accel->maxbounds) );
    if ( error )
      goto Bail;

    if ( PCF_FORMAT_MATCH( format, PCF_ACCEL_W_INKBOUNDS ) )
    {
      FT_TRACE5(( "  ink minbounds:" ));
      error = pcf_get_metric( stream,
                              format & ( ~PCF_FORMAT_MASK ),
                              &(accel->ink_minbounds) );
      if ( error )
        goto Bail;

      FT_TRACE5(( "  ink maxbounds:" ));
      error = pcf_get_metric( stream,
                              format & ( ~PCF_FORMAT_MASK ),
                              &(accel->ink_maxbounds) );
      if ( error )
        goto Bail;
    }
    else
    {
      accel->ink_minbounds = accel->minbounds;
      accel->ink_maxbounds = accel->maxbounds;
    }

  Bail:
    return error;
  }


  static FT_Error
  pcf_interpret_style( PCF_Face  pcf )
  {
    FT_Error   error  = FT_Err_Ok;
    FT_Face    face   = FT_FACE( pcf );
    FT_Memory  memory = face->memory;

    PCF_Property  prop;

    size_t  nn, len;
    char*   strings[4] = { NULL, NULL, NULL, NULL };
    size_t  lengths[4];


    face->style_flags = 0;

    prop = pcf_find_property( pcf, "SLANT" );
    if ( prop && prop->isString                                       &&
         ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' ||
           *(prop->value.atom) == 'I' || *(prop->value.atom) == 'i' ) )
    {
      face->style_flags |= FT_STYLE_FLAG_ITALIC;
      strings[2] = ( *(prop->value.atom) == 'O' ||
                     *(prop->value.atom) == 'o' ) ? (char *)"Oblique"
                                                  : (char *)"Italic";
    }

    prop = pcf_find_property( pcf, "WEIGHT_NAME" );
    if ( prop && prop->isString                                       &&
         ( *(prop->value.atom) == 'B' || *(prop->value.atom) == 'b' ) )
    {
      face->style_flags |= FT_STYLE_FLAG_BOLD;
      strings[1] = (char*)"Bold";
    }

    prop = pcf_find_property( pcf, "SETWIDTH_NAME" );
    if ( prop && prop->isString                                        &&
         *(prop->value.atom)                                           &&
         !( *(prop->value.atom) == 'N' || *(prop->value.atom) == 'n' ) )
      strings[3] = (char*)( prop->value.atom );

    prop = pcf_find_property( pcf, "ADD_STYLE_NAME" );
    if ( prop && prop->isString                                        &&
         *(prop->value.atom)                                           &&
         !( *(prop->value.atom) == 'N' || *(prop->value.atom) == 'n' ) )
      strings[0] = (char*)( prop->value.atom );

    for ( len = 0, nn = 0; nn < 4; nn++ )
    {
      lengths[nn] = 0;
      if ( strings[nn] )
      {
        lengths[nn] = ft_strlen( strings[nn] );
        len        += lengths[nn] + 1;
      }
    }

    if ( len == 0 )
    {
      strings[0] = (char*)"Regular";
      lengths[0] = ft_strlen( strings[0] );
      len        = lengths[0] + 1;
    }

    {
      char*  s;


      if ( FT_ALLOC( face->style_name, len ) )
        return error;

      s = face->style_name;

      for ( nn = 0; nn < 4; nn++ )
      {
        char*  src = strings[nn];


        len = lengths[nn];

        if ( !src )
          continue;

        /* separate elements with a space */
        if ( s != face->style_name )
          *s++ = ' ';

        ft_memcpy( s, src, len );

        /* need to convert spaces to dashes for */
        /* add_style_name and setwidth_name     */
        if ( nn == 0 || nn == 3 )
        {
          size_t  mm;


          for ( mm = 0; mm < len; mm++ )
            if ( s[mm] == ' ' )
              s[mm] = '-';
        }

        s += len;
      }
      *s = 0;
    }

    return error;
  }


  FT_LOCAL_DEF( FT_Error )
  pcf_load_font( FT_Stream  stream,
                 PCF_Face   face,
                 FT_Long    face_index )
  {
    FT_Face    root   = FT_FACE( face );
    FT_Error   error;
    FT_Memory  memory = FT_FACE( face )->memory;
    FT_Bool    hasBDFAccelerators;


    error = pcf_read_TOC( stream, face );
    if ( error )
      goto Exit;

    root->num_faces  = 1;
    root->face_index = 0;

    /* If we are performing a simple font format check, exit immediately. */
    if ( face_index < 0 )
      return FT_Err_Ok;

    error = pcf_get_properties( stream, face );
    if ( error )
      goto Exit;

    /* Use the old accelerators if no BDF accelerators are in the file. */
    hasBDFAccelerators = pcf_has_table_type( face->toc.tables,
                                             face->toc.count,
                                             PCF_BDF_ACCELERATORS );
    if ( !hasBDFAccelerators )
    {
      error = pcf_get_accel( stream, face, PCF_ACCELERATORS );
      if ( error )
        goto Exit;
    }

    /* metrics */
    error = pcf_get_metrics( stream, face );
    if ( error )
      goto Exit;

    /* bitmaps */
    error = pcf_get_bitmaps( stream, face );
    if ( error )
      goto Exit;

    /* encodings */
    error = pcf_get_encodings( stream, face );
    if ( error )
      goto Exit;

    /* BDF style accelerators (i.e. bounds based on encoded glyphs) */
    if ( hasBDFAccelerators )
    {
      error = pcf_get_accel( stream, face, PCF_BDF_ACCELERATORS );
      if ( error )
        goto Exit;
    }

    /* XXX: TO DO: inkmetrics and glyph_names are missing */

    /* now construct the face object */
    {
      PCF_Property  prop;


      root->face_flags |= FT_FACE_FLAG_FIXED_SIZES |
                          FT_FACE_FLAG_HORIZONTAL  |
                          FT_FACE_FLAG_FAST_GLYPHS;

      if ( face->accel.constantWidth )
        root->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;

      if ( FT_SET_ERROR( pcf_interpret_style( face ) ) )
        goto Exit;

      prop = pcf_find_property( face, "FAMILY_NAME" );
      if ( prop && prop->isString )
      {

#ifdef PCF_CONFIG_OPTION_LONG_FAMILY_NAMES

        PCF_Driver  driver = (PCF_Driver)FT_FACE_DRIVER( face );


        if ( !driver->no_long_family_names )
        {
          /* Prepend the foundry name plus a space to the family name.     */
          /* There are many fonts just called `Fixed' which look           */
          /* completely different, and which have nothing to do with each  */
          /* other.  When selecting `Fixed' in KDE or Gnome one gets       */
          /* results that appear rather random, the style changes often if */
          /* one changes the size and one cannot select some fonts at all. */
          /*                                                               */
          /* We also check whether we have `wide' characters; all put      */
          /* together, we get family names like `Sony Fixed' or `Misc      */
          /* Fixed Wide'.                                                  */

          PCF_Property  foundry_prop, point_size_prop, average_width_prop;

          int  l    = ft_strlen( prop->value.atom ) + 1;
          int  wide = 0;


          foundry_prop       = pcf_find_property( face, "FOUNDRY" );
          point_size_prop    = pcf_find_property( face, "POINT_SIZE" );
          average_width_prop = pcf_find_property( face, "AVERAGE_WIDTH" );

          if ( point_size_prop && average_width_prop )
          {
            if ( average_width_prop->value.l >= point_size_prop->value.l )
            {
              /* This font is at least square shaped or even wider */
              wide = 1;
              l   += ft_strlen( " Wide" );
            }
          }

          if ( foundry_prop && foundry_prop->isString )
          {
            l += ft_strlen( foundry_prop->value.atom ) + 1;

            if ( FT_NEW_ARRAY( root->family_name, l ) )
              goto Exit;

            ft_strcpy( root->family_name, foundry_prop->value.atom );
            ft_strcat( root->family_name, " " );
            ft_strcat( root->family_name, prop->value.atom );
          }
          else
          {
            if ( FT_NEW_ARRAY( root->family_name, l ) )
              goto Exit;

            ft_strcpy( root->family_name, prop->value.atom );
          }

          if ( wide )
            ft_strcat( root->family_name, " Wide" );
        }
        else

#endif /* PCF_CONFIG_OPTION_LONG_FAMILY_NAMES */

        {
          if ( FT_STRDUP( root->family_name, prop->value.atom ) )
            goto Exit;
        }
      }
      else
        root->family_name = NULL;

      /*
       * Note: We shift all glyph indices by +1 since we must
       * respect the convention that glyph 0 always corresponds
       * to the `missing glyph'.
       *
       * This implies bumping the number of `available' glyphs by 1.
       */
      root->num_glyphs = (FT_Long)( face->nmetrics + 1 );

      root->num_fixed_sizes = 1;
      if ( FT_NEW_ARRAY( root->available_sizes, 1 ) )
        goto Exit;

      {
        FT_Bitmap_Size*  bsize = root->available_sizes;
        FT_Short         resolution_x = 0, resolution_y = 0;


        FT_ZERO( bsize );

        /* for simplicity, we take absolute values of integer properties */

#if 0
        bsize->height = face->accel.maxbounds.ascent << 6;
#endif

#ifdef FT_DEBUG_LEVEL_TRACE
        if ( face->accel.fontAscent + face->accel.fontDescent < 0 )
          FT_TRACE0(( "pcf_load_font: negative height\n" ));
#endif
        bsize->height = FT_ABS( (FT_Short)( face->accel.fontAscent +
                                            face->accel.fontDescent ) );

        prop = pcf_find_property( face, "AVERAGE_WIDTH" );
        if ( prop )
        {
#ifdef FT_DEBUG_LEVEL_TRACE
          if ( prop->value.l < 0 )
            FT_TRACE0(( "pcf_load_font: negative average width\n" ));
#endif
          bsize->width = FT_ABS( (FT_Short)( ( prop->value.l ) + 5 ) / 10 );
        }
        else
          bsize->width = (FT_Short)FT_MulDiv( bsize->height, 2, 3 );

        prop = pcf_find_property( face, "POINT_SIZE" );
        if ( prop )
        {
#ifdef FT_DEBUG_LEVEL_TRACE
          if ( prop->value.l < 0 )
            FT_TRACE0(( "pcf_load_font: negative point size\n" ));
#endif
          /* convert from 722.7 decipoints to 72 points per inch */
          bsize->size = FT_MulDiv( FT_ABS( prop->value.l ),
                                   64 * 7200,
                                   72270L );
        }

        prop = pcf_find_property( face, "PIXEL_SIZE" );
        if ( prop )
        {
#ifdef FT_DEBUG_LEVEL_TRACE
          if ( prop->value.l < 0 )
            FT_TRACE0(( "pcf_load_font: negative pixel size\n" ));
#endif
          bsize->y_ppem = FT_ABS( (FT_Short)prop->value.l ) << 6;
        }

        prop = pcf_find_property( face, "RESOLUTION_X" );
        if ( prop )
        {
#ifdef FT_DEBUG_LEVEL_TRACE
          if ( prop->value.l < 0 )
            FT_TRACE0(( "pcf_load_font: negative X resolution\n" ));
#endif
          resolution_x = FT_ABS( (FT_Short)prop->value.l );
        }

        prop = pcf_find_property( face, "RESOLUTION_Y" );
        if ( prop )
        {
#ifdef FT_DEBUG_LEVEL_TRACE
          if ( prop->value.l < 0 )
            FT_TRACE0(( "pcf_load_font: negative Y resolution\n" ));
#endif
          resolution_y = FT_ABS( (FT_Short)prop->value.l );
        }

        if ( bsize->y_ppem == 0 )
        {
          bsize->y_ppem = bsize->size;
          if ( resolution_y )
            bsize->y_ppem = FT_MulDiv( bsize->y_ppem, resolution_y, 72 );
        }
        if ( resolution_x && resolution_y )
          bsize->x_ppem = FT_MulDiv( bsize->y_ppem,
                                     resolution_x,
                                     resolution_y );
        else
          bsize->x_ppem = bsize->y_ppem;
      }

      /* set up charset */
      {
        PCF_Property  charset_registry, charset_encoding;


        charset_registry = pcf_find_property( face, "CHARSET_REGISTRY" );
        charset_encoding = pcf_find_property( face, "CHARSET_ENCODING" );

        if ( charset_registry && charset_registry->isString &&
             charset_encoding && charset_encoding->isString )
        {
          if ( FT_STRDUP( face->charset_encoding,
                          charset_encoding->value.atom ) ||
               FT_STRDUP( face->charset_registry,
                          charset_registry->value.atom ) )
            goto Exit;
        }
      }
    }

  Exit:
    if ( error )
    {
      /* This is done to respect the behaviour of the original */
      /* PCF font driver.                                      */
      error = FT_THROW( Invalid_File_Format );
    }

    return error;
  }


/* END */
@


1.18
log
@
Update to FreeType-2.7.1

i386 bulk build by sthen@@
amd64 bulk build by naddy@@

OK matthieu@@
@
text
@d53 9
a61 2
    "prop", "accl", "mtrcs", "bmps", "imtrcs",
    "enc", "swidth", "names", "accel"
d119 4
a122 6
    /* We need 16 bytes per TOC entry.  Additionally, as a */
    /* heuristic protection against gzip bombs (i.e., very */
    /* small input files that expand to insanely large     */
    /* files), we limit the number of TOC entries to 1024. */
    if ( toc->count > stream->size >> 4 ||
         toc->count > 1024              )
d127 2
a128 2
                  FT_MIN( stream->size >> 4, 1024 ) ));
      toc->count = FT_MIN( stream->size >> 4, 1024 );
d132 1
a132 1
      return FT_THROW( Out_Of_Memory );
d245 2
a246 2
        FT_TRACE4(( "  %d: type=%s, format=0x%X, "
                    "size=%ld (0x%lX), offset=%ld (0x%lX)\n",
d356 11
d485 1
a485 1
    FT_ULong           nprops, i;
d505 4
a508 3
    FT_TRACE4(( "pcf_get_properties:\n" ));

    FT_TRACE4(( "  format = %ld\n", format ));
d514 1
a514 1
      (void)FT_READ_ULONG( nprops );
d516 1
a516 1
      (void)FT_READ_ULONG_LE( nprops );
d520 1
a520 4
    FT_TRACE4(( "  nprop = %d (truncate %d props)\n",
                (int)nprops, nprops - (FT_ULong)(int)nprops ));

    nprops = (FT_ULong)(int)nprops;
d523 1
a523 1
    if ( nprops > size / PCF_PROPERTY_SIZE )
d529 13
d561 9
d575 1
a575 1
    if ( nprops & 3 )
d577 1
a577 1
      i = 4 - ( nprops & 3 );
d592 1
a592 1
    FT_TRACE4(( "  string_size = %ld\n", string_size ));
d595 1
a595 1
    if ( string_size > size - nprops * PCF_PROPERTY_SIZE )
d601 9
d623 1
d686 1
a686 1
    FT_ULong    nmetrics, i;
d701 7
d715 1
a715 1
        (void)FT_READ_ULONG( nmetrics );
d717 1
a717 1
        (void)FT_READ_ULONG_LE( nmetrics );
d722 1
a722 1
        (void)FT_READ_USHORT( nmetrics );
d724 1
a724 1
        (void)FT_READ_USHORT_LE( nmetrics );
d729 1
a729 8
    face->nmetrics = nmetrics;

    if ( !nmetrics )
      return FT_THROW( Invalid_Table );

    FT_TRACE4(( "pcf_get_metrics:\n" ));

    FT_TRACE4(( "  number of metrics: %d\n", nmetrics ));
d734 1
a734 1
      if ( nmetrics > size / PCF_METRIC_SIZE )
d739 1
a739 1
      if ( nmetrics > size / PCF_COMPRESSED_METRIC_SIZE )
d743 23
d767 1
a767 1
      return FT_THROW( Out_Of_Memory );
d770 2
d774 1
a778 10
      FT_TRACE5(( "  idx %d: width=%d, "
                  "lsb=%d, rsb=%d, ascent=%d, descent=%d, swidth=%d\n",
                  i,
                  metrics->characterWidth,
                  metrics->leftSideBearing,
                  metrics->rightSideBearing,
                  metrics->ascent,
                  metrics->descent,
                  metrics->attributes ));

d786 1
a786 1
           metrics->ascent + metrics->descent < 0               )
d816 1
a816 1
    FT_ULong   nbitmaps, i, sizebitmaps = 0;
d834 1
a834 1
      nbitmaps  = FT_GET_ULONG();
d836 1
a836 1
      nbitmaps  = FT_GET_ULONG_LE();
d840 14
d857 1
a857 1
    FT_TRACE4(( "pcf_get_bitmaps:\n" ));
d859 9
a867 1
    FT_TRACE4(( "  number of bitmaps: %d\n", nbitmaps ));
d875 1
d883 1
a883 1
      FT_TRACE5(( "  bitmap %d: offset %ld (0x%lX)\n",
d900 2
a901 2
      FT_TRACE4(( "  padding %d implies a size of %ld\n",
                  i, bitmapSizes[i] ));
d904 1
a904 1
    FT_TRACE4(( "  %d bitmaps, padding index %ld\n",
d906 2
a907 2
                PCF_GLYPH_PAD_INDEX( format ) ));
    FT_TRACE4(( "  bitmap size = %d\n", sizebitmaps ));
d911 2
d920 1
a920 1
                    " invalid offset to bitmap data of glyph %d\n", i ));
d984 5
d992 6
a997 1
    /* sanity checks */
a1005 5
    FT_TRACE4(( "pdf_get_encodings:\n" ));

    FT_TRACE4(( "  firstCol %d, lastCol %d, firstRow %d, lastRow %d\n",
                firstCol, lastCol, firstRow, lastRow ));

d1010 1
a1010 1
      return FT_THROW( Out_Of_Memory );
d1016 2
d1126 9
d1150 16
d1172 1
d1181 1
d1188 1
d1197 1
a1197 1
      accel->ink_minbounds = accel->minbounds; /* I'm not sure about this */
a1395 19
        /* Prepend the foundry name plus a space to the family name.      */
        /* There are many fonts just called `Fixed' which look completely */
        /* different, and which have nothing to do with each other.  When */
        /* selecting `Fixed' in KDE or Gnome one gets results that appear */
        /* rather random, the style changes often if one changes the size */
        /* and one cannot select some fonts at all.                       */
        /*                                                                */
        /* We also check whether we have `wide' characters; all put       */
        /* together, we get family names like `Sony Fixed' or `Misc Fixed */
        /* Wide'.                                                         */
        PCF_Property  foundry_prop, point_size_prop, average_width_prop;

        int  l    = ft_strlen( prop->value.atom ) + 1;
        int  wide = 0;


        foundry_prop       = pcf_find_property( face, "FOUNDRY" );
        point_size_prop    = pcf_find_property( face, "POINT_SIZE" );
        average_width_prop = pcf_find_property( face, "AVERAGE_WIDTH" );
d1397 6
a1402 1
        if ( point_size_prop && average_width_prop )
d1404 22
a1425 1
          if ( average_width_prop->value.l >= point_size_prop->value.l )
d1427 6
a1432 3
            /* This font is at least square shaped or even wider */
            wide = 1;
            l   += ft_strlen( " Wide" );
a1433 1
        }
d1435 15
a1449 3
        if ( foundry_prop && foundry_prop->isString )
        {
          l += ft_strlen( foundry_prop->value.atom ) + 1;
d1451 2
a1452 2
          if ( FT_NEW_ARRAY( root->family_name, l ) )
            goto Exit;
d1454 2
a1455 3
          ft_strcpy( root->family_name, foundry_prop->value.atom );
          ft_strcat( root->family_name, " " );
          ft_strcat( root->family_name, prop->value.atom );
d1458 3
d1462 1
a1462 1
          if ( FT_NEW_ARRAY( root->family_name, l ) )
a1463 2

          ft_strcpy( root->family_name, prop->value.atom );
a1464 3

        if ( wide )
          ft_strcat( root->family_name, " Wide" );
@


1.17
log
@
Update to FreeType 2.6.5

ok matthieu@@
@
text
@d112 6
a117 2
    /* we need 16 bytes per TOC entry */
    if ( toc->count > stream->size >> 4 )
d121 3
a123 2
                  toc->count, stream->size >> 4 ));
      toc->count = stream->size >> 4;
d327 1
a327 1
      fields = PCF_BYTE_ORDER( format ) == MSBFirst
d1164 1
a1164 1
        if ( src == NULL )
d1268 2
a1269 2
      if ( ( error = pcf_interpret_style( face ) ) != 0 )
         goto Exit;
d1274 51
a1324 2
        if ( FT_STRDUP( root->family_name, prop->value.atom ) )
          goto Exit;
d1347 1
a1347 1
        FT_MEM_ZERO( bsize, sizeof ( FT_Bitmap_Size ) );
@


1.16
log
@
Bugfixing update to freetype-2.6.2

Tested on amd64, i386, macppc, sparc64, loongson and compile-tested
on arm by matthieu@@
Also tested in a ports bulk build by naddy@@

OK matthieu@@
@
text
@d445 1
a445 1
    for ( i = 0 ; i < face->nprops && !found; i++ )
d852 1
a852 1
    int           encodingOffset;
d924 4
d929 1
a929 1
          encodingOffset = FT_GET_SHORT();
d931 1
a931 1
          encodingOffset = FT_GET_SHORT_LE();
d933 1
a933 1
        if ( encodingOffset > -1 )
d936 1
a936 1
          encoding[k].glyph = (FT_UShort)encodingOffset;
@


1.15
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d105 2
a106 3
    if ( toc->version != PCF_FILE_VERSION                 ||
         toc->count   >  FT_ARRAY_MAX( face->toc.tables ) ||
         toc->count   == 0                                )
d109 12
d1187 2
a1188 1
                 PCF_Face   face )
d1190 1
d1200 7
a1248 1
      FT_Face       root = FT_FACE( face );
a1250 3

      root->num_faces  = 1;
      root->face_index = 0;
@


1.14
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d1275 2
d1280 7
a1286 2
        bsize->height = (FT_Short)( face->accel.fontAscent +
                                    face->accel.fontDescent );
d1290 7
a1296 1
          bsize->width = (FT_Short)( ( prop->value.l + 5 ) / 10 );
d1298 1
a1298 1
          bsize->width = (FT_Short)( bsize->height * 2/3 );
d1302 5
d1308 4
a1311 2
          bsize->size =
            (FT_Pos)( ( prop->value.l * 64 * 7200 + 36135L ) / 72270L );
d1315 7
a1321 1
          bsize->y_ppem = (FT_Short)prop->value.l << 6;
d1325 7
a1331 1
          resolution_x = (FT_Short)prop->value.l;
d1335 7
a1341 1
          resolution_y = (FT_Short)prop->value.l;
d1347 1
a1347 1
            bsize->y_ppem = bsize->y_ppem * resolution_y / 72;
d1350 3
a1352 1
          bsize->x_ppem = bsize->y_ppem * resolution_x / resolution_y;
@


1.13
log
@
Bugfixing update to freetype-2.5.5

ok matthieu@@
@
text
@d451 1
a451 1
    PCF_ParseProperty  props      = 0;
d458 1
a458 1
    FT_String*         strings    = 0;
d488 1
a488 1
                (int)nprops, nprops - (int)nprops ));
d490 1
a490 1
    nprops = (int)nprops;
d623 1
a623 1
    PCF_Metric  metrics = 0;
d769 1
a769 2
    /* XXX: PCF_Face->nmetrics is signed FT_Long, see pcf.h */
    if ( face->nmetrics < 0 || nbitmaps != (FT_ULong)face->nmetrics )
d797 1
a797 1
      sizebitmaps = bitmapSizes[PCF_GLYPH_PAD_INDEX( format )];
d799 2
a800 1
      FT_TRACE4(( "  padding %d implies a size of %ld\n", i, bitmapSizes[i] ));
d820 1
a820 1
        face->metrics[i].bits = stream->pos + offsets[i];
d840 4
a843 2
    int           nencoding, encodingOffset;
    int           i, j, k;
d898 2
a899 1
    nencoding = ( lastCol - firstCol + 1 ) * ( lastRow - firstRow + 1 );
d918 1
a918 1
        if ( encodingOffset != -1 )
d921 1
a921 1
          encoding[k].glyph = (FT_Short)encodingOffset;
d1262 1
a1262 1
      root->num_glyphs = face->nmetrics + 1;
d1319 1
a1319 1
        PCF_Property  charset_registry = 0, charset_encoding = 0;
@


1.12
log
@
Update to freetype-2.5.4

ports bulk build by landry@@

OK matthieu@@
@
text
@d5 1
a5 1
  Copyright 2000-2010, 2012, 2013 by
d81 1
a81 1
      FT_FRAME_ULONG_LE( size ),
d98 1
d100 3
a102 2
    if ( FT_STREAM_SEEK ( 0 )                          ||
         FT_STREAM_READ_FIELDS ( pcf_toc_header, toc ) )
d159 21
a179 2
    /* we now check whether the `size' and `offset' values are reasonable: */
    /* `offset' + `size' must not exceed the stream size                   */
d181 3
a183 1
    for ( n = 0; n < toc->count; n++ )
d186 2
a187 2
      if ( ( tables->size   > stream->size                ) ||
           ( tables->offset > stream->size - tables->size ) )
d195 10
d769 2
a770 2
    /* XXX: PCF_Face->nmetrics is singed FT_Long, see pcf.h */
    if ( face->nmetrics < 0 || nbitmaps != ( FT_ULong )face->nmetrics )
@


1.11
log
@
Security/bugfixing update to freetype-2.5.3, featuring a fix for a
vulnerability in the CFF driver (CVE-2014-2240) and assorted minor
fixes.

ok matthieu@@
@
text
@d147 4
a150 1
          return FT_THROW( Invalid_Offset );
d157 15
d652 1
a652 1
    for ( i = 0; i < nmetrics; i++ )
d654 1
a654 1
      error = pcf_get_metric( stream, format, metrics + i );
d656 1
a656 1
      metrics[i].bits = 0;
d661 6
a666 6
                  ( metrics + i )->characterWidth,
                  ( metrics + i )->leftSideBearing,
                  ( metrics + i )->rightSideBearing,
                  ( metrics + i )->ascent,
                  ( metrics + i )->descent,
                  ( metrics + i )->attributes ));
d670 16
d848 9
@


1.11.2.1
log
@backport fixes from freetype 2.5.5 for malformed fonts.
fixes dug out of ubuntu by dcoppa@@
@
text
@d81 1
a81 1
      FT_FRAME_ULONG_LE( size ),   /* rounded up to a multiple of 4 */
a97 1
    FT_ULong   size;
d99 2
a100 3

    if ( FT_STREAM_SEEK( 0 )                          ||
         FT_STREAM_READ_FIELDS( pcf_toc_header, toc ) )
a153 46
    /*
     *  We now check whether the `size' and `offset' values are reasonable:
     *  `offset' + `size' must not exceed the stream size.
     *
     *  Note, however, that X11's `pcfWriteFont' routine (used by the
     *  `bdftopcf' program to create PDF font files) has two special
     *  features.
     *
     *  - It always assigns the accelerator table a size of 100 bytes in the
     *    TOC, regardless of its real size, which can vary between 34 and 72
     *    bytes.
     *
     *  - Due to the way the routine is designed, it ships out the last font
     *    table with its real size, ignoring the TOC's size value.  Since
     *    the TOC size values are always rounded up to a multiple of 4, the
     *    difference can be up to three bytes for all tables except the
     *    accelerator table, for which the difference can be as large as 66
     *    bytes.
     *
     */

    tables = face->toc.tables;
    size   = stream->size;

    for ( n = 0; n < toc->count - 1; n++ )
    {
      /* we need two checks to avoid overflow */
      if ( ( tables->size   > size                ) ||
           ( tables->offset > size - tables->size ) )
      {
        error = FT_THROW( Invalid_Table );
        goto Exit;
      }
      tables++;
    }

    /* only check `tables->offset' for last table element ... */
    if ( ( tables->offset > size ) )
    {
      error = FT_THROW( Invalid_Table );
      goto Exit;
    }
    /* ... and adjust `tables->size' to the real value if necessary */
    if ( tables->size > size - tables->offset )
      tables->size = size - tables->offset;

d634 1
a634 1
    for ( i = 0; i < nmetrics; i++, metrics++ )
d636 1
a636 1
      error = pcf_get_metric( stream, format, metrics );
d638 1
a638 1
      metrics->bits = 0;
d643 6
a648 6
                  metrics->characterWidth,
                  metrics->leftSideBearing,
                  metrics->rightSideBearing,
                  metrics->ascent,
                  metrics->descent,
                  metrics->attributes ));
a651 16

      /* sanity checks -- those values are used in `PCF_Glyph_Load' to     */
      /* compute a glyph's bitmap dimensions, thus setting them to zero in */
      /* case of an error disables this particular glyph only              */
      if ( metrics->rightSideBearing < metrics->leftSideBearing ||
           metrics->ascent + metrics->descent < 0               )
      {
        metrics->characterWidth   = 0;
        metrics->leftSideBearing  = 0;
        metrics->rightSideBearing = 0;
        metrics->ascent           = 0;
        metrics->descent          = 0;

        FT_TRACE0(( "pcf_get_metrics:"
                    " invalid metrics for glyph %d\n", i ));
      }
d702 2
a703 2
    /* XXX: PCF_Face->nmetrics is signed FT_Long, see pcf.h */
    if ( face->nmetrics < 0 || nbitmaps != (FT_ULong)face->nmetrics )
a813 9

    /* sanity checks */
    if ( firstCol < 0       ||
         firstCol > lastCol ||
         lastCol  > 0xFF    ||
         firstRow < 0       ||
         firstRow > lastRow ||
         lastRow  > 0xFF    )
      return FT_THROW( Invalid_Table );
@


1.10
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d1156 4
a1159 3
      root->face_flags = FT_FACE_FLAG_FIXED_SIZES |
                         FT_FACE_FLAG_HORIZONTAL  |
                         FT_FACE_FLAG_FAST_GLYPHS;
@


1.10.2.1
log
@backport fixes for malformed fonts from freetype 2.5.5.
fixes dug out of ubuntu by dcoppa@@
@
text
@d81 1
a81 1
      FT_FRAME_ULONG_LE( size ),   /* rounded up to a multiple of 4 */
a97 1
    FT_ULong   size;
d99 2
a100 3

    if ( FT_STREAM_SEEK( 0 )                          ||
         FT_STREAM_READ_FIELDS( pcf_toc_header, toc ) )
a153 46
    /*
     *  We now check whether the `size' and `offset' values are reasonable:
     *  `offset' + `size' must not exceed the stream size.
     *
     *  Note, however, that X11's `pcfWriteFont' routine (used by the
     *  `bdftopcf' program to create PDF font files) has two special
     *  features.
     *
     *  - It always assigns the accelerator table a size of 100 bytes in the
     *    TOC, regardless of its real size, which can vary between 34 and 72
     *    bytes.
     *
     *  - Due to the way the routine is designed, it ships out the last font
     *    table with its real size, ignoring the TOC's size value.  Since
     *    the TOC size values are always rounded up to a multiple of 4, the
     *    difference can be up to three bytes for all tables except the
     *    accelerator table, for which the difference can be as large as 66
     *    bytes.
     *
     */

    tables = face->toc.tables;
    size   = stream->size;

    for ( n = 0; n < toc->count - 1; n++ )
    {
      /* we need two checks to avoid overflow */
      if ( ( tables->size   > size                ) ||
           ( tables->offset > size - tables->size ) )
      {
        error = FT_THROW( Invalid_Table );
        goto Exit;
      }
      tables++;
    }

    /* only check `tables->offset' for last table element ... */
    if ( ( tables->offset > size ) )
    {
      error = FT_THROW( Invalid_Table );
      goto Exit;
    }
    /* ... and adjust `tables->size' to the real value if necessary */
    if ( tables->size > size - tables->offset )
      tables->size = size - tables->offset;

d634 1
a634 1
    for ( i = 0; i < nmetrics; i++, metrics++ )
d636 1
a636 1
      error = pcf_get_metric( stream, format, metrics );
d638 1
a638 1
      metrics->bits = 0;
d643 6
a648 6
                  metrics->characterWidth,
                  metrics->leftSideBearing,
                  metrics->rightSideBearing,
                  metrics->ascent,
                  metrics->descent,
                  metrics->attributes ));
a651 16

      /* sanity checks -- those values are used in `PCF_Glyph_Load' to     */
      /* compute a glyph's bitmap dimensions, thus setting them to zero in */
      /* case of an error disables this particular glyph only              */
      if ( metrics->rightSideBearing < metrics->leftSideBearing ||
           metrics->ascent + metrics->descent < 0               )
      {
        metrics->characterWidth   = 0;
        metrics->leftSideBearing  = 0;
        metrics->rightSideBearing = 0;
        metrics->ascent           = 0;
        metrics->descent          = 0;

        FT_TRACE0(( "pcf_get_metrics:"
                    " invalid metrics for glyph %d\n", i ));
      }
d702 2
a703 2
    /* XXX: PCF_Face->nmetrics is signed FT_Long, see pcf.h */
    if ( face->nmetrics < 0 || nbitmaps != (FT_ULong)face->nmetrics )
a813 9

    /* sanity checks */
    if ( firstCol < 0       ||
         firstCol > lastCol ||
         lastCol  > 0xFF    ||
         firstRow < 0       ||
         firstRow > lastRow ||
         lastRow  > 0xFF    )
      return FT_THROW( Invalid_Table );
@


1.9
log
@Update to freetype 2.5.0.1. Tested by many.
@
text
@d1099 1
a1099 1
    FT_Error   error  = FT_Err_Ok;
@


1.8
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d95 1
a95 1
    FT_Memory  memory = FT_FACE(face)->memory;
d405 1
a405 1
    FT_Memory          memory     = FT_FACE(face)->memory;
d569 2
a570 2
    FT_Error    error    = FT_Err_Ok;
    FT_Memory   memory   = FT_FACE(face)->memory;
d572 1
a572 1
    PCF_Metric  metrics  = 0;
d666 2
a667 2
    FT_Error   error   = FT_Err_Ok;
    FT_Memory  memory  = FT_FACE(face)->memory;
d768 2
a769 2
    FT_Error      error  = FT_Err_Ok;
    FT_Memory     memory = FT_FACE(face)->memory;
d917 1
a917 1
    FT_Error   error = FT_Err_Ok;
d1017 1
a1017 1
      strings[1] = (char *)"Bold";
d1024 1
a1024 1
      strings[3] = (char *)(prop->value.atom);
d1030 1
a1030 1
      strings[0] = (char *)(prop->value.atom);
d1044 1
a1044 1
      strings[0] = (char *)"Regular";
d1082 1
a1082 1
            if (s[mm] == ' ')
d1100 1
a1100 1
    FT_Memory  memory = FT_FACE(face)->memory;
@


1.7
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d5 1
a5 1
  Copyright 2000-2010, 2012 by
d101 1
a101 1
      return PCF_Err_Cannot_Open_Resource;
d106 1
a106 1
      return PCF_Err_Invalid_File_Format;
d109 1
a109 1
      return PCF_Err_Out_Of_Memory;
d147 1
a147 1
          return PCF_Err_Invalid_Offset;
d184 1
a184 1
    return PCF_Err_Ok;
d251 1
a251 1
    FT_Error  error = PCF_Err_Ok;
d297 1
a297 1
    FT_Error  error = PCF_Err_Invalid_File_Format;
d306 1
a306 1
          error = PCF_Err_Invalid_Stream_Skip;
d312 1
a312 1
          error = PCF_Err_Invalid_Stream_Skip;
d319 1
a319 1
        return PCF_Err_Ok;
d444 1
a444 1
      error = PCF_Err_Invalid_Table;
d477 1
a477 1
        error = PCF_Err_Invalid_Stream_Skip;
d494 1
a494 1
      error = PCF_Err_Invalid_Table;
d519 1
a519 1
        error = PCF_Err_Invalid_Offset;
d538 1
a538 1
          error = PCF_Err_Invalid_Offset;
d555 1
a555 1
    error = PCF_Err_Ok;
d569 1
a569 1
    FT_Error    error    = PCF_Err_Ok;
d590 1
a590 1
      return PCF_Err_Invalid_File_Format;
d607 1
a607 1
      return PCF_Err_Invalid_File_Format;
d612 1
a612 1
      return PCF_Err_Invalid_Table;
d622 1
a622 1
        return PCF_Err_Invalid_Table;
d627 1
a627 1
        return PCF_Err_Invalid_Table;
d631 1
a631 1
      return PCF_Err_Out_Of_Memory;
d666 1
a666 1
    FT_Error   error   = PCF_Err_Ok;
d696 1
a696 1
      return PCF_Err_Invalid_File_Format;
d704 1
a704 1
      return PCF_Err_Invalid_File_Format;
d768 1
a768 1
    FT_Error      error  = PCF_Err_Ok;
d774 2
a775 2
    int           i, j;
    PCF_Encoding  tmpEncoding = NULL, encoding = 0;
d813 1
a813 1
      return PCF_Err_Invalid_File_Format;
d822 2
a823 2
    if ( FT_NEW_ARRAY( tmpEncoding, nencoding ) )
      return PCF_Err_Out_Of_Memory;
d829 2
a830 1
    for ( i = 0, j = 0 ; i < nencoding; i++ )
d832 11
a842 4
      if ( PCF_BYTE_ORDER( format ) == MSBFirst )
        encodingOffset = FT_GET_SHORT();
      else
        encodingOffset = FT_GET_SHORT_LE();
d844 2
a845 12
      if ( encodingOffset != -1 )
      {
        tmpEncoding[j].enc = ( ( ( i / ( lastCol - firstCol + 1 ) ) +
                                 firstRow ) * 256 ) +
                               ( ( i % ( lastCol - firstCol + 1 ) ) +
                                 firstCol );

        tmpEncoding[j].glyph = (FT_Short)encodingOffset;

        FT_TRACE5(( "  code %d (0x%04X): idx %d\n",
                    tmpEncoding[j].enc, tmpEncoding[j].enc,
                    tmpEncoding[j].glyph ));
d847 2
a848 1
        j++;
d853 1
a853 1
    if ( FT_NEW_ARRAY( encoding, j ) )
d856 1
a856 7
    for ( i = 0; i < j; i++ )
    {
      encoding[i].enc   = tmpEncoding[i].enc;
      encoding[i].glyph = tmpEncoding[i].glyph;
    }

    face->nencodings = j;
a857 1
    FT_FREE( tmpEncoding );
a862 1
    FT_FREE( tmpEncoding );
d917 1
a917 1
    FT_Error   error = PCF_Err_Ok;
d988 1
a988 1
    FT_Error   error  = PCF_Err_Ok;
d1099 1
a1099 1
    FT_Error   error  = PCF_Err_Ok;
d1262 1
a1262 1
      error = PCF_Err_Invalid_File_Format;
@


1.6
log
@Update to freetype 2.4.5. Tested by many.
@
text
@d5 1
a5 2
  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
            2010 by
d498 2
a499 1
    if ( FT_NEW_ARRAY( strings, string_size ) )
@


1.5
log
@patches from Freetype.org for the security issues found by Robert Swiecki:

CVE-2010-2497 freetype integer underflow
CVE-2010-2498 freetype invalid free
CVE-2010-2499 freetype buffer overflow
CVE-2010-2500 freetype integer overflow
CVE-2010-2519 freetype heap buffer overflow
CVE-2010-2520 freetype buffer overflow on heap
@
text
@d402 1
a402 1
    PCF_Property       properties;
d666 3
a668 3
    FT_Error   error  = PCF_Err_Ok;
    FT_Memory  memory = FT_FACE(face)->memory;
    FT_Long*   offsets;
d775 1
a775 1
    PCF_Encoding  tmpEncoding, encoding = 0;
@


1.4
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d5 2
a6 1
  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by
d610 3
@


1.3
log
@Update to Freetype 2.3.9.

Bump major to be safe.
Small arm assembler fix in ftconfig.h by drahn@@
@
text
@a34 1
#include "pcfdrivr.h"
d292 1
a292 1
                          FT_Int     ntables,
d298 1
a298 1
    FT_Int    i;
d330 1
a330 1
                      FT_Int     ntables,
d333 1
a333 1
    FT_Int  i;
d402 1
a402 1
    FT_UInt            nprops, i;
d436 4
a439 1
    FT_TRACE4(( "  nprop = %d\n", nprops ));
d448 1
a448 1
    face->nprops = nprops;
d548 1
a548 1
        properties[i].value.integer = props[i].value;
d550 1
a550 1
        FT_TRACE4(( " %d\n", properties[i].value.integer ));
d667 1
a667 1
    int        nbitmaps, i, sizebitmaps = 0;
d698 2
a699 1
    if ( nbitmaps != face->nmetrics )
d745 2
a746 2
        FT_ERROR(( "pcf_get_bitmaps:"));
        FT_ERROR(( " invalid offset to bitmap data of glyph %d\n", i ));
d999 3
a1001 3
    int    nn, len;
    char*  strings[4] = { NULL, NULL, NULL, NULL };
    int    lengths[4];
d1083 1
a1083 1
          int  mm;
d1208 1
a1208 1
          bsize->width = (FT_Short)( ( prop->value.integer + 5 ) / 10 );
d1216 1
a1216 1
            (FT_Pos)( ( prop->value.integer * 64 * 7200 + 36135L ) / 72270L );
d1220 1
a1220 1
          bsize->y_ppem = (FT_Short)prop->value.integer << 6;
d1224 1
a1224 1
          resolution_x = (FT_Short)prop->value.integer;
d1228 1
a1228 1
          resolution_y = (FT_Short)prop->value.integer;
@


1.2
log
@Update to Freetype 2.3.8. Tested by jsg@@.
@
text
@d5 1
a5 1
  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 by
d473 5
a477 1
      FT_Stream_Skip( stream, i );
d630 1
a630 1
      pcf_get_metric( stream, format, metrics + i );
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006 by
d51 1
a51 1
#if defined( FT_DEBUG_LEVEL_TRACE )
d105 2
a106 1
         toc->count   >  FT_ARRAY_MAX( face->toc.tables ) )
d120 36
a155 1
#if defined( FT_DEBUG_LEVEL_TRACE )
d169 2
a170 1
        for( j = 0; j < sizeof ( tableNames ) / sizeof ( tableNames[0] ); j++ )
d193 2
d201 1
a201 1
    FT_FRAME_START( 12 ),
d218 1
a218 1
    FT_FRAME_START( 12 ),
d229 2
d237 1
a237 1
    FT_FRAME_START( 5 ),
d265 1
a265 1
      /* the following sets 'error' but doesn't return in case of failure */
d305 2
a306 1
        if ( stream->pos > tables[i].offset ) {
d311 2
a312 1
        if ( FT_STREAM_SKIP( tables[i].offset - stream->pos ) ) {
d317 1
a317 1
        *asize   = tables[i].size;  /* unused - to be removed */
d324 1
d345 2
d353 1
a353 1
    FT_FRAME_START( 9 ),
d367 1
a367 1
    FT_FRAME_START( 9 ),
d402 2
a403 2
    PCF_Property       properties = 0;
    FT_Int             nprops, i;
d439 9
d485 7
d502 2
d506 11
a516 3
      /* XXX: make atom */
      if ( FT_NEW_ARRAY( properties[i].name,
                         ft_strlen( strings + props[i].name ) + 1 ) )
a517 1
      ft_strcpy( properties[i].name, strings + props[i].name );
d525 11
a535 2
        if ( FT_NEW_ARRAY( properties[i].value.atom,
                           ft_strlen( strings + props[i].value ) + 1 ) )
a536 1
        ft_strcpy( properties[i].value.atom, strings + props[i].value );
d548 1
a548 7
    face->properties = properties;
    face->nprops = nprops;

    FT_FREE( props );
    FT_FREE( strings );

    return PCF_Err_Ok;
d564 1
a564 2
    FT_ULong    format   = 0;
    FT_ULong    size     = 0;
d566 1
a566 2
    int         i;
    int         nmetrics = -1;
d578 2
a579 1
    error = FT_READ_ULONG_LE( format );
d599 1
a599 1
    if ( error || nmetrics == -1 )
d604 16
a622 2
    FT_TRACE4(( "pcf_get_metrics:\n" ));

d630 1
a630 1
      FT_TRACE4(( "  idx %d: width=%d, "
d646 2
d688 4
a697 2
    FT_TRACE4(( "pcf_get_bitmaps:\n" ));

d705 1
a705 1
      FT_TRACE4(( "  bitmap %d: offset %ld (0x%lX)\n",
d733 11
a743 1
      face->metrics[i].bits = stream->pos + offsets[i];
a746 3
    FT_FREE ( offsets );
    return error;

d748 1
a748 1
    FT_FREE ( offsets );
d834 1
a834 1
        FT_TRACE4(( "  code %d (0x%04X): idx %d\n",
d928 2
a929 1
    error = FT_READ_ULONG_LE( format );
a976 1
    return error;
d992 3
a994 4
    char  *istr = NULL, *bstr = NULL;
    char  *sstr = NULL, *astr = NULL;

    int  parts = 0, len = 0;
d1005 3
a1007 5
      istr = ( *(prop->value.atom) == 'O' || *(prop->value.atom) == 'o' )
               ? (char *)"Oblique"
               : (char *)"Italic";
      len += ft_strlen( istr );
      parts++;
d1015 1
a1015 3
      bstr = (char *)"Bold";
      len += ft_strlen( bstr );
      parts++;
d1022 1
a1022 5
    {
      sstr = (char *)(prop->value.atom);
      len += ft_strlen( sstr );
      parts++;
    }
d1028 3
d1032 6
a1037 3
      astr = (char *)(prop->value.atom);
      len += ft_strlen( astr );
      parts++;
d1040 1
a1040 1
    if ( !parts || !len )
d1042 3
a1044 4
      if ( FT_ALLOC( face->style_name, 8 ) )
        return error;
      ft_strcpy( face->style_name, "Regular" );
      face->style_name[7] = '\0';
d1046 1
a1046 1
    else
d1048 1
a1048 2
      char          *style, *s;
      unsigned int  i;
d1051 1
a1051 1
      if ( FT_ALLOC( style, len + parts ) )
d1054 1
a1054 1
      s = style;
d1056 1
a1056 1
      if ( astr )
d1058 27
a1084 25
        ft_strcpy( s, astr );
        for ( i = 0; i < ft_strlen( astr ); i++, s++ )
          if ( *s == ' ' )
            *s = '-';                     /* replace spaces with dashes */
        *(s++) = ' ';
      }
      if ( bstr )
      {
        ft_strcpy( s, bstr );
        s += ft_strlen( bstr );
        *(s++) = ' ';
      }
      if ( istr )
      {
        ft_strcpy( s, istr );
        s += ft_strlen( istr );
        *(s++) = ' ';
      }
      if ( sstr )
      {
        ft_strcpy( s, sstr );
        for ( i = 0; i < ft_strlen( sstr ); i++, s++ )
          if ( *s == ' ' )
            *s = '-';                     /* replace spaces with dashes */
        *(s++) = ' ';
d1086 1
a1086 3
      *(--s) = '\0';        /* overwrite last ' ', terminate the string */

      face->style_name = style;                     /* allocated string */
d1167 1
a1167 4
        int  l = ft_strlen( prop->value.atom ) + 1;


        if ( FT_NEW_ARRAY( root->family_name, l ) )
a1168 1
        ft_strcpy( root->family_name, prop->value.atom );
d1173 2
a1174 1
      /* Note: We shift all glyph indices by +1 since we must
d1176 1
a1176 1
       * to the "missing glyph".
d1178 1
a1178 1
       * This implies bumping the number of "available" glyphs by 1.
d1246 4
a1249 2
          if ( FT_NEW_ARRAY( face->charset_encoding,
                             ft_strlen( charset_encoding->value.atom ) + 1 ) )
a1250 7

          if ( FT_NEW_ARRAY( face->charset_registry,
                             ft_strlen( charset_registry->value.atom ) + 1 ) )
            goto Exit;

          ft_strcpy( face->charset_registry, charset_registry->value.atom );
          ft_strcpy( face->charset_encoding, charset_encoding->value.atom );
d1258 1
a1258 1
      /* this is done to respect the behaviour of the original */
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d5 1
a5 1
  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 by
d105 1
a105 2
         toc->count   >  FT_ARRAY_MAX( face->toc.tables ) ||
         toc->count   == 0                                )
a118 35
    /* Sort tables and check for overlaps.  Because they are almost      */
    /* always ordered already, an in-place bubble sort with simultaneous */
    /* boundary checking seems appropriate.                              */
    tables = face->toc.tables;

    for ( n = 0; n < toc->count - 1; n++ )
    {
      FT_UInt  i, have_change;


      have_change = 0;

      for ( i = 0; i < toc->count - 1 - n; i++ )
      {
        PCF_TableRec  tmp;


        if ( tables[i].offset > tables[i + 1].offset )
        {
          tmp           = tables[i];
          tables[i]     = tables[i + 1];
          tables[i + 1] = tmp;

          have_change = 1;
        }

        if ( ( tables[i].size   > tables[i + 1].offset )                  ||
             ( tables[i].offset > tables[i + 1].offset - tables[i].size ) )
          return PCF_Err_Invalid_Offset;
      }

      if ( !have_change )
        break;
    }

d133 1
a133 2
        for ( j = 0; j < sizeof ( tableNames ) / sizeof ( tableNames[0] );
              j++ )
a155 2
#define PCF_METRIC_SIZE  12

d162 1
a162 1
    FT_FRAME_START( PCF_METRIC_SIZE ),
d179 1
a179 1
    FT_FRAME_START( PCF_METRIC_SIZE ),
a189 2
#define PCF_COMPRESSED_METRIC_SIZE  5

d196 1
a196 1
    FT_FRAME_START( PCF_COMPRESSED_METRIC_SIZE ),
d224 1
a224 1
      /* the following sets `error' but doesn't return in case of failure */
d264 1
a264 2
        if ( stream->pos > tables[i].offset )
        {
d269 1
a269 2
        if ( FT_STREAM_SKIP( tables[i].offset - stream->pos ) )
        {
d274 1
a274 1
        *asize   = tables[i].size;
a280 1
    *asize = 0;
a300 2
#define PCF_PROPERTY_SIZE  9

d307 1
a307 1
    FT_FRAME_START( PCF_PROPERTY_SIZE ),
d321 1
a321 1
    FT_FRAME_START( PCF_PROPERTY_SIZE ),
d356 2
a357 2
    PCF_Property       properties;
    FT_UInt            nprops, i;
a392 9
    /* rough estimate */
    if ( nprops > size / PCF_PROPERTY_SIZE )
    {
      error = PCF_Err_Invalid_Table;
      goto Bail;
    }

    face->nprops = nprops;

a429 7
    /* rough estimate */
    if ( string_size > size - nprops * PCF_PROPERTY_SIZE )
    {
      error = PCF_Err_Invalid_Table;
      goto Bail;
    }

a439 2
    face->properties = properties;

d442 3
a444 11
      FT_Long  name_offset = props[i].name;


      if ( ( name_offset < 0 )                     ||
           ( (FT_ULong)name_offset > string_size ) )
      {
        error = PCF_Err_Invalid_Offset;
        goto Bail;
      }

      if ( FT_STRDUP( properties[i].name, strings + name_offset ) )
d446 1
d454 2
a455 11
        FT_Long  value_offset = props[i].value;


        if ( ( value_offset < 0 )                     ||
             ( (FT_ULong)value_offset > string_size ) )
        {
          error = PCF_Err_Invalid_Offset;
          goto Bail;
        }

        if ( FT_STRDUP( properties[i].value.atom, strings + value_offset ) )
d457 1
d469 7
a475 1
    error = PCF_Err_Ok;
d491 2
a492 1
    FT_ULong    format, size;
d494 2
a495 1
    FT_ULong    nmetrics, i;
d507 1
a507 2
    if ( FT_READ_ULONG_LE( format ) )
      goto Bail;
d527 1
a527 1
    if ( error )
a531 16
    FT_TRACE4(( "pcf_get_metrics:\n" ));

    FT_TRACE4(( "  number of metrics: %d\n", nmetrics ));

    /* rough estimate */
    if ( PCF_FORMAT_MATCH( format, PCF_DEFAULT_FORMAT ) )
    {
      if ( nmetrics > size / PCF_METRIC_SIZE )
        return PCF_Err_Invalid_Table;
    }
    else
    {
      if ( nmetrics > size / PCF_COMPRESSED_METRIC_SIZE )
        return PCF_Err_Invalid_Table;
    }

d535 2
d544 1
a544 1
      FT_TRACE5(( "  idx %d: width=%d, "
a559 2

  Bail:
a599 4
    FT_TRACE4(( "pcf_get_bitmaps:\n" ));

    FT_TRACE4(( "  number of bitmaps: %d\n", nbitmaps ));

d606 2
d615 1
a615 1
      FT_TRACE5(( "  bitmap %d: offset %ld (0x%lX)\n",
d643 1
a643 11
    {
      /* rough estimate */
      if ( ( offsets[i] < 0 )              ||
           ( (FT_ULong)offsets[i] > size ) )
      {
        FT_ERROR(( "pcf_get_bitmaps:"));
        FT_ERROR(( " invalid offset to bitmap data of glyph %d\n", i ));
      }
      else
        face->metrics[i].bits = stream->pos + offsets[i];
    }
d647 3
d651 1
a651 1
    FT_FREE( offsets );
d737 1
a737 1
        FT_TRACE5(( "  code %d (0x%04X): idx %d\n",
d831 1
a831 2
    if ( FT_READ_ULONG_LE( format ) )
      goto Bail;
d879 1
d895 4
a898 3
    int    nn, len;
    char*  strings[4] = { NULL, NULL, NULL, NULL };
    int    lengths[4];
d909 5
a913 3
      strings[2] = ( *(prop->value.atom) == 'O' ||
                     *(prop->value.atom) == 'o' ) ? (char *)"Oblique"
                                                  : (char *)"Italic";
d921 3
a923 1
      strings[1] = (char *)"Bold";
d930 5
a934 1
      strings[3] = (char *)(prop->value.atom);
a939 3
      strings[0] = (char *)(prop->value.atom);

    for ( len = 0, nn = 0; nn < 4; nn++ )
d941 3
a943 6
      lengths[nn] = 0;
      if ( strings[nn] )
      {
        lengths[nn] = ft_strlen( strings[nn] );
        len        += lengths[nn] + 1;
      }
d946 1
a946 1
    if ( len == 0 )
d948 4
a951 3
      strings[0] = (char *)"Regular";
      lengths[0] = ft_strlen( strings[0] );
      len        = lengths[0] + 1;
d953 1
a953 1

d955 2
a956 1
      char*  s;
d959 1
a959 1
      if ( FT_ALLOC( face->style_name, len ) )
d962 1
a962 1
      s = face->style_name;
d964 9
a972 1
      for ( nn = 0; nn < 4; nn++ )
d974 19
a992 4
        char*  src = strings[nn];


        len = lengths[nn];
d994 1
a994 24
        if ( src == NULL )
          continue;

        /* separate elements with a space */
        if ( s != face->style_name )
          *s++ = ' ';

        ft_memcpy( s, src, len );

        /* need to convert spaces to dashes for */
        /* add_style_name and setwidth_name     */
        if ( nn == 0 || nn == 3 )
        {
          int  mm;


          for ( mm = 0; mm < len; mm++ )
            if (s[mm] == ' ')
              s[mm] = '-';
        }

        s += len;
      }
      *s = 0;
d1075 4
a1078 1
        if ( FT_STRDUP( root->family_name, prop->value.atom ) )
d1080 1
d1085 1
a1085 2
      /*
       * Note: We shift all glyph indices by +1 since we must
d1087 1
a1087 1
       * to the `missing glyph'.
d1089 1
a1089 1
       * This implies bumping the number of `available' glyphs by 1.
d1157 2
a1158 4
          if ( FT_STRDUP( face->charset_encoding,
                          charset_encoding->value.atom ) ||
               FT_STRDUP( face->charset_registry,
                          charset_registry->value.atom ) )
d1160 7
d1174 1
a1174 1
      /* This is done to respect the behaviour of the original */
@

