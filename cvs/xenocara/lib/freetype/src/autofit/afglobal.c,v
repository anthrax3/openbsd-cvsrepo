head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.2
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.2
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2017.01.13.11.19.59;	author dcoppa;	state Exp;
branches;
next	1.17;
commitid	ESXG9TuEmwmBXggf;

1.17
date	2016.05.29.11.57.12;	author dcoppa;	state Exp;
branches;
next	1.16;
commitid	1dOLexdOAzW2mQjp;

1.16
date	2015.12.07.09.34.03;	author dcoppa;	state Exp;
branches;
next	1.15;
commitid	wZOPiDmcwgRFTDVL;

1.15
date	2015.10.19.07.51.37;	author dcoppa;	state Exp;
branches;
next	1.14;
commitid	d2XmJCtYff11VIDu;

1.14
date	2015.06.28.08.27.47;	author dcoppa;	state Exp;
branches;
next	1.13;
commitid	qXwIGV2h9uFjxAmt;

1.13
date	2014.12.26.17.52.35;	author dcoppa;	state Exp;
branches;
next	1.12;
commitid	gwhRExMduYqoPQHI;

1.12
date	2014.03.14.08.18.01;	author dcoppa;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.12.15.08.27;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.10.19.49.49;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.07.17.21.08;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.04.16.51.58;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.04.14.09.45.46;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.18.20.29.58;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.01.19.14.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.17.14.06.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.25.20.49.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.22.17.37.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.45.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.45.17;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.32.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@
Update to FreeType-2.7.1

i386 bulk build by sthen@@
amd64 bulk build by naddy@@

OK matthieu@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  afglobal.c                                                             */
/*                                                                         */
/*    Auto-fitter routines to compute global hinting values (body).        */
/*                                                                         */
/*  Copyright 2003-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include "afglobal.h"
#include "afranges.h"
#include "afshaper.h"
#include FT_INTERNAL_DEBUG_H


  /*************************************************************************/
  /*                                                                       */
  /* The macro FT_COMPONENT is used in trace mode.  It is an implicit      */
  /* parameter of the FT_TRACE() and FT_ERROR() macros, used to print/log  */
  /* messages during execution.                                            */
  /*                                                                       */
#undef  FT_COMPONENT
#define FT_COMPONENT  trace_afglobal


  /* get writing system specific header files */
#undef  WRITING_SYSTEM
#define WRITING_SYSTEM( ws, WS )  /* empty */
#include "afwrtsys.h"

#include "aferrors.h"
#include "afpic.h"


#undef  SCRIPT
#define SCRIPT( s, S, d, h, H, ss )         \
          AF_DEFINE_SCRIPT_CLASS(           \
            af_ ## s ## _script_class,      \
            AF_SCRIPT_ ## S,                \
            af_ ## s ## _uniranges,         \
            af_ ## s ## _nonbase_uniranges, \
            AF_ ## H,                       \
            ss )

#include "afscript.h"


#undef  STYLE
#define STYLE( s, S, d, ws, sc, ss, c )  \
          AF_DEFINE_STYLE_CLASS(         \
            af_ ## s ## _style_class,    \
            AF_STYLE_ ## S,              \
            ws,                          \
            sc,                          \
            ss,                          \
            c )

#include "afstyles.h"


#ifndef FT_CONFIG_OPTION_PIC

#undef  WRITING_SYSTEM
#define WRITING_SYSTEM( ws, WS )               \
          &af_ ## ws ## _writing_system_class,

  FT_LOCAL_ARRAY_DEF( AF_WritingSystemClass )
  af_writing_system_classes[] =
  {

#include "afwrtsys.h"

    NULL  /* do not remove */
  };


#undef  SCRIPT
#define SCRIPT( s, S, d, h, H, ss )   \
          &af_ ## s ## _script_class,

  FT_LOCAL_ARRAY_DEF( AF_ScriptClass )
  af_script_classes[] =
  {

#include "afscript.h"

    NULL  /* do not remove */
  };


#undef  STYLE
#define STYLE( s, S, d, ws, sc, ss, c ) \
          &af_ ## s ## _style_class,

  FT_LOCAL_ARRAY_DEF( AF_StyleClass )
  af_style_classes[] =
  {

#include "afstyles.h"

    NULL  /* do not remove */
  };

#endif /* !FT_CONFIG_OPTION_PIC */


#ifdef FT_DEBUG_LEVEL_TRACE

#undef  STYLE
#define STYLE( s, S, d, ws, sc, ss, c )  #s,

  FT_LOCAL_ARRAY_DEF( char* )
  af_style_names[] =
  {

#include "afstyles.h"

  };

#endif /* FT_DEBUG_LEVEL_TRACE */


  /* Compute the style index of each glyph within a given face. */

  static FT_Error
  af_face_globals_compute_style_coverage( AF_FaceGlobals  globals )
  {
    FT_Error    error;
    FT_Face     face        = globals->face;
    FT_CharMap  old_charmap = face->charmap;
    FT_UShort*  gstyles     = globals->glyph_styles;
    FT_UInt     ss;
    FT_UInt     i;
    FT_UInt     dflt        = ~0U; /* a non-valid value */


    /* the value AF_STYLE_UNASSIGNED means `uncovered glyph' */
    for ( i = 0; i < (FT_UInt)globals->glyph_count; i++ )
      gstyles[i] = AF_STYLE_UNASSIGNED;

    error = FT_Select_Charmap( face, FT_ENCODING_UNICODE );
    if ( error )
    {
      /*
       * Ignore this error; we simply use the fallback style.
       * XXX: Shouldn't we rather disable hinting?
       */
      error = FT_Err_Ok;
      goto Exit;
    }

    /* scan each style in a Unicode charmap */
    for ( ss = 0; AF_STYLE_CLASSES_GET[ss]; ss++ )
    {
      AF_StyleClass       style_class =
                            AF_STYLE_CLASSES_GET[ss];
      AF_ScriptClass      script_class =
                            AF_SCRIPT_CLASSES_GET[style_class->script];
      AF_Script_UniRange  range;


      if ( !script_class->script_uni_ranges )
        continue;

      /*
       *  Scan all Unicode points in the range and set the corresponding
       *  glyph style index.
       */
      if ( style_class->coverage == AF_COVERAGE_DEFAULT )
      {
        if ( (FT_UInt)style_class->script ==
             globals->module->default_script )
          dflt = ss;

        for ( range = script_class->script_uni_ranges;
              range->first != 0;
              range++ )
        {
          FT_ULong  charcode = range->first;
          FT_UInt   gindex;


          gindex = FT_Get_Char_Index( face, charcode );

          if ( gindex != 0                                                &&
               gindex < (FT_ULong)globals->glyph_count                    &&
               ( gstyles[gindex] & AF_STYLE_MASK ) == AF_STYLE_UNASSIGNED )
            gstyles[gindex] = (FT_UShort)ss;

          for (;;)
          {
            charcode = FT_Get_Next_Char( face, charcode, &gindex );

            if ( gindex == 0 || charcode > range->last )
              break;

            if ( gindex < (FT_ULong)globals->glyph_count                    &&
                 ( gstyles[gindex] & AF_STYLE_MASK ) == AF_STYLE_UNASSIGNED )
              gstyles[gindex] = (FT_UShort)ss;
          }
        }

        /* do the same for the script's non-base characters */
        for ( range = script_class->script_uni_nonbase_ranges;
              range->first != 0;
              range++ )
        {
          FT_ULong  charcode = range->first;
          FT_UInt   gindex;


          gindex = FT_Get_Char_Index( face, charcode );

          if ( gindex != 0                                          &&
               gindex < (FT_ULong)globals->glyph_count              &&
               ( gstyles[gindex] & AF_STYLE_MASK ) == (FT_UShort)ss )
            gstyles[gindex] |= AF_NONBASE;

          for (;;)
          {
            charcode = FT_Get_Next_Char( face, charcode, &gindex );

            if ( gindex == 0 || charcode > range->last )
              break;

            if ( gindex < (FT_ULong)globals->glyph_count              &&
                 ( gstyles[gindex] & AF_STYLE_MASK ) == (FT_UShort)ss )
              gstyles[gindex] |= AF_NONBASE;
          }
        }
      }
      else
      {
        /* get glyphs not directly addressable by cmap */
        af_shaper_get_coverage( globals, style_class, gstyles, 0 );
      }
    }

    /* handle the remaining default OpenType features ... */
    for ( ss = 0; AF_STYLE_CLASSES_GET[ss]; ss++ )
    {
      AF_StyleClass  style_class = AF_STYLE_CLASSES_GET[ss];


      if ( style_class->coverage == AF_COVERAGE_DEFAULT )
        af_shaper_get_coverage( globals, style_class, gstyles, 0 );
    }

    /* ... and finally the default OpenType features of the default script */
    af_shaper_get_coverage( globals, AF_STYLE_CLASSES_GET[dflt], gstyles, 1 );

    /* mark ASCII digits */
    for ( i = 0x30; i <= 0x39; i++ )
    {
      FT_UInt  gindex = FT_Get_Char_Index( face, i );


      if ( gindex != 0 && gindex < (FT_ULong)globals->glyph_count )
        gstyles[gindex] |= AF_DIGIT;
    }

  Exit:
    /*
     *  By default, all uncovered glyphs are set to the fallback style.
     *  XXX: Shouldn't we disable hinting or do something similar?
     */
    if ( globals->module->fallback_style != AF_STYLE_UNASSIGNED )
    {
      FT_Long  nn;


      for ( nn = 0; nn < globals->glyph_count; nn++ )
      {
        if ( ( gstyles[nn] & AF_STYLE_MASK ) == AF_STYLE_UNASSIGNED )
        {
          gstyles[nn] &= ~AF_STYLE_MASK;
          gstyles[nn] |= globals->module->fallback_style;
        }
      }
    }

#ifdef FT_DEBUG_LEVEL_TRACE

    FT_TRACE4(( "\n"
                "style coverage\n"
                "==============\n"
                "\n" ));

    for ( ss = 0; AF_STYLE_CLASSES_GET[ss]; ss++ )
    {
      AF_StyleClass  style_class = AF_STYLE_CLASSES_GET[ss];
      FT_UInt        count       = 0;
      FT_Long        idx;


      FT_TRACE4(( "%s:\n", af_style_names[style_class->style] ));

      for ( idx = 0; idx < globals->glyph_count; idx++ )
      {
        if ( ( gstyles[idx] & AF_STYLE_MASK ) == style_class->style )
        {
          if ( !( count % 10 ) )
            FT_TRACE4(( " " ));

          FT_TRACE4(( " %d", idx ));
          count++;

          if ( !( count % 10 ) )
            FT_TRACE4(( "\n" ));
        }
      }

      if ( !count )
        FT_TRACE4(( "  (none)\n" ));
      if ( count % 10 )
        FT_TRACE4(( "\n" ));
    }

#endif /* FT_DEBUG_LEVEL_TRACE */

    FT_Set_Charmap( face, old_charmap );
    return error;
  }


  FT_LOCAL_DEF( FT_Error )
  af_face_globals_new( FT_Face          face,
                       AF_FaceGlobals  *aglobals,
                       AF_Module        module )
  {
    FT_Error        error;
    FT_Memory       memory;
    AF_FaceGlobals  globals = NULL;


    memory = face->memory;

    /* we allocate an AF_FaceGlobals structure together */
    /* with the glyph_styles array                      */
    if ( FT_ALLOC( globals,
                   sizeof ( *globals ) +
                     (FT_ULong)face->num_glyphs * sizeof ( FT_UShort ) ) )
      goto Exit;

    globals->face                      = face;
    globals->glyph_count               = face->num_glyphs;
    /* right after the globals structure come the glyph styles */
    globals->glyph_styles              = (FT_UShort*)( globals + 1 );
    globals->module                    = module;
    globals->stem_darkening_for_ppem   = 0;
    globals->darken_x                  = 0;
    globals->darken_y                  = 0;
    globals->standard_vertical_width   = 0;
    globals->standard_horizontal_width = 0;
    globals->scale_down_factor         = 0;

#ifdef FT_CONFIG_OPTION_USE_HARFBUZZ
    globals->hb_font = hb_ft_font_create( face, NULL );
    globals->hb_buf  = hb_buffer_create();
#endif

    error = af_face_globals_compute_style_coverage( globals );
    if ( error )
    {
      af_face_globals_free( globals );
      globals = NULL;
    }
    else
      globals->increase_x_height = AF_PROP_INCREASE_X_HEIGHT_MAX;

  Exit:
    *aglobals = globals;
    return error;
  }


  FT_LOCAL_DEF( void )
  af_face_globals_free( AF_FaceGlobals  globals )
  {
    if ( globals )
    {
      FT_Memory  memory = globals->face->memory;
      FT_UInt    nn;


      for ( nn = 0; nn < AF_STYLE_MAX; nn++ )
      {
        if ( globals->metrics[nn] )
        {
          AF_StyleClass          style_class =
            AF_STYLE_CLASSES_GET[nn];
          AF_WritingSystemClass  writing_system_class =
            AF_WRITING_SYSTEM_CLASSES_GET[style_class->writing_system];


          if ( writing_system_class->style_metrics_done )
            writing_system_class->style_metrics_done( globals->metrics[nn] );

          FT_FREE( globals->metrics[nn] );
        }
      }

#ifdef FT_CONFIG_OPTION_USE_HARFBUZZ
      hb_font_destroy( globals->hb_font );
      globals->hb_font = NULL;

      hb_buffer_destroy( globals->hb_buf );
      globals->hb_buf = NULL;
#endif

      /* no need to free `globals->glyph_styles'; */
      /* it is part of the `globals' array        */
      FT_FREE( globals );
    }
  }


  FT_LOCAL_DEF( FT_Error )
  af_face_globals_get_metrics( AF_FaceGlobals    globals,
                               FT_UInt           gindex,
                               FT_UInt           options,
                               AF_StyleMetrics  *ametrics )
  {
    AF_StyleMetrics  metrics = NULL;

    AF_Style               style = (AF_Style)options;
    AF_WritingSystemClass  writing_system_class;
    AF_StyleClass          style_class;

    FT_Error  error = FT_Err_Ok;


    if ( gindex >= (FT_ULong)globals->glyph_count )
    {
      error = FT_THROW( Invalid_Argument );
      goto Exit;
    }

    /* if we have a forced style (via `options'), use it, */
    /* otherwise look into `glyph_styles' array           */
    if ( style == AF_STYLE_NONE_DFLT || style + 1 >= AF_STYLE_MAX )
      style = (AF_Style)( globals->glyph_styles[gindex] &
                          AF_STYLE_UNASSIGNED           );

    style_class          = AF_STYLE_CLASSES_GET[style];
    writing_system_class = AF_WRITING_SYSTEM_CLASSES_GET
                             [style_class->writing_system];

    metrics = globals->metrics[style];
    if ( !metrics )
    {
      /* create the global metrics object if necessary */
      FT_Memory  memory = globals->face->memory;


      if ( FT_ALLOC( metrics, writing_system_class->style_metrics_size ) )
        goto Exit;

      metrics->style_class = style_class;
      metrics->globals     = globals;

      if ( writing_system_class->style_metrics_init )
      {
        error = writing_system_class->style_metrics_init( metrics,
                                                          globals->face );
        if ( error )
        {
          if ( writing_system_class->style_metrics_done )
            writing_system_class->style_metrics_done( metrics );

          FT_FREE( metrics );
          goto Exit;
        }
      }

      globals->metrics[style] = metrics;
    }

  Exit:
    *ametrics = metrics;

    return error;
  }


  FT_LOCAL_DEF( FT_Bool )
  af_face_globals_is_digit( AF_FaceGlobals  globals,
                            FT_UInt         gindex )
  {
    if ( gindex < (FT_ULong)globals->glyph_count )
      return (FT_Bool)( globals->glyph_styles[gindex] & AF_DIGIT );

    return (FT_Bool)0;
  }


/* END */
@


1.17
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d171 1
a171 1
      if ( script_class->script_uni_ranges == NULL )
d420 2
a421 11
      globals->glyph_count               = 0;
      globals->stem_darkening_for_ppem   = 0;
      globals->darken_x                  = 0;
      globals->darken_y                  = 0;
      globals->standard_vertical_width   = 0;
      globals->standard_horizontal_width = 0;
      globals->scale_down_factor         = 0;
      /* no need to free this one! */
      globals->glyph_styles              = NULL;
      globals->face                      = NULL;

d459 1
a459 1
    if ( metrics == NULL )
@


1.16
log
@
Bugfixing update to freetype-2.6.2

Tested on amd64, i386, macppc, sparc64, loongson and compile-tested
on arm by matthieu@@
Also tested in a ports bulk build by naddy@@

OK matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2003-2015 by                                                 */
d21 1
a21 1
#include "hbshim.h"
d45 1
a45 1
#define SCRIPT( s, S, d, h, sc1, sc2, sc3 ) \
d51 2
a52 1
            sc1, sc2, sc3 )
d87 1
a87 1
#define SCRIPT( s, S, d, h, sc1, sc2, sc3 ) \
d244 1
a244 1
        af_get_coverage( globals, style_class, gstyles );
d248 1
a248 4
    /* handle the default OpenType features of the default script ... */
    af_get_coverage( globals, AF_STYLE_CLASSES_GET[dflt], gstyles );

    /* ... and the remaining default OpenType features */
d254 2
a255 2
      if ( ss != dflt && style_class->coverage == AF_COVERAGE_DEFAULT )
        af_get_coverage( globals, style_class, gstyles );
d258 3
d368 1
d415 3
@


1.15
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d353 2
a354 2
    globals->face         = face;
    globals->glyph_count  = face->num_glyphs;
d356 8
a363 2
    globals->glyph_styles = (FT_UShort*)( globals + 1 );
    globals->module       = module;
d415 10
a424 3
      globals->glyph_count  = 0;
      globals->glyph_styles = NULL;  /* no need to free this one! */
      globals->face         = NULL;
@


1.14
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d50 1
d139 1
a139 1
    FT_Byte*    gstyles     = globals->glyph_styles;
d146 2
a147 3
    FT_MEM_SET( globals->glyph_styles,
                AF_STYLE_UNASSIGNED,
                globals->glyph_count );
d193 4
a196 4
          if ( gindex != 0                             &&
               gindex < (FT_ULong)globals->glyph_count &&
               gstyles[gindex] == AF_STYLE_UNASSIGNED  )
            gstyles[gindex] = (FT_Byte)ss;
d205 32
a236 3
            if ( gindex < (FT_ULong)globals->glyph_count &&
                 gstyles[gindex] == AF_STYLE_UNASSIGNED  )
              gstyles[gindex] = (FT_Byte)ss;
d282 1
a282 1
        if ( ( gstyles[nn] & ~AF_DIGIT ) == AF_STYLE_UNASSIGNED )
d284 1
a284 1
          gstyles[nn] &= ~AF_STYLE_UNASSIGNED;
d308 1
a308 1
        if ( ( gstyles[idx] & ~AF_DIGIT ) == style_class->style )
d346 2
d350 1
a350 1
                     (FT_ULong)face->num_glyphs * sizeof ( FT_Byte ) ) )
d355 2
a356 1
    globals->glyph_styles = (FT_Byte*)( globals + 1 );
@


1.13
log
@
Update to freetype-2.5.4

ports bulk build by landry@@

OK matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2003-2014 by                                                 */
d317 3
a319 2
    if ( FT_ALLOC( globals, sizeof ( *globals ) +
                            face->num_glyphs * sizeof ( FT_Byte ) ) )
@


1.12
log
@
Security/bugfixing update to freetype-2.5.3, featuring a fix for a
vulnerability in the CFF driver (CVE-2014-2240) and assorted minor
fixes.

ok matthieu@@
@
text
@d141 1
a141 1
    FT_UInt     dflt        = -1;
d179 2
a180 1
        if ( style_class->script == globals->module->default_script )
d336 2
a337 2

    globals->increase_x_height = AF_PROP_INCREASE_X_HEIGHT_MAX;
@


1.11
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d7 1
a7 1
/*  Copyright 2003-2013 by                                                 */
d20 14
d44 24
d85 1
a85 1
#define SCRIPT( s, S, d )             \
d97 14
d116 2
a117 2
#undef  SCRIPT
#define SCRIPT( s, S, d )  #s,
d120 1
a120 1
  af_script_names[] =
d123 1
a123 1
#include "afscript.h"
d130 1
a130 1
  /* Compute the script index of each glyph within a given face. */
d133 1
a133 1
  af_face_globals_compute_script_coverage( AF_FaceGlobals  globals )
d138 1
a138 1
    FT_Byte*    gscripts    = globals->glyph_scripts;
d141 1
d144 3
a146 3
    /* the value AF_SCRIPT_NONE means `uncovered glyph' */
    FT_MEM_SET( globals->glyph_scripts,
                AF_SCRIPT_NONE,
d152 4
a155 4
     /*
      *  Ignore this error; we simply use the fallback script.
      *  XXX: Shouldn't we rather disable hinting?
      */
d160 2
a161 2
    /* scan each script in a Unicode charmap */
    for ( ss = 0; AF_SCRIPT_CLASSES_GET[ss]; ss++ )
d163 4
a166 1
      AF_ScriptClass      script_class = AF_SCRIPT_CLASSES_GET[ss];
d175 1
a175 1
       *  glyph script index.
d177 1
a177 3
      for ( range = script_class->script_uni_ranges;
            range->first != 0;
            range++ )
d179 9
a187 2
        FT_ULong  charcode = range->first;
        FT_UInt   gindex;
d190 1
a190 1
        gindex = FT_Get_Char_Index( face, charcode );
d192 4
a195 4
        if ( gindex != 0                             &&
             gindex < (FT_ULong)globals->glyph_count &&
             gscripts[gindex] == AF_SCRIPT_NONE )
          gscripts[gindex] = (FT_Byte)ss;
d197 3
a199 3
        for (;;)
        {
          charcode = FT_Get_Next_Char( face, charcode, &gindex );
d201 2
a202 2
          if ( gindex == 0 || charcode > range->last )
            break;
d204 4
a207 3
          if ( gindex < (FT_ULong)globals->glyph_count &&
               gscripts[gindex] == AF_SCRIPT_NONE )
            gscripts[gindex] = (FT_Byte)ss;
d210 18
d237 1
a237 1
        gscripts[gindex] |= AF_DIGIT;
d242 1
a242 1
     *  By default, all uncovered glyphs are set to the fallback script.
d245 1
a245 1
    if ( globals->module->fallback_script != AF_SCRIPT_NONE )
d252 27
a278 1
        if ( ( gscripts[nn] & ~AF_DIGIT ) == AF_SCRIPT_NONE )
d280 8
a287 2
          gscripts[nn] &= ~AF_SCRIPT_NONE;
          gscripts[nn] |= globals->module->fallback_script;
d290 5
d297 2
d320 8
a327 4
    globals->face          = face;
    globals->glyph_count   = face->num_glyphs;
    globals->glyph_scripts = (FT_Byte*)( globals + 1 );
    globals->module        = module;
d329 1
a329 1
    error = af_face_globals_compute_script_coverage( globals );
d353 1
a353 1
      for ( nn = 0; nn < AF_SCRIPT_MAX; nn++ )
d357 2
a358 2
          AF_ScriptClass         script_class =
            AF_SCRIPT_CLASSES_GET[nn];
d360 1
a360 1
            AF_WRITING_SYSTEM_CLASSES_GET[script_class->writing_system];
d363 2
a364 2
          if ( writing_system_class->script_metrics_done )
            writing_system_class->script_metrics_done( globals->metrics[nn] );
d370 8
a377 3
      globals->glyph_count   = 0;
      globals->glyph_scripts = NULL;  /* no need to free this one! */
      globals->face          = NULL;
d385 4
a388 4
  af_face_globals_get_metrics( AF_FaceGlobals     globals,
                               FT_UInt            gindex,
                               FT_UInt            options,
                               AF_ScriptMetrics  *ametrics )
d390 1
a390 1
    AF_ScriptMetrics  metrics = NULL;
d392 1
a392 1
    AF_Script              script = (AF_Script)( options & 15 );
d394 1
a394 1
    AF_ScriptClass         script_class;
d405 5
a409 4
    /* if we have a forced script (via `options'), use it, */
    /* otherwise look into `glyph_scripts' array           */
    if ( script == AF_SCRIPT_DFLT || script + 1 >= AF_SCRIPT_MAX )
      script = (AF_Script)( globals->glyph_scripts[gindex] & AF_SCRIPT_NONE );
d411 1
a411 1
    script_class         = AF_SCRIPT_CLASSES_GET[script];
d413 1
a413 1
                             [script_class->writing_system];
d415 1
a415 1
    metrics = globals->metrics[script];
d422 1
a422 1
      if ( FT_ALLOC( metrics, writing_system_class->script_metrics_size ) )
d425 2
a426 2
      metrics->script_class = script_class;
      metrics->globals      = globals;
d428 1
a428 1
      if ( writing_system_class->script_metrics_init )
d430 2
a431 2
        error = writing_system_class->script_metrics_init( metrics,
                                                           globals->face );
d434 2
a435 2
          if ( writing_system_class->script_metrics_done )
            writing_system_class->script_metrics_done( metrics );
d442 1
a442 1
      globals->metrics[script] = metrics;
d457 1
a457 1
      return (FT_Bool)( globals->glyph_scripts[gindex] & AF_DIGIT );
@


1.10
log
@Update to freetype 2.5.0.1. Tested by many.
@
text
@d20 5
a24 5
#include "afdummy.h"
#include "aflatin.h"
#include "afcjk.h"
#include "afindic.h"
#include "afpic.h"
d27 1
a28 3
#ifdef FT_OPTION_AUTOFIT2
#include "aflatin2.h"
#endif
d32 3
a34 2
  /* when updating this table, don't forget to update          */
  /* AF_SCRIPT_CLASSES_COUNT and autofit_module_class_pic_init */
d36 2
a37 2
  /* populate this list when you add new scripts */
  static AF_ScriptClass const  af_script_classes[] =
d39 17
a55 7
    &af_dummy_script_class,
#ifdef FT_OPTION_AUTOFIT2
    &af_latin2_script_class,
#endif
    &af_latin_script_class,
    &af_cjk_script_class,
    &af_indic_script_class,
d62 16
d110 1
a110 1
      AF_ScriptClass      clazz = AF_SCRIPT_CLASSES_GET[ss];
d114 1
a114 1
      if ( clazz->script_uni_ranges == NULL )
d121 3
a123 1
      for ( range = clazz->script_uni_ranges; range->first != 0; range++ )
d234 4
a237 1
          AF_ScriptClass  clazz = AF_SCRIPT_CLASSES_GET[nn];
d240 2
a241 4
          FT_ASSERT( globals->metrics[nn]->clazz == clazz );

          if ( clazz->script_metrics_done )
            clazz->script_metrics_done( globals->metrics[nn] );
d263 6
a268 6
    FT_UInt           gidx;
    AF_ScriptClass    clazz;
    FT_UInt           script     = options & 15;
    const FT_Offset   script_max = sizeof ( AF_SCRIPT_CLASSES_GET ) /
                                     sizeof ( AF_SCRIPT_CLASSES_GET[0] );
    FT_Error          error      = FT_Err_Ok;
d277 8
a284 7
    gidx = script;
    if ( gidx == 0 || gidx + 1 >= script_max )
      gidx = globals->glyph_scripts[gindex] & AF_SCRIPT_NONE;

    clazz = AF_SCRIPT_CLASSES_GET[gidx];
    if ( script == 0 )
      script = clazz->script;
d286 1
a286 1
    metrics = globals->metrics[clazz->script];
d293 1
a293 1
      if ( FT_ALLOC( metrics, clazz->script_metrics_size ) )
d296 2
a297 2
      metrics->clazz   = clazz;
      metrics->globals = globals;
d299 1
a299 1
      if ( clazz->script_metrics_init )
d301 2
a302 1
        error = clazz->script_metrics_init( metrics, globals->face );
d305 2
a306 2
          if ( clazz->script_metrics_done )
            clazz->script_metrics_done( metrics );
d313 1
a313 1
      globals->metrics[clazz->script] = metrics;
@


1.9
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d58 1
a58 1
    FT_Error    error       = FT_Err_Ok;
@


1.8
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2003-2012 by                                                 */
d58 1
a58 1
    FT_Error    error       = AF_Err_Ok;
d78 1
a78 1
      error = AF_Err_Ok;
d240 1
a240 1
    FT_Error          error      = AF_Err_Ok;
d245 1
a245 1
      error = AF_Err_Invalid_Argument;
@


1.7
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d7 1
a7 1
/*  Copyright 2003-2011 by                                                 */
a51 23
  /* index of default script in `af_script_classes' */
#define AF_SCRIPT_LIST_DEFAULT  2
  /* a bit mask indicating an uncovered glyph       */
#define AF_SCRIPT_LIST_NONE     0x7F
  /* if this flag is set, we have an ASCII digit    */
#define AF_DIGIT                0x80


  /*
   *  Note that glyph_scripts[] is used to map each glyph into
   *  an index into the `af_script_classes' array.
   *
   */
  typedef struct  AF_FaceGlobalsRec_
  {
    FT_Face           face;
    FT_Long           glyph_count;    /* same as face->num_glyphs */
    FT_Byte*          glyph_scripts;

    AF_ScriptMetrics  metrics[AF_SCRIPT_MAX];

  } AF_FaceGlobalsRec;

d62 2
a63 1
    FT_UInt     ss, i;
d66 1
a66 1
    /* the value AF_SCRIPT_LIST_NONE means `uncovered glyph' */
d68 1
a68 1
                AF_SCRIPT_LIST_NONE,
d75 1
a75 1
      *  Ignore this error; we simply use the default script.
d93 1
a93 1
       *  Scan all unicode points in the range and set the corresponding
d106 1
a106 1
             gscripts[gindex] == AF_SCRIPT_LIST_NONE )
d117 1
a117 1
               gscripts[gindex] == AF_SCRIPT_LIST_NONE )
d135 1
a135 1
     *  By default, all uncovered glyphs are set to the latin script.
d138 1
d145 1
a145 1
        if ( ( gscripts[nn] & ~AF_DIGIT ) == AF_SCRIPT_LIST_NONE )
d147 2
a148 2
          gscripts[nn] &= ~AF_SCRIPT_LIST_NONE;
          gscripts[nn] |= AF_SCRIPT_LIST_DEFAULT;
d160 2
a161 1
                       AF_FaceGlobals  *aglobals )
d170 11
a180 2
    if ( !FT_ALLOC( globals, sizeof ( *globals ) +
                             face->num_glyphs * sizeof ( FT_Byte ) ) )
d182 3
a184 3
      globals->face          = face;
      globals->glyph_count   = face->num_glyphs;
      globals->glyph_scripts = (FT_Byte*)( globals + 1 );
d186 1
a186 7
      error = af_face_globals_compute_script_coverage( globals );
      if ( error )
      {
        af_face_globals_free( globals );
        globals = NULL;
      }
    }
d188 1
d251 1
a251 1
      gidx = globals->glyph_scripts[gindex] & AF_SCRIPT_LIST_NONE;
d260 1
a260 1
      /* create the global metrics object when needed */
d267 2
a268 1
      metrics->clazz = clazz;
@


1.6
log
@Update to freetype 2.4.5. Tested by many.
@
text
@d46 1
a46 1
    &af_indic_script_class, 
@


1.5
log
@Update to freetype 2.4.2. This has been in snapshots for a while
and tested explicitely by ajacoutot@@ jasper@@, jcs@@, krw@@ and others
on various architectures.
@
text
@d7 1
a7 1
/*  Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by            */
d34 2
a35 2
/* when updating this table, don't forget to update 
  AF_SCRIPT_CLASSES_COUNT and autofit_module_class_pic_init */
d50 1
a50 1
#endif /* FT_CONFIG_OPTION_PIC */
d88 1
a88 1
    /* the value 255 means `uncovered glyph' */
a128 1
        {
a129 1
        }
a139 1
          {
a140 1
          }
@


1.4
log
@patches from Freetype.org for the security issues found by Robert Swiecki:

CVE-2010-2497 freetype integer underflow
CVE-2010-2498 freetype invalid free
CVE-2010-2499 freetype buffer overflow
CVE-2010-2500 freetype integer overflow
CVE-2010-2519 freetype heap buffer overflow
CVE-2010-2520 freetype buffer overflow on heap
@
text
@d189 1
a189 1
    AF_FaceGlobals  globals;
@


1.3
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 by                  */
d170 5
a174 2
        if ( gscripts[nn] == AF_SCRIPT_LIST_NONE )
          gscripts[nn] = AF_SCRIPT_LIST_DEFAULT;
@


1.2
log
@Update to freetype 2.3.6.
Contains security fixes for CVE-2008-1806, CVE-2008-1807 and CVE-2008-1808.
Tested by many.
@
text
@d7 1
a7 1
/*  Copyright 2003, 2004, 2005, 2006, 2007, 2008 by                        */
d24 1
d32 5
d50 2
d54 4
a57 2
  /* indicates an uncovered glyph                   */
#define AF_SCRIPT_LIST_NONE   255
d68 1
a68 1
    FT_UInt           glyph_count;    /* same as face->num_glyphs */
d85 1
a85 1
    FT_UInt     ss;
d105 1
a105 1
    for ( ss = 0; af_script_classes[ss]; ss++ )
d107 1
a107 1
      AF_ScriptClass      clazz = af_script_classes[ss];
d127 1
a127 1
             gindex < globals->glyph_count           &&
d140 1
a140 1
          if ( gindex < globals->glyph_count           &&
d149 10
d165 1
a165 1
      FT_UInt  nn;
d224 1
a224 1
          AF_ScriptClass  clazz = af_script_classes[nn];
d255 2
a256 2
    const FT_UInt     script_max = sizeof ( af_script_classes ) /
                                     sizeof ( af_script_classes[0] );
d260 1
a260 1
    if ( gindex >= globals->glyph_count )
d268 1
a268 1
      gidx = globals->glyph_scripts[gindex];
d270 1
a270 1
    clazz = af_script_classes[gidx];
d306 11
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2003, 2004, 2005, 2006 by                                    */
d23 2
d27 3
d35 3
d40 1
a40 1

d45 1
a45 1
#define AF_SCRIPT_LIST_DEFAULT  1
d87 2
a88 2
      *  Ignore this error; we simply use Latin as the standard
      *  script.  XXX: Shouldn't we rather disable hinting?
d142 1
a142 1
     *  XXX: Shouldnt' we disable hinting or do something similar?
d228 1
d234 4
a237 1
    FT_Error          error = AF_Err_Ok;
d246 8
a253 2
    gidx    = globals->glyph_scripts[gindex];
    clazz   = af_script_classes[gidx];
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d7 1
a7 1
/*  Copyright 2003, 2004, 2005, 2006, 2007 by                              */
a22 2
#include "afindic.h"

a24 3
#ifdef FT_OPTION_AUTOFIT2
#include "aflatin2.h"
#endif
a29 3
#ifdef FT_OPTION_AUTOFIT2
    &af_latin2_script_class,
#endif
d32 1
a32 1
    &af_indic_script_class, 
d37 1
a37 1
#define AF_SCRIPT_LIST_DEFAULT  2
d134 1
a134 1
     *  XXX: Shouldn't we disable hinting or do something similar?
a219 1
                               FT_UInt            options,
d225 1
a225 4
    FT_UInt           script     = options & 15;
    const FT_UInt     script_max = sizeof ( af_script_classes ) /
                                     sizeof ( af_script_classes[0] );
    FT_Error          error      = AF_Err_Ok;
d234 2
a235 8
    gidx = script;
    if ( gidx == 0 || gidx + 1 >= script_max )
      gidx = globals->glyph_scripts[gindex];

    clazz = af_script_classes[gidx];
    if ( script == 0 )
      script = clazz->script;

@

