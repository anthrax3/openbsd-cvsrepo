head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.2
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.11.57.12;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	1dOLexdOAzW2mQjp;

1.10
date	2015.12.07.09.34.03;	author dcoppa;	state Exp;
branches;
next	1.9;
commitid	wZOPiDmcwgRFTDVL;

1.9
date	2015.10.19.07.51.37;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	d2XmJCtYff11VIDu;

1.8
date	2015.06.28.08.27.47;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	qXwIGV2h9uFjxAmt;

1.7
date	2014.12.26.17.52.35;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	gwhRExMduYqoPQHI;

1.6
date	2014.03.14.08.18.01;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2014.01.12.15.08.27;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.16.51.58;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.18.20.29.58;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.25.20.49.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.45.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.45.17;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.32.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  afglobal.h                                                             */
/*                                                                         */
/*    Auto-fitter routines to compute global hinting values                */
/*    (specification).                                                     */
/*                                                                         */
/*  Copyright 2003-2016 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef AFGLOBAL_H_
#define AFGLOBAL_H_


#include "aftypes.h"
#include "afmodule.h"
#include "afshaper.h"


FT_BEGIN_HEADER


  FT_LOCAL_ARRAY( AF_WritingSystemClass )
  af_writing_system_classes[];


#undef  SCRIPT
#define SCRIPT( s, S, d, h, H, ss )                            \
          AF_DECLARE_SCRIPT_CLASS( af_ ## s ## _script_class )

#include "afscript.h"

  FT_LOCAL_ARRAY( AF_ScriptClass )
  af_script_classes[];


#undef  STYLE
#define STYLE( s, S, d, ws, sc, ss, c )                      \
          AF_DECLARE_STYLE_CLASS( af_ ## s ## _style_class )

#include "afstyles.h"

  FT_LOCAL_ARRAY( AF_StyleClass )
  af_style_classes[];


#ifdef FT_DEBUG_LEVEL_TRACE
  FT_LOCAL_ARRAY( char* )
  af_style_names[];
#endif


  /*
   *  Default values and flags for both autofitter globals (found in
   *  AF_ModuleRec) and face globals (in AF_FaceGlobalsRec).
   */

  /* index of fallback style in `af_style_classes' */
#ifdef AF_CONFIG_OPTION_CJK
#define AF_STYLE_FALLBACK    AF_STYLE_HANI_DFLT
#else
#define AF_STYLE_FALLBACK    AF_STYLE_NONE_DFLT
#endif
  /* default script for OpenType; ignored if HarfBuzz isn't used */
#define AF_SCRIPT_DEFAULT    AF_SCRIPT_LATN

  /* a bit mask for AF_DIGIT and AF_NONBASE */
#define AF_STYLE_MASK        0x3FFF
  /* an uncovered glyph      */
#define AF_STYLE_UNASSIGNED  AF_STYLE_MASK

  /* if this flag is set, we have an ASCII digit   */
#define AF_DIGIT             0x8000U
  /* if this flag is set, we have a non-base character */
#define AF_NONBASE           0x4000U

  /* `increase-x-height' property */
#define AF_PROP_INCREASE_X_HEIGHT_MIN  6
#define AF_PROP_INCREASE_X_HEIGHT_MAX  0


  /************************************************************************/
  /************************************************************************/
  /*****                                                              *****/
  /*****                  F A C E   G L O B A L S                     *****/
  /*****                                                              *****/
  /************************************************************************/
  /************************************************************************/


  /*
   *  Note that glyph_styles[] maps each glyph to an index into the
   *  `af_style_classes' array.
   *
   */
  typedef struct  AF_FaceGlobalsRec_
  {
    FT_Face          face;
    FT_Long          glyph_count;    /* same as face->num_glyphs */
    FT_UShort*       glyph_styles;

#ifdef FT_CONFIG_OPTION_USE_HARFBUZZ
    hb_font_t*       hb_font;
    hb_buffer_t*     hb_buf;           /* for feature comparison */
#endif

    /* per-face auto-hinter properties */
    FT_UInt          increase_x_height;

    AF_StyleMetrics  metrics[AF_STYLE_MAX];

    /* Compute darkening amount once per size.  Use this to check whether */
    /* darken_{x,y} needs to be recomputed.                               */
    FT_UShort        stem_darkening_for_ppem;
    /* Copy from e.g. AF_LatinMetrics.axis[AF_DIMENSION_HORZ] */
    /* to compute the darkening amount.                       */
    FT_Pos           standard_vertical_width;
    /* Copy from e.g. AF_LatinMetrics.axis[AF_DIMENSION_VERT] */
    /* to compute the darkening amount.                       */
    FT_Pos           standard_horizontal_width;
    /* The actual amount to darken a glyph along the X axis. */
    FT_Pos           darken_x;
    /* The actual amount to darken a glyph along the Y axis. */
    FT_Pos           darken_y;
    /* Amount to scale down by to keep emboldened points */
    /* on the Y-axis in pre-computed blue zones.         */
    FT_Fixed         scale_down_factor;
    AF_Module        module;         /* to access global properties */

  } AF_FaceGlobalsRec;


  /*
   *  model the global hints data for a given face, decomposed into
   *  style-specific items
   */

  FT_LOCAL( FT_Error )
  af_face_globals_new( FT_Face          face,
                       AF_FaceGlobals  *aglobals,
                       AF_Module        module );

  FT_LOCAL( FT_Error )
  af_face_globals_get_metrics( AF_FaceGlobals    globals,
                               FT_UInt           gindex,
                               FT_UInt           options,
                               AF_StyleMetrics  *ametrics );

  FT_LOCAL( void )
  af_face_globals_free( AF_FaceGlobals  globals );

  FT_LOCAL_DEF( FT_Bool )
  af_face_globals_is_digit( AF_FaceGlobals  globals,
                            FT_UInt         gindex );

  /* */


FT_END_HEADER

#endif /* AFGLOBAL_H_ */


/* END */
@


1.10
log
@
Bugfixing update to freetype-2.6.2

Tested on amd64, i386, macppc, sparc64, loongson and compile-tested
on arm by matthieu@@
Also tested in a ports bulk build by naddy@@

OK matthieu@@
@
text
@d8 1
a8 1
/*  Copyright 2003-2015 by                                                 */
d20 2
a21 2
#ifndef __AFGLOBAL_H__
#define __AFGLOBAL_H__
d26 1
a26 1
#include "hbshim.h"
d37 1
a37 1
#define SCRIPT( s, S, d, h, sc1, sc2, sc3 )                    \
d113 1
d170 1
a170 1
#endif /* __AFGLOBAL_H__ */
@


1.9
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d120 16
@


1.8
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d75 10
a84 4
  /* a bit mask indicating an uncovered glyph        */
#define AF_STYLE_UNASSIGNED  0x7F
  /* if this flag is set, we have an ASCII digit     */
#define AF_DIGIT             0x80
d109 1
a109 1
    FT_Byte*         glyph_styles;
@


1.7
log
@
Update to freetype-2.5.4

ports bulk build by landry@@

OK matthieu@@
@
text
@d8 1
a8 1
/*  Copyright 2003-2005, 2007, 2009, 2011-2014 by                          */
@


1.6
log
@
Security/bugfixing update to freetype-2.5.3, featuring a fix for a
vulnerability in the CFF driver (CVE-2014-2240) and assorted minor
fixes.

ok matthieu@@
@
text
@d69 1
a69 1
#define AF_STYLE_FALLBACK  AF_STYLE_HANI_DFLT
d71 1
a71 1
#define AF_STYLE_FALLBACK  AF_STYLE_NONE_DFLT
d74 1
a74 1
#define AF_SCRIPT_DEFAULT  AF_SCRIPT_LATN
d78 1
a78 1
#define AF_DIGIT              0x80
@


1.5
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d8 1
a8 1
/*  Copyright 2003-2005, 2007, 2009, 2011-2013 by                          */
d26 1
d35 7
d45 11
d58 1
a58 1
  af_script_names[];
d61 1
d67 1
a67 1
  /* index of fallback script in `af_script_classes' */
d69 1
a69 1
#define AF_SCRIPT_FALLBACK  AF_SCRIPT_HANI
d71 1
a71 1
#define AF_SCRIPT_FALLBACK  AF_SCRIPT_DFLT
d73 2
d76 1
a76 1
#define AF_SCRIPT_NONE      0x7F
d78 1
a78 1
#define AF_DIGIT            0x80
d95 2
a96 2
   *  Note that glyph_scripts[] maps each glyph to an index into the
   *  `af_script_classes' array.
d101 7
a107 3
    FT_Face           face;
    FT_Long           glyph_count;    /* same as face->num_glyphs */
    FT_Byte*          glyph_scripts;
d110 1
a110 1
    FT_UInt           increase_x_height;
d112 1
a112 1
    AF_ScriptMetrics  metrics[AF_SCRIPT_MAX];
d114 1
a114 1
    AF_Module         module;         /* to access global properties */
d121 1
a121 1
   *  script-specific items
d130 4
a133 4
  af_face_globals_get_metrics( AF_FaceGlobals     globals,
                               FT_UInt            gindex,
                               FT_UInt            options,
                               AF_ScriptMetrics  *ametrics );
@


1.4
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d8 1
a8 1
/*  Copyright 2003-2005, 2007, 2009, 2011-2012 by                          */
d31 11
d48 5
a52 1
#define AF_SCRIPT_FALLBACK  2
d73 2
a74 2
   *  Note that glyph_scripts[] is used to map each glyph into
   *  an index into the `af_script_classes' array.
@


1.3
log
@Update to freetype 2.4.5. Tested by many.
@
text
@d8 1
a8 1
/*  Copyright 2003-2005, 2007, 2009, 2011 by                               */
d25 1
d31 17
d58 21
a81 2
  typedef struct AF_FaceGlobalsRec_*   AF_FaceGlobals;

d85 2
a86 1
                       AF_FaceGlobals  *aglobals );
@


1.2
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d8 1
a8 1
/*  Copyright 2003, 2004, 2005, 2007, 2009 by                              */
d20 2
a21 2
#ifndef __AF_GLOBAL_H__
#define __AF_GLOBAL_H__
d68 1
a68 1
#endif /* __AF_GLOBALS_H__ */
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
/*  Copyright 2003, 2004, 2005 by                                          */
d53 1
d59 5
a63 1
 /* */
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d8 1
a8 1
/*  Copyright 2003, 2004, 2005, 2007 by                                    */
a52 1
                               FT_UInt            options,
@

