head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.2
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.2
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.06.23.16.15.19;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	nHj0O50aY5QcUcQ4;

1.7
date	2016.05.29.11.57.12;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	1dOLexdOAzW2mQjp;

1.6
date	2015.06.28.08.27.48;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	qXwIGV2h9uFjxAmt;

1.5
date	2013.06.07.17.21.09;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.16.51.58;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.14.09.45.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.01.19.14.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.20.49.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  cffpic.c                                                               */
/*                                                                         */
/*    The FreeType position independent code services for cff module.      */
/*                                                                         */
/*  Copyright 2009-2017 by                                                 */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "cffcmap.h"
#include "cffpic.h"
#include "cfferrs.h"


#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from cffdrivr.c */
  FT_Error
  FT_Create_Class_cff_services( FT_Library           library,
                                FT_ServiceDescRec**  output_class );
  void
  FT_Destroy_Class_cff_services( FT_Library          library,
                                 FT_ServiceDescRec*  clazz );
  void
  FT_Init_Class_cff_service_ps_info( FT_Library             library,
                                     FT_Service_PsInfoRec*  clazz );
  void
  FT_Init_Class_cff_service_glyph_dict( FT_Library                library,
                                        FT_Service_GlyphDictRec*  clazz );
  void
  FT_Init_Class_cff_service_ps_name( FT_Library                 library,
                                     FT_Service_PsFontNameRec*  clazz );
  void
  FT_Init_Class_cff_service_get_cmap_info( FT_Library              library,
                                           FT_Service_TTCMapsRec*  clazz );
  void
  FT_Init_Class_cff_service_cid_info( FT_Library          library,
                                      FT_Service_CIDRec*  clazz );

  /* forward declaration of PIC init functions from cffparse.c */
  FT_Error
  FT_Create_Class_cff_field_handlers( FT_Library           library,
                                      CFF_Field_Handler**  output_class );
  void
  FT_Destroy_Class_cff_field_handlers( FT_Library          library,
                                       CFF_Field_Handler*  clazz );


  void
  cff_driver_class_pic_free( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


    if ( pic_container->cff )
    {
      CffModulePIC*  container = (CffModulePIC*)pic_container->cff;


      if ( container->cff_services )
        FT_Destroy_Class_cff_services( library,
                                       container->cff_services );
      container->cff_services = NULL;
      if ( container->cff_field_handlers )
        FT_Destroy_Class_cff_field_handlers(
          library, container->cff_field_handlers );
      container->cff_field_handlers = NULL;
      FT_FREE( container );
      pic_container->cff = NULL;
    }
  }


  FT_Error
  cff_driver_class_pic_init( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    CffModulePIC*      container     = NULL;
    FT_Memory          memory        = library->memory;


    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof ( *container ) );
    pic_container->cff = container;

    /* initialize pointer table -                       */
    /* this is how the module usually expects this data */
    error = FT_Create_Class_cff_services( library,
                                          &container->cff_services );
    if ( error )
      goto Exit;

    error = FT_Create_Class_cff_field_handlers(
              library, &container->cff_field_handlers );
    if ( error )
      goto Exit;

    FT_Init_Class_cff_service_ps_info(
      library, &container->cff_service_ps_info );
    FT_Init_Class_cff_service_glyph_dict(
      library, &container->cff_service_glyph_dict );
    FT_Init_Class_cff_service_ps_name(
      library, &container->cff_service_ps_name );
    FT_Init_Class_cff_service_get_cmap_info(
      library, &container->cff_service_get_cmap_info );
    FT_Init_Class_cff_service_cid_info(
      library, &container->cff_service_cid_info );
    FT_Init_Class_cff_cmap_encoding_class_rec(
      library, &container->cff_cmap_encoding_class_rec );
    FT_Init_Class_cff_cmap_unicode_class_rec(
      library, &container->cff_cmap_unicode_class_rec );

  Exit:
    if ( error )
      cff_driver_class_pic_free( library );
    return error;
  }

#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.7
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2009-2016 by                                                 */
@


1.6
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2009-2015 by                                                 */
@


1.5
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012, 2013 by                                    */
@


1.4
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012 by                                          */
d26 1
d31 2
a32 4
  FT_Create_Class_cff_services(
    FT_Library           library,
    FT_ServiceDescRec**  output_class );

d34 2
a35 4
  FT_Destroy_Class_cff_services(
    FT_Library          library,
    FT_ServiceDescRec*  clazz );

d37 2
a38 4
  FT_Init_Class_cff_service_ps_info(
    FT_Library             library,
    FT_Service_PsInfoRec*  clazz );

d40 2
a41 4
  FT_Init_Class_cff_service_glyph_dict(
    FT_Library                library,
    FT_Service_GlyphDictRec*  clazz );

d43 2
a44 4
  FT_Init_Class_cff_service_ps_name(
    FT_Library                 library,
    FT_Service_PsFontNameRec*  clazz );

d46 2
a47 4
  FT_Init_Class_cff_service_get_cmap_info(
    FT_Library              library,
    FT_Service_TTCMapsRec*  clazz );

d49 2
a50 3
  FT_Init_Class_cff_service_cid_info(
    FT_Library          library,
    FT_Service_CIDRec*  clazz );
d54 5
a58 3
  FT_Create_Class_cff_field_handlers(
    FT_Library           library,
    CFF_Field_Handler**  output_class );
a59 4
  void
  FT_Destroy_Class_cff_field_handlers(
    FT_Library          library,
    CFF_Field_Handler*  clazz );
d65 1
a65 1
    FT_Memory  memory = library->memory;
d70 1
a70 1
      CffModulePIC*  container = ( CffModulePIC* )pic_container->cff;
d91 1
a91 1
    FT_Error           error         = CFF_Err_Ok;
d102 2
a103 1
    /* initialize pointer table - this is how the module usually expects this data */
d108 1
d113 1
d128 2
a129 1
Exit:
@


1.3
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010 by                                                */
d106 1
a106 1
    CffModulePIC*      container;
@


1.2
log
@Update to freetype 2.4.2. This has been in snapshots for a while
and tested explicitely by ajacoutot@@ jasper@@, jcs@@, krw@@ and others
on various architectures.
@
text
@d22 1
d24 1
d29 34
a62 7
  FT_Error FT_Create_Class_cff_services( FT_Library, FT_ServiceDescRec**);
  void FT_Destroy_Class_cff_services( FT_Library, FT_ServiceDescRec*);
  void FT_Init_Class_cff_service_ps_info( FT_Library, FT_Service_PsInfoRec*);
  void FT_Init_Class_cff_service_glyph_dict( FT_Library, FT_Service_GlyphDictRec*);
  void FT_Init_Class_cff_service_ps_name( FT_Library, FT_Service_PsFontNameRec*);
  void FT_Init_Class_cff_service_get_cmap_info( FT_Library, FT_Service_TTCMapsRec*);
  void FT_Init_Class_cff_service_cid_info( FT_Library, FT_Service_CIDRec*);
d65 4
a68 2
  FT_Error FT_Create_Class_cff_field_handlers( FT_Library, CFF_Field_Handler**);
  void FT_Destroy_Class_cff_field_handlers( FT_Library, CFF_Field_Handler*);
d70 4
a73 3
  /* forward declaration of PIC init functions from cffcmap.c */
  void FT_Init_Class_cff_cmap_encoding_class_rec( FT_Library, FT_CMap_ClassRec*);
  void FT_Init_Class_cff_cmap_unicode_class_rec( FT_Library, FT_CMap_ClassRec*);
d76 1
a76 1
  cff_driver_class_pic_free(  FT_Library library )
d78 4
a81 2
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
d84 6
a89 3
      CffModulePIC* container = (CffModulePIC*)pic_container->cff;
      if(container->cff_services)
        FT_Destroy_Class_cff_services(library, container->cff_services);
d91 3
a93 2
      if(container->cff_field_handlers)
        FT_Destroy_Class_cff_field_handlers(library, container->cff_field_handlers);
d117 3
a119 2
    error = FT_Create_Class_cff_services(library, &container->cff_services);
    if(error) 
d121 3
a123 2
    error = FT_Create_Class_cff_field_handlers(library, &container->cff_field_handlers);
    if(error) 
d125 14
a138 7
    FT_Init_Class_cff_service_ps_info(library, &container->cff_service_ps_info);
    FT_Init_Class_cff_service_glyph_dict(library, &container->cff_service_glyph_dict);
    FT_Init_Class_cff_service_ps_name(library, &container->cff_service_ps_name);
    FT_Init_Class_cff_service_get_cmap_info(library, &container->cff_service_get_cmap_info);
    FT_Init_Class_cff_service_cid_info(library, &container->cff_service_cid_info);
    FT_Init_Class_cff_cmap_encoding_class_rec(library, &container->cff_cmap_encoding_class_rec);
    FT_Init_Class_cff_cmap_unicode_class_rec(library, &container->cff_cmap_unicode_class_rec);
d140 2
a141 2
    if(error)
      cff_driver_class_pic_free(library);
@


1.1
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009 by                                                      */
d62 1
d64 1
a64 1
  cff_driver_class_pic_init(  FT_Library library )
d66 5
a70 4
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error        error = FT_Err_Ok;
    CffModulePIC* container;
    FT_Memory memory = library->memory;
d75 1
a75 1
    FT_MEM_SET( container, 0, sizeof(*container) );
@

