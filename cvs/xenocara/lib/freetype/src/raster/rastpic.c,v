head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.2
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.06.23.16.15.19;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	nHj0O50aY5QcUcQ4;

1.8
date	2016.05.29.11.57.14;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	1dOLexdOAzW2mQjp;

1.7
date	2015.10.19.07.51.38;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	d2XmJCtYff11VIDu;

1.6
date	2015.06.28.08.27.49;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	qXwIGV2h9uFjxAmt;

1.5
date	2013.06.07.17.21.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.16.51.59;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.14.09.45.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.01.19.14.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.20.49.55;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  rastpic.c                                                              */
/*                                                                         */
/*    The FreeType position independent code services for raster module.   */
/*                                                                         */
/*  Copyright 2009-2017 by                                                 */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "rastpic.h"
#include "rasterrs.h"


#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from ftraster.c */
  void
  FT_Init_Class_ft_standard_raster( FT_Raster_Funcs*  funcs );


  void
  ft_raster1_renderer_class_pic_free( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


    if ( pic_container->raster )
    {
      RasterPIC*  container = (RasterPIC*)pic_container->raster;


      if ( --container->ref_count )
        return;
      FT_FREE( container );
      pic_container->raster = NULL;
    }
  }


  FT_Error
  ft_raster1_renderer_class_pic_init( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    RasterPIC*         container     = NULL;
    FT_Memory          memory        = library->memory;


    /* XXX: since this function also served the no longer available  */
    /*      raster5 renderer it uses reference counting, which could */
    /*      be removed now                                           */
    if ( pic_container->raster )
    {
      ((RasterPIC*)pic_container->raster)->ref_count++;
      return error;
    }

    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof ( *container ) );
    pic_container->raster = container;

    container->ref_count = 1;

    /* initialize pointer table -                       */
    /* this is how the module usually expects this data */
    FT_Init_Class_ft_standard_raster( &container->ft_standard_raster );

    return error;
  }

#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.8
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2009-2016 by                                                 */
@


1.7
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d7 1
a7 1
/*  Copyright 2009-2015 by                                                 */
@


1.6
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d62 3
a64 2
    /* since this function also serves raster5 renderer, */
    /* it implements reference counting                  */
a83 15
  }


  /* re-route these init and free functions to the above functions */
  FT_Error
  ft_raster5_renderer_class_pic_init( FT_Library  library )
  {
    return ft_raster1_renderer_class_pic_init( library );
  }


  void
  ft_raster5_renderer_class_pic_free( FT_Library  library )
  {
    ft_raster1_renderer_class_pic_free( library );
@


1.5
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012, 2013 by                                    */
@


1.4
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012 by                                          */
d25 1
d32 1
d37 1
a37 1
    FT_Memory  memory = library->memory;
d42 3
a44 1
      RasterPIC* container = (RasterPIC*)pic_container->raster;
d56 4
a59 4
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error          error         = Raster_Err_Ok;
    RasterPIC*        container     = NULL;
    FT_Memory         memory        = library->memory;
d62 2
a63 2
    /* since this function also serve raster5 renderer,
       it implements reference counting */
d75 1
d78 2
a79 1
    /* initialize pointer table - this is how the module usually expects this data */
d81 1
a81 3
/*Exit:*/
    if( error )
      ft_raster1_renderer_class_pic_free( library );
d85 1
d92 1
@


1.3
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010 by                                                */
d54 1
a54 1
    RasterPIC*        container;
@


1.2
log
@Update to freetype 2.4.2. This has been in snapshots for a while
and tested explicitely by ajacoutot@@ jasper@@, jcs@@, krw@@ and others
on various architectures.
@
text
@d23 1
d28 2
a29 1
  void FT_Init_Class_ft_standard_raster(FT_Raster_Funcs*);
d32 1
a32 1
  ft_raster1_renderer_class_pic_free(  FT_Library library )
d34 4
a37 2
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
d41 1
a41 1
      if(--container->ref_count)
d50 1
a50 1
  ft_raster1_renderer_class_pic_init( FT_Library library )
d58 1
a58 1
    /* since this function also serve raster5 renderer, 
d67 1
a67 1
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
d69 1
a69 1
    FT_MEM_SET( container, 0, sizeof(*container) );
d74 1
a74 1
    FT_Init_Class_ft_standard_raster(&container->ft_standard_raster);
d76 2
a77 2
    if(error)
      ft_raster1_renderer_class_pic_free(library);
d82 2
a83 1
  FT_Error ft_raster5_renderer_class_pic_init(FT_Library library)
d85 1
a85 1
    return ft_raster1_renderer_class_pic_init(library);
d87 3
a89 1
  void ft_raster5_renderer_class_pic_free(FT_Library library)
d91 1
a91 1
    ft_raster1_renderer_class_pic_free(library);
@


1.1
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009 by                                                      */
d46 1
a46 1
  ft_raster1_renderer_class_pic_init(  FT_Library library )
d49 4
a52 3
    FT_Error        error = FT_Err_Ok;
    RasterPIC* container;
    FT_Memory memory = library->memory;
d56 1
a56 1
    if(pic_container->raster)
@

