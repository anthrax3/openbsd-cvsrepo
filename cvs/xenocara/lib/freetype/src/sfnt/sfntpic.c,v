head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.2
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.05.29.11.57.14;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	1dOLexdOAzW2mQjp;

1.6
date	2015.06.28.08.27.49;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	qXwIGV2h9uFjxAmt;

1.5
date	2013.06.07.17.21.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.16.51.59;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.14.09.45.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.01.19.14.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.20.49.55;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  sfntpic.c                                                              */
/*                                                                         */
/*    The FreeType position independent code services for sfnt module.     */
/*                                                                         */
/*  Copyright 2009-2016 by                                                 */
/*  Oran Agra and Mickey Gabel.                                            */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_INTERNAL_OBJECTS_H
#include "sfntpic.h"
#include "sferrors.h"


#ifdef FT_CONFIG_OPTION_PIC

  /* forward declaration of PIC init functions from sfdriver.c */
  FT_Error
  FT_Create_Class_sfnt_services( FT_Library           library,
                                 FT_ServiceDescRec**  output_class );
  void
  FT_Destroy_Class_sfnt_services( FT_Library          library,
                                  FT_ServiceDescRec*  clazz );
  void
  FT_Init_Class_sfnt_service_bdf( FT_Service_BDFRec*  clazz );
  void
  FT_Init_Class_sfnt_interface( FT_Library       library,
                                SFNT_Interface*  clazz );
  void
  FT_Init_Class_sfnt_service_glyph_dict(
    FT_Library                library,
    FT_Service_GlyphDictRec*  clazz );
  void
  FT_Init_Class_sfnt_service_ps_name(
    FT_Library                 library,
    FT_Service_PsFontNameRec*  clazz );
  void
  FT_Init_Class_tt_service_get_cmap_info(
    FT_Library              library,
    FT_Service_TTCMapsRec*  clazz );
  void
  FT_Init_Class_sfnt_service_sfnt_table(
    FT_Service_SFNT_TableRec*  clazz );


  /* forward declaration of PIC init functions from ttcmap.c */
  FT_Error
  FT_Create_Class_tt_cmap_classes( FT_Library       library,
                                   TT_CMap_Class**  output_class );
  void
  FT_Destroy_Class_tt_cmap_classes( FT_Library      library,
                                    TT_CMap_Class*  clazz );


  void
  sfnt_module_class_pic_free( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Memory          memory        = library->memory;


    if ( pic_container->sfnt )
    {
      sfntModulePIC*  container = (sfntModulePIC*)pic_container->sfnt;


      if ( container->sfnt_services )
        FT_Destroy_Class_sfnt_services( library,
                                        container->sfnt_services );
      container->sfnt_services = NULL;

      if ( container->tt_cmap_classes )
        FT_Destroy_Class_tt_cmap_classes( library,
                                          container->tt_cmap_classes );
      container->tt_cmap_classes = NULL;

      FT_FREE( container );
      pic_container->sfnt = NULL;
    }
  }


  FT_Error
  sfnt_module_class_pic_init( FT_Library  library )
  {
    FT_PIC_Container*  pic_container = &library->pic_container;
    FT_Error           error         = FT_Err_Ok;
    sfntModulePIC*     container     = NULL;
    FT_Memory          memory        = library->memory;


    /* allocate pointer, clear and set global container pointer */
    if ( FT_ALLOC( container, sizeof ( *container ) ) )
      return error;
    FT_MEM_SET( container, 0, sizeof ( *container ) );
    pic_container->sfnt = container;

    /* initialize pointer table -                       */
    /* this is how the module usually expects this data */
    error = FT_Create_Class_sfnt_services( library,
                                           &container->sfnt_services );
    if ( error )
      goto Exit;

    error = FT_Create_Class_tt_cmap_classes( library,
                                             &container->tt_cmap_classes );
    if ( error )
      goto Exit;

    FT_Init_Class_sfnt_service_glyph_dict(
      library, &container->sfnt_service_glyph_dict );
    FT_Init_Class_sfnt_service_ps_name(
      library, &container->sfnt_service_ps_name );
    FT_Init_Class_tt_service_get_cmap_info(
      library, &container->tt_service_get_cmap_info );
    FT_Init_Class_sfnt_service_sfnt_table(
      &container->sfnt_service_sfnt_table );
#ifdef TT_CONFIG_OPTION_BDF
    FT_Init_Class_sfnt_service_bdf( &container->sfnt_service_bdf );
#endif
    FT_Init_Class_sfnt_interface( library, &container->sfnt_interface );

  Exit:
    if ( error )
      sfnt_module_class_pic_free( library );
    return error;
  }

#endif /* FT_CONFIG_OPTION_PIC */


/* END */
@


1.6
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2009-2015 by                                                 */
@


1.5
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012, 2013 by                                    */
@


1.4
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010, 2012 by                                          */
a31 1

a34 1

a36 1

a39 1

a43 1

a47 1

a51 1

d56 1
a60 1

d95 1
a95 1
  sfnt_module_class_pic_init( FT_Library library )
d98 1
a98 1
    FT_Error           error         = SFNT_Err_Ok;
d104 1
a104 1
    if ( FT_ALLOC ( container, sizeof ( *container ) ) )
@


1.3
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d7 1
a7 1
/*  Copyright 2009, 2010 by                                                */
d25 1
d31 1
a31 1
                                 FT_ServiceDescRec**  ouput_class );
d72 1
d77 1
a77 1
    FT_Memory  memory = library->memory;
d89 1
d94 1
d102 1
a102 1
  sfnt_module_class_pic_init(  FT_Library library )
d105 3
a107 3
    FT_Error           error = SFNT_Err_Ok;
    sfntModulePIC*     container;
    FT_Memory          memory = library->memory;
d116 2
a117 1
    /* initialize pointer table - this is how the module usually expects this data */
d122 1
d141 1
a141 1
Exit:
a145 2


@


1.2
log
@Update to freetype 2.4.2. This has been in snapshots for a while
and tested explicitely by ajacoutot@@ jasper@@, jcs@@, krw@@ and others
on various architectures.
@
text
@d23 1
d28 33
a60 8
  FT_Error FT_Create_Class_sfnt_services( FT_Library, FT_ServiceDescRec**);
  void FT_Destroy_Class_sfnt_services( FT_Library, FT_ServiceDescRec*);
  void FT_Init_Class_sfnt_service_bdf( FT_Service_BDFRec*);
  void FT_Init_Class_sfnt_interface( FT_Library, SFNT_Interface*);
  void FT_Init_Class_sfnt_service_glyph_dict( FT_Library, FT_Service_GlyphDictRec*);
  void FT_Init_Class_sfnt_service_ps_name( FT_Library, FT_Service_PsFontNameRec*);
  void FT_Init_Class_tt_service_get_cmap_info( FT_Library, FT_Service_TTCMapsRec*);
  void FT_Init_Class_sfnt_service_sfnt_table( FT_Service_SFNT_TableRec*);
d63 7
a69 2
  FT_Error FT_Create_Class_tt_cmap_classes( FT_Library, TT_CMap_Class**);
  void FT_Destroy_Class_tt_cmap_classes( FT_Library, TT_CMap_Class*);
d72 1
a72 1
  sfnt_module_class_pic_free(  FT_Library library )
d74 4
a77 2
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Memory memory = library->memory;
d80 6
a85 3
      sfntModulePIC* container = (sfntModulePIC*)pic_container->sfnt;
      if(container->sfnt_services)
        FT_Destroy_Class_sfnt_services(library, container->sfnt_services);
d87 3
a89 2
      if(container->tt_cmap_classes)
        FT_Destroy_Class_tt_cmap_classes(library, container->tt_cmap_classes);
d113 3
a115 2
    error = FT_Create_Class_sfnt_services(library, &container->sfnt_services);
    if(error) 
d117 3
a119 2
    error = FT_Create_Class_tt_cmap_classes(library, &container->tt_cmap_classes);
    if(error) 
d121 9
a129 4
    FT_Init_Class_sfnt_service_glyph_dict(library, &container->sfnt_service_glyph_dict);
    FT_Init_Class_sfnt_service_ps_name(library, &container->sfnt_service_ps_name);
    FT_Init_Class_tt_service_get_cmap_info(library, &container->tt_service_get_cmap_info);
    FT_Init_Class_sfnt_service_sfnt_table(&container->sfnt_service_sfnt_table);
d131 1
a131 1
    FT_Init_Class_sfnt_service_bdf(&container->sfnt_service_bdf);
d133 1
a133 1
    FT_Init_Class_sfnt_interface(library, &container->sfnt_interface);
d136 2
a137 2
    if(error)
      sfnt_module_class_pic_free(library);
@


1.1
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2009 by                                                      */
d63 5
a67 4
    FT_PIC_Container* pic_container = &library->pic_container;
    FT_Error        error = FT_Err_Ok;
    sfntModulePIC* container;
    FT_Memory memory = library->memory;
d72 1
a72 1
    FT_MEM_SET( container, 0, sizeof(*container) );
@

