head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.2
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.06.23.16.15.19;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	nHj0O50aY5QcUcQ4;

1.5
date	2016.05.29.11.57.13;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	1dOLexdOAzW2mQjp;

1.4
date	2015.06.28.08.27.49;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	qXwIGV2h9uFjxAmt;

1.3
date	2013.01.04.16.51.58;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.25.20.49.55;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.44.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.44.52;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.32.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  psconv.h                                                               */
/*                                                                         */
/*    Some convenience conversions (specification).                        */
/*                                                                         */
/*  Copyright 2006-2017 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef PSCONV_H_
#define PSCONV_H_


#include <ft2build.h>
#include FT_INTERNAL_POSTSCRIPT_AUX_H

FT_BEGIN_HEADER


  FT_LOCAL( FT_Long )
  PS_Conv_Strtol( FT_Byte**  cursor,
                  FT_Byte*   limit,
                  FT_Long    base );


  FT_LOCAL( FT_Long )
  PS_Conv_ToInt( FT_Byte**  cursor,
                 FT_Byte*   limit );

  FT_LOCAL( FT_Fixed )
  PS_Conv_ToFixed( FT_Byte**  cursor,
                   FT_Byte*   limit,
                   FT_Long    power_ten );

#if 0
  FT_LOCAL( FT_UInt )
  PS_Conv_StringDecode( FT_Byte**  cursor,
                        FT_Byte*   limit,
                        FT_Byte*   buffer,
                        FT_Offset  n );
#endif

  FT_LOCAL( FT_UInt )
  PS_Conv_ASCIIHexDecode( FT_Byte**  cursor,
                          FT_Byte*   limit,
                          FT_Byte*   buffer,
                          FT_Offset  n );

  FT_LOCAL( FT_UInt )
  PS_Conv_EexecDecode( FT_Byte**   cursor,
                       FT_Byte*    limit,
                       FT_Byte*    buffer,
                       FT_Offset   n,
                       FT_UShort*  seed );


FT_END_HEADER

#endif /* PSCONV_H_ */


/* END */
@


1.5
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2006-2016 by                                                 */
@


1.4
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2006-2015 by                                                 */
d19 2
a20 2
#ifndef __PSCONV_H__
#define __PSCONV_H__
d68 1
a68 1
#endif /* __PSCONV_H__ */
@


1.3
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2006, 2012 by                                                */
@


1.2
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d7 1
a7 1
/*  Copyright 2006 by                                                      */
d29 1
a29 1
  FT_LOCAL( FT_Int )
d32 1
a32 1
                  FT_Int     base );
d35 1
a35 1
  FT_LOCAL( FT_Int )
d42 1
a42 1
                   FT_Int     power_ten );
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
                        FT_UInt    n );
d56 1
a56 1
                          FT_UInt    n );
d62 1
a62 1
                       FT_UInt     n,
a64 36

#define IS_PS_NEWLINE( ch ) \
  ( ( ch ) == '\r' ||       \
    ( ch ) == '\n' )

#define IS_PS_SPACE( ch )  \
  ( ( ch ) == ' '       || \
    IS_PS_NEWLINE( ch ) || \
    ( ch ) == '\t'      || \
    ( ch ) == '\f'      || \
    ( ch ) == '\0' )

#define IS_PS_SPECIAL( ch ) \
  ( ( ch ) == '/' ||        \
    ( ch ) == '(' ||        \
    ( ch ) == ')' ||        \
    ( ch ) == '<' ||        \
    ( ch ) == '>' ||        \
    ( ch ) == '[' ||        \
    ( ch ) == ']' ||        \
    ( ch ) == '{' ||        \
    ( ch ) == '}' ||        \
    ( ch ) == '%' )

#define IS_PS_DELIM( ch )  \
  ( IS_PS_SPACE( ch )   || \
    IS_PS_SPECIAL( ch ) )

#define IS_PS_DIGIT( ch )  ( ( ch ) >= '0' && ( ch ) <= '9' )

#define IS_PS_XDIGIT( ch )                \
  ( IS_PS_DIGIT( ( ch ) )              || \
    ( ( ch ) >= 'A' && ( ch ) <= 'F' ) || \
    ( ( ch ) >= 'a' && ( ch ) <= 'f' ) )

#define IS_PS_BASE85( ch ) ( ( ch ) >= '!' && ( ch ) <= 'u' )
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d66 36
@

