head	1.28;
access;
symbols
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.22.0.2
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.2
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.2
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@# @;


1.28
date	2017.01.13.11.19.59;	author dcoppa;	state Exp;
branches;
next	1.27;
commitid	ESXG9TuEmwmBXggf;

1.27
date	2016.10.28.21.41.14;	author dcoppa;	state Exp;
branches;
next	1.26;
commitid	T2hf37tVZU8TmjB1;

1.26
date	2016.08.09.07.16.08;	author dcoppa;	state Exp;
branches;
next	1.25;
commitid	C8TgUUJolulx9B5d;

1.25
date	2016.05.29.11.57.10;	author dcoppa;	state Exp;
branches;
next	1.24;
commitid	1dOLexdOAzW2mQjp;

1.24
date	2015.12.07.09.34.02;	author dcoppa;	state Exp;
branches;
next	1.23;
commitid	wZOPiDmcwgRFTDVL;

1.23
date	2015.10.19.07.51.34;	author dcoppa;	state Exp;
branches;
next	1.22;
commitid	d2XmJCtYff11VIDu;

1.22
date	2015.06.28.08.27.45;	author dcoppa;	state Exp;
branches;
next	1.21;
commitid	qXwIGV2h9uFjxAmt;

1.21
date	2015.01.10.17.17.22;	author dcoppa;	state Exp;
branches;
next	1.20;
commitid	2tSYQMWVSV3t7clo;

1.20
date	2014.12.26.17.52.34;	author dcoppa;	state Exp;
branches;
next	1.19;
commitid	gwhRExMduYqoPQHI;

1.19
date	2014.03.14.08.17.59;	author dcoppa;	state Exp;
branches;
next	1.18;

1.18
date	2014.01.12.15.08.25;	author matthieu;	state Exp;
branches;
next	1.17;

1.17
date	2013.10.10.19.49.35;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.07.17.21.07;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.04.16.51.56;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.07.16.45.03;	author dcoppa;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.14.09.45.46;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.19.11.32.45;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.30.10.14.50;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.28.19.01.22;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.18.20.29.56;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.19.16.08.12;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.23.19.30.16;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.01.19.14.24;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.25.20.32.36;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.26.07.31.44;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.10.20.28.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.21.05.09.09;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.46.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.46.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.33.48;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.28
log
@
Update to FreeType-2.7.1

i386 bulk build by sthen@@
amd64 bulk build by naddy@@

OK matthieu@@
@
text
@# This file is part of the FreeType project.
#
# Process this file with autoconf to produce a configure script.
#
# Copyright 2001-2016 by
# David Turner, Robert Wilhelm, and Werner Lemberg.
#
# This file is part of the FreeType project, and may only be used, modified,
# and distributed under the terms of the FreeType project license,
# LICENSE.TXT.  By continuing to use, modify, or distribute this file you
# indicate that you have read the license and understand and accept it
# fully.

AC_INIT([FreeType], [2.7.1], [freetype@@nongnu.org], [freetype])
AC_CONFIG_SRCDIR([ftconfig.in])


# Don't forget to update `docs/VERSIONS.TXT'!

version_info='19:0:13'
AC_SUBST([version_info])
ft_version=`echo $version_info | tr : .`
AC_SUBST([ft_version])


# checks for system type

AC_CANONICAL_HOST


# checks for programs

AC_PROG_CC
AC_PROG_CPP
AC_SUBST(EXEEXT)

PKG_PROG_PKG_CONFIG([0.24])

LT_INIT(win32-dll)


# checks for native programs to generate building tool

if test ${cross_compiling} = yes; then
  AC_CHECK_PROG(CC_BUILD, ${build}-gcc, ${build}-gcc)
  test -z "${CC_BUILD}" && AC_CHECK_PROG(CC_BUILD, gcc, gcc)
  test -z "${CC_BUILD}" && AC_CHECK_PROG(CC_BUILD, cc, cc, , , /usr/ucb/cc)
  test -z "${CC_BUILD}" && AC_MSG_ERROR([cannot find native C compiler])

  AC_MSG_CHECKING([for suffix of native executables])
  rm -f a.* b.* a_out.exe conftest.*
  echo > conftest.c "int main() { return 0;}"
  ${CC_BUILD} conftest.c || AC_MSG_ERROR([native C compiler is not working])
  rm -f conftest.c
  if test -x a.out -o -x b.out -o -x conftest; then
    EXEEXT_BUILD=""
  elif test -x a_out.exe -o -x conftest.exe; then
    EXEEXT_BUILD=".exe"
  elif test -x conftest.*; then
    EXEEXT_BUILD=`echo conftest.* | sed -n '1s/^.*\././'`
  fi
  rm -f a.* b.* a_out.exe conftest.*
  AC_MSG_RESULT($EXEEXT_BUILD)
else
  CC_BUILD=${CC}
  EXEEXT_BUILD=${EXEEXT}
fi

AC_SUBST(CC_BUILD)
AC_SUBST(EXEEXT_BUILD)


# Since these files will be eventually called from another directory (namely
# from the top level) we make the path of the scripts absolute.
#
# This small code snippet has been taken from automake's `ylwrap' script.

AC_PROG_INSTALL
case "$INSTALL" in
[[\\/]]* | ?:[[\\/]]*)
  ;;
*[[\\/]]*)
  INSTALL="`pwd`/$INSTALL"
  ;;
esac

AC_PROG_MKDIR_P
case "$MKDIR_P" in
[[\\/]]* | ?:[[\\/]]*)
  ;;
*[[\\/]]*)
  MKDIR_P="`pwd`/$MKDIR_P"
  ;;
esac


# checks for header files

AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h unistd.h])


# checks for typedefs, structures, and compiler characteristics

AC_C_CONST
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([long])
AC_TYPE_LONG_LONG_INT


# check whether cpp computation of size of int and long in ftconfig.in works

AC_MSG_CHECKING([whether cpp computation of bit length in ftconfig.in works])
orig_CPPFLAGS="${CPPFLAGS}"
CPPFLAGS="-I${srcdir} -I. ${CPPFLAGS}"

ac_clean_files=
for f in ft2build.h ftoption.h ftstdlib.h; do
  if test ! -f $f; then
    ac_clean_files="$ac_clean_files $f"
    touch $f
  fi
done

cat > conftest.c <<\_ACEOF
#include <limits.h>
#define FT_CONFIG_OPTIONS_H "ftoption.h"
#define FT_CONFIG_STANDARD_LIBRARY_H "ftstdlib.h"
#define FT_UINT_MAX  UINT_MAX
#define FT_ULONG_MAX ULONG_MAX
#include "ftconfig.in"
_ACEOF
echo >> conftest.c "#if FT_SIZEOF_INT == "${ac_cv_sizeof_int}
echo >> conftest.c "ac_cpp_ft_sizeof_int="${ac_cv_sizeof_int}
echo >> conftest.c "#endif"
echo >> conftest.c "#if FT_SIZEOF_LONG == "${ac_cv_sizeof_long}
echo >> conftest.c "ac_cpp_ft_sizeof_long="${ac_cv_sizeof_long}
echo >> conftest.c "#endif"

${CPP} ${CPPFLAGS} conftest.c | ${GREP} ac_cpp_ft > conftest.sh
eval `cat conftest.sh`
rm -f conftest.* $ac_clean_files

if test x != "x${ac_cpp_ft_sizeof_int}" \
   -a x != x"${ac_cpp_ft_sizeof_long}"; then
  unset ft_use_autoconf_sizeof_types
else
  ft_use_autoconf_sizeof_types=yes
fi

AC_ARG_ENABLE(biarch-config,
[  --enable-biarch-config  install biarch ftconfig.h to support multiple
                          architectures by single file], [], [])

case :${ft_use_autoconf_sizeof_types}:${enable_biarch_config}: in
  :yes:yes:)
    AC_MSG_RESULT([broken but use it])
    unset ft_use_autoconf_sizeof_types
    ;;
  ::no:)
    AC_MSG_RESULT([works but ignore it])
    ft_use_autoconf_sizeof_types=yes
    ;;
  ::yes: | :::)
    AC_MSG_RESULT([yes])
    unset ft_use_autoconf_sizeof_types
    ;;
  *)
    AC_MSG_RESULT([no])
    ft_use_autoconf_sizeof_types=yes
    ;;
esac

if test x"${ft_use_autoconf_sizeof_types}" = xyes; then
  AC_DEFINE([FT_USE_AUTOCONF_SIZEOF_TYPES], [],
            [Define if autoconf sizeof types should be used.])
fi

CPPFLAGS="${orig_CPPFLAGS}"


# checks for library functions

AC_SYS_LARGEFILE

# Here we check whether we can use our mmap file component.

AC_ARG_ENABLE([mmap],
  AS_HELP_STRING([--disable-mmap],
                 [do not check mmap() and do not use]),
  [enable_mmap="no"],[enable_mmap="yes"])
if test "x${enable_mmap}" != "xno"; then
  AC_FUNC_MMAP
fi
if test "x${enable_mmap}" = "xno" \
   -o "$ac_cv_func_mmap_fixed_mapped" != "yes"; then
  FTSYS_SRC='$(BASE_DIR)/ftsystem.c'
else
  FTSYS_SRC='$(BUILD_DIR)/ftsystem.c'

  AC_CHECK_DECLS([munmap],
    [],
    [],
    [

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/mman.h>

    ])

  FT_MUNMAP_PARAM
fi
AC_SUBST([FTSYS_SRC])

AC_CHECK_FUNCS([memcpy memmove])


# get compiler flags right
#
#   We try to make the compiler work for C89-strict source.  Even if the
#   C compiler is gcc and C89 flags are available, some system headers
#   (e.g., Android Bionic libc) are broken in C89 mode.  We have to check
#   whether the compilation finishes successfully.
#
#   Due to bugs in mingwrt 4.0.3 we don't use `-ansi' for MinGW.
#
#   To avoid zillions of
#
#     ISO C90 does not support 'long long'
#
#   warnings, we disable `-pedantic' for gcc version < 4.6.
#
if test "x$GCC" = xyes; then
  XX_CFLAGS="-Wall"
  case "$host" in
  *-*-mingw*)
    XX_ANSIFLAGS="-pedantic"
    ;;
  *-*-aix*)
    XX_ANSIFLAGS="-pedantic"
    ;;
  *)
    GCC_VERSION=`$CC -dumpversion`
    GCC_MAJOR=`echo "$GCC_VERSION" | sed 's/\([[^.]][[^.]]*\).*/\1/'`
    GCC_MINOR=`echo "$GCC_VERSION" | sed 's/[[^.]][[^.]]*.\([[^.]][[^.]]*\).*/\1/'`

    XX_PEDANTIC=-pedantic
    if test $GCC_MAJOR -lt 4; then
      XX_PEDANTIC=
    else
      if test $GCC_MAJOR -eq 4 -a $GCC_MINOR -lt 6; then
        XX_PEDANTIC=
      fi
    fi

    XX_ANSIFLAGS=""
    for a in $XX_PEDANTIC -ansi
    do
      AC_MSG_CHECKING([gcc compiler flag ${a} to assure ANSI C works correctly])
      orig_CFLAGS="${CFLAGS}"
      CFLAGS="${CFLAGS} ${XX_ANSIFLAGS} ${a}"
      AC_COMPILE_IFELSE([
        AC_LANG_PROGRAM([

#include <stdio.h>

          ],
          [

            {
              puts( "" );
              return 0;
            }

          ])],
        [AC_MSG_RESULT([ok, add it to XX_ANSIFLAGS])
         XX_ANSIFLAGS="${XX_ANSIFLAGS} ${a}"
        ],
        [AC_MSG_RESULT([no])])
      CFLAGS="${orig_CFLAGS}"
    done
    ;;
  esac
else
  case "$host" in
  *-dec-osf*)
    CFLAGS=
    XX_CFLAGS="-std1 -g3"
    XX_ANSIFLAGS=
    ;;
  *)
    XX_CFLAGS=
    XX_ANSIFLAGS=
    ;;
  esac
fi
AC_SUBST([XX_CFLAGS])
AC_SUBST([XX_ANSIFLAGS])


# All library tests below try `pkg-config' first.  If that fails, a function
# from the library is tested in the traditional autoconf way (zlib, bzip2),
# or a config script is called (libpng).
#
# The `xxx_reqpriv' variables are for the `Requires.private' field in
# `freetype2.pc'.  The `xxx_libspriv' variables are for the `Libs.private'
# field in `freetype2.pc' if pkg-config doesn't find a proper .pc file.
#
# The `xxx_libsstaticconf' variables are for the `freetype-config' script.
#
# Note that a call to PKG_CHECK_MODULES(XXX, ...) sets and creates the
# output variables `XXX_CFLAGS' and `XXX_LIBS'.  In case one or both are set
# for a library by the user, no entry for this library is added to
# `Requires.private'.  Instead, it gets added to `Libs.private'


# check for system zlib

AC_ARG_WITH([zlib],
  [AS_HELP_STRING([--with-zlib=@@<:@@yes|no|auto@@:>@@],
                  [use system zlib instead of internal library @@<:@@default=auto@@:>@@])],
  [], [with_zlib=auto])

have_zlib=no
if test x"$with_zlib" = xyes -o x"$with_zlib" = xauto; then
  zlib_pkg="zlib"
  have_zlib_pkg=no

  if test x"$ZLIB_CFLAGS" = x -a x"$ZLIB_LIBS" = x; then
    PKG_CHECK_EXISTS([$zlib_pkg], [have_zlib_pkg=yes])
  fi
  PKG_CHECK_MODULES([ZLIB], [$zlib_pkg],
                    [have_zlib="yes (pkg-config)"], [:])

  if test $have_zlib_pkg = yes; then
    # we have zlib.pc
    zlib_reqpriv="$zlib_pkg"
    zlib_libspriv=
    zlib_libsstaticconf=`$PKG_CONFIG --static --libs "$zlib_pkg"`
  else
    zlib_reqpriv=

    if test "$have_zlib" != no; then
      # ZLIB_CFLAGS and ZLIB_LIBS are set by the user
      zlib_libspriv="$ZLIB_LIBS"
      zlib_libsstaticconf="$ZLIB_LIBS"
      have_zlib="yes (ZLIB_CFLAGS and ZLIB_LIBS)"
    else
      # fall back to standard autoconf test
      AC_CHECK_LIB([z],
                   [gzsetparams],
                   [AC_CHECK_HEADER([zlib.h],
                                    [have_zlib="yes (autoconf test)"
                                     zlib_libspriv="-lz"
                                     zlib_libsstaticconf="$zlib_libspriv"
                                     ZLIB_LIBS="$zlib_libspriv"])])
    fi
  fi
fi

if test x"$with_zlib" = xyes -a "$have_zlib" = no; then
  AC_MSG_ERROR([external zlib support requested but library not found])
fi


# check for system libbz2

AC_ARG_WITH([bzip2],
  [AS_HELP_STRING([--with-bzip2=@@<:@@yes|no|auto@@:>@@],
                  [support bzip2 compressed fonts @@<:@@default=auto@@:>@@])],
  [], [with_bzip2=auto])

have_bzip2=no
if test x"$with_bzip2" = xyes -o x"$with_bzip2" = xauto; then
  bzip2_pkg="bzip2"
  have_bzip2_pkg=no

  if test x"$BZIP2_CFLAGS" = x -a x"$BZIP2_LIBS" = x; then
    PKG_CHECK_EXISTS([$bzip2_pkg], [have_bzip2_pkg=yes])
  fi
  PKG_CHECK_MODULES([BZIP2], [$bzip2_pkg],
                    [have_bzip2="yes (pkg-config)"], [:])

  if test $have_bzip2_pkg = yes; then
    # we have bzip2.pc
    bzip2_reqpriv="$bzip2_pkg"
    bzip2_libspriv=
    bzip2_libsstaticconf=`$PKG_CONFIG --static --libs "$bzip2_pkg"`
  else
    bzip2_reqpriv=

    if test "$have_bzip2" != no; then
      # BZIP2_CFLAGS and BZIP2_LIBS are set by the user
      bzip2_libspriv="$BZIP2_LIBS"
      bzip2_libsstaticconf="$BZIP2_LIBS"
      have_bzip2="yes (BZIP2_CFLAGS and BZIP2_LIBS)"
    else
      # fall back to standard autoconf test
      AC_CHECK_LIB([bz2],
                   [BZ2_bzDecompress],
                   [AC_CHECK_HEADER([bzlib.h],
                                    [have_bzip2="yes (autoconf test)"
                                     bzip2_libspriv="-lbz2"
                                     bzip2_libsstaticconf="$bzip2_libspriv"
                                     BZIP2_LIBS="$bzip2_libspriv"])])
    fi
  fi
fi

if test x"$with_bzip2" = xyes -a "$have_bzip2" = no; then
  AC_MSG_ERROR([bzip2 support requested but library not found])
fi


# check for system libpng

AC_ARG_WITH([png],
  [AS_HELP_STRING([--with-png=@@<:@@yes|no|auto@@:>@@],
                  [support png compressed OpenType embedded bitmaps @@<:@@default=auto@@:>@@])],
  [], [with_png=auto])

have_libpng=no
if test x"$with_png" = xyes -o x"$with_png" = xauto; then
  libpng_pkg="libpng"
  have_libpng_pkg=no

  if test x"$LIBPNG_CFLAGS" = x -a x"$LIBPNG_LIBS" = x; then
    PKG_CHECK_EXISTS([$libpng_pkg], [have_libpng_pkg=yes])
  fi
  PKG_CHECK_MODULES([LIBPNG], [$libpng_pkg],
                    [have_libpng="yes (pkg-config)"], [:])

  if test $have_libpng_pkg = yes; then
    # we have libpng.pc
    libpng_reqpriv="$libpng_pkg"
    libpng_libspriv=
    libpng_libsstaticconf=`$PKG_CONFIG --static --libs "$libpng_pkg"`
  else
    libpng_reqpriv=

    if test "$have_libpng" != no; then
      # LIBPNG_CFLAGS and LIBPNG_LIBS are set by the user
      libpng_libspriv="$LIBPNG_LIBS"
      libpng_libsstaticconf="$LIBPNG_LIBS"
      have_libpng="yes (LIBPNG_CFLAGS and LIBPNG_LIBS)"
    else
      # fall back to config script.
      AC_MSG_CHECKING([for libpng-config])
      if which libpng-config > /dev/null 2>&1; then
        LIBPNG_CFLAGS=`libpng-config --cflags`
        LIBPNG_LIBS=`libpng-config --ldflags`
        libpng_libspriv=`libpng-config --static --ldflags`
        libpng_libsstaticconf="$libpng_libspriv"
        have_libpng="yes (libpng-config)"
        AC_MSG_RESULT([yes])
      else
        AC_MSG_RESULT([no])
      fi
    fi
  fi
fi

if test x"$with_png" = xyes -a "$have_libpng" = no; then
  AC_MSG_ERROR([libpng support requested but library not found])
fi


# check for system libharfbuzz

AC_ARG_WITH([harfbuzz],
  [AS_HELP_STRING([--with-harfbuzz=@@<:@@yes|no|auto@@:>@@],
                  [improve auto-hinting of OpenType fonts @@<:@@default=auto@@:>@@])],
  [], [with_harfbuzz=auto])

have_harfbuzz=no
if test x"$with_harfbuzz" = xyes -o x"$with_harfbuzz" = xauto; then
  harfbuzz_pkg="harfbuzz >= 0.9.21"
  have_harfbuzz_pkg=no

  if test x"$HARFBUZZ_CFLAGS" = x -a x"$HARFBUZZ_LIBS" = x; then
    PKG_CHECK_EXISTS([$harfbuzz_pkg], [have_harfbuzz_pkg=yes])
  fi
  PKG_CHECK_MODULES([HARFBUZZ], [$harfbuzz_pkg],
                    [have_harfbuzz="yes (pkg-config)"], [:])

  if test $have_harfbuzz_pkg = yes; then
    # we have harfbuzz.pc
    harfbuzz_reqpriv="$harfbuzz_pkg"
    harfbuzz_libspriv=
    harfbuzz_libsstaticconf=`$PKG_CONFIG --static --libs "$harfbuzz_pkg"`
  else
    harfbuzz_reqpriv=

    if test "$have_harfbuzz" != no; then
      # HARFBUZZ_CFLAGS and HARFBUZZ_LIBS are set by the user
      harfbuzz_libspriv="$HARFBUZZ_LIBS"
      harfbuzz_libsstaticconf="$HARFBUZZ_LIBS"
      have_harfbuzz="yes (HARFBUZZ_CFLAGS and HARFBUZZ_LIBS)"
    else
      # since HarfBuzz is quite a new library we don't fall back to a
      # different test; additionally, it has too many dependencies
      :
    fi
  fi
fi

if test x"$with_harfbuzz" = xyes -a "$have_harfbuzz" = no; then
  AC_MSG_ERROR([harfbuzz support requested but library not found])
fi


# Some options handling SDKs/archs in CFLAGS should be copied
# to LDFLAGS. Apple TechNote 2137 recommends to include these
# options in CFLAGS but not in LDFLAGS.

save_config_args=$*
set dummy ${CFLAGS}
i=1
while test $i -le $#
do
  c=$1

  case "${c}" in
  -isysroot|-arch) # options taking 1 argument
    a=$2
    AC_MSG_CHECKING([whether CFLAGS and LDFLAGS share ${c} ${a}])
    if expr " ${LDFLAGS} " : ".* ${c} *${a}.*" > /dev/null
    then
      AC_MSG_RESULT([yes])
    else
      AC_MSG_RESULT([no, copy to LDFLAGS])
      LDFLAGS="${LDFLAGS} ${c} ${a}"
    fi
    shift 1
    ;;
  -m32|-m64|-march=*|-mcpu=*) # options taking no argument
    AC_MSG_CHECKING([whether CFLAGS and LDFLAGS share ${c}])
    if expr " ${LDFLAGS} " : ".* ${c} *${a}.*" > /dev/null
    then
      AC_MSG_RESULT([yes])
    else
      AC_MSG_RESULT([no, copy to LDFLAGS])
      LDFLAGS="${LDFLAGS} ${c}"
    fi
    ;;
  # *)
  #   AC_MSG_RESULT([${c} is not copied to LDFLAGS])
  #   ;;
  esac

  shift 1
done
set ${save_config_args}


# Whether to use Mac OS resource-based fonts.

ftmac_c="" # src/base/ftmac.c should not be included in makefiles by default

AC_ARG_WITH([old-mac-fonts],
  AS_HELP_STRING([--with-old-mac-fonts],
                 [allow Mac resource-based fonts to be used]))
if test x$with_old_mac_fonts = xyes; then
  orig_LDFLAGS="${LDFLAGS}"
  AC_MSG_CHECKING([CoreServices & ApplicationServices of Mac OS X])
  ft2_extra_libs="-Wl,-framework,CoreServices -Wl,-framework,ApplicationServices"
  LDFLAGS="$LDFLAGS $ft2_extra_libs"
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

      ],
      [

        short res = 0;


        UseResFile( res );

      ])],
    [AC_MSG_RESULT([ok])
     ftmac_c='ftmac.c'
     AC_MSG_CHECKING([whether OS_INLINE macro is ANSI compatible])
     orig_CFLAGS="$CFLAGS -DFT_MACINTOSH"
     CFLAGS="$CFLAGS $XX_CFLAGS $XX_ANSIFLAGS"
     AC_COMPILE_IFELSE([
       AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

         ],
         [

           /* OSHostByteOrder() is typed as OS_INLINE */
           int32_t  os_byte_order = OSHostByteOrder();


           if ( OSBigEndian != os_byte_order )
             return 1;

         ])],
       [AC_MSG_RESULT([ok])
        CFLAGS="$orig_CFLAGS"
        CFLAGS="$CFLAGS -DHAVE_ANSI_OS_INLINE=1"
       ],
       [AC_MSG_RESULT([no, ANSI incompatible])
        CFLAGS="$orig_CFLAGS"
       ])
     AC_MSG_CHECKING([type ResourceIndex])
     orig_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $XX_CFLAGS $XX_ANSIFLAGS"
     AC_COMPILE_IFELSE([
       AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
# include <Resources.h>
#endif

         ],
         [

           ResourceIndex i = 0;
           return i;

         ])],
       [AC_MSG_RESULT([ok])
        CFLAGS="$orig_CFLAGS"
        CFLAGS="$CFLAGS -DHAVE_TYPE_RESOURCE_INDEX=1"
       ],
       [AC_MSG_RESULT([no])
        CFLAGS="$orig_CFLAGS"
        CFLAGS="$CFLAGS -DHAVE_TYPE_RESOURCE_INDEX=0"
       ])],
    [AC_MSG_RESULT([not found])
     ft2_extra_libs=""
     LDFLAGS="${orig_LDFLAGS}"
     CFLAGS="$CFLAGS -DDARWIN_NO_CARBON"])
else
  case x$host_os in
  xdarwin*)
    dnl AC_MSG_WARN([host system is MacOS but configured to build without Carbon])
    CFLAGS="$CFLAGS -DDARWIN_NO_CARBON"
    ;;
  *)
    ;;
  esac
fi


# Whether to use FileManager, which is deprecated since Mac OS X 10.4.

AC_ARG_WITH([fsspec],
  AS_HELP_STRING([--with-fsspec],
                 [use obsolete FSSpec API of MacOS, if available (default=yes)]))
if test x$with_fsspec = xno; then
  CFLAGS="$CFLAGS -DHAVE_FSSPEC=0"
elif test x$with_old_mac_fonts = xyes -a x$with_fsspec != x; then
  AC_MSG_CHECKING([FSSpec-based FileManager])
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

      ],
      [

        FCBPBPtr          paramBlock;
        short             vRefNum;
        long              dirID;
        ConstStr255Param  fileName;
        FSSpec*           spec;


        /* FSSpec functions: deprecated since Mac OS X 10.4 */
        PBGetFCBInfoSync( paramBlock );
        FSMakeFSSpec( vRefNum, dirID, fileName, spec );

      ])],
    [AC_MSG_RESULT([ok])
     CFLAGS="$CFLAGS -DHAVE_FSSPEC=1"],
    [AC_MSG_RESULT([not found])
     CFLAGS="$CFLAGS -DHAVE_FSSPEC=0"])
fi


# Whether to use FileManager in Carbon since MacOS 9.x.

AC_ARG_WITH([fsref],
  AS_HELP_STRING([--with-fsref],
                 [use Carbon FSRef API of MacOS, if available (default=yes)]))
if test x$with_fsref = xno; then
  AC_MSG_WARN([
*** WARNING
    FreeType2 built without FSRef API cannot load
    data-fork fonts on MacOS, except of XXX.dfont.
    ])
  CFLAGS="$CFLAGS -DHAVE_FSREF=0"
elif test x$with_old_mac_fonts = xyes -a x$with_fsref != x; then
  AC_MSG_CHECKING([FSRef-based FileManager])
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

      ],
      [

        short                vRefNum;
        long                 dirID;
        ConstStr255Param     fileName;

        Boolean*             isDirectory;
        UInt8*               path;
        SInt16               desiredRefNum;
        SInt16*              iterator;
        SInt16*              actualRefNum;
        HFSUniStr255*        outForkName;
        FSVolumeRefNum       volume;
        FSCatalogInfoBitmap  whichInfo;
        FSCatalogInfo*       catalogInfo;
        FSForkInfo*          forkInfo;
        FSRef*               ref;

#if HAVE_FSSPEC
        FSSpec*              spec;
#endif

        /* FSRef functions: no need to check? */
        FSGetForkCBInfo( desiredRefNum, volume, iterator,
                         actualRefNum, forkInfo, ref,
                         outForkName );
        FSPathMakeRef( path, ref, isDirectory );

#if HAVE_FSSPEC
        FSpMakeFSRef ( spec, ref );
        FSGetCatalogInfo( ref, whichInfo, catalogInfo,
                          outForkName, spec, ref );
#endif
      ])],
    [AC_MSG_RESULT([ok])
     CFLAGS="$CFLAGS -DHAVE_FSREF=1"],
    [AC_MSG_RESULT([not found])
     CFLAGS="$CFLAGS -DHAVE_FSREF=0"])
fi


# Whether to use QuickDraw API in ToolBox, which is deprecated since
# Mac OS X 10.4.

AC_ARG_WITH([quickdraw-toolbox],
  AS_HELP_STRING([--with-quickdraw-toolbox],
                 [use MacOS QuickDraw in ToolBox, if available (default=yes)]))
if test x$with_quickdraw_toolbox = xno; then
  CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_TOOLBOX=0"
elif test x$with_old_mac_fonts = xyes -a x$with_quickdraw_toolbox != x; then
  AC_MSG_CHECKING([QuickDraw FontManager functions in ToolBox])
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Fonts.h>
#endif

      ],
      [

        Str255     familyName;
        SInt16     familyID   = 0;
        FMInput*   fmIn       = NULL;
        FMOutput*  fmOut      = NULL;


        GetFontName( familyID, familyName );
        GetFNum( familyName, &familyID );
        fmOut = FMSwapFont( fmIn );

      ])],
    [AC_MSG_RESULT([ok])
     CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_TOOLBOX=1"],
    [AC_MSG_RESULT([not found])
     CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_TOOLBOX=0"])
fi


# Whether to use QuickDraw API in Carbon, which is deprecated since
# Mac OS X 10.4.

AC_ARG_WITH([quickdraw-carbon],
  AS_HELP_STRING([--with-quickdraw-carbon],
                 [use MacOS QuickDraw in Carbon, if available (default=yes)]))
if test x$with_quickdraw_carbon = xno; then
  CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_CARBON=0"
elif test x$with_old_mac_fonts = xyes -a x$with_quickdraw_carbon != x; then
  AC_MSG_CHECKING([QuickDraw FontManager functions in Carbon])
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Fonts.h>
#endif

      ],
      [

        FMFontFamilyIterator          famIter;
        FMFontFamily                  family;
        Str255                        famNameStr;
        FMFontFamilyInstanceIterator  instIter;
        FMFontStyle                   style;
        FMFontSize                    size;
        FMFont                        font;
        FSSpec*                       pathSpec;


        FMCreateFontFamilyIterator( NULL, NULL, kFMUseGlobalScopeOption,
                                    &famIter );
        FMGetNextFontFamily( &famIter, &family );
        FMGetFontFamilyName( family, famNameStr );
        FMCreateFontFamilyInstanceIterator( family, &instIter );
        FMGetNextFontFamilyInstance( &instIter, &font, &style, &size );
        FMDisposeFontFamilyInstanceIterator( &instIter );
        FMDisposeFontFamilyIterator( &famIter );
        FMGetFontContainer( font, pathSpec );

      ])],
    [AC_MSG_RESULT([ok])
     CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_CARBON=1"],
    [AC_MSG_RESULT([not found])
     CFLAGS="$CFLAGS -DHAVE_QUICKDRAW_CARBON=0"])
fi


# Whether to use AppleTypeService since Mac OS X.

AC_ARG_WITH([ats],
  AS_HELP_STRING([--with-ats],
                 [use AppleTypeService, if available (default=yes)]))
if test x$with_ats = xno; then
  CFLAGS="$CFLAGS -DHAVE_ATS=0"
elif test x$with_old_mac_fonts = xyes -a x$with_ats != x; then
  AC_MSG_CHECKING([AppleTypeService functions])
  AC_LINK_IFELSE([
    AC_LANG_PROGRAM([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <CoreServices/CoreServices.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

      ],
      [

        FSSpec*  pathSpec;


        ATSFontFindFromName( NULL, kATSOptionFlagsUnRestrictedScope );
#if HAVE_FSSPEC
        ATSFontGetFileSpecification( 0, pathSpec );
#endif

      ])],
    [AC_MSG_RESULT([ok])
     CFLAGS="$CFLAGS -DHAVE_ATS=1"],
    [AC_MSG_RESULT([not found])
     CFLAGS="$CFLAGS -DHAVE_ATS=0"])
fi

case "$CFLAGS" in
  *HAVE_FSSPEC* | *HAVE_FSREF* | *HAVE_QUICKDRAW* | *HAVE_ATS* )
    AC_MSG_WARN([
*** WARNING
    FSSpec/FSRef/QuickDraw/ATS options are explicitly given,
    thus it is recommended to replace src/base/ftmac.c by builds/mac/ftmac.c.
    ])
    CFLAGS="$CFLAGS "'-I$(TOP_DIR)/builds/mac/'
    ;;
  *)
    ;;
esac


# entries in Requires.private are separated by commas;
REQUIRES_PRIVATE="$zlib_reqpriv,     \
                  $bzip2_reqpriv,    \
                  $libpng_reqpriv,   \
                  $harfbuzz_reqpriv"
# beautify
REQUIRES_PRIVATE=`echo "$REQUIRES_PRIVATE" \
                  | sed -e 's/^  *//'      \
                        -e 's/  *$//'      \
                        -e 's/, */,/g'     \
                        -e 's/,,*/,/g'     \
                        -e 's/^,*//'       \
                        -e 's/,*$//'       \
                        -e 's/,/, /g'`

LIBS_PRIVATE="$zlib_libspriv     \
              $bzip2_libspriv    \
              $libpng_libspriv   \
              $harfbuzz_libspriv \
              $ft2_extra_libs"
# beautify
LIBS_PRIVATE=`echo "$LIBS_PRIVATE"  \
              | sed -e 's/^  *//'   \
                    -e 's/  *$//'   \
                    -e 's/  */ /g'`

LIBSSTATIC_CONFIG="-lfreetype               \
                   $zlib_libsstaticconf     \
                   $bzip2_libsstaticconf    \
                   $libpng_libsstaticconf   \
                   $harfbuzz_libsstaticconf \
                   $ft2_extra_libs"
# remove -L/usr/lib and -L/usr/lib64 since `freetype-config' adds them later
# on if necessary; also beautify
LIBSSTATIC_CONFIG=`echo "$LIBSSTATIC_CONFIG"          \
                   | sed -e 's|-L */usr/lib64/* | |g' \
                         -e 's|-L */usr/lib/* | |g'   \
                         -e 's/^  *//'                \
                         -e 's/  *$//'                \
                         -e 's/  */ /g'`


AC_SUBST([ftmac_c])
AC_SUBST([REQUIRES_PRIVATE])
AC_SUBST([LIBS_PRIVATE])
AC_SUBST([LIBSSTATIC_CONFIG])

AC_SUBST([hardcode_libdir_flag_spec])
AC_SUBST([wl])
AC_SUBST([build_libtool_libs])


# changing LDFLAGS value should only be done after
# lt_cv_prog_compiler_static_works test

if test "$have_zlib" != no; then
  CFLAGS="$CFLAGS $ZLIB_CFLAGS -DFT_CONFIG_OPTION_SYSTEM_ZLIB"
  LDFLAGS="$LDFLAGS $ZLIB_LIBS"
fi

if test "$have_bzip2" != no; then
  CFLAGS="$CFLAGS $BZIP2_CFLAGS -DFT_CONFIG_OPTION_USE_BZIP2"
  LDFLAGS="$LDFLAGS $BZIP2_LIBS"
fi
if test "$have_libpng" != no; then
  CFLAGS="$CFLAGS $LIBPNG_CFLAGS -DFT_CONFIG_OPTION_USE_PNG"
  LDFLAGS="$LDFLAGS $LIBPNG_LIBS"
fi
if test "$have_harfbuzz" != no; then
  CFLAGS="$CFLAGS $HARFBUZZ_CFLAGS -DFT_CONFIG_OPTION_USE_HARFBUZZ"
  LDFLAGS="$LDFLAGS $HARFBUZZ_LIBS"
fi

AC_SUBST([CFLAGS])
AC_SUBST([LDFLAGS])

# configuration file -- stay in 8.3 limit
#
# since #undef doesn't survive in configuration header files we replace
# `/undef' with `#undef' after creating the output file

AC_CONFIG_HEADERS([ftconfig.h:ftconfig.in],
  [mv ftconfig.h ftconfig.tmp
   sed 's|/undef|#undef|' < ftconfig.tmp > ftconfig.h
   rm ftconfig.tmp])

# create the Unix-specific sub-Makefiles `builds/unix/unix-def.mk'
# and `builds/unix/unix-cc.mk' that will be used by the build system
#
AC_CONFIG_FILES([unix-cc.mk:unix-cc.in
                 unix-def.mk:unix-def.in])

# re-generate the Jamfile to use libtool now
#
# AC_CONFIG_FILES([../../Jamfile:../../Jamfile.in])

AC_OUTPUT

AC_MSG_NOTICE([

Library configuration:
  external zlib: $have_zlib
  bzip2:         $have_bzip2
  libpng:        $have_libpng
  harfbuzz:      $have_harfbuzz
])

# end of configure.raw
@


1.27
log
@
Update to FreeType 2.7

Now Subpixel hinting, also known as ClearType hinting, is enabled
by default.

OK matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.7], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='18:6:12'
d108 1
@


1.26
log
@
Update to FreeType 2.6.5

ok matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.6.5], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='18:5:12'
d182 2
@


1.25
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.6.3], [freetype@@nongnu.org], [freetype])
d18 1
a18 1
# Don't forget to update docs/VERSION.DLL!
d20 1
a20 1
version_info='18:3:12'
d236 3
@


1.24
log
@
Bugfixing update to freetype-2.6.2

Tested on amd64, i386, macppc, sparc64, loongson and compile-tested
on arm by matthieu@@
Also tested in a ports bulk build by naddy@@

OK matthieu@@
@
text
@d5 1
a5 1
# Copyright 2001-2015 by
d14 1
a14 1
AC_INIT([FreeType], [2.6.2], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='18:2:12'
@


1.23
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.6.1], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='18:1:12'
d73 4
a76 3
# Since this file will be finally moved to another directory we make
# the path of the install scripts absolute.  This small code snippet has
# been taken from automake's `ylwrap' script.
d80 1
a80 1
[\\/]* | ?:[\\/]*)
d82 1
a82 1
*[\\/]*)
d89 1
a89 1
[\\/]* | ?:[\\/]*)
d91 1
a91 1
*[\\/]*)
@


1.22
log
@
Update to FreeType 2.6

OK matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.6], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='18:0:12'
a72 5
# auxiliary programs

AC_CHECK_PROG([RMDIR], [rmdir], [rmdir])


d74 1
a74 1
# the path of the install script absolute.  This small code snippet has
d79 1
a79 1
/*)
d81 1
a81 1
*/*)
d86 9
d301 1
a301 1
# `freetype2.pc'.  The `xxx_libpriv' variables are for the `Libs.private'
d304 1
a304 1
# The `xxx_libstaticconf' variables are for the `freetype-config' script.
d333 2
a334 2
    zlib_libpriv=
    zlib_libstaticconf=`$PKG_CONFIG --static --libs "$zlib_pkg"`
d340 2
a341 2
      zlib_libpriv="$ZLIB_LIBS"
      zlib_libstaticconf="$ZLIB_LIBS"
d349 3
a351 3
                                     zlib_libpriv="-lz"
                                     zlib_libstaticconf="$zlib_libpriv"
                                     ZLIB_LIBS="$zlib_libpriv"])])
d382 2
a383 2
    bzip2_libpriv=
    bzip2_libstaticconf=`$PKG_CONFIG --static --libs "$bzip2_pkg"`
d389 2
a390 2
      bzip2_libpriv="$BZIP2_LIBS"
      bzip2_libstaticconf="$BZIP2_LIBS"
d398 3
a400 3
                                     bzip2_libpriv="-lbz2"
                                     bzip2_libstaticconf="$bzip2_libpriv"
                                     BZIP2_LIBS="$bzip2_libpriv"])])
d431 2
a432 2
    libpng_libpriv=
    libpng_libstaticconf=`$PKG_CONFIG --static --libs "$libpng_pkg"`
d438 2
a439 2
      libpng_libpriv="$LIBPNG_LIBS"
      libpng_libstaticconf="$LIBPNG_LIBS"
d447 2
a448 2
        libpng_libpriv=`libpng-config --static --ldflags`
        libpng_libstaticconf="$libpng_libpriv"
d472 1
a472 1
  harfbuzz_pkg="harfbuzz >= 0.9.19"
d484 2
a485 2
    harfbuzz_libpriv=
    harfbuzz_libstaticconf=`$PKG_CONFIG --static --libs "$harfbuzz_pkg"`
d491 2
a492 2
      harfbuzz_libpriv="$HARFBUZZ_LIBS"
      harfbuzz_libstaticconf="$HARFBUZZ_LIBS"
d933 4
a936 4
LIBS_PRIVATE="$zlib_libpriv     \
              $bzip2_libpriv    \
              $libpng_libpriv   \
              $harfbuzz_libpriv \
d944 5
a948 5
LIBSSTATIC_CONFIG="-lfreetype              \
                   $zlib_libstaticconf     \
                   $bzip2_libstaticconf    \
                   $libpng_libstaticconf   \
                   $harfbuzz_libstaticconf \
@


1.21
log
@
Bugfixing update to freetype-2.5.5

ok matthieu@@
@
text
@d5 1
a5 1
# Copyright 2001-2014 by
d14 1
a14 1
AC_INIT([FreeType], [2.5.5], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='17:4:11'
@


1.20
log
@
Update to freetype-2.5.4

ports bulk build by landry@@

OK matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.5.4], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='17:3:11'
@


1.19
log
@
Security/bugfixing update to freetype-2.5.3, featuring a fix for a
vulnerability in the CFF driver (CVE-2014-2240) and assorted minor
fixes.

ok matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.5.3], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='17:2:11'
d440 1
a440 1
      if which libpng-config > /dev/null; then
d659 1
a659 1
# Whether to use FileManager which is deprecated since Mac OS X 10.4.
d768 1
a768 1
# Whether to use QuickDraw API in ToolBox which is deprecated since
d810 1
a810 1
# Whether to use QuickDraw API in Carbon which is deprecated since
a939 15
LIBS_CONFIG="-lfreetype      \
             $ZLIB_LIBS      \
             $BZIP2_LIBS     \
             $LIBPNG_LIBS    \
             $HARFBUZZ_LIBS  \
             $ft2_extra_libs"
# remove -L/usr/lib and -L/usr/lib64 since `freetype-config' adds them later
# on if necessary; also beautify
LIBS_CONFIG=`echo "$LIBS_CONFIG"                \
             | sed -e 's|-L */usr/lib64/* | |g' \
                   -e 's|-L */usr/lib/* | |g'   \
                   -e 's/^  *//'                \
                   -e 's/  *$//'                \
                   -e 's/  */ /g'`

a958 1
AC_SUBST([LIBS_CONFIG])
@


1.18
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d5 1
a5 1
# Copyright 2001-2013 by
d14 1
a14 1
AC_INIT([FreeType], [2.5.2], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='17:1:11'
d37 4
d213 13
a225 5
#  we try to make the compiler work for C89-strict source.
#  even if C compiler is GCC and C89 flags are available,
#  some system headers (e.g. Android Bionic libc) is broken
#  in C89 mode. we have to check the compilation finishes
#  successfully.
d229 46
a274 16
  XX_ANSIFLAGS=""
  for a in -pedantic -ansi
  do
    AC_MSG_CHECKING([gcc compiler flag ${a} to assure ANSI C works correctly])
    orig_CFLAGS="${CFLAGS}"
    CFLAGS="${CFLAGS} ${XX_ANSIFLAGS} ${a}"
    AC_COMPILE_IFELSE([
        AC_LANG_PROGRAM([#include <stdio.h>],[{puts("");return 0;}])
      ],[
        AC_MSG_RESULT([ok, add it to XX_ANSIFLAGS])
        XX_ANSIFLAGS="${XX_ANSIFLAGS} ${a}"
      ],[
        AC_MSG_RESULT([no])
      ])
    CFLAGS="${orig_CFLAGS}"
  done
d292 16
a309 1
# don't quote AS_HELP_STRING!
d311 39
a349 6
  AS_HELP_STRING([--without-zlib],
                 [use internal zlib instead of system-wide]))
if test x$with_zlib != xno && test -z "$LIBZ"; then
  AC_CHECK_LIB([z],
               [gzsetparams],
               [AC_CHECK_HEADER([zlib.h], [LIBZ='-lz'])])
d351 3
a353 2
if test x$with_zlib != xno && test -n "$LIBZ"; then
  SYSTEM_ZLIB=yes
a358 1
# don't quote AS_HELP_STRING!
d360 39
a398 6
  AS_HELP_STRING([--without-bzip2],
                 [do not support bzip2 compressed fonts]))
if test x$with_bzip2 != xno && test -z "$LIBBZ2"; then
  AC_CHECK_LIB([bz2],
               [BZ2_bzDecompress],
               [AC_CHECK_HEADER([bzlib.h], [LIBBZ2='-lbz2'])])
d400 3
a402 2
if test x$with_bzip2 != xno && test -n "$LIBBZ2"; then
  SYSTEM_LIBBZ2=yes
a407 1
HAVE_LIBPNG=no
d409 85
a493 13
  AS_HELP_STRING([--without-png],
                 [do not support png compressed OpenType embedded bitmaps]))
if test x$with_png != xno; then
  AC_MSG_CHECKING([for libpng])
  if test -z "$LIBPNG_CFLAGS" -a -z "$LIBPNG_LDFLAGS"; then
    if ! which libpng-config >/dev/null; then
      AC_MSG_ERROR([`libpng-config' not found;
either set the LIBPNG_CFLAGS and LIBPNG_LDFLAGS environment variables,
or pass `--without-png' to the `configure' script.])
    elif test ${cross_compiling} = yes; then
      AC_MSG_ERROR([`libpng-config' should not be used in cross-building;
either set the LIBPNG_CFLAGS and LIBPNG_LDFLAGS environment variables,
or pass `--without-png' to the `configure' script.])
a494 3
    LIBPNG="`libpng-config --libs`"
    LIBPNG_CFLAGS="`libpng-config --cflags`"
    LIBPNG_LDFLAGS="`libpng-config --ldflags`"
d496 4
a499 2
  HAVE_LIBPNG=yes
  AC_MSG_RESULT([$LIBPNG_LDFLAGS])
a550 1
# don't quote AS_HELP_STRING!
d557 2
a558 2
  FT2_EXTRA_LIBS="-Wl,-framework,CoreServices -Wl,-framework,ApplicationServices"
  LDFLAGS="$LDFLAGS $FT2_EXTRA_LIBS"
d644 1
a644 1
     FT2_EXTRA_LIBS=""
a863 1
# don't quote AS_HELP_STRING!
d914 57
d972 4
a975 7
AC_SUBST([LIBZ])
AC_SUBST([LIBBZ2])
AC_SUBST([LIBPNG])
AC_SUBST([FT2_EXTRA_LIBS])
AC_SUBST([SYSTEM_ZLIB])

LT_INIT(win32-dll)
d981 1
d984 4
a987 3
if test x$SYSTEM_ZLIB = xyes; then
  CFLAGS="$CFLAGS -DFT_CONFIG_OPTION_SYSTEM_ZLIB"
  LDFLAGS="$LDFLAGS $LIBZ"
d990 3
a992 3
if test x$SYSTEM_LIBBZ2 = xyes; then
  CFLAGS="$CFLAGS -DFT_CONFIG_OPTION_USE_BZIP2"
  LDFLAGS="$LDFLAGS $LIBBZ2"
d994 1
a994 1
if test x$HAVE_LIBPNG = xyes; then
d996 5
a1000 1
  LDFLAGS="$LDFLAGS $LIBPNG_LDFLAGS"
d1027 9
@


1.17
log
@Update to freetype 2.5.0.1. Tested by many.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.5], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='16:2:10'
d295 4
d300 1
d725 1
@


1.16
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.12], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='16:1:10'
d257 3
a259 1
  AC_CHECK_LIB([z], [gzsetparams], [AC_CHECK_HEADER([zlib.h], [LIBZ='-lz'])])
d265 1
d273 3
a275 1
  AC_CHECK_LIB([bz2], [BZ2_bzDecompress], [AC_CHECK_HEADER([bzlib.h], [LIBBZ2='-lbz2'])])
d281 23
d739 4
@


1.15
log
@Update to freetype 2.4.11. Tested by krw@@, jasper@@ and on a bulk ports
build by naddy@@.
@
text
@d5 1
a5 1
# Copyright 2001-2012 by
d14 1
a14 1
AC_INIT([FreeType], [2.4.11], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='16:0:10'
d730 1
a730 3
                 unix-def.mk:unix-def.in
                 freetype-config
                 freetype2.pc:freetype2.in])
@


1.14
log
@Update to freetype-2.4.10.

With help and ok matthieu@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.10], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='15:0:9'
a68 1

a70 1
AC_CHECK_PROG([RMF], [rm], [rm -f])
d106 8
a113 2
ac_clean_files="ft2build.h ftoption.h ftstdlib.h"
touch ft2build.h ftoption.h ftstdlib.h
d132 1
a132 1
${RMF} conftest.c conftest.sh confft2build.h ftoption.h ftstdlib.h
a259 2
  CFLAGS="$CFLAGS -DFT_CONFIG_OPTION_SYSTEM_ZLIB"
  LDFLAGS="$LDFLAGS $LIBZ"
d273 1
a273 2
  CFLAGS="$CFLAGS -DFT_CONFIG_OPTION_USE_BZIP2"
  LDFLAGS="$LDFLAGS $LIBBZ2"
d301 1
a301 1
    AC_MSG_RESULT([whether CFLAGS and LDFLAGS share ${c}])
a691 2
AC_SUBST([CFLAGS])
AC_SUBST([LDFLAGS])
a694 1

d701 14
@


1.13
log
@Update to freetype 2.4.9
Another round of fixes to better handle invalid fonts.   Many of
them are vulnerabilities  (see CVE-2012-1126 up to CVE-2012-1144
and SA48320).
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.9], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='14:1:8'
a69 22
# get compiler flags right

if test "x$GCC" = xyes; then
  XX_CFLAGS="-Wall"
  XX_ANSIFLAGS="-pedantic -ansi"
else
  case "$host" in
  *-dec-osf*)
    CFLAGS=
    XX_CFLAGS="-std1 -g3"
    XX_ANSIFLAGS=
    ;;
  *)
    XX_CFLAGS=
    XX_ANSIFLAGS=
    ;;
  esac
fi
AC_SUBST([XX_CFLAGS])
AC_SUBST([XX_ANSIFLAGS])


d161 2
a162 1
  AC_DEFINE([FT_USE_AUTOCONF_SIZEOF_TYPES])
d202 42
@


1.12
log
@Update to freetype 2.4.8. Security update fixing CVE-2011-3439
@
text
@d5 1
a5 1
# Copyright 2001-2011 by
d14 1
a14 1
AC_INIT([FreeType], [2.4.8], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='14:0:8'
d127 1
a127 1
AC_MSG_CHECKING([cpp computation of bit length in ftconfig.in works])
d333 2
a334 2
     AC_MSG_CHECKING([OS_INLINE macro is ANSI compatible])
     orig_CFLAGS="$CFLAGS"
@


1.11
log
@Update to freetype 2.4.7.

This moslty is a bug-fix release for CVE-2011-3256.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.7], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='13:2:7'
@


1.10
log
@Update to freetype 2.4.6.

For now, omit the patch to ttdriver.c that changes some font metrics and
appearance of applications using TrueType fonts. Will revisit once the
issue is solved.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.6], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='13:1:7'
@


1.9
log
@Update to freetype 2.4.5. Tested by many.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.5], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='13:0:7'
@


1.8
log
@Update to freetype 2.4.4. Tested by shadchin@@, ajacoutot@@, krw@@.
@
text
@d5 1
a5 1
# Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 by
d14 1
a14 1
AC_INIT([FreeType], [2.4.4], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='12:2:6'
d55 1
a55 1
  elif test -x conftest.* ; then
d107 2
a108 1
  INSTALL="`pwd`/$INSTALL" ;;
d193 9
a201 2
AC_FUNC_MMAP
if test "$ac_cv_func_mmap_fixed_mapped" != yes; then
d240 13
d261 1
a261 1
while test $i -lt $#
d278 1
a278 1
  -m32|-m64) # options taking no argument
d405 2
a406 1
  *) ;;
d622 1
a622 1
elif test x$with_old_mac_fonts = xyes -a x$with_ats != x ; then
d669 1
@


1.7
log
@Update to freetype 2.4.3. Tested at least by krw@@, ajacoutot@@ and jasper@@
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.3], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='12:1:6'
@


1.6
log
@Update to freetype 2.4.2. This has been in snapshots for a while
and tested explicitely by ajacoutot@@ jasper@@, jcs@@, krw@@ and others
on various architectures.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.4.2], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='12:0:6'
@


1.5
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.3.12], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='10:0:4'
@


1.4
log
@Update to Freetype 2.3.9.

Bump major to be safe.
Small arm assembler fix in ftconfig.h by drahn@@
@
text
@d5 1
a5 1
# Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 by
d14 1
a14 1
AC_INIT([FreeType], [2.3.9], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='9:20:3'
d56 1
a56 1
    EXEEXT_BUILD=`echo conftest.* | sed -n '1s/^.*\.//g'`
d58 1
a64 4

if test ! -z ${EXEEXT_BUILD}; then
  EXEEXT_BUILD=."${EXEEXT_BUILD}"
fi
d72 1
a72 1
if test "x$CC" = xgcc; then
d233 23
a255 11
# check Apple's `-isysroot' option and duplicate it to LDFLAGS if required --
# Apple TechNote 2137 recommends to include it in CFLAGS but not in LDFLAGS

AC_MSG_CHECKING([whether CFLAGS includes -isysroot option])
case "$CFLAGS" in
*sysroot* )
  AC_MSG_RESULT([yes])
  AC_MSG_CHECKING([whether LDFLAGS includes -isysroot option])
  case "$LDFLAGS" in
  *sysroot* )
    AC_MSG_RESULT([yes])
d257 9
a265 5
  *)
    AC_MSG_RESULT([no])
    isysroot_dir=`echo ${CFLAGS} | tr '\t' ' ' | sed 's/^.*-isysroot *//;s/ .*//'`
    AC_MSG_WARN(-isysroot ${isysroot_dir} is added to LDFLAGS)
    LDFLAGS="-isysroot ${isysroot_dir} ${LDFLAGS}"
d267 3
d271 4
a274 5
  ;;
*)
  AC_MSG_RESULT([no])
  ;;
esac
@


1.3
log
@Update to Freetype 2.3.8. Tested by jsg@@.
@
text
@d14 1
a14 1
AC_INIT([FreeType], [2.3.8], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='9:19:3'
@


1.2
log
@Update to Freetype 2.3.7. This is a bug fix release. No API change.
@
text
@d5 1
a5 1
# Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007 by
d14 1
a14 1
AC_INIT([FreeType], [2.3.7], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='9:18:3'
a27 1
AC_CANONICAL_BUILD
a28 1
AC_CANONICAL_TARGET
d41 1
a41 1
  AC_CHECK_PROG(CC_BUILD, ${build}-gcc, ${build-gcc})
d127 64
d264 2
d273 1
a273 1
  FT2_EXTRA_LIBS="-Wl,-framework,CoreServices,-framework,ApplicationServices"
d275 2
a276 1
  AC_TRY_LINK([
d279 1
a279 1
# include <Carbon/Carbon.h>
d286 2
a287 2
    ],
    [
d289 1
a289 1
      short res = 0;
d292 1
a292 1
      UseResFile( res );
d294 1
a294 1
    ],
d296 1
d300 2
a301 1
     AC_TRY_COMPILE([
d304 1
a304 1
# include <Carbon/Carbon.h>
d311 2
a312 2
       ],
       [
d314 2
a315 2
         /* OSHostByteOrder() is typed as OS_INLINE */
         int32_t  os_byte_order = OSHostByteOrder();
d318 2
a319 2
         if ( OSBigEndian != os_byte_order )
           return 1;
d321 1
a321 1
       ],
d336 1
a336 1
# include <Carbon/Carbon.h>
d353 1
a353 1
        CFLAGS="$CFLAGS -DHAVE_TYPE_RESOURCE_INDEX"
d357 2
a358 2
       ])
    ],
d360 1
d364 1
a364 1
  case x$target_os in
d366 1
a366 1
    dnl AC_MSG_WARN([target system is MacOS but configured to build without Carbon])
d383 2
a384 1
  AC_TRY_LINK([
d387 1
a387 1
# include <Carbon/Carbon.h>
d394 2
a395 2
    ],
    [
d397 5
a401 5
      FCBPBPtr          paramBlock;
      short             vRefNum;
      long              dirID;
      ConstStr255Param  fileName;
      FSSpec*           spec;
d404 3
a406 3
      /* FSSpec functions: deprecated since Mac OS X 10.4 */
      PBGetFCBInfoSync( paramBlock );
      FSMakeFSSpec( vRefNum, dirID, fileName, spec );
d408 1
a408 1
    ],
d430 2
a431 1
  AC_TRY_LINK([
d434 1
a434 1
# include <Carbon/Carbon.h>
d441 2
a442 2
    ],
    [
d444 15
a458 27
      FCBPBPtr             paramBlock;
      short                vRefNum;
      long                 dirID;
      ConstStr255Param     fileName;
      FSSpec*              spec;

      Boolean*             isDirectory;
      UInt8*               path;
      SInt16               desiredRefNum;
      SInt16*              iterator;
      SInt16*              actualRefNum;
      HFSUniStr255*        outForkName;
      FSVolumeRefNum       volume;
      FSCatalogInfoBitmap  whichInfo;
      FSCatalogInfo*       catalogInfo;
      FSForkInfo*          forkInfo;
      FSRef*               ref;


      /* FSRef functions: no need to check? */
      FSGetForkCBInfo( desiredRefNum, volume, iterator,
                       actualRefNum, forkInfo, ref,
                       outForkName );
      FSpMakeFSRef ( spec, ref );
      FSGetCatalogInfo( ref, whichInfo, catalogInfo,
                        outForkName, spec, ref );
      FSPathMakeRef( path, ref, isDirectory );
d460 16
a475 1
    ],
d493 2
a494 1
  AC_TRY_LINK([
d497 1
a497 1
# include <Carbon/Carbon.h>
d504 2
a505 2
    ],
    [
d507 4
a510 4
      Str255     familyName;
      SInt16     familyID   = 0;
      FMInput*   fmIn       = NULL;
      FMOutput*  fmOut      = NULL;
d513 3
a515 3
      GetFontName( familyID, familyName );
      GetFNum( familyName, &familyID );
      fmOut = FMSwapFont( fmIn );
d517 1
a517 1
    ],
d535 2
a536 1
  AC_TRY_LINK([
d539 1
a539 1
# include <Carbon/Carbon.h>
d546 2
a547 2
    ],
    [
d549 19
a567 19
      FMFontFamilyIterator          famIter;
      FMFontFamily                  family;
      Str255                        famNameStr;
      FMFontFamilyInstanceIterator  instIter;
      FMFontStyle                   style;
      FMFontSize                    size;
      FMFont                        font;
      FSSpec*                       pathSpec;


      FMCreateFontFamilyIterator( NULL, NULL, kFMUseGlobalScopeOption,
                                  &famIter );
      FMGetNextFontFamily( &famIter, &family );
      FMGetFontFamilyName( family, famNameStr );
      FMCreateFontFamilyInstanceIterator( family, &instIter );
      FMGetNextFontFamilyInstance( &instIter, &font, &style, &size );
      FMDisposeFontFamilyInstanceIterator( &instIter );
      FMDisposeFontFamilyIterator( &famIter );
      FMGetFontContainer( font, pathSpec );
d569 1
a569 1
    ],
d587 2
a588 1
  AC_TRY_LINK([
d590 7
a596 1
#include <Carbon/Carbon.h>
d598 2
a599 2
    ],
    [
d601 1
a601 1
      FSSpec*  pathSpec;
d604 4
a607 2
      ATSFontFindFromName( NULL, kATSOptionFlagsUnRestrictedScope );
      ATSFontGetFileSpecification( 0, pathSpec );
d609 1
a609 1
    ],
d621 1
a621 1
    thus using legacy builds/mac/ftmac.c instead of src/base/ftmac.c.
d630 1
d638 2
a639 3
AC_PROG_LIBTOOL
# urgh -- these are internal libtool variables...
AC_SUBST([enable_shared])
d642 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
# Copyright 2001, 2002, 2003, 2004, 2005, 2006 by
d14 1
a14 1
AC_INIT([FreeType], [2.2.1], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='9:10:3'
d28 2
d37 36
d158 1
a158 1
# Check for system zlib
d174 26
d209 83
a291 5
  LDFLAGS="$LDFLAGS -Xlinker -framework -Xlinker CoreServices \
                    -Xlinker -framework -Xlinker ApplicationServices"
  AC_TRY_LINK([],
    [],
    [AC_MSG_RESULT([ok])],
d295 8
d313 1
a313 1
elif test x$with_old_mac_fonts = xyes; then
d328 5
a332 5
  FCBPBPtr          paramBlock;
  short             vRefNum;
  long              dirID;
  ConstStr255Param  fileName;
  FSSpec*           spec;
d335 4
a338 4
  /* FSSpec functions: deprecated sicne Mac OS X 10.4 */
  PBGetFCBInfoSync( paramBlock );
  FSMakeFSSpec( vRefNum, dirID, fileName, spec );
 
d359 1
a359 1
elif test x$with_old_mac_fonts = xyes; then
d374 28
a401 28
  FCBPBPtr             paramBlock;
  short                vRefNum;
  long                 dirID;
  ConstStr255Param     fileName;
  FSSpec*              spec;

  Boolean*             isDirectory;
  UInt8*               path;
  SInt16               desiredRefNum;
  SInt16*              iterator;
  SInt16*              actualRefNum;
  HFSUniStr255*        outForkName;
  FSVolumeRefNum       volume;
  FSCatalogInfoBitmap  whichInfo;
  FSCatalogInfo*       catalogInfo;
  FSForkInfo*          forkInfo;
  FSRef*               ref;


  /* FSRef functions: no need to check? */
  FSGetForkCBInfo( desiredRefNum, volume, iterator,
                   actualRefNum, forkInfo, ref,
                   outForkName );
  FSpMakeFSRef ( spec, ref );
  FSGetCatalogInfo( ref, whichInfo, catalogInfo,
                    outForkName, spec, ref );
  FSPathMakeRef( path, ref, isDirectory );
 
d410 2
a411 1
# Whether to use QuickDraw API in ToolBox which is deprecated since Mac OS X 10.4.
d418 1
a418 1
elif test x$with_old_mac_fonts = xyes; then
d433 4
a436 4
  Str255     familyName;
  SInt16     familyID   = 0;
  FMInput*   fmIn       = NULL;
  FMOutput*  fmOut      = NULL;
d439 3
a441 3
  GetFontName( familyID, familyName );
  GetFNum( familyName, &familyID );
  fmOut = FMSwapFont( fmIn );
d451 2
a452 1
# Whether to use QuickDraw API in Carbon which is deprecated since Mac OS X 10.4.
d459 1
a459 1
elif test x$with_old_mac_fonts = xyes; then
d474 19
a492 18
  FMFontFamilyIterator          famIter;
  FMFontFamily                  family;
  Str255                        famNameStr;
  FMFontFamilyInstanceIterator  instIter;
  FMFontStyle                   style;
  FMFontSize                    size;
  FMFont                        font;
  FSSpec*                       pathSpec;


  FMCreateFontFamilyIterator( NULL, NULL, kFMUseGlobalScopeOption, &famIter );
  FMGetNextFontFamily( &famIter, &family );
  FMGetFontFamilyName( family, famNameStr );
  FMCreateFontFamilyInstanceIterator( family, &instIter );
  FMGetNextFontFamilyInstance( &instIter, &font, &style, &size );
  FMDisposeFontFamilyInstanceIterator( &instIter );
  FMDisposeFontFamilyIterator( &famIter );
  FMGetFontContainer( font, pathSpec );
d510 1
a510 1
elif test x$with_old_mac_fonts = xyes; then
d519 1
a519 1
  FSSpec*  pathSpec;
d522 2
a523 2
  ATSFontFindFromName( NULL, kATSOptionFlagsUnRestrictedScope );
  ATSFontGetFileSpecification( 0, pathSpec );
d532 13
d549 1
d571 1
a571 1
# and 'builds/unix/unix-cc.mk' that will be used by the build system
d584 1
a584 1
# end of configure.ac
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d5 1
a5 1
# Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007 by
d14 1
a14 1
AC_INIT([FreeType], [2.3.5], [freetype@@nongnu.org], [freetype])
d20 1
a20 1
version_info='9:16:3'
a27 2
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
a34 36
AC_SUBST(EXEEXT)


# checks for native programs to generate building tool

if test ${cross_compiling} = yes; then
  AC_CHECK_PROG(CC_BUILD, ${build}-gcc, ${build-gcc})
  test -z "${CC_BUILD}" && AC_CHECK_PROG(CC_BUILD, gcc, gcc)
  test -z "${CC_BUILD}" && AC_CHECK_PROG(CC_BUILD, cc, cc, , , /usr/ucb/cc)
  test -z "${CC_BUILD}" && AC_MSG_ERROR([cannot find native C compiler])

  AC_MSG_CHECKING([for suffix of native executables])
  rm -f a.* b.* a_out.exe conftest.*
  echo > conftest.c "int main() { return 0;}"
  ${CC_BUILD} conftest.c || AC_MSG_ERROR([native C compiler is not working])
  rm -f conftest.c
  if test -x a.out -o -x b.out -o -x conftest; then
    EXEEXT_BUILD=""
  elif test -x a_out.exe -o -x conftest.exe; then
    EXEEXT_BUILD=".exe"
  elif test -x conftest.* ; then
    EXEEXT_BUILD=`echo conftest.* | sed -n '1s/^.*\.//g'`
  fi
  AC_MSG_RESULT($EXEEXT_BUILD)
else
  CC_BUILD=${CC}
  EXEEXT_BUILD=${EXEEXT}
fi


if test ! -z ${EXEEXT_BUILD}; then
  EXEEXT_BUILD=."${EXEEXT_BUILD}"
fi
AC_SUBST(CC_BUILD)
AC_SUBST(EXEEXT_BUILD)

d145 5
a149 54
  FT2_EXTRA_LIBS="-Wl,-framework,CoreServices,-framework,ApplicationServices"
  LDFLAGS="$LDFLAGS $FT2_EXTRA_LIBS"
  AC_TRY_LINK([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <Carbon/Carbon.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

    ],
    [

      short res = 0;


      UseResFile( res );

    ],
    [AC_MSG_RESULT([ok])
     AC_MSG_CHECKING([OS_INLINE macro is ANSI compatible])
     orig_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $XX_CFLAGS $XX_ANSIFLAGS"
     AC_TRY_COMPILE([

#if defined(__GNUC__) && defined(__APPLE_CC__)
# include <Carbon/Carbon.h>
# include <ApplicationServices/ApplicationServices.h>
#else
# include <ConditionalMacros.h>
# include <Files.h>
#endif

       ],
       [

         /* OSHostByteOrder() is typed as OS_INLINE */
         int32_t  os_byte_order = OSHostByteOrder();


         if ( OSBigEndian != os_byte_order )
           return 1;

       ],
       [AC_MSG_RESULT([ok])
        CFLAGS="$orig_CFLAGS"
        CFLAGS="$CFLAGS -DHAVE_ANSI_OS_INLINE=1"
       ],
       [AC_MSG_RESULT([no, ANSI incompatible])
        CFLAGS="$orig_CFLAGS"
       ])
    ],
a152 8
else
  case x$target_os in
  xdarwin*)
    dnl AC_MSG_WARN([target system is MacOS but configured to build without Carbon])
    CFLAGS="$CFLAGS -DDARWIN_NO_CARBON"
    ;;
  *) ;;
  esac
d163 1
a163 1
elif test x$with_old_mac_fonts = xyes -a x$with_fsspec != x; then
d178 5
a182 5
      FCBPBPtr          paramBlock;
      short             vRefNum;
      long              dirID;
      ConstStr255Param  fileName;
      FSSpec*           spec;
d185 4
a188 4
      /* FSSpec functions: deprecated since Mac OS X 10.4 */
      PBGetFCBInfoSync( paramBlock );
      FSMakeFSSpec( vRefNum, dirID, fileName, spec );

d209 1
a209 1
elif test x$with_old_mac_fonts = xyes -a x$with_fsref != x; then
d224 28
a251 28
      FCBPBPtr             paramBlock;
      short                vRefNum;
      long                 dirID;
      ConstStr255Param     fileName;
      FSSpec*              spec;

      Boolean*             isDirectory;
      UInt8*               path;
      SInt16               desiredRefNum;
      SInt16*              iterator;
      SInt16*              actualRefNum;
      HFSUniStr255*        outForkName;
      FSVolumeRefNum       volume;
      FSCatalogInfoBitmap  whichInfo;
      FSCatalogInfo*       catalogInfo;
      FSForkInfo*          forkInfo;
      FSRef*               ref;


      /* FSRef functions: no need to check? */
      FSGetForkCBInfo( desiredRefNum, volume, iterator,
                       actualRefNum, forkInfo, ref,
                       outForkName );
      FSpMakeFSRef ( spec, ref );
      FSGetCatalogInfo( ref, whichInfo, catalogInfo,
                        outForkName, spec, ref );
      FSPathMakeRef( path, ref, isDirectory );

d260 1
a260 2
# Whether to use QuickDraw API in ToolBox which is deprecated since
# Mac OS X 10.4.
d267 1
a267 1
elif test x$with_old_mac_fonts = xyes -a x$with_quickdraw_toolbox != x; then
d282 4
a285 4
      Str255     familyName;
      SInt16     familyID   = 0;
      FMInput*   fmIn       = NULL;
      FMOutput*  fmOut      = NULL;
d288 3
a290 3
      GetFontName( familyID, familyName );
      GetFNum( familyName, &familyID );
      fmOut = FMSwapFont( fmIn );
d300 1
a300 2
# Whether to use QuickDraw API in Carbon which is deprecated since
# Mac OS X 10.4.
d307 1
a307 1
elif test x$with_old_mac_fonts = xyes -a x$with_quickdraw_carbon != x; then
d322 18
a339 19
      FMFontFamilyIterator          famIter;
      FMFontFamily                  family;
      Str255                        famNameStr;
      FMFontFamilyInstanceIterator  instIter;
      FMFontStyle                   style;
      FMFontSize                    size;
      FMFont                        font;
      FSSpec*                       pathSpec;


      FMCreateFontFamilyIterator( NULL, NULL, kFMUseGlobalScopeOption,
                                  &famIter );
      FMGetNextFontFamily( &famIter, &family );
      FMGetFontFamilyName( family, famNameStr );
      FMCreateFontFamilyInstanceIterator( family, &instIter );
      FMGetNextFontFamilyInstance( &instIter, &font, &style, &size );
      FMDisposeFontFamilyInstanceIterator( &instIter );
      FMDisposeFontFamilyIterator( &famIter );
      FMGetFontContainer( font, pathSpec );
d357 1
a357 1
elif test x$with_old_mac_fonts = xyes -a x$with_ats != x ; then
d366 1
a366 1
      FSSpec*  pathSpec;
d369 2
a370 2
      ATSFontFindFromName( NULL, kATSOptionFlagsUnRestrictedScope );
      ATSFontGetFileSpecification( 0, pathSpec );
a378 13
case "$CFLAGS" in
  *HAVE_FSSPEC* | *HAVE_FSREF* | *HAVE_QUICKDRAW* | *HAVE_ATS* )
    AC_MSG_WARN([
*** WARNING
    FSSpec/FSRef/QuickDraw/ATS options are explicitly given,
    thus using legacy builds/mac/ftmac.c instead of src/base/ftmac.c.
    ])
    CFLAGS="$CFLAGS "'-I$(TOP_DIR)/builds/mac/'
    ;;
  *)
    ;;
esac

a382 1
AC_SUBST([FT2_EXTRA_LIBS])
d404 1
a404 1
# and `builds/unix/unix-cc.mk' that will be used by the build system
d417 1
a417 1
# end of configure.raw
@

