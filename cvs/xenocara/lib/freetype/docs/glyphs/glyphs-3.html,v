head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.22
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.12
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.14
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v2_3_5:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.08.09.07.53.53;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	Vqa2yd6plwuainJN;

1.4
date	2016.05.30.08.28.23;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	uW60vkhICnByxMgi;

1.3
date	2016.01.02.16.30.55;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	KONJVnu2E44KszPN;

1.2
date	2013.06.07.17.21.08;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.08.16.28.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.09.08.16.28.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to freetype-doc-2.6.5
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
          "http://www.w3.org/TR/html4/loose.dtd">

<html lang="en">

<head>
  <meta http-equiv="Content-Type"
        content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type"
        content="text/css">
  <meta http-equiv="Content-Script-Type"
        content="text/javascript">
  <meta name="description"
        content="FreeType Documentation">
  <meta name="Author"
        content="David Turner">

  <link rel="icon"
        href="../image/favicon_-90.ico">
  <link rel="shortcut icon"
        href="../image/favicon_-90.ico">
  <link rel="stylesheet"
        type="text/css"
        href="../css/freetype2_-90.css">

  <script type="text/javascript"
          src="../../../js/jquery-1.11.0.min.js">
  </script>
  <script type="text/javascript"
          src="../../../js/jquery.ba-resize.min.js">
  </script>
  <script type="text/javascript"
          src="../../../js/freetype2.js">
  </script>

  <title>FreeType Glyph Conventions / III</title>
</head>


<body>

<div id="top"
     class="bar">
  <h1><a href="http://freetype.org/index.html">FreeType</a> Glyph
    Conventions&nbsp;/&nbsp;III</h1>
</div>


<div id="wrapper">

<div class="colmask leftmenu">
  <div class="colright">
    <div class="col1wrap">
      <div class="col1">


        <!-- ************************************************** -->

	<div id="glyph-metrics">
	  <h2>III. Glyph Metrics</h2>

	  <h3 id="section-1">1. Baseline, pens and layouts</h3>

	  <p>The baseline is an imaginary line that is used to
	    &lsquo;guide&rsquo; glyphs when rendering text.  It can be
	    horizontal (e.g. Latin, Cyrillic, Arabic, etc.) or
	    vertical (e.g. Chinese, Japanese, Mongolian, etc.).
	    Moreover, to render text, a virtual point, located on the
	    baseline, called the <em>pen position</em>
	    or <em>origin</em>, is used to locate glyphs.</p>

	  <p>Each layout uses a different convention for glyph
	  placement:</p>

	  <ul>
	    <li>
              <p>With horizontal layout, glyphs simply
		&lsquo;rest&rsquo; on the baseline.  Text is rendered
		by incrementing the pen position, either to the right
		or to the left.</p>

              <p>The distance between two successive pen positions is
		glyph-specific and is called the <em>advance
		width</em>.  Note that its value is <em>always</em>
		positive, even for right-to-left oriented scripts like
		Arabic.  This introduces some differences in the way
		text is rendered.</p>

              <p><em>The pen position is always placed on the
		  baseline.</em></p>

              <p align="center">
		<img src="layout.png"
		     height="179"
		     width="458"
		     alt="horizontal layout">
	      </p>
	    </li>
	    <li>
              <p>With a vertical layout, glyphs are centered around
		the baseline:</p>

              <p align="center">
		<img src="layout2.png"
		     height="275"
		     width="162"
		     alt="vertical layout">
              </p>
	    </li>
	  </ul>


	  <h3 id="section-2">2. Typographic metrics and bounding
	    boxes</h3>

	  <p>A various number of face metrics are defined for all
	    glyphs in a given font.</p>

	  <ul>
	    <li class="emph">
              <p>Ascent</p>

              <p>The distance from the baseline to the highest or
		upper grid coordinate used to place an outline point.
		It is a positive value, due to the grid's orientation
		with the <i>Y</i>&nbsp;axis upwards.</p>
	    </li>
	    <li class="emph">
              <p>Descent</p>

              <p>The distance from the baseline to the lowest grid
		coordinate used to place an outline point.  In
		FreeType, this is a negative value, due to the grid's
		orientation.  Note that in some font formats this is a
		positive value.</p>
	    </li>
	    <li class="emph">
              <p>Linegap</p>

              <p>The distance that must be placed between two lines of
		text.  The baseline-to-baseline distance should be
		computed as

	      <p align="center">
		<tt>linespace = ascent - descent + linegap</tt>
	      </p>

              <p>if you use the typographic values.</p>
	    </li>
	  </ul>

	  <p>Other, simpler metrics are:</p>

	  <ul>
	    <li class="emph">
              <p>Bounding box</p>

              <p>This is an imaginary box that encloses all glyphs
		from the font, usually as tightly as possible.  It is
		represented by four parameters,
		namely <tt>xMin</tt>, <tt>yMin</tt>, <tt>xMax</tt>,
		and <tt>yMax</tt>, that can be computed for any
		outline.  Their values can be in font units if
		measured in the original outline, or in integer (or
		fractional) pixel units when measured on scaled
		outlines.</p>

	      <p>A common shorthand for the bounding box is
		&lsquo;bbox&rsquo;.</p>
	    </li>
	    <li class="emph">
              <p>Internal leading</p>

              <p>This concept comes directly from the world of traditional
		typography.  It represents the amount of space within the
		<em>leading</em> which is reserved for glyph features
		that lay outside of the EM square (like accentuation).
		It usually can be computed as</p>

              <p align="center">
		<tt>internal leading = ascent - descent - EM_size</tt>
              </p>
	    </li>
	    <li class="emph">
              <p>External leading</p>

              <p>This is another name for the line gap.</p>
	    </li>
	  </ul>


	  <h3 id="section-3">3. Bearings and Advances</h3>

	  <p>Each glyph has also distances called <em>bearings</em> and
	    <em>advances</em>.  The actual values depend on the
	    layout, as the same glyph can be used to render text
	    either horizontally or vertically:</p>

	  <ul>
	    <li class="emph">
              <p>Left side bearing</p>

              <p>The horizontal distance from the current pen position
		to the glyph's left bbox edge.  It is positive for
		horizontal layouts, and in most cases negative for
		vertical ones.</p>

              <p>In the FreeType API, this is also called
		<tt>bearingX</tt>.  Another shorthand is
		&lsquo;lsb&rsquo;.</p>
	    </li>
	    <li class="emph">
              <p>Top side bearing</p>
	
              <p>The vertical distance from the baseline to the top of
		the glyph's bbox.  It is usually positive for
		horizontal layouts, and negative for vertical
		ones.</p>

              <p>In the FreeType API, this is also called
		<tt>bearingY</tt>.</p>
	    </li>
	    <li class="emph">
              <p>Advance width</p>

              <p>The horizontal distance to increment (for
		left-to-right writing) or decrement (for right-to-left
		writing) the pen position after a glyph has been
		rendered when processing text.  It is always positive
		for horizontal layouts, and zero for vertical
		ones.</p>

              <p>In the FreeType API, this is also called
		<tt>advanceX</tt>.</p>
	    </li>
	    <li class="emph">
              <p>Advance height</p>

              <p>The vertical distance to decrement the pen position
		after a glyph has been rendered.  It is always zero
		for horizontal layouts, and positive for vertical
		layouts.</p>
	
              <p>In the FreeType API, this is also called
		<tt>advanceY</tt>.</p>
	    </li>
	    <li class="emph">
              <p>Glyph width</p>

              <p>The glyph's horizontal extent.  For unscaled font
		coordinates, it is</p>

	      <p align="center">
		<tt>glyph width = bbox.xMax - bbox.xMin</tt>
	      </p>

	      <p>For scaled glyphs, its computation requests specific
		care, described in the grid-fitting chapter below.</p>
	    </li>
	    <li class="emph">
              <p>Glyph height</p>

              <p>The glyph's vertical extent. For unscaled font
		coordinates, it is</p>

	      <p align="center">
		<tt>glyph height = bbox.yMax - bbox.yMin</tt>
	      </p>

	      <p>For scaled glyphs, its computation requests specific
		care, described in the grid-fitting chapter below.</p>
	    </li>
	    <li class="emph">
              <p>Right side bearing</p>

              <p>Only used for horizontal layouts to describe the
		distance from the bbox's right edge to the advance
		width.  In most cases it is a non-negative number:</p>

              <p align="center">
		<tt>right side bearing = advance_width -
		  left_side_bearing - (xMax-xMin)</tt>
              </p>

	      <p>A common shorthand for this value is
		&lsquo;rsb&rsquo;.</p>
	    </li>
	  </ul>

	  <p>Here is a picture giving all the details for horizontal metrics:

	  <p align="center">
	    <img src="metrics.png"
		 height="253"
		 width="388"
		 alt="horizontal glyph metrics">
	  </p>

	  <p>And here is another one for the vertical metrics:</p>

	  <p align="center">
	    <img src="metrics2.png"
		 height="278"
		 width="294"
		 alt="vertical glyph metrics">
	  </p>


	  <h3 id="section-4">4. The effects of grid-fitting</h3>

	  <p>Because hinting aligns the glyph's control points to the
	    pixel grid, this process slightly modifies the dimensions
	    of character images in ways that differ from simple
	    scaling.</p>

	  <p>For example, the image of the lowercase &lsquo;m&rsquo;
	    letter sometimes fits a square in the master grid.
	    However, to make it readable at small pixel sizes, hinting
	    tends to enlarge its scaled outline horizontally in order
	    to keep its three legs distinctly visible, resulting in a
	    wider character bitmap.</p>

	  <p>The glyph metrics are also influenced by the grid-fitting
	    process:</p>

	  <ul>
	    <li>
              <p>The image's width and height are altered.  Even if
		this is only by one pixel, it can make a big
		difference at small pixel sizes.</p>
	    </li>
	    <li>
              <p>The image's bounding box is modified, thus modifying
		the bearings.</p>
	    </li>
	    <li>
              <p>The advances must be updated.  For example, the
		advance width must be incremented if the hinted bitmap
		is larger than the scaled one, to reflect the
		augmented glyph width.</p>
	    </li>
	  </ul>

	  <p>This has some implications:</p>

	  <ul>
	    <li>
              <p>Because of hinting, simply scaling the font ascent or
		descent might not give correct results.  A possible
		solution is to keep the ceiling of the scaled ascent,
		and floor of the scaled descent.</p>
	    </li>
	    <li>
              <p>There is no easy way to get the hinted glyph and
		advance widths of a range of glyphs, as hinting works
		differently on each outline.  The only solution is to
		hint each glyph separately and record the returned
		values (for example in a cache).  Some formats, like
		TrueType, even include a table of pre-computed values
		for a small set of common character pixel sizes.</p>
	    </li>
	    <li>
              <p>Hinting depends on the final character width and
		height in pixels, which means that it is highly
		resolution-dependent.  This property makes correct
		WYSIWYG layouts difficult to implement.</p>
	    </li>
	  </ul>

	  <p>Performing 2D transformations on glyph outlines is very
	    easy with FreeType.  However, when using translation on
	    hinted outlines, one should always take care
	    of <b>exclusively using integer pixel distances</b> (which
	    means that the parameters to the
	    <tt>FT_Outline_Translate</tt> API function should all be
	    multiples of&nbsp;64, as the point coordinates are in
	    26.6&nbsp;fixed-point format).  Otherwise, the translation
	    will simply <em>ruin the hinter's work</em>, resulting in
	    very low quality bitmaps!</p>


	  <h3 id="section-5">5. Text widths and bounding box</h3>

	  <p>As seen before, the &lsquo;origin&rsquo; of a given glyph
	    corresponds to the position of the pen on the baseline.
	    It is not necessarily located on one of the glyph's
	    bounding box corners, unlike many typical bitmapped font
	    formats.  In some cases, the origin can be out of the
	    bounding box, in others, it can be within it, depending on
	    the shape of the given glyph.</p>

	  <p>Likewise, the glyph's &lsquo;advance width&rsquo; is the
	    increment to apply to the pen position during layout, and
	    is not related to the glyph's &lsquo;width&rsquo;, which
	    really is the glyph's bounding width.</p>

	  <p>The same conventions apply to strings of text.  This
	  means that:</p>

	  <ul>
	    <li>
              <p>The bounding box of a given string of text doesn't
		necessarily contain the text cursor, nor is the latter
		located on one of its corners.</p>
	    </li>
	    <li>
              <p>The string's advance width isn't related to its
		bounding box dimensions.  Especially if it contains
		beginning and terminal spaces or tabs.</p>
	    </li>
	    <li>
              <p>Finally, additional processing like kerning creates
		strings of text whose dimensions are not directly
		related to the simple juxtaposition of individual
		glyph metrics.  For example, the advance width of
		&lsquo;VA&rsquo; isn't the sum of the advances of
		&lsquo;V&rsquo; and &lsquo;A&rsquo; taken
		separately.</p>
	    </li>
	  </ul>
        </div>

        <!-- ************************************************** -->

        <div class="updated">
          <p>Last update: 07-Dec-2014</p>
        </div>
      </div>
    </div>


    <!-- ************************************************** -->

    <div class="col2">
    </div>
  </div>
</div>


<!-- ************************************************** -->

<div id="TOC">
  <ul>
    <li class="funding">
      <p><a href="https://pledgie.com/campaigns/24434">
        <img alt="Click here to lend your support to the FreeType project and make a donation at pledgie.com!"
             src="https://pledgie.com/campaigns/24434.png?skin_name=chrome"
             border="0"
             align="middle">
      </a></p>

      <p><a href="https://flattr.com/thing/421342/lemzwerg-on-Flattr"
         target="_blank">
        <img class="with-border"
             src="http://api.flattr.com/button/flattr-badge-large.png"
             alt="Flattr this"
             title="Flattr this"
             border="0"
             align="middle">
      </a></p>
    </li>
    <li class="primary">
      <a href="http://freetype.org/index.html">Home</a>
    </li>
    <li class="primary">
      <a href="http://freetype.org/index.html#news">News</a>
    </li>
    <li class="primary">
      <a href="../index.html">Overview</a>
    </li>
    <li class="primary">
      <a href="../documentation.html">Documentation</a>
    </li>
    <li class="primary">
      <a href="http://freetype.org/developer.html">Development</a>
    </li>
    <li class="primary">
      <a href="http://freetype.org/contact.html"
         class="emphasis">Contact</a>
    </li>

    <li>
      &nbsp; <!-- separate primary from secondary entries -->
    </li>

    <li class="secondary">
      <a href="index.html">FreeType Glyph Conventions</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-1.html">Basic Typographic Concepts</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-2.html">Glyph Outlines</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-3.html" class="current">Glyph Metrics</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-4.html">Kerning</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-5.html">Text Processing</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-6.html">FreeType Outlines</a>
    </li>
    <li class="tertiary">
      <a href="glyphs-7.html">FreeType Bitmaps</a>
    </li>
  </ul>
</div>

</div> <!-- id="wrapper" -->

<div id="TOC-bottom">
</div>

</body>
</html>
@


1.4
log
@
Update to freetype-doc-2.6.3
@
text
@d93 1
a93 1
		<img src="Image1.png"
d104 1
a104 1
		<img src="Image2.png"
d293 1
a293 1
	    <img src="Image3.png"
d302 1
a302 1
	    <img src="Image4.png"
@


1.3
log
@
Sync freetype-doc with freetype, i.e. update freetype-doc to
ver. 2.6.2

ok matthieu@@
@
text
@d27 1
a27 1
          src="../javascript/jquery-1.11.0.min.js">
d30 1
a30 1
          src="../javascript/jquery.ba-resize.min.js">
d33 1
a33 1
          src="../javascript/freetype2.js">
@


1.2
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@d1 5
a5 3
<!doctype html public "-//w3c//dtd html 4.0 transitional//en"
          "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
d8 7
a14 1
        content="text/html; charset=iso-8859-1">
d17 20
a36 1
  <title>FreeType Glyph Conventions</title>
d39 478
a516 416
<body text="#000000"
      bgcolor="#FFFFFF"
      link="#0000EF"
      vlink="#51188E"
      alink="#FF0000">

<h1 align=center>
  FreeType Glyph Conventions
</h1>

<h2 align=center>
  Version&nbsp;2.1
</h2>

<h3 align=center>
  Copyright&nbsp;1998-2000 David Turner (<a
  href="mailto:david@@freetype.org">david@@freetype.org</a>)<br>
  Copyright&nbsp;2000 The FreeType Development Team (<a
  href="mailto:devel@@freetype.org">devel@@freetype.org</a>)
</h3>

<center>
<table width="65%">
<tr><td>

  <center>
  <table width="100%"
         border=0
         cellpadding=5>
  <tr bgcolor="#CCFFCC"
      valign=center>
    <td align=center
        width="30%">
      <a href="glyphs-2.html">Previous</a>
    </td>
    <td align=center
        width="30%">
      <a href="index.html">Contents</a>
    </td>
    <td align=center
        width="30%">
      <a href="glyphs-4.html">Next</a>
    </td>
  </tr>
  </table>
  </center>

  <p><hr></p>

  <table width="100%">
  <tr bgcolor="#CCCCFF"
      valign=center><td>
    <h2>
      III. Glyph metrics
    </h2>
  </td></tr>
  </table>

    <a name="section-1">
    <h3>
      1. Baseline, pens and layouts
    </h3>

    <p>The baseline is an imaginary line that is used to "guide" glyphs when
    rendering text.  It can be horizontal (e.g. Roman, Cyrillic, Arabic,
    etc.) or vertical (e.g. Chinese, Japanese, Korean, etc).  Moreover, to
    render text, a virtual point, located on the baseline, called the <em>pen
    position</em> or <em>origin</em>, is used to locate glyphs.</p>

    <p>Each layout uses a different convention for glyph placement:</p>

    <ul>
      <li>
        <p>With horizontal layout, glyphs simply "rest" on the baseline.
        Text is rendered by incrementing the pen position, either to the
        right or to the left.</p>

        <p>The distance between two successive pen positions is
        glyph-specific and is called the <em>advance width</em>.  Note that
        its value is <em>always</em> positive, even for right-to-left
        oriented alphabets, like Arabic.  This introduces some differences
        in the way text is rendered.</p>

        <p><em>The pen position is always placed on the baseline.</em></p>

        <p><center>
          <img src="Image1.png"
               height=179 width=458
               alt="horizontal layout">
        </center></p>
      </li>
      <li>
        <p>With a vertical layout, glyphs are centered around the
        baseline:</p>

        <p><center>
          <img src="Image2.png"
               height=275 width=162
               alt="vertical layout">
        </center></p>
      </li>
    </ul>


    <a name="section-2">
    <h3>
      2. Typographic metrics and bounding boxes
    </h3>

    <p>A various number of face metrics are defined for all glyphs in a
    given font.</p>

    <ul>
      <li>
        <p><em>Ascent</em></p>

        <p>The distance from the baseline to the highest/upper grid
        coordinate used to place an outline point.  It is a positive value,
        due to the grid's orientation with the <i>Y</i>&nbsp;axis
        upwards.</p>
      </li>

      <li>
        <p><em>Descent</em></p>

        <p>The distance from the baseline to the lowest grid coordinate used
        to place an outline point.  This is a negative value, due to the
        grid's orientation.</p>
      </li>

      <li>
        <p><em>Linegap</em></p>

        <p>The distance that must be placed between two lines of text.  The
        baseline-to-baseline distance should be computed as:

        <center><p>
          <tt>ascent - descent + linegap</tt>
        </p></center>

        <p>if you use the typographic values.</p>
      </li>
    </ul>

    <p>Other, simpler metrics are:</p>

    <ul>
      <li>
        <p><em>The glyph's bounding box</em>, also called <em>bbox</em></p>

        <p>This is an imaginary box that encloses all glyphs from the font,
        usually as tightly as possible.  It is represented by four fields,
        namely <tt>xMin</tt>, <tt>yMin</tt>, <tt>xMax</tt>, and
        <tt>yMax</tt>, that can be computed for any outline.  Their values
        can be in font units (if measured in the original outline) or in
        fractional/integer pixel units (when measured on scaled
        outlines).</p>

        <p>Note that if it wasn't for grid-fitting, you wouldn't need to
        know a box's complete values, but only its dimensions to know how
        big is a glyph outline/bitmap.  However, correct rendering of hinted
        glyphs needs the preservation of important grid alignment on each
        glyph translation/placement on the baseline.</p>
      </li>

      <li>
        <p><em>Internal leading</em></p>

        <p>This concept comes directly from the world of traditional
        typography.  It represents the amount of space within the
        <em>leading</em> which is reserved for glyph features that lay
        outside of the EM square (like accentuation).  It usually can be
        computed as:</p>

        <center><p>
          <tt>internal leading = ascent - descent - EM_size</tt>
        </p></center>
      </li>

      <li>
        <p><em>External leading</em></p>

        <p>This is another name for the line gap.</p>
      </li>
    </ul>


    <a name="section-3">
    <h3>
      3. Bearings and Advances
    </h3>

    Each glyph has also distances called <em>bearings</em> and
    <em>advances</em>.  Their definition is constant, but their values
    depend on the layout, as the same glyph can be used to render text
    either horizontally or vertically:

    <ul>
      <li>
        <p><em>Left side bearing</em> or <em>bearingX</em></p>

        <p>The horizontal distance from the current pen position to the
        glyph's left bbox edge.  It is positive for horizontal layouts, and
        in most cases negative for vertical ones.</p>
      </li>

      <li>
        <p><em>Top side bearing</em> or <em>bearingY</em></p>

        <p>The vertical distance from the baseline to the top of the glyph's
        bbox.  It is usually positive for horizontal layouts, and negative
        for vertical ones.</p>
      </li>

      <li>
        <p><em>Advance width</em> or <em>advanceX</em></p>

        <p>The horizontal distance the pen position must be incremented (for
        left-to-right writing) or decremented (for right-to-left writing) by
        after each glyph is rendered when processing text.  It is always
        positive for horizontal layouts, and null for vertical ones.</p>
      </li>

      <li>
        <p><em>Advance height</em> <em>advanceY</em></p>

        <p>The vertical distance the pen position must be decremented by
        after each glyph is rendered.  It is always null for horizontal
        layouts, and positive for vertical layouts.</p>
      </li>

      <li>
        <p><em>Glyph width</em></p>

        <p>The glyph's horizontal extent.  For unscaled font coordinates, it
        is <tt>bbox.xMax-bbox.xMin</tt>.  For scaled glyphs, its computation
        requests specific care, described in the grid-fitting chapter
        below.</p>
      </li>

      <li>
        <p><em>Glyph height</em>

        <p>The glyph's vertical extent. For unscaled font coordinates, it is
        <tt>bbox.yMax-bbox.yMin</tt>.  For scaled glyphs, its computation
        requests specific care, described in the grid-fitting chapter
        below.</p>
      </li>

      <li>
        <p><em>Right side bearing</em></p>

        <p>Only used for horizontal layouts to describe the distance from
        the bbox's right edge to the advance width.  It is in most cases a
        non-negative number:</p>

        <p><center>
          <tt>advance_width - left_side_bearing - (xMax-xMin)</tt>
        </center></p>
      </li>
    </ul>

    <p>Here is a picture giving all the details for horizontal metrics:

    <center><p>
      <img src="Image3.png"
           height=253 width=388
           alt="horizontal glyph metrics">
    </p></center>

    <p>And here is another one for the vertical metrics:</p>

    <center><p>
      <img src="Image4.png"
           height=278 width=294
           alt="vertical glyph metrics">
    </p></center>


    <a name="section-4">
    <h3>
      4. The effects of grid-fitting
    </h3>

    <p>Because hinting aligns the glyph's control points to the pixel grid,
    this process slightly modifies the dimensions of character images in
    ways that differ from simple scaling.</p>

    <p>For example, the image of the lowercase "m" letter sometimes fits a
    square in the master grid.  However, to make it readable at small pixel
    sizes, hinting tends to enlarge its scaled outline in order to keep its
    three legs distinctly visible, resulting in a larger character
    bitmap.</p>

    <p>The glyph metrics are also influenced by the grid-fitting process:

    <ul>
      <li>
        The image's width and height are altered.  Even if this is only by
        one pixel, it can make a big difference at small pixel sizes.
      </li>
      <li>
        The image's bounding box is modified, thus modifying the bearings.
      </li>
      <li>
        The advances must be updated.  For example, the advance width must
        be incremented if the hinted bitmap is larger than the scaled one,
        to reflect the augmented glyph width.
      </li>
    </ul>

    <p>This has some implications:</p>

    <ul>
      <li>
        Because of hinting, simply scaling the font ascent or descent might
        not give correct results.  A possible solution is to keep the ceiling
        of the scaled ascent, and floor of the scaled descent.
      </li>

      <li>
        There is no easy way to get the hinted glyph and advance widths of a
        range of glyphs, as hinting works differently on each outline.  The
        only solution is to hint each glyph separately and record the
        returned values.  Some formats, like TrueType, even include a table
        of pre-computed values for a small set of common character pixel
        sizes.
      </li>
      <li>
        Hinting depends on the final character width and height in pixels,
        which means that it is highly resolution-dependent.  This property
        makes correct WYSIWYG layouts difficult to implement.
      </li>
    </ul>


    <em>
      <p>Performing 2D transformations on glyph outlines is very easy with
      FreeType.  However, when using translation on a hinted outlines, one
      should aways take care of <b>exclusively using integer pixel
      distances</b> (which means that the parameters to the
      <tt>FT_Outline_Translate()</tt> API should all be multiples
      of&nbsp;64, as the point coordinates are in 26.6&nbsp;fixed-point
      format).</p>

      <p>Otherwise, the translation will simply <em>ruin the hinter's
      work</em>, resulting in a very low quality bitmaps!</p>
    </em>


    <a name="section-5">
    <h3>
      5. Text widths and bounding box
    </h3>

    <p>As seen before, the "origin" of a given glyph corresponds to the
    position of the pen on the baseline.  It is not necessarily located on
    one of the glyph's bounding box corners, unlike many typical bitmapped
    font formats.  In some cases, the origin can be out of the bounding box,
    in others, it can be within it, depending on the shape of the given
    glyph.</p>

    <p>Likewise, the glyph's "advance width" is the increment to apply to
    the pen position during layout, and is not related to the glyph's
    "width", which really is the glyph's bounding width.

    <p>The same conventions apply to strings of text.  This means that:

    <ul>
      <li>
        The bounding box of a given string of text doesn't necessarily
        contain the text cursor, nor is the latter located on one of its
        corners.
      </li>

      <li>
        The string's advance width isn't related to its bounding box
        dimensions.  Especially if it contains beginning and terminal spaces
        or tabs.
      </li>
      <li>
        Finally, additional processing like kerning creates strings of text
        whose dimensions are not directly related to the simple
        juxtaposition of individual glyph metrics.  For example, the advance
        width of "VA" isn't the sum of the advances of "V" and "A" taken
        separately.
      </li>
    </ul>

  <p><hr></p>

  <center>
  <table width="100%"
         border=0
         cellpadding=5>
  <tr bgcolor="#CCFFCC"
      valign=center>
    <td align=center
        width="30%">
      <a href="glyphs-2.html">Previous</a>
    </td>
    <td align=center
        width="30%">
      <a href="index.html">Contents</a>
    </td>
    <td align=center
        width="30%">
      <a href="glyphs-4.html">Next</a>
    </td>
  </tr>
  </table>
  </center>

</td></tr>
</table>
</center>
@


1.1
log
@Initial revision
@
text
@d354 1
a354 1
      of&nbsp;64, as the point coordinates are in 26.6&nbsp;fixed float
@


1.1.1.1
log
@import freetype 2.3.5
@
text
@@
