head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.2.0.22
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.20
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.06.23.16.15.18;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	nHj0O50aY5QcUcQ4;

1.5
date	2016.05.29.11.57.11;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	1dOLexdOAzW2mQjp;

1.4
date	2015.10.19.07.51.36;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	d2XmJCtYff11VIDu;

1.3
date	2014.01.12.15.08.27;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2013.06.07.17.21.08;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.46.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.46.17;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.31.22;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  fttrigon.h                                                             */
/*                                                                         */
/*    FreeType trigonometric functions (specification).                    */
/*                                                                         */
/*  Copyright 2001-2017 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef FTTRIGON_H_
#define FTTRIGON_H_

#include FT_FREETYPE_H

#ifdef FREETYPE_H
#error "freetype.h of FreeType 1 has been loaded!"
#error "Please fix the directory search order for header files"
#error "so that freetype.h of FreeType 2 is found first."
#endif


FT_BEGIN_HEADER


  /*************************************************************************/
  /*                                                                       */
  /* <Section>                                                             */
  /*   computations                                                        */
  /*                                                                       */
  /*************************************************************************/


  /*************************************************************************
   *
   * @@type:
   *   FT_Angle
   *
   * @@description:
   *   This type is used to model angle values in FreeType.  Note that the
   *   angle is a 16.16 fixed-point value expressed in degrees.
   *
   */
  typedef FT_Fixed  FT_Angle;


  /*************************************************************************
   *
   * @@macro:
   *   FT_ANGLE_PI
   *
   * @@description:
   *   The angle pi expressed in @@FT_Angle units.
   *
   */
#define FT_ANGLE_PI  ( 180L << 16 )


  /*************************************************************************
   *
   * @@macro:
   *   FT_ANGLE_2PI
   *
   * @@description:
   *   The angle 2*pi expressed in @@FT_Angle units.
   *
   */
#define FT_ANGLE_2PI  ( FT_ANGLE_PI * 2 )


  /*************************************************************************
   *
   * @@macro:
   *   FT_ANGLE_PI2
   *
   * @@description:
   *   The angle pi/2 expressed in @@FT_Angle units.
   *
   */
#define FT_ANGLE_PI2  ( FT_ANGLE_PI / 2 )


  /*************************************************************************
   *
   * @@macro:
   *   FT_ANGLE_PI4
   *
   * @@description:
   *   The angle pi/4 expressed in @@FT_Angle units.
   *
   */
#define FT_ANGLE_PI4  ( FT_ANGLE_PI / 4 )


  /*************************************************************************
   *
   * @@function:
   *   FT_Sin
   *
   * @@description:
   *   Return the sinus of a given angle in fixed-point format.
   *
   * @@input:
   *   angle ::
   *     The input angle.
   *
   * @@return:
   *   The sinus value.
   *
   * @@note:
   *   If you need both the sinus and cosinus for a given angle, use the
   *   function @@FT_Vector_Unit.
   *
   */
  FT_EXPORT( FT_Fixed )
  FT_Sin( FT_Angle  angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Cos
   *
   * @@description:
   *   Return the cosinus of a given angle in fixed-point format.
   *
   * @@input:
   *   angle ::
   *     The input angle.
   *
   * @@return:
   *   The cosinus value.
   *
   * @@note:
   *   If you need both the sinus and cosinus for a given angle, use the
   *   function @@FT_Vector_Unit.
   *
   */
  FT_EXPORT( FT_Fixed )
  FT_Cos( FT_Angle  angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Tan
   *
   * @@description:
   *   Return the tangent of a given angle in fixed-point format.
   *
   * @@input:
   *   angle ::
   *     The input angle.
   *
   * @@return:
   *   The tangent value.
   *
   */
  FT_EXPORT( FT_Fixed )
  FT_Tan( FT_Angle  angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Atan2
   *
   * @@description:
   *   Return the arc-tangent corresponding to a given vector (x,y) in
   *   the 2d plane.
   *
   * @@input:
   *   x ::
   *     The horizontal vector coordinate.
   *
   *   y ::
   *     The vertical vector coordinate.
   *
   * @@return:
   *   The arc-tangent value (i.e. angle).
   *
   */
  FT_EXPORT( FT_Angle )
  FT_Atan2( FT_Fixed  x,
            FT_Fixed  y );


  /*************************************************************************
   *
   * @@function:
   *   FT_Angle_Diff
   *
   * @@description:
   *   Return the difference between two angles.  The result is always
   *   constrained to the ]-PI..PI] interval.
   *
   * @@input:
   *   angle1 ::
   *     First angle.
   *
   *   angle2 ::
   *     Second angle.
   *
   * @@return:
   *   Constrained value of `value2-value1'.
   *
   */
  FT_EXPORT( FT_Angle )
  FT_Angle_Diff( FT_Angle  angle1,
                 FT_Angle  angle2 );


  /*************************************************************************
   *
   * @@function:
   *   FT_Vector_Unit
   *
   * @@description:
   *   Return the unit vector corresponding to a given angle.  After the
   *   call, the value of `vec.x' will be `cos(angle)', and the value of
   *   `vec.y' will be `sin(angle)'.
   *
   *   This function is useful to retrieve both the sinus and cosinus of a
   *   given angle quickly.
   *
   * @@output:
   *   vec ::
   *     The address of target vector.
   *
   * @@input:
   *   angle ::
   *     The input angle.
   *
   */
  FT_EXPORT( void )
  FT_Vector_Unit( FT_Vector*  vec,
                  FT_Angle    angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Vector_Rotate
   *
   * @@description:
   *   Rotate a vector by a given angle.
   *
   * @@inout:
   *   vec ::
   *     The address of target vector.
   *
   * @@input:
   *   angle ::
   *     The input angle.
   *
   */
  FT_EXPORT( void )
  FT_Vector_Rotate( FT_Vector*  vec,
                    FT_Angle    angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Vector_Length
   *
   * @@description:
   *   Return the length of a given vector.
   *
   * @@input:
   *   vec ::
   *     The address of target vector.
   *
   * @@return:
   *   The vector length, expressed in the same units that the original
   *   vector coordinates.
   *
   */
  FT_EXPORT( FT_Fixed )
  FT_Vector_Length( FT_Vector*  vec );


  /*************************************************************************
   *
   * @@function:
   *   FT_Vector_Polarize
   *
   * @@description:
   *   Compute both the length and angle of a given vector.
   *
   * @@input:
   *   vec ::
   *     The address of source vector.
   *
   * @@output:
   *   length ::
   *     The vector length.
   *
   *   angle ::
   *     The vector angle.
   *
   */
  FT_EXPORT( void )
  FT_Vector_Polarize( FT_Vector*  vec,
                      FT_Fixed   *length,
                      FT_Angle   *angle );


  /*************************************************************************
   *
   * @@function:
   *   FT_Vector_From_Polar
   *
   * @@description:
   *   Compute vector coordinates from a length and angle.
   *
   * @@output:
   *   vec ::
   *     The address of source vector.
   *
   * @@input:
   *   length ::
   *     The vector length.
   *
   *   angle ::
   *     The vector angle.
   *
   */
  FT_EXPORT( void )
  FT_Vector_From_Polar( FT_Vector*  vec,
                        FT_Fixed    length,
                        FT_Angle    angle );

  /* */


FT_END_HEADER

#endif /* FTTRIGON_H_ */


/* END */
@


1.5
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2001-2016 by                                                 */
@


1.4
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d7 1
a7 1
/*  Copyright 2001-2015 by                                                 */
d19 2
a20 2
#ifndef __FTTRIGON_H__
#define __FTTRIGON_H__
d347 1
a347 1
#endif /* __FTTRIGON_H__ */
@


1.3
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d7 1
a7 1
/*  Copyright 2001, 2003, 2005, 2007, 2013 by                              */
d228 2
a229 2
   *   call, the value of `vec.x' will be `sin(angle)', and the value of
   *   `vec.y' will be `cos(angle)'.
d240 1
a240 1
   *     The address of angle.
d262 1
a262 1
   *     The address of angle.
@


1.2
log
@Update to freetype 2.4.12. tested by many during t2k13. Thanks.
@
text
@@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2001, 2003, 2005 by                                          */
d49 1
a49 1
   *   angle is a 16.16 fixed float value expressed in degrees.
d109 1
a109 1
   *   Return the sinus of a given angle in fixed point format.
d133 1
a133 1
   *   Return the cosinus of a given angle in fixed point format.
d157 1
a157 1
   *   Return the tangent of a given angle in fixed point format.
d213 1
a213 1
   *   Contrainted value of `value2-value1'.
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d7 1
a7 1
/*  Copyright 2001, 2003, 2005, 2007 by                                    */
d213 1
a213 1
   *   Constrained value of `value2-value1'.
@

