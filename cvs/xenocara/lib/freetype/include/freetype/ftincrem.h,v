head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.2
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v2_3_5:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v2_2_1:1.1.1.1
	freetype:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.06.23.16.15.18;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	nHj0O50aY5QcUcQ4;

1.7
date	2016.05.29.11.57.11;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	1dOLexdOAzW2mQjp;

1.6
date	2015.10.19.07.51.36;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	d2XmJCtYff11VIDu;

1.5
date	2014.01.12.15.08.26;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2010.03.25.20.49.54;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.21.05.09.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.22.17.37.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.46.12;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.46.12;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.31.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to freetype-2.8

No fallout in a bulk build on i386 (sthen@@)

OK matthieu@@, sthen@@
@
text
@/***************************************************************************/
/*                                                                         */
/*  ftincrem.h                                                             */
/*                                                                         */
/*    FreeType incremental loading (specification).                        */
/*                                                                         */
/*  Copyright 2002-2017 by                                                 */
/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
/*                                                                         */
/*  This file is part of the FreeType project, and may only be used,       */
/*  modified, and distributed under the terms of the FreeType project      */
/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
/*  this file you indicate that you have read the license and              */
/*  understand and accept it fully.                                        */
/*                                                                         */
/***************************************************************************/


#ifndef FTINCREM_H_
#define FTINCREM_H_

#include <ft2build.h>
#include FT_FREETYPE_H

#ifdef FREETYPE_H
#error "freetype.h of FreeType 1 has been loaded!"
#error "Please fix the directory search order for header files"
#error "so that freetype.h of FreeType 2 is found first."
#endif


FT_BEGIN_HEADER

  /***************************************************************************
   *
   * @@section:
   *    incremental
   *
   * @@title:
   *    Incremental Loading
   *
   * @@abstract:
   *    Custom Glyph Loading.
   *
   * @@description:
   *   This section contains various functions used to perform so-called
   *   `incremental' glyph loading.  This is a mode where all glyphs loaded
   *   from a given @@FT_Face are provided by the client application.
   *
   *   Apart from that, all other tables are loaded normally from the font
   *   file.  This mode is useful when FreeType is used within another
   *   engine, e.g., a PostScript Imaging Processor.
   *
   *   To enable this mode, you must use @@FT_Open_Face, passing an
   *   @@FT_Parameter with the @@FT_PARAM_TAG_INCREMENTAL tag and an
   *   @@FT_Incremental_Interface value.  See the comments for
   *   @@FT_Incremental_InterfaceRec for an example.
   *
   */


  /***************************************************************************
   *
   * @@type:
   *   FT_Incremental
   *
   * @@description:
   *   An opaque type describing a user-provided object used to implement
   *   `incremental' glyph loading within FreeType.  This is used to support
   *   embedded fonts in certain environments (e.g., PostScript interpreters),
   *   where the glyph data isn't in the font file, or must be overridden by
   *   different values.
   *
   * @@note:
   *   It is up to client applications to create and implement @@FT_Incremental
   *   objects, as long as they provide implementations for the methods
   *   @@FT_Incremental_GetGlyphDataFunc, @@FT_Incremental_FreeGlyphDataFunc
   *   and @@FT_Incremental_GetGlyphMetricsFunc.
   *
   *   See the description of @@FT_Incremental_InterfaceRec to understand how
   *   to use incremental objects with FreeType.
   *
   */
  typedef struct FT_IncrementalRec_*  FT_Incremental;


  /***************************************************************************
   *
   * @@struct:
   *   FT_Incremental_MetricsRec
   *
   * @@description:
   *   A small structure used to contain the basic glyph metrics returned
   *   by the @@FT_Incremental_GetGlyphMetricsFunc method.
   *
   * @@fields:
   *   bearing_x ::
   *     Left bearing, in font units.
   *
   *   bearing_y ::
   *     Top bearing, in font units.
   *
   *   advance ::
   *     Horizontal component of glyph advance, in font units.
   *
   *   advance_v ::
   *     Vertical component of glyph advance, in font units.
   *
   * @@note:
   *   These correspond to horizontal or vertical metrics depending on the
   *   value of the `vertical' argument to the function
   *   @@FT_Incremental_GetGlyphMetricsFunc.
   *
   */
  typedef struct  FT_Incremental_MetricsRec_
  {
    FT_Long  bearing_x;
    FT_Long  bearing_y;
    FT_Long  advance;
    FT_Long  advance_v;     /* since 2.3.12 */

  } FT_Incremental_MetricsRec;


  /***************************************************************************
   *
   * @@struct:
   *   FT_Incremental_Metrics
   *
   * @@description:
   *   A handle to an @@FT_Incremental_MetricsRec structure.
   *
   */
   typedef struct FT_Incremental_MetricsRec_*  FT_Incremental_Metrics;


  /***************************************************************************
   *
   * @@type:
   *   FT_Incremental_GetGlyphDataFunc
   *
   * @@description:
   *   A function called by FreeType to access a given glyph's data bytes
   *   during @@FT_Load_Glyph or @@FT_Load_Char if incremental loading is
   *   enabled.
   *
   *   Note that the format of the glyph's data bytes depends on the font
   *   file format.  For TrueType, it must correspond to the raw bytes within
   *   the `glyf' table.  For PostScript formats, it must correspond to the
   *   *unencrypted* charstring bytes, without any `lenIV' header.  It is
   *   undefined for any other format.
   *
   * @@input:
   *   incremental ::
   *     Handle to an opaque @@FT_Incremental handle provided by the client
   *     application.
   *
   *   glyph_index ::
   *     Index of relevant glyph.
   *
   * @@output:
   *   adata ::
   *     A structure describing the returned glyph data bytes (which will be
   *     accessed as a read-only byte block).
   *
   * @@return:
   *   FreeType error code.  0~means success.
   *
   * @@note:
   *   If this function returns successfully the method
   *   @@FT_Incremental_FreeGlyphDataFunc will be called later to release
   *   the data bytes.
   *
   *   Nested calls to @@FT_Incremental_GetGlyphDataFunc can happen for
   *   compound glyphs.
   *
   */
  typedef FT_Error
  (*FT_Incremental_GetGlyphDataFunc)( FT_Incremental  incremental,
                                      FT_UInt         glyph_index,
                                      FT_Data*        adata );


  /***************************************************************************
   *
   * @@type:
   *   FT_Incremental_FreeGlyphDataFunc
   *
   * @@description:
   *   A function used to release the glyph data bytes returned by a
   *   successful call to @@FT_Incremental_GetGlyphDataFunc.
   *
   * @@input:
   *   incremental ::
   *     A handle to an opaque @@FT_Incremental handle provided by the client
   *     application.
   *
   *   data ::
   *     A structure describing the glyph data bytes (which will be accessed
   *     as a read-only byte block).
   *
   */
  typedef void
  (*FT_Incremental_FreeGlyphDataFunc)( FT_Incremental  incremental,
                                       FT_Data*        data );


  /***************************************************************************
   *
   * @@type:
   *   FT_Incremental_GetGlyphMetricsFunc
   *
   * @@description:
   *   A function used to retrieve the basic metrics of a given glyph index
   *   before accessing its data.  This is necessary because, in certain
   *   formats like TrueType, the metrics are stored in a different place from
   *   the glyph images proper.
   *
   * @@input:
   *   incremental ::
   *     A handle to an opaque @@FT_Incremental handle provided by the client
   *     application.
   *
   *   glyph_index ::
   *     Index of relevant glyph.
   *
   *   vertical ::
   *     If true, return vertical metrics.
   *
   *   ametrics ::
   *     This parameter is used for both input and output.
   *     The original glyph metrics, if any, in font units.  If metrics are
   *     not available all the values must be set to zero.
   *
   * @@output:
   *   ametrics ::
   *     The replacement glyph metrics in font units.
   *
   */
  typedef FT_Error
  (*FT_Incremental_GetGlyphMetricsFunc)
                      ( FT_Incremental              incremental,
                        FT_UInt                     glyph_index,
                        FT_Bool                     vertical,
                        FT_Incremental_MetricsRec  *ametrics );


  /**************************************************************************
   *
   * @@struct:
   *   FT_Incremental_FuncsRec
   *
   * @@description:
   *   A table of functions for accessing fonts that load data
   *   incrementally.  Used in @@FT_Incremental_InterfaceRec.
   *
   * @@fields:
   *   get_glyph_data ::
   *     The function to get glyph data.  Must not be null.
   *
   *   free_glyph_data ::
   *     The function to release glyph data.  Must not be null.
   *
   *   get_glyph_metrics ::
   *     The function to get glyph metrics.  May be null if the font does
   *     not provide overriding glyph metrics.
   *
   */
  typedef struct  FT_Incremental_FuncsRec_
  {
    FT_Incremental_GetGlyphDataFunc     get_glyph_data;
    FT_Incremental_FreeGlyphDataFunc    free_glyph_data;
    FT_Incremental_GetGlyphMetricsFunc  get_glyph_metrics;

  } FT_Incremental_FuncsRec;


  /***************************************************************************
   *
   * @@struct:
   *   FT_Incremental_InterfaceRec
   *
   * @@description:
   *   A structure to be used with @@FT_Open_Face to indicate that the user
   *   wants to support incremental glyph loading.  You should use it with
   *   @@FT_PARAM_TAG_INCREMENTAL as in the following example:
   *
   *     {
   *       FT_Incremental_InterfaceRec  inc_int;
   *       FT_Parameter                 parameter;
   *       FT_Open_Args                 open_args;
   *
   *
   *       // set up incremental descriptor
   *       inc_int.funcs  = my_funcs;
   *       inc_int.object = my_object;
   *
   *       // set up optional parameter
   *       parameter.tag  = FT_PARAM_TAG_INCREMENTAL;
   *       parameter.data = &inc_int;
   *
   *       // set up FT_Open_Args structure
   *       open_args.flags      = FT_OPEN_PATHNAME | FT_OPEN_PARAMS;
   *       open_args.pathname   = my_font_pathname;
   *       open_args.num_params = 1;
   *       open_args.params     = &parameter; // we use one optional argument
   *
   *       // open the font
   *       error = FT_Open_Face( library, &open_args, index, &face );
   *       ...
   *     }
   *
   */
  typedef struct  FT_Incremental_InterfaceRec_
  {
    const FT_Incremental_FuncsRec*  funcs;
    FT_Incremental                  object;

  } FT_Incremental_InterfaceRec;


  /***************************************************************************
   *
   * @@type:
   *   FT_Incremental_Interface
   *
   * @@description:
   *   A pointer to an @@FT_Incremental_InterfaceRec structure.
   *
   */
  typedef FT_Incremental_InterfaceRec*   FT_Incremental_Interface;


  /***************************************************************************
   *
   * @@constant:
   *   FT_PARAM_TAG_INCREMENTAL
   *
   * @@description:
   *   A constant used as the tag of @@FT_Parameter structures to indicate
   *   an incremental loading object to be used by FreeType.
   *
   */
#define FT_PARAM_TAG_INCREMENTAL  FT_MAKE_TAG( 'i', 'n', 'c', 'r' )

  /* */


FT_END_HEADER

#endif /* FTINCREM_H_ */


/* END */
@


1.7
log
@
Update to FreeType 2.6.3

ok sthen@@, naddy@@, matthieu@@
@
text
@d7 1
a7 1
/*  Copyright 2002-2016 by                                                 */
@


1.6
log
@
Update to freetype-2.6.1

OK matthieu@@

Bulk build by naddy@@, thanks!
@
text
@d7 1
a7 1
/*  Copyright 2002-2015 by                                                 */
d19 2
a20 2
#ifndef __FTINCREM_H__
#define __FTINCREM_H__
d351 1
a351 1
#endif /* __FTINCREM_H__ */
@


1.5
log
@Update to freetype 2.5.2.

With help for handling ports breakage from at least landry@@, naddy@@,
ajacoutot@@, jasper@@, and dcoppa@@. Thanks to all.

Need an up to date /etc/mtree/BSD.x11.dist (from a base system build)
before building.
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2006, 2007, 2008, 2010 by                        */
d48 1
a48 1
   *   from a given @@FT_Face are provided by the client application,
d347 1
@


1.4
log
@Update to freetpe 2.3.12. Tested against ports by naddy@@.
@
text
@@


1.3
log
@Update to Freetype 2.3.7. This is a bug fix release. No API change.
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2006, 2007, 2008 by                              */
d104 4
a107 1
   *     Glyph advance, in font units.
d120 1
@


1.2
log
@Update to freetype 2.3.6.
Contains security fixes for CVE-2008-1806, CVE-2008-1807 and CVE-2008-1808.
Tested by many.
@
text
@d52 1
a52 1
   *   engine, e.g., a Postscript Imaging Processor.
d70 1
a70 1
   *   embedded fonts in certain environments (e.g., Postscript interpreters),
d145 1
a145 1
   *   the `glyf' table.  For Postscript formats, it must correspond to the
d163 1
a163 1
   *   FreeType error code.  0 means success.
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2006 by                                          */
d34 50
a83 49
 /***************************************************************************
  *
  * @@section:
  *    incremental
  *
  * @@title:
  *    Incremental Loading
  *
  * @@abstract:
  *    Custom Glyph Loading.
  *
  * @@description:
  *   This section contains various functions used to perform so-called
  *   `incremental' glyph loading.  This is a mode where all glyphs loaded
  *   from a given @@FT_Face are provided by the client application,
  *
  *   Apart from that, all other tables are loaded normally from the font
  *   file.  This mode is useful when FreeType is used within another
  *   engine, e.g., a Postscript Imaging Processor.
  *
  *   To enable this mode, you must use @@FT_Open_Face, passing an
  *   @@FT_Parameter with the @@FT_PARAM_TAG_INCREMENTAL tag and an
  *   @@FT_Incremental_Interface value.  See the comments for
  *   @@FT_Incremental_InterfaceRec for an example.
  *
  */


 /***************************************************************************
  *
  * @@type:
  *   FT_Incremental
  *
  * @@description:
  *   An opaque type describing a user-provided object used to implement
  *   `incremental' glyph loading within FreeType.  This is used to support
  *   embedded fonts in certain environments (e.g., Postscript interpreters),
  *   where the glyph data isn't in the font file, or must be overridden by
  *   different values.
  *
  * @@note:
  *   It is up to client applications to create and implement @@FT_Incremental
  *   objects, as long as they provide implementations for the methods
  *   @@FT_Incremental_GetGlyphDataFunc, @@FT_Incremental_FreeGlyphDataFunc
  *   and @@FT_Incremental_GetGlyphMetricsFunc.
  *
  *   See the description of @@FT_Incremental_InterfaceRec to understand how
  *   to use incremental objects with FreeType.
  */
d87 25
a111 24
 /***************************************************************************
  *
  * @@struct:
  *   FT_Incremental_Metrics
  *
  * @@description:
  *   A small structure used to contain the basic glyph metrics returned
  *   by the @@FT_Incremental_GetGlyphMetricsFunc method.
  *
  * @@fields:
  *   bearing_x ::
  *     Left bearing, in font units.
  *
  *   bearing_y ::
  *     Top bearing, in font units.
  *
  *   advance ::
  *     Glyph advance, in font units.
  *
  * @@note:
  *   These correspond to horizontal or vertical metrics depending on the
  *   value of the `vertical' argument to the function
  *   @@FT_Incremental_GetGlyphMetricsFunc.
  */
d118 1
a118 1
  } FT_Incremental_MetricsRec, *FT_Incremental_Metrics;
d121 53
a173 40
 /***************************************************************************
  *
  * @@type:
  *   FT_Incremental_GetGlyphDataFunc
  *
  * @@description:
  *   A function called by FreeType to access a given glyph's data bytes
  *   during @@FT_Load_Glyph or @@FT_Load_Char if incremental loading is
  *   enabled.
  *
  *   Note that the format of the glyph's data bytes depends on the font
  *   file format.  For TrueType, it must correspond to the raw bytes within
  *   the `glyf' table.  For Postscript formats, it must correspond to the
  *   *unencrypted* charstring bytes, without any `lenIV' header.  It is
  *   undefined for any other format.
  *
  * @@input:
  *   incremental ::
  *     Handle to an opaque @@FT_Incremental handle provided by the client
  *     application.
  *
  *   glyph_index ::
  *     Index of relevant glyph.
  *
  * @@output:
  *   adata ::
  *     A structure describing the returned glyph data bytes (which will be
  *     accessed as a read-only byte block).
  *
  * @@return:
  *   FreeType error code.  0 means success.
  *
  * @@note:
  *   If this function returns succesfully the method
  *   @@FT_Incremental_FreeGlyphDataFunc will be called later to release
  *   the data bytes.
  *
  *   Nested calls to @@FT_Incremental_GetGlyphDataFunc can happen for
  *   compound glyphs.
  */
d180 19
a198 18
 /***************************************************************************
  *
  * @@type:
  *   FT_Incremental_FreeGlyphDataFunc
  *
  * @@description:
  *   A function used to release the glyph data bytes returned by a
  *   successful call to @@FT_Incremental_GetGlyphDataFunc.
  *
  * @@input:
  *   incremental ::
  *     A handle to an opaque @@FT_Incremental handle provided by the client
  *     application.
  *
  *   data ::
  *     A structure describing the glyph data bytes (which will be accessed
  *     as a read-only byte block).
  */
d204 32
a235 32
 /***************************************************************************
  *
  * @@type:
  *   FT_Incremental_GetGlyphMetricsFunc
  *
  * @@description:
  *   A function used to retrieve the basic metrics of a given glyph index
  *   before accessing its data.  This is necessary because, in certain
  *   formats like TrueType, the metrics are stored in a different place from
  *   the glyph images proper.
  *
  * @@input:
  *   incremental ::
  *     A handle to an opaque @@FT_Incremental handle provided by the client
  *     application.
  *
  *   glyph_index ::
  *     Index of relevant glyph.
  *
  *   vertical ::
  *     If true, return vertical metrics.
  *
  *   ametrics ::
  *     This parameter is used for both input and output.
  *     The original glyph metrics, if any, in font units.  If metrics are
  *     not available all the values must be set to zero.
  *
  * @@output:
  *   ametrics ::
  *     The replacement glyph metrics in font units.
  *
  */
d248 1
a248 1
   * 
d252 1
a252 1
   * 
d262 2
a263 1
   *     not provide overriding glyph metrics. 
d274 36
a309 35
 /***************************************************************************
  *
  * @@struct:
  *   FT_Incremental_InterfaceRec
  *
  * @@description:
  *   A structure to be used with @@FT_Open_Face to indicate that the user
  *   wants to support incremental glyph loading.  You should use it with
  *   @@FT_PARAM_TAG_INCREMENTAL as in the following example:
  *
  *     {
  *       FT_Incremental_InterfaceRec  inc_int;
  *       FT_Parameter                 parameter;
  *       FT_Open_Args                 open_args;
  *
  *
  *       // set up incremental descriptor
  *       inc_int.funcs  = my_funcs;
  *       inc_int.object = my_object;
  *
  *       // set up optional parameter
  *       parameter.tag  = FT_PARAM_TAG_INCREMENTAL;
  *       parameter.data = &inc_int;
  *
  *       // set up FT_Open_Args structure
  *       open_args.flags      = FT_OPEN_PATHNAME | FT_OPEN_PARAMS;
  *       open_args.pathname   = my_font_pathname;
  *       open_args.num_params = 1;
  *       open_args.params     = &parameter; // we use one optional argument
  *
  *       // open the font
  *       error = FT_Open_Face( library, &open_args, index, &face );
  *       ...
  *     }
  */
d314 1
a314 1
  
d318 9
a326 9
 /***************************************************************************
  *
  * @@type:
  *   FT_Incremental_Interface
  *
  * @@description:
  *   A pointer to an @@FT_Incremental_InterfaceRec structure.
  *
  */
d330 10
a339 10
 /***************************************************************************
  *
  * @@constant:
  *   FT_PARAM_TAG_INCREMENTAL
  *
  * @@description:
  *   A constant used as the tag of @@FT_Parameter structures to indicate
  *   an incremental loading object to be used by FreeType.
  *
  */
d342 1
a342 1
 /* */  
@


1.1.1.1
log
@Import freetype 2.2.1
@
text
@@


1.1.1.2
log
@import freetype 2.3.5
@
text
@d7 1
a7 1
/*  Copyright 2002, 2003, 2006, 2007 by                                    */
d152 1
a152 1
  *   If this function returns successfully the method
d232 1
a232 1
   *
d236 1
a236 1
   *
d246 1
a246 1
   *     not provide overriding glyph metrics.
d296 1
a296 1

d324 1
a324 1
 /* */
@

