head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v3_5_7:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v3_5_5:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.03.10.14.30.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.31.15.46.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.31.18.33.17;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.32.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.32.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.30.08.38.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to libXpm 3.5.10
@
text
@/*
 * Copyright (C) 1998 Arnaud LE HORS
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * Arnaud LE HORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of Arnaud LE HORS shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from Arnaud LE HORS.
 */

/*****************************************************************************\
* cxpm.c:                                                                     *
*                                                                             *
*  Check XPM File program                                                     *
*                                                                             *
*  Developed by Arnaud Le Hors                                                *
\*****************************************************************************/

#define CXPMPROG

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "XpmI.h"
#ifdef USE_GETTEXT
#include <locale.h>
#include <libintl.h>
#else
#define gettext(a) (a)
#endif

#undef xpmGetC
#define xpmGetC(data) sGetc(data, data->stream.file)
#define Getc sGetc
#define Ungetc sUngetc


/*
 * special getc and ungetc counting read lines and characters
 * note that 's' could stand both for "special" and "slow" ;-)
 */
static int
sGetc(xpmData *data, FILE *file)
{
    int c = getc(data->stream.file);
    if (c == '\n') {
        data->lineNum++;
        data->charNum = 0;
    } else {
        data->charNum++;
    }
    return c;
}

static void
sUngetc(xpmData *data, int c, FILE *file)
{
    ungetc(c, data->stream.file);
    if (c == '\n') {
        data->lineNum--;
        data->charNum = 0;
    } else {
        data->charNum--;
    }
}

/* include all the code we need (yeah, I know, quite ugly...) */
#include "data.c"
#include "parse.c"
#include "RdFToI.c"	/* only for OpenReadFile and xpmDataClose */
#include "hashtab.c"
#include "misc.c"
#include "Attrib.c"
#include "Image.c"

static void
ErrorMessage(
    int ErrorStatus,
    xpmData *data)

{
    char *error = NULL;

    switch (ErrorStatus) {
    case XpmSuccess:
	return;
    case XpmOpenFailed:
	/* L10N_Comments : Error produced when filename does not exist
	   or insufficient permissions to open (i.e. cxpm /no/such/file ) */
	error = gettext("Cannot open file");
	break;
    case XpmFileInvalid:
	/* L10N_Comments : Error produced when filename can be read, but
	   is not an XPM file (i.e. cxpm /dev/null ) */
	error = gettext("Invalid XPM file");
	break;
    case XpmNoMemory:
	/* L10N_Comments : Error produced when filename can be read, but
	   is too big for memory
	   (i.e. limit datasize 32 ; cxpm /usr/dt/backdrops/Crochet.pm ) */
	error = gettext("Not enough memory");
	break;
    case XpmColorFailed:
	/* L10N_Comments : Error produced when filename can be read, but
	   contains an invalid color specification (need to create test case)*/
	error = gettext("Failed to parse color");
	break;
    }

    if (error) {
	/* L10N_Comments : Wrapper around above Xpm errors - %s is
	   replaced with the contents of the error message retrieved above */
	fprintf(stderr, gettext("Xpm Error: %s.\n"), error);
	if (ErrorStatus == XpmFileInvalid && data)
	/* L10N_Comments : Error produced when filename can be read, but
	   is not an XPM file (i.e. cxpm /dev/null ) */
	  fprintf(stderr, gettext("Error found line %d near character %d\n"),
		  data->lineNum + 1,
		  data->charNum + 1);
	exit(1);
    }
}

int
main(int argc, char **argv)
{
    XpmImage image;
    char *filename;
    int ErrorStatus;
    xpmData data;

#ifdef USE_GETTEXT
    setlocale(LC_ALL,"");
    bindtextdomain("cxpm",LOCALEDIR);
    textdomain("cxpm");
#endif

    if (argc > 1) {
        if (!strcmp(argv[1], "-?") || !strncmp(argv[1], "-h", 2)) {
	    /* L10N_Comments : Usage message produced by running cxpm -h
		%s will be replaced by argv[0] (program name) */
	    fprintf(stderr, gettext("Usage: %s [filename]\n"), argv[0]);
	    exit(1);
	}
        filename = argv[1];
    } else {
        filename = NULL;
    }

    xpmInitXpmImage(&image);

    if ((ErrorStatus = OpenReadFile(filename, &data)) != XpmSuccess)
	ErrorMessage(ErrorStatus, NULL);

    ErrorStatus = xpmParseData(&data, &image, NULL);
    ErrorMessage(ErrorStatus, &data);

    xpmDataClose(&data);
    XpmFreeXpmImage(&image);

    exit(0);
}
@


1.3
log
@Update to libXpm 3.5.9. No functional change.
@
text
@d103 1
a103 1
	/* L10N_Comments : Error produced when filename does not exist 
d114 1
a114 1
	   is too big for memory 
@


1.2
log
@update to libXpm 3.5.8
@
text
@a24 1
/* $XFree86: xc/extras/Xpm/cxpm/cxpm.c,v 1.2 2001/08/01 00:44:34 tsi Exp $ */
@


1.1
log
@Initial revision
@
text
@d37 3
d41 6
d59 1
a59 3
sGetc(data, file)
    xpmData *data;
    FILE *file;
d72 1
a72 4
sUngetc(data, c, file)
    xpmData *data;
    int c;
    FILE *file;
d92 4
a95 4
void
ErrorMessage(ErrorStatus, data)
    int ErrorStatus;
    xpmData *data;
d104 3
a106 1
	error = "Cannot open file";
d109 3
a111 1
	error = "Invalid XPM file";
d114 4
a117 1
	error = "Not enough memory";
d120 3
a122 1
	error = "Failed to parse color";
d127 3
a129 1
	fprintf(stderr, "Xpm Error: %s.\n", error);
d131 3
a133 1
	  fprintf(stderr, "Error found line %d near character %d\n",
d141 1
a141 3
main(argc, argv)
    int argc;
    char **argv;
d148 6
d156 3
a158 1
	    fprintf(stderr, "Usage: %s [filename]\n", argv[0]);
@


1.1.1.1
log
@import from X.Org 7.1
@
text
@@


1.1.1.2
log
@libXpm 3.5.7
@
text
@a36 3
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
a37 6
#ifdef USE_GETTEXT
#include <locale.h>
#include <libintl.h>
#else
#define gettext(a) (a)
#endif
d89 3
a91 3
ErrorMessage(
    int ErrorStatus,
    xpmData *data)
d100 1
a100 3
	/* L10N_Comments : Error produced when filename does not exist 
	   or insufficient permissions to open (i.e. cxpm /no/such/file ) */
	error = gettext("Cannot open file");
d103 1
a103 3
	/* L10N_Comments : Error produced when filename can be read, but
	   is not an XPM file (i.e. cxpm /dev/null ) */
	error = gettext("Invalid XPM file");
d106 1
a106 4
	/* L10N_Comments : Error produced when filename can be read, but
	   is too big for memory 
	   (i.e. limit datasize 32 ; cxpm /usr/dt/backdrops/Crochet.pm ) */
	error = gettext("Not enough memory");
d109 1
a109 3
	/* L10N_Comments : Error produced when filename can be read, but
	   contains an invalid color specification (need to create test case)*/
	error = gettext("Failed to parse color");
d114 1
a114 3
	/* L10N_Comments : Wrapper around above Xpm errors - %s is
	   replaced with the contents of the error message retrieved above */
	fprintf(stderr, gettext("Xpm Error: %s.\n"), error);
d116 1
a116 3
	/* L10N_Comments : Error produced when filename can be read, but
	   is not an XPM file (i.e. cxpm /dev/null ) */
	  fprintf(stderr, gettext("Error found line %d near character %d\n"),
a132 6
#ifdef USE_GETTEXT
    setlocale(LC_ALL,"");
    bindtextdomain("cxpm",LOCALEDIR);
    textdomain("cxpm");
#endif

d135 1
a135 3
	    /* L10N_Comments : Usage message produced by running cxpm -h
		%s will be replaced by argv[0] (program name) */
	    fprintf(stderr, gettext("Usage: %s [filename]\n"), argv[0]);
@

