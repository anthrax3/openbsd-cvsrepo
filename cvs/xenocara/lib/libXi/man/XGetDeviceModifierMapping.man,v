head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.18
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.04;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xgetdevicemodifiermapping
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetDeviceModifierMapping, XSetDeviceModifierMapping \- query or change device modifier mappings
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XSetDeviceModifierMapping( Display *display,
                               XDevice *device,
                               XModifierKeymap *modmap);
.fi
.sp
.nf
XModifierKeymap *XGetDeviceModifierMapping( Display *display,
                                            XDevice *device);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device
       Specifies the device whose modifier mapping is to be
       queried or modified\&.
.fi
.sp
.nf
modmap
       Specifies a pointer to the XModifierKeymap structure\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
The XSetDeviceModifierMapping request specifies the KeyCodes of
the keys (if any) that are to be used as modifiers for the
specified device\&. If it succeeds, the X server generates a
DeviceMappingNotify event, and XSetDeviceModifierMapping
returns MappingSuccess\&. X permits at most eight modifier keys\&.
If more than eight are specified in the XModifierKeymap
structure, a BadLength error results\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The modifiermap member of the XModifierKeymap structure
contains eight sets of max_keypermod KeyCodes, one for each
modifier in the order Shift, Lock, Control, Mod1, Mod2, Mod3,
Mod4, and Mod5\&. Only nonzero KeyCodes have meaning in each set,
and zero KeyCodes are ignored\&. In addition, all of the nonzero
KeyCodes must be in the range specified by min_keycode and
max_keycode as returned by XListInputDevices, or a BadValue
error results\&. No KeyCode may appear twice in the entire map,
or a BadValue error results\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
An X server can impose restrictions on how modifiers can be
changed, for example, if certain keys do not generate up
transitions in hardware, if auto\-repeat cannot be disabled on
certain keys, or if multiple modifier keys are not supported\&.
If some such restriction is violated, the status reply is
MappingFailed, and none of the modifiers are changed\&. If the
new KeyCodes specified for a modifier differ from those
currently defined and any (current or new) keys for that
modifier are in the logically down state,
XSetDeviceModifierMapping returns MappingBusy, and none of the
modifiers is changed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceModifierMapping can generate BadLength, BadDevice,
BadMatch, BadAlloc, and BadValue errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XGetDeviceModifierMapping request returns a pointer to a
newly created XModifierKeymap structure that contains the keys
being used as modifiers\&. The structure should be freed after
use by calling XFreeModifierMapping \&. If only zero values
appear in the set for any modifier, that modifier is disabled\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetDeviceModifierMapping can generate BadDevice and BadMatch
errors\&.
.fi
.if n \{\
.RE
.\}
.sp
Structures
.sp
.if n \{\
.RS 4
.\}
.nf
The XModifierKeymap structure contains:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
int max_keypermod;
KeyCode *modifiermap;
} XModifierKeymap;
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadLength
       More than eight keys were specified in the
       XModifierKeymap structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadAlloc
       The server failed to allocate the requested resource or
       server memory\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The specified device
       does not exist or has not been opened by this client via
       XOpenInputDevice\&. This error may also occur if the
       specified device is the X keyboard or X pointer device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if an XGetDeviceModifierMapping or
       XChangeDeviceModifierMapping request was made specifying
       a device that has no keys\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside the range of values
       accepted by the request\&. Unless a specific range is
       specified for an argument, the full range defined by the
       argument\*(Aqs type is accepted\&. Any argument defined as a
       set of alternatives can generate this error\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XSetDeviceKeyMapping(libmansuffix), XSetDeviceButtonMapping(libmansuffix)
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "09/07/2010" "[FIXME: source]" "[FIXME: manual]"
d241 1
a241 1
       argument\'s type is accepted\&. Any argument defined as a
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XGETDEVICEMODIFIERMA" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@Initial revision
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XChMMap.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XChMMap.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming With Xlib
.TH XGetDeviceModifierMapping 3X11 __xorgversion__  "X FUNCTIONS"
.SH NAME
d23 139
a161 89
.SH SYNTAX
\fB
.HP
int XSetDeviceModifierMapping(\^Display *\fIdisplay\fP\^, XDevice
*\fIdevice\fP\^, XModifierKeymap  *\fImodmap\fP\^); 
.HP
XModifierKeymap *XGetDeviceModifierMapping(\^Display *\fIdisplay\fP\^, XDevice
*\fIdevice\fP\^);
.fi
\fP
.SH ARGUMENTS
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I device
Specifies the device whose modifier mapping is to be queried or modified.
.TP 12
.I modmap
Specifies a pointer to the \fIXModifierKeymap\fP structure.
.SH DESCRIPTION
The \fIXSetDeviceModifierMapping\fP
request specifies the KeyCodes of the keys (if any) that are to be used 
as modifiers for the specified device.
If it succeeds, the X server generates a \fIDeviceMappingNotify\fP
event, and \fIXSetDeviceModifierMapping\fP returns \fIMappingSuccess\fP.
X permits at most eight modifier keys.
If more than eight are specified in the
\fIXModifierKeymap\fP structure, a \fIBadLength\fP
error results.
.LP
The modifiermap member of the \fIXModifierKeymap\fP
structure contains eight sets of max_keypermod KeyCodes, 
one for each modifier in the order 
\fIShift\fP,
\fILock\fP,
\fIControl\fP,
\fIMod1\fP,
\fIMod2\fP,
\fIMod3\fP,
\fIMod4\fP,
and 
\fIMod5\fP.
Only nonzero KeyCodes have meaning in each set, 
and zero KeyCodes are ignored.
In addition, all of the nonzero KeyCodes must be in the range specified by 
min_keycode and max_keycode as returned by
\fIXListInputDevices\fP, or a \fIBadValue\fP
error results.
No KeyCode may appear twice in the entire map,
or a
\fIBadValue\fP
error results.
.LP
An X server can impose restrictions on how modifiers can be changed, 
for example,
if certain keys do not generate up transitions in hardware,
if auto-repeat cannot be disabled on certain keys,
or if multiple modifier keys are not supported.  
If some such restriction is violated, 
the status reply is
\fIMappingFailed\fP,
and none of the modifiers are changed.
If the new KeyCodes specified for a modifier differ from those
currently defined and any (current or new) keys for that modifier are
in the logically down state, 
\fIXSetDeviceModifierMapping\fP
returns \fIMappingBusy\fP,
and none of the modifiers is changed.
.LP
\fIXSetDeviceModifierMapping\fP
can generate \fIBadLength\P, \fIBadDevice\fP, \fIBadMatch\fP, \fIBadAlloc\fP,
and \fIBadValue\fP errors.
.LP
The
\fIXGetDeviceModifierMapping\fP
request returns a pointer to a newly created
\fIXModifierKeymap\fP
structure that contains the keys being used as modifiers.
The structure should be freed after use by calling
\fIXFreeModifierMapping \fP.
If only zero values appear in the set for any modifier, 
that modifier is disabled.
.LP
\fIXGetDeviceModifierMapping\fP
can generate \fIBadDevice\fP and \fIBadMatch\fP errors.
.SH STRUCTURES
The \fIXModifierKeymap\fP structure contains:
.LP
d164 2
a165 2
	int max_keypermod;
	KeyCode *modifiermap;
d168 70
a237 26
.LP
.SH DIAGNOSTICS
.TP 12
\fIBadLength\fP
More than eight keys were specified in the
\fIXModifierKeymap\fP structure.
.TP 12
\fIBadAlloc\fP
The server failed to allocate the requested resource or server memory.
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist or has 
not been opened by this client via \fIXOpenInputDevice\fP.  This error may
also occur if the specified device is the X keyboard or X pointer device.
.TP 12
\fIBadMatch\fP
This error may occur if an \fIXGetDeviceModifierMapping\fP 
or \fIXChangeDeviceModifierMapping\fP request was made 
specifying
a device that has no keys.
.TP 12
\fIBadValue\fP
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
d239 10
a248 5
XSetDeviceKeyMapping(3X11) 
.br
XSetDeviceButtonMapping(3X11) 
.br
\fI\*(xL\fP
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XGetDeviceModifierMapping __LIB_MAN_SUFFIX__ __xorgversion__  "X FUNCTIONS"
d141 1
a141 1
XSetDeviceKeyMapping(3) 
d143 1
a143 1
XSetDeviceButtonMapping(3) 
@

