head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.2
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.14
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.12
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.8
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.10
date	2016.11.03.09.28.22;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	DGhPjY0C2KOkx0Eg;

1.9
date	2013.05.31.15.15.11;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.02.15.23.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to libXi 1.7.8
@
text
@'\" t
.\"     Title: xlistinputdevices
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/13/2016
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XLISTINPUTDEVICES" "libmansuffix" "10/13/2016" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XListInputDevices, XFreeDeviceList \- list available input devices
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XDeviceInfo *XListInputDevices( Display *display,
                                int *ndevices_return);
.fi
.sp
.nf
int XFreeDeviceList( XDeviceInfo *list);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
ndevices_return
       Specifies a pointer to a variable where the number of
       available devices canbe returned\&.
.fi
.sp
.nf
list
       Specifies the list of devices to free\&. The
       XFreeDeviceList functionfrees the list of available
       extension input devices\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
The XListInputDevices request lists the available input
devices\&. This list includes the core keyboard and any physical
input device currently accessible through the X server, and any
input devices that are not currently accessible through the X
server but could be accessed if requested\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A master pointer is a virtual pointer device that does not
represent a physical device\&. It is visually represented through
a cursor\&. A master keyboard is a virtual keyboard device that
does not represent a physical device\&. It is virtually
representd through a keyboard focus\&. A master pointer and a
master keyboard are always paired (i\&.e\&. if shift is pressed on
the master keyboard, a pointer click would be a shift\-click)\&.
Multiple master pointer/keyboard pairs can exist\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
X servers supporting the X Input Extension version 2,
XListInputDevices only returns the first master pointer, the
first master keyboard and all slave devices\&. Additional master
devices are not listed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Physical devices (so\-called slave devices) are attached to
either a master pointer or a master keyboard, depending on
their capabilities\&. If a slave device generates an event, the
event is also generated by the respective master device\&.
Multiple slave devices can be attached to a single master
device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Some server implementations may make all physical input devices
available at the time the server is initialized\&. Others may
wait until requested by a client to access an input device\&. In
the latter case, it is possible that an input device will be
listed as available at one time but not at another\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For each input device available to the server, the
XListInputDevices request returns an XDeviceInfo structure\&.
That structure contains a pointer to a list of structures, each
of which contains information about one class of input
supported by the device\&. The XDeviceInfo structure is defined
as follows:
             typedef struct _XDeviceInfo {
             XID     id;
             Atom    type;
             char    *name;
             int         num_classes;
             int         use;
             XAnyClassPtr inputclassinfo;
             } XDeviceInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The id is a number in the range 0\-128 that uniquely identifies
the device\&. It is assigned to the device when it is initialized
by the server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The type field is of type Atom and indicates the nature of the
device\&. The type will correspond to one of the following strings
(defined in the header file XI\&.h):
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XI_MOUSE XI_TABLET XI_KEYBOARD XI_TOUCHSCREEN XI_TOUCHPAD
XI_BUTTONBOX XI_BARCODE XI_TRACKBALL XI_QUADRATURE XI_ID_MODULE
XI_ONE_KNOB XI_NINE_KNOB XI_KNOB_BOX XI_SPACEBALL XI_DATAGLOVE
XI_EYETRACKER XI_CURSORKEYS XI_FOOTMOUSE XI_JOYSTICK
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
These strings may be used in an XInternAtom request to return
an atom that can be compared with the type field of the
XDeviceInfo structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The name field contains a pointer to a null\-terminated string
that serves as identifier of the device\&. This identifier may be
user\-configured or automatically assigned by the server\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The num_classes field is a number in the range 0\-255 that
specifies the number of input classes supported by the device
for which information is returned by ListInputDevices\&. Some
input classes, such as class Focus and class Proximity do not
have any information to be returned by ListInputDevices\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
All devices provide an AttachClass\&. This class specifies the
master device a given slave device is attached to\&. For master
devices, the class specifies the respective paired master
device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The use field specifies how the device is currently being used\&.
If the value is IsXKeyboard, the device is a master keyboard\&.
If the value is IsXPointer, the device is a master pointer\&. If
the value is IsXExtensionPointer, the device is a slave
pointer\&. If the value is IsXExtensionKeyboard, the device is a
slave keyboard\&. If the value is IsXExtensionDevice, the device
is available for use as an extension device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The inputclassinfo field contains a pointer to the first
input\-class specific data\&. The first two fields are common to
all classes\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The class field is a number in the range 0\-255\&. It uniquely
identifies the class of input for which information is
returned\&. Currently defined classes are KeyClass, ButtonClass,
and ValuatorClass\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The length field is a number in the range 0\- 255\&. It specifies
the number of bytes of data that are contained in this input
class\&. The length includes the class and length fields\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XKeyInfo structure describes the characteristics of the
keys on the device\&. It is defined as follows:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XKeyInfo {
XID class;
int length;
unsigned short min_keycode;
unsigned short max_keycode;
unsigned short num_keys;
} XKeyInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
min_keycode is of type KEYCODE\&. It specifies the minimum
keycode that the device will report\&. The minimum keycode will
not be smaller than 8\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
max_keycode is of type KEYCODE\&. It specifies the maximum
keycode that the device will report\&. The maximum keycode will
not be larger than 255\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_keys specifies the number of keys that the device has\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XButtonInfo structure defines the characteristics of the
buttons on the device\&. It is defined as follows:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XButtonInfo {
XID class;
int length;
short num_buttons;
} XButtonInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_buttons specifies the number of buttons that the device
has\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XValuatorInfo structure defines the characteristics of the
valuators on the device\&. It is defined as follows:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct  _XValuatorInfo {
XID class;
int length;
unsigned char num_axes;
unsigned char mode;
unsigned long motion_buffer;
XAxisInfoPtr axes;
} XValuatorInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
num_axes contains the number of axes the device supports\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
mode is a constant that has one of the following values:
Absolute or Relative\&. Some devices allow the mode to be changed
dynamically via the SetDeviceMode request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
motion_buffer_size is a cardinal number that specifies the
number of elements that can be contained in the motion history
buffer for the device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The axes field contains a pointer to an XAxisInfo structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XAxisInfo structure is defined as follows:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct _XAxisInfo {
int resolution;
int min_value;
int max_value;
} XAxisInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The resolution contains a number in counts/meter\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The min_val field contains a number that specifies the minimum
value the device reports for this axis\&. For devices whose mode
is Relative, the min_val field will contain 0\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The max_val field contains a number that specifies the maximum
value the device reports for this axis\&. For devices whose mode
is Relative, the max_val field will contain 0\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XAttachInfo structure is defined as follows:
             typedef struct _XAttachInfo {
             int     attached;
             } XAttachInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If the device is a slave device, attached specifies the device
ID of the master device this device is attached to\&. If the
device is not attached to a master device, attached is
Floating\&. If the device is a master device, attached specifies
the device ID of the master device this device is paired with\&.
.fi
.if n \{\
.RE
.\}
.SH "RETURN VALUE"
.sp
.if n \{\
.RS 4
.\}
.nf
XListInputDevices returns a pointer to an array of XDeviceInfo
structs and sets ndevices_return to the number of elements in
that array\&. To free the XDeviceInfo array created by
XListInputDevices, use XFreeDeviceList\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
On error, XListInputDevices returns NULL and ndevices_return is
left unmodified\&.
.fi
.if n \{\
.RE
.\}
@


1.9
log
@Update to libXi 1.6.3rc1
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
d556 1
d562 15
a576 2
To free the XDeviceInfo array created by XListInputDevices, use
XFreeDeviceList\&.
@


1.8
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.7
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.5
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 10/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "10/07/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.4
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.3
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XLISTINPUTDEVICES" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@update to libXi 1.2.1
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XListDev.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XListDev.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming with Xlib
.TH XListInputDevices __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
.SH NAME
d23 285
a307 121
.SH SYNTAX
.HP
XDeviceInfo *XListInputDevices\^(\^Display *\fIdisplay\fP\^, int
*\fIndevices_return\fP\^); 
.HP
int XFreeDeviceList\^(\^XDeviceInfo *\fIlist\fP\^); 
.SH ARGUMENTS
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I ndevices_return
Specifies a pointer to a variable where the number of available devices can
be returned.
.TP 12
.I list
Specifies the list of devices to free.  The \fIXFreeDeviceList\fP function
frees the list of available extension input devices.
.SH DESCRIPTION
The \fIXListInputDevices\fP
request lists the available extension input devices.  This list includes the
X pointer and X keyboard, any other input devices that are currently accessible
through the X server, and any input devices that are not currently accessible
through the X server but could be accessed if requested.
.LP
Some server implementations may make all input devices available at the time
the server is initialized.  Others may wait until requested by a client to
access an input device.  In the latter case, it is possible that an input 
device will be listed as available at one time but not at another.
.LP
For each input device available to the server, the XListInputDevices
request returns an XDeviceInfo structure.  That structure contains a
pointer to a list of structures, each of which contains information about 
one class of input supported by the device.

The XDeviceInfo structure is defined as follows:

.DS
.nf
typedef struct _XDeviceInfo
{
	XID		id;        
	Atom		type;
	char		*name;
	int		num_classes;
	int		use;
	XAnyClassPtr	inputclassinfo;
} XDeviceInfo;
.fi
.DE
.LP
The id is a number in the range 0-128 that uniquely identifies 
the device.  It is assigned to the device when it is initialized by the server.
.LP
The type field is of type Atom and indicates the nature
of the device.
.LP
The name field contains a pointer to a null-terminated
string that corresponds to one of the defined device
types.  The name will correspond to one of the following
strings (defined in the header file \fIXI.h\fP:
.LP
.DS
XI_MOUSE
XI_TABLET
XI_KEYBOARD
XI_TOUCHSCREEN
XI_TOUCHPAD
XI_BUTTONBOX
XI_BARCODE
XI_TRACKBALL
XI_QUADRATURE
XI_ID_MODULE
XI_ONE_KNOB
XI_NINE_KNOB
XI_KNOB_BOX
XI_SPACEBALL
XI_DATAGLOVE
XI_EYETRACKER
XI_CURSORKEYS
XI_FOOTMOUSE
XI_JOYSTICK
.DE
.LP
These names may be directly compared with the name field of the
XDeviceInfo structure, or used in an XInternAtom request to return
an atom that can be compared with the type field of the XDeviceInfo
structure.
.LP
The num_classes field is a number in the
range 0-255 that specifies the number of input classes
supported by the device for which information is
returned by ListInputDevices.  Some input classes, such
as class Focus and class Proximity do not have any
information to be returned by ListInputDevices.
.LP
The use field specifies how the device is currently
being used.  If the value is \fIIsXKeyboard\fP, the device is
currently being used as the X keyboard.  If the value
is \fIIsXPointer\fP, the device is currently being used as
the X pointer.  If the value is \fIIsXExtensionDevice\fP, the
device is available for use as an extension device.
.LP
The inputclassinfo field contains a pointer to the first input-class
specific data.  The first two fields are common to all
classes.
.LP
The class field is a number in the range 0-255.
It uniquely identifies the class of input for which
information is returned.  Currently defined classes
are KeyClass, ButtonClass, and ValuatorClass.
.LP
The length field is a number in the range 0- 255.  
It specifies the number of bytes of data that are
contained in this input class.  The length includes the
class and length fields.
.LP
The XKeyInfo structure describes the characteristics of the keys on the
device.  It is defined as follows:
.LP
.DS
d310 5
a314 5
	XID			class;
	int			length;
	unsigned short		min_keycode;
	unsigned short		max_keycode;
	unsigned short		num_keys;
d317 52
a368 16
.DE
.LP
min_keycode is of type KEYCODE.  It specifies the
minimum keycode that the device will report.  The
minimum keycode will not be smaller than 8.
.LP
max_keycode is of type KEYCODE.  It specifies the
maximum keycode that the device will report.  The
maximum keycode will not be larger than 255.
.LP
num_keys specifies the number of keys that the device has.
.LP
The XButtonInfo structure defines the characteristics of the buttons
on the device.  It is defined as follows:
.LP
.DS
d371 3
a373 3
	XID		class;
	int		length;
	short		num_buttons;
d376 37
a412 16
.DE
.LP
num_buttons specifies the number of buttons that the device has.
.LP
The XValuatorInfo structure defines the characteristics of the valuators
on the device.  It is defined as follows:
.LP
.DS
.nf
typedef struct	_XValuatorInfo {
	XID			class;
	int			length;
	unsigned char		num_axes;
	unsigned char		mode;
	unsigned long		motion_buffer;
	XAxisInfoPtr		axes;
d415 52
a466 14
.DE
num_axes contains the number of axes the device supports.
.LP
mode is a constant that has one of the following
values: Absolute or Relative.  Some devices allow the
mode to be changed dynamically via the SetDeviceMode
request.
.LP
motion_buffer_size is a cardinal number that specifies
the number of elements that can be contained in the
motion history buffer for the device.
.LP
The axes field contains a pointer to an XAxisInfo structure.
.LP
d468 8
a475 2
.LP
.DS
d478 3
a480 3
	int 	resolution;
	int 	min_value;
	int 	max_value;
d483 75
a557 21
.DE
.LP
The resolution contains a number in counts/meter.
.LP
The min_val field contains a number that specifies
the minimum value the device reports for this axis.
For devices whose mode is Relative, the min_val field
will contain 0.
.LP
The max_val field contains a number that specifies
the maximum value the device reports for this axis.
For devices whose mode is Relative, the max_val field
will contain 0.
.LP
To free the \fIXDeviceInfo\fP array created by \fIXListInputDevices\fP,
use \fIXFreeDeviceList\fP.
.SH DIAGNOSTICS
none.
.SH "SEE ALSO"
.br
\fI\*(xL\fP
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
.TH XListInputDevices 3X11 __xorgversion__ "X FUNCTIONS"
d100 1
d179 1
a179 1
.DE
d190 1
a190 1
.DS
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XListInputDevices __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
d178 1
a178 1
.DS
d189 1
a189 1
.DE
@

