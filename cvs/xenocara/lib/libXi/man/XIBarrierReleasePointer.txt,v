head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.14
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.12
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.10
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.05.09.19.55.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to libXi 1.7.2.

Tested by ajacoutot@@ against gnome.
@
text
@XIBARRIERRELEASEPOINTER(libmansuffix)
=====================================

NAME
----

   XIBarrierReleasePointer, XIBarrierReleasePointers - allow pointer movement across a pointer barrier

SYNOPSIS
--------

   #include <X11/extensions/XInput2.h>

   int XIBarrierReleasePointer( Display *display,
                                int deviceid,
                                PointerBarrier barrier,
                                BarrierEventID eventid);

   int XIBarrierReleasePointers( Display *display,
                                 XIBarrierReleasePointerInfo *barriers,
                                 int num_barriers);

   display
          Specifies the connection to the X server.

   deviceid
          Specifies the device allowed to move across the barrier.

   barrier
          Specifies the barrier.

   eventid
          Specifies the unique event ID for this barrier event sequence.

   barriers
          List of deviceid, barrier, eventid triplets.

   num_barriers
          Number of elements in barriers.

DESCRIPTION
-----------

   If a pointer is constrained by a pointer barrier, release the pointer
   from the barrier and allow it to cross the barrier with the next motion.
   If the pointer moves away from the barrier, this request does nothing.

   This request only releases the pointer for the given barrier event
   sequence. If the pointer moves away from or through the barrier, a
   XI_BarrierLeave event is generated. Future pointer movement constrained
   by this barrier will assign a new eventid and require a new
   XIBarrierReleasePointer request.

   If the pointer is not currently blocked by the barrier or the barrier
   event sequence has ended, this request does nothing.

   XIBarrierReleasePointer and XIBarrierReleasePointers can generate a
   BadDevice or BadValue error.

DIAGNOSTICS
-----------

   BadDevice
          An invalid device was specified. The device does not
          exist or is not a master pointer device.

   BadValue
          A value for a PointerBarrier argument does not name a defined
          pointer barrier.

See also
--------

   XFixesCreatePointerBarrier(libmansuffix)


@
