head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.18
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.11;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xopendevice
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XOPENDEVICE" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XOpenDevice, XCloseDevice \- open or close an extension input device
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XDevice *XOpenDevice( Display *display,
                      XID device_id);
.fi
.sp
.nf
XCloseDevice( Display *display,
              XDevice *device);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device_id
       Specifies the id of the device to be opened
.fi
.sp
.nf
device
       Specifies the device to be closed
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
The XOpenDevice request makes an input device accessible to a
client through input extension protocol requests\&. If
successful, it returns a pointer to an XDevice structure\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XCloseDevice request makes an input device inaccessible to
a client through input extension protocol requests\&. Before
terminating, and client that has opened input devices through
the input extension should close them via CloseDevice\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When a client makes an XCloseDevice request, any active grabs
that the client has on the device are released\&. Any event
selections that the client has are deleted, as well as any
passive grabs\&. If the requesting client is the last client
accessing the device, the server may disable all access by X to
the device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XOpenDevice and XCloseDevice can generate a BadDevice error\&.
.fi
.if n \{\
.RE
.\}
.sp
Structures
.sp
.if n \{\
.RS 4
.\}
.nf
The XDevice structure returned by XOpenDevice contains:
             typedef struct {
             XID device_id;
             int num_classes;
             XInputClassInfo *classes;
             } XDevice;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The classes field is a pointer to an array of XInputClassInfo
structures\&. Each element of this array contains an event type
base for a class of input supported by the specified device\&.
The num_classes field indicates the number of elements in the
classes array\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XInputClassInfo structure contains:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    unsigned char input_class;
    unsigned char event_type_base;
} XInputClassInfo;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The input_class field identifies one class of input supported
by the device\&. Defined types include KeyClass, ButtonClass,
ValuatorClass, ProximityClass, FeedbackClass, FocusClass, and
OtherClass\&. The event_type_base identifies the event type of
the first event in that class\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The information contained in the XInputClassInfo structure is
used by macros to obtain the event classes that clients use in
making XSelectExtensionEvent requests\&. Currently defined macros
include DeviceKeyPress, DeviceKeyRelease, DeviceButtonPress,
DeviceButtonRelese, DeviceMotionNotify, DeviceFocusIn,
DeviceFocusOut, ProximityIn, ProximityOut, DeviceStateNotify,
DeviceMappingNotify, ChangeDeviceNotify,
DevicePointerMotionHint, DeviceButton1Motion,
DeviceButton2Motion, DeviceButton3Motion, DeviceButton4Motion,
DeviceButton5Motion, DeviceButtonMotion, DeviceOwnerGrabButton,
DeviceButtonPressGrab, and NoExtensionEvent\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To obtain the proper event class for a particular device, one
of the above macros is invoked using the XDevice structure for
that device\&. For example,
             DeviceKeyPress (*device, type, eventclass);
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
returns the DeviceKeyPress event type and the eventclass for
DeviceKeyPress events from the specified device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This eventclass can then be used in an XSelectExtensionEvent
request to ask the server to send DeviceKeyPress events from
this device\&. When a selected event is received via XNextEvent,
the type can be used for comparison with the type in the event\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The specified device
       does not exist, or is the X keyboard or X pointer\&. This
       error may also occur if some other client has caused the
       specified device to become the X keyboard or X pointer
       device via the XChangeKeyboardDevice or
       XChangePointerDevice requests\&.
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XOPENDEVICE" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XOPENDEVICE" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XOPENDEVICE" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XOPENDEVICE" "libmansuffix" "09/07/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XOPENDEVICE" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XOPENDEVICE" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@Initial revision
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XOpenDev.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XOpenDev.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming with Xlib
.TH XOpenDevice 3X11 __xorgversion__ "X FUNCTIONS"
.SH NAME
d23 75
a97 39
.SH SYNTAX
.HP
XDevice *XOpenDevice\^(\^Display *\fIdisplay\fP\^, XID \fIdevice_id\fP\^); 
.HP
XCloseDevice\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^); 
.fi
\fP
.SH ARGUMENTS
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I device_id
Specifies the id of the device to be opened
.TP 12
.I device
Specifies the device to be closed
.SH DESCRIPTION
The \fIXOpenDevice\fP
request makes an input device accessible to a client through input extension
protocol requests.  If successful, it returns a pointer to an \fBXDevice\fP
structure.
.LP
The \fIXCloseDevice\fP request makes an input device inaccessible to a 
client through input extension protocol requests.  Before terminating,
and client that has opened input devices through the input extension
should close them via \fICloseDevice\fP.
.LP
When a client makes an \fIXCloseDevice\fP request,
any active grabs that the client has on the device are 
released.  Any event selections that the client has are deleted, as well as
any passive grabs.  If the requesting client is the last client accessing
the device, the server may disable all access by X to the device.
.LP
\fIXOpenDevice\fP and \fIXCloseDevice\fP can generate a \fIBadDevice\fP 
error.
.SH STRUCTURES
The
\fIXDevice\fP structure returned by \fIXOpenDevice\fP contains:
d99 50
a148 16
typedef struct {
	XID device_id;
	int num_classes;
	XInputClassInfo *classes;
} XDevice;
.fi
.LP
The classes field is a pointer to an array of XInputClassInfo structures.
Each element of this array contains an event type base for a class of input
supported by the specified device.  The num_classes field indicates the
number of elements in the classes array.
.LP
The
\fIXInputClassInfo\fP
structure contains:
.LP
d151 2
a152 2
	unsigned char input_class;
	unsigned char event_type_base;
d155 91
a245 46
.LP
The input_class field identifies one class of input
supported by the device.  Defined types include \fIKeyClass\fP,
\fIButtonClass\fP, \fIValuatorClass\fP, \fIProximityClass\fP,
\fIFeedbackClass\fP, \fIFocusClass\fP, and \fIOtherClass\fP.
The event_type_base identifies the event type of the first event in that class.
.LP
The information contained in the \fIXInputClassInfo\fP structure is used
by macros to obtain the event classes that clients use in making
\fIXSelectExtensionEvent\fP requests.  Currently defined macros include
\fIDeviceKeyPress\fP, \fIDeviceKeyRelease\fP, \fIDeviceButtonPress\fP, 
\fIDeviceButtonRelese\fP, \fIDeviceMotionNotify\fP, \fIDeviceFocusIn\fP, 
\fIDeviceFocusOut\fP, \fIProximityIn\fP, \fIProximityOut\fP, 
\fIDeviceStateNotify\fP, \fIDeviceMappiingNotify\fP, 
\fIChangeDeviceNotify\fP, \fIDevicePointerMotionHint\fP, 
\fIDeviceButton1Motion\fP, \fIDeviceButton2Motion\fP, \fIDeviceButton3Motion\fP,
\fIDeviceButton4Motion\fP, \fIDeviceButton5Motion\fP, \fIDeviceButtonMotion\fP,
\fIDeviceOwnerGrabButton\fP, \fIDeviceButtonPressGrab\fP, and
\fINoExtensionEvent\fP.
.LP
To obtain the proper event class for a particular device, one of the above
macros is invoked using the \fIXDevice\fP structure for that device.  For
example, 
.LP
.nf
DeviceKeyPress (*device, type, eventclass);
.fi
.LP
returns the \fIDeviceKeyPress\fP event type and the eventclass for 
\fIDeviceKeyPress\fP events from the specified device.
.LP
This \fIeventclass\fP can then be used in an \fIXSelectExtensionEvent\fP 
request to ask the server to send \fIDeviceKeyPress\fP events from this device. 
When a selected event is received via \fIXNextEvent\fP, the \fItype\fP can be 
used for comparison with the type in the event.
.SH DIAGNOSTICS
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist,
or is the X keyboard or X pointer.  This error may
also occur if some other client has caused the specified device to become
the X keyboard or X pointer device via the \fIXChangeKeyboardDevice\fP or
\fIXChangePointerDevice\fP requests.
.SH "SEE ALSO"
.br
\fI\*(xL\fP
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XOpenDevice __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
@

