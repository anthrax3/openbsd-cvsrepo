head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xgrabdevicebutton
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XGRABDEVICEBUTTON" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGrabDeviceButton, XUngrabDeviceButton \- grab/ungrab extension input device buttons
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XGrabDeviceButton( Display *display,
                       XDevice *device,
                       unsigned int button,
                       unsigned int modifiers,
                       XDevice* modifier_device,
                       Window grab_window,
                       Bool owner_events,
                       unsigned int event_count,
                       XEventClass *event_list,
                       int this_device_mode,
                       int other_devices_mode);
.fi
.sp
.nf
int XUngrabDeviceButton( Display *display,
                         XDevice *device,
                         unsigned int button,
                         unsigned int modifiers,
                         XDevice* modifier_device,
                         Window grab_window);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device
       Specifies the device that is to be grabbed or released
.fi
.sp
.nf
button
       Specifies the device button that is to be grabbed or
       released or AnyButton\&.
.fi
.sp
.nf
modifiers
       Specifies the set of keymasks or AnyModifier\&.The mask is
       the bitwise inclusive OR of the valid keymask bits\&.
       Valid bits are: Shiftmask, LockMask, ControlMask,
       Mod1Mask, Mod2Mask,Mod3Mask, Mod4Mask, Mod5Mask\&.
.fi
.sp
.nf
modifier_device
       specifies the device whose modifiers are to be used\&. If
       the modifier_devicespecified is NULL, the X keyboard
       will be used as the modifier_device\&.
.fi
.sp
.nf
grab_window
       Specifies the grab window\&.
.fi
.sp
.nf
owner_events
       Specifies a Boolean value that indicates whether the
       deviceevents are to be reported as usual or reported
       with respect to the grab windowif selected by the event
       list\&.
.fi
.sp
.nf
event_count
       Specifies the number of event classes in the event list\&.
.fi
.sp
.nf
event_list
       Specifies which events are reported to the client\&.
.fi
.sp
.nf
this_device_mode
       Specifies further processing of events from this
       device\&.You can pass GrabModeSync or GrabModeAsync\&.
.fi
.sp
.nf
other_devices_mode
       Specifies further processing of events from all other
       devices\&.You can pass GrabModeSync or GrabModeAsync\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
The XGrabDeviceButton request establishes a passive grab\&. In
the future, the device is actively grabbed (as for XGrabDevice,
the last\-grab time is set to the time at which the button was
pressed (as transmitted in the DeviceButtonPress event), and
the DeviceButtonPress event is reported if all of the following
conditions are true:
  * The device is not grabbed, and the specified button is
    logically pressed when the specified modifier keys are
    logically down on the specified modifier device and no
    other buttons or modifier keys are logically down\&.
  * Either the grab window is an ancestor of (or is) the focus
    window, OR the grab window is a descendent of the focus
    window and contains the device\&.
  * A passive grab on the same button/modifier combination does
    not exist on any ancestor of grab_window\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The interpretation of the remaining arguments is as for
XGrabDevice\&. The active grab is terminated automatically when
the logical state of the device has all buttons released
(independent of the logical state of the modifier keys)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Note that the logical state of a device (as seen by client
applications) may lag the physical state if device event
processing is frozen\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
This request overrides all previous grabs by the same client on
the same button/modifier combinations on the same window\&. A
modifiers of AnyModifier is equivalent to issuing the grab
request for all possible modifier combinations (including the
combination of no modifiers)\&. It is not required that all
modifiers specified have currently assigned KeyCodes\&. A button
of AnyButton is equivalent to issuing the request for all
possible buttons\&. Otherwise, it is not required that the
specified button currently be assigned to a physical button\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A modifier_device of NULL indicates that the X keyboard is to
be used as the modifier_device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If some other client has already issued a XGrabDeviceButton
with the same button/modifier combination on the same window, a
BadAccess error results\&. When using AnyModifier or AnyButton ,
the request fails completely, and a BadAccess error results (no
grabs are established) if there is a conflicting grab for any
combination\&. XGrabDeviceButton has no effect on an active grab\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGrabDeviceButton can generate BadClass, BadDevice, BadMatch,
BadValue, and BadWindow errors\&.\&.P The XUngrabDeviceButton
request releases the passive grab for a button/modifier
combination on the specified window if it was grabbed by this
client\&. A modifier of AnyModifier is equivalent to issuing the
ungrab request for all possible modifier combinations,
including the combination of no modifiers\&. A button of
AnyButton is equivalent to issuing the request for all possible
buttons\&. XUngrabDeviceButton has no effect on an active grab\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A modifier_device of NULL indicates that the X keyboard should
be used as the modifier_device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XUngrabDeviceButton can generate BadDevice, BadMatch, BadValue
and BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The specified device
       does not exist or has not been opened by this client via
       XOpenInputDevice\&. This error may also occur if the
       specified device is the X keyboard or X pointer device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if an XGrabDeviceButton request was
       made specifying a device that has no buttons, or
       specifying a modifier device that has no keys\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside the range of values
       accepted by the request\&. Unless a specific range is
       specified for an argument, the full range defined by the
       argument\*(Aqs type is accepted\&. Any argument defined as a
       set of alternatives can generate this error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value for a Window argument does not name a defined
       Window\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XAllowDeviceEvents(libmansuffix), XGrabDevice(libmansuffix), XGrabDeviceKey(libmansuffix)
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "09/07/2010" "[FIXME: source]" "[FIXME: manual]"
d297 1
a297 1
       argument\'s type is accepted\&. Any argument defined as a
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XGRABDEVICEBUTTON" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@Initial revision
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XGrDvBut.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XGrDvBut.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming With Xlib
.TH XGrabDeviceButton 3X11 __xorgversion__ "X FUNCTIONS"
.SH NAME
d23 123
a145 2
.SH SYNTAX
\fB
a146 81
.HP
int XGrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^, Bool
\fIowner_events\fP\^, unsigned int \fIevent_count\fP\^, XEventClass
*\fIevent_list\fP\^, int \fIthis_device_mode\fP\^, int
\fIother_devices_mode\fP\^); 
.HP
int XUngrabDeviceButton\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^,
unsigned int \fIbutton\fP\^, unsigned int \fImodifiers\fP\^, XDevice
*\fImodifier_device\fP\^, Window \fIgrab_window\fP\^); 
.fi
\fP
.SH ARGUMENTS
.ds Bu grabbed or released
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I device
Specifies the device that is to be \*(Bu
.TP 12
.I button
Specifies the device button that is to be \*(Bu or
\fIAnyButton\fP.
.TP 12
.I modifiers
Specifies the set of keymasks or
\fIAnyModifier\fP.
The mask is the bitwise inclusive OR of the valid keymask bits.
Valid bits are: Shiftmask, LockMask, ControlMask, Mod1Mask, Mod2Mask,
Mod3Mask, Mod4Mask, Mod5Mask.
.TP 12
.I modifier_device
specifies the device whose modifiers are to be used.  If the modifier_device
specified is NULL, the X keyboard will be used as the modifier_device.
.TP 12
.I grab_window
Specifies the grab window.
.TP 12
.I owner_events
Specifies a Boolean value that indicates whether the device 
events are to be reported as usual or reported with respect to the grab window 
if selected by the event list.
.TP 12
.I event_count
Specifies the number of event classes in the event list.
.TP 12
.I event_list
Specifies which events are reported to the client.
.TP 12
.I this_device_mode
Specifies further processing of events from this device.
You can pass \fIGrabModeSync\fP or \fIGrabModeAsync\fP.
.TP 12
.I other_devices_mode
Specifies further processing of events from all other devices.
You can pass \fIGrabModeSync\fP or \fIGrabModeAsync\fP.
.SH DESCRIPTION
The \fIXGrabDeviceButton\fP request establishes a passive grab.
In the future,
the device is actively grabbed (as for \fIXGrabDevice\fP,
the last-grab time is set to the time at which the button was pressed
(as transmitted in the
\fIDeviceButtonPress\fP
event), and the
\fIDeviceButtonPress\fP
event is reported if all of the following conditions are true:
.IP \(bu 5
The device is not grabbed, and the specified button is logically pressed
when the specified modifier keys are logically down on the specified
modifier device
and no other buttons or modifier keys are logically down.
.IP \(bu 5
Either the grab window is an ancestor of (or is) the focus window, OR
the grab window is a descendent of the focus window and contains the
device.
.IP \(bu 5
A passive grab on the same button/modifier combination does not exist
on any ancestor of grab_window.
.LP
d148 54
a201 28
\fIXGrabDevice\fP.
The active grab is terminated automatically when the logical state of the
device has all buttons released
(independent of the logical state of the modifier keys).
.LP
Note that the logical state of a device (as seen by client applications)
may lag the physical state if device event processing is frozen.
.LP
This request overrides all previous grabs by the same client on the same
button/modifier combinations on the same window.
A modifiers of 
\fIAnyModifier\fP 
is equivalent to issuing the grab request for all
possible modifier combinations (including the combination of no modifiers).  
It is not required that all modifiers specified have currently assigned 
KeyCodes.
A button of 
\fIAnyButton\fP 
is equivalent to
issuing the request for all possible buttons.
Otherwise, it is not required that the specified button currently be assigned
to a physical button.
.LP
A modifier_device of NULL indicates that the X keyboard is to be used as the
modifier_device.
.LP
If some other client has already issued a 
\fIXGrabDeviceButton\fP
d203 103
a305 71
\fIBadAccess\fP 
error results.
When using 
\fIAnyModifier\fP 
or 
\fIAnyButton\fP , 
the request fails completely,
and a
\fIBadAccess\fP
error results (no grabs are
established) if there is a conflicting grab for any combination.
\fIXGrabDeviceButton\fP
has no effect on an active grab.
.LP
\fIXGrabDeviceButton\fP
can generate
\fIBadClass\fP,
\fIBadDevice\fP,
\fIBadMatch\fP,
\fIBadValue\fP,
and
\fIBadWindow\fP 
errors.
.P 
The \fIXUngrabDeviceButton\fP
request releases the passive grab for a 
button/modifier combination on the specified window if
it was grabbed by this client.
A modifier of \fIAnyModifier\fP is
equivalent to issuing 
the ungrab request for all possible modifier combinations, including 
the combination of no modifiers.
A button of 
\fIAnyButton\fP 
is equivalent to issuing the
request for all possible buttons.
\fIXUngrabDeviceButton\fP
has no effect on an active grab.
.LP
A modifier_device of NULL indicates that the X keyboard should be used as
the modifier_device.
.LP
\fIXUngrabDeviceButton\fP
can generate
\fIBadDevice\fP,
\fIBadMatch\fP,
\fIBadValue\fP
and
\fIBadWindow\fP 
errors.
.SH DIAGNOSTICS
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist or has 
not been opened by this client via \fIXOpenInputDevice\fP.  This error may
also occur if the specified device is the X keyboard or X pointer device.
.TP 12
\fIBadMatch\fP
This error may occur if an \fIXGrabDeviceButton\fP request was made
specifying
a device that has no buttons, or specifying a modifier device
that has no keys.
.TP 12
\fIBadValue\fP
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.TP 12
\fIBadWindow\fP
A value for a Window argument does not name a defined Window.
d307 10
a316 7
XAllowDeviceEvents(3X),
.br
XGrabDevice(3X),
.br
XGrabDeviceKey(3X),
.br
\fI\*(xL\fP
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XGrabDeviceButton __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
d205 1
a205 1
XAllowDeviceEvents(3),
d207 1
a207 1
XGrabDevice(3),
d209 1
a209 1
XGrabDeviceKey(3),
@

