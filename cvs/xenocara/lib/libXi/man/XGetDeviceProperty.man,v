head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.02.15.23.04;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xgetdeviceproperty
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XGETDEVICEPROPERTY" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetDeviceProperty, XChangeDeviceProperty, XDeleteDeviceProperty \- Get, change or delete a device\*(Aqs property\&.
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XGetDeviceProperty( Display *display,
                        XDevice *device,
                        Atom property,
                        long offset,
                        long length,
                        Bool delete,
                        Atom req_type,
                        Atom *actual_type_return,
                        int *actual_format_return,
                        unsigned long *nitems_return,
                        unsigned long *bytes_after_return,
                        unsigned char **prop_return)
.fi
.sp
.nf
void XChangeDeviceProperty( Display *display,
                            XDevice *device,
                            Atom property,
                            Atom type,
                            int format,
                            int mode,
                            const char *data,
                            int nelements)
.fi
.sp
.nf
void XDeleteDeviceProperty( Display *display,
                            XDevice *device,
                            Atom property)
.fi
.sp
.nf
actual_type_return
       Returns an atom identifier that defines the actual type
       of the property\&.
.fi
.sp
.nf
actual_format_return
       Returns the actual format of the property\&.
.fi
.sp
.nf
bytes_after_return
       Returns the number of bytes remaining to be read in the
       property if a partial read was performed\&.
.fi
.sp
.nf
data
       Specifies the property data\&.
.fi
.sp
.nf
delete
       Specifies a Boolean value that determines whether the
       property is deleted\&.
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device
       The device to grab\&.
.fi
.sp
.nf
format
       Specifies whether the data should be viewed as a list of
       8\-bit, 16\-bit, or 32\-bit quantities\&. Possible values are
       8, 16, and 32\&. This information allows the X server to
       correctly perform byte\-swap operations as necessary\&. If
       the format is 16\-bit or 32\-bit, you must explicitly cast
       the data pointer to an (unsigned char*) in the call to
       XChangeDeviceProperty\&.
.fi
.sp
.nf
length
       Specifies the length in 32\-bit multiplies of the data to
       be retrieved\&.
.fi
.sp
.nf
mode
       Specifies the mode of operation\&. You can pass
       PropModeReplace, PropModePrepend, or PropModeAppend\&.
.fi
.sp
.nf
nelements
       Specifies the number of elements in data\&.
.fi
.sp
.nf
nitems_return
       Returns the actual number of 8\-bit, 16\-bit, or 32\-bit
       items stored in the prop_return array\&.
.fi
.sp
.nf
num_values
       Specifies the number of elements in the values list\&.
.fi
.sp
.nf
offset
       Specifies the offset in the specified property (in
       32\-bit quantities) where the data is to be retrieved\&.
.fi
.sp
.nf
property
       Specifies the property to modify or query\&.
.fi
.sp
.nf
prop_return
       Returns the data in the specified format\&. If the
       returned format is 8, the returned data is represented
       as a char array\&. If the returned format is 16, the
       returned data is represented as an array of short int
       type and should be cast to that type to obtain the
       elements\&. If the returned format is 32, the property
       data will be stored as an array of longs (which in a
       64\-bit application will be 64\-bit values that are padded
       in the upper 4 bytes)\&.
.fi
.sp
.nf
req_type
       Specifies the atom identifier associated with the
       property type or AnyPropertyType\&.
.fi
.SH "DESCRIPTION"
.sp
The XGetDeviceProperty function returns the actual type of the property; the actual format of the property; the number of 8\-bit, 16\-bit, or 32\-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned\&. For a detailed description of this function, see the man page to XGetWindowProperty\&.
.sp
The XChangeDeviceProperty function alters the property for the specified device and causes the server to generate a XPropertyNotifyEvent event on that device\&. For a detailed description of this function, see the man page to XChangeProperty\&.
.sp
The XDeleteDeviceProperty function deletes the specified device property\&. Note that a client cannot delete a property created by a driver or the server\&. Attempting to do so will result in a BadAtom error\&.
.sp
XGetDeviceProperty can generate a BadAtom, BadDevice error\&.
.sp
XChangeDeviceProperty can generate a BadDevice, a BadMatch, a BadAtom, and a BadValue error\&.
.sp
XDeleteDeviceProperty can generate a BadDevice, and a BadAtom error\&.
.SH "DIAGNOSIS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadAtom
       A value does not describe a valid named identifier or
       the client attempted to remove a driver\-allocated
       property\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The device does not
       exist\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XListDeviceProperties(libmansuffix)
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 11/03/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "11/03/2010" "[FIXME: source]" "[FIXME: manual]"
d31 1
a31 1
XGetDeviceProperty, XChangeDeviceProperty, XDeleteDeviceProperty \- Get, change or delete a device\'s property\&.
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
a35 1
                        Bool pending,
a141 6
.fi
.sp
.nf
pending
       Specifies whether to retrieve the pending state of the
       property or the current state\&.
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XGETDEVICEPROPERTY" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@update to libXi 1.2.1
@
text
@d1 8
a8 6
.\"     Title: XGetDeviceProperty
.\"    Author: Peter Hutterer
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: <pubdate>July 9, 2008</pubdate>
.\"    Manual: XINPUT FUNCTIONS
.\"    Source: __xorgversion__
d10 4
a13 1
.TH "XGETDEVICEPROPERTY" "__libmansuffix__" "<pubdate>July 9, 2008</pubdate>" "__xorgversion__" "XINPUT FUNCTIONS"
d18 3
d22 2
a23 2
XGetDeviceProperty, XChangeDeviceProperty, XDeleteDeviceProperty - Get, change or delete a device's property.
.SH "SYNTAX"
a24 1
.ft B
d26 1
a26 1
#include <X11/extensions/XInput\.h>
d28 162
a189 11
.ft
.HP 23
.BI "int XGetDeviceProperty(Display\ *" "display" ", XDevice\ *" "device" ", Atom\ " "property" ", long\ " "offset" ", long\ " "length" ", Bool\ " "delete" ", Bool\ " "pending" ", Atom\ " "req_type" ", Atom\ *" "actual_type_return" ", int\ *" "actual_format_return" ", unsigned\ long\ *" "nitems_return" ", unsigned\ long\ *" "bytes_after_return" ", unsigned\ char\ **" "prop_return" ");"
.HP 27
.BI "void XChangeDeviceProperty(Display\ *" "display" ", XDevice\ *" "device" ", Atom\ " "property" ", Atom\ " "type" ", int\ " "format" ", int\ " "mode" ", const\ char\ *" "data" ", int\ " "nelements" ");"
.HP 27
.BI "void XDeleteDeviceProperty(Display\ *" "display" ", XDevice\ *" "device" ", Atom\ " "property" ");"
.SH "ARGUMENTS"
.PP
.PP
\fIactual_type_return\fR
d191 8
a198 1
Returns an atom identifier that defines the actual type of the property\.
d200 3
a202 2
.PP
\fIactual_format_return\fR
d204 2
a205 111
Returns the actual format of the property\.
.RE
.PP
\fIbytes_after_return\fR
.RS 4
Returns the number of bytes remaining to be read in the property if a partial read was performed\.
.RE
.PP
\fIdata\fR
.RS 4
Specifies the property data\.
.RE
.PP
\fIdelete\fR
.RS 4
Specifies a Boolean value that determines wether the property is deleted\.
.RE
.PP
\fIdisplay\fR
.RS 4
Specifies the connection to the X server\.
.RE
.PP
\fIdevice\fR
.RS 4
The device to grab\.
.RE
.PP
\fIformat\fR
.RS 4
Specifies whether the data should be viewed as a list of 8\-bit, 16\-bit, or 32\-bit quantities\. Possible values are 8, 16, and 32\. This information allows the X server to correctly perform byte\-swap operations as necessary\. If the format is 16\-bit or 32\-bit, you must explicitly cast the data pointer to an (unsigned char*) in the call to
\fBXChangeDeviceProperty\fR\.
.RE
.PP
\fIlength\fR
.RS 4
Specifies the length in 32\-bit multiplies of the data to be retrieved\.
.RE
.PP
\fImode\fR
.RS 4
Specifies the mode of operation\. You can pass
\fBPropModeReplace\fR,
\fBPropModePrepend\fR, or
\fBPropModeAppend\fR\.
.RE
.PP
\fInelements\fR
.RS 4
Specifies the number of elements in data\.
.RE
.PP
\fInitems_return\fR
.RS 4
Returns the actual number of 8\-bit, 16\-bit, or 32\-bit items stored in the prop_return array\.
.RE
.PP
\fInum_values\fR
.RS 4
Specifies the number of elements in the values list\.
.RE
.PP
\fIoffset\fR
.RS 4
Specifies the offset in the specified property (in 32\-bit quantities) where the data is to be retrieved\.
.RE
.PP
\fIpending\fR
.RS 4
Specifies whether to retrieve the pending state of the property or the current state\.
.RE
.PP
\fIproperty\fR
.RS 4
Specifies the property to modify or query\.
.RE
.PP
\fIprop_return\fR
.RS 4
Returns the data in the specified format\. If the returned format is 8, the returned data is represented as a char array\. If the returned format is 16, the returned data is represented as an array of short int type and should be cast to that type to obtain the elements\. If the returned format is 32, the property data will be stored as an array of longs (which in a 64\-bit application will be 64\-bit values that are padded in the upper 4 bytes)\.
.RE
.PP
\fIreq_type\fR
.RS 4
Specifies the atom identifier associated with the property type or
\fBAnyPropertyType\fR\.
.RE
.SH "DESCRIPTION"
.PP
The
\fBXGetDeviceProperty\fR
function returns the actual type of the property; the actual format of the property; the number of 8\-bit, 16\-bit, or 32\-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned\. For a detailed description of this function, see the man page to
\fBXGetWindowProperty\fR\.
.PP
The
\fBXChangeDeviceProperty\fR
function alters the property for the specified device and causes the server to generate a
\fBXPropertyNotifyEvent\fR
event on that device\. For a detailed description of this function, see the man page to
\fBXChangeProperty\fR\.
.PP
The
\fBXDeleteDeviceProperty\fR
function deletes the specified device property\. Note that a client cannot delete a property created by a driver or the server\. Attempting to do so will result in a
BadAtom
error\.
.PP

\fBXGetDeviceProperty\fR
can generate a
BadAtom,
d207 4
a210 23
error\.
.PP

\fBXChangeDeviceProperty\fR
can generate a
BadDevice, a
BadMatch, a
BadAtom, and a
BadValue
error\.
.PP

\fBXDeleteDeviceProperty\fR
can generate a
BadDevice, and a
BadAtom
error\.
.SH "DIAGNOSIS"
.PP
.PP
BadAtom
.RS 4
A value does not describe a valid named identifier or the client attempted to remove a driver\-allocated property\.
d212 4
a215 2
.PP
BadDevice
d217 5
a221 1
An invalid device was specified\. The device does not exist\.
d223 1
a223 13
.SH "SEE ALSO"
.PP

\fBXListDeviceProperties\fR,
\fBXQueryDeviceProperty\fR,
\fBXConfigureDeviceProperty\fR\.
.SH "AUTHOR"
.PP
\fBPeter Hutterer\fR
.sp -1n
.IP "" 4
Specification and implementation\.

@

