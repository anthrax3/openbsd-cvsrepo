head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.18
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.04;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xgetfeedbackcontrol
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGetFeedbackControl, XChangeFeedbackControl \- query and change input device feedbacks
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
XFeedbackState *XGetFeedbackControl( Display *display,
                                     XDevice *device,
                                     int *num_feedbacks);
.fi
.sp
.nf
int XChangeFeedbackControl( Display *display,
                            XDevice *device,
                            Mask mask,
                            XFeedbackControl *control);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device
       Specifies the device whose feedbacks are to be queried
       or modified\&.
.fi
.sp
.nf
num_feedbacks
       Specifies an address into which the number of feedbacks
       supported by thedevice is to be returned\&.
.fi
.sp
.nf
mask
       Specifies a mask specific to each type of feedback that
       describes howthe feedback is to be modified\&.
.fi
.sp
.nf
control
       Specifies the address of an XFeedbackControl structure
       that containsthe new values for the feedback\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
These requests are provided to manipulate those input devices
that support feedbacks\&. A BadMatch error will be generated if
the requested device does not support feedbacks\&. Whether or not
a given device supports feedbacks can be determined by
examining the information returned by the XOpenDevice request\&.
For those devices that support feedbacks, XOpenDevice will
return an XInputClassInfo structure with the input_class field
equal to the constant FeedbackClass (defined in the file XI\&.h)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XGetFeedbackControl request returns a pointer to a list of
XFeedbackState structures\&. Each item in this list describes one
of the feedbacks supported by the device\&. The items are
variable length, so each contains its length to allow traversal
to the next item in the list\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The feedback classes that are currently defined are:
KbdFeedbackClass, PtrFeedbackClass, StringFeedbackClass,
IntegerFeedbackClass, LedFeedbackClass, and BellFeedbackClass\&.
These constants are defined in the file XI\&.h\&. An input device
may support zero or more classes of feedback, and may support
multiple feedbacks of the same class\&. Each feedback contains a
class identifier and an id that is unique within that class for
that input device\&. The id is used to identify the feedback when
making an XChangeFeedbackControl request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGetFeedbackControl can generate a BadDevice or BadMatch error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XChangeFeedbackControl request modifies the values of one
feedback on the specified device\&. The feedback is identified by
the id field of the XFeedbackControl structure that is passed
with the request\&. The fields of the feedback that are to be
modified are identified by the bits of the mask that is passed
with the request\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XChangeFeedbackControl can generate a BadDevice, BadMatch, or
BadValue error\&.
.fi
.if n \{\
.RE
.\}
.SS "Structures"
.sp
.if n \{\
.RS 4
.\}
.nf
Each class of feedback is described by a structure specific to
that class\&. These structures are defined in the file XInput\&.h\&.
XFeedbackState and XFeedbackControl are generic structures that
contain three fields that are at the beginning of each class of
feedback:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
} XFeedbackState, XFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XKbdFeedbackState structure defines the attributes that are
returned for feedbacks equivalent to those on the X keyboard\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int click;
    int percent;
    int pitch;
    int duration;
    int led_mask;
    int global_auto_repeat;
    char auto_repeats[32];
} XKbdFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XPtrFeedbackState structure defines the attributes that are
returned for feedbacks equivalent to those on the the X
pointer\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XIntegerFeedbackState structure defines attributes that are
returned for integer feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int resolution;
    int minVal;
    int maxVal;
} XIntegerFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XStringFeedbackState structure defines the attributes that
are returned for string feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int max_symbols;
    int num_syms_supported;
    KeySym *syms_supported;
} XStringFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XBellFeedbackState structure defines the attributes that
are returned for bell feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int percent;
    int pitch;
    int duration;
} XBellFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XLedFeedbackState structure defines the attributes that are
returned for LED feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int led_values;
} XLedFeedbackState;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XPrtFeedbackControl structure defines the attributes that
can be controlled for pointer feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int accelNum;
    int accelDenom;
    int threshold;
} XPtrFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XKbdFeedbackControl structure defines the attributes that
can be controlled for keyboard feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int click;
    int percent;
    int pitch;
    int duration;
    int led_mask;
    int led_value;
    int key;
    int auto_repeat_mode;
} XKbdFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XStringFeedbackControl structure defines the attributes
that can be controlled for string feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int num_keysyms;
    KeySym  *syms_to_display;
} XStringFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XIntegerFeedbackControl structure defines the attributes
that can be controlled for integer feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID class;
    int length;
    XID id;
    int int_to_display;
} XIntegerFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XBellFeedbackControl structure defines the attributes that
can be controlled for bell feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID     class;
    int     length;
    XID     id;
    int     percent;
    int     pitch;
    int     duration;
} XBellFeedbackControl;
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XLedFeedbackControl structure defines the attributes that
can be controlled for LED feedbacks\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct {
    XID     class;
    int     length;
    XID     id;
    int     led_mask;
    int     led_values;
} XLedFeedbackControl;
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The specified device
       does not exist or has not been opened by this client via
       XOpenInputDevice\&. This error may also occur if some
       other client has caused the specified device to become
       the X keyboard or X pointer device via the
       XChangeKeyboardDevice or XChangePointerDevice requests\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadMatch
       This error may occur if an XGetFeedbackControl request
       was made specifying a device that has no feedbacks, or
       an XChangeFeedbackControl request was made with an
       XFeedbackControl structure that contains an invalid
       feedback type\&. It may also occur if an invalid
       combination of mask bits is specified ( DvKey but no
       DvAutoRepeatMode for keyboard feedbacks), or if an
       invalid KeySym is specified for a string feedback\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside the range of values
       accepted by the XChangeFeedbackControl request\&. Unless a
       specific range is specified for an argument, the full
       range defined by the argument\*(Aqs type is accepted\&. Any
       argument defined as a set of alternatives can generate
       this error\&.
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 12/16/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "12/16/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
d165 1
a165 2
.sp
Structures
d186 4
a189 5
XID class;
int length;
XID id;
} XFeedbackState,
XFeedbackControl;
d211 10
a220 10
XID class;
int length;
XID id;
int click;
int percent;
int pitch;
int duration;
int led_mask;
int global_auto_repeat;
char auto_repeats[32];
d244 6
a249 6
XID class;
int length;
XID id;
int accelNum;
int accelDenom;
int threshold;
d272 6
a277 6
XID class;
int length;
XID id;
int resolution;
int minVal;
int maxVal;
d300 6
a305 6
XID class;
int length;
XID id;
int max_symbols;
int num_syms_supported;
KeySym *syms_supported;
d328 6
a333 6
XID class;
int length;
XID id;
int percent;
int pitch;
int duration;
d355 5
a359 4
typedef struct { XID class;
int length;
XID id;
int led_values;
d382 6
a387 6
XID class;
int length;
XID id;
int accelNum;
int accelDenom;
int threshold;
d410 11
a420 11
XID class;
int length;
XID id;
int click;
int percent;
int pitch;
int duration;
int led_mask;
int led_value;
int key;
int auto_repeat_mode;
d443 5
a447 5
XID class;
int length;
XID id;
int num_keysyms;
KeySym  *syms_to_display;
d470 4
a473 4
XID class;
int length;
XID id;
int int_to_display;
d496 6
a501 6
XID     class;
int     length;
XID     id;
int     percent;
int     pitch;
int     duration;
d524 5
a528 5
XID     class;
int     length;
XID     id;
int     led_mask;
int     led_values;
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "09/07/2010" "[FIXME: source]" "[FIXME: manual]"
d579 1
a579 1
       range defined by the argument\'s type is accepted\&. Any
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XGETFEEDBACKCONTROL" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@Initial revision
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XChFCtl.man,v 1.2 2001/01/27 18:20:20 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XChFCtl.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming With Xlib
.TH XGetFeedbackControl 3X11 __xorgversion__ "X FUNCTIONS"
.SH NAME
d23 191
a213 97
.SH SYNTAX
.HP
XFeedbackState *XGetFeedbackControl\^(\^Display *\fIdisplay\fP\^, XDevice
*\fIdevice\fP\^, int *\fInum_feedbacks\fP\^); 
.HP
int XChangeFeedbackControl\^(\^Display *\fIdisplay\fP\^, XDevice
*\fIdevice\fP\^, Mask \fImask\fP\^, XFeedbackControl *\fIcontrol\fP\^); 
.SH ARGUMENTS
.TP 15
.I display
Specifies the connection to the X server.
.TP 15
.I device
Specifies the device whose feedbacks are to be queried or modified.
.TP 15
.I num_feedbacks
Specifies an address into which the number of feedbacks supported by the
device is to be returned.
.TP 15
.I mask 
Specifies a mask specific to each type of feedback that describes how 
the feedback is to be modified.  
.TP 15 
.I control
Specifies the address of an \fIXFeedbackControl\fP structure that contains
the new values for the feedback.
.SH DESCRIPTION
These requests are provided to manipulate those input devices that
support feedbacks.  A \fIBadMatch\fP error will be generated if the
requested device does not support feedbacks.  Whether or not a given
device supports feedbacks can be determined by examining the information
returned by the \fIXOpenDevice\fP request.  For those devices that
support feedbacks, \fIXOpenDevice\fP will return an
\fIXInputClassInfo\fP structure with the input_class field
equal to the constant \fIFeedbackClass\fP (defined in the file \fIXI.h\fP).
.LP
The \fIXGetFeedbackControl\fP request returns a pointer to a list of 
\fIXFeedbackState\fP structures.  Each item in this list describes one
of the feedbacks supported by the device.  The items are variable length,
so each contains its length to allow traversal to the next item in the
list.
.LP
The feedback classes that are currently defined are:  \fIKbdFeedbackClass\fP,
\fIPtrFeedbackClass\fP, \fIStringFeedbackClass\fP, \fIIntegerFeedbackClass\fP,
\fILedFeedbackClass\fP, and \fIBellFeedbackClass\fP.  These constants are
defined in the file \fIXI.h\fP.  An input device may
support zero or more classes of feedback, and may support multiple feedbacks
of the same class.  Each feedback contains a class identifier and an id
that is unique within that class for that input device.  The id is used
to identify the feedback when making an \fIXChangeFeedbackControl\fP request.
.LP
\fIXGetFeedbackControl\fP can generate a \fIBadDevice\fP or
\fIBadMatch\fP error.
.LP
The \fIXChangeFeedbackControl\fP request modifies the values of one 
feedback on the specified device.  The feedback is identified by the id
field of the \fIXFeedbackControl\fP structure that is passed with the
request.  The fields of the feedback that are to be modified are identified
by the bits of the mask that is passed with the request.
.LP
\fIXChangeFeedbackControl\fP can generate a \fIBadDevice\fP,
\fIBadMatch\fP, or \fIBadValue\fP  error.
.SH STRUCTURES
Each class of feedback is described by a structure specific to that class.
These structures are defined in the file \fIXInput.h\fP.
\fIXFeedbackState\fP and \fIXFeedbackControl\fP are generic 
structures that contain three fields that are at the beginning of each class
of feedback:
.LP
.DS
typedef struct {
.br
	XID class;                         
.br
	int length;                                      
.br
	XID id;
.br
} XFeedbackState, XFeedbackControl;
.DE
.LP
The \fIXKbdFeedbackState\fP structure defines the attributes that are
returned for feedbacks equivalent to those on the X keyboard.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     click;
	int     percent;
	int     pitch;
	int     duration;
	int     led_mask;
	int     global_auto_repeat;
	char    auto_repeats[32];
d216 27
a242 14
.DE
.LP
The \fIXPtrFeedbackState\fP structure defines the attributes that are
returned for feedbacks equivalent to those on the the X pointer.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     accelNum;
	int     accelDenom;
	int     threshold;
d245 26
a270 14
.DE
.LP
The \fIXIntegerFeedbackState\fP structure defines attributes that are 
returned for integer feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     resolution;
	int     minVal;
	int     maxVal;
d273 26
a298 14
.DE
.LP
The \fIXStringFeedbackState\fP structure defines the attributes that are
returned for string feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     max_symbols;
	int     num_syms_supported;
	KeySym  *syms_supported;
d301 26
a326 14
.DE
.LP
The \fIXBellFeedbackState\fP structure defines the attributes that are
returned for bell feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     percent;
	int     pitch;
	int     duration;
d329 23
a351 12
.DE
.LP
The \fIXLedFeedbackState\fP structure defines the attributes that are
returned for LED feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     led_values;
d354 26
a379 14
.DE
.LP
The \fIXPrtFeedbackControl\fP structure defines the attributes that can be
controlled for pointer feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     accelNum;
	int     accelDenom;
	int     threshold;
d382 31
a412 19
.DE
.LP
The \fIXKbdFeedbackControl\fP structure defines the attributes that can be
controlled for keyboard feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     click;
	int     percent;
	int     pitch;
	int     duration;
	int     led_mask;
	int     led_value;
	int     key;
	int     auto_repeat_mode;
d415 25
a439 13
.DE
.LP
The \fIXStringFeedbackControl\fP structure defines the attributes that can be
controlled for string feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     num_keysyms;
	KeySym  *syms_to_display;
d442 24
a465 12
.DE
.LP
The \fIXIntegerFeedbackControl\fP structure defines the attributes that can
be controlled for integer feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     int_to_display;
d468 26
a493 14
.DE
.LP
The \fIXBellFeedbackControl\fP structure defines the attributes that can be
controlled for bell feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     percent;
	int     pitch;
	int     duration;
d496 25
a520 13
.DE
.LP
The \fIXLedFeedbackControl\fP structure defines the attributes that can be
controlled for LED feedbacks.
.LP
.DS
.nf
typedef struct {
	XID     class;
	int     length;
	XID     id;
	int     led_mask;
	int     led_values;
d523 54
a576 27
.DE
.SH DIAGNOSTICS
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist or has 
not been opened by this client via \fIXOpenInputDevice\fP.  This error may
also occur if some other client has caused the specified device to become
the X keyboard or X pointer device via the \fIXChangeKeyboardDevice\fP or
\fIXChangePointerDevice\fP requests.
.TP 12
\fIBadMatch\fP
This error may occur if an \fIXGetFeedbackControl\fP request was made specifying
a device that has no feedbacks, or an \fIXChangeFeedbackControl\fP request was
made with an \fIXFeedbackControl\fP structure that contains an invalid feedback
type.  It may also occur if an invalid combination of mask bits is specified
(\fIDvKey\fP but no \fIDvAutoRepeatMode\fP for keyboard feedbacks), or if an 
invalid KeySym is specified for a string feedback.
.TP 12
\fIBadValue\fP
Some numeric value falls outside the range of values accepted by the 
\fIXChangeFeedbackControl\fP request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.SH "SEE ALSO"
.br
\fI\*(xL\fP
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XGetFeedbackControl __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
@

