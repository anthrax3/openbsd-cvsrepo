head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.8
date	2013.05.31.15.15.09;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.17.17.39.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.11.10.49.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.23.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.45.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXi 1.6.3rc1
@
text
@'\" t
.\"     Title: xgrabdevice
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.77.1 <http://docbook.sf.net/>
.\"      Date: 03/09/2013
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "XGRABDEVICE" "libmansuffix" "03/09/2013" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
XGrabDevice, XUngrabDevice \- grab/release the specified extension device
.SH "SYNOPSIS"
.sp
.nf
#include <X11/extensions/XInput\&.h>
.fi
.sp
.nf
int XGrabDevice( Display *display,
                 XDevice* device,
                 Window grab_window,
                 Bool owner_events,
                 int event_count,
                 XEventClass *event_list,
                 int this_device_mode,
                 int other_devices_mode,
                 Time time);
.fi
.sp
.nf
int XUngrabDevice( Display *display,
                   XDevice *device,
                   Time time);
.fi
.sp
.nf
display
       Specifies the connection to the X server\&.
.fi
.sp
.nf
device
       Specifies the device to be grabbed or released\&.
.fi
.sp
.nf
grab_window
       Specifies the id of a window to be associated with the
       device\&.
.fi
.sp
.nf
owner_events
       Specifies a Boolean value that indicates whether
       theevents from the deviceare to be reported as usual or
       reported with respect to the grab windowif selected by
       the event list\&.
.fi
.sp
.nf
event_count
       Specifies the number of elements in the event_list
       array\&.
.fi
.sp
.nf
event_list
       Specifies a pointer to a list of event classes that
       indicates which eventsthe client wishes to receive\&.
       These event classes must have beenobtained specifying
       the device being grabbed\&.
.fi
.sp
.nf
this_device_mode
       Specifies further processing of events from this
       device\&.You can pass GrabModeSyncor GrabModeAsync\&.
.fi
.sp
.nf
other_devices_mode
       Specifies further processing of events from other
       devices\&.You can pass GrabModeSyncor GrabModeAsync\&.
.fi
.sp
.nf
time
       Specifies the time\&.You can pass either a timestamp or
       CurrentTime\&.
.fi
.SH "DESCRIPTION"
.sp
.if n \{\
.RS 4
.\}
.nf
The XGrabDevice request actively grabs control of the device
and generates DeviceFocusIn and DeviceFocusOut events\&. Further
device events are reported only to the grabbing
client\&.XGrabDevice overrides any active device grab by this
client\&. event_list is a pointer to a list of event classes\&.
This list indicates which events the client wishes to receive
while the grab is active\&. If owner_events is False, all
generated device events are reported with respect to
grab_window if selected\&. If owner_events is True and if a
generated device event would normally be reported to this
client, it is reported normally; otherwise, the event is
reported with respect to the grab_window, and is only reported
if specified in the event_list\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If the this_device_mode argument is GrabModeAsync, device event
processing continues as usual\&. If the device is currently
frozen by this client, then processing of device events is
resumed\&. If the this_device_mode argument is GrabModeSync, the
state of the device (as seen by client applications) appears to
freeze, and the X server generates no further device events
until the grabbing client issues a releasing XAllowDeviceEvents
call or until the device grab is released\&. Actual device
changes are not lost while the device is frozen; they are
simply queued in the server for later processing\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If other_devices_mode is GrabModeAsync, processing of events
from other devices is unaffected by activation of the grab\&. If
other_devices_mode is GrabModeSync, the state of all devices
except the grabbed device (as seen by client applications)
appears to freeze, and the X server generates no further events
from those devices until the grabbing client issues a releasing
XAllowDeviceEvents call or until the device grab is released\&.
Actual events are not lost while the devices are frozen; they
are simply queued in the server for later processing\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If the device is actively grabbed by some other client,
XGrabDevice fails and returns AlreadyGrabbed\&. If grab_window is
not viewable, it fails and returns GrabNotViewable\&. If the
device is frozen by an active grab of another client, it fails
and returns GrabFrozen\&. If the specified time is earlier than
the last\-device\-grab time or later than the current X server
time, it fails and returns GrabInvalidTime\&. Otherwise, the
last\-device\-grab time is set to the specified time (
CurrentTime is replaced by the current X server time)\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If a grabbed device is closed by a client while an active grab
by that client is in effect, the active grab is released\&. If
the device is frozen only by an active grab of the requesting
client, it is thawed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XGrabDevice can generate BadClass, BadDevice, BadValue, and
BadWindow errors\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The XUngrabDevice request releases the device and any queued
events if this client has it actively grabbed from either
XGrabDevice or XGrabDeviceKey\&. If other devices are frozen by
the grab, XUngrabDevice thaws them\&.XUngrabDevice does not
release the device and any queued events if the specified time
is earlier than the last\-device\-grab time or is later than the
current X server time\&. It also generates DeviceFocusIn and
DeviceFocusOut events\&. The X server automatically performs an
UngrabDevice request if the event window for an active device
grab becomes not viewable\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
XUngrabDevice can generate a BadDevice error\&.
.fi
.if n \{\
.RE
.\}
.SH "DIAGNOSTICS"
.sp
.if n \{\
.RS 4
.\}
.nf
BadDevice
       An invalid device was specified\&. The specified device
       does not exist or has not been opened by this client via
       XOpenInputDevice\&. This error may also occur if the
       specified device is the X keyboard or X pointer device\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadValue
       Some numeric value falls outside the range of values
       accepted by the request\&. Unless a specific range is
       specified for an argument, the full range defined by the
       argument\*(Aqs type is accepted\&. Any argument defined as a
       set of alternatives can generate this error\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
BadWindow
       A value for a Window argument does not name a defined
       Window\&.
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
.if n \{\
.RS 4
.\}
.nf
XAllowDeviceEvents(libmansuffix), XGrabDeviceButton(libmansuffix), XGrabDeviceKey(libmansuffix)
.fi
.if n \{\
.RE
.\}
@


1.7
log
@Update to libXi 1.4.4.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 09/23/2011
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 1
a10 1
.TH "XGRABDEVICE" "libmansuffix" "09/23/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d5 1
a5 1
.\"      Date: 06/02/2011
d10 1
a10 1
.TH "XGRABDEVICE" "libmansuffix" "06/02/2011" "[FIXME: source]" "[FIXME: manual]"
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d5 3
a7 3
.\"      Date: 03/18/2011
.\"    Manual: \ \&
.\"    Source: \ \&
d10 1
a10 1
.TH "XGRABDEVICE" "libmansuffix" "03/18/2011" "\ \&" "\ \&"
@


1.4
log
@Update to libXi 1.4.0. small bug fixes plus doc/spec/autotools churn.
@
text
@d4 4
a7 4
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 09/07/2010
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
d10 10
a19 1
.TH "XGRABDEVICE" "libmansuffix" "09/07/2010" "[FIXME: source]" "[FIXME: manual]"
d266 1
a266 1
       argument\'s type is accepted\&. Any argument defined as a
@


1.3
log
@Update to libXi 1.3.2
@
text
@d5 1
a5 1
.\"      Date: 08/04/2010
d10 1
a10 1
.TH "XGRABDEVICE" "libmansuffix" "08/04/2010" "[FIXME: source]" "[FIXME: manual]"
@


1.2
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d4 2
a5 2
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/02/2009
d10 1
a10 1
.TH "XGRABDEVICE" "libmansuffix" "10/02/2009" "[FIXME: source]" "[FIXME: manual]"
@


1.1
log
@Initial revision
@
text
@d1 8
d10 12
a21 16
.\" $XFree86: xc/doc/man/Xi/XGrabDev.man,v 1.2 2001/01/27 18:20:21 dawes Exp $
.\"
.\"
.\" Copyright ([\d,\s]*) by Hewlett-Packard Company, Ardent Computer, 
.\" 
.\" Permission to use, copy, modify, distribute, and sell this documentation 
.\" for any purpose and without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" Ardent, and Hewlett-Packard make no representations about the 
.\" suitability for any purpose of the information in this document.  It is 
.\" provided \`\`as is'' without express or implied warranty.
.\" 
.\" $Xorg: XGrabDev.man,v 1.3 2000/08/17 19:41:56 cpqbld Exp $
.ds xL Programming With Xlib
.TH XGrabDevice 3X11 __xorgversion__ "X FUNCTIONS"
.SH NAME
d23 143
a165 1
.SH SYNTAX
a166 110
\fB
.HP
int XGrabDevice\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^, Window
\fIgrab_window\fP\^, Bool \fIowner_events\fP\^, int \fIevent_count\fP\^,
XEventClass *\fIevent_list\fP\^, int \fIthis_device_mode\fP\^,
int \fIother_devices_mode\fP\^, Time \fItime\fP\^); 
.HP 
int XUngrabDevice\^(\^Display *\fIdisplay\fP\^, XDevice *\fIdevice\fP\^, Time
\fItime\fP\^); 
.fi
\fP
.SH ARGUMENTS
.TP 12
.I display
Specifies the connection to the X server.
.TP 12
.I device
Specifies the device to be grabbed or released.
.TP 12
.I grab_window
Specifies the id of a window to be associated with the device.
.TP 12
.I owner_events
Specifies a Boolean value that indicates whether the 
events from the device 
are to be reported as usual or reported with respect to the grab window 
if selected by the event list.
.TP 12
.I event_count
Specifies the number of elements in the event_list array.
.TP 12
.I event_list
Specifies a pointer to a list of event classes that indicates which events
the client wishes to receive.  These event classes must have been
obtained specifying the device being grabbed.
.TP 12
.I this_device_mode
Specifies further processing of events from this device.
You can pass 
\fIGrabModeSync\fP
or
\fIGrabModeAsync\fP.
.TP 12
.I other_devices_mode
Specifies further processing of events from other devices.
You can pass 
\fIGrabModeSync\fP 
or
\fIGrabModeAsync\fP.
.TP 12
.I time
Specifies the time.
You can pass either a timestamp or
\fICurrentTime\fP.
.SH DESCRIPTION
The
\fIXGrabDevice\fP
request actively grabs control of the device and generates
\fIDeviceFocusIn\fP
and
\fIDeviceFocusOut\fP
events.
Further device events are reported only to the
grabbing client.
\fIXGrabDevice\fP
overrides any active device grab by this client.
event_list is a pointer to a list of event classes.  This list indicates
which events the client wishes to receive while the grab is active.
If owner_events is 
\fIFalse\fP , 
all generated device events are reported with
respect to grab_window if selected.
If owner_events is 
\fITrue\fP  
and if a generated
device event would normally be reported to this client, it is reported
normally; otherwise, the event is reported with respect to the
grab_window, and is only reported if specified in the event_list.
.LP
If the this_device_mode argument is 
\fIGrabModeAsync\fP ,
device event processing continues
as usual. 
If the device is currently frozen by this client, 
then processing of device events is resumed.
If the this_device_mode  argument is
\fIGrabModeSync\fP ,
the state of the device (as seen by client applications) appears to freeze,
and the X server generates no further device events until the
grabbing client issues a releasing 
\fIXAllowDeviceEvents\fP 
call or until the device grab is released.
Actual device changes are not lost while the device is frozen; 
they are simply queued in the server for later processing.
.LP
If other_devices_mode is 
\fIGrabModeAsync\fP ,
processing of events from other devices is unaffected
by activation of the grab.  
If other_devices_mode is 
\fIGrabModeSync\fP,
the state of all devices except the grabbed device
 (as seen by client applications) appears to freeze, 
and the X server generates no further events from those devices
until the grabbing client issues a releasing 
\fIXAllowDeviceEvents\fP 
call or until the device grab is released.
Actual events are not lost while the devices are frozen; 
they are simply queued in the server for later processing.
.LP
d168 107
a274 66
\fIXGrabDevice\fP
fails and returns
\fIAlreadyGrabbed\fP.
If grab_window is not viewable,
it fails and returns
\fIGrabNotViewable\fP.
If the device is frozen by an active grab of another client,
it fails and returns
\fIGrabFrozen\fP.
If the specified time is earlier than the last-device-grab time 
or later than the current X server time,
it fails and returns
\fIGrabInvalidTime\fP.
Otherwise, the last-device-grab time is set to the specified time
\fI( CurrentTime\fP 
is replaced by the current X server time).
.LP
If a grabbed device is closed by a client while an active grab by that
client is in effect, the active grab is released.  If the device is
frozen only by an active grab of the requesting client, it is thawed.
.LP
\fIXGrabDevice\fP
can generate
\fIBadClass\fP, \fIBadDevice\fP, \fIBadValue\fP, and \fIBadWindow\fP 
errors.
.LP
The
\fIXUngrabDevice\fP
request
releases the device and any queued events if this client has it actively 
grabbed from either
\fIXGrabDevice\fP
or
\fIXGrabDeviceKey\fP.
If other devices are frozen by the grab, \fIXUngrabDevice\fP thaws them.
\fIXUngrabDevice\fP
does not release the device and any queued events
if the specified time is earlier than
the last-device-grab time or is later than the current X server time.
It also generates
\fIDeviceFocusIn\fP 
and 
\fIDeviceFocusOut\fP 
events.
The X server automatically performs an 
\fIUngrabDevice\fP 
request if the event window for an
active device grab becomes not viewable.
.LP
\fIXUngrabDevice\fP
can generate a \fIBadDevice\fP error.
.SH DIAGNOSTICS
.TP 12
\fIBadDevice\fP
An invalid device was specified.  The specified device does not exist or has 
not been opened by this client via \fIXOpenInputDevice\fP.  This error may
also occur if the specified device is the X keyboard or X pointer device.
.TP 12
\fIBadValue\fP
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.TP 12
\fIBadWindow\fP
A value for a Window argument does not name a defined Window.
d276 10
a285 5
XAllowDeviceEvents(3X),
XGrabDeviceButton(3X),
XGrabDeviceKey(3X),
.br
\fI\*(xL\fP
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXi 1.1.3
@
text
@d16 1
a16 1
.TH XGrabDevice __LIB_MAN_SUFFIX__ __xorgversion__ "X FUNCTIONS"
d199 3
a201 3
XAllowDeviceEvents(3),
XGrabDeviceButton(3),
XGrabDeviceKey(3),
@

