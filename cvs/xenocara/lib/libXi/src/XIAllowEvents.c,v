head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.08.06.09.56.29;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	LoGpeNS1hy3meocn;

1.4
date	2014.09.28.17.22.58;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	z9e5iyEEqbHgjQHI;

1.3
date	2012.06.11.19.24.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libXi 1.7.6
@
text
@/*
 * Copyright Â© 2009 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdint.h>
#include <X11/Xlibint.h>
#include <X11/extensions/XI2proto.h>
#include <X11/extensions/XInput2.h>
#include <X11/extensions/extutil.h>
#include "XIint.h"

/* for GetRequest() to work */
#define X_XI2_2AllowEvents X_XIAllowEvents

static Status
_XIAllowEvents(Display *dpy, int deviceid, int event_mode, Time time,
                    unsigned int touchid, Window grab_window)
{
    Bool have_XI22 = False;
    xXIAllowEventsReq *req;
    xXI2_2AllowEventsReq *req_XI22;

    XExtDisplayInfo *extinfo = XInput_find_display(dpy);

    LockDisplay(dpy);
    if (_XiCheckExtInit(dpy, XInput_2_0, extinfo) == -1)
	return (NoSuchExtension);

    if (_XiCheckVersion(extinfo, XInput_2_2) >= 0)
        have_XI22 = True;

    if (have_XI22)
    {
        GetReq(XI2_2AllowEvents, req_XI22);
        req = (xXIAllowEventsReq*)req_XI22;
    } else
        GetReq(XIAllowEvents, req);

    req->reqType = extinfo->codes->major_opcode;
    req->ReqType = X_XIAllowEvents;
    req->deviceid = deviceid;
    req->mode = event_mode;
    req->time = time;

    if (have_XI22) {
        req_XI22->touchid = touchid;
        req_XI22->grab_window = grab_window;
    }

    UnlockDisplay(dpy);
    SyncHandle();
    return Success;
}

Status
XIAllowEvents(Display *dpy, int deviceid, int event_mode, Time time)
{
    return _XIAllowEvents(dpy, deviceid, event_mode, time, 0, None);
}

Status
XIAllowTouchEvents(Display *dpy, int deviceid, unsigned int touchid,
                   Window grab_window, int event_mode)
{
    XExtDisplayInfo *extinfo = XInput_find_display(dpy);

    LockDisplay(dpy);
    if (_XiCheckExtInit(dpy, XInput_2_2, extinfo) == -1)
	return (NoSuchExtension);
    UnlockDisplay(dpy);

    return _XIAllowEvents(dpy, deviceid, event_mode, CurrentTime, touchid, grab_window);
}
@


1.4
log
@Update to libXi 1.7.4
@
text
@d43 1
a43 1
    Bool have_XI22 = True;
d53 1
a53 1
    if (_XiCheckExtInit(dpy, XInput_2_2, extinfo) == 0)
@


1.3
log
@Update to libXi 1.6.1
@
text
@a88 1
    int status;
a93 3

    status = _XIAllowEvents(dpy, deviceid, event_mode, CurrentTime, touchid, grab_window);

a94 1
    SyncHandle();
d96 1
a96 1
    return status;
@


1.2
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d25 4
d36 6
a41 2
Status
XIAllowEvents(Display *dpy, int deviceid, int event_mode, Time time)
d43 1
d45 1
d53 10
a62 1
    GetReq(XIAllowEvents, req);
d69 5
d77 25
@


1.1
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d40 1
a40 1
    if (_XiCheckExtInit(dpy, Dont_Check, extinfo) == -1)
@

