head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.11.03.09.28.22;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	DGhPjY0C2KOkx0Eg;

1.10
date	2016.08.06.09.56.29;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	LoGpeNS1hy3meocn;

1.9
date	2014.05.09.19.55.33;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.23.22.42.10;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.11.19.24.49;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.02.21.21.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.02.21.14.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.01.21.22.48;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.27.20.17.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.04.10.17.03;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.18.19.28.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to libXi 1.7.8
@
text
@/************************************************************

Copyright 2009 Red Hat, Inc.

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the author shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the author.

*/

/***********************************************************************
 *
 * XISelectEvent - Select for XI2 events.
 *
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdint.h>
#include <X11/Xlibint.h>
#include <X11/extensions/XI2proto.h>
#include <X11/extensions/XInput2.h>
#include <X11/extensions/extutil.h>
#include <X11/extensions/ge.h>
#include <X11/extensions/geproto.h>
#include "XIint.h"
#include <limits.h>

int
XISelectEvents(Display* dpy, Window win, XIEventMask* masks, int num_masks)
{
    XIEventMask  *current;
    xXISelectEventsReq  *req;
    xXIEventMask mask;
    int i;
    int len = 0;
    int r = Success;
    int max_mask_len = 0;
    char *buff;

    XExtDisplayInfo *info = XInput_find_display(dpy);
    LockDisplay(dpy);
    if (_XiCheckExtInit(dpy, XInput_2_0, info) == -1) {
        r = NoSuchExtension;
        goto out_unlocked;
    }

    for (i = 0; i < num_masks; i++) {
        current = &masks[i];
        if (current->mask_len > INT_MAX - 3 ||
            (current->mask_len + 3)/4 >= 0xffff) {
            r = -1;
            goto out;
        }
        if (current->mask_len > max_mask_len)
            max_mask_len = current->mask_len;
    }

    /* max_mask_len is in bytes, but we need 4-byte units on the wire,
     * and they need to be padded with 0 */
    buff = calloc(4, ((max_mask_len + 3)/4));
    if (!buff) {
        r = -1;
        goto out;
    }

    GetReq(XISelectEvents, req);

    req->reqType = info->codes->major_opcode;
    req->ReqType = X_XISelectEvents;
    req->win = win;
    req->num_masks = num_masks;

    /* get the right length */
    for (i = 0; i < num_masks; i++)
    {
        len++;
        current = &masks[i];
        len += (current->mask_len + 3)/4;
    }

    SetReqLen(req, len, len);

    for (i = 0; i < num_masks; i++)
    {
        current = &masks[i];
        mask.deviceid = current->deviceid;
        mask.mask_len = (current->mask_len + 3)/4;

        memset(buff, 0, max_mask_len);
        memcpy(buff, current->mask, current->mask_len);
        Data(dpy, (char*)&mask, sizeof(xXIEventMask));
        Data(dpy, buff, mask.mask_len * 4);
    }

    free(buff);
out:
    UnlockDisplay(dpy);
out_unlocked:
    SyncHandle();
    return r;

}

XIEventMask*
XIGetSelectedEvents(Display* dpy, Window win, int *num_masks_return)
{
    unsigned int i, len = 0;
    unsigned char *mask;
    XIEventMask *mask_out = NULL;
    xXIEventMask *mask_in = NULL, *mi;
    xXIGetSelectedEventsReq *req;
    xXIGetSelectedEventsReply reply;
    XExtDisplayInfo *info = XInput_find_display(dpy);
    size_t rbytes;

    *num_masks_return = -1;
    LockDisplay(dpy);
    if (_XiCheckExtInit(dpy, XInput_2_0, info) == -1)
        goto out_unlocked;

    GetReq(XIGetSelectedEvents, req);

    req->reqType = info->codes->major_opcode;
    req->ReqType = X_XIGetSelectedEvents;
    req->win = win;

    if (!_XReply(dpy, (xReply *) &reply, 0, xFalse))
        goto out;

    if (reply.num_masks == 0)
    {
        *num_masks_return = 0;
        goto out;
    }

    if (reply.length < (INT_MAX >> 2)) {
        rbytes = (unsigned long) reply.length << 2;
        mask_in = Xmalloc(rbytes);
    }
    if (!mask_in) {
        _XEatDataWords(dpy, reply.length);
        goto out;
    }

    _XRead(dpy, (char*)mask_in, rbytes);

    /*
     * This function takes interleaved xXIEventMask structs & masks off
     * the wire, such as this 3 mask reply:
     *   [struct a][masks a][struct b][masks b][struct c][masks c]
     * And generates a memory buffer to be returned to callers in which
     * they are not interleaved, so that callers can treat the returned
     * pointer as a simple array of XIEventMask structs, such as:
     *   [struct a][struct b][struct c][masks a][masks b][masks c]
     */
    len = reply.num_masks * sizeof(XIEventMask);

    for (i = 0, mi = mask_in; i < reply.num_masks; i++)
    {
        unsigned int mask_bytes = mi->mask_len * 4;
        len += mask_bytes;
        if (len > INT_MAX)
            goto out;
        if ((sizeof(xXIEventMask) + mask_bytes) > rbytes)
            goto out;
        rbytes -= (sizeof(xXIEventMask) + mask_bytes);
        mi = (xXIEventMask*)((char*)mi + mask_bytes);
        mi++;
    }

    mask_out = Xmalloc(len);
    if (!mask_out)
        goto out;

    mi = mask_in;
    mask = (unsigned char*)&mask_out[reply.num_masks];
    for (i = 0; i < reply.num_masks; i++)
    {
        mask_out[i].deviceid = mi->deviceid;
        mask_out[i].mask_len = mi->mask_len * 4;
        mask_out[i].mask = mask;
        memcpy(mask_out[i].mask, &mi[1], mask_out[i].mask_len);
        mask += mask_out[i].mask_len;
        mi = (xXIEventMask*)((char*)mi + mi->mask_len * 4);
        mi++;
    }

    *num_masks_return = reply.num_masks;

out:
    Xfree(mask_in);

    UnlockDisplay(dpy);

out_unlocked:
    SyncHandle();

    return mask_out;
}
@


1.10
log
@Update to libXi 1.7.6
@
text
@d166 8
a173 2
    /* Memory layout of the XIEventMask for a 3 mask reply:
     * [struct a][struct b][struct c][masks a][masks b][masks c]
@


1.9
log
@Update to libXi 1.7.2.

Tested by ajacoutot@@ against gnome.
@
text
@d63 1
a63 1
        goto out;
d117 1
d138 1
a138 1
        goto out;
d207 2
@


1.8
log
@Merge upstream fixes for several X libs vulnerabilities
discovered by Ilja van Sprundel.

CVE-2013-1981 X.org libX11 1.5.99.901 (1.6 RC1) integer overflows
CVE-2013-1982 X.org libXext 1.3.1 integer overflows
CVE-2013-1983 X.org libXfixes 5.0 integer overflows
CVE-2013-1984 X.org libXi 1.7.1 integer overflows
CVE-2013-1985 X.org libXinerama 1.1.2 integer overflows
CVE-2013-1986 X.org libXrandr 1.4.0 integer overflows
CVE-2013-1987 X.org libXrender 0.9.7 integer overflows
CVE-2013-1988 X.org libXRes 1.0.6 integer overflows
CVE-2013-1989 X.org libXv 1.0.7 integer overflows
CVE-2013-1990 X.org libXvMC 1.0.7 integer overflows
CVE-2013-1991 X.org libXxf86dga 1.1.3 integer overflows
CVE-2013-1992 X.org libdmx 1.1.2 integer overflows
CVE-2013-1994 X.org libchromeXvMC & libchromeXvMCPro in openChrome
0.3.2 integer overflows
CVE-2013-1995 X.org libXi 1.7.1 sign extension issues
CVE-2013-1996 X.org libFS 1.0.4 sign extension issues
CVE-2013-1997 X.org libX11 1.5.99.901 (1.6 RC1) buffer overflows
CVE-2013-1998 X.org libXi 1.7.1 buffer overflows
CVE-2013-1999 X.org libXvMC 1.0.7 buffer overflows
CVE-2013-2000 X.org libXxf86dga 1.1.3 buffer overflows
CVE-2013-2001 X.org libXxf86vm 1.1.2 buffer overflows
CVE-2013-2002 X.org libXt 1.1.3 buffer overflows
CVE-2013-2003 X.org libXcursor 1.1.13 integer overflows
CVE-2013-2004 X.org libX11 1.5.99.901 (1.6 RC1) unbounded recursion
CVE-2013-2005 X.org libXt 1.1.3 memory corruption
CVE-2013-2066 X.org libXv 1.0.7 buffer overflows
@
text
@d56 2
d65 20
a103 1
        char *buff;
d107 2
a108 3
        /* masks.mask_len is in bytes, but we need 4-byte units on the wire,
         * and they need to be padded with 0 */
        buff = calloc(1, mask.mask_len * 4);
a111 1
        free(buff);
d114 1
@


1.7
log
@Update to libXi 1.6.1
@
text
@d45 1
d105 1
a105 1
    int i, len = 0;
d112 1
d134 6
a139 2
    mask_in = Xmalloc(reply.length * 4);
    if (!mask_in)
d141 1
d143 1
a143 1
    _XRead(dpy, (char*)mask_in, reply.length * 4);
d152 8
a159 2
        len += mi->mask_len * 4;
        mi = (xXIEventMask*)((char*)mi + mi->mask_len * 4);
@


1.6
log
@Update to libXi 1.4.3.
This contains more doc fixes and a few more bug fixes.
@
text
@d33 3
@


1.5
log
@Update to libXi 1.4.2.
Tested by ajacoutot@@, jasper@@, krw@@, shadchin@@.
I believe that the bugs spotted by krw@@ are fixed in an upcoming
inputproto update.
@
text
@d86 1
a86 1
        Data(dpy, &mask, sizeof(xXIEventMask));
@


1.4
log
@Simpler fix for 64 bits architectures, suggested by Peter Hutterer:
Just use Data() to send the xXIEventMask structure on the wire.
@
text
@d55 1
a55 1
    if (_XiCheckExtInit(dpy, Dont_Check, info) == -1) {
d111 1
a111 1
    if (_XiCheckExtInit(dpy, Dont_Check, info) == -1)
@


1.3
log
@Ugly fix for libXi on sparc64.
May change if upstreams fix it differently.
Still broken on cross-endian remote connections though.
@
text
@a34 1
#include <X11/Xarch.h>
a48 1
    unsigned long long_mask;
d86 1
a86 6
#if X_BYTE_ORDER == X_BIG_ENDIAN
	long_mask = mask.deviceid << 16 | mask.mask_len;
#else
	long_mask = mask.mask_len << 16 | mask.deviceid;
#endif
	Data32(dpy, &long_mask, sizeof(xXIEventMask));
@


1.2
log
@Update to libXi 1.3.2
@
text
@d35 1
d50 1
d88 6
a93 1
        Data32(dpy, &mask, sizeof(xXIEventMask));
@


1.1
log
@Update to libXi 1.3. Tested on a bulk ports build by naddy@@.
@
text
@d51 1
d55 4
a58 2
    if (_XiCheckExtInit(dpy, Dont_Check, info) == -1)
	return (NoSuchExtension);
d91 1
d94 1
a94 1
    return Success;
d107 1
d109 1
a109 1
    XExtDisplayInfo *info = XInput_find_display(dpy);
d112 1
a112 4
    {
        *num_masks_return = -1;
	return NULL;
    }
d121 1
a121 1
        goto error;
d126 1
a126 1
        return NULL;
d131 1
a131 1
        goto error;
d149 1
a149 1
        goto error;
d166 2
a167 1
    return mask_out;
a168 4
error:
    if (mask_in)
        Xfree(mask_in);
    *num_masks_return = -1;
a170 1
    return NULL;
d172 1
@

