head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xinput.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Input_API XCB Input API
 * @@brief Input XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XINPUT_H
#define __XINPUT_H

#include "xcb.h"
#include "xfixes.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_INPUT_MAJOR_VERSION 2
#define XCB_INPUT_MINOR_VERSION 3

extern xcb_extension_t xcb_input_id;

typedef uint32_t xcb_input_event_class_t;

/**
 * @@brief xcb_input_event_class_iterator_t
 **/
typedef struct xcb_input_event_class_iterator_t {
    xcb_input_event_class_t *data;
    int                      rem;
    int                      index;
} xcb_input_event_class_iterator_t;

typedef uint8_t xcb_input_key_code_t;

/**
 * @@brief xcb_input_key_code_iterator_t
 **/
typedef struct xcb_input_key_code_iterator_t {
    xcb_input_key_code_t *data;
    int                   rem;
    int                   index;
} xcb_input_key_code_iterator_t;

typedef uint16_t xcb_input_device_id_t;

/**
 * @@brief xcb_input_device_id_iterator_t
 **/
typedef struct xcb_input_device_id_iterator_t {
    xcb_input_device_id_t *data;
    int                    rem;
    int                    index;
} xcb_input_device_id_iterator_t;

typedef int32_t xcb_input_fp1616_t;

/**
 * @@brief xcb_input_fp1616_iterator_t
 **/
typedef struct xcb_input_fp1616_iterator_t {
    xcb_input_fp1616_t *data;
    int                 rem;
    int                 index;
} xcb_input_fp1616_iterator_t;

/**
 * @@brief xcb_input_fp3232_t
 **/
typedef struct xcb_input_fp3232_t {
    int32_t  integral;
    uint32_t frac;
} xcb_input_fp3232_t;

/**
 * @@brief xcb_input_fp3232_iterator_t
 **/
typedef struct xcb_input_fp3232_iterator_t {
    xcb_input_fp3232_t *data;
    int                 rem;
    int                 index;
} xcb_input_fp3232_iterator_t;

/**
 * @@brief xcb_input_get_extension_version_cookie_t
 **/
typedef struct xcb_input_get_extension_version_cookie_t {
    unsigned int sequence;
} xcb_input_get_extension_version_cookie_t;

/** Opcode for xcb_input_get_extension_version. */
#define XCB_INPUT_GET_EXTENSION_VERSION 1

/**
 * @@brief xcb_input_get_extension_version_request_t
 **/
typedef struct xcb_input_get_extension_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t name_len;
    uint8_t  pad0[2];
} xcb_input_get_extension_version_request_t;

/**
 * @@brief xcb_input_get_extension_version_reply_t
 **/
typedef struct xcb_input_get_extension_version_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint16_t server_major;
    uint16_t server_minor;
    uint8_t  present;
    uint8_t  pad0[19];
} xcb_input_get_extension_version_reply_t;

typedef enum xcb_input_device_use_t {
    XCB_INPUT_DEVICE_USE_IS_X_POINTER = 0,
    XCB_INPUT_DEVICE_USE_IS_X_KEYBOARD = 1,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_DEVICE = 2,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_KEYBOARD = 3,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_POINTER = 4
} xcb_input_device_use_t;

typedef enum xcb_input_input_class_t {
    XCB_INPUT_INPUT_CLASS_KEY = 0,
    XCB_INPUT_INPUT_CLASS_BUTTON = 1,
    XCB_INPUT_INPUT_CLASS_VALUATOR = 2,
    XCB_INPUT_INPUT_CLASS_FEEDBACK = 3,
    XCB_INPUT_INPUT_CLASS_PROXIMITY = 4,
    XCB_INPUT_INPUT_CLASS_FOCUS = 5,
    XCB_INPUT_INPUT_CLASS_OTHER = 6
} xcb_input_input_class_t;

typedef enum xcb_input_valuator_mode_t {
    XCB_INPUT_VALUATOR_MODE_RELATIVE = 0,
    XCB_INPUT_VALUATOR_MODE_ABSOLUTE = 1
} xcb_input_valuator_mode_t;

/**
 * @@brief xcb_input_device_info_t
 **/
typedef struct xcb_input_device_info_t {
    xcb_atom_t device_type;
    uint8_t    device_id;
    uint8_t    num_class_info;
    uint8_t    device_use;
    uint8_t    pad0;
} xcb_input_device_info_t;

/**
 * @@brief xcb_input_device_info_iterator_t
 **/
typedef struct xcb_input_device_info_iterator_t {
    xcb_input_device_info_t *data;
    int                      rem;
    int                      index;
} xcb_input_device_info_iterator_t;

/**
 * @@brief xcb_input_key_info_t
 **/
typedef struct xcb_input_key_info_t {
    uint8_t              class_id;
    uint8_t              len;
    xcb_input_key_code_t min_keycode;
    xcb_input_key_code_t max_keycode;
    uint16_t             num_keys;
    uint8_t              pad0[2];
} xcb_input_key_info_t;

/**
 * @@brief xcb_input_key_info_iterator_t
 **/
typedef struct xcb_input_key_info_iterator_t {
    xcb_input_key_info_t *data;
    int                   rem;
    int                   index;
} xcb_input_key_info_iterator_t;

/**
 * @@brief xcb_input_button_info_t
 **/
typedef struct xcb_input_button_info_t {
    uint8_t  class_id;
    uint8_t  len;
    uint16_t num_buttons;
} xcb_input_button_info_t;

/**
 * @@brief xcb_input_button_info_iterator_t
 **/
typedef struct xcb_input_button_info_iterator_t {
    xcb_input_button_info_t *data;
    int                      rem;
    int                      index;
} xcb_input_button_info_iterator_t;

/**
 * @@brief xcb_input_axis_info_t
 **/
typedef struct xcb_input_axis_info_t {
    uint32_t resolution;
    int32_t  minimum;
    int32_t  maximum;
} xcb_input_axis_info_t;

/**
 * @@brief xcb_input_axis_info_iterator_t
 **/
typedef struct xcb_input_axis_info_iterator_t {
    xcb_input_axis_info_t *data;
    int                    rem;
    int                    index;
} xcb_input_axis_info_iterator_t;

/**
 * @@brief xcb_input_valuator_info_t
 **/
typedef struct xcb_input_valuator_info_t {
    uint8_t  class_id;
    uint8_t  len;
    uint8_t  axes_len;
    uint8_t  mode;
    uint32_t motion_size;
} xcb_input_valuator_info_t;

/**
 * @@brief xcb_input_valuator_info_iterator_t
 **/
typedef struct xcb_input_valuator_info_iterator_t {
    xcb_input_valuator_info_t *data;
    int                        rem;
    int                        index;
} xcb_input_valuator_info_iterator_t;

/**
 * @@brief xcb_input_input_info_info_t
 **/
typedef struct xcb_input_input_info_info_t {
    struct {
        xcb_input_key_code_t   min_keycode;
        xcb_input_key_code_t   max_keycode;
        uint16_t               num_keys;
        uint8_t                pad0[2];
    } key;
    struct {
        uint16_t               num_buttons;
    } button;
    struct {
        uint8_t                axes_len;
        uint8_t                mode;
        uint32_t               motion_size;
        xcb_input_axis_info_t *axes;
    } valuator;
} xcb_input_input_info_info_t;

/**
 * @@brief xcb_input_input_info_t
 **/
typedef struct xcb_input_input_info_t {
    uint8_t class_id;
    uint8_t len;
} xcb_input_input_info_t;

void *
xcb_input_input_info_info (const xcb_input_input_info_t *R);

/**
 * @@brief xcb_input_input_info_iterator_t
 **/
typedef struct xcb_input_input_info_iterator_t {
    xcb_input_input_info_t *data;
    int                     rem;
    int                     index;
} xcb_input_input_info_iterator_t;

/**
 * @@brief xcb_input_device_name_t
 **/
typedef struct xcb_input_device_name_t {
    uint8_t len;
} xcb_input_device_name_t;

/**
 * @@brief xcb_input_device_name_iterator_t
 **/
typedef struct xcb_input_device_name_iterator_t {
    xcb_input_device_name_t *data;
    int                      rem;
    int                      index;
} xcb_input_device_name_iterator_t;

/**
 * @@brief xcb_input_list_input_devices_cookie_t
 **/
typedef struct xcb_input_list_input_devices_cookie_t {
    unsigned int sequence;
} xcb_input_list_input_devices_cookie_t;

/** Opcode for xcb_input_list_input_devices. */
#define XCB_INPUT_LIST_INPUT_DEVICES 2

/**
 * @@brief xcb_input_list_input_devices_request_t
 **/
typedef struct xcb_input_list_input_devices_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_input_list_input_devices_request_t;

/**
 * @@brief xcb_input_list_input_devices_reply_t
 **/
typedef struct xcb_input_list_input_devices_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  devices_len;
    uint8_t  pad0[23];
} xcb_input_list_input_devices_reply_t;

/**
 * @@brief xcb_input_input_class_info_t
 **/
typedef struct xcb_input_input_class_info_t {
    uint8_t class_id;
    uint8_t event_type_base;
} xcb_input_input_class_info_t;

/**
 * @@brief xcb_input_input_class_info_iterator_t
 **/
typedef struct xcb_input_input_class_info_iterator_t {
    xcb_input_input_class_info_t *data;
    int                           rem;
    int                           index;
} xcb_input_input_class_info_iterator_t;

/**
 * @@brief xcb_input_open_device_cookie_t
 **/
typedef struct xcb_input_open_device_cookie_t {
    unsigned int sequence;
} xcb_input_open_device_cookie_t;

/** Opcode for xcb_input_open_device. */
#define XCB_INPUT_OPEN_DEVICE 3

/**
 * @@brief xcb_input_open_device_request_t
 **/
typedef struct xcb_input_open_device_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_open_device_request_t;

/**
 * @@brief xcb_input_open_device_reply_t
 **/
typedef struct xcb_input_open_device_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  num_classes;
    uint8_t  pad0[23];
} xcb_input_open_device_reply_t;

/** Opcode for xcb_input_close_device. */
#define XCB_INPUT_CLOSE_DEVICE 4

/**
 * @@brief xcb_input_close_device_request_t
 **/
typedef struct xcb_input_close_device_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_close_device_request_t;

/**
 * @@brief xcb_input_set_device_mode_cookie_t
 **/
typedef struct xcb_input_set_device_mode_cookie_t {
    unsigned int sequence;
} xcb_input_set_device_mode_cookie_t;

/** Opcode for xcb_input_set_device_mode. */
#define XCB_INPUT_SET_DEVICE_MODE 5

/**
 * @@brief xcb_input_set_device_mode_request_t
 **/
typedef struct xcb_input_set_device_mode_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  mode;
    uint8_t  pad0[2];
} xcb_input_set_device_mode_request_t;

/**
 * @@brief xcb_input_set_device_mode_reply_t
 **/
typedef struct xcb_input_set_device_mode_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_set_device_mode_reply_t;

/** Opcode for xcb_input_select_extension_event. */
#define XCB_INPUT_SELECT_EXTENSION_EVENT 6

/**
 * @@brief xcb_input_select_extension_event_request_t
 **/
typedef struct xcb_input_select_extension_event_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint16_t     num_classes;
    uint8_t      pad0[2];
} xcb_input_select_extension_event_request_t;

/**
 * @@brief xcb_input_get_selected_extension_events_cookie_t
 **/
typedef struct xcb_input_get_selected_extension_events_cookie_t {
    unsigned int sequence;
} xcb_input_get_selected_extension_events_cookie_t;

/** Opcode for xcb_input_get_selected_extension_events. */
#define XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS 7

/**
 * @@brief xcb_input_get_selected_extension_events_request_t
 **/
typedef struct xcb_input_get_selected_extension_events_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_input_get_selected_extension_events_request_t;

/**
 * @@brief xcb_input_get_selected_extension_events_reply_t
 **/
typedef struct xcb_input_get_selected_extension_events_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_this_classes;
    uint16_t num_all_classes;
    uint8_t  pad0[20];
} xcb_input_get_selected_extension_events_reply_t;

typedef enum xcb_input_propagate_mode_t {
    XCB_INPUT_PROPAGATE_MODE_ADD_TO_LIST = 0,
    XCB_INPUT_PROPAGATE_MODE_DELETE_FROM_LIST = 1
} xcb_input_propagate_mode_t;

/** Opcode for xcb_input_change_device_dont_propagate_list. */
#define XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST 8

/**
 * @@brief xcb_input_change_device_dont_propagate_list_request_t
 **/
typedef struct xcb_input_change_device_dont_propagate_list_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint16_t     num_classes;
    uint8_t      mode;
    uint8_t      pad0;
} xcb_input_change_device_dont_propagate_list_request_t;

/**
 * @@brief xcb_input_get_device_dont_propagate_list_cookie_t
 **/
typedef struct xcb_input_get_device_dont_propagate_list_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_dont_propagate_list_cookie_t;

/** Opcode for xcb_input_get_device_dont_propagate_list. */
#define XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST 9

/**
 * @@brief xcb_input_get_device_dont_propagate_list_request_t
 **/
typedef struct xcb_input_get_device_dont_propagate_list_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_input_get_device_dont_propagate_list_request_t;

/**
 * @@brief xcb_input_get_device_dont_propagate_list_reply_t
 **/
typedef struct xcb_input_get_device_dont_propagate_list_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_classes;
    uint8_t  pad0[22];
} xcb_input_get_device_dont_propagate_list_reply_t;

/**
 * @@brief xcb_input_device_time_coord_t
 **/
typedef struct xcb_input_device_time_coord_t {
    xcb_timestamp_t time;
} xcb_input_device_time_coord_t;

/**
 * @@brief xcb_input_device_time_coord_iterator_t
 **/
typedef struct xcb_input_device_time_coord_iterator_t {
    xcb_input_device_time_coord_t *data;
    int                            rem;
    int                            index;
    uint8_t                        num_axes; /**<  */
} xcb_input_device_time_coord_iterator_t;

/**
 * @@brief xcb_input_get_device_motion_events_cookie_t
 **/
typedef struct xcb_input_get_device_motion_events_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_motion_events_cookie_t;

/** Opcode for xcb_input_get_device_motion_events. */
#define XCB_INPUT_GET_DEVICE_MOTION_EVENTS 10

/**
 * @@brief xcb_input_get_device_motion_events_request_t
 **/
typedef struct xcb_input_get_device_motion_events_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_timestamp_t start;
    xcb_timestamp_t stop;
    uint8_t         device_id;
    uint8_t         pad0[3];
} xcb_input_get_device_motion_events_request_t;

/**
 * @@brief xcb_input_get_device_motion_events_reply_t
 **/
typedef struct xcb_input_get_device_motion_events_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_events;
    uint8_t  num_axes;
    uint8_t  device_mode;
    uint8_t  pad0[18];
} xcb_input_get_device_motion_events_reply_t;

/**
 * @@brief xcb_input_change_keyboard_device_cookie_t
 **/
typedef struct xcb_input_change_keyboard_device_cookie_t {
    unsigned int sequence;
} xcb_input_change_keyboard_device_cookie_t;

/** Opcode for xcb_input_change_keyboard_device. */
#define XCB_INPUT_CHANGE_KEYBOARD_DEVICE 11

/**
 * @@brief xcb_input_change_keyboard_device_request_t
 **/
typedef struct xcb_input_change_keyboard_device_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_change_keyboard_device_request_t;

/**
 * @@brief xcb_input_change_keyboard_device_reply_t
 **/
typedef struct xcb_input_change_keyboard_device_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_change_keyboard_device_reply_t;

/**
 * @@brief xcb_input_change_pointer_device_cookie_t
 **/
typedef struct xcb_input_change_pointer_device_cookie_t {
    unsigned int sequence;
} xcb_input_change_pointer_device_cookie_t;

/** Opcode for xcb_input_change_pointer_device. */
#define XCB_INPUT_CHANGE_POINTER_DEVICE 12

/**
 * @@brief xcb_input_change_pointer_device_request_t
 **/
typedef struct xcb_input_change_pointer_device_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  x_axis;
    uint8_t  y_axis;
    uint8_t  device_id;
    uint8_t  pad0;
} xcb_input_change_pointer_device_request_t;

/**
 * @@brief xcb_input_change_pointer_device_reply_t
 **/
typedef struct xcb_input_change_pointer_device_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_change_pointer_device_reply_t;

/**
 * @@brief xcb_input_grab_device_cookie_t
 **/
typedef struct xcb_input_grab_device_cookie_t {
    unsigned int sequence;
} xcb_input_grab_device_cookie_t;

/** Opcode for xcb_input_grab_device. */
#define XCB_INPUT_GRAB_DEVICE 13

/**
 * @@brief xcb_input_grab_device_request_t
 **/
typedef struct xcb_input_grab_device_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_window_t    grab_window;
    xcb_timestamp_t time;
    uint16_t        num_classes;
    uint8_t         this_device_mode;
    uint8_t         other_device_mode;
    uint8_t         owner_events;
    uint8_t         device_id;
    uint8_t         pad0[2];
} xcb_input_grab_device_request_t;

/**
 * @@brief xcb_input_grab_device_reply_t
 **/
typedef struct xcb_input_grab_device_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_grab_device_reply_t;

/** Opcode for xcb_input_ungrab_device. */
#define XCB_INPUT_UNGRAB_DEVICE 14

/**
 * @@brief xcb_input_ungrab_device_request_t
 **/
typedef struct xcb_input_ungrab_device_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_timestamp_t time;
    uint8_t         device_id;
    uint8_t         pad0[3];
} xcb_input_ungrab_device_request_t;

typedef enum xcb_input_modifier_device_t {
    XCB_INPUT_MODIFIER_DEVICE_USE_X_KEYBOARD = 255
} xcb_input_modifier_device_t;

/** Opcode for xcb_input_grab_device_key. */
#define XCB_INPUT_GRAB_DEVICE_KEY 15

/**
 * @@brief xcb_input_grab_device_key_request_t
 **/
typedef struct xcb_input_grab_device_key_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t grab_window;
    uint16_t     num_classes;
    uint16_t     modifiers;
    uint8_t      modifier_device;
    uint8_t      grabbed_device;
    uint8_t      key;
    uint8_t      this_device_mode;
    uint8_t      other_device_mode;
    uint8_t      owner_events;
    uint8_t      pad0[2];
} xcb_input_grab_device_key_request_t;

/** Opcode for xcb_input_ungrab_device_key. */
#define XCB_INPUT_UNGRAB_DEVICE_KEY 16

/**
 * @@brief xcb_input_ungrab_device_key_request_t
 **/
typedef struct xcb_input_ungrab_device_key_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t grabWindow;
    uint16_t     modifiers;
    uint8_t      modifier_device;
    uint8_t      key;
    uint8_t      grabbed_device;
} xcb_input_ungrab_device_key_request_t;

/** Opcode for xcb_input_grab_device_button. */
#define XCB_INPUT_GRAB_DEVICE_BUTTON 17

/**
 * @@brief xcb_input_grab_device_button_request_t
 **/
typedef struct xcb_input_grab_device_button_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t grab_window;
    uint8_t      grabbed_device;
    uint8_t      modifier_device;
    uint16_t     num_classes;
    uint16_t     modifiers;
    uint8_t      this_device_mode;
    uint8_t      other_device_mode;
    uint8_t      button;
    uint8_t      owner_events;
    uint8_t      pad0[2];
} xcb_input_grab_device_button_request_t;

/** Opcode for xcb_input_ungrab_device_button. */
#define XCB_INPUT_UNGRAB_DEVICE_BUTTON 18

/**
 * @@brief xcb_input_ungrab_device_button_request_t
 **/
typedef struct xcb_input_ungrab_device_button_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t grab_window;
    uint16_t     modifiers;
    uint8_t      modifier_device;
    uint8_t      button;
    uint8_t      grabbed_device;
    uint8_t      pad0[3];
} xcb_input_ungrab_device_button_request_t;

typedef enum xcb_input_device_input_mode_t {
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_THIS_DEVICE = 0,
    XCB_INPUT_DEVICE_INPUT_MODE_SYNC_THIS_DEVICE = 1,
    XCB_INPUT_DEVICE_INPUT_MODE_REPLAY_THIS_DEVICE = 2,
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_OTHER_DEVICES = 3,
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_ALL = 4,
    XCB_INPUT_DEVICE_INPUT_MODE_SYNC_ALL = 5
} xcb_input_device_input_mode_t;

/** Opcode for xcb_input_allow_device_events. */
#define XCB_INPUT_ALLOW_DEVICE_EVENTS 19

/**
 * @@brief xcb_input_allow_device_events_request_t
 **/
typedef struct xcb_input_allow_device_events_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_timestamp_t time;
    uint8_t         mode;
    uint8_t         device_id;
    uint8_t         pad0[2];
} xcb_input_allow_device_events_request_t;

/**
 * @@brief xcb_input_get_device_focus_cookie_t
 **/
typedef struct xcb_input_get_device_focus_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_focus_cookie_t;

/** Opcode for xcb_input_get_device_focus. */
#define XCB_INPUT_GET_DEVICE_FOCUS 20

/**
 * @@brief xcb_input_get_device_focus_request_t
 **/
typedef struct xcb_input_get_device_focus_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_get_device_focus_request_t;

/**
 * @@brief xcb_input_get_device_focus_reply_t
 **/
typedef struct xcb_input_get_device_focus_reply_t {
    uint8_t         response_type;
    uint8_t         xi_reply_type;
    uint16_t        sequence;
    uint32_t        length;
    xcb_window_t    focus;
    xcb_timestamp_t time;
    uint8_t         revert_to;
    uint8_t         pad0[15];
} xcb_input_get_device_focus_reply_t;

/** Opcode for xcb_input_set_device_focus. */
#define XCB_INPUT_SET_DEVICE_FOCUS 21

/**
 * @@brief xcb_input_set_device_focus_request_t
 **/
typedef struct xcb_input_set_device_focus_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_window_t    focus;
    xcb_timestamp_t time;
    uint8_t         revert_to;
    uint8_t         device_id;
    uint8_t         pad0[2];
} xcb_input_set_device_focus_request_t;

typedef enum xcb_input_feedback_class_t {
    XCB_INPUT_FEEDBACK_CLASS_KEYBOARD = 0,
    XCB_INPUT_FEEDBACK_CLASS_POINTER = 1,
    XCB_INPUT_FEEDBACK_CLASS_STRING = 2,
    XCB_INPUT_FEEDBACK_CLASS_INTEGER = 3,
    XCB_INPUT_FEEDBACK_CLASS_LED = 4,
    XCB_INPUT_FEEDBACK_CLASS_BELL = 5
} xcb_input_feedback_class_t;

/**
 * @@brief xcb_input_kbd_feedback_state_t
 **/
typedef struct xcb_input_kbd_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint16_t pitch;
    uint16_t duration;
    uint32_t led_mask;
    uint32_t led_values;
    uint8_t  global_auto_repeat;
    uint8_t  click;
    uint8_t  percent;
    uint8_t  pad0;
    uint8_t  auto_repeats[32];
} xcb_input_kbd_feedback_state_t;

/**
 * @@brief xcb_input_kbd_feedback_state_iterator_t
 **/
typedef struct xcb_input_kbd_feedback_state_iterator_t {
    xcb_input_kbd_feedback_state_t *data;
    int                             rem;
    int                             index;
} xcb_input_kbd_feedback_state_iterator_t;

/**
 * @@brief xcb_input_ptr_feedback_state_t
 **/
typedef struct xcb_input_ptr_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint8_t  pad0[2];
    uint16_t accel_num;
    uint16_t accel_denom;
    uint16_t threshold;
} xcb_input_ptr_feedback_state_t;

/**
 * @@brief xcb_input_ptr_feedback_state_iterator_t
 **/
typedef struct xcb_input_ptr_feedback_state_iterator_t {
    xcb_input_ptr_feedback_state_t *data;
    int                             rem;
    int                             index;
} xcb_input_ptr_feedback_state_iterator_t;

/**
 * @@brief xcb_input_integer_feedback_state_t
 **/
typedef struct xcb_input_integer_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint32_t resolution;
    int32_t  min_value;
    int32_t  max_value;
} xcb_input_integer_feedback_state_t;

/**
 * @@brief xcb_input_integer_feedback_state_iterator_t
 **/
typedef struct xcb_input_integer_feedback_state_iterator_t {
    xcb_input_integer_feedback_state_t *data;
    int                                 rem;
    int                                 index;
} xcb_input_integer_feedback_state_iterator_t;

/**
 * @@brief xcb_input_string_feedback_state_t
 **/
typedef struct xcb_input_string_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint16_t max_symbols;
    uint16_t num_keysyms;
} xcb_input_string_feedback_state_t;

/**
 * @@brief xcb_input_string_feedback_state_iterator_t
 **/
typedef struct xcb_input_string_feedback_state_iterator_t {
    xcb_input_string_feedback_state_t *data;
    int                                rem;
    int                                index;
} xcb_input_string_feedback_state_iterator_t;

/**
 * @@brief xcb_input_bell_feedback_state_t
 **/
typedef struct xcb_input_bell_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint8_t  percent;
    uint8_t  pad0[3];
    uint16_t pitch;
    uint16_t duration;
} xcb_input_bell_feedback_state_t;

/**
 * @@brief xcb_input_bell_feedback_state_iterator_t
 **/
typedef struct xcb_input_bell_feedback_state_iterator_t {
    xcb_input_bell_feedback_state_t *data;
    int                              rem;
    int                              index;
} xcb_input_bell_feedback_state_iterator_t;

/**
 * @@brief xcb_input_led_feedback_state_t
 **/
typedef struct xcb_input_led_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint32_t led_mask;
    uint32_t led_values;
} xcb_input_led_feedback_state_t;

/**
 * @@brief xcb_input_led_feedback_state_iterator_t
 **/
typedef struct xcb_input_led_feedback_state_iterator_t {
    xcb_input_led_feedback_state_t *data;
    int                             rem;
    int                             index;
} xcb_input_led_feedback_state_iterator_t;

/**
 * @@brief xcb_input_feedback_state_data_t
 **/
typedef struct xcb_input_feedback_state_data_t {
    struct {
        uint16_t      pitch;
        uint16_t      duration;
        uint32_t      led_mask;
        uint32_t      led_values;
        uint8_t       global_auto_repeat;
        uint8_t       click;
        uint8_t       percent;
        uint8_t       pad0;
        uint8_t       auto_repeats[32];
    } keyboard;
    struct {
        uint8_t       pad1[2];
        uint16_t      accel_num;
        uint16_t      accel_denom;
        uint16_t      threshold;
    } pointer;
    struct {
        uint16_t      max_symbols;
        uint16_t      num_keysyms;
        xcb_keysym_t *keysyms;
    } string;
    struct {
        uint32_t      resolution;
        int32_t       min_value;
        int32_t       max_value;
    } integer;
    struct {
        uint32_t      led_mask;
        uint32_t      led_values;
    } led;
    struct {
        uint8_t       percent;
        uint8_t       pad2[3];
        uint16_t      pitch;
        uint16_t      duration;
    } bell;
} xcb_input_feedback_state_data_t;

/**
 * @@brief xcb_input_feedback_state_t
 **/
typedef struct xcb_input_feedback_state_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
} xcb_input_feedback_state_t;

void *
xcb_input_feedback_state_data (const xcb_input_feedback_state_t *R);

/**
 * @@brief xcb_input_feedback_state_iterator_t
 **/
typedef struct xcb_input_feedback_state_iterator_t {
    xcb_input_feedback_state_t *data;
    int                         rem;
    int                         index;
} xcb_input_feedback_state_iterator_t;

/**
 * @@brief xcb_input_get_feedback_control_cookie_t
 **/
typedef struct xcb_input_get_feedback_control_cookie_t {
    unsigned int sequence;
} xcb_input_get_feedback_control_cookie_t;

/** Opcode for xcb_input_get_feedback_control. */
#define XCB_INPUT_GET_FEEDBACK_CONTROL 22

/**
 * @@brief xcb_input_get_feedback_control_request_t
 **/
typedef struct xcb_input_get_feedback_control_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_get_feedback_control_request_t;

/**
 * @@brief xcb_input_get_feedback_control_reply_t
 **/
typedef struct xcb_input_get_feedback_control_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_feedbacks;
    uint8_t  pad0[22];
} xcb_input_get_feedback_control_reply_t;

/**
 * @@brief xcb_input_kbd_feedback_ctl_t
 **/
typedef struct xcb_input_kbd_feedback_ctl_t {
    uint8_t              class_id;
    uint8_t              feedback_id;
    uint16_t             len;
    xcb_input_key_code_t key;
    uint8_t              auto_repeat_mode;
    int8_t               key_click_percent;
    int8_t               bell_percent;
    int16_t              bell_pitch;
    int16_t              bell_duration;
    uint32_t             led_mask;
    uint32_t             led_values;
} xcb_input_kbd_feedback_ctl_t;

/**
 * @@brief xcb_input_kbd_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_kbd_feedback_ctl_iterator_t {
    xcb_input_kbd_feedback_ctl_t *data;
    int                           rem;
    int                           index;
} xcb_input_kbd_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_ptr_feedback_ctl_t
 **/
typedef struct xcb_input_ptr_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint8_t  pad0[2];
    int16_t  num;
    int16_t  denom;
    int16_t  threshold;
} xcb_input_ptr_feedback_ctl_t;

/**
 * @@brief xcb_input_ptr_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_ptr_feedback_ctl_iterator_t {
    xcb_input_ptr_feedback_ctl_t *data;
    int                           rem;
    int                           index;
} xcb_input_ptr_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_integer_feedback_ctl_t
 **/
typedef struct xcb_input_integer_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    int32_t  int_to_display;
} xcb_input_integer_feedback_ctl_t;

/**
 * @@brief xcb_input_integer_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_integer_feedback_ctl_iterator_t {
    xcb_input_integer_feedback_ctl_t *data;
    int                               rem;
    int                               index;
} xcb_input_integer_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_string_feedback_ctl_t
 **/
typedef struct xcb_input_string_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint8_t  pad0[2];
    uint16_t num_keysyms;
} xcb_input_string_feedback_ctl_t;

/**
 * @@brief xcb_input_string_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_string_feedback_ctl_iterator_t {
    xcb_input_string_feedback_ctl_t *data;
    int                              rem;
    int                              index;
} xcb_input_string_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_bell_feedback_ctl_t
 **/
typedef struct xcb_input_bell_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    int8_t   percent;
    uint8_t  pad0[3];
    int16_t  pitch;
    int16_t  duration;
} xcb_input_bell_feedback_ctl_t;

/**
 * @@brief xcb_input_bell_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_bell_feedback_ctl_iterator_t {
    xcb_input_bell_feedback_ctl_t *data;
    int                            rem;
    int                            index;
} xcb_input_bell_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_led_feedback_ctl_t
 **/
typedef struct xcb_input_led_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
    uint32_t led_mask;
    uint32_t led_values;
} xcb_input_led_feedback_ctl_t;

/**
 * @@brief xcb_input_led_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_led_feedback_ctl_iterator_t {
    xcb_input_led_feedback_ctl_t *data;
    int                           rem;
    int                           index;
} xcb_input_led_feedback_ctl_iterator_t;

/**
 * @@brief xcb_input_feedback_ctl_data_t
 **/
typedef struct xcb_input_feedback_ctl_data_t {
    struct {
        xcb_input_key_code_t key;
        uint8_t              auto_repeat_mode;
        int8_t               key_click_percent;
        int8_t               bell_percent;
        int16_t              bell_pitch;
        int16_t              bell_duration;
        uint32_t             led_mask;
        uint32_t             led_values;
    } keyboard;
    struct {
        uint8_t              pad0[2];
        int16_t              num;
        int16_t              denom;
        int16_t              threshold;
    } pointer;
    struct {
        uint8_t              pad1[2];
        uint16_t             num_keysyms;
        xcb_keysym_t        *keysyms;
    } string;
    struct {
        int32_t              int_to_display;
    } integer;
    struct {
        uint32_t             led_mask;
        uint32_t             led_values;
    } led;
    struct {
        int8_t               percent;
        uint8_t              pad2[3];
        int16_t              pitch;
        int16_t              duration;
    } bell;
} xcb_input_feedback_ctl_data_t;

/**
 * @@brief xcb_input_feedback_ctl_t
 **/
typedef struct xcb_input_feedback_ctl_t {
    uint8_t  class_id;
    uint8_t  feedback_id;
    uint16_t len;
} xcb_input_feedback_ctl_t;

void *
xcb_input_feedback_ctl_data (const xcb_input_feedback_ctl_t *R);

/**
 * @@brief xcb_input_feedback_ctl_iterator_t
 **/
typedef struct xcb_input_feedback_ctl_iterator_t {
    xcb_input_feedback_ctl_t *data;
    int                       rem;
    int                       index;
} xcb_input_feedback_ctl_iterator_t;

typedef enum xcb_input_change_feedback_control_mask_t {
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_KEY_CLICK_PERCENT = 1,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_PERCENT = 2,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_PITCH = 4,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_DURATION = 8,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_LED = 16,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_LED_MODE = 32,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_KEY = 64,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_AUTO_REPEAT_MODE = 128,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_STRING = 1,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_INTEGER = 1,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_ACCEL_NUM = 1,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_ACCEL_DENOM = 2,
    XCB_INPUT_CHANGE_FEEDBACK_CONTROL_MASK_THRESHOLD = 4
} xcb_input_change_feedback_control_mask_t;

/** Opcode for xcb_input_change_feedback_control. */
#define XCB_INPUT_CHANGE_FEEDBACK_CONTROL 23

/**
 * @@brief xcb_input_change_feedback_control_request_t
 **/
typedef struct xcb_input_change_feedback_control_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t mask;
    uint8_t  device_id;
    uint8_t  feedback_id;
    uint8_t  pad0[2];
} xcb_input_change_feedback_control_request_t;

/**
 * @@brief xcb_input_get_device_key_mapping_cookie_t
 **/
typedef struct xcb_input_get_device_key_mapping_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_key_mapping_cookie_t;

/** Opcode for xcb_input_get_device_key_mapping. */
#define XCB_INPUT_GET_DEVICE_KEY_MAPPING 24

/**
 * @@brief xcb_input_get_device_key_mapping_request_t
 **/
typedef struct xcb_input_get_device_key_mapping_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    uint8_t              device_id;
    xcb_input_key_code_t first_keycode;
    uint8_t              count;
    uint8_t              pad0;
} xcb_input_get_device_key_mapping_request_t;

/**
 * @@brief xcb_input_get_device_key_mapping_reply_t
 **/
typedef struct xcb_input_get_device_key_mapping_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  keysyms_per_keycode;
    uint8_t  pad0[23];
} xcb_input_get_device_key_mapping_reply_t;

/** Opcode for xcb_input_change_device_key_mapping. */
#define XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING 25

/**
 * @@brief xcb_input_change_device_key_mapping_request_t
 **/
typedef struct xcb_input_change_device_key_mapping_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    uint8_t              device_id;
    xcb_input_key_code_t first_keycode;
    uint8_t              keysyms_per_keycode;
    uint8_t              keycode_count;
} xcb_input_change_device_key_mapping_request_t;

/**
 * @@brief xcb_input_get_device_modifier_mapping_cookie_t
 **/
typedef struct xcb_input_get_device_modifier_mapping_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_modifier_mapping_cookie_t;

/** Opcode for xcb_input_get_device_modifier_mapping. */
#define XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING 26

/**
 * @@brief xcb_input_get_device_modifier_mapping_request_t
 **/
typedef struct xcb_input_get_device_modifier_mapping_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_get_device_modifier_mapping_request_t;

/**
 * @@brief xcb_input_get_device_modifier_mapping_reply_t
 **/
typedef struct xcb_input_get_device_modifier_mapping_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  keycodes_per_modifier;
    uint8_t  pad0[23];
} xcb_input_get_device_modifier_mapping_reply_t;

/**
 * @@brief xcb_input_set_device_modifier_mapping_cookie_t
 **/
typedef struct xcb_input_set_device_modifier_mapping_cookie_t {
    unsigned int sequence;
} xcb_input_set_device_modifier_mapping_cookie_t;

/** Opcode for xcb_input_set_device_modifier_mapping. */
#define XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING 27

/**
 * @@brief xcb_input_set_device_modifier_mapping_request_t
 **/
typedef struct xcb_input_set_device_modifier_mapping_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  keycodes_per_modifier;
    uint8_t  pad0[2];
} xcb_input_set_device_modifier_mapping_request_t;

/**
 * @@brief xcb_input_set_device_modifier_mapping_reply_t
 **/
typedef struct xcb_input_set_device_modifier_mapping_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_set_device_modifier_mapping_reply_t;

/**
 * @@brief xcb_input_get_device_button_mapping_cookie_t
 **/
typedef struct xcb_input_get_device_button_mapping_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_button_mapping_cookie_t;

/** Opcode for xcb_input_get_device_button_mapping. */
#define XCB_INPUT_GET_DEVICE_BUTTON_MAPPING 28

/**
 * @@brief xcb_input_get_device_button_mapping_request_t
 **/
typedef struct xcb_input_get_device_button_mapping_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_get_device_button_mapping_request_t;

/**
 * @@brief xcb_input_get_device_button_mapping_reply_t
 **/
typedef struct xcb_input_get_device_button_mapping_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  map_size;
    uint8_t  pad0[23];
} xcb_input_get_device_button_mapping_reply_t;

/**
 * @@brief xcb_input_set_device_button_mapping_cookie_t
 **/
typedef struct xcb_input_set_device_button_mapping_cookie_t {
    unsigned int sequence;
} xcb_input_set_device_button_mapping_cookie_t;

/** Opcode for xcb_input_set_device_button_mapping. */
#define XCB_INPUT_SET_DEVICE_BUTTON_MAPPING 29

/**
 * @@brief xcb_input_set_device_button_mapping_request_t
 **/
typedef struct xcb_input_set_device_button_mapping_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  map_size;
    uint8_t  pad0[2];
} xcb_input_set_device_button_mapping_request_t;

/**
 * @@brief xcb_input_set_device_button_mapping_reply_t
 **/
typedef struct xcb_input_set_device_button_mapping_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_set_device_button_mapping_reply_t;

/**
 * @@brief xcb_input_key_state_t
 **/
typedef struct xcb_input_key_state_t {
    uint8_t class_id;
    uint8_t len;
    uint8_t num_keys;
    uint8_t pad0;
    uint8_t keys[32];
} xcb_input_key_state_t;

/**
 * @@brief xcb_input_key_state_iterator_t
 **/
typedef struct xcb_input_key_state_iterator_t {
    xcb_input_key_state_t *data;
    int                    rem;
    int                    index;
} xcb_input_key_state_iterator_t;

/**
 * @@brief xcb_input_button_state_t
 **/
typedef struct xcb_input_button_state_t {
    uint8_t class_id;
    uint8_t len;
    uint8_t num_buttons;
    uint8_t pad0;
    uint8_t buttons[32];
} xcb_input_button_state_t;

/**
 * @@brief xcb_input_button_state_iterator_t
 **/
typedef struct xcb_input_button_state_iterator_t {
    xcb_input_button_state_t *data;
    int                       rem;
    int                       index;
} xcb_input_button_state_iterator_t;

typedef enum xcb_input_valuator_state_mode_mask_t {
    XCB_INPUT_VALUATOR_STATE_MODE_MASK_DEVICE_MODE_ABSOLUTE = 1,
    XCB_INPUT_VALUATOR_STATE_MODE_MASK_OUT_OF_PROXIMITY = 2
} xcb_input_valuator_state_mode_mask_t;

/**
 * @@brief xcb_input_valuator_state_t
 **/
typedef struct xcb_input_valuator_state_t {
    uint8_t class_id;
    uint8_t len;
    uint8_t num_valuators;
    uint8_t mode;
} xcb_input_valuator_state_t;

/**
 * @@brief xcb_input_valuator_state_iterator_t
 **/
typedef struct xcb_input_valuator_state_iterator_t {
    xcb_input_valuator_state_t *data;
    int                         rem;
    int                         index;
} xcb_input_valuator_state_iterator_t;

/**
 * @@brief xcb_input_input_state_data_t
 **/
typedef struct xcb_input_input_state_data_t {
    struct {
        uint8_t  num_keys;
        uint8_t  pad0;
        uint8_t  keys[32];
    } key;
    struct {
        uint8_t  num_buttons;
        uint8_t  pad1;
        uint8_t  buttons[32];
    } button;
    struct {
        uint8_t  num_valuators;
        uint8_t  mode;
        int32_t *valuators;
    } valuator;
} xcb_input_input_state_data_t;

/**
 * @@brief xcb_input_input_state_t
 **/
typedef struct xcb_input_input_state_t {
    uint8_t class_id;
    uint8_t len;
} xcb_input_input_state_t;

void *
xcb_input_input_state_data (const xcb_input_input_state_t *R);

/**
 * @@brief xcb_input_input_state_iterator_t
 **/
typedef struct xcb_input_input_state_iterator_t {
    xcb_input_input_state_t *data;
    int                      rem;
    int                      index;
} xcb_input_input_state_iterator_t;

/**
 * @@brief xcb_input_query_device_state_cookie_t
 **/
typedef struct xcb_input_query_device_state_cookie_t {
    unsigned int sequence;
} xcb_input_query_device_state_cookie_t;

/** Opcode for xcb_input_query_device_state. */
#define XCB_INPUT_QUERY_DEVICE_STATE 30

/**
 * @@brief xcb_input_query_device_state_request_t
 **/
typedef struct xcb_input_query_device_state_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_query_device_state_request_t;

/**
 * @@brief xcb_input_query_device_state_reply_t
 **/
typedef struct xcb_input_query_device_state_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  num_classes;
    uint8_t  pad0[23];
} xcb_input_query_device_state_reply_t;

/** Opcode for xcb_input_send_extension_event. */
#define XCB_INPUT_SEND_EXTENSION_EVENT 31

/**
 * @@brief xcb_input_send_extension_event_request_t
 **/
typedef struct xcb_input_send_extension_event_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t destination;
    uint8_t      device_id;
    uint8_t      propagate;
    uint16_t     num_classes;
    uint8_t      num_events;
    uint8_t      pad0[3];
} xcb_input_send_extension_event_request_t;

/** Opcode for xcb_input_device_bell. */
#define XCB_INPUT_DEVICE_BELL 32

/**
 * @@brief xcb_input_device_bell_request_t
 **/
typedef struct xcb_input_device_bell_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  feedback_id;
    uint8_t  feedback_class;
    int8_t   percent;
} xcb_input_device_bell_request_t;

/**
 * @@brief xcb_input_set_device_valuators_cookie_t
 **/
typedef struct xcb_input_set_device_valuators_cookie_t {
    unsigned int sequence;
} xcb_input_set_device_valuators_cookie_t;

/** Opcode for xcb_input_set_device_valuators. */
#define XCB_INPUT_SET_DEVICE_VALUATORS 33

/**
 * @@brief xcb_input_set_device_valuators_request_t
 **/
typedef struct xcb_input_set_device_valuators_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  first_valuator;
    uint8_t  num_valuators;
    uint8_t  pad0;
} xcb_input_set_device_valuators_request_t;

/**
 * @@brief xcb_input_set_device_valuators_reply_t
 **/
typedef struct xcb_input_set_device_valuators_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_set_device_valuators_reply_t;

typedef enum xcb_input_device_control_t {
    XCB_INPUT_DEVICE_CONTROL_RESOLUTION = 1,
    XCB_INPUT_DEVICE_CONTROL_ABS_CALIB = 2,
    XCB_INPUT_DEVICE_CONTROL_CORE = 3,
    XCB_INPUT_DEVICE_CONTROL_ENABLE = 4,
    XCB_INPUT_DEVICE_CONTROL_ABS_AREA = 5
} xcb_input_device_control_t;

/**
 * @@brief xcb_input_device_resolution_state_t
 **/
typedef struct xcb_input_device_resolution_state_t {
    uint16_t control_id;
    uint16_t len;
    uint32_t num_valuators;
} xcb_input_device_resolution_state_t;

/**
 * @@brief xcb_input_device_resolution_state_iterator_t
 **/
typedef struct xcb_input_device_resolution_state_iterator_t {
    xcb_input_device_resolution_state_t *data;
    int                                  rem;
    int                                  index;
} xcb_input_device_resolution_state_iterator_t;

/**
 * @@brief xcb_input_device_abs_calib_state_t
 **/
typedef struct xcb_input_device_abs_calib_state_t {
    uint16_t control_id;
    uint16_t len;
    int32_t  min_x;
    int32_t  max_x;
    int32_t  min_y;
    int32_t  max_y;
    uint32_t flip_x;
    uint32_t flip_y;
    uint32_t rotation;
    uint32_t button_threshold;
} xcb_input_device_abs_calib_state_t;

/**
 * @@brief xcb_input_device_abs_calib_state_iterator_t
 **/
typedef struct xcb_input_device_abs_calib_state_iterator_t {
    xcb_input_device_abs_calib_state_t *data;
    int                                 rem;
    int                                 index;
} xcb_input_device_abs_calib_state_iterator_t;

/**
 * @@brief xcb_input_device_abs_area_state_t
 **/
typedef struct xcb_input_device_abs_area_state_t {
    uint16_t control_id;
    uint16_t len;
    uint32_t offset_x;
    uint32_t offset_y;
    uint32_t width;
    uint32_t height;
    uint32_t screen;
    uint32_t following;
} xcb_input_device_abs_area_state_t;

/**
 * @@brief xcb_input_device_abs_area_state_iterator_t
 **/
typedef struct xcb_input_device_abs_area_state_iterator_t {
    xcb_input_device_abs_area_state_t *data;
    int                                rem;
    int                                index;
} xcb_input_device_abs_area_state_iterator_t;

/**
 * @@brief xcb_input_device_core_state_t
 **/
typedef struct xcb_input_device_core_state_t {
    uint16_t control_id;
    uint16_t len;
    uint8_t  status;
    uint8_t  iscore;
    uint8_t  pad0[2];
} xcb_input_device_core_state_t;

/**
 * @@brief xcb_input_device_core_state_iterator_t
 **/
typedef struct xcb_input_device_core_state_iterator_t {
    xcb_input_device_core_state_t *data;
    int                            rem;
    int                            index;
} xcb_input_device_core_state_iterator_t;

/**
 * @@brief xcb_input_device_enable_state_t
 **/
typedef struct xcb_input_device_enable_state_t {
    uint16_t control_id;
    uint16_t len;
    uint8_t  enable;
    uint8_t  pad0[3];
} xcb_input_device_enable_state_t;

/**
 * @@brief xcb_input_device_enable_state_iterator_t
 **/
typedef struct xcb_input_device_enable_state_iterator_t {
    xcb_input_device_enable_state_t *data;
    int                              rem;
    int                              index;
} xcb_input_device_enable_state_iterator_t;

/**
 * @@brief xcb_input_device_state_data_t
 **/
typedef struct xcb_input_device_state_data_t {
    struct {
        uint32_t  num_valuators;
        uint32_t *resolution_values;
        uint32_t *resolution_min;
        uint32_t *resolution_max;
    } resolution;
    struct {
        int32_t   min_x;
        int32_t   max_x;
        int32_t   min_y;
        int32_t   max_y;
        uint32_t  flip_x;
        uint32_t  flip_y;
        uint32_t  rotation;
        uint32_t  button_threshold;
    } abs_calib;
    struct {
        uint8_t   status;
        uint8_t   iscore;
        uint8_t   pad0[2];
    } core;
    struct {
        uint8_t   enable;
        uint8_t   pad1[3];
    } enable;
    struct {
        uint32_t  offset_x;
        uint32_t  offset_y;
        uint32_t  width;
        uint32_t  height;
        uint32_t  screen;
        uint32_t  following;
    } abs_area;
} xcb_input_device_state_data_t;

/**
 * @@brief xcb_input_device_state_t
 **/
typedef struct xcb_input_device_state_t {
    uint16_t control_id;
    uint16_t len;
} xcb_input_device_state_t;

void *
xcb_input_device_state_data (const xcb_input_device_state_t *R);

/**
 * @@brief xcb_input_device_state_iterator_t
 **/
typedef struct xcb_input_device_state_iterator_t {
    xcb_input_device_state_t *data;
    int                       rem;
    int                       index;
} xcb_input_device_state_iterator_t;

/**
 * @@brief xcb_input_get_device_control_cookie_t
 **/
typedef struct xcb_input_get_device_control_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_control_cookie_t;

/** Opcode for xcb_input_get_device_control. */
#define XCB_INPUT_GET_DEVICE_CONTROL 34

/**
 * @@brief xcb_input_get_device_control_request_t
 **/
typedef struct xcb_input_get_device_control_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t control_id;
    uint8_t  device_id;
    uint8_t  pad0;
} xcb_input_get_device_control_request_t;

/**
 * @@brief xcb_input_get_device_control_reply_t
 **/
typedef struct xcb_input_get_device_control_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_get_device_control_reply_t;

/**
 * @@brief xcb_input_device_resolution_ctl_t
 **/
typedef struct xcb_input_device_resolution_ctl_t {
    uint16_t control_id;
    uint16_t len;
    uint8_t  first_valuator;
    uint8_t  num_valuators;
    uint8_t  pad0[2];
} xcb_input_device_resolution_ctl_t;

/**
 * @@brief xcb_input_device_resolution_ctl_iterator_t
 **/
typedef struct xcb_input_device_resolution_ctl_iterator_t {
    xcb_input_device_resolution_ctl_t *data;
    int                                rem;
    int                                index;
} xcb_input_device_resolution_ctl_iterator_t;

/**
 * @@brief xcb_input_device_abs_calib_ctl_t
 **/
typedef struct xcb_input_device_abs_calib_ctl_t {
    uint16_t control_id;
    uint16_t len;
    int32_t  min_x;
    int32_t  max_x;
    int32_t  min_y;
    int32_t  max_y;
    uint32_t flip_x;
    uint32_t flip_y;
    uint32_t rotation;
    uint32_t button_threshold;
} xcb_input_device_abs_calib_ctl_t;

/**
 * @@brief xcb_input_device_abs_calib_ctl_iterator_t
 **/
typedef struct xcb_input_device_abs_calib_ctl_iterator_t {
    xcb_input_device_abs_calib_ctl_t *data;
    int                               rem;
    int                               index;
} xcb_input_device_abs_calib_ctl_iterator_t;

/**
 * @@brief xcb_input_device_abs_area_ctrl_t
 **/
typedef struct xcb_input_device_abs_area_ctrl_t {
    uint16_t control_id;
    uint16_t len;
    uint32_t offset_x;
    uint32_t offset_y;
    int32_t  width;
    int32_t  height;
    int32_t  screen;
    uint32_t following;
} xcb_input_device_abs_area_ctrl_t;

/**
 * @@brief xcb_input_device_abs_area_ctrl_iterator_t
 **/
typedef struct xcb_input_device_abs_area_ctrl_iterator_t {
    xcb_input_device_abs_area_ctrl_t *data;
    int                               rem;
    int                               index;
} xcb_input_device_abs_area_ctrl_iterator_t;

/**
 * @@brief xcb_input_device_core_ctrl_t
 **/
typedef struct xcb_input_device_core_ctrl_t {
    uint16_t control_id;
    uint16_t len;
    uint8_t  status;
    uint8_t  pad0[3];
} xcb_input_device_core_ctrl_t;

/**
 * @@brief xcb_input_device_core_ctrl_iterator_t
 **/
typedef struct xcb_input_device_core_ctrl_iterator_t {
    xcb_input_device_core_ctrl_t *data;
    int                           rem;
    int                           index;
} xcb_input_device_core_ctrl_iterator_t;

/**
 * @@brief xcb_input_device_enable_ctrl_t
 **/
typedef struct xcb_input_device_enable_ctrl_t {
    uint16_t control_id;
    uint16_t len;
    uint8_t  enable;
    uint8_t  pad0[3];
} xcb_input_device_enable_ctrl_t;

/**
 * @@brief xcb_input_device_enable_ctrl_iterator_t
 **/
typedef struct xcb_input_device_enable_ctrl_iterator_t {
    xcb_input_device_enable_ctrl_t *data;
    int                             rem;
    int                             index;
} xcb_input_device_enable_ctrl_iterator_t;

/**
 * @@brief xcb_input_device_ctl_data_t
 **/
typedef struct xcb_input_device_ctl_data_t {
    struct {
        uint8_t   first_valuator;
        uint8_t   num_valuators;
        uint8_t   pad0[2];
        uint32_t *resolution_values;
    } resolution;
    struct {
        int32_t   min_x;
        int32_t   max_x;
        int32_t   min_y;
        int32_t   max_y;
        uint32_t  flip_x;
        uint32_t  flip_y;
        uint32_t  rotation;
        uint32_t  button_threshold;
    } abs_calib;
    struct {
        uint8_t   status;
        uint8_t   pad1[3];
    } core;
    struct {
        uint8_t   enable;
        uint8_t   pad2[3];
    } enable;
    struct {
        uint32_t  offset_x;
        uint32_t  offset_y;
        int32_t   width;
        int32_t   height;
        int32_t   screen;
        uint32_t  following;
    } abs_area;
} xcb_input_device_ctl_data_t;

/**
 * @@brief xcb_input_device_ctl_t
 **/
typedef struct xcb_input_device_ctl_t {
    uint16_t control_id;
    uint16_t len;
} xcb_input_device_ctl_t;

void *
xcb_input_device_ctl_data (const xcb_input_device_ctl_t *R);

/**
 * @@brief xcb_input_device_ctl_iterator_t
 **/
typedef struct xcb_input_device_ctl_iterator_t {
    xcb_input_device_ctl_t *data;
    int                     rem;
    int                     index;
} xcb_input_device_ctl_iterator_t;

/**
 * @@brief xcb_input_change_device_control_cookie_t
 **/
typedef struct xcb_input_change_device_control_cookie_t {
    unsigned int sequence;
} xcb_input_change_device_control_cookie_t;

/** Opcode for xcb_input_change_device_control. */
#define XCB_INPUT_CHANGE_DEVICE_CONTROL 35

/**
 * @@brief xcb_input_change_device_control_request_t
 **/
typedef struct xcb_input_change_device_control_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t control_id;
    uint8_t  device_id;
    uint8_t  pad0;
} xcb_input_change_device_control_request_t;

/**
 * @@brief xcb_input_change_device_control_reply_t
 **/
typedef struct xcb_input_change_device_control_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad0[23];
} xcb_input_change_device_control_reply_t;

/**
 * @@brief xcb_input_list_device_properties_cookie_t
 **/
typedef struct xcb_input_list_device_properties_cookie_t {
    unsigned int sequence;
} xcb_input_list_device_properties_cookie_t;

/** Opcode for xcb_input_list_device_properties. */
#define XCB_INPUT_LIST_DEVICE_PROPERTIES 36

/**
 * @@brief xcb_input_list_device_properties_request_t
 **/
typedef struct xcb_input_list_device_properties_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  device_id;
    uint8_t  pad0[3];
} xcb_input_list_device_properties_request_t;

/**
 * @@brief xcb_input_list_device_properties_reply_t
 **/
typedef struct xcb_input_list_device_properties_reply_t {
    uint8_t  response_type;
    uint8_t  xi_reply_type;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_atoms;
    uint8_t  pad0[22];
} xcb_input_list_device_properties_reply_t;

typedef enum xcb_input_property_format_t {
    XCB_INPUT_PROPERTY_FORMAT_8_BITS = 8,
    XCB_INPUT_PROPERTY_FORMAT_16_BITS = 16,
    XCB_INPUT_PROPERTY_FORMAT_32_BITS = 32
} xcb_input_property_format_t;

/**
 * @@brief xcb_input_change_device_property_items_t
 **/
typedef struct xcb_input_change_device_property_items_t {
    uint8_t  *data8;
    uint16_t *data16;
    uint32_t *data32;
} xcb_input_change_device_property_items_t;

/** Opcode for xcb_input_change_device_property. */
#define XCB_INPUT_CHANGE_DEVICE_PROPERTY 37

/**
 * @@brief xcb_input_change_device_property_request_t
 **/
typedef struct xcb_input_change_device_property_request_t {
    uint8_t    major_opcode;
    uint8_t    minor_opcode;
    uint16_t   length;
    xcb_atom_t property;
    xcb_atom_t type;
    uint8_t    device_id;
    uint8_t    format;
    uint8_t    mode;
    uint8_t    pad0;
    uint32_t   num_items;
} xcb_input_change_device_property_request_t;

/** Opcode for xcb_input_delete_device_property. */
#define XCB_INPUT_DELETE_DEVICE_PROPERTY 38

/**
 * @@brief xcb_input_delete_device_property_request_t
 **/
typedef struct xcb_input_delete_device_property_request_t {
    uint8_t    major_opcode;
    uint8_t    minor_opcode;
    uint16_t   length;
    xcb_atom_t property;
    uint8_t    device_id;
    uint8_t    pad0[3];
} xcb_input_delete_device_property_request_t;

/**
 * @@brief xcb_input_get_device_property_cookie_t
 **/
typedef struct xcb_input_get_device_property_cookie_t {
    unsigned int sequence;
} xcb_input_get_device_property_cookie_t;

/** Opcode for xcb_input_get_device_property. */
#define XCB_INPUT_GET_DEVICE_PROPERTY 39

/**
 * @@brief xcb_input_get_device_property_request_t
 **/
typedef struct xcb_input_get_device_property_request_t {
    uint8_t    major_opcode;
    uint8_t    minor_opcode;
    uint16_t   length;
    xcb_atom_t property;
    xcb_atom_t type;
    uint32_t   offset;
    uint32_t   len;
    uint8_t    device_id;
    uint8_t    _delete;
    uint8_t    pad0[2];
} xcb_input_get_device_property_request_t;

/**
 * @@brief xcb_input_get_device_property_items_t
 **/
typedef struct xcb_input_get_device_property_items_t {
    uint8_t  *data8;
    uint16_t *data16;
    uint32_t *data32;
} xcb_input_get_device_property_items_t;

/**
 * @@brief xcb_input_get_device_property_reply_t
 **/
typedef struct xcb_input_get_device_property_reply_t {
    uint8_t    response_type;
    uint8_t    xi_reply_type;
    uint16_t   sequence;
    uint32_t   length;
    xcb_atom_t type;
    uint32_t   bytes_after;
    uint32_t   num_items;
    uint8_t    format;
    uint8_t    device_id;
    uint8_t    pad0[10];
} xcb_input_get_device_property_reply_t;

typedef enum xcb_input_device_t {
    XCB_INPUT_DEVICE_ALL = 0,
    XCB_INPUT_DEVICE_ALL_MASTER = 1
} xcb_input_device_t;

/**
 * @@brief xcb_input_group_info_t
 **/
typedef struct xcb_input_group_info_t {
    uint8_t base;
    uint8_t latched;
    uint8_t locked;
    uint8_t effective;
} xcb_input_group_info_t;

/**
 * @@brief xcb_input_group_info_iterator_t
 **/
typedef struct xcb_input_group_info_iterator_t {
    xcb_input_group_info_t *data;
    int                     rem;
    int                     index;
} xcb_input_group_info_iterator_t;

/**
 * @@brief xcb_input_modifier_info_t
 **/
typedef struct xcb_input_modifier_info_t {
    uint32_t base;
    uint32_t latched;
    uint32_t locked;
    uint32_t effective;
} xcb_input_modifier_info_t;

/**
 * @@brief xcb_input_modifier_info_iterator_t
 **/
typedef struct xcb_input_modifier_info_iterator_t {
    xcb_input_modifier_info_t *data;
    int                        rem;
    int                        index;
} xcb_input_modifier_info_iterator_t;

/**
 * @@brief xcb_input_xi_query_pointer_cookie_t
 **/
typedef struct xcb_input_xi_query_pointer_cookie_t {
    unsigned int sequence;
} xcb_input_xi_query_pointer_cookie_t;

/** Opcode for xcb_input_xi_query_pointer. */
#define XCB_INPUT_XI_QUERY_POINTER 40

/**
 * @@brief xcb_input_xi_query_pointer_request_t
 **/
typedef struct xcb_input_xi_query_pointer_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_query_pointer_request_t;

/**
 * @@brief xcb_input_xi_query_pointer_reply_t
 **/
typedef struct xcb_input_xi_query_pointer_reply_t {
    uint8_t                   response_type;
    uint8_t                   pad0;
    uint16_t                  sequence;
    uint32_t                  length;
    xcb_window_t              root;
    xcb_window_t              child;
    xcb_input_fp1616_t        root_x;
    xcb_input_fp1616_t        root_y;
    xcb_input_fp1616_t        win_x;
    xcb_input_fp1616_t        win_y;
    uint8_t                   same_screen;
    uint8_t                   pad1;
    uint16_t                  buttons_len;
    xcb_input_modifier_info_t mods;
    xcb_input_group_info_t    group;
} xcb_input_xi_query_pointer_reply_t;

/** Opcode for xcb_input_xi_warp_pointer. */
#define XCB_INPUT_XI_WARP_POINTER 41

/**
 * @@brief xcb_input_xi_warp_pointer_request_t
 **/
typedef struct xcb_input_xi_warp_pointer_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          src_win;
    xcb_window_t          dst_win;
    xcb_input_fp1616_t    src_x;
    xcb_input_fp1616_t    src_y;
    uint16_t              src_width;
    uint16_t              src_height;
    xcb_input_fp1616_t    dst_x;
    xcb_input_fp1616_t    dst_y;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_warp_pointer_request_t;

/** Opcode for xcb_input_xi_change_cursor. */
#define XCB_INPUT_XI_CHANGE_CURSOR 42

/**
 * @@brief xcb_input_xi_change_cursor_request_t
 **/
typedef struct xcb_input_xi_change_cursor_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_cursor_t          cursor;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_change_cursor_request_t;

typedef enum xcb_input_hierarchy_change_type_t {
    XCB_INPUT_HIERARCHY_CHANGE_TYPE_ADD_MASTER = 1,
    XCB_INPUT_HIERARCHY_CHANGE_TYPE_REMOVE_MASTER = 2,
    XCB_INPUT_HIERARCHY_CHANGE_TYPE_ATTACH_SLAVE = 3,
    XCB_INPUT_HIERARCHY_CHANGE_TYPE_DETACH_SLAVE = 4
} xcb_input_hierarchy_change_type_t;

typedef enum xcb_input_change_mode_t {
    XCB_INPUT_CHANGE_MODE_ATTACH = 1,
    XCB_INPUT_CHANGE_MODE_FLOAT = 2
} xcb_input_change_mode_t;

/**
 * @@brief xcb_input_add_master_t
 **/
typedef struct xcb_input_add_master_t {
    uint16_t type;
    uint16_t len;
    uint16_t name_len;
    uint8_t  send_core;
    uint8_t  enable;
} xcb_input_add_master_t;

/**
 * @@brief xcb_input_add_master_iterator_t
 **/
typedef struct xcb_input_add_master_iterator_t {
    xcb_input_add_master_t *data;
    int                     rem;
    int                     index;
} xcb_input_add_master_iterator_t;

/**
 * @@brief xcb_input_remove_master_t
 **/
typedef struct xcb_input_remove_master_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t deviceid;
    uint8_t               return_mode;
    uint8_t               pad0;
    xcb_input_device_id_t return_pointer;
    xcb_input_device_id_t return_keyboard;
} xcb_input_remove_master_t;

/**
 * @@brief xcb_input_remove_master_iterator_t
 **/
typedef struct xcb_input_remove_master_iterator_t {
    xcb_input_remove_master_t *data;
    int                        rem;
    int                        index;
} xcb_input_remove_master_iterator_t;

/**
 * @@brief xcb_input_attach_slave_t
 **/
typedef struct xcb_input_attach_slave_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t deviceid;
    xcb_input_device_id_t master;
} xcb_input_attach_slave_t;

/**
 * @@brief xcb_input_attach_slave_iterator_t
 **/
typedef struct xcb_input_attach_slave_iterator_t {
    xcb_input_attach_slave_t *data;
    int                       rem;
    int                       index;
} xcb_input_attach_slave_iterator_t;

/**
 * @@brief xcb_input_detach_slave_t
 **/
typedef struct xcb_input_detach_slave_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_detach_slave_t;

/**
 * @@brief xcb_input_detach_slave_iterator_t
 **/
typedef struct xcb_input_detach_slave_iterator_t {
    xcb_input_detach_slave_t *data;
    int                       rem;
    int                       index;
} xcb_input_detach_slave_iterator_t;

/**
 * @@brief xcb_input_hierarchy_change_data_t
 **/
typedef struct xcb_input_hierarchy_change_data_t {
    struct {
        uint16_t              name_len;
        uint8_t               send_core;
        uint8_t               enable;
        char                 *name;
    } add_master;
    struct {
        xcb_input_device_id_t deviceid;
        uint8_t               return_mode;
        uint8_t               pad1;
        xcb_input_device_id_t return_pointer;
        xcb_input_device_id_t return_keyboard;
    } remove_master;
    struct {
        xcb_input_device_id_t deviceid;
        xcb_input_device_id_t master;
    } attach_slave;
    struct {
        xcb_input_device_id_t deviceid;
        uint8_t               pad2[2];
    } detach_slave;
} xcb_input_hierarchy_change_data_t;

/**
 * @@brief xcb_input_hierarchy_change_t
 **/
typedef struct xcb_input_hierarchy_change_t {
    uint16_t type;
    uint16_t len;
} xcb_input_hierarchy_change_t;

void *
xcb_input_hierarchy_change_data (const xcb_input_hierarchy_change_t *R);

/**
 * @@brief xcb_input_hierarchy_change_iterator_t
 **/
typedef struct xcb_input_hierarchy_change_iterator_t {
    xcb_input_hierarchy_change_t *data;
    int                           rem;
    int                           index;
} xcb_input_hierarchy_change_iterator_t;

/** Opcode for xcb_input_xi_change_hierarchy. */
#define XCB_INPUT_XI_CHANGE_HIERARCHY 43

/**
 * @@brief xcb_input_xi_change_hierarchy_request_t
 **/
typedef struct xcb_input_xi_change_hierarchy_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  num_changes;
    uint8_t  pad0[3];
} xcb_input_xi_change_hierarchy_request_t;

/** Opcode for xcb_input_xi_set_client_pointer. */
#define XCB_INPUT_XI_SET_CLIENT_POINTER 44

/**
 * @@brief xcb_input_xi_set_client_pointer_request_t
 **/
typedef struct xcb_input_xi_set_client_pointer_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_set_client_pointer_request_t;

/**
 * @@brief xcb_input_xi_get_client_pointer_cookie_t
 **/
typedef struct xcb_input_xi_get_client_pointer_cookie_t {
    unsigned int sequence;
} xcb_input_xi_get_client_pointer_cookie_t;

/** Opcode for xcb_input_xi_get_client_pointer. */
#define XCB_INPUT_XI_GET_CLIENT_POINTER 45

/**
 * @@brief xcb_input_xi_get_client_pointer_request_t
 **/
typedef struct xcb_input_xi_get_client_pointer_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_input_xi_get_client_pointer_request_t;

/**
 * @@brief xcb_input_xi_get_client_pointer_reply_t
 **/
typedef struct xcb_input_xi_get_client_pointer_reply_t {
    uint8_t               response_type;
    uint8_t               pad0;
    uint16_t              sequence;
    uint32_t              length;
    uint8_t               set;
    uint8_t               pad1;
    xcb_input_device_id_t deviceid;
    uint8_t               pad2[20];
} xcb_input_xi_get_client_pointer_reply_t;

typedef enum xcb_input_xi_event_mask_t {
    XCB_INPUT_XI_EVENT_MASK_DEVICE_CHANGED = 2,
    XCB_INPUT_XI_EVENT_MASK_KEY_PRESS = 4,
    XCB_INPUT_XI_EVENT_MASK_KEY_RELEASE = 8,
    XCB_INPUT_XI_EVENT_MASK_BUTTON_PRESS = 16,
    XCB_INPUT_XI_EVENT_MASK_BUTTON_RELEASE = 32,
    XCB_INPUT_XI_EVENT_MASK_MOTION = 64,
    XCB_INPUT_XI_EVENT_MASK_ENTER = 128,
    XCB_INPUT_XI_EVENT_MASK_LEAVE = 256,
    XCB_INPUT_XI_EVENT_MASK_FOCUS_IN = 512,
    XCB_INPUT_XI_EVENT_MASK_FOCUS_OUT = 1024,
    XCB_INPUT_XI_EVENT_MASK_HIERARCHY = 2048,
    XCB_INPUT_XI_EVENT_MASK_PROPERTY = 4096,
    XCB_INPUT_XI_EVENT_MASK_RAW_KEY_PRESS = 8192,
    XCB_INPUT_XI_EVENT_MASK_RAW_KEY_RELEASE = 16384,
    XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_PRESS = 32768,
    XCB_INPUT_XI_EVENT_MASK_RAW_BUTTON_RELEASE = 65536,
    XCB_INPUT_XI_EVENT_MASK_RAW_MOTION = 131072,
    XCB_INPUT_XI_EVENT_MASK_TOUCH_BEGIN = 262144,
    XCB_INPUT_XI_EVENT_MASK_TOUCH_UPDATE = 524288,
    XCB_INPUT_XI_EVENT_MASK_TOUCH_END = 1048576,
    XCB_INPUT_XI_EVENT_MASK_TOUCH_OWNERSHIP = 2097152,
    XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_BEGIN = 4194304,
    XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_UPDATE = 8388608,
    XCB_INPUT_XI_EVENT_MASK_RAW_TOUCH_END = 16777216,
    XCB_INPUT_XI_EVENT_MASK_BARRIER_HIT = 33554432,
    XCB_INPUT_XI_EVENT_MASK_BARRIER_LEAVE = 67108864
} xcb_input_xi_event_mask_t;

/**
 * @@brief xcb_input_event_mask_t
 **/
typedef struct xcb_input_event_mask_t {
    xcb_input_device_id_t deviceid;
    uint16_t              mask_len;
} xcb_input_event_mask_t;

/**
 * @@brief xcb_input_event_mask_iterator_t
 **/
typedef struct xcb_input_event_mask_iterator_t {
    xcb_input_event_mask_t *data;
    int                     rem;
    int                     index;
} xcb_input_event_mask_iterator_t;

/** Opcode for xcb_input_xi_select_events. */
#define XCB_INPUT_XI_SELECT_EVENTS 46

/**
 * @@brief xcb_input_xi_select_events_request_t
 **/
typedef struct xcb_input_xi_select_events_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint16_t     num_mask;
    uint8_t      pad0[2];
} xcb_input_xi_select_events_request_t;

/**
 * @@brief xcb_input_xi_query_version_cookie_t
 **/
typedef struct xcb_input_xi_query_version_cookie_t {
    unsigned int sequence;
} xcb_input_xi_query_version_cookie_t;

/** Opcode for xcb_input_xi_query_version. */
#define XCB_INPUT_XI_QUERY_VERSION 47

/**
 * @@brief xcb_input_xi_query_version_request_t
 **/
typedef struct xcb_input_xi_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t major_version;
    uint16_t minor_version;
} xcb_input_xi_query_version_request_t;

/**
 * @@brief xcb_input_xi_query_version_reply_t
 **/
typedef struct xcb_input_xi_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t major_version;
    uint16_t minor_version;
    uint8_t  pad1[20];
} xcb_input_xi_query_version_reply_t;

typedef enum xcb_input_device_class_type_t {
    XCB_INPUT_DEVICE_CLASS_TYPE_KEY = 0,
    XCB_INPUT_DEVICE_CLASS_TYPE_BUTTON = 1,
    XCB_INPUT_DEVICE_CLASS_TYPE_VALUATOR = 2,
    XCB_INPUT_DEVICE_CLASS_TYPE_SCROLL = 3,
    XCB_INPUT_DEVICE_CLASS_TYPE_TOUCH = 8
} xcb_input_device_class_type_t;

typedef enum xcb_input_device_type_t {
    XCB_INPUT_DEVICE_TYPE_MASTER_POINTER = 1,
    XCB_INPUT_DEVICE_TYPE_MASTER_KEYBOARD = 2,
    XCB_INPUT_DEVICE_TYPE_SLAVE_POINTER = 3,
    XCB_INPUT_DEVICE_TYPE_SLAVE_KEYBOARD = 4,
    XCB_INPUT_DEVICE_TYPE_FLOATING_SLAVE = 5
} xcb_input_device_type_t;

typedef enum xcb_input_scroll_flags_t {
    XCB_INPUT_SCROLL_FLAGS_NO_EMULATION = 1,
    XCB_INPUT_SCROLL_FLAGS_PREFERRED = 2
} xcb_input_scroll_flags_t;

typedef enum xcb_input_scroll_type_t {
    XCB_INPUT_SCROLL_TYPE_VERTICAL = 1,
    XCB_INPUT_SCROLL_TYPE_HORIZONTAL = 2
} xcb_input_scroll_type_t;

typedef enum xcb_input_touch_mode_t {
    XCB_INPUT_TOUCH_MODE_DIRECT = 1,
    XCB_INPUT_TOUCH_MODE_DEPENDENT = 2
} xcb_input_touch_mode_t;

/**
 * @@brief xcb_input_button_class_t
 **/
typedef struct xcb_input_button_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
    uint16_t              num_buttons;
} xcb_input_button_class_t;

/**
 * @@brief xcb_input_button_class_iterator_t
 **/
typedef struct xcb_input_button_class_iterator_t {
    xcb_input_button_class_t *data;
    int                       rem;
    int                       index;
} xcb_input_button_class_iterator_t;

/**
 * @@brief xcb_input_key_class_t
 **/
typedef struct xcb_input_key_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
    uint16_t              num_keys;
} xcb_input_key_class_t;

/**
 * @@brief xcb_input_key_class_iterator_t
 **/
typedef struct xcb_input_key_class_iterator_t {
    xcb_input_key_class_t *data;
    int                    rem;
    int                    index;
} xcb_input_key_class_iterator_t;

/**
 * @@brief xcb_input_scroll_class_t
 **/
typedef struct xcb_input_scroll_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
    uint16_t              number;
    uint16_t              scroll_type;
    uint8_t               pad0[2];
    uint32_t              flags;
    xcb_input_fp3232_t    increment;
} xcb_input_scroll_class_t;

/**
 * @@brief xcb_input_scroll_class_iterator_t
 **/
typedef struct xcb_input_scroll_class_iterator_t {
    xcb_input_scroll_class_t *data;
    int                       rem;
    int                       index;
} xcb_input_scroll_class_iterator_t;

/**
 * @@brief xcb_input_touch_class_t
 **/
typedef struct xcb_input_touch_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
    uint8_t               mode;
    uint8_t               num_touches;
} xcb_input_touch_class_t;

/**
 * @@brief xcb_input_touch_class_iterator_t
 **/
typedef struct xcb_input_touch_class_iterator_t {
    xcb_input_touch_class_t *data;
    int                      rem;
    int                      index;
} xcb_input_touch_class_iterator_t;

/**
 * @@brief xcb_input_valuator_class_t
 **/
typedef struct xcb_input_valuator_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
    uint16_t              number;
    xcb_atom_t            label;
    xcb_input_fp3232_t    min;
    xcb_input_fp3232_t    max;
    xcb_input_fp3232_t    value;
    uint32_t              resolution;
    uint8_t               mode;
    uint8_t               pad0[3];
} xcb_input_valuator_class_t;

/**
 * @@brief xcb_input_valuator_class_iterator_t
 **/
typedef struct xcb_input_valuator_class_iterator_t {
    xcb_input_valuator_class_t *data;
    int                         rem;
    int                         index;
} xcb_input_valuator_class_iterator_t;

/**
 * @@brief xcb_input_device_class_data_t
 **/
typedef struct xcb_input_device_class_data_t {
    struct {
        uint16_t           num_keys;
        uint32_t          *keys;
    } key;
    struct {
        uint16_t           num_buttons;
        uint32_t          *state;
        xcb_atom_t        *labels;
    } button;
    struct {
        uint16_t           number;
        xcb_atom_t         label;
        xcb_input_fp3232_t min;
        xcb_input_fp3232_t max;
        xcb_input_fp3232_t value;
        uint32_t           resolution;
        uint8_t            mode;
        uint8_t            pad0[3];
    } valuator;
    struct {
        uint16_t           number;
        uint16_t           scroll_type;
        uint8_t            pad1[2];
        uint32_t           flags;
        xcb_input_fp3232_t increment;
    } scroll;
    struct {
        uint8_t            mode;
        uint8_t            num_touches;
    } touch;
} xcb_input_device_class_data_t;

/**
 * @@brief xcb_input_device_class_t
 **/
typedef struct xcb_input_device_class_t {
    uint16_t              type;
    uint16_t              len;
    xcb_input_device_id_t sourceid;
} xcb_input_device_class_t;

void *
xcb_input_device_class_data (const xcb_input_device_class_t *R);

/**
 * @@brief xcb_input_device_class_iterator_t
 **/
typedef struct xcb_input_device_class_iterator_t {
    xcb_input_device_class_t *data;
    int                       rem;
    int                       index;
} xcb_input_device_class_iterator_t;

/**
 * @@brief xcb_input_xi_device_info_t
 **/
typedef struct xcb_input_xi_device_info_t {
    xcb_input_device_id_t deviceid;
    uint16_t              type;
    xcb_input_device_id_t attachment;
    uint16_t              num_classes;
    uint16_t              name_len;
    uint8_t               enabled;
    uint8_t               pad0;
} xcb_input_xi_device_info_t;

/**
 * @@brief xcb_input_xi_device_info_iterator_t
 **/
typedef struct xcb_input_xi_device_info_iterator_t {
    xcb_input_xi_device_info_t *data;
    int                         rem;
    int                         index;
} xcb_input_xi_device_info_iterator_t;

/**
 * @@brief xcb_input_xi_query_device_cookie_t
 **/
typedef struct xcb_input_xi_query_device_cookie_t {
    unsigned int sequence;
} xcb_input_xi_query_device_cookie_t;

/** Opcode for xcb_input_xi_query_device. */
#define XCB_INPUT_XI_QUERY_DEVICE 48

/**
 * @@brief xcb_input_xi_query_device_request_t
 **/
typedef struct xcb_input_xi_query_device_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_query_device_request_t;

/**
 * @@brief xcb_input_xi_query_device_reply_t
 **/
typedef struct xcb_input_xi_query_device_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_infos;
    uint8_t  pad1[22];
} xcb_input_xi_query_device_reply_t;

/** Opcode for xcb_input_xi_set_focus. */
#define XCB_INPUT_XI_SET_FOCUS 49

/**
 * @@brief xcb_input_xi_set_focus_request_t
 **/
typedef struct xcb_input_xi_set_focus_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_timestamp_t       time;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_set_focus_request_t;

/**
 * @@brief xcb_input_xi_get_focus_cookie_t
 **/
typedef struct xcb_input_xi_get_focus_cookie_t {
    unsigned int sequence;
} xcb_input_xi_get_focus_cookie_t;

/** Opcode for xcb_input_xi_get_focus. */
#define XCB_INPUT_XI_GET_FOCUS 50

/**
 * @@brief xcb_input_xi_get_focus_request_t
 **/
typedef struct xcb_input_xi_get_focus_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_get_focus_request_t;

/**
 * @@brief xcb_input_xi_get_focus_reply_t
 **/
typedef struct xcb_input_xi_get_focus_reply_t {
    uint8_t      response_type;
    uint8_t      pad0;
    uint16_t     sequence;
    uint32_t     length;
    xcb_window_t focus;
    uint8_t      pad1[20];
} xcb_input_xi_get_focus_reply_t;

typedef enum xcb_input_grab_owner_t {
    XCB_INPUT_GRAB_OWNER_NO_OWNER = 0,
    XCB_INPUT_GRAB_OWNER_OWNER = 1
} xcb_input_grab_owner_t;

/**
 * @@brief xcb_input_xi_grab_device_cookie_t
 **/
typedef struct xcb_input_xi_grab_device_cookie_t {
    unsigned int sequence;
} xcb_input_xi_grab_device_cookie_t;

/** Opcode for xcb_input_xi_grab_device. */
#define XCB_INPUT_XI_GRAB_DEVICE 51

/**
 * @@brief xcb_input_xi_grab_device_request_t
 **/
typedef struct xcb_input_xi_grab_device_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_timestamp_t       time;
    xcb_cursor_t          cursor;
    xcb_input_device_id_t deviceid;
    uint8_t               mode;
    uint8_t               paired_device_mode;
    uint8_t               owner_events;
    uint8_t               pad0;
    uint16_t              mask_len;
} xcb_input_xi_grab_device_request_t;

/**
 * @@brief xcb_input_xi_grab_device_reply_t
 **/
typedef struct xcb_input_xi_grab_device_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  status;
    uint8_t  pad1[23];
} xcb_input_xi_grab_device_reply_t;

/** Opcode for xcb_input_xi_ungrab_device. */
#define XCB_INPUT_XI_UNGRAB_DEVICE 52

/**
 * @@brief xcb_input_xi_ungrab_device_request_t
 **/
typedef struct xcb_input_xi_ungrab_device_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_timestamp_t       time;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_ungrab_device_request_t;

typedef enum xcb_input_event_mode_t {
    XCB_INPUT_EVENT_MODE_ASYNC_DEVICE = 0,
    XCB_INPUT_EVENT_MODE_SYNC_DEVICE = 1,
    XCB_INPUT_EVENT_MODE_REPLAY_DEVICE = 2,
    XCB_INPUT_EVENT_MODE_ASYNC_PAIRED_DEVICE = 3,
    XCB_INPUT_EVENT_MODE_ASYNC_PAIR = 4,
    XCB_INPUT_EVENT_MODE_SYNC_PAIR = 5,
    XCB_INPUT_EVENT_MODE_ACCEPT_TOUCH = 6,
    XCB_INPUT_EVENT_MODE_REJECT_TOUCH = 7
} xcb_input_event_mode_t;

/** Opcode for xcb_input_xi_allow_events. */
#define XCB_INPUT_XI_ALLOW_EVENTS 53

/**
 * @@brief xcb_input_xi_allow_events_request_t
 **/
typedef struct xcb_input_xi_allow_events_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_timestamp_t       time;
    xcb_input_device_id_t deviceid;
    uint8_t               event_mode;
    uint8_t               pad0;
    uint32_t              touchid;
    xcb_window_t          grab_window;
} xcb_input_xi_allow_events_request_t;

typedef enum xcb_input_grab_mode_22_t {
    XCB_INPUT_GRAB_MODE_22_SYNC = 0,
    XCB_INPUT_GRAB_MODE_22_ASYNC = 1,
    XCB_INPUT_GRAB_MODE_22_TOUCH = 2
} xcb_input_grab_mode_22_t;

typedef enum xcb_input_grab_type_t {
    XCB_INPUT_GRAB_TYPE_BUTTON = 0,
    XCB_INPUT_GRAB_TYPE_KEYCODE = 1,
    XCB_INPUT_GRAB_TYPE_ENTER = 2,
    XCB_INPUT_GRAB_TYPE_FOCUS_IN = 3,
    XCB_INPUT_GRAB_TYPE_TOUCH_BEGIN = 4
} xcb_input_grab_type_t;

typedef enum xcb_input_modifier_mask_t {
    XCB_INPUT_MODIFIER_MASK_ANY = 2147483648
} xcb_input_modifier_mask_t;

/**
 * @@brief xcb_input_grab_modifier_info_t
 **/
typedef struct xcb_input_grab_modifier_info_t {
    uint32_t modifiers;
    uint8_t  status;
    uint8_t  pad0[3];
} xcb_input_grab_modifier_info_t;

/**
 * @@brief xcb_input_grab_modifier_info_iterator_t
 **/
typedef struct xcb_input_grab_modifier_info_iterator_t {
    xcb_input_grab_modifier_info_t *data;
    int                             rem;
    int                             index;
} xcb_input_grab_modifier_info_iterator_t;

/**
 * @@brief xcb_input_xi_passive_grab_device_cookie_t
 **/
typedef struct xcb_input_xi_passive_grab_device_cookie_t {
    unsigned int sequence;
} xcb_input_xi_passive_grab_device_cookie_t;

/** Opcode for xcb_input_xi_passive_grab_device. */
#define XCB_INPUT_XI_PASSIVE_GRAB_DEVICE 54

/**
 * @@brief xcb_input_xi_passive_grab_device_request_t
 **/
typedef struct xcb_input_xi_passive_grab_device_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_timestamp_t       time;
    xcb_window_t          grab_window;
    xcb_cursor_t          cursor;
    uint32_t              detail;
    xcb_input_device_id_t deviceid;
    uint16_t              num_modifiers;
    uint16_t              mask_len;
    uint8_t               grab_type;
    uint8_t               grab_mode;
    uint8_t               paired_device_mode;
    uint8_t               owner_events;
    uint8_t               pad0[2];
} xcb_input_xi_passive_grab_device_request_t;

/**
 * @@brief xcb_input_xi_passive_grab_device_reply_t
 **/
typedef struct xcb_input_xi_passive_grab_device_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_modifiers;
    uint8_t  pad1[22];
} xcb_input_xi_passive_grab_device_reply_t;

/** Opcode for xcb_input_xi_passive_ungrab_device. */
#define XCB_INPUT_XI_PASSIVE_UNGRAB_DEVICE 55

/**
 * @@brief xcb_input_xi_passive_ungrab_device_request_t
 **/
typedef struct xcb_input_xi_passive_ungrab_device_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          grab_window;
    uint32_t              detail;
    xcb_input_device_id_t deviceid;
    uint16_t              num_modifiers;
    uint8_t               grab_type;
    uint8_t               pad0[3];
} xcb_input_xi_passive_ungrab_device_request_t;

/**
 * @@brief xcb_input_xi_list_properties_cookie_t
 **/
typedef struct xcb_input_xi_list_properties_cookie_t {
    unsigned int sequence;
} xcb_input_xi_list_properties_cookie_t;

/** Opcode for xcb_input_xi_list_properties. */
#define XCB_INPUT_XI_LIST_PROPERTIES 56

/**
 * @@brief xcb_input_xi_list_properties_request_t
 **/
typedef struct xcb_input_xi_list_properties_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
} xcb_input_xi_list_properties_request_t;

/**
 * @@brief xcb_input_xi_list_properties_reply_t
 **/
typedef struct xcb_input_xi_list_properties_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_properties;
    uint8_t  pad1[22];
} xcb_input_xi_list_properties_reply_t;

/**
 * @@brief xcb_input_xi_change_property_items_t
 **/
typedef struct xcb_input_xi_change_property_items_t {
    uint8_t  *data8;
    uint16_t *data16;
    uint32_t *data32;
} xcb_input_xi_change_property_items_t;

/** Opcode for xcb_input_xi_change_property. */
#define XCB_INPUT_XI_CHANGE_PROPERTY 57

/**
 * @@brief xcb_input_xi_change_property_request_t
 **/
typedef struct xcb_input_xi_change_property_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               mode;
    uint8_t               format;
    xcb_atom_t            property;
    xcb_atom_t            type;
    uint32_t              num_items;
} xcb_input_xi_change_property_request_t;

/** Opcode for xcb_input_xi_delete_property. */
#define XCB_INPUT_XI_DELETE_PROPERTY 58

/**
 * @@brief xcb_input_xi_delete_property_request_t
 **/
typedef struct xcb_input_xi_delete_property_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
    xcb_atom_t            property;
} xcb_input_xi_delete_property_request_t;

/**
 * @@brief xcb_input_xi_get_property_cookie_t
 **/
typedef struct xcb_input_xi_get_property_cookie_t {
    unsigned int sequence;
} xcb_input_xi_get_property_cookie_t;

/** Opcode for xcb_input_xi_get_property. */
#define XCB_INPUT_XI_GET_PROPERTY 59

/**
 * @@brief xcb_input_xi_get_property_request_t
 **/
typedef struct xcb_input_xi_get_property_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_input_device_id_t deviceid;
    uint8_t               _delete;
    uint8_t               pad0;
    xcb_atom_t            property;
    xcb_atom_t            type;
    uint32_t              offset;
    uint32_t              len;
} xcb_input_xi_get_property_request_t;

/**
 * @@brief xcb_input_xi_get_property_items_t
 **/
typedef struct xcb_input_xi_get_property_items_t {
    uint8_t  *data8;
    uint16_t *data16;
    uint32_t *data32;
} xcb_input_xi_get_property_items_t;

/**
 * @@brief xcb_input_xi_get_property_reply_t
 **/
typedef struct xcb_input_xi_get_property_reply_t {
    uint8_t    response_type;
    uint8_t    pad0;
    uint16_t   sequence;
    uint32_t   length;
    xcb_atom_t type;
    uint32_t   bytes_after;
    uint32_t   num_items;
    uint8_t    format;
    uint8_t    pad1[11];
} xcb_input_xi_get_property_reply_t;

/**
 * @@brief xcb_input_xi_get_selected_events_cookie_t
 **/
typedef struct xcb_input_xi_get_selected_events_cookie_t {
    unsigned int sequence;
} xcb_input_xi_get_selected_events_cookie_t;

/** Opcode for xcb_input_xi_get_selected_events. */
#define XCB_INPUT_XI_GET_SELECTED_EVENTS 60

/**
 * @@brief xcb_input_xi_get_selected_events_request_t
 **/
typedef struct xcb_input_xi_get_selected_events_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_input_xi_get_selected_events_request_t;

/**
 * @@brief xcb_input_xi_get_selected_events_reply_t
 **/
typedef struct xcb_input_xi_get_selected_events_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_masks;
    uint8_t  pad1[22];
} xcb_input_xi_get_selected_events_reply_t;

/**
 * @@brief xcb_input_barrier_release_pointer_info_t
 **/
typedef struct xcb_input_barrier_release_pointer_info_t {
    xcb_input_device_id_t deviceid;
    uint8_t               pad0[2];
    xcb_xfixes_barrier_t  barrier;
    uint32_t              eventid;
} xcb_input_barrier_release_pointer_info_t;

/**
 * @@brief xcb_input_barrier_release_pointer_info_iterator_t
 **/
typedef struct xcb_input_barrier_release_pointer_info_iterator_t {
    xcb_input_barrier_release_pointer_info_t *data;
    int                                       rem;
    int                                       index;
} xcb_input_barrier_release_pointer_info_iterator_t;

/** Opcode for xcb_input_xi_barrier_release_pointer. */
#define XCB_INPUT_XI_BARRIER_RELEASE_POINTER 61

/**
 * @@brief xcb_input_xi_barrier_release_pointer_request_t
 **/
typedef struct xcb_input_xi_barrier_release_pointer_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t num_barriers;
} xcb_input_xi_barrier_release_pointer_request_t;

/** Opcode for xcb_input_device_valuator. */
#define XCB_INPUT_DEVICE_VALUATOR 0

/**
 * @@brief xcb_input_device_valuator_event_t
 **/
typedef struct xcb_input_device_valuator_event_t {
    uint8_t  response_type;
    uint8_t  device_id;
    uint16_t sequence;
    uint16_t device_state;
    uint8_t  num_valuators;
    uint8_t  first_valuator;
    int32_t  valuators[6];
} xcb_input_device_valuator_event_t;

typedef enum xcb_input_more_events_mask_t {
    XCB_INPUT_MORE_EVENTS_MASK_MORE_EVENTS = 128
} xcb_input_more_events_mask_t;

/** Opcode for xcb_input_device_key_press. */
#define XCB_INPUT_DEVICE_KEY_PRESS 1

/**
 * @@brief xcb_input_device_key_press_event_t
 **/
typedef struct xcb_input_device_key_press_event_t {
    uint8_t         response_type;
    uint8_t         detail;
    uint16_t        sequence;
    xcb_timestamp_t time;
    xcb_window_t    root;
    xcb_window_t    event;
    xcb_window_t    child;
    int16_t         root_x;
    int16_t         root_y;
    int16_t         event_x;
    int16_t         event_y;
    uint16_t        state;
    uint8_t         same_screen;
    uint8_t         device_id;
} xcb_input_device_key_press_event_t;

/** Opcode for xcb_input_device_key_release. */
#define XCB_INPUT_DEVICE_KEY_RELEASE 2

typedef xcb_input_device_key_press_event_t xcb_input_device_key_release_event_t;

/** Opcode for xcb_input_device_button_press. */
#define XCB_INPUT_DEVICE_BUTTON_PRESS 3

typedef xcb_input_device_key_press_event_t xcb_input_device_button_press_event_t;

/** Opcode for xcb_input_device_button_release. */
#define XCB_INPUT_DEVICE_BUTTON_RELEASE 4

typedef xcb_input_device_key_press_event_t xcb_input_device_button_release_event_t;

/** Opcode for xcb_input_device_motion_notify. */
#define XCB_INPUT_DEVICE_MOTION_NOTIFY 5

typedef xcb_input_device_key_press_event_t xcb_input_device_motion_notify_event_t;

/** Opcode for xcb_input_device_focus_in. */
#define XCB_INPUT_DEVICE_FOCUS_IN 6

/**
 * @@brief xcb_input_device_focus_in_event_t
 **/
typedef struct xcb_input_device_focus_in_event_t {
    uint8_t         response_type;
    uint8_t         detail;
    uint16_t        sequence;
    xcb_timestamp_t time;
    xcb_window_t    window;
    uint8_t         mode;
    uint8_t         device_id;
    uint8_t         pad0[18];
} xcb_input_device_focus_in_event_t;

/** Opcode for xcb_input_device_focus_out. */
#define XCB_INPUT_DEVICE_FOCUS_OUT 7

typedef xcb_input_device_focus_in_event_t xcb_input_device_focus_out_event_t;

/** Opcode for xcb_input_proximity_in. */
#define XCB_INPUT_PROXIMITY_IN 8

typedef xcb_input_device_key_press_event_t xcb_input_proximity_in_event_t;

/** Opcode for xcb_input_proximity_out. */
#define XCB_INPUT_PROXIMITY_OUT 9

typedef xcb_input_device_key_press_event_t xcb_input_proximity_out_event_t;

typedef enum xcb_input_classes_reported_mask_t {
    XCB_INPUT_CLASSES_REPORTED_MASK_OUT_OF_PROXIMITY = 128,
    XCB_INPUT_CLASSES_REPORTED_MASK_DEVICE_MODE_ABSOLUTE = 64,
    XCB_INPUT_CLASSES_REPORTED_MASK_REPORTING_VALUATORS = 4,
    XCB_INPUT_CLASSES_REPORTED_MASK_REPORTING_BUTTONS = 2,
    XCB_INPUT_CLASSES_REPORTED_MASK_REPORTING_KEYS = 1
} xcb_input_classes_reported_mask_t;

/** Opcode for xcb_input_device_state_notify. */
#define XCB_INPUT_DEVICE_STATE_NOTIFY 10

/**
 * @@brief xcb_input_device_state_notify_event_t
 **/
typedef struct xcb_input_device_state_notify_event_t {
    uint8_t         response_type;
    uint8_t         device_id;
    uint16_t        sequence;
    xcb_timestamp_t time;
    uint8_t         num_keys;
    uint8_t         num_buttons;
    uint8_t         num_valuators;
    uint8_t         classes_reported;
    uint8_t         buttons[4];
    uint8_t         keys[4];
    uint32_t        valuators[3];
} xcb_input_device_state_notify_event_t;

/** Opcode for xcb_input_device_mapping_notify. */
#define XCB_INPUT_DEVICE_MAPPING_NOTIFY 11

/**
 * @@brief xcb_input_device_mapping_notify_event_t
 **/
typedef struct xcb_input_device_mapping_notify_event_t {
    uint8_t              response_type;
    uint8_t              device_id;
    uint16_t             sequence;
    uint8_t              request;
    xcb_input_key_code_t first_keycode;
    uint8_t              count;
    uint8_t              pad0;
    xcb_timestamp_t      time;
    uint8_t              pad1[20];
} xcb_input_device_mapping_notify_event_t;

typedef enum xcb_input_change_device_t {
    XCB_INPUT_CHANGE_DEVICE_NEW_POINTER = 0,
    XCB_INPUT_CHANGE_DEVICE_NEW_KEYBOARD = 1
} xcb_input_change_device_t;

/** Opcode for xcb_input_change_device_notify. */
#define XCB_INPUT_CHANGE_DEVICE_NOTIFY 12

/**
 * @@brief xcb_input_change_device_notify_event_t
 **/
typedef struct xcb_input_change_device_notify_event_t {
    uint8_t         response_type;
    uint8_t         device_id;
    uint16_t        sequence;
    xcb_timestamp_t time;
    uint8_t         request;
    uint8_t         pad0[23];
} xcb_input_change_device_notify_event_t;

/** Opcode for xcb_input_device_key_state_notify. */
#define XCB_INPUT_DEVICE_KEY_STATE_NOTIFY 13

/**
 * @@brief xcb_input_device_key_state_notify_event_t
 **/
typedef struct xcb_input_device_key_state_notify_event_t {
    uint8_t  response_type;
    uint8_t  device_id;
    uint16_t sequence;
    uint8_t  keys[28];
} xcb_input_device_key_state_notify_event_t;

/** Opcode for xcb_input_device_button_state_notify. */
#define XCB_INPUT_DEVICE_BUTTON_STATE_NOTIFY 14

/**
 * @@brief xcb_input_device_button_state_notify_event_t
 **/
typedef struct xcb_input_device_button_state_notify_event_t {
    uint8_t  response_type;
    uint8_t  device_id;
    uint16_t sequence;
    uint8_t  buttons[28];
} xcb_input_device_button_state_notify_event_t;

typedef enum xcb_input_device_change_t {
    XCB_INPUT_DEVICE_CHANGE_ADDED = 0,
    XCB_INPUT_DEVICE_CHANGE_REMOVED = 1,
    XCB_INPUT_DEVICE_CHANGE_ENABLED = 2,
    XCB_INPUT_DEVICE_CHANGE_DISABLED = 3,
    XCB_INPUT_DEVICE_CHANGE_UNRECOVERABLE = 4,
    XCB_INPUT_DEVICE_CHANGE_CONTROL_CHANGED = 5
} xcb_input_device_change_t;

/** Opcode for xcb_input_device_presence_notify. */
#define XCB_INPUT_DEVICE_PRESENCE_NOTIFY 15

/**
 * @@brief xcb_input_device_presence_notify_event_t
 **/
typedef struct xcb_input_device_presence_notify_event_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    xcb_timestamp_t time;
    uint8_t         devchange;
    uint8_t         device_id;
    uint16_t        control;
    uint8_t         pad1[20];
} xcb_input_device_presence_notify_event_t;

/** Opcode for xcb_input_device_property_notify. */
#define XCB_INPUT_DEVICE_PROPERTY_NOTIFY 16

/**
 * @@brief xcb_input_device_property_notify_event_t
 **/
typedef struct xcb_input_device_property_notify_event_t {
    uint8_t         response_type;
    uint8_t         state;
    uint16_t        sequence;
    xcb_timestamp_t time;
    xcb_atom_t      property;
    uint8_t         pad0[19];
    uint8_t         device_id;
} xcb_input_device_property_notify_event_t;

typedef enum xcb_input_change_reason_t {
    XCB_INPUT_CHANGE_REASON_SLAVE_SWITCH = 1,
    XCB_INPUT_CHANGE_REASON_DEVICE_CHANGE = 2
} xcb_input_change_reason_t;

/** Opcode for xcb_input_device_changed. */
#define XCB_INPUT_DEVICE_CHANGED 1

/**
 * @@brief xcb_input_device_changed_event_t
 **/
typedef struct xcb_input_device_changed_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint16_t              num_classes;
    xcb_input_device_id_t sourceid;
    uint8_t               reason;
    uint8_t               pad0[11];
    uint32_t              full_sequence;
} xcb_input_device_changed_event_t;

typedef enum xcb_input_key_event_flags_t {
    XCB_INPUT_KEY_EVENT_FLAGS_KEY_REPEAT = 65536
} xcb_input_key_event_flags_t;

/** Opcode for xcb_input_key_press. */
#define XCB_INPUT_KEY_PRESS 2

/**
 * @@brief xcb_input_key_press_event_t
 **/
typedef struct xcb_input_key_press_event_t {
    uint8_t                   response_type;
    uint8_t                   extension;
    uint16_t                  sequence;
    uint32_t                  length;
    uint16_t                  event_type;
    xcb_input_device_id_t     deviceid;
    xcb_timestamp_t           time;
    uint32_t                  detail;
    xcb_window_t              root;
    xcb_window_t              event;
    xcb_window_t              child;
    uint32_t                  full_sequence;
    xcb_input_fp1616_t        root_x;
    xcb_input_fp1616_t        root_y;
    xcb_input_fp1616_t        event_x;
    xcb_input_fp1616_t        event_y;
    uint16_t                  buttons_len;
    uint16_t                  valuators_len;
    xcb_input_device_id_t     sourceid;
    uint8_t                   pad0[2];
    uint32_t                  flags;
    xcb_input_modifier_info_t mods;
    xcb_input_group_info_t    group;
} xcb_input_key_press_event_t;

/** Opcode for xcb_input_key_release. */
#define XCB_INPUT_KEY_RELEASE 3

typedef xcb_input_key_press_event_t xcb_input_key_release_event_t;

typedef enum xcb_input_pointer_event_flags_t {
    XCB_INPUT_POINTER_EVENT_FLAGS_POINTER_EMULATED = 65536
} xcb_input_pointer_event_flags_t;

/** Opcode for xcb_input_button_press. */
#define XCB_INPUT_BUTTON_PRESS 4

/**
 * @@brief xcb_input_button_press_event_t
 **/
typedef struct xcb_input_button_press_event_t {
    uint8_t                   response_type;
    uint8_t                   extension;
    uint16_t                  sequence;
    uint32_t                  length;
    uint16_t                  event_type;
    xcb_input_device_id_t     deviceid;
    xcb_timestamp_t           time;
    uint32_t                  detail;
    xcb_window_t              root;
    xcb_window_t              event;
    xcb_window_t              child;
    uint32_t                  full_sequence;
    xcb_input_fp1616_t        root_x;
    xcb_input_fp1616_t        root_y;
    xcb_input_fp1616_t        event_x;
    xcb_input_fp1616_t        event_y;
    uint16_t                  buttons_len;
    uint16_t                  valuators_len;
    xcb_input_device_id_t     sourceid;
    uint8_t                   pad0[2];
    uint32_t                  flags;
    xcb_input_modifier_info_t mods;
    xcb_input_group_info_t    group;
} xcb_input_button_press_event_t;

/** Opcode for xcb_input_button_release. */
#define XCB_INPUT_BUTTON_RELEASE 5

typedef xcb_input_button_press_event_t xcb_input_button_release_event_t;

/** Opcode for xcb_input_motion. */
#define XCB_INPUT_MOTION 6

typedef xcb_input_button_press_event_t xcb_input_motion_event_t;

typedef enum xcb_input_notify_mode_t {
    XCB_INPUT_NOTIFY_MODE_NORMAL = 0,
    XCB_INPUT_NOTIFY_MODE_GRAB = 1,
    XCB_INPUT_NOTIFY_MODE_UNGRAB = 2,
    XCB_INPUT_NOTIFY_MODE_WHILE_GRABBED = 3,
    XCB_INPUT_NOTIFY_MODE_PASSIVE_GRAB = 4,
    XCB_INPUT_NOTIFY_MODE_PASSIVE_UNGRAB = 5
} xcb_input_notify_mode_t;

typedef enum xcb_input_notify_detail_t {
    XCB_INPUT_NOTIFY_DETAIL_ANCESTOR = 0,
    XCB_INPUT_NOTIFY_DETAIL_VIRTUAL = 1,
    XCB_INPUT_NOTIFY_DETAIL_INFERIOR = 2,
    XCB_INPUT_NOTIFY_DETAIL_NONLINEAR = 3,
    XCB_INPUT_NOTIFY_DETAIL_NONLINEAR_VIRTUAL = 4,
    XCB_INPUT_NOTIFY_DETAIL_POINTER = 5,
    XCB_INPUT_NOTIFY_DETAIL_POINTER_ROOT = 6,
    XCB_INPUT_NOTIFY_DETAIL_NONE = 7
} xcb_input_notify_detail_t;

/** Opcode for xcb_input_enter. */
#define XCB_INPUT_ENTER 7

/**
 * @@brief xcb_input_enter_event_t
 **/
typedef struct xcb_input_enter_event_t {
    uint8_t                   response_type;
    uint8_t                   extension;
    uint16_t                  sequence;
    uint32_t                  length;
    uint16_t                  event_type;
    xcb_input_device_id_t     deviceid;
    xcb_timestamp_t           time;
    xcb_input_device_id_t     sourceid;
    uint8_t                   mode;
    uint8_t                   detail;
    xcb_window_t              root;
    xcb_window_t              event;
    xcb_window_t              child;
    uint32_t                  full_sequence;
    xcb_input_fp1616_t        root_x;
    xcb_input_fp1616_t        root_y;
    xcb_input_fp1616_t        event_x;
    xcb_input_fp1616_t        event_y;
    uint8_t                   same_screen;
    uint8_t                   focus;
    uint16_t                  buttons_len;
    xcb_input_modifier_info_t mods;
    xcb_input_group_info_t    group;
} xcb_input_enter_event_t;

/** Opcode for xcb_input_leave. */
#define XCB_INPUT_LEAVE 8

typedef xcb_input_enter_event_t xcb_input_leave_event_t;

/** Opcode for xcb_input_focus_in. */
#define XCB_INPUT_FOCUS_IN 9

typedef xcb_input_enter_event_t xcb_input_focus_in_event_t;

/** Opcode for xcb_input_focus_out. */
#define XCB_INPUT_FOCUS_OUT 10

typedef xcb_input_enter_event_t xcb_input_focus_out_event_t;

typedef enum xcb_input_hierarchy_mask_t {
    XCB_INPUT_HIERARCHY_MASK_MASTER_ADDED = 1,
    XCB_INPUT_HIERARCHY_MASK_MASTER_REMOVED = 2,
    XCB_INPUT_HIERARCHY_MASK_SLAVE_ADDED = 4,
    XCB_INPUT_HIERARCHY_MASK_SLAVE_REMOVED = 8,
    XCB_INPUT_HIERARCHY_MASK_SLAVE_ATTACHED = 16,
    XCB_INPUT_HIERARCHY_MASK_SLAVE_DETACHED = 32,
    XCB_INPUT_HIERARCHY_MASK_DEVICE_ENABLED = 64,
    XCB_INPUT_HIERARCHY_MASK_DEVICE_DISABLED = 128
} xcb_input_hierarchy_mask_t;

/**
 * @@brief xcb_input_hierarchy_info_t
 **/
typedef struct xcb_input_hierarchy_info_t {
    xcb_input_device_id_t deviceid;
    xcb_input_device_id_t attachment;
    uint8_t               type;
    uint8_t               enabled;
    uint8_t               pad0[2];
    uint32_t              flags;
} xcb_input_hierarchy_info_t;

/**
 * @@brief xcb_input_hierarchy_info_iterator_t
 **/
typedef struct xcb_input_hierarchy_info_iterator_t {
    xcb_input_hierarchy_info_t *data;
    int                         rem;
    int                         index;
} xcb_input_hierarchy_info_iterator_t;

/** Opcode for xcb_input_hierarchy. */
#define XCB_INPUT_HIERARCHY 11

/**
 * @@brief xcb_input_hierarchy_event_t
 **/
typedef struct xcb_input_hierarchy_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              flags;
    uint16_t              num_infos;
    uint8_t               pad0[10];
    uint32_t              full_sequence;
} xcb_input_hierarchy_event_t;

typedef enum xcb_input_property_flag_t {
    XCB_INPUT_PROPERTY_FLAG_DELETED = 0,
    XCB_INPUT_PROPERTY_FLAG_CREATED = 1,
    XCB_INPUT_PROPERTY_FLAG_MODIFIED = 2
} xcb_input_property_flag_t;

/** Opcode for xcb_input_property. */
#define XCB_INPUT_PROPERTY 12

/**
 * @@brief xcb_input_property_event_t
 **/
typedef struct xcb_input_property_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    xcb_atom_t            property;
    uint8_t               what;
    uint8_t               pad0[11];
    uint32_t              full_sequence;
} xcb_input_property_event_t;

/** Opcode for xcb_input_raw_key_press. */
#define XCB_INPUT_RAW_KEY_PRESS 13

/**
 * @@brief xcb_input_raw_key_press_event_t
 **/
typedef struct xcb_input_raw_key_press_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              detail;
    xcb_input_device_id_t sourceid;
    uint16_t              valuators_len;
    uint32_t              flags;
    uint8_t               pad0[4];
    uint32_t              full_sequence;
} xcb_input_raw_key_press_event_t;

/** Opcode for xcb_input_raw_key_release. */
#define XCB_INPUT_RAW_KEY_RELEASE 14

typedef xcb_input_raw_key_press_event_t xcb_input_raw_key_release_event_t;

/** Opcode for xcb_input_raw_button_press. */
#define XCB_INPUT_RAW_BUTTON_PRESS 15

/**
 * @@brief xcb_input_raw_button_press_event_t
 **/
typedef struct xcb_input_raw_button_press_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              detail;
    xcb_input_device_id_t sourceid;
    uint16_t              valuators_len;
    uint32_t              flags;
    uint8_t               pad0[4];
    uint32_t              full_sequence;
} xcb_input_raw_button_press_event_t;

/** Opcode for xcb_input_raw_button_release. */
#define XCB_INPUT_RAW_BUTTON_RELEASE 16

typedef xcb_input_raw_button_press_event_t xcb_input_raw_button_release_event_t;

/** Opcode for xcb_input_raw_motion. */
#define XCB_INPUT_RAW_MOTION 17

typedef xcb_input_raw_button_press_event_t xcb_input_raw_motion_event_t;

typedef enum xcb_input_touch_event_flags_t {
    XCB_INPUT_TOUCH_EVENT_FLAGS_TOUCH_PENDING_END = 65536,
    XCB_INPUT_TOUCH_EVENT_FLAGS_TOUCH_EMULATING_POINTER = 131072
} xcb_input_touch_event_flags_t;

/** Opcode for xcb_input_touch_begin. */
#define XCB_INPUT_TOUCH_BEGIN 18

/**
 * @@brief xcb_input_touch_begin_event_t
 **/
typedef struct xcb_input_touch_begin_event_t {
    uint8_t                   response_type;
    uint8_t                   extension;
    uint16_t                  sequence;
    uint32_t                  length;
    uint16_t                  event_type;
    xcb_input_device_id_t     deviceid;
    xcb_timestamp_t           time;
    uint32_t                  detail;
    xcb_window_t              root;
    xcb_window_t              event;
    xcb_window_t              child;
    uint32_t                  full_sequence;
    xcb_input_fp1616_t        root_x;
    xcb_input_fp1616_t        root_y;
    xcb_input_fp1616_t        event_x;
    xcb_input_fp1616_t        event_y;
    uint16_t                  buttons_len;
    uint16_t                  valuators_len;
    xcb_input_device_id_t     sourceid;
    uint8_t                   pad0[2];
    uint32_t                  flags;
    xcb_input_modifier_info_t mods;
    xcb_input_group_info_t    group;
} xcb_input_touch_begin_event_t;

/** Opcode for xcb_input_touch_update. */
#define XCB_INPUT_TOUCH_UPDATE 19

typedef xcb_input_touch_begin_event_t xcb_input_touch_update_event_t;

/** Opcode for xcb_input_touch_end. */
#define XCB_INPUT_TOUCH_END 20

typedef xcb_input_touch_begin_event_t xcb_input_touch_end_event_t;

typedef enum xcb_input_touch_ownership_flags_t {
    XCB_INPUT_TOUCH_OWNERSHIP_FLAGS_NONE = 0
} xcb_input_touch_ownership_flags_t;

/** Opcode for xcb_input_touch_ownership. */
#define XCB_INPUT_TOUCH_OWNERSHIP 21

/**
 * @@brief xcb_input_touch_ownership_event_t
 **/
typedef struct xcb_input_touch_ownership_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              touchid;
    xcb_window_t          root;
    xcb_window_t          event;
    xcb_window_t          child;
    uint32_t              full_sequence;
    xcb_input_device_id_t sourceid;
    uint8_t               pad0[2];
    uint32_t              flags;
    uint8_t               pad1[8];
} xcb_input_touch_ownership_event_t;

/** Opcode for xcb_input_raw_touch_begin. */
#define XCB_INPUT_RAW_TOUCH_BEGIN 22

/**
 * @@brief xcb_input_raw_touch_begin_event_t
 **/
typedef struct xcb_input_raw_touch_begin_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              detail;
    xcb_input_device_id_t sourceid;
    uint16_t              valuators_len;
    uint32_t              flags;
    uint8_t               pad0[4];
    uint32_t              full_sequence;
} xcb_input_raw_touch_begin_event_t;

/** Opcode for xcb_input_raw_touch_update. */
#define XCB_INPUT_RAW_TOUCH_UPDATE 23

typedef xcb_input_raw_touch_begin_event_t xcb_input_raw_touch_update_event_t;

/** Opcode for xcb_input_raw_touch_end. */
#define XCB_INPUT_RAW_TOUCH_END 24

typedef xcb_input_raw_touch_begin_event_t xcb_input_raw_touch_end_event_t;

typedef enum xcb_input_barrier_flags_t {
    XCB_INPUT_BARRIER_FLAGS_POINTER_RELEASED = 1,
    XCB_INPUT_BARRIER_FLAGS_DEVICE_IS_GRABBED = 2
} xcb_input_barrier_flags_t;

/** Opcode for xcb_input_barrier_hit. */
#define XCB_INPUT_BARRIER_HIT 25

/**
 * @@brief xcb_input_barrier_hit_event_t
 **/
typedef struct xcb_input_barrier_hit_event_t {
    uint8_t               response_type;
    uint8_t               extension;
    uint16_t              sequence;
    uint32_t              length;
    uint16_t              event_type;
    xcb_input_device_id_t deviceid;
    xcb_timestamp_t       time;
    uint32_t              eventid;
    xcb_window_t          root;
    xcb_window_t          event;
    xcb_xfixes_barrier_t  barrier;
    uint32_t              full_sequence;
    uint32_t              dtime;
    uint32_t              flags;
    xcb_input_device_id_t sourceid;
    uint8_t               pad0[2];
    xcb_input_fp1616_t    root_x;
    xcb_input_fp1616_t    root_y;
    xcb_input_fp3232_t    dx;
    xcb_input_fp3232_t    dy;
} xcb_input_barrier_hit_event_t;

/** Opcode for xcb_input_barrier_leave. */
#define XCB_INPUT_BARRIER_LEAVE 26

typedef xcb_input_barrier_hit_event_t xcb_input_barrier_leave_event_t;

/** Opcode for xcb_input_device. */
#define XCB_INPUT_DEVICE 0

/**
 * @@brief xcb_input_device_error_t
 **/
typedef struct xcb_input_device_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_input_device_error_t;

/** Opcode for xcb_input_event. */
#define XCB_INPUT_EVENT 1

/**
 * @@brief xcb_input_event_error_t
 **/
typedef struct xcb_input_event_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_input_event_error_t;

/** Opcode for xcb_input_mode. */
#define XCB_INPUT_MODE 2

/**
 * @@brief xcb_input_mode_error_t
 **/
typedef struct xcb_input_mode_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_input_mode_error_t;

/** Opcode for xcb_input_device_busy. */
#define XCB_INPUT_DEVICE_BUSY 3

/**
 * @@brief xcb_input_device_busy_error_t
 **/
typedef struct xcb_input_device_busy_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_input_device_busy_error_t;

/** Opcode for xcb_input_class. */
#define XCB_INPUT_CLASS 4

/**
 * @@brief xcb_input_class_error_t
 **/
typedef struct xcb_input_class_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_input_class_error_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_event_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_event_class_t)
 */
void
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_event_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_event_class_end (xcb_input_event_class_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_code_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_code_t)
 */
void
xcb_input_key_code_next (xcb_input_key_code_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_code_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_key_code_end (xcb_input_key_code_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_id_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_id_t)
 */
void
xcb_input_device_id_next (xcb_input_device_id_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_id_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_id_end (xcb_input_device_id_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_fp1616_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_fp1616_t)
 */
void
xcb_input_fp1616_next (xcb_input_fp1616_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_fp1616_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_fp1616_end (xcb_input_fp1616_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_fp3232_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_fp3232_t)
 */
void
xcb_input_fp3232_next (xcb_input_fp3232_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_fp3232_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_fp3232_end (xcb_input_fp3232_iterator_t i);

int
xcb_input_get_extension_version_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version (xcb_connection_t *c,
                                 uint16_t          name_len,
                                 const char       *name);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version_unchecked (xcb_connection_t *c,
                                           uint16_t          name_len,
                                           const char       *name);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_extension_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_extension_version_reply_t *
xcb_input_get_extension_version_reply (xcb_connection_t                          *c,
                                       xcb_input_get_extension_version_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_info_t)
 */
void
xcb_input_device_info_next (xcb_input_device_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_info_end (xcb_input_device_info_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_info_t)
 */
void
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_key_info_end (xcb_input_key_info_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_button_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_button_info_t)
 */
void
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_button_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_button_info_end (xcb_input_button_info_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_axis_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_axis_info_t)
 */
void
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_axis_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_axis_info_end (xcb_input_axis_info_iterator_t i);

int
xcb_input_valuator_info_sizeof (const void  *_buffer);

xcb_input_axis_info_t *
xcb_input_valuator_info_axes (const xcb_input_valuator_info_t *R);

int
xcb_input_valuator_info_axes_length (const xcb_input_valuator_info_t *R);

xcb_input_axis_info_iterator_t
xcb_input_valuator_info_axes_iterator (const xcb_input_valuator_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_valuator_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_valuator_info_t)
 */
void
xcb_input_valuator_info_next (xcb_input_valuator_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_valuator_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_valuator_info_end (xcb_input_valuator_info_iterator_t i);

xcb_input_axis_info_t *
xcb_input_input_info_info_valuator_axes (const xcb_input_input_info_info_t *S);

int
xcb_input_input_info_info_valuator_axes_length (const xcb_input_input_info_t *R,
                                                const xcb_input_input_info_info_t *S);

xcb_input_axis_info_iterator_t
xcb_input_input_info_info_valuator_axes_iterator (const xcb_input_input_info_t *R,
                                                  const xcb_input_input_info_info_t *S);

int
xcb_input_input_info_info_serialize (void                              **_buffer,
                                     uint8_t                             class_id,
                                     const xcb_input_input_info_info_t  *_aux);

int
xcb_input_input_info_info_unpack (const void                   *_buffer,
                                  uint8_t                       class_id,
                                  xcb_input_input_info_info_t  *_aux);

int
xcb_input_input_info_info_sizeof (const void  *_buffer,
                                  uint8_t      class_id);

int
xcb_input_input_info_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_input_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_input_info_t)
 */
void
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_input_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_input_info_end (xcb_input_input_info_iterator_t i);

int
xcb_input_device_name_sizeof (const void  *_buffer);

char *
xcb_input_device_name_string (const xcb_input_device_name_t *R);

int
xcb_input_device_name_string_length (const xcb_input_device_name_t *R);

xcb_generic_iterator_t
xcb_input_device_name_string_end (const xcb_input_device_name_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_name_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_name_t)
 */
void
xcb_input_device_name_next (xcb_input_device_name_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_name_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_name_end (xcb_input_device_name_iterator_t i);

int
xcb_input_list_input_devices_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices_unchecked (xcb_connection_t *c);

xcb_input_device_info_t *
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R);

int
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R);

xcb_input_device_info_iterator_t
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R);

int
xcb_input_list_input_devices_infos_length (const xcb_input_list_input_devices_reply_t *R);

xcb_input_input_info_iterator_t
xcb_input_list_input_devices_infos_iterator (const xcb_input_list_input_devices_reply_t *R);

int
xcb_input_list_input_devices_names_length (const xcb_input_list_input_devices_reply_t *R);

xcb_str_iterator_t
xcb_input_list_input_devices_names_iterator (const xcb_input_list_input_devices_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_list_input_devices_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_list_input_devices_reply_t *
xcb_input_list_input_devices_reply (xcb_connection_t                       *c,
                                    xcb_input_list_input_devices_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_input_class_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_input_class_info_t)
 */
void
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_input_class_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i);

int
xcb_input_open_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_open_device_cookie_t
xcb_input_open_device (xcb_connection_t *c,
                       uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_open_device_cookie_t
xcb_input_open_device_unchecked (xcb_connection_t *c,
                                 uint8_t           device_id);

xcb_input_input_class_info_t *
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R);

int
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R);

xcb_input_input_class_info_iterator_t
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_open_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_open_device_reply_t *
xcb_input_open_device_reply (xcb_connection_t                *c,
                             xcb_input_open_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_close_device_checked (xcb_connection_t *c,
                                uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_close_device (xcb_connection_t *c,
                        uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode (xcb_connection_t *c,
                           uint8_t           device_id,
                           uint8_t           mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode_unchecked (xcb_connection_t *c,
                                     uint8_t           device_id,
                                     uint8_t           mode);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_mode_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_set_device_mode_reply_t *
xcb_input_set_device_mode_reply (xcb_connection_t                    *c,
                                 xcb_input_set_device_mode_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_input_select_extension_event_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_select_extension_event_checked (xcb_connection_t              *c,
                                          xcb_window_t                   window,
                                          uint16_t                       num_classes,
                                          const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_select_extension_event (xcb_connection_t              *c,
                                  xcb_window_t                   window,
                                  uint16_t                       num_classes,
                                  const xcb_input_event_class_t *classes);

xcb_input_event_class_t *
xcb_input_select_extension_event_classes (const xcb_input_select_extension_event_request_t *R);

int
xcb_input_select_extension_event_classes_length (const xcb_input_select_extension_event_request_t *R);

xcb_generic_iterator_t
xcb_input_select_extension_event_classes_end (const xcb_input_select_extension_event_request_t *R);

int
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events (xcb_connection_t *c,
                                         xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c,
                                                   xcb_window_t      window);

xcb_input_event_class_t *
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R);

int
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R);

xcb_input_event_class_t *
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R);

int
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_selected_extension_events_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_selected_extension_events_reply_t *
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c,
                                               xcb_input_get_selected_extension_events_cookie_t   cookie  /**< */,
                                               xcb_generic_error_t                              **e);

int
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c,
                                                     xcb_window_t                   window,
                                                     uint16_t                       num_classes,
                                                     uint8_t                        mode,
                                                     const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c,
                                             xcb_window_t                   window,
                                             uint16_t                       num_classes,
                                             uint8_t                        mode,
                                             const xcb_input_event_class_t *classes);

xcb_input_event_class_t *
xcb_input_change_device_dont_propagate_list_classes (const xcb_input_change_device_dont_propagate_list_request_t *R);

int
xcb_input_change_device_dont_propagate_list_classes_length (const xcb_input_change_device_dont_propagate_list_request_t *R);

xcb_generic_iterator_t
xcb_input_change_device_dont_propagate_list_classes_end (const xcb_input_change_device_dont_propagate_list_request_t *R);

int
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c,
                                          xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c,
                                                    xcb_window_t      window);

xcb_input_event_class_t *
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R);

int
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_dont_propagate_list_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_dont_propagate_list_reply_t *
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c,
                                                xcb_input_get_device_dont_propagate_list_cookie_t   cookie  /**< */,
                                                xcb_generic_error_t                               **e);

int
xcb_input_device_time_coord_sizeof (const void  *_buffer,
                                    uint8_t      num_axes);

int32_t *
xcb_input_device_time_coord_axisvalues (const xcb_input_device_time_coord_t *R);

int
xcb_input_device_time_coord_axisvalues_length (const xcb_input_device_time_coord_t *R,
                                               uint8_t num_axes);

xcb_generic_iterator_t
xcb_input_device_time_coord_axisvalues_end (const xcb_input_device_time_coord_t *R,
                                            uint8_t num_axes);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_time_coord_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_time_coord_t)
 */
void
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_time_coord_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i);

int
xcb_input_get_device_motion_events_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events (xcb_connection_t *c,
                                    xcb_timestamp_t   start,
                                    xcb_timestamp_t   stop,
                                    uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c,
                                              xcb_timestamp_t   start,
                                              xcb_timestamp_t   stop,
                                              uint8_t           device_id);

int
xcb_input_get_device_motion_events_events_length (const xcb_input_get_device_motion_events_reply_t *R);

xcb_input_device_time_coord_iterator_t
xcb_input_get_device_motion_events_events_iterator (const xcb_input_get_device_motion_events_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_motion_events_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_motion_events_reply_t *
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c,
                                          xcb_input_get_device_motion_events_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device (xcb_connection_t *c,
                                  uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c,
                                            uint8_t           device_id);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_change_keyboard_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_change_keyboard_device_reply_t *
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c,
                                        xcb_input_change_keyboard_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device (xcb_connection_t *c,
                                 uint8_t           x_axis,
                                 uint8_t           y_axis,
                                 uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c,
                                           uint8_t           x_axis,
                                           uint8_t           y_axis,
                                           uint8_t           device_id);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_change_pointer_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_change_pointer_device_reply_t *
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c,
                                       xcb_input_change_pointer_device_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_input_grab_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_grab_device_cookie_t
xcb_input_grab_device (xcb_connection_t              *c,
                       xcb_window_t                   grab_window,
                       xcb_timestamp_t                time,
                       uint16_t                       num_classes,
                       uint8_t                        this_device_mode,
                       uint8_t                        other_device_mode,
                       uint8_t                        owner_events,
                       uint8_t                        device_id,
                       const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_grab_device_cookie_t
xcb_input_grab_device_unchecked (xcb_connection_t              *c,
                                 xcb_window_t                   grab_window,
                                 xcb_timestamp_t                time,
                                 uint16_t                       num_classes,
                                 uint8_t                        this_device_mode,
                                 uint8_t                        other_device_mode,
                                 uint8_t                        owner_events,
                                 uint8_t                        device_id,
                                 const xcb_input_event_class_t *classes);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_grab_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_grab_device_reply_t *
xcb_input_grab_device_reply (xcb_connection_t                *c,
                             xcb_input_grab_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_ungrab_device_checked (xcb_connection_t *c,
                                 xcb_timestamp_t   time,
                                 uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_ungrab_device (xcb_connection_t *c,
                         xcb_timestamp_t   time,
                         uint8_t           device_id);

int
xcb_input_grab_device_key_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_grab_device_key_checked (xcb_connection_t              *c,
                                   xcb_window_t                   grab_window,
                                   uint16_t                       num_classes,
                                   uint16_t                       modifiers,
                                   uint8_t                        modifier_device,
                                   uint8_t                        grabbed_device,
                                   uint8_t                        key,
                                   uint8_t                        this_device_mode,
                                   uint8_t                        other_device_mode,
                                   uint8_t                        owner_events,
                                   const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_grab_device_key (xcb_connection_t              *c,
                           xcb_window_t                   grab_window,
                           uint16_t                       num_classes,
                           uint16_t                       modifiers,
                           uint8_t                        modifier_device,
                           uint8_t                        grabbed_device,
                           uint8_t                        key,
                           uint8_t                        this_device_mode,
                           uint8_t                        other_device_mode,
                           uint8_t                        owner_events,
                           const xcb_input_event_class_t *classes);

xcb_input_event_class_t *
xcb_input_grab_device_key_classes (const xcb_input_grab_device_key_request_t *R);

int
xcb_input_grab_device_key_classes_length (const xcb_input_grab_device_key_request_t *R);

xcb_generic_iterator_t
xcb_input_grab_device_key_classes_end (const xcb_input_grab_device_key_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_ungrab_device_key_checked (xcb_connection_t *c,
                                     xcb_window_t      grabWindow,
                                     uint16_t          modifiers,
                                     uint8_t           modifier_device,
                                     uint8_t           key,
                                     uint8_t           grabbed_device);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_ungrab_device_key (xcb_connection_t *c,
                             xcb_window_t      grabWindow,
                             uint16_t          modifiers,
                             uint8_t           modifier_device,
                             uint8_t           key,
                             uint8_t           grabbed_device);

int
xcb_input_grab_device_button_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_grab_device_button_checked (xcb_connection_t              *c,
                                      xcb_window_t                   grab_window,
                                      uint8_t                        grabbed_device,
                                      uint8_t                        modifier_device,
                                      uint16_t                       num_classes,
                                      uint16_t                       modifiers,
                                      uint8_t                        this_device_mode,
                                      uint8_t                        other_device_mode,
                                      uint8_t                        button,
                                      uint8_t                        owner_events,
                                      const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_grab_device_button (xcb_connection_t              *c,
                              xcb_window_t                   grab_window,
                              uint8_t                        grabbed_device,
                              uint8_t                        modifier_device,
                              uint16_t                       num_classes,
                              uint16_t                       modifiers,
                              uint8_t                        this_device_mode,
                              uint8_t                        other_device_mode,
                              uint8_t                        button,
                              uint8_t                        owner_events,
                              const xcb_input_event_class_t *classes);

xcb_input_event_class_t *
xcb_input_grab_device_button_classes (const xcb_input_grab_device_button_request_t *R);

int
xcb_input_grab_device_button_classes_length (const xcb_input_grab_device_button_request_t *R);

xcb_generic_iterator_t
xcb_input_grab_device_button_classes_end (const xcb_input_grab_device_button_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_ungrab_device_button_checked (xcb_connection_t *c,
                                        xcb_window_t      grab_window,
                                        uint16_t          modifiers,
                                        uint8_t           modifier_device,
                                        uint8_t           button,
                                        uint8_t           grabbed_device);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_ungrab_device_button (xcb_connection_t *c,
                                xcb_window_t      grab_window,
                                uint16_t          modifiers,
                                uint8_t           modifier_device,
                                uint8_t           button,
                                uint8_t           grabbed_device);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_allow_device_events_checked (xcb_connection_t *c,
                                       xcb_timestamp_t   time,
                                       uint8_t           mode,
                                       uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_allow_device_events (xcb_connection_t *c,
                               xcb_timestamp_t   time,
                               uint8_t           mode,
                               uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus (xcb_connection_t *c,
                            uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus_unchecked (xcb_connection_t *c,
                                      uint8_t           device_id);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_focus_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_focus_reply_t *
xcb_input_get_device_focus_reply (xcb_connection_t                     *c,
                                  xcb_input_get_device_focus_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_set_device_focus_checked (xcb_connection_t *c,
                                    xcb_window_t      focus,
                                    xcb_timestamp_t   time,
                                    uint8_t           revert_to,
                                    uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_set_device_focus (xcb_connection_t *c,
                            xcb_window_t      focus,
                            xcb_timestamp_t   time,
                            uint8_t           revert_to,
                            uint8_t           device_id);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_kbd_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_kbd_feedback_state_t)
 */
void
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_kbd_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_ptr_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_ptr_feedback_state_t)
 */
void
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_ptr_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_ptr_feedback_state_end (xcb_input_ptr_feedback_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_integer_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_integer_feedback_state_t)
 */
void
xcb_input_integer_feedback_state_next (xcb_input_integer_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_integer_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_integer_feedback_state_end (xcb_input_integer_feedback_state_iterator_t i);

int
xcb_input_string_feedback_state_sizeof (const void  *_buffer);

xcb_keysym_t *
xcb_input_string_feedback_state_keysyms (const xcb_input_string_feedback_state_t *R);

int
xcb_input_string_feedback_state_keysyms_length (const xcb_input_string_feedback_state_t *R);

xcb_generic_iterator_t
xcb_input_string_feedback_state_keysyms_end (const xcb_input_string_feedback_state_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_string_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_string_feedback_state_t)
 */
void
xcb_input_string_feedback_state_next (xcb_input_string_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_string_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_string_feedback_state_end (xcb_input_string_feedback_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_bell_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_bell_feedback_state_t)
 */
void
xcb_input_bell_feedback_state_next (xcb_input_bell_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_bell_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_bell_feedback_state_end (xcb_input_bell_feedback_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_led_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_led_feedback_state_t)
 */
void
xcb_input_led_feedback_state_next (xcb_input_led_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_led_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_led_feedback_state_end (xcb_input_led_feedback_state_iterator_t i);

xcb_keysym_t *
xcb_input_feedback_state_data_string_keysyms (const xcb_input_feedback_state_data_t *S);

int
xcb_input_feedback_state_data_string_keysyms_length (const xcb_input_feedback_state_t *R,
                                                     const xcb_input_feedback_state_data_t *S);

xcb_generic_iterator_t
xcb_input_feedback_state_data_string_keysyms_end (const xcb_input_feedback_state_t *R,
                                                  const xcb_input_feedback_state_data_t *S);

int
xcb_input_feedback_state_data_serialize (void                                  **_buffer,
                                         uint8_t                                 class_id,
                                         const xcb_input_feedback_state_data_t  *_aux);

int
xcb_input_feedback_state_data_unpack (const void                       *_buffer,
                                      uint8_t                           class_id,
                                      xcb_input_feedback_state_data_t  *_aux);

int
xcb_input_feedback_state_data_sizeof (const void  *_buffer,
                                      uint8_t      class_id);

int
xcb_input_feedback_state_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_feedback_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_feedback_state_t)
 */
void
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i);

int
xcb_input_get_feedback_control_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control (xcb_connection_t *c,
                                uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c,
                                          uint8_t           device_id);

int
xcb_input_get_feedback_control_feedbacks_length (const xcb_input_get_feedback_control_reply_t *R);

xcb_input_feedback_state_iterator_t
xcb_input_get_feedback_control_feedbacks_iterator (const xcb_input_get_feedback_control_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_feedback_control_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_feedback_control_reply_t *
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c,
                                      xcb_input_get_feedback_control_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_kbd_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_kbd_feedback_ctl_t)
 */
void
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_kbd_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_ptr_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_ptr_feedback_ctl_t)
 */
void
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_ptr_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_integer_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_integer_feedback_ctl_t)
 */
void
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_integer_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i);

int
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer);

xcb_keysym_t *
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R);

int
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R);

xcb_generic_iterator_t
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_string_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_string_feedback_ctl_t)
 */
void
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_string_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_bell_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_bell_feedback_ctl_t)
 */
void
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_bell_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_led_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_led_feedback_ctl_t)
 */
void
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_led_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i);

xcb_keysym_t *
xcb_input_feedback_ctl_data_string_keysyms (const xcb_input_feedback_ctl_data_t *S);

int
xcb_input_feedback_ctl_data_string_keysyms_length (const xcb_input_feedback_ctl_t *R,
                                                   const xcb_input_feedback_ctl_data_t *S);

xcb_generic_iterator_t
xcb_input_feedback_ctl_data_string_keysyms_end (const xcb_input_feedback_ctl_t *R,
                                                const xcb_input_feedback_ctl_data_t *S);

int
xcb_input_feedback_ctl_data_serialize (void                                **_buffer,
                                       uint8_t                               class_id,
                                       const xcb_input_feedback_ctl_data_t  *_aux);

int
xcb_input_feedback_ctl_data_unpack (const void                     *_buffer,
                                    uint8_t                         class_id,
                                    xcb_input_feedback_ctl_data_t  *_aux);

int
xcb_input_feedback_ctl_data_sizeof (const void  *_buffer,
                                    uint8_t      class_id);

int
xcb_input_feedback_ctl_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_feedback_ctl_t)
 */
void
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i);

int
xcb_input_change_feedback_control_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_change_feedback_control_checked (xcb_connection_t         *c,
                                           uint32_t                  mask,
                                           uint8_t                   device_id,
                                           uint8_t                   feedback_id,
                                           xcb_input_feedback_ctl_t *feedback);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_change_feedback_control (xcb_connection_t         *c,
                                   uint32_t                  mask,
                                   uint8_t                   device_id,
                                   uint8_t                   feedback_id,
                                   xcb_input_feedback_ctl_t *feedback);

xcb_input_feedback_ctl_t *
xcb_input_change_feedback_control_feedback (const xcb_input_change_feedback_control_request_t *R);

int
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping (xcb_connection_t     *c,
                                  uint8_t               device_id,
                                  xcb_input_key_code_t  first_keycode,
                                  uint8_t               count);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c,
                                            uint8_t               device_id,
                                            xcb_input_key_code_t  first_keycode,
                                            uint8_t               count);

xcb_keysym_t *
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R);

int
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_key_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_key_mapping_reply_t *
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c,
                                        xcb_input_get_device_key_mapping_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

int
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c,
                                             uint8_t               device_id,
                                             xcb_input_key_code_t  first_keycode,
                                             uint8_t               keysyms_per_keycode,
                                             uint8_t               keycode_count,
                                             const xcb_keysym_t   *keysyms);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_change_device_key_mapping (xcb_connection_t     *c,
                                     uint8_t               device_id,
                                     xcb_input_key_code_t  first_keycode,
                                     uint8_t               keysyms_per_keycode,
                                     uint8_t               keycode_count,
                                     const xcb_keysym_t   *keysyms);

xcb_keysym_t *
xcb_input_change_device_key_mapping_keysyms (const xcb_input_change_device_key_mapping_request_t *R);

int
xcb_input_change_device_key_mapping_keysyms_length (const xcb_input_change_device_key_mapping_request_t *R);

xcb_generic_iterator_t
xcb_input_change_device_key_mapping_keysyms_end (const xcb_input_change_device_key_mapping_request_t *R);

int
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping (xcb_connection_t *c,
                                       uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c,
                                                 uint8_t           device_id);

uint8_t *
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R);

int
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_modifier_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_modifier_mapping_reply_t *
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c,
                                             xcb_input_get_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e);

int
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping (xcb_connection_t *c,
                                       uint8_t           device_id,
                                       uint8_t           keycodes_per_modifier,
                                       const uint8_t    *keymaps);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c,
                                                 uint8_t           device_id,
                                                 uint8_t           keycodes_per_modifier,
                                                 const uint8_t    *keymaps);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_modifier_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_set_device_modifier_mapping_reply_t *
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c,
                                             xcb_input_set_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e);

int
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping (xcb_connection_t *c,
                                     uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c,
                                               uint8_t           device_id);

uint8_t *
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R);

int
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R);

xcb_generic_iterator_t
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_button_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_button_mapping_reply_t *
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c,
                                           xcb_input_get_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

int
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping (xcb_connection_t *c,
                                     uint8_t           device_id,
                                     uint8_t           map_size,
                                     const uint8_t    *map);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c,
                                               uint8_t           device_id,
                                               uint8_t           map_size,
                                               const uint8_t    *map);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_button_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_set_device_button_mapping_reply_t *
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c,
                                           xcb_input_set_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_state_t)
 */
void
xcb_input_key_state_next (xcb_input_key_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_key_state_end (xcb_input_key_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_button_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_button_state_t)
 */
void
xcb_input_button_state_next (xcb_input_button_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_button_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_button_state_end (xcb_input_button_state_iterator_t i);

int
xcb_input_valuator_state_sizeof (const void  *_buffer);

int32_t *
xcb_input_valuator_state_valuators (const xcb_input_valuator_state_t *R);

int
xcb_input_valuator_state_valuators_length (const xcb_input_valuator_state_t *R);

xcb_generic_iterator_t
xcb_input_valuator_state_valuators_end (const xcb_input_valuator_state_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_valuator_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_valuator_state_t)
 */
void
xcb_input_valuator_state_next (xcb_input_valuator_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_valuator_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_valuator_state_end (xcb_input_valuator_state_iterator_t i);

int32_t *
xcb_input_input_state_data_valuator_valuators (const xcb_input_input_state_data_t *S);

int
xcb_input_input_state_data_valuator_valuators_length (const xcb_input_input_state_t *R,
                                                      const xcb_input_input_state_data_t *S);

xcb_generic_iterator_t
xcb_input_input_state_data_valuator_valuators_end (const xcb_input_input_state_t *R,
                                                   const xcb_input_input_state_data_t *S);

int
xcb_input_input_state_data_serialize (void                               **_buffer,
                                      uint8_t                              class_id,
                                      const xcb_input_input_state_data_t  *_aux);

int
xcb_input_input_state_data_unpack (const void                    *_buffer,
                                   uint8_t                        class_id,
                                   xcb_input_input_state_data_t  *_aux);

int
xcb_input_input_state_data_sizeof (const void  *_buffer,
                                   uint8_t      class_id);

int
xcb_input_input_state_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_input_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_input_state_t)
 */
void
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_input_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_input_state_end (xcb_input_input_state_iterator_t i);

int
xcb_input_query_device_state_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state (xcb_connection_t *c,
                              uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state_unchecked (xcb_connection_t *c,
                                        uint8_t           device_id);

int
xcb_input_query_device_state_classes_length (const xcb_input_query_device_state_reply_t *R);

xcb_input_input_state_iterator_t
xcb_input_query_device_state_classes_iterator (const xcb_input_query_device_state_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_query_device_state_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_query_device_state_reply_t *
xcb_input_query_device_state_reply (xcb_connection_t                       *c,
                                    xcb_input_query_device_state_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_input_send_extension_event_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_send_extension_event_checked (xcb_connection_t              *c,
                                        xcb_window_t                   destination,
                                        uint8_t                        device_id,
                                        uint8_t                        propagate,
                                        uint16_t                       num_classes,
                                        uint8_t                        num_events,
                                        const uint8_t                 *events,
                                        const xcb_input_event_class_t *classes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_send_extension_event (xcb_connection_t              *c,
                                xcb_window_t                   destination,
                                uint8_t                        device_id,
                                uint8_t                        propagate,
                                uint16_t                       num_classes,
                                uint8_t                        num_events,
                                const uint8_t                 *events,
                                const xcb_input_event_class_t *classes);

uint8_t *
xcb_input_send_extension_event_events (const xcb_input_send_extension_event_request_t *R);

int
xcb_input_send_extension_event_events_length (const xcb_input_send_extension_event_request_t *R);

xcb_generic_iterator_t
xcb_input_send_extension_event_events_end (const xcb_input_send_extension_event_request_t *R);

xcb_input_event_class_t *
xcb_input_send_extension_event_classes (const xcb_input_send_extension_event_request_t *R);

int
xcb_input_send_extension_event_classes_length (const xcb_input_send_extension_event_request_t *R);

xcb_generic_iterator_t
xcb_input_send_extension_event_classes_end (const xcb_input_send_extension_event_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_device_bell_checked (xcb_connection_t *c,
                               uint8_t           device_id,
                               uint8_t           feedback_id,
                               uint8_t           feedback_class,
                               int8_t            percent);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_device_bell (xcb_connection_t *c,
                       uint8_t           device_id,
                       uint8_t           feedback_id,
                       uint8_t           feedback_class,
                       int8_t            percent);

int
xcb_input_set_device_valuators_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators (xcb_connection_t *c,
                                uint8_t           device_id,
                                uint8_t           first_valuator,
                                uint8_t           num_valuators,
                                const int32_t    *valuators);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c,
                                          uint8_t           device_id,
                                          uint8_t           first_valuator,
                                          uint8_t           num_valuators,
                                          const int32_t    *valuators);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_valuators_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_set_device_valuators_reply_t *
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c,
                                      xcb_input_set_device_valuators_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_input_device_resolution_state_sizeof (const void  *_buffer);

uint32_t *
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R);

int
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R);

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R);

uint32_t *
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R);

int
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R);

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R);

uint32_t *
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R);

int
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R);

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_max_end (const xcb_input_device_resolution_state_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_resolution_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_resolution_state_t)
 */
void
xcb_input_device_resolution_state_next (xcb_input_device_resolution_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_resolution_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_resolution_state_end (xcb_input_device_resolution_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_calib_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_calib_state_t)
 */
void
xcb_input_device_abs_calib_state_next (xcb_input_device_abs_calib_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_calib_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_abs_calib_state_end (xcb_input_device_abs_calib_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_area_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_area_state_t)
 */
void
xcb_input_device_abs_area_state_next (xcb_input_device_abs_area_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_area_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_abs_area_state_end (xcb_input_device_abs_area_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_core_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_core_state_t)
 */
void
xcb_input_device_core_state_next (xcb_input_device_core_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_core_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_core_state_end (xcb_input_device_core_state_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_enable_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_enable_state_t)
 */
void
xcb_input_device_enable_state_next (xcb_input_device_enable_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_enable_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_enable_state_end (xcb_input_device_enable_state_iterator_t i);

uint32_t *
xcb_input_device_state_data_resolution_resolution_values (const xcb_input_device_state_data_t *S);

int
xcb_input_device_state_data_resolution_resolution_values_length (const xcb_input_device_state_t *R,
                                                                 const xcb_input_device_state_data_t *S);

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_values_end (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S);

uint32_t *
xcb_input_device_state_data_resolution_resolution_min (const xcb_input_device_state_data_t *S);

int
xcb_input_device_state_data_resolution_resolution_min_length (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S);

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_min_end (const xcb_input_device_state_t *R,
                                                           const xcb_input_device_state_data_t *S);

uint32_t *
xcb_input_device_state_data_resolution_resolution_max (const xcb_input_device_state_data_t *S);

int
xcb_input_device_state_data_resolution_resolution_max_length (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S);

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_max_end (const xcb_input_device_state_t *R,
                                                           const xcb_input_device_state_data_t *S);

int
xcb_input_device_state_data_serialize (void                                **_buffer,
                                       uint16_t                              control_id,
                                       const xcb_input_device_state_data_t  *_aux);

int
xcb_input_device_state_data_unpack (const void                     *_buffer,
                                    uint16_t                        control_id,
                                    xcb_input_device_state_data_t  *_aux);

int
xcb_input_device_state_data_sizeof (const void  *_buffer,
                                    uint16_t     control_id);

int
xcb_input_device_state_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_state_t)
 */
void
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_state_end (xcb_input_device_state_iterator_t i);

int
xcb_input_get_device_control_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control (xcb_connection_t *c,
                              uint16_t          control_id,
                              uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control_unchecked (xcb_connection_t *c,
                                        uint16_t          control_id,
                                        uint8_t           device_id);

xcb_input_device_state_t *
xcb_input_get_device_control_control (const xcb_input_get_device_control_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_control_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_control_reply_t *
xcb_input_get_device_control_reply (xcb_connection_t                       *c,
                                    xcb_input_get_device_control_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer);

uint32_t *
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R);

int
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R);

xcb_generic_iterator_t
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_resolution_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_resolution_ctl_t)
 */
void
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_resolution_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_calib_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_calib_ctl_t)
 */
void
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_calib_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_area_ctrl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_area_ctrl_t)
 */
void
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_area_ctrl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_core_ctrl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_core_ctrl_t)
 */
void
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_core_ctrl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_enable_ctrl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_enable_ctrl_t)
 */
void
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_enable_ctrl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i);

uint32_t *
xcb_input_device_ctl_data_resolution_resolution_values (const xcb_input_device_ctl_data_t *S);

int
xcb_input_device_ctl_data_resolution_resolution_values_length (const xcb_input_device_ctl_t *R,
                                                               const xcb_input_device_ctl_data_t *S);

xcb_generic_iterator_t
xcb_input_device_ctl_data_resolution_resolution_values_end (const xcb_input_device_ctl_t *R,
                                                            const xcb_input_device_ctl_data_t *S);

int
xcb_input_device_ctl_data_serialize (void                              **_buffer,
                                     uint16_t                            control_id,
                                     const xcb_input_device_ctl_data_t  *_aux);

int
xcb_input_device_ctl_data_unpack (const void                   *_buffer,
                                  uint16_t                      control_id,
                                  xcb_input_device_ctl_data_t  *_aux);

int
xcb_input_device_ctl_data_sizeof (const void  *_buffer,
                                  uint16_t     control_id);

int
xcb_input_device_ctl_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_ctl_t)
 */
void
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i);

int
xcb_input_change_device_control_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_change_device_control_cookie_t
xcb_input_change_device_control (xcb_connection_t       *c,
                                 uint16_t                control_id,
                                 uint8_t                 device_id,
                                 xcb_input_device_ctl_t *control);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_change_device_control_cookie_t
xcb_input_change_device_control_unchecked (xcb_connection_t       *c,
                                           uint16_t                control_id,
                                           uint8_t                 device_id,
                                           xcb_input_device_ctl_t *control);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_change_device_control_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_change_device_control_reply_t *
xcb_input_change_device_control_reply (xcb_connection_t                          *c,
                                       xcb_input_change_device_control_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_input_list_device_properties_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_list_device_properties_cookie_t
xcb_input_list_device_properties (xcb_connection_t *c,
                                  uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_list_device_properties_cookie_t
xcb_input_list_device_properties_unchecked (xcb_connection_t *c,
                                            uint8_t           device_id);

xcb_atom_t *
xcb_input_list_device_properties_atoms (const xcb_input_list_device_properties_reply_t *R);

int
xcb_input_list_device_properties_atoms_length (const xcb_input_list_device_properties_reply_t *R);

xcb_generic_iterator_t
xcb_input_list_device_properties_atoms_end (const xcb_input_list_device_properties_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_list_device_properties_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_list_device_properties_reply_t *
xcb_input_list_device_properties_reply (xcb_connection_t                           *c,
                                        xcb_input_list_device_properties_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

uint8_t *
xcb_input_change_device_property_items_data_8 (const xcb_input_change_device_property_items_t *S);

int
xcb_input_change_device_property_items_data_8_length (const xcb_input_change_device_property_request_t *R,
                                                      const xcb_input_change_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_8_end (const xcb_input_change_device_property_request_t *R,
                                                   const xcb_input_change_device_property_items_t *S);

uint16_t *
xcb_input_change_device_property_items_data_16 (const xcb_input_change_device_property_items_t *S);

int
xcb_input_change_device_property_items_data_16_length (const xcb_input_change_device_property_request_t *R,
                                                       const xcb_input_change_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_16_end (const xcb_input_change_device_property_request_t *R,
                                                    const xcb_input_change_device_property_items_t *S);

uint32_t *
xcb_input_change_device_property_items_data_32 (const xcb_input_change_device_property_items_t *S);

int
xcb_input_change_device_property_items_data_32_length (const xcb_input_change_device_property_request_t *R,
                                                       const xcb_input_change_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_32_end (const xcb_input_change_device_property_request_t *R,
                                                    const xcb_input_change_device_property_items_t *S);

int
xcb_input_change_device_property_items_serialize (void                                           **_buffer,
                                                  uint32_t                                         num_items,
                                                  uint8_t                                          format,
                                                  const xcb_input_change_device_property_items_t  *_aux);

int
xcb_input_change_device_property_items_unpack (const void                                *_buffer,
                                               uint32_t                                   num_items,
                                               uint8_t                                    format,
                                               xcb_input_change_device_property_items_t  *_aux);

int
xcb_input_change_device_property_items_sizeof (const void  *_buffer,
                                               uint32_t     num_items,
                                               uint8_t      format);

int
xcb_input_change_device_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_change_device_property_checked (xcb_connection_t *c,
                                          xcb_atom_t        property,
                                          xcb_atom_t        type,
                                          uint8_t           device_id,
                                          uint8_t           format,
                                          uint8_t           mode,
                                          uint32_t          num_items,
                                          const void       *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_change_device_property (xcb_connection_t *c,
                                  xcb_atom_t        property,
                                  xcb_atom_t        type,
                                  uint8_t           device_id,
                                  uint8_t           format,
                                  uint8_t           mode,
                                  uint32_t          num_items,
                                  const void       *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_change_device_property_aux_checked (xcb_connection_t                               *c,
                                              xcb_atom_t                                      property,
                                              xcb_atom_t                                      type,
                                              uint8_t                                         device_id,
                                              uint8_t                                         format,
                                              uint8_t                                         mode,
                                              uint32_t                                        num_items,
                                              const xcb_input_change_device_property_items_t *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_change_device_property_aux (xcb_connection_t                               *c,
                                      xcb_atom_t                                      property,
                                      xcb_atom_t                                      type,
                                      uint8_t                                         device_id,
                                      uint8_t                                         format,
                                      uint8_t                                         mode,
                                      uint32_t                                        num_items,
                                      const xcb_input_change_device_property_items_t *items);

void *
xcb_input_change_device_property_items (const xcb_input_change_device_property_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_delete_device_property_checked (xcb_connection_t *c,
                                          xcb_atom_t        property,
                                          uint8_t           device_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_delete_device_property (xcb_connection_t *c,
                                  xcb_atom_t        property,
                                  uint8_t           device_id);

uint8_t *
xcb_input_get_device_property_items_data_8 (const xcb_input_get_device_property_items_t *S);

int
xcb_input_get_device_property_items_data_8_length (const xcb_input_get_device_property_reply_t *R,
                                                   const xcb_input_get_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_8_end (const xcb_input_get_device_property_reply_t *R,
                                                const xcb_input_get_device_property_items_t *S);

uint16_t *
xcb_input_get_device_property_items_data_16 (const xcb_input_get_device_property_items_t *S);

int
xcb_input_get_device_property_items_data_16_length (const xcb_input_get_device_property_reply_t *R,
                                                    const xcb_input_get_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_16_end (const xcb_input_get_device_property_reply_t *R,
                                                 const xcb_input_get_device_property_items_t *S);

uint32_t *
xcb_input_get_device_property_items_data_32 (const xcb_input_get_device_property_items_t *S);

int
xcb_input_get_device_property_items_data_32_length (const xcb_input_get_device_property_reply_t *R,
                                                    const xcb_input_get_device_property_items_t *S);

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_32_end (const xcb_input_get_device_property_reply_t *R,
                                                 const xcb_input_get_device_property_items_t *S);

int
xcb_input_get_device_property_items_serialize (void                                        **_buffer,
                                               uint32_t                                      num_items,
                                               uint8_t                                       format,
                                               const xcb_input_get_device_property_items_t  *_aux);

int
xcb_input_get_device_property_items_unpack (const void                             *_buffer,
                                            uint32_t                                num_items,
                                            uint8_t                                 format,
                                            xcb_input_get_device_property_items_t  *_aux);

int
xcb_input_get_device_property_items_sizeof (const void  *_buffer,
                                            uint32_t     num_items,
                                            uint8_t      format);

int
xcb_input_get_device_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_get_device_property_cookie_t
xcb_input_get_device_property (xcb_connection_t *c,
                               xcb_atom_t        property,
                               xcb_atom_t        type,
                               uint32_t          offset,
                               uint32_t          len,
                               uint8_t           device_id,
                               uint8_t           _delete);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_get_device_property_cookie_t
xcb_input_get_device_property_unchecked (xcb_connection_t *c,
                                         xcb_atom_t        property,
                                         xcb_atom_t        type,
                                         uint32_t          offset,
                                         uint32_t          len,
                                         uint8_t           device_id,
                                         uint8_t           _delete);

void *
xcb_input_get_device_property_items (const xcb_input_get_device_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_get_device_property_reply_t *
xcb_input_get_device_property_reply (xcb_connection_t                        *c,
                                     xcb_input_get_device_property_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_group_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_group_info_t)
 */
void
xcb_input_group_info_next (xcb_input_group_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_group_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_group_info_end (xcb_input_group_info_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_modifier_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_modifier_info_t)
 */
void
xcb_input_modifier_info_next (xcb_input_modifier_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_modifier_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_modifier_info_end (xcb_input_modifier_info_iterator_t i);

int
xcb_input_xi_query_pointer_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_query_pointer_cookie_t
xcb_input_xi_query_pointer (xcb_connection_t      *c,
                            xcb_window_t           window,
                            xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_query_pointer_cookie_t
xcb_input_xi_query_pointer_unchecked (xcb_connection_t      *c,
                                      xcb_window_t           window,
                                      xcb_input_device_id_t  deviceid);

uint32_t *
xcb_input_xi_query_pointer_buttons (const xcb_input_xi_query_pointer_reply_t *R);

int
xcb_input_xi_query_pointer_buttons_length (const xcb_input_xi_query_pointer_reply_t *R);

xcb_generic_iterator_t
xcb_input_xi_query_pointer_buttons_end (const xcb_input_xi_query_pointer_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_query_pointer_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_query_pointer_reply_t *
xcb_input_xi_query_pointer_reply (xcb_connection_t                     *c,
                                  xcb_input_xi_query_pointer_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_warp_pointer_checked (xcb_connection_t      *c,
                                   xcb_window_t           src_win,
                                   xcb_window_t           dst_win,
                                   xcb_input_fp1616_t     src_x,
                                   xcb_input_fp1616_t     src_y,
                                   uint16_t               src_width,
                                   uint16_t               src_height,
                                   xcb_input_fp1616_t     dst_x,
                                   xcb_input_fp1616_t     dst_y,
                                   xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_warp_pointer (xcb_connection_t      *c,
                           xcb_window_t           src_win,
                           xcb_window_t           dst_win,
                           xcb_input_fp1616_t     src_x,
                           xcb_input_fp1616_t     src_y,
                           uint16_t               src_width,
                           uint16_t               src_height,
                           xcb_input_fp1616_t     dst_x,
                           xcb_input_fp1616_t     dst_y,
                           xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_change_cursor_checked (xcb_connection_t      *c,
                                    xcb_window_t           window,
                                    xcb_cursor_t           cursor,
                                    xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_change_cursor (xcb_connection_t      *c,
                            xcb_window_t           window,
                            xcb_cursor_t           cursor,
                            xcb_input_device_id_t  deviceid);

int
xcb_input_add_master_sizeof (const void  *_buffer);

char *
xcb_input_add_master_name (const xcb_input_add_master_t *R);

int
xcb_input_add_master_name_length (const xcb_input_add_master_t *R);

xcb_generic_iterator_t
xcb_input_add_master_name_end (const xcb_input_add_master_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_add_master_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_add_master_t)
 */
void
xcb_input_add_master_next (xcb_input_add_master_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_add_master_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_add_master_end (xcb_input_add_master_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_remove_master_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_remove_master_t)
 */
void
xcb_input_remove_master_next (xcb_input_remove_master_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_remove_master_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_remove_master_end (xcb_input_remove_master_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_attach_slave_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_attach_slave_t)
 */
void
xcb_input_attach_slave_next (xcb_input_attach_slave_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_attach_slave_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_attach_slave_end (xcb_input_attach_slave_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_detach_slave_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_detach_slave_t)
 */
void
xcb_input_detach_slave_next (xcb_input_detach_slave_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_detach_slave_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_detach_slave_end (xcb_input_detach_slave_iterator_t i);

char *
xcb_input_hierarchy_change_data_add_master_name (const xcb_input_hierarchy_change_data_t *S);

int
xcb_input_hierarchy_change_data_add_master_name_length (const xcb_input_hierarchy_change_t *R,
                                                        const xcb_input_hierarchy_change_data_t *S);

xcb_generic_iterator_t
xcb_input_hierarchy_change_data_add_master_name_end (const xcb_input_hierarchy_change_t *R,
                                                     const xcb_input_hierarchy_change_data_t *S);

int
xcb_input_hierarchy_change_data_serialize (void                                    **_buffer,
                                           uint16_t                                  type,
                                           const xcb_input_hierarchy_change_data_t  *_aux);

int
xcb_input_hierarchy_change_data_unpack (const void                         *_buffer,
                                        uint16_t                            type,
                                        xcb_input_hierarchy_change_data_t  *_aux);

int
xcb_input_hierarchy_change_data_sizeof (const void  *_buffer,
                                        uint16_t     type);

int
xcb_input_hierarchy_change_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_hierarchy_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_hierarchy_change_t)
 */
void
xcb_input_hierarchy_change_next (xcb_input_hierarchy_change_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_hierarchy_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_hierarchy_change_end (xcb_input_hierarchy_change_iterator_t i);

int
xcb_input_xi_change_hierarchy_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_change_hierarchy_checked (xcb_connection_t                   *c,
                                       uint8_t                             num_changes,
                                       const xcb_input_hierarchy_change_t *changes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_change_hierarchy (xcb_connection_t                   *c,
                               uint8_t                             num_changes,
                               const xcb_input_hierarchy_change_t *changes);

int
xcb_input_xi_change_hierarchy_changes_length (const xcb_input_xi_change_hierarchy_request_t *R);

xcb_input_hierarchy_change_iterator_t
xcb_input_xi_change_hierarchy_changes_iterator (const xcb_input_xi_change_hierarchy_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_set_client_pointer_checked (xcb_connection_t      *c,
                                         xcb_window_t           window,
                                         xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_set_client_pointer (xcb_connection_t      *c,
                                 xcb_window_t           window,
                                 xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_get_client_pointer_cookie_t
xcb_input_xi_get_client_pointer (xcb_connection_t *c,
                                 xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_get_client_pointer_cookie_t
xcb_input_xi_get_client_pointer_unchecked (xcb_connection_t *c,
                                           xcb_window_t      window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_get_client_pointer_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_get_client_pointer_reply_t *
xcb_input_xi_get_client_pointer_reply (xcb_connection_t                          *c,
                                       xcb_input_xi_get_client_pointer_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_input_event_mask_sizeof (const void  *_buffer);

uint32_t *
xcb_input_event_mask_mask (const xcb_input_event_mask_t *R);

int
xcb_input_event_mask_mask_length (const xcb_input_event_mask_t *R);

xcb_generic_iterator_t
xcb_input_event_mask_mask_end (const xcb_input_event_mask_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_event_mask_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_event_mask_t)
 */
void
xcb_input_event_mask_next (xcb_input_event_mask_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_event_mask_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_event_mask_end (xcb_input_event_mask_iterator_t i);

int
xcb_input_xi_select_events_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_select_events_checked (xcb_connection_t             *c,
                                    xcb_window_t                  window,
                                    uint16_t                      num_mask,
                                    const xcb_input_event_mask_t *masks);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_select_events (xcb_connection_t             *c,
                            xcb_window_t                  window,
                            uint16_t                      num_mask,
                            const xcb_input_event_mask_t *masks);

int
xcb_input_xi_select_events_masks_length (const xcb_input_xi_select_events_request_t *R);

xcb_input_event_mask_iterator_t
xcb_input_xi_select_events_masks_iterator (const xcb_input_xi_select_events_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_query_version_cookie_t
xcb_input_xi_query_version (xcb_connection_t *c,
                            uint16_t          major_version,
                            uint16_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_query_version_cookie_t
xcb_input_xi_query_version_unchecked (xcb_connection_t *c,
                                      uint16_t          major_version,
                                      uint16_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_query_version_reply_t *
xcb_input_xi_query_version_reply (xcb_connection_t                     *c,
                                  xcb_input_xi_query_version_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

int
xcb_input_button_class_sizeof (const void  *_buffer);

uint32_t *
xcb_input_button_class_state (const xcb_input_button_class_t *R);

int
xcb_input_button_class_state_length (const xcb_input_button_class_t *R);

xcb_generic_iterator_t
xcb_input_button_class_state_end (const xcb_input_button_class_t *R);

xcb_atom_t *
xcb_input_button_class_labels (const xcb_input_button_class_t *R);

int
xcb_input_button_class_labels_length (const xcb_input_button_class_t *R);

xcb_generic_iterator_t
xcb_input_button_class_labels_end (const xcb_input_button_class_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_button_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_button_class_t)
 */
void
xcb_input_button_class_next (xcb_input_button_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_button_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_button_class_end (xcb_input_button_class_iterator_t i);

int
xcb_input_key_class_sizeof (const void  *_buffer);

uint32_t *
xcb_input_key_class_keys (const xcb_input_key_class_t *R);

int
xcb_input_key_class_keys_length (const xcb_input_key_class_t *R);

xcb_generic_iterator_t
xcb_input_key_class_keys_end (const xcb_input_key_class_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_class_t)
 */
void
xcb_input_key_class_next (xcb_input_key_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_key_class_end (xcb_input_key_class_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_scroll_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_scroll_class_t)
 */
void
xcb_input_scroll_class_next (xcb_input_scroll_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_scroll_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_scroll_class_end (xcb_input_scroll_class_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_touch_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_touch_class_t)
 */
void
xcb_input_touch_class_next (xcb_input_touch_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_touch_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_touch_class_end (xcb_input_touch_class_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_valuator_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_valuator_class_t)
 */
void
xcb_input_valuator_class_next (xcb_input_valuator_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_valuator_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_valuator_class_end (xcb_input_valuator_class_iterator_t i);

uint32_t *
xcb_input_device_class_data_key_keys (const xcb_input_device_class_data_t *S);

int
xcb_input_device_class_data_key_keys_length (const xcb_input_device_class_t *R,
                                             const xcb_input_device_class_data_t *S);

xcb_generic_iterator_t
xcb_input_device_class_data_key_keys_end (const xcb_input_device_class_t *R,
                                          const xcb_input_device_class_data_t *S);

uint32_t *
xcb_input_device_class_data_button_state (const xcb_input_device_class_data_t *S);

int
xcb_input_device_class_data_button_state_length (const xcb_input_device_class_t *R,
                                                 const xcb_input_device_class_data_t *S);

xcb_generic_iterator_t
xcb_input_device_class_data_button_state_end (const xcb_input_device_class_t *R,
                                              const xcb_input_device_class_data_t *S);

xcb_atom_t *
xcb_input_device_class_data_button_labels (const xcb_input_device_class_data_t *S);

int
xcb_input_device_class_data_button_labels_length (const xcb_input_device_class_t *R,
                                                  const xcb_input_device_class_data_t *S);

xcb_generic_iterator_t
xcb_input_device_class_data_button_labels_end (const xcb_input_device_class_t *R,
                                               const xcb_input_device_class_data_t *S);

int
xcb_input_device_class_data_serialize (void                                **_buffer,
                                       uint16_t                              type,
                                       const xcb_input_device_class_data_t  *_aux);

int
xcb_input_device_class_data_unpack (const void                     *_buffer,
                                    uint16_t                        type,
                                    xcb_input_device_class_data_t  *_aux);

int
xcb_input_device_class_data_sizeof (const void  *_buffer,
                                    uint16_t     type);

int
xcb_input_device_class_sizeof (const void  *_buffer);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_class_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_class_t)
 */
void
xcb_input_device_class_next (xcb_input_device_class_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_class_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_device_class_end (xcb_input_device_class_iterator_t i);

int
xcb_input_xi_device_info_sizeof (const void  *_buffer);

char *
xcb_input_xi_device_info_name (const xcb_input_xi_device_info_t *R);

int
xcb_input_xi_device_info_name_length (const xcb_input_xi_device_info_t *R);

xcb_generic_iterator_t
xcb_input_xi_device_info_name_end (const xcb_input_xi_device_info_t *R);

int
xcb_input_xi_device_info_classes_length (const xcb_input_xi_device_info_t *R);

xcb_input_device_class_iterator_t
xcb_input_xi_device_info_classes_iterator (const xcb_input_xi_device_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_xi_device_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_xi_device_info_t)
 */
void
xcb_input_xi_device_info_next (xcb_input_xi_device_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_xi_device_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_xi_device_info_end (xcb_input_xi_device_info_iterator_t i);

int
xcb_input_xi_query_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_query_device_cookie_t
xcb_input_xi_query_device (xcb_connection_t      *c,
                           xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_query_device_cookie_t
xcb_input_xi_query_device_unchecked (xcb_connection_t      *c,
                                     xcb_input_device_id_t  deviceid);

int
xcb_input_xi_query_device_infos_length (const xcb_input_xi_query_device_reply_t *R);

xcb_input_xi_device_info_iterator_t
xcb_input_xi_query_device_infos_iterator (const xcb_input_xi_query_device_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_query_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_query_device_reply_t *
xcb_input_xi_query_device_reply (xcb_connection_t                    *c,
                                 xcb_input_xi_query_device_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_set_focus_checked (xcb_connection_t      *c,
                                xcb_window_t           window,
                                xcb_timestamp_t        time,
                                xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_set_focus (xcb_connection_t      *c,
                        xcb_window_t           window,
                        xcb_timestamp_t        time,
                        xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_get_focus_cookie_t
xcb_input_xi_get_focus (xcb_connection_t      *c,
                        xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_get_focus_cookie_t
xcb_input_xi_get_focus_unchecked (xcb_connection_t      *c,
                                  xcb_input_device_id_t  deviceid);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_get_focus_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_get_focus_reply_t *
xcb_input_xi_get_focus_reply (xcb_connection_t                 *c,
                              xcb_input_xi_get_focus_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_input_xi_grab_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_grab_device_cookie_t
xcb_input_xi_grab_device (xcb_connection_t      *c,
                          xcb_window_t           window,
                          xcb_timestamp_t        time,
                          xcb_cursor_t           cursor,
                          xcb_input_device_id_t  deviceid,
                          uint8_t                mode,
                          uint8_t                paired_device_mode,
                          uint8_t                owner_events,
                          uint16_t               mask_len,
                          const uint32_t        *mask);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_grab_device_cookie_t
xcb_input_xi_grab_device_unchecked (xcb_connection_t      *c,
                                    xcb_window_t           window,
                                    xcb_timestamp_t        time,
                                    xcb_cursor_t           cursor,
                                    xcb_input_device_id_t  deviceid,
                                    uint8_t                mode,
                                    uint8_t                paired_device_mode,
                                    uint8_t                owner_events,
                                    uint16_t               mask_len,
                                    const uint32_t        *mask);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_grab_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_grab_device_reply_t *
xcb_input_xi_grab_device_reply (xcb_connection_t                   *c,
                                xcb_input_xi_grab_device_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_ungrab_device_checked (xcb_connection_t      *c,
                                    xcb_timestamp_t        time,
                                    xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_ungrab_device (xcb_connection_t      *c,
                            xcb_timestamp_t        time,
                            xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_allow_events_checked (xcb_connection_t      *c,
                                   xcb_timestamp_t        time,
                                   xcb_input_device_id_t  deviceid,
                                   uint8_t                event_mode,
                                   uint32_t               touchid,
                                   xcb_window_t           grab_window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_allow_events (xcb_connection_t      *c,
                           xcb_timestamp_t        time,
                           xcb_input_device_id_t  deviceid,
                           uint8_t                event_mode,
                           uint32_t               touchid,
                           xcb_window_t           grab_window);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_grab_modifier_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_grab_modifier_info_t)
 */
void
xcb_input_grab_modifier_info_next (xcb_input_grab_modifier_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_grab_modifier_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_grab_modifier_info_end (xcb_input_grab_modifier_info_iterator_t i);

int
xcb_input_xi_passive_grab_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_passive_grab_device_cookie_t
xcb_input_xi_passive_grab_device (xcb_connection_t      *c,
                                  xcb_timestamp_t        time,
                                  xcb_window_t           grab_window,
                                  xcb_cursor_t           cursor,
                                  uint32_t               detail,
                                  xcb_input_device_id_t  deviceid,
                                  uint16_t               num_modifiers,
                                  uint16_t               mask_len,
                                  uint8_t                grab_type,
                                  uint8_t                grab_mode,
                                  uint8_t                paired_device_mode,
                                  uint8_t                owner_events,
                                  const uint32_t        *mask,
                                  const uint32_t        *modifiers);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_passive_grab_device_cookie_t
xcb_input_xi_passive_grab_device_unchecked (xcb_connection_t      *c,
                                            xcb_timestamp_t        time,
                                            xcb_window_t           grab_window,
                                            xcb_cursor_t           cursor,
                                            uint32_t               detail,
                                            xcb_input_device_id_t  deviceid,
                                            uint16_t               num_modifiers,
                                            uint16_t               mask_len,
                                            uint8_t                grab_type,
                                            uint8_t                grab_mode,
                                            uint8_t                paired_device_mode,
                                            uint8_t                owner_events,
                                            const uint32_t        *mask,
                                            const uint32_t        *modifiers);

xcb_input_grab_modifier_info_t *
xcb_input_xi_passive_grab_device_modifiers (const xcb_input_xi_passive_grab_device_reply_t *R);

int
xcb_input_xi_passive_grab_device_modifiers_length (const xcb_input_xi_passive_grab_device_reply_t *R);

xcb_input_grab_modifier_info_iterator_t
xcb_input_xi_passive_grab_device_modifiers_iterator (const xcb_input_xi_passive_grab_device_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_passive_grab_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_passive_grab_device_reply_t *
xcb_input_xi_passive_grab_device_reply (xcb_connection_t                           *c,
                                        xcb_input_xi_passive_grab_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

int
xcb_input_xi_passive_ungrab_device_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_passive_ungrab_device_checked (xcb_connection_t      *c,
                                            xcb_window_t           grab_window,
                                            uint32_t               detail,
                                            xcb_input_device_id_t  deviceid,
                                            uint16_t               num_modifiers,
                                            uint8_t                grab_type,
                                            const uint32_t        *modifiers);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_passive_ungrab_device (xcb_connection_t      *c,
                                    xcb_window_t           grab_window,
                                    uint32_t               detail,
                                    xcb_input_device_id_t  deviceid,
                                    uint16_t               num_modifiers,
                                    uint8_t                grab_type,
                                    const uint32_t        *modifiers);

uint32_t *
xcb_input_xi_passive_ungrab_device_modifiers (const xcb_input_xi_passive_ungrab_device_request_t *R);

int
xcb_input_xi_passive_ungrab_device_modifiers_length (const xcb_input_xi_passive_ungrab_device_request_t *R);

xcb_generic_iterator_t
xcb_input_xi_passive_ungrab_device_modifiers_end (const xcb_input_xi_passive_ungrab_device_request_t *R);

int
xcb_input_xi_list_properties_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_list_properties_cookie_t
xcb_input_xi_list_properties (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_list_properties_cookie_t
xcb_input_xi_list_properties_unchecked (xcb_connection_t      *c,
                                        xcb_input_device_id_t  deviceid);

xcb_atom_t *
xcb_input_xi_list_properties_properties (const xcb_input_xi_list_properties_reply_t *R);

int
xcb_input_xi_list_properties_properties_length (const xcb_input_xi_list_properties_reply_t *R);

xcb_generic_iterator_t
xcb_input_xi_list_properties_properties_end (const xcb_input_xi_list_properties_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_list_properties_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_list_properties_reply_t *
xcb_input_xi_list_properties_reply (xcb_connection_t                       *c,
                                    xcb_input_xi_list_properties_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

uint8_t *
xcb_input_xi_change_property_items_data_8 (const xcb_input_xi_change_property_items_t *S);

int
xcb_input_xi_change_property_items_data_8_length (const xcb_input_xi_change_property_request_t *R,
                                                  const xcb_input_xi_change_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_8_end (const xcb_input_xi_change_property_request_t *R,
                                               const xcb_input_xi_change_property_items_t *S);

uint16_t *
xcb_input_xi_change_property_items_data_16 (const xcb_input_xi_change_property_items_t *S);

int
xcb_input_xi_change_property_items_data_16_length (const xcb_input_xi_change_property_request_t *R,
                                                   const xcb_input_xi_change_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_16_end (const xcb_input_xi_change_property_request_t *R,
                                                const xcb_input_xi_change_property_items_t *S);

uint32_t *
xcb_input_xi_change_property_items_data_32 (const xcb_input_xi_change_property_items_t *S);

int
xcb_input_xi_change_property_items_data_32_length (const xcb_input_xi_change_property_request_t *R,
                                                   const xcb_input_xi_change_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_32_end (const xcb_input_xi_change_property_request_t *R,
                                                const xcb_input_xi_change_property_items_t *S);

int
xcb_input_xi_change_property_items_serialize (void                                       **_buffer,
                                              uint32_t                                     num_items,
                                              uint8_t                                      format,
                                              const xcb_input_xi_change_property_items_t  *_aux);

int
xcb_input_xi_change_property_items_unpack (const void                            *_buffer,
                                           uint32_t                               num_items,
                                           uint8_t                                format,
                                           xcb_input_xi_change_property_items_t  *_aux);

int
xcb_input_xi_change_property_items_sizeof (const void  *_buffer,
                                           uint32_t     num_items,
                                           uint8_t      format);

int
xcb_input_xi_change_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_change_property_checked (xcb_connection_t      *c,
                                      xcb_input_device_id_t  deviceid,
                                      uint8_t                mode,
                                      uint8_t                format,
                                      xcb_atom_t             property,
                                      xcb_atom_t             type,
                                      uint32_t               num_items,
                                      const void            *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_change_property (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid,
                              uint8_t                mode,
                              uint8_t                format,
                              xcb_atom_t             property,
                              xcb_atom_t             type,
                              uint32_t               num_items,
                              const void            *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_change_property_aux_checked (xcb_connection_t                           *c,
                                          xcb_input_device_id_t                       deviceid,
                                          uint8_t                                     mode,
                                          uint8_t                                     format,
                                          xcb_atom_t                                  property,
                                          xcb_atom_t                                  type,
                                          uint32_t                                    num_items,
                                          const xcb_input_xi_change_property_items_t *items);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_change_property_aux (xcb_connection_t                           *c,
                                  xcb_input_device_id_t                       deviceid,
                                  uint8_t                                     mode,
                                  uint8_t                                     format,
                                  xcb_atom_t                                  property,
                                  xcb_atom_t                                  type,
                                  uint32_t                                    num_items,
                                  const xcb_input_xi_change_property_items_t *items);

void *
xcb_input_xi_change_property_items (const xcb_input_xi_change_property_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_delete_property_checked (xcb_connection_t      *c,
                                      xcb_input_device_id_t  deviceid,
                                      xcb_atom_t             property);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_delete_property (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid,
                              xcb_atom_t             property);

uint8_t *
xcb_input_xi_get_property_items_data_8 (const xcb_input_xi_get_property_items_t *S);

int
xcb_input_xi_get_property_items_data_8_length (const xcb_input_xi_get_property_reply_t *R,
                                               const xcb_input_xi_get_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_8_end (const xcb_input_xi_get_property_reply_t *R,
                                            const xcb_input_xi_get_property_items_t *S);

uint16_t *
xcb_input_xi_get_property_items_data_16 (const xcb_input_xi_get_property_items_t *S);

int
xcb_input_xi_get_property_items_data_16_length (const xcb_input_xi_get_property_reply_t *R,
                                                const xcb_input_xi_get_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_16_end (const xcb_input_xi_get_property_reply_t *R,
                                             const xcb_input_xi_get_property_items_t *S);

uint32_t *
xcb_input_xi_get_property_items_data_32 (const xcb_input_xi_get_property_items_t *S);

int
xcb_input_xi_get_property_items_data_32_length (const xcb_input_xi_get_property_reply_t *R,
                                                const xcb_input_xi_get_property_items_t *S);

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_32_end (const xcb_input_xi_get_property_reply_t *R,
                                             const xcb_input_xi_get_property_items_t *S);

int
xcb_input_xi_get_property_items_serialize (void                                    **_buffer,
                                           uint32_t                                  num_items,
                                           uint8_t                                   format,
                                           const xcb_input_xi_get_property_items_t  *_aux);

int
xcb_input_xi_get_property_items_unpack (const void                         *_buffer,
                                        uint32_t                            num_items,
                                        uint8_t                             format,
                                        xcb_input_xi_get_property_items_t  *_aux);

int
xcb_input_xi_get_property_items_sizeof (const void  *_buffer,
                                        uint32_t     num_items,
                                        uint8_t      format);

int
xcb_input_xi_get_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_get_property_cookie_t
xcb_input_xi_get_property (xcb_connection_t      *c,
                           xcb_input_device_id_t  deviceid,
                           uint8_t                _delete,
                           xcb_atom_t             property,
                           xcb_atom_t             type,
                           uint32_t               offset,
                           uint32_t               len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_get_property_cookie_t
xcb_input_xi_get_property_unchecked (xcb_connection_t      *c,
                                     xcb_input_device_id_t  deviceid,
                                     uint8_t                _delete,
                                     xcb_atom_t             property,
                                     xcb_atom_t             type,
                                     uint32_t               offset,
                                     uint32_t               len);

void *
xcb_input_xi_get_property_items (const xcb_input_xi_get_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_get_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_get_property_reply_t *
xcb_input_xi_get_property_reply (xcb_connection_t                    *c,
                                 xcb_input_xi_get_property_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_input_xi_get_selected_events_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_input_xi_get_selected_events_cookie_t
xcb_input_xi_get_selected_events (xcb_connection_t *c,
                                  xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_input_xi_get_selected_events_cookie_t
xcb_input_xi_get_selected_events_unchecked (xcb_connection_t *c,
                                            xcb_window_t      window);

int
xcb_input_xi_get_selected_events_masks_length (const xcb_input_xi_get_selected_events_reply_t *R);

xcb_input_event_mask_iterator_t
xcb_input_xi_get_selected_events_masks_iterator (const xcb_input_xi_get_selected_events_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_xi_get_selected_events_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_input_xi_get_selected_events_reply_t *
xcb_input_xi_get_selected_events_reply (xcb_connection_t                           *c,
                                        xcb_input_xi_get_selected_events_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_barrier_release_pointer_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_barrier_release_pointer_info_t)
 */
void
xcb_input_barrier_release_pointer_info_next (xcb_input_barrier_release_pointer_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_barrier_release_pointer_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_barrier_release_pointer_info_end (xcb_input_barrier_release_pointer_info_iterator_t i);

int
xcb_input_xi_barrier_release_pointer_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_input_xi_barrier_release_pointer_checked (xcb_connection_t                               *c,
                                              uint32_t                                        num_barriers,
                                              const xcb_input_barrier_release_pointer_info_t *barriers);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_input_xi_barrier_release_pointer (xcb_connection_t                               *c,
                                      uint32_t                                        num_barriers,
                                      const xcb_input_barrier_release_pointer_info_t *barriers);

xcb_input_barrier_release_pointer_info_t *
xcb_input_xi_barrier_release_pointer_barriers (const xcb_input_xi_barrier_release_pointer_request_t *R);

int
xcb_input_xi_barrier_release_pointer_barriers_length (const xcb_input_xi_barrier_release_pointer_request_t *R);

xcb_input_barrier_release_pointer_info_iterator_t
xcb_input_xi_barrier_release_pointer_barriers_iterator (const xcb_input_xi_barrier_release_pointer_request_t *R);

int
xcb_input_device_changed_sizeof (const void  *_buffer);

int
xcb_input_device_changed_classes_length (const xcb_input_device_changed_event_t *R);

xcb_input_device_class_iterator_t
xcb_input_device_changed_classes_iterator (const xcb_input_device_changed_event_t *R);

int
xcb_input_key_press_sizeof (const void  *_buffer);

uint32_t *
xcb_input_key_press_button_mask (const xcb_input_key_press_event_t *R);

int
xcb_input_key_press_button_mask_length (const xcb_input_key_press_event_t *R);

xcb_generic_iterator_t
xcb_input_key_press_button_mask_end (const xcb_input_key_press_event_t *R);

uint32_t *
xcb_input_key_press_valuator_mask (const xcb_input_key_press_event_t *R);

int
xcb_input_key_press_valuator_mask_length (const xcb_input_key_press_event_t *R);

xcb_generic_iterator_t
xcb_input_key_press_valuator_mask_end (const xcb_input_key_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_key_press_axisvalues (const xcb_input_key_press_event_t *R);

int
xcb_input_key_press_axisvalues_length (const xcb_input_key_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_key_press_axisvalues_iterator (const xcb_input_key_press_event_t *R);

int
xcb_input_key_release_sizeof (const void  *_buffer  /**< */);

int
xcb_input_button_press_sizeof (const void  *_buffer);

uint32_t *
xcb_input_button_press_button_mask (const xcb_input_button_press_event_t *R);

int
xcb_input_button_press_button_mask_length (const xcb_input_button_press_event_t *R);

xcb_generic_iterator_t
xcb_input_button_press_button_mask_end (const xcb_input_button_press_event_t *R);

uint32_t *
xcb_input_button_press_valuator_mask (const xcb_input_button_press_event_t *R);

int
xcb_input_button_press_valuator_mask_length (const xcb_input_button_press_event_t *R);

xcb_generic_iterator_t
xcb_input_button_press_valuator_mask_end (const xcb_input_button_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_button_press_axisvalues (const xcb_input_button_press_event_t *R);

int
xcb_input_button_press_axisvalues_length (const xcb_input_button_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_button_press_axisvalues_iterator (const xcb_input_button_press_event_t *R);

int
xcb_input_button_release_sizeof (const void  *_buffer  /**< */);

int
xcb_input_motion_sizeof (const void  *_buffer  /**< */);

int
xcb_input_enter_sizeof (const void  *_buffer);

uint32_t *
xcb_input_enter_buttons (const xcb_input_enter_event_t *R);

int
xcb_input_enter_buttons_length (const xcb_input_enter_event_t *R);

xcb_generic_iterator_t
xcb_input_enter_buttons_end (const xcb_input_enter_event_t *R);

int
xcb_input_leave_sizeof (const void  *_buffer  /**< */);

int
xcb_input_focus_in_sizeof (const void  *_buffer  /**< */);

int
xcb_input_focus_out_sizeof (const void  *_buffer  /**< */);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_hierarchy_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_hierarchy_info_t)
 */
void
xcb_input_hierarchy_info_next (xcb_input_hierarchy_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_hierarchy_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_input_hierarchy_info_end (xcb_input_hierarchy_info_iterator_t i);

int
xcb_input_hierarchy_sizeof (const void  *_buffer);

xcb_input_hierarchy_info_t *
xcb_input_hierarchy_infos (const xcb_input_hierarchy_event_t *R);

int
xcb_input_hierarchy_infos_length (const xcb_input_hierarchy_event_t *R);

xcb_input_hierarchy_info_iterator_t
xcb_input_hierarchy_infos_iterator (const xcb_input_hierarchy_event_t *R);

int
xcb_input_raw_key_press_sizeof (const void  *_buffer);

uint32_t *
xcb_input_raw_key_press_valuator_mask (const xcb_input_raw_key_press_event_t *R);

int
xcb_input_raw_key_press_valuator_mask_length (const xcb_input_raw_key_press_event_t *R);

xcb_generic_iterator_t
xcb_input_raw_key_press_valuator_mask_end (const xcb_input_raw_key_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_key_press_axisvalues (const xcb_input_raw_key_press_event_t *R);

int
xcb_input_raw_key_press_axisvalues_length (const xcb_input_raw_key_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_key_press_axisvalues_iterator (const xcb_input_raw_key_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_key_press_axisvalues_raw (const xcb_input_raw_key_press_event_t *R);

int
xcb_input_raw_key_press_axisvalues_raw_length (const xcb_input_raw_key_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_key_press_axisvalues_raw_iterator (const xcb_input_raw_key_press_event_t *R);

int
xcb_input_raw_key_release_sizeof (const void  *_buffer  /**< */);

int
xcb_input_raw_button_press_sizeof (const void  *_buffer);

uint32_t *
xcb_input_raw_button_press_valuator_mask (const xcb_input_raw_button_press_event_t *R);

int
xcb_input_raw_button_press_valuator_mask_length (const xcb_input_raw_button_press_event_t *R);

xcb_generic_iterator_t
xcb_input_raw_button_press_valuator_mask_end (const xcb_input_raw_button_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_button_press_axisvalues (const xcb_input_raw_button_press_event_t *R);

int
xcb_input_raw_button_press_axisvalues_length (const xcb_input_raw_button_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_button_press_axisvalues_iterator (const xcb_input_raw_button_press_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_button_press_axisvalues_raw (const xcb_input_raw_button_press_event_t *R);

int
xcb_input_raw_button_press_axisvalues_raw_length (const xcb_input_raw_button_press_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_button_press_axisvalues_raw_iterator (const xcb_input_raw_button_press_event_t *R);

int
xcb_input_raw_button_release_sizeof (const void  *_buffer  /**< */);

int
xcb_input_raw_motion_sizeof (const void  *_buffer  /**< */);

int
xcb_input_touch_begin_sizeof (const void  *_buffer);

uint32_t *
xcb_input_touch_begin_button_mask (const xcb_input_touch_begin_event_t *R);

int
xcb_input_touch_begin_button_mask_length (const xcb_input_touch_begin_event_t *R);

xcb_generic_iterator_t
xcb_input_touch_begin_button_mask_end (const xcb_input_touch_begin_event_t *R);

uint32_t *
xcb_input_touch_begin_valuator_mask (const xcb_input_touch_begin_event_t *R);

int
xcb_input_touch_begin_valuator_mask_length (const xcb_input_touch_begin_event_t *R);

xcb_generic_iterator_t
xcb_input_touch_begin_valuator_mask_end (const xcb_input_touch_begin_event_t *R);

xcb_input_fp3232_t *
xcb_input_touch_begin_axisvalues (const xcb_input_touch_begin_event_t *R);

int
xcb_input_touch_begin_axisvalues_length (const xcb_input_touch_begin_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_touch_begin_axisvalues_iterator (const xcb_input_touch_begin_event_t *R);

int
xcb_input_touch_update_sizeof (const void  *_buffer  /**< */);

int
xcb_input_touch_end_sizeof (const void  *_buffer  /**< */);

int
xcb_input_raw_touch_begin_sizeof (const void  *_buffer);

uint32_t *
xcb_input_raw_touch_begin_valuator_mask (const xcb_input_raw_touch_begin_event_t *R);

int
xcb_input_raw_touch_begin_valuator_mask_length (const xcb_input_raw_touch_begin_event_t *R);

xcb_generic_iterator_t
xcb_input_raw_touch_begin_valuator_mask_end (const xcb_input_raw_touch_begin_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_touch_begin_axisvalues (const xcb_input_raw_touch_begin_event_t *R);

int
xcb_input_raw_touch_begin_axisvalues_length (const xcb_input_raw_touch_begin_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_touch_begin_axisvalues_iterator (const xcb_input_raw_touch_begin_event_t *R);

xcb_input_fp3232_t *
xcb_input_raw_touch_begin_axisvalues_raw (const xcb_input_raw_touch_begin_event_t *R);

int
xcb_input_raw_touch_begin_axisvalues_raw_length (const xcb_input_raw_touch_begin_event_t *R);

xcb_input_fp3232_iterator_t
xcb_input_raw_touch_begin_axisvalues_raw_iterator (const xcb_input_raw_touch_begin_event_t *R);

int
xcb_input_raw_touch_update_sizeof (const void  *_buffer  /**< */);

int
xcb_input_raw_touch_end_sizeof (const void  *_buffer  /**< */);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_input_event_class_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d44 3
a46 3
    xcb_input_key_code_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d55 3
a57 3
    xcb_input_device_id_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d66 3
a68 3
    xcb_input_fp1616_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d75 2
a76 2
    int32_t  integral; /**<  */
    uint32_t frac; /**<  */
d83 3
a85 3
    xcb_input_fp3232_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d92 1
a92 1
    unsigned int sequence; /**<  */
d102 5
a106 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t name_len; /**<  */
    uint8_t  pad0[2]; /**<  */
d113 8
a120 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t server_major; /**<  */
    uint16_t server_minor; /**<  */
    uint8_t  present; /**<  */
    uint8_t  pad1[19]; /**<  */
d150 5
a154 5
    xcb_atom_t device_type; /**<  */
    uint8_t    device_id; /**<  */
    uint8_t    num_class_info; /**<  */
    uint8_t    device_use; /**<  */
    uint8_t    pad0; /**<  */
d161 3
a163 3
    xcb_input_device_info_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d170 6
a175 6
    uint8_t              class_id; /**<  */
    uint8_t              len; /**<  */
    xcb_input_key_code_t min_keycode; /**<  */
    xcb_input_key_code_t max_keycode; /**<  */
    uint16_t             num_keys; /**<  */
    uint8_t              pad0[2]; /**<  */
d182 3
a184 3
    xcb_input_key_info_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d191 3
a193 3
    uint8_t  class_id; /**<  */
    uint8_t  len; /**<  */
    uint16_t num_buttons; /**<  */
d200 3
a202 3
    xcb_input_button_info_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d209 3
a211 3
    uint32_t resolution; /**<  */
    int32_t  minimum; /**<  */
    int32_t  maximum; /**<  */
d218 3
a220 3
    xcb_input_axis_info_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d227 5
a231 5
    uint8_t  class_id; /**<  */
    uint8_t  len; /**<  */
    uint8_t  axes_len; /**<  */
    uint8_t  mode; /**<  */
    uint32_t motion_size; /**<  */
d238 3
a240 3
    xcb_input_valuator_info_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d244 21
d268 2
a269 2
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
d272 3
d279 3
a281 3
    xcb_input_input_info_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d288 1
a288 1
    uint8_t len; /**<  */
d295 3
a297 3
    xcb_input_device_name_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d304 1
a304 1
    unsigned int sequence; /**<  */
d314 3
a316 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d323 6
a328 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  devices_len; /**<  */
    uint8_t  pad1[23]; /**<  */
d335 2
a336 2
    uint8_t class_id; /**<  */
    uint8_t event_type_base; /**<  */
d343 3
a345 3
    xcb_input_input_class_info_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d352 1
a352 1
    unsigned int sequence; /**<  */
d362 5
a366 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d373 6
a378 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  num_classes; /**<  */
    uint8_t  pad1[23]; /**<  */
d388 5
a392 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d399 1
a399 1
    unsigned int sequence; /**<  */
d409 6
a414 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  mode; /**<  */
    uint8_t  pad0[2]; /**<  */
d421 6
a426 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d436 6
a441 6
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint16_t     num_classes; /**<  */
    uint8_t      pad0[2]; /**<  */
d448 1
a448 1
    unsigned int sequence; /**<  */
d458 4
a461 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d468 7
a474 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_this_classes; /**<  */
    uint16_t num_all_classes; /**<  */
    uint8_t  pad1[20]; /**<  */
d489 7
a495 7
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint16_t     num_classes; /**<  */
    uint8_t      mode; /**<  */
    uint8_t      pad0; /**<  */
d502 1
a502 1
    unsigned int sequence; /**<  */
d512 4
a515 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d522 6
a527 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_classes; /**<  */
    uint8_t  pad1[22]; /**<  */
d534 1
a534 1
    xcb_timestamp_t time; /**<  */
d541 4
a544 3
    xcb_input_device_time_coord_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
d551 1
a551 1
    unsigned int sequence; /**<  */
d561 7
a567 6
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_timestamp_t start; /**<  */
    xcb_timestamp_t stop; /**<  */
    uint8_t         device_id; /**<  */
d574 8
a581 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_events; /**<  */
    uint8_t  num_axes; /**<  */
    uint8_t  device_mode; /**<  */
    uint8_t  pad1[18]; /**<  */
d588 1
a588 1
    unsigned int sequence; /**<  */
d598 5
a602 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d609 6
a614 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d621 1
a621 1
    unsigned int sequence; /**<  */
d631 7
a637 7
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  x_axis; /**<  */
    uint8_t  y_axis; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0; /**<  */
d644 6
a649 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d656 1
a656 1
    unsigned int sequence; /**<  */
d666 11
a676 11
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_window_t    grab_window; /**<  */
    xcb_timestamp_t time; /**<  */
    uint16_t        num_classes; /**<  */
    uint8_t         this_device_mode; /**<  */
    uint8_t         other_device_mode; /**<  */
    uint8_t         owner_events; /**<  */
    uint8_t         device_id; /**<  */
    uint8_t         pad0[2]; /**<  */
d683 6
a688 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d698 6
a703 5
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         device_id; /**<  */
d706 4
d717 13
a729 13
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t grab_window; /**<  */
    uint16_t     num_classes; /**<  */
    uint16_t     modifiers; /**<  */
    uint8_t      modifier_device; /**<  */
    uint8_t      grabbed_device; /**<  */
    uint8_t      key; /**<  */
    uint8_t      this_device_mode; /**<  */
    uint8_t      other_device_mode; /**<  */
    uint8_t      owner_events; /**<  */
    uint8_t      pad0[2]; /**<  */
d739 8
a746 8
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t grabWindow; /**<  */
    uint16_t     modifiers; /**<  */
    uint8_t      modifier_device; /**<  */
    uint8_t      key; /**<  */
    uint8_t      grabbed_device; /**<  */
d756 13
a768 13
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t grab_window; /**<  */
    uint8_t      grabbed_device; /**<  */
    uint8_t      modifier_device; /**<  */
    uint16_t     num_classes; /**<  */
    uint16_t     modifiers; /**<  */
    uint8_t      this_device_mode; /**<  */
    uint8_t      other_device_mode; /**<  */
    uint8_t      button; /**<  */
    uint8_t      owner_events; /**<  */
    uint8_t      pad0[2]; /**<  */
d778 9
a786 8
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t grab_window; /**<  */
    uint16_t     modifiers; /**<  */
    uint8_t      modifier_device; /**<  */
    uint8_t      button; /**<  */
    uint8_t      grabbed_device; /**<  */
d805 7
a811 6
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         mode; /**<  */
    uint8_t         device_id; /**<  */
d818 1
a818 1
    unsigned int sequence; /**<  */
d828 5
a832 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d839 8
a846 8
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_window_t    focus; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         revert_to; /**<  */
    uint8_t         pad1[15]; /**<  */
d856 8
a863 7
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_window_t    focus; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         revert_to; /**<  */
    uint8_t         device_id; /**<  */
d879 12
a890 12
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint16_t pitch; /**<  */
    uint16_t duration; /**<  */
    uint32_t led_mask; /**<  */
    uint32_t led_values; /**<  */
    uint8_t  global_auto_repeat; /**<  */
    uint8_t  click; /**<  */
    uint8_t  percent; /**<  */
    uint8_t  pad0; /**<  */
    uint8_t  auto_repeats[32]; /**<  */
d897 3
a899 3
    xcb_input_kbd_feedback_state_t *data; /**<  */
    int                             rem; /**<  */
    int                             index; /**<  */
d906 7
a912 7
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  pad0[2]; /**<  */
    uint16_t accel_num; /**<  */
    uint16_t accel_denom; /**<  */
    uint16_t threshold; /**<  */
d919 3
a921 3
    xcb_input_ptr_feedback_state_t *data; /**<  */
    int                             rem; /**<  */
    int                             index; /**<  */
d928 6
a933 6
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint32_t resolution; /**<  */
    int32_t  min_value; /**<  */
    int32_t  max_value; /**<  */
d940 3
a942 3
    xcb_input_integer_feedback_state_t *data; /**<  */
    int                                 rem; /**<  */
    int                                 index; /**<  */
d949 5
a953 5
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint16_t max_symbols; /**<  */
    uint16_t num_keysyms; /**<  */
d960 3
a962 3
    xcb_input_string_feedback_state_t *data; /**<  */
    int                                rem; /**<  */
    int                                index; /**<  */
d969 7
a975 7
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  percent; /**<  */
    uint8_t  pad0[3]; /**<  */
    uint16_t pitch; /**<  */
    uint16_t duration; /**<  */
d982 3
a984 3
    xcb_input_bell_feedback_state_t *data; /**<  */
    int                              rem; /**<  */
    int                              index; /**<  */
d991 5
a995 5
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint32_t led_mask; /**<  */
    uint32_t led_values; /**<  */
d1002 3
a1004 3
    xcb_input_led_feedback_state_t *data; /**<  */
    int                             rem; /**<  */
    int                             index; /**<  */
d1008 43
d1054 3
a1056 3
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
d1059 3
d1066 3
a1068 3
    xcb_input_feedback_state_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d1075 1
a1075 1
    unsigned int sequence; /**<  */
d1085 5
a1089 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d1096 6
a1101 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_feedbacks; /**<  */
    uint8_t  pad1[22]; /**<  */
d1108 11
a1118 11
    uint8_t              class_id; /**<  */
    uint8_t              feedback_id; /**<  */
    uint16_t             len; /**<  */
    xcb_input_key_code_t key; /**<  */
    uint8_t              auto_repeat_mode; /**<  */
    int8_t               key_click_percent; /**<  */
    int8_t               bell_percent; /**<  */
    int16_t              bell_pitch; /**<  */
    int16_t              bell_duration; /**<  */
    uint32_t             led_mask; /**<  */
    uint32_t             led_values; /**<  */
d1125 3
a1127 3
    xcb_input_kbd_feedback_ctl_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d1134 7
a1140 7
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  pad0[2]; /**<  */
    int16_t  num; /**<  */
    int16_t  denom; /**<  */
    int16_t  threshold; /**<  */
d1147 3
a1149 3
    xcb_input_ptr_feedback_ctl_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d1156 4
a1159 4
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    int32_t  int_to_display; /**<  */
d1166 3
a1168 3
    xcb_input_integer_feedback_ctl_t *data; /**<  */
    int                               rem; /**<  */
    int                               index; /**<  */
d1175 5
a1179 5
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  pad0[2]; /**<  */
    uint16_t num_keysyms; /**<  */
d1186 3
a1188 3
    xcb_input_string_feedback_ctl_t *data; /**<  */
    int                              rem; /**<  */
    int                              index; /**<  */
d1195 7
a1201 7
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    int8_t   percent; /**<  */
    uint8_t  pad0[3]; /**<  */
    int16_t  pitch; /**<  */
    int16_t  duration; /**<  */
d1208 3
a1210 3
    xcb_input_bell_feedback_ctl_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
d1217 5
a1221 5
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
    uint32_t led_mask; /**<  */
    uint32_t led_values; /**<  */
d1228 3
a1230 3
    xcb_input_led_feedback_ctl_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d1234 40
d1277 3
a1279 3
    uint8_t  class_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint16_t len; /**<  */
d1282 3
d1289 3
a1291 3
    xcb_input_feedback_ctl_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d1294 16
d1317 7
a1323 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t mask; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  feedback_id; /**<  */
d1330 1
a1330 1
    unsigned int sequence; /**<  */
d1340 7
a1346 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    uint8_t              device_id; /**<  */
    xcb_input_key_code_t first_keycode; /**<  */
    uint8_t              count; /**<  */
d1353 6
a1358 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  keysyms_per_keycode; /**<  */
    uint8_t  pad1[23]; /**<  */
d1368 7
a1374 7
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    uint8_t              device_id; /**<  */
    xcb_input_key_code_t first_keycode; /**<  */
    uint8_t              keysyms_per_keycode; /**<  */
    uint8_t              keycode_count; /**<  */
d1381 1
a1381 1
    unsigned int sequence; /**<  */
d1391 5
a1395 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d1402 6
a1407 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  keycodes_per_modifier; /**<  */
    uint8_t  pad1[23]; /**<  */
d1414 1
a1414 1
    unsigned int sequence; /**<  */
d1424 6
a1429 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  keycodes_per_modifier; /**<  */
    uint8_t  pad0; /**<  */
d1436 6
a1441 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d1448 1
a1448 1
    unsigned int sequence; /**<  */
d1458 5
a1462 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d1469 6
a1474 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  map_size; /**<  */
    uint8_t  pad1[23]; /**<  */
d1481 1
a1481 1
    unsigned int sequence; /**<  */
d1491 6
a1496 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  map_size; /**<  */
    uint8_t  pad0[2]; /**<  */
d1503 6
a1508 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d1515 5
a1519 5
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
    uint8_t num_keys; /**<  */
    uint8_t pad0; /**<  */
    uint8_t keys[32]; /**<  */
d1526 3
a1528 3
    xcb_input_key_state_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d1535 5
a1539 5
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
    uint8_t num_buttons; /**<  */
    uint8_t pad0; /**<  */
    uint8_t buttons[32]; /**<  */
d1546 3
a1548 3
    xcb_input_button_state_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d1551 5
d1560 4
a1563 4
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
    uint8_t num_valuators; /**<  */
    uint8_t mode; /**<  */
d1570 3
a1572 3
    xcb_input_valuator_state_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d1576 21
d1600 2
a1601 4
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
    uint8_t num_items; /**<  */
    uint8_t pad0; /**<  */
d1604 3
d1611 3
a1613 3
    xcb_input_input_state_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d1620 1
a1620 1
    unsigned int sequence; /**<  */
d1630 5
a1634 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d1641 6
a1646 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  num_classes; /**<  */
    uint8_t  pad1[23]; /**<  */
d1656 9
a1664 9
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t destination; /**<  */
    uint8_t      device_id; /**<  */
    uint8_t      propagate; /**<  */
    uint16_t     num_classes; /**<  */
    uint8_t      num_events; /**<  */
    uint8_t      pad0[3]; /**<  */
d1674 7
a1680 7
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  feedback_id; /**<  */
    uint8_t  feedback_class; /**<  */
    int8_t   percent; /**<  */
d1687 1
a1687 1
    unsigned int sequence; /**<  */
d1697 7
a1703 7
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  first_valuator; /**<  */
    uint8_t  num_valuators; /**<  */
    uint8_t  pad0; /**<  */
d1710 6
a1715 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d1730 3
a1732 3
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint32_t num_valuators; /**<  */
d1739 3
a1741 3
    xcb_input_device_resolution_state_t *data; /**<  */
    int                                  rem; /**<  */
    int                                  index; /**<  */
d1748 10
a1757 10
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    int32_t  min_x; /**<  */
    int32_t  max_x; /**<  */
    int32_t  min_y; /**<  */
    int32_t  max_y; /**<  */
    uint32_t flip_x; /**<  */
    uint32_t flip_y; /**<  */
    uint32_t rotation; /**<  */
    uint32_t button_threshold; /**<  */
d1764 3
a1766 3
    xcb_input_device_abs_calib_state_t *data; /**<  */
    int                                 rem; /**<  */
    int                                 index; /**<  */
d1773 8
a1780 8
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint32_t offset_x; /**<  */
    uint32_t offset_y; /**<  */
    uint32_t width; /**<  */
    uint32_t height; /**<  */
    uint32_t screen; /**<  */
    uint32_t following; /**<  */
d1787 3
a1789 3
    xcb_input_device_abs_area_state_t *data; /**<  */
    int                                rem; /**<  */
    int                                index; /**<  */
d1796 5
a1800 5
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  status; /**<  */
    uint8_t  iscore; /**<  */
    uint8_t  pad0[2]; /**<  */
d1807 3
a1809 3
    xcb_input_device_core_state_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
d1816 4
a1819 4
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  enable; /**<  */
    uint8_t  pad0[3]; /**<  */
d1826 3
a1828 3
    xcb_input_device_enable_state_t *data; /**<  */
    int                              rem; /**<  */
    int                              index; /**<  */
d1832 39
d1874 2
a1875 2
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
d1878 3
d1885 3
a1887 3
    xcb_input_device_state_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d1894 1
a1894 1
    unsigned int sequence; /**<  */
d1904 6
a1909 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t control_id; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0; /**<  */
d1916 6
a1921 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d1928 5
a1932 5
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  first_valuator; /**<  */
    uint8_t  num_valuators; /**<  */
    uint8_t  pad0[2]; /**<  */
d1939 3
a1941 3
    xcb_input_device_resolution_ctl_t *data; /**<  */
    int                                rem; /**<  */
    int                                index; /**<  */
d1948 10
a1957 10
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    int32_t  min_x; /**<  */
    int32_t  max_x; /**<  */
    int32_t  min_y; /**<  */
    int32_t  max_y; /**<  */
    uint32_t flip_x; /**<  */
    uint32_t flip_y; /**<  */
    uint32_t rotation; /**<  */
    uint32_t button_threshold; /**<  */
d1964 3
a1966 3
    xcb_input_device_abs_calib_ctl_t *data; /**<  */
    int                               rem; /**<  */
    int                               index; /**<  */
d1973 8
a1980 8
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint32_t offset_x; /**<  */
    uint32_t offset_y; /**<  */
    int32_t  width; /**<  */
    int32_t  height; /**<  */
    int32_t  screen; /**<  */
    uint32_t following; /**<  */
d1987 3
a1989 3
    xcb_input_device_abs_area_ctrl_t *data; /**<  */
    int                               rem; /**<  */
    int                               index; /**<  */
d1996 4
a1999 4
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad0[3]; /**<  */
d2006 3
a2008 3
    xcb_input_device_core_ctrl_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d2015 4
a2018 4
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
    uint8_t  enable; /**<  */
    uint8_t  pad0[3]; /**<  */
d2025 3
a2027 3
    xcb_input_device_enable_ctrl_t *data; /**<  */
    int                             rem; /**<  */
    int                             index; /**<  */
d2031 38
d2072 2
a2073 2
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
d2076 3
d2083 3
a2085 3
    xcb_input_device_ctl_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d2092 1
a2092 1
    unsigned int sequence; /**<  */
d2102 6
a2107 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t control_id; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0; /**<  */
d2114 6
a2119 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d2126 1
a2126 1
    unsigned int sequence; /**<  */
d2136 5
a2140 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
d2147 6
a2152 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_atoms; /**<  */
    uint8_t  pad1[22]; /**<  */
d2165 3
a2167 3
    uint8_t  *data8; /**<  */
    uint16_t *data16; /**<  */
    uint32_t *data32; /**<  */
d2177 10
a2186 10
    uint8_t    major_opcode; /**<  */
    uint8_t    minor_opcode; /**<  */
    uint16_t   length; /**<  */
    xcb_atom_t property; /**<  */
    xcb_atom_t type; /**<  */
    uint8_t    device_id; /**<  */
    uint8_t    format; /**<  */
    uint8_t    mode; /**<  */
    uint8_t    pad0; /**<  */
    uint32_t   num_items; /**<  */
d2196 6
a2201 6
    uint8_t    major_opcode; /**<  */
    uint8_t    minor_opcode; /**<  */
    uint16_t   length; /**<  */
    xcb_atom_t property; /**<  */
    uint8_t    device_id; /**<  */
    uint8_t    pad0[3]; /**<  */
d2208 1
a2208 1
    unsigned int sequence; /**<  */
d2218 10
a2227 10
    uint8_t    major_opcode; /**<  */
    uint8_t    minor_opcode; /**<  */
    uint16_t   length; /**<  */
    xcb_atom_t property; /**<  */
    xcb_atom_t type; /**<  */
    uint32_t   offset; /**<  */
    uint32_t   len; /**<  */
    uint8_t    device_id; /**<  */
    uint8_t    _delete; /**<  */
    uint8_t    pad0[2]; /**<  */
d2234 3
a2236 3
    uint8_t  *data8; /**<  */
    uint16_t *data16; /**<  */
    uint32_t *data32; /**<  */
d2243 10
a2252 10
    uint8_t    response_type; /**<  */
    uint8_t    pad0; /**<  */
    uint16_t   sequence; /**<  */
    uint32_t   length; /**<  */
    xcb_atom_t type; /**<  */
    uint32_t   bytes_after; /**<  */
    uint32_t   num_items; /**<  */
    uint8_t    format; /**<  */
    uint8_t    device_id; /**<  */
    uint8_t    pad1[10]; /**<  */
d2264 4
a2267 4
    uint8_t base; /**<  */
    uint8_t latched; /**<  */
    uint8_t locked; /**<  */
    uint8_t effective; /**<  */
d2274 3
a2276 3
    xcb_input_group_info_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d2283 4
a2286 4
    uint32_t base; /**<  */
    uint32_t latched; /**<  */
    uint32_t locked; /**<  */
    uint32_t effective; /**<  */
d2293 3
a2295 3
    xcb_input_modifier_info_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d2302 1
a2302 1
    unsigned int sequence; /**<  */
d2312 6
a2317 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2324 15
a2338 15
    uint8_t                   response_type; /**<  */
    uint8_t                   pad0; /**<  */
    uint16_t                  sequence; /**<  */
    uint32_t                  length; /**<  */
    xcb_window_t              root; /**<  */
    xcb_window_t              child; /**<  */
    xcb_input_fp1616_t        root_x; /**<  */
    xcb_input_fp1616_t        root_y; /**<  */
    xcb_input_fp1616_t        win_x; /**<  */
    xcb_input_fp1616_t        win_y; /**<  */
    uint8_t                   same_screen; /**<  */
    uint8_t                   pad1; /**<  */
    uint16_t                  buttons_len; /**<  */
    xcb_input_modifier_info_t mods; /**<  */
    xcb_input_group_info_t    group; /**<  */
d2348 13
a2360 13
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          src_win; /**<  */
    xcb_window_t          dst_win; /**<  */
    xcb_input_fp1616_t    src_x; /**<  */
    xcb_input_fp1616_t    src_y; /**<  */
    uint16_t              src_width; /**<  */
    uint16_t              src_height; /**<  */
    xcb_input_fp1616_t    dst_x; /**<  */
    xcb_input_fp1616_t    dst_y; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2370 7
a2376 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_cursor_t          cursor; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2395 5
a2399 5
    uint16_t type; /**<  */
    uint16_t len; /**<  */
    uint16_t name_len; /**<  */
    uint8_t  send_core; /**<  */
    uint8_t  enable; /**<  */
d2406 3
a2408 3
    xcb_input_add_master_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d2415 7
a2421 7
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               return_mode; /**<  */
    uint8_t               pad0; /**<  */
    xcb_input_device_id_t return_pointer; /**<  */
    xcb_input_device_id_t return_keyboard; /**<  */
d2428 3
a2430 3
    xcb_input_remove_master_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d2437 4
a2440 4
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_input_device_id_t master; /**<  */
d2447 3
a2449 3
    xcb_input_attach_slave_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d2456 4
a2459 4
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2466 3
a2468 3
    xcb_input_detach_slave_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d2472 27
d2502 2
a2503 2
    uint16_t type; /**<  */
    uint16_t len; /**<  */
d2506 3
d2513 3
a2515 3
    xcb_input_hierarchy_change_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d2525 5
a2529 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  num_changes; /**<  */
    uint8_t  pad0[3]; /**<  */
d2539 6
a2544 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2551 1
a2551 1
    unsigned int sequence; /**<  */
d2561 4
a2564 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d2571 8
a2578 8
    uint8_t               response_type; /**<  */
    uint8_t               pad0; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint8_t               set; /**<  */
    uint8_t               pad1; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad2[20]; /**<  */
d2614 2
a2615 2
    xcb_input_device_id_t deviceid; /**<  */
    uint16_t              mask_len; /**<  */
d2622 3
a2624 3
    xcb_input_event_mask_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d2634 6
a2639 6
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint16_t     num_mask; /**<  */
    uint8_t      pad0[2]; /**<  */
d2646 1
a2646 1
    unsigned int sequence; /**<  */
d2656 5
a2660 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
d2667 7
a2673 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
    uint8_t  pad1[20]; /**<  */
d2711 4
a2714 4
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              num_buttons; /**<  */
d2721 3
a2723 3
    xcb_input_button_class_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d2730 4
a2733 4
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              num_keys; /**<  */
d2740 3
a2742 3
    xcb_input_key_class_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d2749 8
a2756 8
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              number; /**<  */
    uint16_t              scroll_type; /**<  */
    uint8_t               pad0[2]; /**<  */
    uint32_t              flags; /**<  */
    xcb_input_fp3232_t    increment; /**<  */
d2763 3
a2765 3
    xcb_input_scroll_class_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d2772 5
a2776 5
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint8_t               mode; /**<  */
    uint8_t               num_touches; /**<  */
d2783 3
a2785 3
    xcb_input_touch_class_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d2792 11
a2802 11
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              number; /**<  */
    xcb_atom_t            label; /**<  */
    xcb_input_fp3232_t    min; /**<  */
    xcb_input_fp3232_t    max; /**<  */
    xcb_input_fp3232_t    value; /**<  */
    uint32_t              resolution; /**<  */
    uint8_t               mode; /**<  */
    uint8_t               pad0[3]; /**<  */
d2809 3
a2811 3
    xcb_input_valuator_class_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d2815 36
d2854 3
a2856 4
    uint16_t              type; /**<  */
    uint16_t              len; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2859 3
d2866 3
a2868 3
    xcb_input_device_class_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d2875 7
a2881 7
    xcb_input_device_id_t deviceid; /**<  */
    uint16_t              type; /**<  */
    xcb_input_device_id_t attachment; /**<  */
    uint16_t              num_classes; /**<  */
    uint16_t              name_len; /**<  */
    uint8_t               enabled; /**<  */
    uint8_t               pad0; /**<  */
d2888 3
a2890 3
    xcb_input_xi_device_info_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d2897 1
a2897 1
    unsigned int sequence; /**<  */
d2907 5
a2911 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2918 6
a2923 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_infos; /**<  */
    uint8_t  pad1[22]; /**<  */
d2933 7
a2939 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2946 1
a2946 1
    unsigned int sequence; /**<  */
d2956 5
a2960 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d2967 6
a2972 6
    uint8_t      response_type; /**<  */
    uint8_t      pad0; /**<  */
    uint16_t     sequence; /**<  */
    uint32_t     length; /**<  */
    xcb_window_t focus; /**<  */
    uint8_t      pad1[20]; /**<  */
d2984 1
a2984 1
    unsigned int sequence; /**<  */
d2994 12
a3005 12
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_cursor_t          cursor; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               mode; /**<  */
    uint8_t               paired_device_mode; /**<  */
    uint8_t               owner_events; /**<  */
    uint8_t               pad0; /**<  */
    uint16_t              mask_len; /**<  */
d3012 6
a3017 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
d3027 6
a3032 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d3053 9
a3061 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               event_mode; /**<  */
    uint8_t               pad0; /**<  */
    uint32_t              touchid; /**<  */
    xcb_window_t          grab_window; /**<  */
d3086 3
a3088 3
    uint32_t modifiers; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad0[3]; /**<  */
d3095 3
a3097 3
    xcb_input_grab_modifier_info_t *data; /**<  */
    int                             rem; /**<  */
    int                             index; /**<  */
d3104 1
a3104 1
    unsigned int sequence; /**<  */
d3114 15
a3128 15
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_window_t          grab_window; /**<  */
    xcb_cursor_t          cursor; /**<  */
    uint32_t              detail; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint16_t              num_modifiers; /**<  */
    uint16_t              mask_len; /**<  */
    uint8_t               grab_type; /**<  */
    uint8_t               grab_mode; /**<  */
    uint8_t               paired_device_mode; /**<  */
    uint8_t               owner_events; /**<  */
    uint8_t               pad0[2]; /**<  */
d3135 6
a3140 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_modifiers; /**<  */
    uint8_t  pad1[22]; /**<  */
d3150 9
a3158 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          grab_window; /**<  */
    uint32_t              detail; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint16_t              num_modifiers; /**<  */
    uint8_t               grab_type; /**<  */
    uint8_t               pad0[3]; /**<  */
d3165 1
a3165 1
    unsigned int sequence; /**<  */
d3175 5
a3179 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
d3186 6
a3191 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_properties; /**<  */
    uint8_t  pad1[22]; /**<  */
d3198 3
a3200 3
    uint8_t  *data8; /**<  */
    uint16_t *data16; /**<  */
    uint32_t *data32; /**<  */
d3210 9
a3218 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               mode; /**<  */
    uint8_t               format; /**<  */
    xcb_atom_t            property; /**<  */
    xcb_atom_t            type; /**<  */
    uint32_t              num_items; /**<  */
d3228 6
a3233 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
    xcb_atom_t            property; /**<  */
d3240 1
a3240 1
    unsigned int sequence; /**<  */
d3250 10
a3259 10
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               _delete; /**<  */
    uint8_t               pad0; /**<  */
    xcb_atom_t            property; /**<  */
    xcb_atom_t            type; /**<  */
    uint32_t              offset; /**<  */
    uint32_t              len; /**<  */
d3266 3
a3268 3
    uint8_t  *data8; /**<  */
    uint16_t *data16; /**<  */
    uint32_t *data32; /**<  */
d3275 9
a3283 9
    uint8_t    response_type; /**<  */
    uint8_t    pad0; /**<  */
    uint16_t   sequence; /**<  */
    uint32_t   length; /**<  */
    xcb_atom_t type; /**<  */
    uint32_t   bytes_after; /**<  */
    uint32_t   num_items; /**<  */
    uint8_t    format; /**<  */
    uint8_t    pad1[11]; /**<  */
d3290 1
a3290 1
    unsigned int sequence; /**<  */
d3300 4
a3303 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d3310 6
a3315 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_masks; /**<  */
    uint8_t  pad1[22]; /**<  */
d3322 4
a3325 4
    xcb_input_device_id_t deviceid; /**<  */
    uint8_t               pad0[2]; /**<  */
    xcb_xfixes_barrier_t  barrier; /**<  */
    uint32_t              eventid; /**<  */
d3332 3
a3334 3
    xcb_input_barrier_release_pointer_info_t *data; /**<  */
    int                                       rem; /**<  */
    int                                       index; /**<  */
d3344 4
a3347 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t num_barriers; /**<  */
d3357 7
a3363 7
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint16_t device_state; /**<  */
    uint8_t  num_valuators; /**<  */
    uint8_t  first_valuator; /**<  */
    int32_t  valuators[6]; /**<  */
d3366 4
d3377 14
a3390 14
    uint8_t         response_type; /**<  */
    uint8_t         detail; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_window_t    root; /**<  */
    xcb_window_t    event; /**<  */
    xcb_window_t    child; /**<  */
    int16_t         root_x; /**<  */
    int16_t         root_y; /**<  */
    int16_t         event_x; /**<  */
    int16_t         event_y; /**<  */
    uint16_t        state; /**<  */
    uint8_t         same_screen; /**<  */
    uint8_t         device_id; /**<  */
d3420 8
a3427 8
    uint8_t         response_type; /**<  */
    uint8_t         detail; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_window_t    window; /**<  */
    uint8_t         mode; /**<  */
    uint8_t         device_id; /**<  */
    uint8_t         pad0[18]; /**<  */
d3445 8
d3460 11
a3470 11
    uint8_t         response_type; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         num_keys; /**<  */
    uint8_t         num_buttons; /**<  */
    uint8_t         num_valuators; /**<  */
    uint8_t         classes_reported; /**<  */
    uint8_t         buttons[4]; /**<  */
    uint8_t         keys[4]; /**<  */
    uint32_t        valuators[3]; /**<  */
d3480 9
a3488 9
    uint8_t              response_type; /**<  */
    uint8_t              device_id; /**<  */
    uint16_t             sequence; /**<  */
    uint8_t              request; /**<  */
    xcb_input_key_code_t first_keycode; /**<  */
    uint8_t              count; /**<  */
    uint8_t              pad0; /**<  */
    xcb_timestamp_t      time; /**<  */
    uint8_t              pad1[20]; /**<  */
d3491 5
d3503 6
a3508 6
    uint8_t         response_type; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         request; /**<  */
    uint8_t         pad0[23]; /**<  */
d3518 4
a3521 4
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint8_t  keys[28]; /**<  */
d3531 4
a3534 4
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint8_t  buttons[28]; /**<  */
d3553 8
a3560 8
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         devchange; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        control; /**<  */
    uint8_t         pad1[20]; /**<  */
d3570 7
a3576 7
    uint8_t         response_type; /**<  */
    uint8_t         state; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_atom_t      property; /**<  */
    uint8_t         pad0[19]; /**<  */
    uint8_t         device_id; /**<  */
d3591 12
a3602 12
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint16_t              num_classes; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint8_t               reason; /**<  */
    uint8_t               pad0[11]; /**<  */
    uint32_t              full_sequence; /**<  */
d3616 23
a3638 23
    uint8_t                   response_type; /**<  */
    uint8_t                   extension; /**<  */
    uint16_t                  sequence; /**<  */
    uint32_t                  length; /**<  */
    uint16_t                  event_type; /**<  */
    xcb_input_device_id_t     deviceid; /**<  */
    xcb_timestamp_t           time; /**<  */
    uint32_t                  detail; /**<  */
    xcb_window_t              root; /**<  */
    xcb_window_t              event; /**<  */
    xcb_window_t              child; /**<  */
    uint32_t                  full_sequence; /**<  */
    xcb_input_fp1616_t        root_x; /**<  */
    xcb_input_fp1616_t        root_y; /**<  */
    xcb_input_fp1616_t        event_x; /**<  */
    xcb_input_fp1616_t        event_y; /**<  */
    uint16_t                  buttons_len; /**<  */
    uint16_t                  valuators_len; /**<  */
    xcb_input_device_id_t     sourceid; /**<  */
    uint8_t                   pad0[2]; /**<  */
    uint32_t                  flags; /**<  */
    xcb_input_modifier_info_t mods; /**<  */
    xcb_input_group_info_t    group; /**<  */
d3657 23
a3679 23
    uint8_t                   response_type; /**<  */
    uint8_t                   extension; /**<  */
    uint16_t                  sequence; /**<  */
    uint32_t                  length; /**<  */
    uint16_t                  event_type; /**<  */
    xcb_input_device_id_t     deviceid; /**<  */
    xcb_timestamp_t           time; /**<  */
    uint32_t                  detail; /**<  */
    xcb_window_t              root; /**<  */
    xcb_window_t              event; /**<  */
    xcb_window_t              child; /**<  */
    uint32_t                  full_sequence; /**<  */
    xcb_input_fp1616_t        root_x; /**<  */
    xcb_input_fp1616_t        root_y; /**<  */
    xcb_input_fp1616_t        event_x; /**<  */
    xcb_input_fp1616_t        event_y; /**<  */
    uint16_t                  buttons_len; /**<  */
    uint16_t                  valuators_len; /**<  */
    xcb_input_device_id_t     sourceid; /**<  */
    uint8_t                   pad0[2]; /**<  */
    uint32_t                  flags; /**<  */
    xcb_input_modifier_info_t mods; /**<  */
    xcb_input_group_info_t    group; /**<  */
d3719 23
a3741 23
    uint8_t                   response_type; /**<  */
    uint8_t                   extension; /**<  */
    uint16_t                  sequence; /**<  */
    uint32_t                  length; /**<  */
    uint16_t                  event_type; /**<  */
    xcb_input_device_id_t     deviceid; /**<  */
    xcb_timestamp_t           time; /**<  */
    xcb_input_device_id_t     sourceid; /**<  */
    uint8_t                   mode; /**<  */
    uint8_t                   detail; /**<  */
    xcb_window_t              root; /**<  */
    xcb_window_t              event; /**<  */
    xcb_window_t              child; /**<  */
    uint32_t                  full_sequence; /**<  */
    xcb_input_fp1616_t        root_x; /**<  */
    xcb_input_fp1616_t        root_y; /**<  */
    xcb_input_fp1616_t        event_x; /**<  */
    xcb_input_fp1616_t        event_y; /**<  */
    uint8_t                   same_screen; /**<  */
    uint8_t                   focus; /**<  */
    uint16_t                  buttons_len; /**<  */
    xcb_input_modifier_info_t mods; /**<  */
    xcb_input_group_info_t    group; /**<  */
d3774 6
a3779 6
    xcb_input_device_id_t deviceid; /**<  */
    xcb_input_device_id_t attachment; /**<  */
    uint8_t               type; /**<  */
    uint8_t               enabled; /**<  */
    uint8_t               pad0[2]; /**<  */
    uint32_t              flags; /**<  */
d3786 3
a3788 3
    xcb_input_hierarchy_info_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d3798 11
a3808 11
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              flags; /**<  */
    uint16_t              num_infos; /**<  */
    uint8_t               pad0[10]; /**<  */
    uint32_t              full_sequence; /**<  */
d3824 11
a3834 11
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    xcb_atom_t            property; /**<  */
    uint8_t               what; /**<  */
    uint8_t               pad0[11]; /**<  */
    uint32_t              full_sequence; /**<  */
d3844 13
a3856 13
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              detail; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              valuators_len; /**<  */
    uint32_t              flags; /**<  */
    uint8_t               pad0[4]; /**<  */
    uint32_t              full_sequence; /**<  */
d3871 13
a3883 13
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              detail; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              valuators_len; /**<  */
    uint32_t              flags; /**<  */
    uint8_t               pad0[4]; /**<  */
    uint32_t              full_sequence; /**<  */
d3908 23
a3930 23
    uint8_t                   response_type; /**<  */
    uint8_t                   extension; /**<  */
    uint16_t                  sequence; /**<  */
    uint32_t                  length; /**<  */
    uint16_t                  event_type; /**<  */
    xcb_input_device_id_t     deviceid; /**<  */
    xcb_timestamp_t           time; /**<  */
    uint32_t                  detail; /**<  */
    xcb_window_t              root; /**<  */
    xcb_window_t              event; /**<  */
    xcb_window_t              child; /**<  */
    uint32_t                  full_sequence; /**<  */
    xcb_input_fp1616_t        root_x; /**<  */
    xcb_input_fp1616_t        root_y; /**<  */
    xcb_input_fp1616_t        event_x; /**<  */
    xcb_input_fp1616_t        event_y; /**<  */
    uint16_t                  buttons_len; /**<  */
    uint16_t                  valuators_len; /**<  */
    xcb_input_device_id_t     sourceid; /**<  */
    uint8_t                   pad0[2]; /**<  */
    uint32_t                  flags; /**<  */
    xcb_input_modifier_info_t mods; /**<  */
    xcb_input_group_info_t    group; /**<  */
d3954 16
a3969 16
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              touchid; /**<  */
    xcb_window_t          root; /**<  */
    xcb_window_t          event; /**<  */
    xcb_window_t          child; /**<  */
    uint32_t              full_sequence; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint8_t               pad0[2]; /**<  */
    uint32_t              flags; /**<  */
    uint8_t               pad1[8]; /**<  */
d3979 13
a3991 13
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              detail; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint16_t              valuators_len; /**<  */
    uint32_t              flags; /**<  */
    uint8_t               pad0[4]; /**<  */
    uint32_t              full_sequence; /**<  */
d4004 5
d4016 20
a4035 20
    uint8_t               response_type; /**<  */
    uint8_t               extension; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    uint16_t              event_type; /**<  */
    xcb_input_device_id_t deviceid; /**<  */
    xcb_timestamp_t       time; /**<  */
    uint32_t              eventid; /**<  */
    xcb_window_t          root; /**<  */
    xcb_window_t          event; /**<  */
    xcb_xfixes_barrier_t  barrier; /**<  */
    uint32_t              full_sequence; /**<  */
    uint32_t              dtime; /**<  */
    uint32_t              flags; /**<  */
    xcb_input_device_id_t sourceid; /**<  */
    uint8_t               pad0[2]; /**<  */
    xcb_input_fp1616_t    root_x; /**<  */
    xcb_input_fp1616_t    root_y; /**<  */
    xcb_input_fp3232_t    dx; /**<  */
    xcb_input_fp3232_t    dy; /**<  */
d4050 3
a4052 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d4062 3
a4064 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d4074 3
a4076 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d4086 3
a4088 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d4098 3
a4100 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d4112 1
a4112 1
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i  /**< */);
d4124 1
a4124 1
xcb_input_event_class_end (xcb_input_event_class_iterator_t i  /**< */);
d4135 1
a4135 1
xcb_input_key_code_next (xcb_input_key_code_iterator_t *i  /**< */);
d4147 1
a4147 1
xcb_input_key_code_end (xcb_input_key_code_iterator_t i  /**< */);
d4158 1
a4158 1
xcb_input_device_id_next (xcb_input_device_id_iterator_t *i  /**< */);
d4170 1
a4170 1
xcb_input_device_id_end (xcb_input_device_id_iterator_t i  /**< */);
d4181 1
a4181 1
xcb_input_fp1616_next (xcb_input_fp1616_iterator_t *i  /**< */);
d4193 1
a4193 1
xcb_input_fp1616_end (xcb_input_fp1616_iterator_t i  /**< */);
d4204 1
a4204 1
xcb_input_fp3232_next (xcb_input_fp3232_iterator_t *i  /**< */);
d4216 1
a4216 1
xcb_input_fp3232_end (xcb_input_fp3232_iterator_t i  /**< */);
d4219 1
a4219 1
xcb_input_get_extension_version_sizeof (const void  *_buffer  /**< */);
d4230 3
a4232 3
xcb_input_get_extension_version (xcb_connection_t *c  /**< */,
                                 uint16_t          name_len  /**< */,
                                 const char       *name  /**< */);
d4246 3
a4248 3
xcb_input_get_extension_version_unchecked (xcb_connection_t *c  /**< */,
                                           uint16_t          name_len  /**< */,
                                           const char       *name  /**< */);
d4265 1
a4265 1
xcb_input_get_extension_version_reply (xcb_connection_t                          *c  /**< */,
d4267 1
a4267 1
                                       xcb_generic_error_t                      **e  /**< */);
d4278 1
a4278 1
xcb_input_device_info_next (xcb_input_device_info_iterator_t *i  /**< */);
d4290 1
a4290 1
xcb_input_device_info_end (xcb_input_device_info_iterator_t i  /**< */);
d4301 1
a4301 1
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i  /**< */);
d4313 1
a4313 1
xcb_input_key_info_end (xcb_input_key_info_iterator_t i  /**< */);
d4324 1
a4324 1
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i  /**< */);
d4336 1
a4336 1
xcb_input_button_info_end (xcb_input_button_info_iterator_t i  /**< */);
d4347 1
a4347 1
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i  /**< */);
d4359 1
a4359 1
xcb_input_axis_info_end (xcb_input_axis_info_iterator_t i  /**< */);
d4362 1
a4362 1
xcb_input_valuator_info_sizeof (const void  *_buffer  /**< */);
d4365 1
a4365 1
xcb_input_valuator_info_axes (const xcb_input_valuator_info_t *R  /**< */);
d4368 1
a4368 1
xcb_input_valuator_info_axes_length (const xcb_input_valuator_info_t *R  /**< */);
d4371 1
a4371 1
xcb_input_valuator_info_axes_iterator (const xcb_input_valuator_info_t *R  /**< */);
d4382 1
a4382 1
xcb_input_valuator_info_next (xcb_input_valuator_info_iterator_t *i  /**< */);
d4394 29
a4422 1
xcb_input_valuator_info_end (xcb_input_valuator_info_iterator_t i  /**< */);
d4433 1
a4433 1
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i  /**< */);
d4445 1
a4445 1
xcb_input_input_info_end (xcb_input_input_info_iterator_t i  /**< */);
d4448 1
a4448 1
xcb_input_device_name_sizeof (const void  *_buffer  /**< */);
d4451 1
a4451 1
xcb_input_device_name_string (const xcb_input_device_name_t *R  /**< */);
d4454 1
a4454 1
xcb_input_device_name_string_length (const xcb_input_device_name_t *R  /**< */);
d4457 1
a4457 1
xcb_input_device_name_string_end (const xcb_input_device_name_t *R  /**< */);
d4468 1
a4468 1
xcb_input_device_name_next (xcb_input_device_name_iterator_t *i  /**< */);
d4480 1
a4480 1
xcb_input_device_name_end (xcb_input_device_name_iterator_t i  /**< */);
d4483 1
a4483 1
xcb_input_list_input_devices_sizeof (const void  *_buffer  /**< */);
d4494 1
a4494 1
xcb_input_list_input_devices (xcb_connection_t *c  /**< */);
d4508 1
a4508 1
xcb_input_list_input_devices_unchecked (xcb_connection_t *c  /**< */);
d4511 1
a4511 1
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R  /**< */);
d4514 1
a4514 1
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R  /**< */);
d4517 13
a4529 1
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R  /**< */);
d4546 1
a4546 1
xcb_input_list_input_devices_reply (xcb_connection_t                       *c  /**< */,
d4548 1
a4548 1
                                    xcb_generic_error_t                   **e  /**< */);
d4559 1
a4559 1
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i  /**< */);
d4571 1
a4571 1
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i  /**< */);
d4574 1
a4574 1
xcb_input_open_device_sizeof (const void  *_buffer  /**< */);
d4585 2
a4586 2
xcb_input_open_device (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */);
d4600 2
a4601 2
xcb_input_open_device_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           device_id  /**< */);
d4604 1
a4604 1
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R  /**< */);
d4607 1
a4607 1
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R  /**< */);
d4610 1
a4610 1
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R  /**< */);
d4627 1
a4627 1
xcb_input_open_device_reply (xcb_connection_t                *c  /**< */,
d4629 1
a4629 1
                             xcb_generic_error_t            **e  /**< */);
d4643 2
a4644 2
xcb_input_close_device_checked (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */);
d4655 2
a4656 2
xcb_input_close_device (xcb_connection_t *c  /**< */,
                        uint8_t           device_id  /**< */);
d4667 3
a4669 3
xcb_input_set_device_mode (xcb_connection_t *c  /**< */,
                           uint8_t           device_id  /**< */,
                           uint8_t           mode  /**< */);
d4683 3
a4685 3
xcb_input_set_device_mode_unchecked (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           mode  /**< */);
d4702 1
a4702 1
xcb_input_set_device_mode_reply (xcb_connection_t                    *c  /**< */,
d4704 1
a4704 1
                                 xcb_generic_error_t                **e  /**< */);
d4707 1
a4707 1
xcb_input_select_extension_event_sizeof (const void  *_buffer  /**< */);
d4721 4
a4724 4
xcb_input_select_extension_event_checked (xcb_connection_t              *c  /**< */,
                                          xcb_window_t                   window  /**< */,
                                          uint16_t                       num_classes  /**< */,
                                          const xcb_input_event_class_t *classes  /**< */);
d4735 7
a4741 4
xcb_input_select_extension_event (xcb_connection_t              *c  /**< */,
                                  xcb_window_t                   window  /**< */,
                                  uint16_t                       num_classes  /**< */,
                                  const xcb_input_event_class_t *classes  /**< */);
d4744 7
a4750 1
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer  /**< */);
d4761 2
a4762 2
xcb_input_get_selected_extension_events (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */);
d4776 2
a4777 2
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c  /**< */,
                                                   xcb_window_t      window  /**< */);
d4780 1
a4780 1
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4783 1
a4783 1
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4786 1
a4786 1
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4789 1
a4789 1
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4792 1
a4792 1
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4795 1
a4795 1
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d4812 1
a4812 1
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c  /**< */,
d4814 1
a4814 1
                                               xcb_generic_error_t                              **e  /**< */);
d4817 1
a4817 1
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */);
d4831 5
a4835 5
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c  /**< */,
                                                     xcb_window_t                   window  /**< */,
                                                     uint16_t                       num_classes  /**< */,
                                                     uint8_t                        mode  /**< */,
                                                     const xcb_input_event_class_t *classes  /**< */);
d4846 8
a4853 5
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c  /**< */,
                                             xcb_window_t                   window  /**< */,
                                             uint16_t                       num_classes  /**< */,
                                             uint8_t                        mode  /**< */,
                                             const xcb_input_event_class_t *classes  /**< */);
d4856 7
a4862 1
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */);
d4873 2
a4874 2
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */);
d4888 2
a4889 2
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c  /**< */,
                                                    xcb_window_t      window  /**< */);
d4892 1
a4892 1
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d4895 1
a4895 1
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d4898 1
a4898 1
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d4915 1
a4915 1
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c  /**< */,
d4917 16
a4932 1
                                                xcb_generic_error_t                               **e  /**< */);
d4943 1
a4943 1
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i  /**< */);
d4955 4
a4958 1
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i  /**< */);
d4969 4
a4972 4
xcb_input_get_device_motion_events (xcb_connection_t *c  /**< */,
                                    xcb_timestamp_t   start  /**< */,
                                    xcb_timestamp_t   stop  /**< */,
                                    uint8_t           device_id  /**< */);
d4986 10
a4995 4
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c  /**< */,
                                              xcb_timestamp_t   start  /**< */,
                                              xcb_timestamp_t   stop  /**< */,
                                              uint8_t           device_id  /**< */);
d5012 1
a5012 1
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c  /**< */,
d5014 1
a5014 1
                                          xcb_generic_error_t                         **e  /**< */);
d5025 2
a5026 2
xcb_input_change_keyboard_device (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */);
d5040 2
a5041 2
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */);
d5058 1
a5058 1
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c  /**< */,
d5060 1
a5060 1
                                        xcb_generic_error_t                       **e  /**< */);
d5071 4
a5074 4
xcb_input_change_pointer_device (xcb_connection_t *c  /**< */,
                                 uint8_t           x_axis  /**< */,
                                 uint8_t           y_axis  /**< */,
                                 uint8_t           device_id  /**< */);
d5088 4
a5091 4
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c  /**< */,
                                           uint8_t           x_axis  /**< */,
                                           uint8_t           y_axis  /**< */,
                                           uint8_t           device_id  /**< */);
d5108 1
a5108 1
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c  /**< */,
d5110 1
a5110 1
                                       xcb_generic_error_t                      **e  /**< */);
d5113 1
a5113 1
xcb_input_grab_device_sizeof (const void  *_buffer  /**< */);
d5124 9
a5132 9
xcb_input_grab_device (xcb_connection_t              *c  /**< */,
                       xcb_window_t                   grab_window  /**< */,
                       xcb_timestamp_t                time  /**< */,
                       uint16_t                       num_classes  /**< */,
                       uint8_t                        this_device_mode  /**< */,
                       uint8_t                        other_device_mode  /**< */,
                       uint8_t                        owner_events  /**< */,
                       uint8_t                        device_id  /**< */,
                       const xcb_input_event_class_t *classes  /**< */);
d5146 9
a5154 9
xcb_input_grab_device_unchecked (xcb_connection_t              *c  /**< */,
                                 xcb_window_t                   grab_window  /**< */,
                                 xcb_timestamp_t                time  /**< */,
                                 uint16_t                       num_classes  /**< */,
                                 uint8_t                        this_device_mode  /**< */,
                                 uint8_t                        other_device_mode  /**< */,
                                 uint8_t                        owner_events  /**< */,
                                 uint8_t                        device_id  /**< */,
                                 const xcb_input_event_class_t *classes  /**< */);
d5171 1
a5171 1
xcb_input_grab_device_reply (xcb_connection_t                *c  /**< */,
d5173 1
a5173 1
                             xcb_generic_error_t            **e  /**< */);
d5187 3
a5189 3
xcb_input_ungrab_device_checked (xcb_connection_t *c  /**< */,
                                 xcb_timestamp_t   time  /**< */,
                                 uint8_t           device_id  /**< */);
d5200 3
a5202 3
xcb_input_ungrab_device (xcb_connection_t *c  /**< */,
                         xcb_timestamp_t   time  /**< */,
                         uint8_t           device_id  /**< */);
d5205 1
a5205 1
xcb_input_grab_device_key_sizeof (const void  *_buffer  /**< */);
d5219 11
a5229 11
xcb_input_grab_device_key_checked (xcb_connection_t              *c  /**< */,
                                   xcb_window_t                   grab_window  /**< */,
                                   uint16_t                       num_classes  /**< */,
                                   uint16_t                       modifiers  /**< */,
                                   uint8_t                        modifier_device  /**< */,
                                   uint8_t                        grabbed_device  /**< */,
                                   uint8_t                        key  /**< */,
                                   uint8_t                        this_device_mode  /**< */,
                                   uint8_t                        other_device_mode  /**< */,
                                   uint8_t                        owner_events  /**< */,
                                   const xcb_input_event_class_t *classes  /**< */);
d5240 20
a5259 11
xcb_input_grab_device_key (xcb_connection_t              *c  /**< */,
                           xcb_window_t                   grab_window  /**< */,
                           uint16_t                       num_classes  /**< */,
                           uint16_t                       modifiers  /**< */,
                           uint8_t                        modifier_device  /**< */,
                           uint8_t                        grabbed_device  /**< */,
                           uint8_t                        key  /**< */,
                           uint8_t                        this_device_mode  /**< */,
                           uint8_t                        other_device_mode  /**< */,
                           uint8_t                        owner_events  /**< */,
                           const xcb_input_event_class_t *classes  /**< */);
d5273 6
a5278 6
xcb_input_ungrab_device_key_checked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      grabWindow  /**< */,
                                     uint16_t          modifiers  /**< */,
                                     uint8_t           modifier_device  /**< */,
                                     uint8_t           key  /**< */,
                                     uint8_t           grabbed_device  /**< */);
d5289 6
a5294 6
xcb_input_ungrab_device_key (xcb_connection_t *c  /**< */,
                             xcb_window_t      grabWindow  /**< */,
                             uint16_t          modifiers  /**< */,
                             uint8_t           modifier_device  /**< */,
                             uint8_t           key  /**< */,
                             uint8_t           grabbed_device  /**< */);
d5297 1
a5297 1
xcb_input_grab_device_button_sizeof (const void  *_buffer  /**< */);
d5311 11
a5321 11
xcb_input_grab_device_button_checked (xcb_connection_t              *c  /**< */,
                                      xcb_window_t                   grab_window  /**< */,
                                      uint8_t                        grabbed_device  /**< */,
                                      uint8_t                        modifier_device  /**< */,
                                      uint16_t                       num_classes  /**< */,
                                      uint16_t                       modifiers  /**< */,
                                      uint8_t                        this_device_mode  /**< */,
                                      uint8_t                        other_device_mode  /**< */,
                                      uint8_t                        button  /**< */,
                                      uint8_t                        owner_events  /**< */,
                                      const xcb_input_event_class_t *classes  /**< */);
d5332 20
a5351 11
xcb_input_grab_device_button (xcb_connection_t              *c  /**< */,
                              xcb_window_t                   grab_window  /**< */,
                              uint8_t                        grabbed_device  /**< */,
                              uint8_t                        modifier_device  /**< */,
                              uint16_t                       num_classes  /**< */,
                              uint16_t                       modifiers  /**< */,
                              uint8_t                        this_device_mode  /**< */,
                              uint8_t                        other_device_mode  /**< */,
                              uint8_t                        button  /**< */,
                              uint8_t                        owner_events  /**< */,
                              const xcb_input_event_class_t *classes  /**< */);
d5365 6
a5370 6
xcb_input_ungrab_device_button_checked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      grab_window  /**< */,
                                        uint16_t          modifiers  /**< */,
                                        uint8_t           modifier_device  /**< */,
                                        uint8_t           button  /**< */,
                                        uint8_t           grabbed_device  /**< */);
d5381 6
a5386 6
xcb_input_ungrab_device_button (xcb_connection_t *c  /**< */,
                                xcb_window_t      grab_window  /**< */,
                                uint16_t          modifiers  /**< */,
                                uint8_t           modifier_device  /**< */,
                                uint8_t           button  /**< */,
                                uint8_t           grabbed_device  /**< */);
d5400 4
a5403 4
xcb_input_allow_device_events_checked (xcb_connection_t *c  /**< */,
                                       xcb_timestamp_t   time  /**< */,
                                       uint8_t           mode  /**< */,
                                       uint8_t           device_id  /**< */);
d5414 4
a5417 4
xcb_input_allow_device_events (xcb_connection_t *c  /**< */,
                               xcb_timestamp_t   time  /**< */,
                               uint8_t           mode  /**< */,
                               uint8_t           device_id  /**< */);
d5428 2
a5429 2
xcb_input_get_device_focus (xcb_connection_t *c  /**< */,
                            uint8_t           device_id  /**< */);
d5443 2
a5444 2
xcb_input_get_device_focus_unchecked (xcb_connection_t *c  /**< */,
                                      uint8_t           device_id  /**< */);
d5461 1
a5461 1
xcb_input_get_device_focus_reply (xcb_connection_t                     *c  /**< */,
d5463 1
a5463 1
                                  xcb_generic_error_t                 **e  /**< */);
d5477 5
a5481 5
xcb_input_set_device_focus_checked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      focus  /**< */,
                                    xcb_timestamp_t   time  /**< */,
                                    uint8_t           revert_to  /**< */,
                                    uint8_t           device_id  /**< */);
d5492 5
a5496 5
xcb_input_set_device_focus (xcb_connection_t *c  /**< */,
                            xcb_window_t      focus  /**< */,
                            xcb_timestamp_t   time  /**< */,
                            uint8_t           revert_to  /**< */,
                            uint8_t           device_id  /**< */);
d5507 1
a5507 1
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i  /**< */);
d5519 1
a5519 1
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i  /**< */);
d5530 1
a5530 1
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i  /**< */);
d5542 1
a5542 1
xcb_input_ptr_feedback_state_end (xcb_input_ptr_feedback_state_iterator_t i  /**< */);
d5553 1
a5553 1
xcb_input_integer_feedback_state_next (xcb_input_integer_feedback_state_iterator_t *i  /**< */);
d5565 1
a5565 1
xcb_input_integer_feedback_state_end (xcb_input_integer_feedback_state_iterator_t i  /**< */);
d5568 1
a5568 1
xcb_input_string_feedback_state_sizeof (const void  *_buffer  /**< */);
d5571 1
a5571 1
xcb_input_string_feedback_state_keysyms (const xcb_input_string_feedback_state_t *R  /**< */);
d5574 1
a5574 1
xcb_input_string_feedback_state_keysyms_length (const xcb_input_string_feedback_state_t *R  /**< */);
d5577 1
a5577 1
xcb_input_string_feedback_state_keysyms_end (const xcb_input_string_feedback_state_t *R  /**< */);
d5588 1
a5588 1
xcb_input_string_feedback_state_next (xcb_input_string_feedback_state_iterator_t *i  /**< */);
d5600 1
a5600 1
xcb_input_string_feedback_state_end (xcb_input_string_feedback_state_iterator_t i  /**< */);
d5611 1
a5611 1
xcb_input_bell_feedback_state_next (xcb_input_bell_feedback_state_iterator_t *i  /**< */);
d5623 1
a5623 1
xcb_input_bell_feedback_state_end (xcb_input_bell_feedback_state_iterator_t i  /**< */);
d5634 1
a5634 1
xcb_input_led_feedback_state_next (xcb_input_led_feedback_state_iterator_t *i  /**< */);
d5646 12
a5657 1
xcb_input_led_feedback_state_end (xcb_input_led_feedback_state_iterator_t i  /**< */);
d5660 3
a5662 1
xcb_input_feedback_state_sizeof (const void  *_buffer  /**< */);
d5664 4
a5667 2
uint8_t *
xcb_input_feedback_state_uninterpreted_data (const xcb_input_feedback_state_t *R  /**< */);
d5670 2
a5671 1
xcb_input_feedback_state_uninterpreted_data_length (const xcb_input_feedback_state_t *R  /**< */);
d5673 2
a5674 2
xcb_generic_iterator_t
xcb_input_feedback_state_uninterpreted_data_end (const xcb_input_feedback_state_t *R  /**< */);
d5685 1
a5685 1
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i  /**< */);
d5697 1
a5697 1
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i  /**< */);
d5700 1
a5700 1
xcb_input_get_feedback_control_sizeof (const void  *_buffer  /**< */);
d5711 2
a5712 2
xcb_input_get_feedback_control (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */);
d5726 2
a5727 2
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */);
d5730 1
a5730 1
xcb_input_get_feedback_control_feedbacks_length (const xcb_input_get_feedback_control_reply_t *R  /**< */);
d5733 1
a5733 1
xcb_input_get_feedback_control_feedbacks_iterator (const xcb_input_get_feedback_control_reply_t *R  /**< */);
d5750 1
a5750 1
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c  /**< */,
d5752 1
a5752 1
                                      xcb_generic_error_t                     **e  /**< */);
d5763 1
a5763 1
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i  /**< */);
d5775 1
a5775 1
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i  /**< */);
d5786 1
a5786 1
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i  /**< */);
d5798 1
a5798 1
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i  /**< */);
d5809 1
a5809 1
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i  /**< */);
d5821 1
a5821 1
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i  /**< */);
d5824 1
a5824 1
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer  /**< */);
d5827 1
a5827 1
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R  /**< */);
d5830 1
a5830 1
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R  /**< */);
d5833 1
a5833 1
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R  /**< */);
d5844 1
a5844 1
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i  /**< */);
d5856 1
a5856 1
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i  /**< */);
d5867 1
a5867 1
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i  /**< */);
d5879 1
a5879 1
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i  /**< */);
d5890 1
a5890 1
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i  /**< */);
d5902 4
a5905 1
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i  /**< */);
d5908 2
a5909 1
xcb_input_feedback_ctl_sizeof (const void  *_buffer  /**< */);
d5911 13
a5923 2
uint8_t *
xcb_input_feedback_ctl_uninterpreted_data (const xcb_input_feedback_ctl_t *R  /**< */);
d5926 2
a5927 1
xcb_input_feedback_ctl_uninterpreted_data_length (const xcb_input_feedback_ctl_t *R  /**< */);
d5929 2
a5930 2
xcb_generic_iterator_t
xcb_input_feedback_ctl_uninterpreted_data_end (const xcb_input_feedback_ctl_t *R  /**< */);
d5941 1
a5941 1
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i  /**< */);
d5953 1
a5953 1
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i  /**< */);
d5956 1
a5956 1
xcb_input_change_feedback_control_sizeof (const void  *_buffer  /**< */);
d5970 5
a5974 5
xcb_input_change_feedback_control_checked (xcb_connection_t         *c  /**< */,
                                           uint32_t                  mask  /**< */,
                                           uint8_t                   device_id  /**< */,
                                           uint8_t                   feedback_id  /**< */,
                                           xcb_input_feedback_ctl_t *feedback  /**< */);
d5985 8
a5992 5
xcb_input_change_feedback_control (xcb_connection_t         *c  /**< */,
                                   uint32_t                  mask  /**< */,
                                   uint8_t                   device_id  /**< */,
                                   uint8_t                   feedback_id  /**< */,
                                   xcb_input_feedback_ctl_t *feedback  /**< */);
d5995 1
a5995 1
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer  /**< */);
d6006 4
a6009 4
xcb_input_get_device_key_mapping (xcb_connection_t     *c  /**< */,
                                  uint8_t               device_id  /**< */,
                                  xcb_input_key_code_t  first_keycode  /**< */,
                                  uint8_t               count  /**< */);
d6023 4
a6026 4
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c  /**< */,
                                            uint8_t               device_id  /**< */,
                                            xcb_input_key_code_t  first_keycode  /**< */,
                                            uint8_t               count  /**< */);
d6029 1
a6029 1
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d6032 1
a6032 1
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d6035 1
a6035 1
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d6052 1
a6052 1
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c  /**< */,
d6054 1
a6054 1
                                        xcb_generic_error_t                       **e  /**< */);
d6057 1
a6057 1
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer  /**< */);
d6071 6
a6076 6
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c  /**< */,
                                             uint8_t               device_id  /**< */,
                                             xcb_input_key_code_t  first_keycode  /**< */,
                                             uint8_t               keysyms_per_keycode  /**< */,
                                             uint8_t               keycode_count  /**< */,
                                             const xcb_keysym_t   *keysyms  /**< */);
d6087 15
a6101 6
xcb_input_change_device_key_mapping (xcb_connection_t     *c  /**< */,
                                     uint8_t               device_id  /**< */,
                                     xcb_input_key_code_t  first_keycode  /**< */,
                                     uint8_t               keysyms_per_keycode  /**< */,
                                     uint8_t               keycode_count  /**< */,
                                     const xcb_keysym_t   *keysyms  /**< */);
d6104 1
a6104 1
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer  /**< */);
d6115 2
a6116 2
xcb_input_get_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */);
d6130 2
a6131 2
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */);
d6134 1
a6134 1
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);
d6137 1
a6137 1
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);
d6140 1
a6140 1
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);
d6157 1
a6157 1
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
d6159 1
a6159 1
                                             xcb_generic_error_t                            **e  /**< */);
d6162 1
a6162 1
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer  /**< */);
d6173 4
a6176 4
xcb_input_set_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */,
                                       uint8_t           keycodes_per_modifier  /**< */,
                                       const uint8_t    *keymaps  /**< */);
d6190 4
a6193 4
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */,
                                                 uint8_t           keycodes_per_modifier  /**< */,
                                                 const uint8_t    *keymaps  /**< */);
d6210 1
a6210 1
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
d6212 1
a6212 1
                                             xcb_generic_error_t                            **e  /**< */);
d6215 1
a6215 1
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer  /**< */);
d6226 2
a6227 2
xcb_input_get_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */);
d6241 2
a6242 2
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */);
d6245 1
a6245 1
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
d6248 1
a6248 1
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
d6251 1
a6251 1
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
d6268 1
a6268 1
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
d6270 1
a6270 1
                                           xcb_generic_error_t                          **e  /**< */);
d6273 1
a6273 1
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer  /**< */);
d6284 4
a6287 4
xcb_input_set_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           map_size  /**< */,
                                     const uint8_t    *map  /**< */);
d6301 4
a6304 4
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */,
                                               uint8_t           map_size  /**< */,
                                               const uint8_t    *map  /**< */);
d6321 1
a6321 1
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
d6323 1
a6323 1
                                           xcb_generic_error_t                          **e  /**< */);
d6334 1
a6334 1
xcb_input_key_state_next (xcb_input_key_state_iterator_t *i  /**< */);
d6346 1
a6346 1
xcb_input_key_state_end (xcb_input_key_state_iterator_t i  /**< */);
d6357 1
a6357 1
xcb_input_button_state_next (xcb_input_button_state_iterator_t *i  /**< */);
d6369 1
a6369 1
xcb_input_button_state_end (xcb_input_button_state_iterator_t i  /**< */);
d6372 1
a6372 1
xcb_input_valuator_state_sizeof (const void  *_buffer  /**< */);
d6374 2
a6375 2
uint32_t *
xcb_input_valuator_state_valuators (const xcb_input_valuator_state_t *R  /**< */);
d6378 1
a6378 1
xcb_input_valuator_state_valuators_length (const xcb_input_valuator_state_t *R  /**< */);
d6381 1
a6381 1
xcb_input_valuator_state_valuators_end (const xcb_input_valuator_state_t *R  /**< */);
d6392 1
a6392 1
xcb_input_valuator_state_next (xcb_input_valuator_state_iterator_t *i  /**< */);
d6404 12
a6415 1
xcb_input_valuator_state_end (xcb_input_valuator_state_iterator_t i  /**< */);
d6418 3
a6420 1
xcb_input_input_state_sizeof (const void  *_buffer  /**< */);
d6422 4
a6425 2
uint8_t *
xcb_input_input_state_uninterpreted_data (const xcb_input_input_state_t *R  /**< */);
d6428 2
a6429 1
xcb_input_input_state_uninterpreted_data_length (const xcb_input_input_state_t *R  /**< */);
d6431 2
a6432 2
xcb_generic_iterator_t
xcb_input_input_state_uninterpreted_data_end (const xcb_input_input_state_t *R  /**< */);
d6443 1
a6443 1
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i  /**< */);
d6455 1
a6455 1
xcb_input_input_state_end (xcb_input_input_state_iterator_t i  /**< */);
d6458 1
a6458 1
xcb_input_query_device_state_sizeof (const void  *_buffer  /**< */);
d6469 2
a6470 2
xcb_input_query_device_state (xcb_connection_t *c  /**< */,
                              uint8_t           device_id  /**< */);
d6484 2
a6485 2
xcb_input_query_device_state_unchecked (xcb_connection_t *c  /**< */,
                                        uint8_t           device_id  /**< */);
d6488 1
a6488 1
xcb_input_query_device_state_classes_length (const xcb_input_query_device_state_reply_t *R  /**< */);
d6491 1
a6491 1
xcb_input_query_device_state_classes_iterator (const xcb_input_query_device_state_reply_t *R  /**< */);
d6508 1
a6508 1
xcb_input_query_device_state_reply (xcb_connection_t                       *c  /**< */,
d6510 1
a6510 1
                                    xcb_generic_error_t                   **e  /**< */);
d6513 1
a6513 1
xcb_input_send_extension_event_sizeof (const void  *_buffer  /**< */);
d6527 8
a6534 8
xcb_input_send_extension_event_checked (xcb_connection_t              *c  /**< */,
                                        xcb_window_t                   destination  /**< */,
                                        uint8_t                        device_id  /**< */,
                                        uint8_t                        propagate  /**< */,
                                        uint16_t                       num_classes  /**< */,
                                        uint8_t                        num_events  /**< */,
                                        const uint8_t                 *events  /**< */,
                                        const xcb_input_event_class_t *classes  /**< */);
d6545 26
a6570 8
xcb_input_send_extension_event (xcb_connection_t              *c  /**< */,
                                xcb_window_t                   destination  /**< */,
                                uint8_t                        device_id  /**< */,
                                uint8_t                        propagate  /**< */,
                                uint16_t                       num_classes  /**< */,
                                uint8_t                        num_events  /**< */,
                                const uint8_t                 *events  /**< */,
                                const xcb_input_event_class_t *classes  /**< */);
d6584 5
a6588 5
xcb_input_device_bell_checked (xcb_connection_t *c  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           feedback_id  /**< */,
                               uint8_t           feedback_class  /**< */,
                               int8_t            percent  /**< */);
d6599 5
a6603 5
xcb_input_device_bell (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */,
                       uint8_t           feedback_id  /**< */,
                       uint8_t           feedback_class  /**< */,
                       int8_t            percent  /**< */);
d6606 1
a6606 1
xcb_input_set_device_valuators_sizeof (const void  *_buffer  /**< */);
d6617 5
a6621 5
xcb_input_set_device_valuators (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */,
                                uint8_t           first_valuator  /**< */,
                                uint8_t           num_valuators  /**< */,
                                const int32_t    *valuators  /**< */);
d6635 5
a6639 5
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           first_valuator  /**< */,
                                          uint8_t           num_valuators  /**< */,
                                          const int32_t    *valuators  /**< */);
d6656 1
a6656 1
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c  /**< */,
d6658 1
a6658 1
                                      xcb_generic_error_t                     **e  /**< */);
d6661 1
a6661 1
xcb_input_device_resolution_state_sizeof (const void  *_buffer  /**< */);
d6664 1
a6664 1
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R  /**< */);
d6667 1
a6667 1
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R  /**< */);
d6670 1
a6670 1
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R  /**< */);
d6673 1
a6673 1
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R  /**< */);
d6676 1
a6676 1
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R  /**< */);
d6679 1
a6679 1
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R  /**< */);
d6682 1
a6682 1
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R  /**< */);
d6685 1
a6685 1
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R  /**< */);
d6688 1
a6688 1
xcb_input_device_resolution_state_resolution_max_end (const xcb_input_device_resolution_state_t *R  /**< */);
d6699 1
a6699 1
xcb_input_device_resolution_state_next (xcb_input_device_resolution_state_iterator_t *i  /**< */);
d6711 1
a6711 1
xcb_input_device_resolution_state_end (xcb_input_device_resolution_state_iterator_t i  /**< */);
d6722 1
a6722 1
xcb_input_device_abs_calib_state_next (xcb_input_device_abs_calib_state_iterator_t *i  /**< */);
d6734 1
a6734 1
xcb_input_device_abs_calib_state_end (xcb_input_device_abs_calib_state_iterator_t i  /**< */);
d6745 1
a6745 1
xcb_input_device_abs_area_state_next (xcb_input_device_abs_area_state_iterator_t *i  /**< */);
d6757 1
a6757 1
xcb_input_device_abs_area_state_end (xcb_input_device_abs_area_state_iterator_t i  /**< */);
d6768 1
a6768 1
xcb_input_device_core_state_next (xcb_input_device_core_state_iterator_t *i  /**< */);
d6780 1
a6780 1
xcb_input_device_core_state_end (xcb_input_device_core_state_iterator_t i  /**< */);
d6791 1
a6791 1
xcb_input_device_enable_state_next (xcb_input_device_enable_state_iterator_t *i  /**< */);
d6803 4
a6806 1
xcb_input_device_enable_state_end (xcb_input_device_enable_state_iterator_t i  /**< */);
d6809 9
a6817 1
xcb_input_device_state_sizeof (const void  *_buffer  /**< */);
d6819 10
a6828 2
uint8_t *
xcb_input_device_state_uninterpreted_data (const xcb_input_device_state_t *R  /**< */);
d6831 2
a6832 1
xcb_input_device_state_uninterpreted_data_length (const xcb_input_device_state_t *R  /**< */);
d6835 19
a6853 1
xcb_input_device_state_uninterpreted_data_end (const xcb_input_device_state_t *R  /**< */);
d6864 1
a6864 1
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i  /**< */);
d6876 1
a6876 1
xcb_input_device_state_end (xcb_input_device_state_iterator_t i  /**< */);
d6879 1
a6879 1
xcb_input_get_device_control_sizeof (const void  *_buffer  /**< */);
d6890 3
a6892 3
xcb_input_get_device_control (xcb_connection_t *c  /**< */,
                              uint16_t          control_id  /**< */,
                              uint8_t           device_id  /**< */);
d6906 3
a6908 3
xcb_input_get_device_control_unchecked (xcb_connection_t *c  /**< */,
                                        uint16_t          control_id  /**< */,
                                        uint8_t           device_id  /**< */);
d6911 1
a6911 1
xcb_input_get_device_control_control (const xcb_input_get_device_control_reply_t *R  /**< */);
d6928 1
a6928 1
xcb_input_get_device_control_reply (xcb_connection_t                       *c  /**< */,
d6930 1
a6930 1
                                    xcb_generic_error_t                   **e  /**< */);
d6933 1
a6933 1
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer  /**< */);
d6936 1
a6936 1
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R  /**< */);
d6939 1
a6939 1
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R  /**< */);
d6942 1
a6942 1
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R  /**< */);
d6953 1
a6953 1
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i  /**< */);
d6965 1
a6965 1
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i  /**< */);
d6976 1
a6976 1
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i  /**< */);
d6988 1
a6988 1
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i  /**< */);
d6999 1
a6999 1
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i  /**< */);
d7011 1
a7011 1
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i  /**< */);
d7022 1
a7022 1
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i  /**< */);
d7034 1
a7034 1
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i  /**< */);
d7045 1
a7045 1
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i  /**< */);
d7057 12
a7068 1
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i  /**< */);
d7071 3
a7073 1
xcb_input_device_ctl_sizeof (const void  *_buffer  /**< */);
d7075 4
a7078 2
uint8_t *
xcb_input_device_ctl_uninterpreted_data (const xcb_input_device_ctl_t *R  /**< */);
d7081 2
a7082 1
xcb_input_device_ctl_uninterpreted_data_length (const xcb_input_device_ctl_t *R  /**< */);
d7084 2
a7085 2
xcb_generic_iterator_t
xcb_input_device_ctl_uninterpreted_data_end (const xcb_input_device_ctl_t *R  /**< */);
d7096 1
a7096 1
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i  /**< */);
d7108 1
a7108 1
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i  /**< */);
d7111 1
a7111 1
xcb_input_change_device_control_sizeof (const void  *_buffer  /**< */);
d7122 4
a7125 4
xcb_input_change_device_control (xcb_connection_t       *c  /**< */,
                                 uint16_t                control_id  /**< */,
                                 uint8_t                 device_id  /**< */,
                                 xcb_input_device_ctl_t *control  /**< */);
d7139 4
a7142 4
xcb_input_change_device_control_unchecked (xcb_connection_t       *c  /**< */,
                                           uint16_t                control_id  /**< */,
                                           uint8_t                 device_id  /**< */,
                                           xcb_input_device_ctl_t *control  /**< */);
d7159 1
a7159 1
xcb_input_change_device_control_reply (xcb_connection_t                          *c  /**< */,
d7161 1
a7161 1
                                       xcb_generic_error_t                      **e  /**< */);
d7164 1
a7164 1
xcb_input_list_device_properties_sizeof (const void  *_buffer  /**< */);
d7175 2
a7176 2
xcb_input_list_device_properties (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */);
d7190 2
a7191 2
xcb_input_list_device_properties_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */);
d7194 1
a7194 1
xcb_input_list_device_properties_atoms (const xcb_input_list_device_properties_reply_t *R  /**< */);
d7197 1
a7197 1
xcb_input_list_device_properties_atoms_length (const xcb_input_list_device_properties_reply_t *R  /**< */);
d7200 1
a7200 1
xcb_input_list_device_properties_atoms_end (const xcb_input_list_device_properties_reply_t *R  /**< */);
d7217 1
a7217 1
xcb_input_list_device_properties_reply (xcb_connection_t                           *c  /**< */,
d7219 1
a7219 1
                                        xcb_generic_error_t                       **e  /**< */);
d7222 1
a7222 1
xcb_input_change_device_property_items_data_8 (const xcb_input_change_device_property_items_t *S  /**< */);
d7225 2
a7226 2
xcb_input_change_device_property_items_data_8_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                      const xcb_input_change_device_property_items_t *S /**< */);
d7229 2
a7230 2
xcb_input_change_device_property_items_data_8_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                   const xcb_input_change_device_property_items_t *S /**< */);
d7233 1
a7233 1
xcb_input_change_device_property_items_data_16 (const xcb_input_change_device_property_items_t *S  /**< */);
d7236 2
a7237 2
xcb_input_change_device_property_items_data_16_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                       const xcb_input_change_device_property_items_t *S /**< */);
d7240 2
a7241 2
xcb_input_change_device_property_items_data_16_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                    const xcb_input_change_device_property_items_t *S /**< */);
d7244 1
a7244 1
xcb_input_change_device_property_items_data_32 (const xcb_input_change_device_property_items_t *S  /**< */);
d7247 2
a7248 2
xcb_input_change_device_property_items_data_32_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                       const xcb_input_change_device_property_items_t *S /**< */);
d7251 8
a7258 2
xcb_input_change_device_property_items_data_32_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                    const xcb_input_change_device_property_items_t *S /**< */);
d7261 4
a7264 4
xcb_input_change_device_property_items_serialize (void                                           **_buffer  /**< */,
                                                  uint32_t                                         num_items  /**< */,
                                                  uint8_t                                          format  /**< */,
                                                  const xcb_input_change_device_property_items_t  *_aux  /**< */);
d7267 3
a7269 4
xcb_input_change_device_property_items_unpack (const void                                *_buffer  /**< */,
                                               uint32_t                                   num_items  /**< */,
                                               uint8_t                                    format  /**< */,
                                               xcb_input_change_device_property_items_t  *_aux  /**< */);
d7272 1
a7272 3
xcb_input_change_device_property_items_sizeof (const void  *_buffer  /**< */,
                                               uint32_t     num_items  /**< */,
                                               uint8_t      format  /**< */);
d7286 8
a7293 8
xcb_input_change_device_property_checked (xcb_connection_t *c  /**< */,
                                          xcb_atom_t        property  /**< */,
                                          xcb_atom_t        type  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           format  /**< */,
                                          uint8_t           mode  /**< */,
                                          uint32_t          num_items  /**< */,
                                          const void       *items  /**< */);
d7304 8
a7311 8
xcb_input_change_device_property (xcb_connection_t *c  /**< */,
                                  xcb_atom_t        property  /**< */,
                                  xcb_atom_t        type  /**< */,
                                  uint8_t           device_id  /**< */,
                                  uint8_t           format  /**< */,
                                  uint8_t           mode  /**< */,
                                  uint32_t          num_items  /**< */,
                                  const void       *items  /**< */);
d7325 8
a7332 8
xcb_input_change_device_property_aux_checked (xcb_connection_t                               *c  /**< */,
                                              xcb_atom_t                                      property  /**< */,
                                              xcb_atom_t                                      type  /**< */,
                                              uint8_t                                         device_id  /**< */,
                                              uint8_t                                         format  /**< */,
                                              uint8_t                                         mode  /**< */,
                                              uint32_t                                        num_items  /**< */,
                                              const xcb_input_change_device_property_items_t *items  /**< */);
d7343 11
a7353 8
xcb_input_change_device_property_aux (xcb_connection_t                               *c  /**< */,
                                      xcb_atom_t                                      property  /**< */,
                                      xcb_atom_t                                      type  /**< */,
                                      uint8_t                                         device_id  /**< */,
                                      uint8_t                                         format  /**< */,
                                      uint8_t                                         mode  /**< */,
                                      uint32_t                                        num_items  /**< */,
                                      const xcb_input_change_device_property_items_t *items  /**< */);
d7367 3
a7369 3
xcb_input_delete_device_property_checked (xcb_connection_t *c  /**< */,
                                          xcb_atom_t        property  /**< */,
                                          uint8_t           device_id  /**< */);
d7380 3
a7382 3
xcb_input_delete_device_property (xcb_connection_t *c  /**< */,
                                  xcb_atom_t        property  /**< */,
                                  uint8_t           device_id  /**< */);
d7385 1
a7385 1
xcb_input_get_device_property_items_data_8 (const xcb_input_get_device_property_items_t *S  /**< */);
d7388 2
a7389 2
xcb_input_get_device_property_items_data_8_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                   const xcb_input_get_device_property_items_t *S /**< */);
d7392 2
a7393 2
xcb_input_get_device_property_items_data_8_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                const xcb_input_get_device_property_items_t *S /**< */);
d7396 1
a7396 1
xcb_input_get_device_property_items_data_16 (const xcb_input_get_device_property_items_t *S  /**< */);
d7399 2
a7400 2
xcb_input_get_device_property_items_data_16_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                    const xcb_input_get_device_property_items_t *S /**< */);
d7403 2
a7404 2
xcb_input_get_device_property_items_data_16_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                 const xcb_input_get_device_property_items_t *S /**< */);
d7407 1
a7407 1
xcb_input_get_device_property_items_data_32 (const xcb_input_get_device_property_items_t *S  /**< */);
d7410 2
a7411 2
xcb_input_get_device_property_items_data_32_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                    const xcb_input_get_device_property_items_t *S /**< */);
d7414 8
a7421 2
xcb_input_get_device_property_items_data_32_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                 const xcb_input_get_device_property_items_t *S /**< */);
d7424 4
a7427 4
xcb_input_get_device_property_items_serialize (void                                        **_buffer  /**< */,
                                               uint32_t                                      num_items  /**< */,
                                               uint8_t                                       format  /**< */,
                                               const xcb_input_get_device_property_items_t  *_aux  /**< */);
d7430 3
a7432 4
xcb_input_get_device_property_items_unpack (const void                             *_buffer  /**< */,
                                            uint32_t                                num_items  /**< */,
                                            uint8_t                                 format  /**< */,
                                            xcb_input_get_device_property_items_t  *_aux  /**< */);
d7435 1
a7435 3
xcb_input_get_device_property_items_sizeof (const void  *_buffer  /**< */,
                                            uint32_t     num_items  /**< */,
                                            uint8_t      format  /**< */);
d7446 7
a7452 7
xcb_input_get_device_property (xcb_connection_t *c  /**< */,
                               xcb_atom_t        property  /**< */,
                               xcb_atom_t        type  /**< */,
                               uint32_t          offset  /**< */,
                               uint32_t          len  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           _delete  /**< */);
d7466 7
a7472 7
xcb_input_get_device_property_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_atom_t        property  /**< */,
                                         xcb_atom_t        type  /**< */,
                                         uint32_t          offset  /**< */,
                                         uint32_t          len  /**< */,
                                         uint8_t           device_id  /**< */,
                                         uint8_t           _delete  /**< */);
d7475 1
a7475 1
xcb_input_get_device_property_items (const xcb_input_get_device_property_reply_t *R  /**< */);
d7492 1
a7492 1
xcb_input_get_device_property_reply (xcb_connection_t                        *c  /**< */,
d7494 1
a7494 1
                                     xcb_generic_error_t                    **e  /**< */);
d7505 1
a7505 1
xcb_input_group_info_next (xcb_input_group_info_iterator_t *i  /**< */);
d7517 1
a7517 1
xcb_input_group_info_end (xcb_input_group_info_iterator_t i  /**< */);
d7528 1
a7528 1
xcb_input_modifier_info_next (xcb_input_modifier_info_iterator_t *i  /**< */);
d7540 1
a7540 1
xcb_input_modifier_info_end (xcb_input_modifier_info_iterator_t i  /**< */);
d7543 1
a7543 1
xcb_input_xi_query_pointer_sizeof (const void  *_buffer  /**< */);
d7554 3
a7556 3
xcb_input_xi_query_pointer (xcb_connection_t      *c  /**< */,
                            xcb_window_t           window  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */);
d7570 3
a7572 3
xcb_input_xi_query_pointer_unchecked (xcb_connection_t      *c  /**< */,
                                      xcb_window_t           window  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */);
d7575 1
a7575 1
xcb_input_xi_query_pointer_buttons (const xcb_input_xi_query_pointer_reply_t *R  /**< */);
d7578 1
a7578 1
xcb_input_xi_query_pointer_buttons_length (const xcb_input_xi_query_pointer_reply_t *R  /**< */);
d7581 1
a7581 1
xcb_input_xi_query_pointer_buttons_end (const xcb_input_xi_query_pointer_reply_t *R  /**< */);
d7598 1
a7598 1
xcb_input_xi_query_pointer_reply (xcb_connection_t                     *c  /**< */,
d7600 1
a7600 1
                                  xcb_generic_error_t                 **e  /**< */);
d7614 10
a7623 10
xcb_input_xi_warp_pointer_checked (xcb_connection_t      *c  /**< */,
                                   xcb_window_t           src_win  /**< */,
                                   xcb_window_t           dst_win  /**< */,
                                   xcb_input_fp1616_t     src_x  /**< */,
                                   xcb_input_fp1616_t     src_y  /**< */,
                                   uint16_t               src_width  /**< */,
                                   uint16_t               src_height  /**< */,
                                   xcb_input_fp1616_t     dst_x  /**< */,
                                   xcb_input_fp1616_t     dst_y  /**< */,
                                   xcb_input_device_id_t  deviceid  /**< */);
d7634 10
a7643 10
xcb_input_xi_warp_pointer (xcb_connection_t      *c  /**< */,
                           xcb_window_t           src_win  /**< */,
                           xcb_window_t           dst_win  /**< */,
                           xcb_input_fp1616_t     src_x  /**< */,
                           xcb_input_fp1616_t     src_y  /**< */,
                           uint16_t               src_width  /**< */,
                           uint16_t               src_height  /**< */,
                           xcb_input_fp1616_t     dst_x  /**< */,
                           xcb_input_fp1616_t     dst_y  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */);
d7657 4
a7660 4
xcb_input_xi_change_cursor_checked (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           window  /**< */,
                                    xcb_cursor_t           cursor  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */);
d7671 4
a7674 4
xcb_input_xi_change_cursor (xcb_connection_t      *c  /**< */,
                            xcb_window_t           window  /**< */,
                            xcb_cursor_t           cursor  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */);
d7677 1
a7677 1
xcb_input_add_master_sizeof (const void  *_buffer  /**< */);
d7680 1
a7680 1
xcb_input_add_master_name (const xcb_input_add_master_t *R  /**< */);
d7683 1
a7683 1
xcb_input_add_master_name_length (const xcb_input_add_master_t *R  /**< */);
d7686 1
a7686 1
xcb_input_add_master_name_end (const xcb_input_add_master_t *R  /**< */);
d7697 1
a7697 1
xcb_input_add_master_next (xcb_input_add_master_iterator_t *i  /**< */);
d7709 1
a7709 1
xcb_input_add_master_end (xcb_input_add_master_iterator_t i  /**< */);
d7720 1
a7720 1
xcb_input_remove_master_next (xcb_input_remove_master_iterator_t *i  /**< */);
d7732 1
a7732 1
xcb_input_remove_master_end (xcb_input_remove_master_iterator_t i  /**< */);
d7743 1
a7743 1
xcb_input_attach_slave_next (xcb_input_attach_slave_iterator_t *i  /**< */);
d7755 1
a7755 1
xcb_input_attach_slave_end (xcb_input_attach_slave_iterator_t i  /**< */);
d7766 1
a7766 1
xcb_input_detach_slave_next (xcb_input_detach_slave_iterator_t *i  /**< */);
d7778 4
a7781 1
xcb_input_detach_slave_end (xcb_input_detach_slave_iterator_t i  /**< */);
d7784 2
a7785 1
xcb_input_hierarchy_change_sizeof (const void  *_buffer  /**< */);
d7787 13
a7799 2
uint8_t *
xcb_input_hierarchy_change_uninterpreted_data (const xcb_input_hierarchy_change_t *R  /**< */);
d7802 2
a7803 1
xcb_input_hierarchy_change_uninterpreted_data_length (const xcb_input_hierarchy_change_t *R  /**< */);
d7805 2
a7806 2
xcb_generic_iterator_t
xcb_input_hierarchy_change_uninterpreted_data_end (const xcb_input_hierarchy_change_t *R  /**< */);
d7817 1
a7817 1
xcb_input_hierarchy_change_next (xcb_input_hierarchy_change_iterator_t *i  /**< */);
d7829 1
a7829 1
xcb_input_hierarchy_change_end (xcb_input_hierarchy_change_iterator_t i  /**< */);
d7832 1
a7832 1
xcb_input_xi_change_hierarchy_sizeof (const void  *_buffer  /**< */);
d7846 3
a7848 3
xcb_input_xi_change_hierarchy_checked (xcb_connection_t                   *c  /**< */,
                                       uint8_t                             num_changes  /**< */,
                                       const xcb_input_hierarchy_change_t *changes  /**< */);
d7859 9
a7867 3
xcb_input_xi_change_hierarchy (xcb_connection_t                   *c  /**< */,
                               uint8_t                             num_changes  /**< */,
                               const xcb_input_hierarchy_change_t *changes  /**< */);
d7881 3
a7883 3
xcb_input_xi_set_client_pointer_checked (xcb_connection_t      *c  /**< */,
                                         xcb_window_t           window  /**< */,
                                         xcb_input_device_id_t  deviceid  /**< */);
d7894 3
a7896 3
xcb_input_xi_set_client_pointer (xcb_connection_t      *c  /**< */,
                                 xcb_window_t           window  /**< */,
                                 xcb_input_device_id_t  deviceid  /**< */);
d7907 2
a7908 2
xcb_input_xi_get_client_pointer (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */);
d7922 2
a7923 2
xcb_input_xi_get_client_pointer_unchecked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */);
d7940 1
a7940 1
xcb_input_xi_get_client_pointer_reply (xcb_connection_t                          *c  /**< */,
d7942 1
a7942 1
                                       xcb_generic_error_t                      **e  /**< */);
d7945 1
a7945 1
xcb_input_event_mask_sizeof (const void  *_buffer  /**< */);
d7948 1
a7948 1
xcb_input_event_mask_mask (const xcb_input_event_mask_t *R  /**< */);
d7951 1
a7951 1
xcb_input_event_mask_mask_length (const xcb_input_event_mask_t *R  /**< */);
d7954 1
a7954 1
xcb_input_event_mask_mask_end (const xcb_input_event_mask_t *R  /**< */);
d7965 1
a7965 1
xcb_input_event_mask_next (xcb_input_event_mask_iterator_t *i  /**< */);
d7977 1
a7977 1
xcb_input_event_mask_end (xcb_input_event_mask_iterator_t i  /**< */);
d7980 1
a7980 1
xcb_input_xi_select_events_sizeof (const void  *_buffer  /**< */);
d7994 4
a7997 4
xcb_input_xi_select_events_checked (xcb_connection_t             *c  /**< */,
                                    xcb_window_t                  window  /**< */,
                                    uint16_t                      num_mask  /**< */,
                                    const xcb_input_event_mask_t *masks  /**< */);
d8008 10
a8017 4
xcb_input_xi_select_events (xcb_connection_t             *c  /**< */,
                            xcb_window_t                  window  /**< */,
                            uint16_t                      num_mask  /**< */,
                            const xcb_input_event_mask_t *masks  /**< */);
d8028 3
a8030 3
xcb_input_xi_query_version (xcb_connection_t *c  /**< */,
                            uint16_t          major_version  /**< */,
                            uint16_t          minor_version  /**< */);
d8044 3
a8046 3
xcb_input_xi_query_version_unchecked (xcb_connection_t *c  /**< */,
                                      uint16_t          major_version  /**< */,
                                      uint16_t          minor_version  /**< */);
d8063 1
a8063 1
xcb_input_xi_query_version_reply (xcb_connection_t                     *c  /**< */,
d8065 1
a8065 1
                                  xcb_generic_error_t                 **e  /**< */);
d8068 1
a8068 1
xcb_input_button_class_sizeof (const void  *_buffer  /**< */);
d8071 1
a8071 1
xcb_input_button_class_state (const xcb_input_button_class_t *R  /**< */);
d8074 1
a8074 1
xcb_input_button_class_state_length (const xcb_input_button_class_t *R  /**< */);
d8077 1
a8077 1
xcb_input_button_class_state_end (const xcb_input_button_class_t *R  /**< */);
d8080 1
a8080 1
xcb_input_button_class_labels (const xcb_input_button_class_t *R  /**< */);
d8083 1
a8083 1
xcb_input_button_class_labels_length (const xcb_input_button_class_t *R  /**< */);
d8086 1
a8086 1
xcb_input_button_class_labels_end (const xcb_input_button_class_t *R  /**< */);
d8097 1
a8097 1
xcb_input_button_class_next (xcb_input_button_class_iterator_t *i  /**< */);
d8109 1
a8109 1
xcb_input_button_class_end (xcb_input_button_class_iterator_t i  /**< */);
d8112 1
a8112 1
xcb_input_key_class_sizeof (const void  *_buffer  /**< */);
d8115 1
a8115 1
xcb_input_key_class_keys (const xcb_input_key_class_t *R  /**< */);
d8118 1
a8118 1
xcb_input_key_class_keys_length (const xcb_input_key_class_t *R  /**< */);
d8121 1
a8121 1
xcb_input_key_class_keys_end (const xcb_input_key_class_t *R  /**< */);
d8132 1
a8132 1
xcb_input_key_class_next (xcb_input_key_class_iterator_t *i  /**< */);
d8144 1
a8144 1
xcb_input_key_class_end (xcb_input_key_class_iterator_t i  /**< */);
d8155 1
a8155 1
xcb_input_scroll_class_next (xcb_input_scroll_class_iterator_t *i  /**< */);
d8167 1
a8167 1
xcb_input_scroll_class_end (xcb_input_scroll_class_iterator_t i  /**< */);
d8178 1
a8178 1
xcb_input_touch_class_next (xcb_input_touch_class_iterator_t *i  /**< */);
d8190 1
a8190 1
xcb_input_touch_class_end (xcb_input_touch_class_iterator_t i  /**< */);
d8201 1
a8201 1
xcb_input_valuator_class_next (xcb_input_valuator_class_iterator_t *i  /**< */);
d8213 15
a8227 1
xcb_input_valuator_class_end (xcb_input_valuator_class_iterator_t i  /**< */);
d8230 2
a8231 1
xcb_input_device_class_sizeof (const void  *_buffer  /**< */);
d8233 6
a8238 2
uint8_t *
xcb_input_device_class_uninterpreted_data (const xcb_input_device_class_t *R  /**< */);
d8241 2
a8242 1
xcb_input_device_class_uninterpreted_data_length (const xcb_input_device_class_t *R  /**< */);
d8245 19
a8263 1
xcb_input_device_class_uninterpreted_data_end (const xcb_input_device_class_t *R  /**< */);
d8274 1
a8274 1
xcb_input_device_class_next (xcb_input_device_class_iterator_t *i  /**< */);
d8286 1
a8286 1
xcb_input_device_class_end (xcb_input_device_class_iterator_t i  /**< */);
d8289 1
a8289 1
xcb_input_xi_device_info_sizeof (const void  *_buffer  /**< */);
d8292 1
a8292 1
xcb_input_xi_device_info_name (const xcb_input_xi_device_info_t *R  /**< */);
d8295 1
a8295 1
xcb_input_xi_device_info_name_length (const xcb_input_xi_device_info_t *R  /**< */);
d8298 1
a8298 1
xcb_input_xi_device_info_name_end (const xcb_input_xi_device_info_t *R  /**< */);
d8301 1
a8301 1
xcb_input_xi_device_info_classes_length (const xcb_input_xi_device_info_t *R  /**< */);
d8304 1
a8304 1
xcb_input_xi_device_info_classes_iterator (const xcb_input_xi_device_info_t *R  /**< */);
d8315 1
a8315 1
xcb_input_xi_device_info_next (xcb_input_xi_device_info_iterator_t *i  /**< */);
d8327 1
a8327 1
xcb_input_xi_device_info_end (xcb_input_xi_device_info_iterator_t i  /**< */);
d8330 1
a8330 1
xcb_input_xi_query_device_sizeof (const void  *_buffer  /**< */);
d8341 2
a8342 2
xcb_input_xi_query_device (xcb_connection_t      *c  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */);
d8356 2
a8357 2
xcb_input_xi_query_device_unchecked (xcb_connection_t      *c  /**< */,
                                     xcb_input_device_id_t  deviceid  /**< */);
d8360 1
a8360 1
xcb_input_xi_query_device_infos_length (const xcb_input_xi_query_device_reply_t *R  /**< */);
d8363 1
a8363 1
xcb_input_xi_query_device_infos_iterator (const xcb_input_xi_query_device_reply_t *R  /**< */);
d8380 1
a8380 1
xcb_input_xi_query_device_reply (xcb_connection_t                    *c  /**< */,
d8382 1
a8382 1
                                 xcb_generic_error_t                **e  /**< */);
d8396 4
a8399 4
xcb_input_xi_set_focus_checked (xcb_connection_t      *c  /**< */,
                                xcb_window_t           window  /**< */,
                                xcb_timestamp_t        time  /**< */,
                                xcb_input_device_id_t  deviceid  /**< */);
d8410 4
a8413 4
xcb_input_xi_set_focus (xcb_connection_t      *c  /**< */,
                        xcb_window_t           window  /**< */,
                        xcb_timestamp_t        time  /**< */,
                        xcb_input_device_id_t  deviceid  /**< */);
d8424 2
a8425 2
xcb_input_xi_get_focus (xcb_connection_t      *c  /**< */,
                        xcb_input_device_id_t  deviceid  /**< */);
d8439 2
a8440 2
xcb_input_xi_get_focus_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_input_device_id_t  deviceid  /**< */);
d8457 1
a8457 1
xcb_input_xi_get_focus_reply (xcb_connection_t                 *c  /**< */,
d8459 1
a8459 1
                              xcb_generic_error_t             **e  /**< */);
d8462 1
a8462 1
xcb_input_xi_grab_device_sizeof (const void  *_buffer  /**< */);
d8473 10
a8482 10
xcb_input_xi_grab_device (xcb_connection_t      *c  /**< */,
                          xcb_window_t           window  /**< */,
                          xcb_timestamp_t        time  /**< */,
                          xcb_cursor_t           cursor  /**< */,
                          xcb_input_device_id_t  deviceid  /**< */,
                          uint8_t                mode  /**< */,
                          uint8_t                paired_device_mode  /**< */,
                          uint8_t                owner_events  /**< */,
                          uint16_t               mask_len  /**< */,
                          const uint32_t        *mask  /**< */);
d8496 10
a8505 10
xcb_input_xi_grab_device_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           window  /**< */,
                                    xcb_timestamp_t        time  /**< */,
                                    xcb_cursor_t           cursor  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */,
                                    uint8_t                mode  /**< */,
                                    uint8_t                paired_device_mode  /**< */,
                                    uint8_t                owner_events  /**< */,
                                    uint16_t               mask_len  /**< */,
                                    const uint32_t        *mask  /**< */);
d8522 1
a8522 1
xcb_input_xi_grab_device_reply (xcb_connection_t                   *c  /**< */,
d8524 1
a8524 1
                                xcb_generic_error_t               **e  /**< */);
d8538 3
a8540 3
xcb_input_xi_ungrab_device_checked (xcb_connection_t      *c  /**< */,
                                    xcb_timestamp_t        time  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */);
d8551 3
a8553 3
xcb_input_xi_ungrab_device (xcb_connection_t      *c  /**< */,
                            xcb_timestamp_t        time  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */);
d8567 6
a8572 6
xcb_input_xi_allow_events_checked (xcb_connection_t      *c  /**< */,
                                   xcb_timestamp_t        time  /**< */,
                                   xcb_input_device_id_t  deviceid  /**< */,
                                   uint8_t                event_mode  /**< */,
                                   uint32_t               touchid  /**< */,
                                   xcb_window_t           grab_window  /**< */);
d8583 6
a8588 6
xcb_input_xi_allow_events (xcb_connection_t      *c  /**< */,
                           xcb_timestamp_t        time  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */,
                           uint8_t                event_mode  /**< */,
                           uint32_t               touchid  /**< */,
                           xcb_window_t           grab_window  /**< */);
d8599 1
a8599 1
xcb_input_grab_modifier_info_next (xcb_input_grab_modifier_info_iterator_t *i  /**< */);
d8611 1
a8611 1
xcb_input_grab_modifier_info_end (xcb_input_grab_modifier_info_iterator_t i  /**< */);
d8614 1
a8614 1
xcb_input_xi_passive_grab_device_sizeof (const void  *_buffer  /**< */);
d8625 14
a8638 14
xcb_input_xi_passive_grab_device (xcb_connection_t      *c  /**< */,
                                  xcb_timestamp_t        time  /**< */,
                                  xcb_window_t           grab_window  /**< */,
                                  xcb_cursor_t           cursor  /**< */,
                                  uint32_t               detail  /**< */,
                                  xcb_input_device_id_t  deviceid  /**< */,
                                  uint16_t               num_modifiers  /**< */,
                                  uint16_t               mask_len  /**< */,
                                  uint8_t                grab_type  /**< */,
                                  uint8_t                grab_mode  /**< */,
                                  uint8_t                paired_device_mode  /**< */,
                                  uint8_t                owner_events  /**< */,
                                  const uint32_t        *mask  /**< */,
                                  const uint32_t        *modifiers  /**< */);
d8652 14
a8665 14
xcb_input_xi_passive_grab_device_unchecked (xcb_connection_t      *c  /**< */,
                                            xcb_timestamp_t        time  /**< */,
                                            xcb_window_t           grab_window  /**< */,
                                            xcb_cursor_t           cursor  /**< */,
                                            uint32_t               detail  /**< */,
                                            xcb_input_device_id_t  deviceid  /**< */,
                                            uint16_t               num_modifiers  /**< */,
                                            uint16_t               mask_len  /**< */,
                                            uint8_t                grab_type  /**< */,
                                            uint8_t                grab_mode  /**< */,
                                            uint8_t                paired_device_mode  /**< */,
                                            uint8_t                owner_events  /**< */,
                                            const uint32_t        *mask  /**< */,
                                            const uint32_t        *modifiers  /**< */);
d8668 1
a8668 1
xcb_input_xi_passive_grab_device_modifiers (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */);
d8671 1
a8671 1
xcb_input_xi_passive_grab_device_modifiers_length (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */);
d8674 1
a8674 1
xcb_input_xi_passive_grab_device_modifiers_iterator (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */);
d8691 1
a8691 1
xcb_input_xi_passive_grab_device_reply (xcb_connection_t                           *c  /**< */,
d8693 1
a8693 1
                                        xcb_generic_error_t                       **e  /**< */);
d8696 1
a8696 1
xcb_input_xi_passive_ungrab_device_sizeof (const void  *_buffer  /**< */);
d8710 7
a8716 7
xcb_input_xi_passive_ungrab_device_checked (xcb_connection_t      *c  /**< */,
                                            xcb_window_t           grab_window  /**< */,
                                            uint32_t               detail  /**< */,
                                            xcb_input_device_id_t  deviceid  /**< */,
                                            uint16_t               num_modifiers  /**< */,
                                            uint8_t                grab_type  /**< */,
                                            const uint32_t        *modifiers  /**< */);
d8727 10
a8736 7
xcb_input_xi_passive_ungrab_device (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           grab_window  /**< */,
                                    uint32_t               detail  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */,
                                    uint16_t               num_modifiers  /**< */,
                                    uint8_t                grab_type  /**< */,
                                    const uint32_t        *modifiers  /**< */);
d8739 7
a8745 1
xcb_input_xi_list_properties_sizeof (const void  *_buffer  /**< */);
d8756 2
a8757 2
xcb_input_xi_list_properties (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */);
d8771 2
a8772 2
xcb_input_xi_list_properties_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_input_device_id_t  deviceid  /**< */);
d8775 1
a8775 1
xcb_input_xi_list_properties_properties (const xcb_input_xi_list_properties_reply_t *R  /**< */);
d8778 1
a8778 1
xcb_input_xi_list_properties_properties_length (const xcb_input_xi_list_properties_reply_t *R  /**< */);
d8781 1
a8781 1
xcb_input_xi_list_properties_properties_end (const xcb_input_xi_list_properties_reply_t *R  /**< */);
d8798 1
a8798 1
xcb_input_xi_list_properties_reply (xcb_connection_t                       *c  /**< */,
d8800 1
a8800 1
                                    xcb_generic_error_t                   **e  /**< */);
d8803 1
a8803 1
xcb_input_xi_change_property_items_data_8 (const xcb_input_xi_change_property_items_t *S  /**< */);
d8806 2
a8807 2
xcb_input_xi_change_property_items_data_8_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                  const xcb_input_xi_change_property_items_t *S /**< */);
d8810 2
a8811 2
xcb_input_xi_change_property_items_data_8_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                               const xcb_input_xi_change_property_items_t *S /**< */);
d8814 1
a8814 1
xcb_input_xi_change_property_items_data_16 (const xcb_input_xi_change_property_items_t *S  /**< */);
d8817 2
a8818 2
xcb_input_xi_change_property_items_data_16_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                   const xcb_input_xi_change_property_items_t *S /**< */);
d8821 2
a8822 2
xcb_input_xi_change_property_items_data_16_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                const xcb_input_xi_change_property_items_t *S /**< */);
d8825 1
a8825 1
xcb_input_xi_change_property_items_data_32 (const xcb_input_xi_change_property_items_t *S  /**< */);
d8828 2
a8829 2
xcb_input_xi_change_property_items_data_32_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                   const xcb_input_xi_change_property_items_t *S /**< */);
d8832 8
a8839 2
xcb_input_xi_change_property_items_data_32_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                const xcb_input_xi_change_property_items_t *S /**< */);
d8842 4
a8845 4
xcb_input_xi_change_property_items_serialize (void                                       **_buffer  /**< */,
                                              uint32_t                                     num_items  /**< */,
                                              uint8_t                                      format  /**< */,
                                              const xcb_input_xi_change_property_items_t  *_aux  /**< */);
d8848 3
a8850 4
xcb_input_xi_change_property_items_unpack (const void                            *_buffer  /**< */,
                                           uint32_t                               num_items  /**< */,
                                           uint8_t                                format  /**< */,
                                           xcb_input_xi_change_property_items_t  *_aux  /**< */);
d8853 1
a8853 3
xcb_input_xi_change_property_items_sizeof (const void  *_buffer  /**< */,
                                           uint32_t     num_items  /**< */,
                                           uint8_t      format  /**< */);
d8867 8
a8874 8
xcb_input_xi_change_property_checked (xcb_connection_t      *c  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */,
                                      uint8_t                mode  /**< */,
                                      uint8_t                format  /**< */,
                                      xcb_atom_t             property  /**< */,
                                      xcb_atom_t             type  /**< */,
                                      uint32_t               num_items  /**< */,
                                      const void            *items  /**< */);
d8885 8
a8892 8
xcb_input_xi_change_property (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */,
                              uint8_t                mode  /**< */,
                              uint8_t                format  /**< */,
                              xcb_atom_t             property  /**< */,
                              xcb_atom_t             type  /**< */,
                              uint32_t               num_items  /**< */,
                              const void            *items  /**< */);
d8906 8
a8913 8
xcb_input_xi_change_property_aux_checked (xcb_connection_t                           *c  /**< */,
                                          xcb_input_device_id_t                       deviceid  /**< */,
                                          uint8_t                                     mode  /**< */,
                                          uint8_t                                     format  /**< */,
                                          xcb_atom_t                                  property  /**< */,
                                          xcb_atom_t                                  type  /**< */,
                                          uint32_t                                    num_items  /**< */,
                                          const xcb_input_xi_change_property_items_t *items  /**< */);
d8924 11
a8934 8
xcb_input_xi_change_property_aux (xcb_connection_t                           *c  /**< */,
                                  xcb_input_device_id_t                       deviceid  /**< */,
                                  uint8_t                                     mode  /**< */,
                                  uint8_t                                     format  /**< */,
                                  xcb_atom_t                                  property  /**< */,
                                  xcb_atom_t                                  type  /**< */,
                                  uint32_t                                    num_items  /**< */,
                                  const xcb_input_xi_change_property_items_t *items  /**< */);
d8948 3
a8950 3
xcb_input_xi_delete_property_checked (xcb_connection_t      *c  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */,
                                      xcb_atom_t             property  /**< */);
d8961 3
a8963 3
xcb_input_xi_delete_property (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */,
                              xcb_atom_t             property  /**< */);
d8966 1
a8966 1
xcb_input_xi_get_property_items_data_8 (const xcb_input_xi_get_property_items_t *S  /**< */);
d8969 2
a8970 2
xcb_input_xi_get_property_items_data_8_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                               const xcb_input_xi_get_property_items_t *S /**< */);
d8973 2
a8974 2
xcb_input_xi_get_property_items_data_8_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                            const xcb_input_xi_get_property_items_t *S /**< */);
d8977 1
a8977 1
xcb_input_xi_get_property_items_data_16 (const xcb_input_xi_get_property_items_t *S  /**< */);
d8980 2
a8981 2
xcb_input_xi_get_property_items_data_16_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                                const xcb_input_xi_get_property_items_t *S /**< */);
d8984 2
a8985 2
xcb_input_xi_get_property_items_data_16_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                             const xcb_input_xi_get_property_items_t *S /**< */);
d8988 1
a8988 1
xcb_input_xi_get_property_items_data_32 (const xcb_input_xi_get_property_items_t *S  /**< */);
d8991 2
a8992 2
xcb_input_xi_get_property_items_data_32_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                                const xcb_input_xi_get_property_items_t *S /**< */);
d8995 2
a8996 2
xcb_input_xi_get_property_items_data_32_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                             const xcb_input_xi_get_property_items_t *S /**< */);
d8999 4
a9002 4
xcb_input_xi_get_property_items_serialize (void                                    **_buffer  /**< */,
                                           uint32_t                                  num_items  /**< */,
                                           uint8_t                                   format  /**< */,
                                           const xcb_input_xi_get_property_items_t  *_aux  /**< */);
d9005 4
a9008 4
xcb_input_xi_get_property_items_unpack (const void                         *_buffer  /**< */,
                                        uint32_t                            num_items  /**< */,
                                        uint8_t                             format  /**< */,
                                        xcb_input_xi_get_property_items_t  *_aux  /**< */);
d9011 6
a9016 3
xcb_input_xi_get_property_items_sizeof (const void  *_buffer  /**< */,
                                        uint32_t     num_items  /**< */,
                                        uint8_t      format  /**< */);
d9027 7
a9033 7
xcb_input_xi_get_property (xcb_connection_t      *c  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */,
                           uint8_t                _delete  /**< */,
                           xcb_atom_t             property  /**< */,
                           xcb_atom_t             type  /**< */,
                           uint32_t               offset  /**< */,
                           uint32_t               len  /**< */);
d9047 7
a9053 7
xcb_input_xi_get_property_unchecked (xcb_connection_t      *c  /**< */,
                                     xcb_input_device_id_t  deviceid  /**< */,
                                     uint8_t                _delete  /**< */,
                                     xcb_atom_t             property  /**< */,
                                     xcb_atom_t             type  /**< */,
                                     uint32_t               offset  /**< */,
                                     uint32_t               len  /**< */);
d9056 1
a9056 1
xcb_input_xi_get_property_items (const xcb_input_xi_get_property_reply_t *R  /**< */);
d9073 1
a9073 1
xcb_input_xi_get_property_reply (xcb_connection_t                    *c  /**< */,
d9075 1
a9075 1
                                 xcb_generic_error_t                **e  /**< */);
d9078 1
a9078 1
xcb_input_xi_get_selected_events_sizeof (const void  *_buffer  /**< */);
d9089 2
a9090 2
xcb_input_xi_get_selected_events (xcb_connection_t *c  /**< */,
                                  xcb_window_t      window  /**< */);
d9104 2
a9105 2
xcb_input_xi_get_selected_events_unchecked (xcb_connection_t *c  /**< */,
                                            xcb_window_t      window  /**< */);
d9108 1
a9108 1
xcb_input_xi_get_selected_events_masks_length (const xcb_input_xi_get_selected_events_reply_t *R  /**< */);
d9111 1
a9111 1
xcb_input_xi_get_selected_events_masks_iterator (const xcb_input_xi_get_selected_events_reply_t *R  /**< */);
d9128 1
a9128 1
xcb_input_xi_get_selected_events_reply (xcb_connection_t                           *c  /**< */,
d9130 1
a9130 1
                                        xcb_generic_error_t                       **e  /**< */);
d9141 1
a9141 1
xcb_input_barrier_release_pointer_info_next (xcb_input_barrier_release_pointer_info_iterator_t *i  /**< */);
d9153 1
a9153 1
xcb_input_barrier_release_pointer_info_end (xcb_input_barrier_release_pointer_info_iterator_t i  /**< */);
d9156 1
a9156 1
xcb_input_xi_barrier_release_pointer_sizeof (const void  *_buffer  /**< */);
d9170 3
a9172 3
xcb_input_xi_barrier_release_pointer_checked (xcb_connection_t                               *c  /**< */,
                                              uint32_t                                        num_barriers  /**< */,
                                              const xcb_input_barrier_release_pointer_info_t *barriers  /**< */);
d9183 6
a9188 3
xcb_input_xi_barrier_release_pointer (xcb_connection_t                               *c  /**< */,
                                      uint32_t                                        num_barriers  /**< */,
                                      const xcb_input_barrier_release_pointer_info_t *barriers  /**< */);
d9191 37
a9227 1
xcb_input_device_changed_sizeof (const void  *_buffer  /**< */);
d9230 4
a9233 1
xcb_input_key_press_sizeof (const void  *_buffer  /**< */);
d9239 28
a9266 1
xcb_input_button_press_sizeof (const void  *_buffer  /**< */);
d9275 10
a9284 1
xcb_input_enter_sizeof (const void  *_buffer  /**< */);
d9304 1
a9304 1
xcb_input_hierarchy_info_next (xcb_input_hierarchy_info_iterator_t *i  /**< */);
d9316 1
a9316 1
xcb_input_hierarchy_info_end (xcb_input_hierarchy_info_iterator_t i  /**< */);
d9319 4
a9322 1
xcb_input_hierarchy_sizeof (const void  *_buffer  /**< */);
d9325 34
a9358 1
xcb_input_raw_key_press_sizeof (const void  *_buffer  /**< */);
d9364 28
a9391 1
xcb_input_raw_button_press_sizeof (const void  *_buffer  /**< */);
d9400 28
a9427 1
xcb_input_touch_begin_sizeof (const void  *_buffer  /**< */);
d9436 28
a9463 1
xcb_input_raw_touch_begin_sizeof (const void  *_buffer  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a15 3
#include "xproto.h"
#include "render.h"
#include "shape.h"
d24 1
a24 1
  
d1722 1
d1905 1
a1905 1
    XCB_INPUT_PROPERTY_FORMAT_8_BITS =  8,
d2248 1
a3769 10

/*****************************************************************************
 **
 ** void xcb_input_event_class_next
 ** 
 ** @@param xcb_input_event_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3781 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_class_end
 ** 
 ** @@param xcb_input_event_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3792 10

/*****************************************************************************
 **
 ** void xcb_input_key_code_next
 ** 
 ** @@param xcb_input_key_code_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3804 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_code_end
 ** 
 ** @@param xcb_input_key_code_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3815 10

/*****************************************************************************
 **
 ** void xcb_input_device_id_next
 ** 
 ** @@param xcb_input_device_id_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3827 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_id_end
 ** 
 ** @@param xcb_input_device_id_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3838 10

/*****************************************************************************
 **
 ** void xcb_input_fp1616_next
 ** 
 ** @@param xcb_input_fp1616_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3850 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_fp1616_end
 ** 
 ** @@param xcb_input_fp1616_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3861 10

/*****************************************************************************
 **
 ** void xcb_input_fp3232_next
 ** 
 ** @@param xcb_input_fp3232_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3873 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_fp3232_end
 ** 
 ** @@param xcb_input_fp3232_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3886 1
a3886 1
 * 
a3887 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
 **
 *****************************************************************************/
 
d3899 1
a3899 1
 * 
a3903 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
 **
 *****************************************************************************/
 
d3916 1
a3916 1
 * 
a3922 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_reply_t * xcb_input_get_extension_version_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_get_extension_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_get_extension_version_reply_t *
 **
 *****************************************************************************/
 
a3935 10

/*****************************************************************************
 **
 ** void xcb_input_device_info_next
 ** 
 ** @@param xcb_input_device_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3947 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_info_end
 ** 
 ** @@param xcb_input_device_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3958 10

/*****************************************************************************
 **
 ** void xcb_input_key_info_next
 ** 
 ** @@param xcb_input_key_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3970 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_info_end
 ** 
 ** @@param xcb_input_key_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3981 10

/*****************************************************************************
 **
 ** void xcb_input_button_info_next
 ** 
 ** @@param xcb_input_button_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3993 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_info_end
 ** 
 ** @@param xcb_input_button_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4004 10

/*****************************************************************************
 **
 ** void xcb_input_axis_info_next
 ** 
 ** @@param xcb_input_axis_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4016 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_axis_info_end
 ** 
 ** @@param xcb_input_axis_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4022 10

/*****************************************************************************
 **
 ** xcb_input_axis_info_t * xcb_input_valuator_info_axes
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_t *
 **
 *****************************************************************************/
 
a4025 10

/*****************************************************************************
 **
 ** int xcb_input_valuator_info_axes_length
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4028 10

/*****************************************************************************
 **
 ** xcb_input_axis_info_iterator_t xcb_input_valuator_info_axes_iterator
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_iterator_t
 **
 *****************************************************************************/
 
a4039 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_info_next
 ** 
 ** @@param xcb_input_valuator_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4051 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_info_end
 ** 
 ** @@param xcb_input_valuator_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4062 10

/*****************************************************************************
 **
 ** void xcb_input_input_info_next
 ** 
 ** @@param xcb_input_input_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4074 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_info_end
 ** 
 ** @@param xcb_input_input_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4080 10

/*****************************************************************************
 **
 ** char * xcb_input_device_name_string
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a4083 10

/*****************************************************************************
 **
 ** int xcb_input_device_name_string_length
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4086 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_name_string_end
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4097 10

/*****************************************************************************
 **
 ** void xcb_input_device_name_next
 ** 
 ** @@param xcb_input_device_name_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4109 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_name_end
 ** 
 ** @@param xcb_input_device_name_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4122 1
a4122 1
 * 
a4123 10

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
 **
 *****************************************************************************/
 
d4133 1
a4133 1
 * 
a4137 10

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
 **
 *****************************************************************************/
 
a4140 10

/*****************************************************************************
 **
 ** xcb_input_device_info_t * xcb_input_list_input_devices_devices
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_t *
 **
 *****************************************************************************/
 
a4143 10

/*****************************************************************************
 **
 ** int xcb_input_list_input_devices_devices_length
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4146 10

/*****************************************************************************
 **
 ** xcb_input_device_info_iterator_t xcb_input_list_input_devices_devices_iterator
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_iterator_t
 **
 *****************************************************************************/
 
d4157 1
a4157 1
 * 
a4163 12

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_reply_t * xcb_input_list_input_devices_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_list_input_devices_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_list_input_devices_reply_t *
 **
 *****************************************************************************/
 
a4176 10

/*****************************************************************************
 **
 ** void xcb_input_input_class_info_next
 ** 
 ** @@param xcb_input_input_class_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4188 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_class_info_end
 ** 
 ** @@param xcb_input_input_class_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4201 1
a4201 1
 * 
a4202 11

/*****************************************************************************
 **
 ** xcb_input_open_device_cookie_t xcb_input_open_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
 **
 *****************************************************************************/
 
d4213 1
a4213 1
 * 
a4217 11

/*****************************************************************************
 **
 ** xcb_input_open_device_cookie_t xcb_input_open_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
 **
 *****************************************************************************/
 
a4221 10

/*****************************************************************************
 **
 ** xcb_input_input_class_info_t * xcb_input_open_device_class_info
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_t *
 **
 *****************************************************************************/
 
a4224 10

/*****************************************************************************
 **
 ** int xcb_input_open_device_class_info_length
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4227 10

/*****************************************************************************
 **
 ** xcb_input_input_class_info_iterator_t xcb_input_open_device_class_info_iterator
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_iterator_t
 **
 *****************************************************************************/
 
d4238 1
a4238 1
 * 
a4244 12

/*****************************************************************************
 **
 ** xcb_input_open_device_reply_t * xcb_input_open_device_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_open_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_open_device_reply_t *
 **
 *****************************************************************************/
 
d4256 1
a4256 1
 * 
a4260 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_close_device_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4271 1
a4271 1
 * 
a4272 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_close_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4283 1
a4283 1
 * 
a4284 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
 **
 *****************************************************************************/
 
d4296 1
a4296 1
 * 
a4300 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
 **
 *****************************************************************************/
 
d4313 1
a4313 1
 * 
a4319 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_reply_t * xcb_input_set_device_mode_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_set_device_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_set_device_mode_reply_t *
 **
 *****************************************************************************/
 
d4334 1
a4334 1
 * 
a4338 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_select_extension_event_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4351 1
a4351 1
 * 
a4352 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_select_extension_event
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4368 1
a4368 1
 * 
a4369 11

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
 **
 *****************************************************************************/
 
d4380 1
a4380 1
 * 
a4384 11

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
 **
 *****************************************************************************/
 
a4388 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_this_classes
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a4391 10

/*****************************************************************************
 **
 ** int xcb_input_get_selected_extension_events_this_classes_length
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4394 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_this_classes_end
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4397 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_all_classes
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a4400 10

/*****************************************************************************
 **
 ** int xcb_input_get_selected_extension_events_all_classes_length
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4403 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_all_classes_end
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4414 1
a4414 1
 * 
a4420 12

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_reply_t * xcb_input_get_selected_extension_events_reply
 ** 
 ** @@param xcb_connection_t                                  *c
 ** @@param xcb_input_get_selected_extension_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                              **e
 ** @@returns xcb_input_get_selected_extension_events_reply_t *
 **
 *****************************************************************************/
 
d4435 1
a4435 1
 * 
a4439 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4453 1
a4453 1
 * 
a4454 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4471 1
a4471 1
 * 
a4472 11

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
 **
 *****************************************************************************/
 
d4483 1
a4483 1
 * 
a4487 11

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
 **
 *****************************************************************************/
 
a4491 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_device_dont_propagate_list_classes
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a4494 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_dont_propagate_list_classes_length
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4497 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_dont_propagate_list_classes_end
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4508 1
a4508 1
 * 
a4514 12

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_reply_t * xcb_input_get_device_dont_propagate_list_reply
 ** 
 ** @@param xcb_connection_t                                   *c
 ** @@param xcb_input_get_device_dont_propagate_list_cookie_t   cookie
 ** @@param xcb_generic_error_t                               **e
 ** @@returns xcb_input_get_device_dont_propagate_list_reply_t *
 **
 *****************************************************************************/
 
a4527 10

/*****************************************************************************
 **
 ** void xcb_input_device_time_coord_next
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4539 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_time_coord_end
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4549 1
a4549 1
 * 
a4550 13

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
 **
 *****************************************************************************/
 
d4563 1
a4563 1
 * 
a4567 13

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
 **
 *****************************************************************************/
 
d4581 1
a4581 1
 * 
a4587 12

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_reply_t * xcb_input_get_device_motion_events_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_input_get_device_motion_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_input_get_device_motion_events_reply_t *
 **
 *****************************************************************************/
 
d4599 1
a4599 1
 * 
a4600 11

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
 **
 *****************************************************************************/
 
d4611 1
a4611 1
 * 
a4615 11

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
 **
 *****************************************************************************/
 
d4627 1
a4627 1
 * 
a4633 12

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_reply_t * xcb_input_change_keyboard_device_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_change_keyboard_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_change_keyboard_device_reply_t *
 **
 *****************************************************************************/
 
d4645 1
a4645 1
 * 
a4646 13

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
 **
 *****************************************************************************/
 
d4659 1
a4659 1
 * 
a4663 13

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
 **
 *****************************************************************************/
 
d4677 1
a4677 1
 * 
a4683 12

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_reply_t * xcb_input_change_pointer_device_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_pointer_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_pointer_device_reply_t *
 **
 *****************************************************************************/
 
d4698 1
a4698 1
 * 
a4699 18

/*****************************************************************************
 **
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
 **
 *****************************************************************************/
 
d4717 1
a4717 1
 * 
a4721 18

/*****************************************************************************
 **
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
 **
 *****************************************************************************/
 
d4740 1
a4740 1
 * 
a4746 12

/*****************************************************************************
 **
 ** xcb_input_grab_device_reply_t * xcb_input_grab_device_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_grab_device_reply_t *
 **
 *****************************************************************************/
 
d4758 1
a4758 1
 * 
a4762 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4774 1
a4774 1
 * 
a4775 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4790 1
a4790 1
 * 
a4794 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_key_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4814 1
a4814 1
 * 
a4815 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_key
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4835 1
a4835 1
 * 
a4839 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_key_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4854 1
a4854 1
 * 
a4855 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_key
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4873 1
a4873 1
 * 
a4877 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_button_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4897 1
a4897 1
 * 
a4898 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_button
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4918 1
a4918 1
 * 
a4922 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_button_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4937 1
a4937 1
 * 
a4938 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_button
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4953 1
a4953 1
 * 
a4957 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_allow_device_events_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4970 1
a4970 1
 * 
a4971 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_allow_device_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4984 1
a4984 1
 * 
a4985 11

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
 **
 *****************************************************************************/
 
d4996 1
a4996 1
 * 
a5000 11

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
 **
 *****************************************************************************/
 
d5012 1
a5012 1
 * 
a5018 12

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_reply_t * xcb_input_get_device_focus_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_get_device_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_get_device_focus_reply_t *
 **
 *****************************************************************************/
 
d5030 1
a5030 1
 * 
a5034 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_set_device_focus_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5048 1
a5048 1
 * 
a5049 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_set_device_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a5064 10

/*****************************************************************************
 **
 ** void xcb_input_kbd_feedback_state_next
 ** 
 ** @@param xcb_input_kbd_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5076 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_state_end
 ** 
 ** @@param xcb_input_kbd_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5087 10

/*****************************************************************************
 **
 ** void xcb_input_ptr_feedback_state_next
 ** 
 ** @@param xcb_input_ptr_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5099 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_state_end
 ** 
 ** @@param xcb_input_ptr_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5110 10

/*****************************************************************************
 **
 ** void xcb_input_integer_feedback_state_next
 ** 
 ** @@param xcb_input_integer_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5122 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_integer_feedback_state_end
 ** 
 ** @@param xcb_input_integer_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5128 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_string_feedback_state_keysyms
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a5131 10

/*****************************************************************************
 **
 ** int xcb_input_string_feedback_state_keysyms_length
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5134 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_keysyms_end
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5145 10

/*****************************************************************************
 **
 ** void xcb_input_string_feedback_state_next
 ** 
 ** @@param xcb_input_string_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5157 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_end
 ** 
 ** @@param xcb_input_string_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5168 10

/*****************************************************************************
 **
 ** void xcb_input_bell_feedback_state_next
 ** 
 ** @@param xcb_input_bell_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5180 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_bell_feedback_state_end
 ** 
 ** @@param xcb_input_bell_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5191 10

/*****************************************************************************
 **
 ** void xcb_input_led_feedback_state_next
 ** 
 ** @@param xcb_input_led_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5203 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_led_feedback_state_end
 ** 
 ** @@param xcb_input_led_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5209 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_feedback_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5212 10

/*****************************************************************************
 **
 ** int xcb_input_feedback_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5215 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5226 10

/*****************************************************************************
 **
 ** void xcb_input_feedback_state_next
 ** 
 ** @@param xcb_input_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5238 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_state_end
 ** 
 ** @@param xcb_input_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5251 1
a5251 1
 * 
a5252 11

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
 **
 *****************************************************************************/
 
d5263 1
a5263 1
 * 
a5267 11

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
 **
 *****************************************************************************/
 
a5271 10

/*****************************************************************************
 **
 ** int xcb_input_get_feedback_control_feedbacks_length
 ** 
 ** @@param const xcb_input_get_feedback_control_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5274 10

/*****************************************************************************
 **
 ** xcb_input_feedback_state_iterator_t xcb_input_get_feedback_control_feedbacks_iterator
 ** 
 ** @@param const xcb_input_get_feedback_control_reply_t *R
 ** @@returns xcb_input_feedback_state_iterator_t
 **
 *****************************************************************************/
 
d5285 1
a5285 1
 * 
a5291 12

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_reply_t * xcb_input_get_feedback_control_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_get_feedback_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_get_feedback_control_reply_t *
 **
 *****************************************************************************/
 
a5304 10

/*****************************************************************************
 **
 ** void xcb_input_kbd_feedback_ctl_next
 ** 
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5316 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_ctl_end
 ** 
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5327 10

/*****************************************************************************
 **
 ** void xcb_input_ptr_feedback_ctl_next
 ** 
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5339 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_ctl_end
 ** 
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5350 10

/*****************************************************************************
 **
 ** void xcb_input_integer_feedback_ctl_next
 ** 
 ** @@param xcb_input_integer_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5362 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_integer_feedback_ctl_end
 ** 
 ** @@param xcb_input_integer_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5368 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_string_feedback_ctl_keysyms
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a5371 10

/*****************************************************************************
 **
 ** int xcb_input_string_feedback_ctl_keysyms_length
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5374 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_keysyms_end
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5385 10

/*****************************************************************************
 **
 ** void xcb_input_string_feedback_ctl_next
 ** 
 ** @@param xcb_input_string_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5397 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_end
 ** 
 ** @@param xcb_input_string_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5408 10

/*****************************************************************************
 **
 ** void xcb_input_bell_feedback_ctl_next
 ** 
 ** @@param xcb_input_bell_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5420 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_bell_feedback_ctl_end
 ** 
 ** @@param xcb_input_bell_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5431 10

/*****************************************************************************
 **
 ** void xcb_input_led_feedback_ctl_next
 ** 
 ** @@param xcb_input_led_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5443 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_led_feedback_ctl_end
 ** 
 ** @@param xcb_input_led_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5449 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_feedback_ctl_uninterpreted_data
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5452 10

/*****************************************************************************
 **
 ** int xcb_input_feedback_ctl_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5455 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5466 10

/*****************************************************************************
 **
 ** void xcb_input_feedback_ctl_next
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5478 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_end
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5491 1
a5491 1
 * 
a5495 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_feedback_control_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param uint32_t                  mask
 ** @@param uint8_t                   device_id
 ** @@param uint8_t                   feedback_id
 ** @@param xcb_input_feedback_ctl_t *feedback
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5509 1
a5509 1
 * 
a5510 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_feedback_control
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param uint32_t                  mask
 ** @@param uint8_t                   device_id
 ** @@param uint8_t                   feedback_id
 ** @@param xcb_input_feedback_ctl_t *feedback
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5527 1
a5527 1
 * 
a5528 13

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
 **
 *****************************************************************************/
 
d5541 1
a5541 1
 * 
a5545 13

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
 **
 *****************************************************************************/
 
a5551 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_get_device_key_mapping_keysyms
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a5554 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_key_mapping_keysyms_length
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5557 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_key_mapping_keysyms_end
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5568 1
a5568 1
 * 
a5574 12

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_reply_t * xcb_input_get_device_key_mapping_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_get_device_key_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_get_device_key_mapping_reply_t *
 **
 *****************************************************************************/
 
d5589 1
a5589 1
 * 
a5593 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5608 1
a5608 1
 * 
a5609 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5627 1
a5627 1
 * 
a5628 11

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d5639 1
a5639 1
 * 
a5643 11

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
a5647 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_modifier_mapping_keymaps
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5650 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_modifier_mapping_keymaps_length
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5653 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_modifier_mapping_keymaps_end
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5664 1
a5664 1
 * 
a5670 12

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_reply_t * xcb_input_get_device_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_get_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_get_device_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
d5685 1
a5685 1
 * 
a5686 13

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d5699 1
a5699 1
 * 
a5703 13

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d5717 1
a5717 1
 * 
a5723 12

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_reply_t * xcb_input_set_device_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_set_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_set_device_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
d5738 1
a5738 1
 * 
a5739 11

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d5750 1
a5750 1
 * 
a5754 11

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
a5758 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_button_mapping_map
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5761 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_button_mapping_map_length
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5764 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_button_mapping_map_end
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5775 1
a5775 1
 * 
a5781 12

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_reply_t * xcb_input_get_device_button_mapping_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_get_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_get_device_button_mapping_reply_t *
 **
 *****************************************************************************/
 
d5796 1
a5796 1
 * 
a5797 13

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d5810 1
a5810 1
 * 
a5814 13

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d5828 1
a5828 1
 * 
a5834 12

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_reply_t * xcb_input_set_device_button_mapping_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_set_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_set_device_button_mapping_reply_t *
 **
 *****************************************************************************/
 
a5847 10

/*****************************************************************************
 **
 ** void xcb_input_key_state_next
 ** 
 ** @@param xcb_input_key_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5859 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_state_end
 ** 
 ** @@param xcb_input_key_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5870 10

/*****************************************************************************
 **
 ** void xcb_input_button_state_next
 ** 
 ** @@param xcb_input_button_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5882 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_state_end
 ** 
 ** @@param xcb_input_button_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5888 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_valuator_state_valuators
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a5891 10

/*****************************************************************************
 **
 ** int xcb_input_valuator_state_valuators_length
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5894 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_state_valuators_end
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5905 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_state_next
 ** 
 ** @@param xcb_input_valuator_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5917 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_state_end
 ** 
 ** @@param xcb_input_valuator_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5923 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_input_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5926 10

/*****************************************************************************
 **
 ** int xcb_input_input_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5929 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5940 10

/*****************************************************************************
 **
 ** void xcb_input_input_state_next
 ** 
 ** @@param xcb_input_input_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5952 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_state_end
 ** 
 ** @@param xcb_input_input_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5965 1
a5965 1
 * 
a5966 11

/*****************************************************************************
 **
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
 **
 *****************************************************************************/
 
d5977 1
a5977 1
 * 
a5981 11

/*****************************************************************************
 **
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
 **
 *****************************************************************************/
 
a5985 10

/*****************************************************************************
 **
 ** int xcb_input_query_device_state_classes_length
 ** 
 ** @@param const xcb_input_query_device_state_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5988 10

/*****************************************************************************
 **
 ** xcb_input_input_state_iterator_t xcb_input_query_device_state_classes_iterator
 ** 
 ** @@param const xcb_input_query_device_state_reply_t *R
 ** @@returns xcb_input_input_state_iterator_t
 **
 *****************************************************************************/
 
d5999 1
a5999 1
 * 
a6005 12

/*****************************************************************************
 **
 ** xcb_input_query_device_state_reply_t * xcb_input_query_device_state_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_query_device_state_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_query_device_state_reply_t *
 **
 *****************************************************************************/
 
d6020 1
a6020 1
 * 
a6024 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_send_extension_event_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const uint8_t                 *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6041 1
a6041 1
 * 
a6042 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_send_extension_event
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const uint8_t                 *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6059 1
a6059 1
 * 
a6063 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_device_bell_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6077 1
a6077 1
 * 
a6078 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_device_bell
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6095 1
a6095 1
 * 
a6096 14

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
 **
 *****************************************************************************/
 
d6110 1
a6110 1
 * 
a6114 14

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
 **
 *****************************************************************************/
 
d6129 1
a6129 1
 * 
a6135 12

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_reply_t * xcb_input_set_device_valuators_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_set_device_valuators_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_set_device_valuators_reply_t *
 **
 *****************************************************************************/
 
a6143 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_values
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6146 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_values_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6149 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_values_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6152 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_min
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6155 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_min_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6158 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_min_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6161 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_max
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6164 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_max_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6167 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_max_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6178 10

/*****************************************************************************
 **
 ** void xcb_input_device_resolution_state_next
 ** 
 ** @@param xcb_input_device_resolution_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6190 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_end
 ** 
 ** @@param xcb_input_device_resolution_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6201 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_calib_state_next
 ** 
 ** @@param xcb_input_device_abs_calib_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6213 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_state_end
 ** 
 ** @@param xcb_input_device_abs_calib_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6224 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_area_state_next
 ** 
 ** @@param xcb_input_device_abs_area_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6236 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_area_state_end
 ** 
 ** @@param xcb_input_device_abs_area_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6247 10

/*****************************************************************************
 **
 ** void xcb_input_device_core_state_next
 ** 
 ** @@param xcb_input_device_core_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6259 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_core_state_end
 ** 
 ** @@param xcb_input_device_core_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6270 10

/*****************************************************************************
 **
 ** void xcb_input_device_enable_state_next
 ** 
 ** @@param xcb_input_device_enable_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6282 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_enable_state_end
 ** 
 ** @@param xcb_input_device_enable_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6288 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6291 10

/*****************************************************************************
 **
 ** int xcb_input_device_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6294 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6305 10

/*****************************************************************************
 **
 ** void xcb_input_device_state_next
 ** 
 ** @@param xcb_input_device_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6317 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_state_end
 ** 
 ** @@param xcb_input_device_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6330 1
a6330 1
 * 
a6331 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
 **
 *****************************************************************************/
 
d6343 1
a6343 1
 * 
a6347 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
 **
 *****************************************************************************/
 
a6352 10

/*****************************************************************************
 **
 ** xcb_input_device_state_t * xcb_input_get_device_control_control
 ** 
 ** @@param const xcb_input_get_device_control_reply_t *R
 ** @@returns xcb_input_device_state_t *
 **
 *****************************************************************************/
 
d6363 1
a6363 1
 * 
a6369 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_reply_t * xcb_input_get_device_control_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_get_device_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_get_device_control_reply_t *
 **
 *****************************************************************************/
 
a6377 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_ctl_resolution_values
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6380 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_ctl_resolution_values_length
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6383 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_resolution_values_end
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6394 10

/*****************************************************************************
 **
 ** void xcb_input_device_resolution_ctl_next
 ** 
 ** @@param xcb_input_device_resolution_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6406 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_end
 ** 
 ** @@param xcb_input_device_resolution_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6417 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_calib_ctl_next
 ** 
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6429 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_ctl_end
 ** 
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6440 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_area_ctrl_next
 ** 
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6452 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_area_ctrl_end
 ** 
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6463 10

/*****************************************************************************
 **
 ** void xcb_input_device_core_ctrl_next
 ** 
 ** @@param xcb_input_device_core_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6475 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_core_ctrl_end
 ** 
 ** @@param xcb_input_device_core_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6486 10

/*****************************************************************************
 **
 ** void xcb_input_device_enable_ctrl_next
 ** 
 ** @@param xcb_input_device_enable_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6498 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_enable_ctrl_end
 ** 
 ** @@param xcb_input_device_enable_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6504 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_ctl_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6507 10

/*****************************************************************************
 **
 ** int xcb_input_device_ctl_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6510 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_ctl_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6521 10

/*****************************************************************************
 **
 ** void xcb_input_device_ctl_next
 ** 
 ** @@param xcb_input_device_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6533 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_ctl_end
 ** 
 ** @@param xcb_input_device_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6546 1
a6546 1
 * 
a6547 13

/*****************************************************************************
 **
 ** xcb_input_change_device_control_cookie_t xcb_input_change_device_control
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint16_t                control_id
 ** @@param uint8_t                 device_id
 ** @@param xcb_input_device_ctl_t *control
 ** @@returns xcb_input_change_device_control_cookie_t
 **
 *****************************************************************************/
 
d6560 1
a6560 1
 * 
a6564 13

/*****************************************************************************
 **
 ** xcb_input_change_device_control_cookie_t xcb_input_change_device_control_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint16_t                control_id
 ** @@param uint8_t                 device_id
 ** @@param xcb_input_device_ctl_t *control
 ** @@returns xcb_input_change_device_control_cookie_t
 **
 *****************************************************************************/
 
d6578 1
a6578 1
 * 
a6584 12

/*****************************************************************************
 **
 ** xcb_input_change_device_control_reply_t * xcb_input_change_device_control_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_device_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_device_control_reply_t *
 **
 *****************************************************************************/
 
d6599 1
a6599 1
 * 
a6600 11

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_cookie_t xcb_input_list_device_properties
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_list_device_properties_cookie_t
 **
 *****************************************************************************/
 
d6611 1
a6611 1
 * 
a6615 11

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_cookie_t xcb_input_list_device_properties_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_list_device_properties_cookie_t
 **
 *****************************************************************************/
 
a6619 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_list_device_properties_atoms
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6622 10

/*****************************************************************************
 **
 ** int xcb_input_list_device_properties_atoms_length
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6625 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_list_device_properties_atoms_end
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6636 1
a6636 1
 * 
a6642 12

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_reply_t * xcb_input_list_device_properties_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_list_device_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_list_device_properties_reply_t *
 **
 *****************************************************************************/
 
a6647 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_change_device_property_items_data_8
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6650 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_8_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6654 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_8_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6658 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_change_device_property_items_data_16
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a6661 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_16_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6665 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_16_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6669 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_change_device_property_items_data_32
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6672 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_32_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6676 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_32_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6704 1
a6704 1
 * 
a6708 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           device_id
 ** @@param uint8_t           format
 ** @@param uint8_t           mode
 ** @@param uint32_t          num_items
 ** @@param const void       *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6725 1
a6725 1
 * 
a6726 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           device_id
 ** @@param uint8_t           format
 ** @@param uint8_t           mode
 ** @@param uint32_t          num_items
 ** @@param const void       *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6743 1
a6743 1
 * 
a6747 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_aux_checked
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_atom_t                                      property
 ** @@param xcb_atom_t                                      type
 ** @@param uint8_t                                         device_id
 ** @@param uint8_t                                         format
 ** @@param uint8_t                                         mode
 ** @@param uint32_t                                        num_items
 ** @@param const xcb_input_change_device_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6764 1
a6764 1
 * 
a6765 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_aux
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_atom_t                                      property
 ** @@param xcb_atom_t                                      type
 ** @@param uint8_t                                         device_id
 ** @@param uint8_t                                         format
 ** @@param uint8_t                                         mode
 ** @@param uint32_t                                        num_items
 ** @@param const xcb_input_change_device_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6782 1
a6782 1
 * 
a6786 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_delete_device_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6798 1
a6798 1
 * 
a6799 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_delete_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a6804 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_property_items_data_8
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6807 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_8_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6811 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_8_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6815 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_get_device_property_items_data_16
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a6818 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_16_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6822 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_16_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6826 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_get_device_property_items_data_32
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6829 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_32_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6833 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_32_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6861 1
a6861 1
 * 
a6862 16

/*****************************************************************************
 **
 ** xcb_input_get_device_property_cookie_t xcb_input_get_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          offset
 ** @@param uint32_t          len
 ** @@param uint8_t           device_id
 ** @@param uint8_t           _delete
 ** @@returns xcb_input_get_device_property_cookie_t
 **
 *****************************************************************************/
 
d6878 1
a6878 1
 * 
a6882 16

/*****************************************************************************
 **
 ** xcb_input_get_device_property_cookie_t xcb_input_get_device_property_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          offset
 ** @@param uint32_t          len
 ** @@param uint8_t           device_id
 ** @@param uint8_t           _delete
 ** @@returns xcb_input_get_device_property_cookie_t
 **
 *****************************************************************************/
 
a6891 10

/*****************************************************************************
 **
 ** xcb_input_get_device_property_items_t * xcb_input_get_device_property_items
 ** 
 ** @@param const xcb_input_get_device_property_reply_t *R
 ** @@returns xcb_input_get_device_property_items_t *
 **
 *****************************************************************************/
 
d6902 1
a6902 1
 * 
a6908 12

/*****************************************************************************
 **
 ** xcb_input_get_device_property_reply_t * xcb_input_get_device_property_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_input_get_device_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_input_get_device_property_reply_t *
 **
 *****************************************************************************/
 
a6921 10

/*****************************************************************************
 **
 ** void xcb_input_group_info_next
 ** 
 ** @@param xcb_input_group_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6933 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_group_info_end
 ** 
 ** @@param xcb_input_group_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6944 10

/*****************************************************************************
 **
 ** void xcb_input_modifier_info_next
 ** 
 ** @@param xcb_input_modifier_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6956 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_modifier_info_end
 ** 
 ** @@param xcb_input_modifier_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6969 1
a6969 1
 * 
a6970 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_cookie_t xcb_input_xi_query_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_pointer_cookie_t
 **
 *****************************************************************************/
 
d6982 1
a6982 1
 * 
a6986 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_cookie_t xcb_input_xi_query_pointer_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_pointer_cookie_t
 **
 *****************************************************************************/
 
a6991 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_query_pointer_buttons
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6994 10

/*****************************************************************************
 **
 ** int xcb_input_xi_query_pointer_buttons_length
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6997 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_query_pointer_buttons_end
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7008 1
a7008 1
 * 
a7014 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_reply_t * xcb_input_xi_query_pointer_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_xi_query_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_xi_query_pointer_reply_t *
 **
 *****************************************************************************/
 
d7026 1
a7026 1
 * 
a7030 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_warp_pointer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           src_win
 ** @@param xcb_window_t           dst_win
 ** @@param xcb_input_fp1616_t     src_x
 ** @@param xcb_input_fp1616_t     src_y
 ** @@param uint16_t               src_width
 ** @@param uint16_t               src_height
 ** @@param xcb_input_fp1616_t     dst_x
 ** @@param xcb_input_fp1616_t     dst_y
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7049 1
a7049 1
 * 
a7050 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_warp_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           src_win
 ** @@param xcb_window_t           dst_win
 ** @@param xcb_input_fp1616_t     src_x
 ** @@param xcb_input_fp1616_t     src_y
 ** @@param uint16_t               src_width
 ** @@param uint16_t               src_height
 ** @@param xcb_input_fp1616_t     dst_x
 ** @@param xcb_input_fp1616_t     dst_y
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7069 1
a7069 1
 * 
a7073 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_cursor_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7086 1
a7086 1
 * 
a7087 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_cursor
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a7096 10

/*****************************************************************************
 **
 ** char * xcb_input_add_master_name
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a7099 10

/*****************************************************************************
 **
 ** int xcb_input_add_master_name_length
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7102 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_add_master_name_end
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7113 10

/*****************************************************************************
 **
 ** void xcb_input_add_master_next
 ** 
 ** @@param xcb_input_add_master_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7125 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_add_master_end
 ** 
 ** @@param xcb_input_add_master_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7136 10

/*****************************************************************************
 **
 ** void xcb_input_remove_master_next
 ** 
 ** @@param xcb_input_remove_master_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7148 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_remove_master_end
 ** 
 ** @@param xcb_input_remove_master_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7159 10

/*****************************************************************************
 **
 ** void xcb_input_attach_slave_next
 ** 
 ** @@param xcb_input_attach_slave_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7171 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_attach_slave_end
 ** 
 ** @@param xcb_input_attach_slave_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7182 10

/*****************************************************************************
 **
 ** void xcb_input_detach_slave_next
 ** 
 ** @@param xcb_input_detach_slave_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7194 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_detach_slave_end
 ** 
 ** @@param xcb_input_detach_slave_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7200 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_hierarchy_change_uninterpreted_data
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7203 10

/*****************************************************************************
 **
 ** int xcb_input_hierarchy_change_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7206 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_change_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7217 10

/*****************************************************************************
 **
 ** void xcb_input_hierarchy_change_next
 ** 
 ** @@param xcb_input_hierarchy_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7229 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_change_end
 ** 
 ** @@param xcb_input_hierarchy_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7242 1
a7242 1
 * 
a7246 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_hierarchy_checked
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param uint8_t                             num_changes
 ** @@param const xcb_input_hierarchy_change_t *changes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7258 1
a7258 1
 * 
a7259 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_hierarchy
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param uint8_t                             num_changes
 ** @@param const xcb_input_hierarchy_change_t *changes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7271 1
a7271 1
 * 
a7275 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_client_pointer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7287 1
a7287 1
 * 
a7288 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_client_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7300 1
a7300 1
 * 
a7301 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_cookie_t xcb_input_xi_get_client_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_client_pointer_cookie_t
 **
 *****************************************************************************/
 
d7312 1
a7312 1
 * 
a7316 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_cookie_t xcb_input_xi_get_client_pointer_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_client_pointer_cookie_t
 **
 *****************************************************************************/
 
d7328 1
a7328 1
 * 
a7334 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_reply_t * xcb_input_xi_get_client_pointer_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_xi_get_client_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_xi_get_client_pointer_reply_t *
 **
 *****************************************************************************/
 
a7342 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_event_mask_mask
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7345 10

/*****************************************************************************
 **
 ** int xcb_input_event_mask_mask_length
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7348 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_mask_mask_end
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7359 10

/*****************************************************************************
 **
 ** void xcb_input_event_mask_next
 ** 
 ** @@param xcb_input_event_mask_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7371 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_mask_end
 ** 
 ** @@param xcb_input_event_mask_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7384 1
a7384 1
 * 
a7388 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_select_events_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_window_t                  window
 ** @@param uint16_t                      num_mask
 ** @@param const xcb_input_event_mask_t *masks
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7401 1
a7401 1
 * 
a7402 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_select_events
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_window_t                  window
 ** @@param uint16_t                      num_mask
 ** @@param const xcb_input_event_mask_t *masks
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7415 1
a7415 1
 * 
a7416 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_cookie_t xcb_input_xi_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_input_xi_query_version_cookie_t
 **
 *****************************************************************************/
 
d7428 1
a7428 1
 * 
a7432 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_cookie_t xcb_input_xi_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_input_xi_query_version_cookie_t
 **
 *****************************************************************************/
 
d7445 1
a7445 1
 * 
a7451 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_reply_t * xcb_input_xi_query_version_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_xi_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_xi_query_version_reply_t *
 **
 *****************************************************************************/
 
a7459 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_button_class_state
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7462 10

/*****************************************************************************
 **
 ** int xcb_input_button_class_state_length
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7465 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_state_end
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7468 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_button_class_labels
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a7471 10

/*****************************************************************************
 **
 ** int xcb_input_button_class_labels_length
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7474 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_labels_end
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7485 10

/*****************************************************************************
 **
 ** void xcb_input_button_class_next
 ** 
 ** @@param xcb_input_button_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7497 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_end
 ** 
 ** @@param xcb_input_button_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7503 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_key_class_keys
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7506 10

/*****************************************************************************
 **
 ** int xcb_input_key_class_keys_length
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7509 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_class_keys_end
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7520 10

/*****************************************************************************
 **
 ** void xcb_input_key_class_next
 ** 
 ** @@param xcb_input_key_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7532 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_class_end
 ** 
 ** @@param xcb_input_key_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7543 10

/*****************************************************************************
 **
 ** void xcb_input_scroll_class_next
 ** 
 ** @@param xcb_input_scroll_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7555 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_scroll_class_end
 ** 
 ** @@param xcb_input_scroll_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7566 10

/*****************************************************************************
 **
 ** void xcb_input_touch_class_next
 ** 
 ** @@param xcb_input_touch_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7578 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_touch_class_end
 ** 
 ** @@param xcb_input_touch_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7589 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_class_next
 ** 
 ** @@param xcb_input_valuator_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7601 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_class_end
 ** 
 ** @@param xcb_input_valuator_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7607 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_class_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7610 10

/*****************************************************************************
 **
 ** int xcb_input_device_class_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7613 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_class_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7624 10

/*****************************************************************************
 **
 ** void xcb_input_device_class_next
 ** 
 ** @@param xcb_input_device_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7636 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_class_end
 ** 
 ** @@param xcb_input_device_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7642 10

/*****************************************************************************
 **
 ** char * xcb_input_xi_device_info_name
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a7645 10

/*****************************************************************************
 **
 ** int xcb_input_xi_device_info_name_length
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7648 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_device_info_name_end
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7651 10

/*****************************************************************************
 **
 ** int xcb_input_xi_device_info_classes_length
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7654 10

/*****************************************************************************
 **
 ** xcb_input_device_class_iterator_t xcb_input_xi_device_info_classes_iterator
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns xcb_input_device_class_iterator_t
 **
 *****************************************************************************/
 
a7665 10

/*****************************************************************************
 **
 ** void xcb_input_xi_device_info_next
 ** 
 ** @@param xcb_input_xi_device_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7677 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_device_info_end
 ** 
 ** @@param xcb_input_xi_device_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7690 1
a7690 1
 * 
a7691 11

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_cookie_t xcb_input_xi_query_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_device_cookie_t
 **
 *****************************************************************************/
 
d7702 1
a7702 1
 * 
a7706 11

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_cookie_t xcb_input_xi_query_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_device_cookie_t
 **
 *****************************************************************************/
 
a7710 10

/*****************************************************************************
 **
 ** int xcb_input_xi_query_device_infos_length
 ** 
 ** @@param const xcb_input_xi_query_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7713 10

/*****************************************************************************
 **
 ** xcb_input_xi_device_info_iterator_t xcb_input_xi_query_device_infos_iterator
 ** 
 ** @@param const xcb_input_xi_query_device_reply_t *R
 ** @@returns xcb_input_xi_device_info_iterator_t
 **
 *****************************************************************************/
 
d7724 1
a7724 1
 * 
a7730 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_reply_t * xcb_input_xi_query_device_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_xi_query_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_xi_query_device_reply_t *
 **
 *****************************************************************************/
 
d7742 1
a7742 1
 * 
a7746 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_focus_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7759 1
a7759 1
 * 
a7760 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_focus
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7773 1
a7773 1
 * 
a7774 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_cookie_t xcb_input_xi_get_focus
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_get_focus_cookie_t
 **
 *****************************************************************************/
 
d7785 1
a7785 1
 * 
a7789 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_cookie_t xcb_input_xi_get_focus_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_get_focus_cookie_t
 **
 *****************************************************************************/
 
d7801 1
a7801 1
 * 
a7807 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_reply_t * xcb_input_xi_get_focus_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_input_xi_get_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_input_xi_get_focus_reply_t *
 **
 *****************************************************************************/
 
d7822 1
a7822 1
 * 
a7823 19

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_cookie_t xcb_input_xi_grab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param uint16_t               mask_len
 ** @@param const uint32_t        *mask
 ** @@returns xcb_input_xi_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7842 1
a7842 1
 * 
a7846 19

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_cookie_t xcb_input_xi_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param uint16_t               mask_len
 ** @@param const uint32_t        *mask
 ** @@returns xcb_input_xi_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7866 1
a7866 1
 * 
a7872 12

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_reply_t * xcb_input_xi_grab_device_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_input_xi_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_input_xi_grab_device_reply_t *
 **
 *****************************************************************************/
 
d7884 1
a7884 1
 * 
a7888 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7900 1
a7900 1
 * 
a7901 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_ungrab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7913 1
a7913 1
 * 
a7917 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_allow_events_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                event_mode
 ** @@param uint32_t               touchid
 ** @@param xcb_window_t           grab_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7932 1
a7932 1
 * 
a7933 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_allow_events
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                event_mode
 ** @@param uint32_t               touchid
 ** @@param xcb_window_t           grab_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a7949 10

/*****************************************************************************
 **
 ** void xcb_input_grab_modifier_info_next
 ** 
 ** @@param xcb_input_grab_modifier_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7961 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_grab_modifier_info_end
 ** 
 ** @@param xcb_input_grab_modifier_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7974 1
a7974 1
 * 
a7975 23

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_cookie_t xcb_input_xi_passive_grab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_window_t           grab_window
 ** @@param xcb_cursor_t           cursor
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint16_t               mask_len
 ** @@param uint8_t                grab_type
 ** @@param uint8_t                grab_mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param const uint32_t        *mask
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_input_xi_passive_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7998 1
a7998 1
 * 
a8002 23

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_cookie_t xcb_input_xi_passive_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_window_t           grab_window
 ** @@param xcb_cursor_t           cursor
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint16_t               mask_len
 ** @@param uint8_t                grab_type
 ** @@param uint8_t                grab_mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param const uint32_t        *mask
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_input_xi_passive_grab_device_cookie_t
 **
 *****************************************************************************/
 
a8018 10

/*****************************************************************************
 **
 ** xcb_input_grab_modifier_info_t * xcb_input_xi_passive_grab_device_modifiers
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns xcb_input_grab_modifier_info_t *
 **
 *****************************************************************************/
 
a8021 10

/*****************************************************************************
 **
 ** int xcb_input_xi_passive_grab_device_modifiers_length
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8024 10

/*****************************************************************************
 **
 ** xcb_input_grab_modifier_info_iterator_t xcb_input_xi_passive_grab_device_modifiers_iterator
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns xcb_input_grab_modifier_info_iterator_t
 **
 *****************************************************************************/
 
d8035 1
a8035 1
 * 
a8041 12

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_reply_t * xcb_input_xi_passive_grab_device_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_xi_passive_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_xi_passive_grab_device_reply_t *
 **
 *****************************************************************************/
 
d8056 1
a8056 1
 * 
a8060 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_passive_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           grab_window
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint8_t                grab_type
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8076 1
a8076 1
 * 
a8077 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_passive_ungrab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           grab_window
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint8_t                grab_type
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8096 1
a8096 1
 * 
a8097 11

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_cookie_t xcb_input_xi_list_properties
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_list_properties_cookie_t
 **
 *****************************************************************************/
 
d8108 1
a8108 1
 * 
a8112 11

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_cookie_t xcb_input_xi_list_properties_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_list_properties_cookie_t
 **
 *****************************************************************************/
 
a8116 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_xi_list_properties_properties
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8119 10

/*****************************************************************************
 **
 ** int xcb_input_xi_list_properties_properties_length
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8122 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_list_properties_properties_end
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8133 1
a8133 1
 * 
a8139 12

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_reply_t * xcb_input_xi_list_properties_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_xi_list_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_xi_list_properties_reply_t *
 **
 *****************************************************************************/
 
a8144 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_xi_change_property_items_data_8
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8147 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_8_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8151 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_8_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8155 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_xi_change_property_items_data_16
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a8158 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_16_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8162 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_16_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8166 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_change_property_items_data_32
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8169 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_32_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8173 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_32_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8201 1
a8201 1
 * 
a8205 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                format
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               num_items
 ** @@param const void            *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8222 1
a8222 1
 * 
a8223 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                format
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               num_items
 ** @@param const void            *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8240 1
a8240 1
 * 
a8244 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_aux_checked
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_device_id_t                       deviceid
 ** @@param uint8_t                                     mode
 ** @@param uint8_t                                     format
 ** @@param xcb_atom_t                                  property
 ** @@param xcb_atom_t                                  type
 ** @@param uint32_t                                    num_items
 ** @@param const xcb_input_xi_change_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8261 1
a8261 1
 * 
a8262 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_aux
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_device_id_t                       deviceid
 ** @@param uint8_t                                     mode
 ** @@param uint8_t                                     format
 ** @@param xcb_atom_t                                  property
 ** @@param xcb_atom_t                                  type
 ** @@param uint32_t                                    num_items
 ** @@param const xcb_input_xi_change_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8279 1
a8279 1
 * 
a8283 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_delete_property_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param xcb_atom_t             property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8295 1
a8295 1
 * 
a8296 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_delete_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param xcb_atom_t             property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a8301 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_xi_get_property_items_data_8
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8304 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_8_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8308 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_8_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8312 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_xi_get_property_items_data_16
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a8315 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_16_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8319 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_16_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8323 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_get_property_items_data_32
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8326 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_32_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8330 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_32_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8358 1
a8358 1
 * 
a8359 16

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_cookie_t xcb_input_xi_get_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                _delete
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               offset
 ** @@param uint32_t               len
 ** @@returns xcb_input_xi_get_property_cookie_t
 **
 *****************************************************************************/
 
d8375 1
a8375 1
 * 
a8379 16

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_cookie_t xcb_input_xi_get_property_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                _delete
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               offset
 ** @@param uint32_t               len
 ** @@returns xcb_input_xi_get_property_cookie_t
 **
 *****************************************************************************/
 
a8388 10

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_items_t * xcb_input_xi_get_property_items
 ** 
 ** @@param const xcb_input_xi_get_property_reply_t *R
 ** @@returns xcb_input_xi_get_property_items_t *
 **
 *****************************************************************************/
 
d8399 1
a8399 1
 * 
a8405 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_reply_t * xcb_input_xi_get_property_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_xi_get_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_xi_get_property_reply_t *
 **
 *****************************************************************************/
 
d8420 1
a8420 1
 * 
a8421 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_cookie_t xcb_input_xi_get_selected_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_selected_events_cookie_t
 **
 *****************************************************************************/
 
d8432 1
a8432 1
 * 
a8436 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_cookie_t xcb_input_xi_get_selected_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_selected_events_cookie_t
 **
 *****************************************************************************/
 
a8440 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_selected_events_masks_length
 ** 
 ** @@param const xcb_input_xi_get_selected_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8443 10

/*****************************************************************************
 **
 ** xcb_input_event_mask_iterator_t xcb_input_xi_get_selected_events_masks_iterator
 ** 
 ** @@param const xcb_input_xi_get_selected_events_reply_t *R
 ** @@returns xcb_input_event_mask_iterator_t
 **
 *****************************************************************************/
 
d8454 1
a8454 1
 * 
a8460 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_reply_t * xcb_input_xi_get_selected_events_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_xi_get_selected_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_xi_get_selected_events_reply_t *
 **
 *****************************************************************************/
 
a8473 10

/*****************************************************************************
 **
 ** void xcb_input_barrier_release_pointer_info_next
 ** 
 ** @@param xcb_input_barrier_release_pointer_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a8485 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_barrier_release_pointer_info_end
 ** 
 ** @@param xcb_input_barrier_release_pointer_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8498 1
a8498 1
 * 
a8502 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_barrier_release_pointer_checked
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param uint32_t                                        num_barriers
 ** @@param const xcb_input_barrier_release_pointer_info_t *barriers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8514 1
a8514 1
 * 
a8515 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_barrier_release_pointer
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param uint32_t                                        num_barriers
 ** @@param const xcb_input_barrier_release_pointer_info_t *barriers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a8558 10

/*****************************************************************************
 **
 ** void xcb_input_hierarchy_info_next
 ** 
 ** @@param xcb_input_hierarchy_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a8570 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_info_end
 ** 
 ** @@param xcb_input_hierarchy_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d17 3
d25 2
a26 2
#define XCB_INPUT_MAJOR_VERSION 1
#define XCB_INPUT_MINOR_VERSION 4
d30 11
d52 12
a63 1
typedef uint32_t xcb_input_event_class_t;
d66 1
a66 1
 * @@brief xcb_input_event_class_iterator_t
d68 5
a72 5
typedef struct xcb_input_event_class_iterator_t {
    xcb_input_event_class_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
} xcb_input_event_class_iterator_t;
d74 7
a80 4
typedef enum xcb_input_valuator_mode_t {
    XCB_INPUT_VALUATOR_MODE_RELATIVE = 0,
    XCB_INPUT_VALUATOR_MODE_ABSOLUTE = 1
} xcb_input_valuator_mode_t;
d82 8
a89 4
typedef enum xcb_input_propagate_mode_t {
    XCB_INPUT_PROPAGATE_MODE_ADD_TO_LIST = 0,
    XCB_INPUT_PROPAGATE_MODE_DELETE_FROM_LIST = 1
} xcb_input_propagate_mode_t;
d134 15
a169 58
 * @@brief xcb_input_list_input_devices_cookie_t
 **/
typedef struct xcb_input_list_input_devices_cookie_t {
    unsigned int sequence; /**<  */
} xcb_input_list_input_devices_cookie_t;

/** Opcode for xcb_input_list_input_devices. */
#define XCB_INPUT_LIST_INPUT_DEVICES 2

/**
 * @@brief xcb_input_list_input_devices_request_t
 **/
typedef struct xcb_input_list_input_devices_request_t {
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
} xcb_input_list_input_devices_request_t;

/**
 * @@brief xcb_input_list_input_devices_reply_t
 **/
typedef struct xcb_input_list_input_devices_reply_t {
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  devices_len; /**<  */
    uint8_t  pad1[23]; /**<  */
} xcb_input_list_input_devices_reply_t;

typedef enum xcb_input_input_class_t {
    XCB_INPUT_INPUT_CLASS_KEY = 0,
    XCB_INPUT_INPUT_CLASS_BUTTON = 1,
    XCB_INPUT_INPUT_CLASS_VALUATOR = 2,
    XCB_INPUT_INPUT_CLASS_FEEDBACK = 3,
    XCB_INPUT_INPUT_CLASS_PROXIMITY = 4,
    XCB_INPUT_INPUT_CLASS_FOCUS = 5,
    XCB_INPUT_INPUT_CLASS_OTHER = 6
} xcb_input_input_class_t;

/**
 * @@brief xcb_input_input_info_t
 **/
typedef struct xcb_input_input_info_t {
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
} xcb_input_input_info_t;

/**
 * @@brief xcb_input_input_info_iterator_t
 **/
typedef struct xcb_input_input_info_iterator_t {
    xcb_input_input_info_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
} xcb_input_input_info_iterator_t;

/**
d247 64
d456 5
d510 16
d555 1
a555 1
    uint32_t num_coords; /**<  */
a561 16
 * @@brief xcb_input_device_time_coord_t
 **/
typedef struct xcb_input_device_time_coord_t {
    xcb_timestamp_t time; /**<  */
} xcb_input_device_time_coord_t;

/**
 * @@brief xcb_input_device_time_coord_iterator_t
 **/
typedef struct xcb_input_device_time_coord_iterator_t {
    xcb_input_device_time_coord_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
} xcb_input_device_time_coord_iterator_t;

/**
d761 6
a766 6
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_THIS_DEVICE,
    XCB_INPUT_DEVICE_INPUT_MODE_SYNC_THIS_DEVICE,
    XCB_INPUT_DEVICE_INPUT_MODE_REPLAY_THIS_DEVICE,
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_OTHER_DEVICES,
    XCB_INPUT_DEVICE_INPUT_MODE_ASYNC_ALL,
    XCB_INPUT_DEVICE_INPUT_MODE_SYNC_ALL
a834 33
/**
 * @@brief xcb_input_get_feedback_control_cookie_t
 **/
typedef struct xcb_input_get_feedback_control_cookie_t {
    unsigned int sequence; /**<  */
} xcb_input_get_feedback_control_cookie_t;

/** Opcode for xcb_input_get_feedback_control. */
#define XCB_INPUT_GET_FEEDBACK_CONTROL 22

/**
 * @@brief xcb_input_get_feedback_control_request_t
 **/
typedef struct xcb_input_get_feedback_control_request_t {
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
} xcb_input_get_feedback_control_request_t;

/**
 * @@brief xcb_input_get_feedback_control_reply_t
 **/
typedef struct xcb_input_get_feedback_control_reply_t {
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_feedback; /**<  */
    uint8_t  pad1[22]; /**<  */
} xcb_input_get_feedback_control_reply_t;

d836 6
a841 6
    XCB_INPUT_FEEDBACK_CLASS_KEYBOARD,
    XCB_INPUT_FEEDBACK_CLASS_POINTER,
    XCB_INPUT_FEEDBACK_CLASS_STRING,
    XCB_INPUT_FEEDBACK_CLASS_INTEGER,
    XCB_INPUT_FEEDBACK_CLASS_LED,
    XCB_INPUT_FEEDBACK_CLASS_BELL
a844 18
 * @@brief xcb_input_feedback_state_t
 **/
typedef struct xcb_input_feedback_state_t {
    uint8_t  class_id; /**<  */
    uint8_t  id; /**<  */
    uint16_t len; /**<  */
} xcb_input_feedback_state_t;

/**
 * @@brief xcb_input_feedback_state_iterator_t
 **/
typedef struct xcb_input_feedback_state_iterator_t {
    xcb_input_feedback_state_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
} xcb_input_feedback_state_iterator_t;

/**
d849 1
a849 1
    uint8_t  id; /**<  */
d876 1
a876 1
    uint8_t  id; /**<  */
d898 1
a898 1
    uint8_t  id; /**<  */
d919 1
a919 1
    uint8_t  id; /**<  */
d939 1
a939 1
    uint8_t  id; /**<  */
d961 1
a961 1
    uint8_t  id; /**<  */
d977 1
a977 1
 * @@brief xcb_input_feedback_ctl_t
d979 1
a979 1
typedef struct xcb_input_feedback_ctl_t {
d981 1
a981 1
    uint8_t  id; /**<  */
d983 31
a1013 1
} xcb_input_feedback_ctl_t;
d1016 1
a1016 1
 * @@brief xcb_input_feedback_ctl_iterator_t
d1018 8
a1025 5
typedef struct xcb_input_feedback_ctl_iterator_t {
    xcb_input_feedback_ctl_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
} xcb_input_feedback_ctl_iterator_t;
d1032 1
a1032 1
    uint8_t              id; /**<  */
d1058 1
a1058 1
    uint8_t  id; /**<  */
d1080 1
a1080 1
    uint8_t  id; /**<  */
d1099 1
a1099 1
    uint8_t  id; /**<  */
d1119 1
a1119 1
    uint8_t  id; /**<  */
d1141 1
a1141 1
    uint8_t  id; /**<  */
d1157 33
a1373 51
 * @@brief xcb_input_query_device_state_cookie_t
 **/
typedef struct xcb_input_query_device_state_cookie_t {
    unsigned int sequence; /**<  */
} xcb_input_query_device_state_cookie_t;

/** Opcode for xcb_input_query_device_state. */
#define XCB_INPUT_QUERY_DEVICE_STATE 30

/**
 * @@brief xcb_input_query_device_state_request_t
 **/
typedef struct xcb_input_query_device_state_request_t {
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0[3]; /**<  */
} xcb_input_query_device_state_request_t;

/**
 * @@brief xcb_input_query_device_state_reply_t
 **/
typedef struct xcb_input_query_device_state_reply_t {
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  num_classes; /**<  */
    uint8_t  pad1[23]; /**<  */
} xcb_input_query_device_state_reply_t;

/**
 * @@brief xcb_input_input_state_t
 **/
typedef struct xcb_input_input_state_t {
    uint8_t class_id; /**<  */
    uint8_t len; /**<  */
    uint8_t num_items; /**<  */
} xcb_input_input_state_t;

/**
 * @@brief xcb_input_input_state_iterator_t
 **/
typedef struct xcb_input_input_state_iterator_t {
    xcb_input_input_state_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
} xcb_input_input_state_iterator_t;

/**
d1432 52
d1553 7
a1559 50
/**
 * @@brief xcb_input_get_device_control_cookie_t
 **/
typedef struct xcb_input_get_device_control_cookie_t {
    unsigned int sequence; /**<  */
} xcb_input_get_device_control_cookie_t;

/** Opcode for xcb_input_get_device_control. */
#define XCB_INPUT_GET_DEVICE_CONTROL 34

/**
 * @@brief xcb_input_get_device_control_request_t
 **/
typedef struct xcb_input_get_device_control_request_t {
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t control_id; /**<  */
    uint8_t  device_id; /**<  */
    uint8_t  pad0; /**<  */
} xcb_input_get_device_control_request_t;

/**
 * @@brief xcb_input_get_device_control_reply_t
 **/
typedef struct xcb_input_get_device_control_reply_t {
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  status; /**<  */
    uint8_t  pad1[23]; /**<  */
} xcb_input_get_device_control_reply_t;

/**
 * @@brief xcb_input_device_state_t
 **/
typedef struct xcb_input_device_state_t {
    uint16_t control_id; /**<  */
    uint16_t len; /**<  */
} xcb_input_device_state_t;

/**
 * @@brief xcb_input_device_state_iterator_t
 **/
typedef struct xcb_input_device_state_iterator_t {
    xcb_input_device_state_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
} xcb_input_device_state_iterator_t;
d1667 1
a1667 1
 * @@brief xcb_input_device_ctl_t
d1669 1
a1669 1
typedef struct xcb_input_device_ctl_t {
d1672 1
a1672 1
} xcb_input_device_ctl_t;
d1675 1
a1675 1
 * @@brief xcb_input_device_ctl_iterator_t
d1677 39
a1715 5
typedef struct xcb_input_device_ctl_iterator_t {
    xcb_input_device_ctl_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
} xcb_input_device_ctl_iterator_t;
d1822 16
a1837 2
/** Opcode for xcb_input_device_valuator. */
#define XCB_INPUT_DEVICE_VALUATOR 0
d1840 1
a1840 1
 * @@brief xcb_input_device_valuator_event_t
d1842 3
a1844 9
typedef struct xcb_input_device_valuator_event_t {
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint16_t device_state; /**<  */
    uint8_t  num_valuators; /**<  */
    uint8_t  first_valuator; /**<  */
    int32_t  valuators[6]; /**<  */
} xcb_input_device_valuator_event_t;
d1846 2
a1847 2
/** Opcode for xcb_input_device_key_press. */
#define XCB_INPUT_DEVICE_KEY_PRESS 1
d1850 1
a1850 1
 * @@brief xcb_input_device_key_press_event_t
d1852 8
a1859 16
typedef struct xcb_input_device_key_press_event_t {
    uint8_t         response_type; /**<  */
    uint8_t         detail; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_window_t    root; /**<  */
    xcb_window_t    event; /**<  */
    xcb_window_t    child; /**<  */
    int16_t         root_x; /**<  */
    int16_t         root_y; /**<  */
    int16_t         event_x; /**<  */
    int16_t         event_y; /**<  */
    uint16_t        state; /**<  */
    uint8_t         same_screen; /**<  */
    uint8_t         device_id; /**<  */
} xcb_input_device_key_press_event_t;
d1861 11
a1871 2
/** Opcode for xcb_input_device_key_release. */
#define XCB_INPUT_DEVICE_KEY_RELEASE 2
d1873 6
a1878 1
typedef xcb_input_device_key_press_event_t xcb_input_device_key_release_event_t;
d1880 2
a1881 2
/** Opcode for xcb_input_device_button_press. */
#define XCB_INPUT_DEVICE_BUTTON_PRESS 3
d1883 10
a1892 1
typedef xcb_input_device_key_press_event_t xcb_input_device_button_press_event_t;
d1894 11
a1904 2
/** Opcode for xcb_input_device_button_release. */
#define XCB_INPUT_DEVICE_BUTTON_RELEASE 4
d1906 5
a1910 1
typedef xcb_input_device_key_press_event_t xcb_input_device_button_release_event_t;
d1912 8
a1919 2
/** Opcode for xcb_input_device_motion_notify. */
#define XCB_INPUT_DEVICE_MOTION_NOTIFY 5
d1921 2
a1922 1
typedef xcb_input_device_key_press_event_t xcb_input_device_motion_notify_event_t;
d1924 15
a1938 2
/** Opcode for xcb_input_proximity_in. */
#define XCB_INPUT_PROXIMITY_IN 8
d1940 2
a1941 1
typedef xcb_input_device_key_press_event_t xcb_input_proximity_in_event_t;
d1943 11
a1953 2
/** Opcode for xcb_input_proximity_out. */
#define XCB_INPUT_PROXIMITY_OUT 9
d1955 6
a1960 1
typedef xcb_input_device_key_press_event_t xcb_input_proximity_out_event_t;
d1962 2
a1963 2
/** Opcode for xcb_input_focus_in. */
#define XCB_INPUT_FOCUS_IN 6
d1966 1
a1966 1
 * @@brief xcb_input_focus_in_event_t
d1968 12
a1979 10
typedef struct xcb_input_focus_in_event_t {
    uint8_t         response_type; /**<  */
    uint8_t         detail; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_window_t    window; /**<  */
    uint8_t         mode; /**<  */
    uint8_t         device_id; /**<  */
    uint8_t         pad0[18]; /**<  */
} xcb_input_focus_in_event_t;
d1981 8
a1988 2
/** Opcode for xcb_input_focus_out. */
#define XCB_INPUT_FOCUS_OUT 7
d1990 15
a2004 1
typedef xcb_input_focus_in_event_t xcb_input_focus_out_event_t;
d2006 4
a2009 2
/** Opcode for xcb_input_device_state_notify. */
#define XCB_INPUT_DEVICE_STATE_NOTIFY 10
d2012 1
a2012 1
 * @@brief xcb_input_device_state_notify_event_t
d2014 6
a2019 13
typedef struct xcb_input_device_state_notify_event_t {
    uint8_t         response_type; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         num_keys; /**<  */
    uint8_t         num_buttons; /**<  */
    uint8_t         num_valuators; /**<  */
    uint8_t         classes_reported; /**<  */
    uint8_t         buttons[4]; /**<  */
    uint8_t         keys[4]; /**<  */
    uint32_t        valuators[3]; /**<  */
} xcb_input_device_state_notify_event_t;
d2021 8
a2028 2
/** Opcode for xcb_input_device_mapping_notify. */
#define XCB_INPUT_DEVICE_MAPPING_NOTIFY 11
d2031 1
a2031 1
 * @@brief xcb_input_device_mapping_notify_event_t
d2033 6
a2038 11
typedef struct xcb_input_device_mapping_notify_event_t {
    uint8_t              response_type; /**<  */
    uint8_t              device_id; /**<  */
    uint16_t             sequence; /**<  */
    uint8_t              request; /**<  */
    xcb_input_key_code_t first_keycode; /**<  */
    uint8_t              count; /**<  */
    uint8_t              pad0; /**<  */
    xcb_timestamp_t      time; /**<  */
    uint8_t              pad1[20]; /**<  */
} xcb_input_device_mapping_notify_event_t;
d2040 8
a2047 2
/** Opcode for xcb_input_change_device_notify. */
#define XCB_INPUT_CHANGE_DEVICE_NOTIFY 12
d2050 1
a2050 1
 * @@brief xcb_input_change_device_notify_event_t
d2052 3
a2054 8
typedef struct xcb_input_change_device_notify_event_t {
    uint8_t         response_type; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         request; /**<  */
    uint8_t         pad0[23]; /**<  */
} xcb_input_change_device_notify_event_t;
d2056 2
a2057 2
/** Opcode for xcb_input_device_key_state_notify. */
#define XCB_INPUT_DEVICE_KEY_STATE_NOTIFY 13
d2060 1
a2060 1
 * @@brief xcb_input_device_key_state_notify_event_t
d2062 79
a2140 6
typedef struct xcb_input_device_key_state_notify_event_t {
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint8_t  keys[28]; /**<  */
} xcb_input_device_key_state_notify_event_t;
d2142 10
a2151 2
/** Opcode for xcb_input_device_button_state_notify. */
#define XCB_INPUT_DEVICE_BUTTON_STATE_NOTIFY 14
d2154 1
a2154 1
 * @@brief xcb_input_device_button_state_notify_event_t
d2156 5
a2160 6
typedef struct xcb_input_device_button_state_notify_event_t {
    uint8_t  response_type; /**<  */
    uint8_t  device_id; /**<  */
    uint16_t sequence; /**<  */
    uint8_t  buttons[28]; /**<  */
} xcb_input_device_button_state_notify_event_t;
d2162 12
a2173 2
/** Opcode for xcb_input_device_presence_notify. */
#define XCB_INPUT_DEVICE_PRESENCE_NOTIFY 15
d2176 1
a2176 1
 * @@brief xcb_input_device_presence_notify_event_t
d2178 5
a2182 10
typedef struct xcb_input_device_presence_notify_event_t {
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    uint8_t         devchange; /**<  */
    uint8_t         device_id; /**<  */
    uint16_t        control; /**<  */
    uint8_t         pad1[20]; /**<  */
} xcb_input_device_presence_notify_event_t;
d2184 9
a2192 2
/** Opcode for xcb_input_device. */
#define XCB_INPUT_DEVICE 0
d2195 620
a2814 1
 * @@brief xcb_input_device_error_t
d2816 1
a2816 1
typedef struct xcb_input_device_error_t {
d2818 1
a2818 1
    uint8_t  error_code; /**<  */
d2820 32
a2851 1
} xcb_input_device_error_t;
d2853 10
a2862 2
/** Opcode for xcb_input_event. */
#define XCB_INPUT_EVENT 1
d2865 1
a2865 1
 * @@brief xcb_input_event_error_t
d2867 1
a2867 1
typedef struct xcb_input_event_error_t {
d2869 1
a2869 1
    uint8_t  error_code; /**<  */
d2871 56
a2926 1
} xcb_input_event_error_t;
d2928 15
a2942 2
/** Opcode for xcb_input_mode. */
#define XCB_INPUT_MODE 2
d2945 1
a2945 1
 * @@brief xcb_input_mode_error_t
d2947 4974
a7920 5
typedef struct xcb_input_mode_error_t {
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
} xcb_input_mode_error_t;
a7921 2
/** Opcode for xcb_input_device_busy. */
#define XCB_INPUT_DEVICE_BUSY 3
d7923 11
a7933 20
/**
 * @@brief xcb_input_device_busy_error_t
 **/
typedef struct xcb_input_device_busy_error_t {
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
} xcb_input_device_busy_error_t;

/** Opcode for xcb_input_class. */
#define XCB_INPUT_CLASS 4

/**
 * @@brief xcb_input_class_error_t
 **/
typedef struct xcb_input_class_error_t {
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
} xcb_input_class_error_t;
d7937 1
a7937 1
 * @@param i Pointer to a xcb_input_key_code_iterator_t
d7941 1
a7941 1
 * element. The member index is increased by sizeof(xcb_input_key_code_t)
d7946 1
a7946 1
 ** void xcb_input_key_code_next
d7948 1
a7948 1
 ** @@param xcb_input_key_code_iterator_t *i
d7954 1
a7954 1
xcb_input_key_code_next (xcb_input_key_code_iterator_t *i  /**< */);
d7958 1
a7958 1
 * @@param i An xcb_input_key_code_iterator_t
d7968 43
a8010 1
 ** xcb_generic_iterator_t xcb_input_key_code_end
d8012 1
a8012 1
 ** @@param xcb_input_key_code_iterator_t i
d8018 1
a8018 1
xcb_input_key_code_end (xcb_input_key_code_iterator_t i  /**< */);
d8022 1
a8022 1
 * @@param i Pointer to a xcb_input_event_class_iterator_t
d8026 1
a8026 1
 * element. The member index is increased by sizeof(xcb_input_event_class_t)
d8031 1
a8031 1
 ** void xcb_input_event_class_next
d8033 1
a8033 1
 ** @@param xcb_input_event_class_iterator_t *i
d8039 1
a8039 1
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i  /**< */);
d8043 1
a8043 1
 * @@param i An xcb_input_event_class_iterator_t
d8053 1
a8053 1
 ** xcb_generic_iterator_t xcb_input_event_class_end
d8055 1
a8055 1
 ** @@param xcb_input_event_class_iterator_t i
d8061 1
a8061 1
xcb_input_event_class_end (xcb_input_event_class_iterator_t i  /**< */);
d8064 1
a8064 1
xcb_input_get_extension_version_sizeof (const void  *_buffer  /**< */);
d8077 1
a8077 1
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version
d8080 2
a8081 3
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
d8085 3
a8087 4
xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version (xcb_connection_t *c  /**< */,
                                 uint16_t          name_len  /**< */,
                                 const char       *name  /**< */);
d8103 1
a8103 1
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version_unchecked
d8106 29
a8134 3
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
d8138 2
a8139 4
xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version_unchecked (xcb_connection_t *c  /**< */,
                                           uint16_t          name_len  /**< */,
                                           const char       *name  /**< */);
d8150 1
a8150 1
 * xcb_input_get_extension_version_unchecked(). is used.
d8158 67
a8224 1
 ** xcb_input_get_extension_version_reply_t * xcb_input_get_extension_version_reply
d8226 9
a8234 4
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_get_extension_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_get_extension_version_reply_t *
d8238 9
a8246 4
xcb_input_get_extension_version_reply_t *
xcb_input_get_extension_version_reply (xcb_connection_t                          *c  /**< */,
                                       xcb_input_get_extension_version_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e  /**< */);
a8248 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_info_iterator_t
d8250 8
a8257 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_info_t)
d8262 1
a8262 1
 ** void xcb_input_device_info_next
d8264 6
a8269 2
 ** @@param xcb_input_device_info_iterator_t *i
 ** @@returns void
d8273 6
a8278 2
void
xcb_input_device_info_next (xcb_input_device_info_iterator_t *i  /**< */);
a8280 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_info_iterator_t
 * @@return  The iterator pointing to the last element
d8282 5
a8286 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d8291 1
a8291 1
 ** xcb_generic_iterator_t xcb_input_device_info_end
d8293 6
a8298 2
 ** @@param xcb_input_device_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
d8302 6
a8307 2
xcb_generic_iterator_t
xcb_input_device_info_end (xcb_input_device_info_iterator_t i  /**< */);
d8310 1
a8310 1
xcb_input_list_input_devices_sizeof (const void  *_buffer  /**< */);
d8323 1
a8323 1
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices
d8326 5
a8330 1
 ** @@returns xcb_input_list_input_devices_cookie_t
d8334 6
a8339 2
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices (xcb_connection_t *c  /**< */);
d8355 1
a8355 1
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices_unchecked
d8358 5
a8362 1
 ** @@returns xcb_input_list_input_devices_cookie_t
d8366 6
a8371 41
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices_unchecked (xcb_connection_t *c  /**< */);


/*****************************************************************************
 **
 ** xcb_input_device_info_t * xcb_input_list_input_devices_devices
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_t *
 **
 *****************************************************************************/
 
xcb_input_device_info_t *
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** int xcb_input_list_input_devices_devices_length
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** xcb_input_device_info_iterator_t xcb_input_list_input_devices_devices_iterator
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_iterator_t
 **
 *****************************************************************************/
 
xcb_input_device_info_iterator_t
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R  /**< */);
d8382 1
a8382 1
 * xcb_input_list_input_devices_unchecked(). is used.
d8390 1
a8390 1
 ** xcb_input_list_input_devices_reply_t * xcb_input_list_input_devices_reply
d8392 4
a8395 4
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_list_input_devices_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_list_input_devices_reply_t *
d8399 4
a8402 4
xcb_input_list_input_devices_reply_t *
xcb_input_list_input_devices_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_list_input_devices_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e  /**< */);
d8404 2
a8405 20
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_input_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_input_info_t)
 */

/*****************************************************************************
 **
 ** void xcb_input_input_info_next
 ** 
 ** @@param xcb_input_input_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i  /**< */);
a8406 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_input_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d8410 1
a8410 1
 ** xcb_generic_iterator_t xcb_input_input_info_end
d8412 2
a8413 2
 ** @@param xcb_input_input_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
d8417 2
a8418 2
xcb_generic_iterator_t
xcb_input_input_info_end (xcb_input_input_info_iterator_t i  /**< */);
a8419 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_info_t)
 */
d8423 1
a8423 1
 ** void xcb_input_key_info_next
d8425 2
a8426 2
 ** @@param xcb_input_key_info_iterator_t *i
 ** @@returns void
d8430 2
a8431 2
void
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i  /**< */);
a8432 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d8436 1
a8436 1
 ** xcb_generic_iterator_t xcb_input_key_info_end
d8438 1
a8438 1
 ** @@param xcb_input_key_info_iterator_t i
d8444 1
a8444 1
xcb_input_key_info_end (xcb_input_key_info_iterator_t i  /**< */);
a8445 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_button_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_button_info_t)
 */
d8449 1
a8449 1
 ** void xcb_input_button_info_next
d8451 2
a8452 2
 ** @@param xcb_input_button_info_iterator_t *i
 ** @@returns void
d8456 2
a8457 24
void
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i  /**< */);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_button_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_info_end
 ** 
 ** @@param xcb_input_button_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_button_info_end (xcb_input_button_info_iterator_t i  /**< */);
a8458 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_axis_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_axis_info_t)
 */
d8462 1
a8462 1
 ** void xcb_input_axis_info_next
d8464 2
a8465 2
 ** @@param xcb_input_axis_info_iterator_t *i
 ** @@returns void
d8469 2
a8470 2
void
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i  /**< */);
a8471 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_axis_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d8475 1
a8475 1
 ** xcb_generic_iterator_t xcb_input_axis_info_end
d8477 1
a8477 1
 ** @@param xcb_input_axis_info_iterator_t i
d8483 1
a8483 4
xcb_input_axis_info_end (xcb_input_axis_info_iterator_t i  /**< */);

int
xcb_input_valuator_info_sizeof (const void  *_buffer  /**< */);
d8488 1
a8488 1
 ** xcb_input_axis_info_t * xcb_input_valuator_info_axes
d8490 2
a8491 2
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_t *
d8495 2
a8496 2
xcb_input_axis_info_t *
xcb_input_valuator_info_axes (const xcb_input_valuator_info_t *R  /**< */);
d8501 1
a8501 1
 ** int xcb_input_valuator_info_axes_length
d8503 1
a8503 1
 ** @@param const xcb_input_valuator_info_t *R
d8509 1
a8509 1
xcb_input_valuator_info_axes_length (const xcb_input_valuator_info_t *R  /**< */);
d8514 1
a8514 1
 ** xcb_input_axis_info_iterator_t xcb_input_valuator_info_axes_iterator
d8516 2
a8517 2
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_iterator_t
d8521 2
a8522 2
xcb_input_axis_info_iterator_t
xcb_input_valuator_info_axes_iterator (const xcb_input_valuator_info_t *R  /**< */);
d8526 1
a8526 1
 * @@param i Pointer to a xcb_input_valuator_info_iterator_t
d8530 1
a8530 1
 * element. The member index is increased by sizeof(xcb_input_valuator_info_t)
d8535 1
a8535 1
 ** void xcb_input_valuator_info_next
d8537 1
a8537 1
 ** @@param xcb_input_valuator_info_iterator_t *i
d8543 1
a8543 1
xcb_input_valuator_info_next (xcb_input_valuator_info_iterator_t *i  /**< */);
d8547 1
a8547 1
 * @@param i An xcb_input_valuator_info_iterator_t
d8557 1
a8557 1
 ** xcb_generic_iterator_t xcb_input_valuator_info_end
d8559 1
a8559 1
 ** @@param xcb_input_valuator_info_iterator_t i
d8565 1
a8565 1
xcb_input_valuator_info_end (xcb_input_valuator_info_iterator_t i  /**< */);
d8569 1
a8569 1
 * @@param i Pointer to a xcb_input_input_class_info_iterator_t
d8573 1
a8573 1
 * element. The member index is increased by sizeof(xcb_input_input_class_info_t)
d8578 1
a8578 1
 ** void xcb_input_input_class_info_next
d8580 1
a8580 1
 ** @@param xcb_input_input_class_info_iterator_t *i
d8586 1
a8586 1
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i  /**< */);
d8590 1
a8590 1
 * @@param i An xcb_input_input_class_info_iterator_t
d8600 1
a8600 1
 ** xcb_generic_iterator_t xcb_input_input_class_info_end
d8602 1
a8602 1
 ** @@param xcb_input_input_class_info_iterator_t i
d8608 1
a8608 4
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i  /**< */);

int
xcb_input_open_device_sizeof (const void  *_buffer  /**< */);
d8611 2
d8614 3
a8616 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d8621 1
a8621 1
 ** xcb_input_open_device_cookie_t xcb_input_open_device
d8623 2
a8624 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
d8628 2
a8629 3
xcb_input_open_device_cookie_t
xcb_input_open_device (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */);
d8632 3
d8636 3
a8638 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d8643 1
a8643 1
 ** xcb_input_open_device_cookie_t xcb_input_open_device_unchecked
d8645 2
a8646 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
d8650 2
a8651 3
xcb_input_open_device_cookie_t
xcb_input_open_device_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           device_id  /**< */);
d8653 8
d8664 1
a8664 1
 ** xcb_input_input_class_info_t * xcb_input_open_device_class_info
d8666 2
a8667 2
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_t *
d8671 2
a8672 28
xcb_input_input_class_info_t *
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** int xcb_input_open_device_class_info_length
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** xcb_input_input_class_info_iterator_t xcb_input_open_device_class_info_iterator
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_iterator_t
 **
 *****************************************************************************/
 
xcb_input_input_class_info_iterator_t
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R  /**< */);
d8675 3
a8677 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d8679 3
a8681 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_open_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d8686 1
a8686 1
 ** xcb_input_open_device_reply_t * xcb_input_open_device_reply
d8688 2
a8689 4
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_open_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_open_device_reply_t *
d8693 2
a8694 4
xcb_input_open_device_reply_t *
xcb_input_open_device_reply (xcb_connection_t                *c  /**< */,
                             xcb_input_open_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e  /**< */);
d8697 2
d8700 3
a8702 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
d8707 1
a8707 1
 ** xcb_void_cookie_t xcb_input_close_device_checked
d8709 2
a8710 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d8714 2
a8715 3
xcb_void_cookie_t
xcb_input_close_device_checked (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */);
d8718 3
d8722 3
a8724 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d8729 1
a8729 1
 ** xcb_void_cookie_t xcb_input_close_device
d8731 2
a8732 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d8736 5
a8740 3
xcb_void_cookie_t
xcb_input_close_device (xcb_connection_t *c  /**< */,
                        uint8_t           device_id  /**< */);
a8741 8
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 */
d8745 1
a8745 1
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode
d8747 2
a8748 4
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
d8752 2
a8753 4
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode (xcb_connection_t *c  /**< */,
                           uint8_t           device_id  /**< */,
                           uint8_t           mode  /**< */);
a8754 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
d8758 1
a8758 1
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode_unchecked
d8760 2
a8761 4
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
d8765 2
a8766 4
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode_unchecked (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           mode  /**< */);
a8767 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_mode_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d8771 1
a8771 1
 ** xcb_input_set_device_mode_reply_t * xcb_input_set_device_mode_reply
d8773 2
a8774 4
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_set_device_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_set_device_mode_reply_t *
d8778 2
a8779 7
xcb_input_set_device_mode_reply_t *
xcb_input_set_device_mode_reply (xcb_connection_t                    *c  /**< */,
                                 xcb_input_set_device_mode_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e  /**< */);

int
xcb_input_select_extension_event_sizeof (const void  *_buffer  /**< */);
d8782 2
d8785 3
a8787 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
d8792 1
a8792 1
 ** xcb_void_cookie_t xcb_input_select_extension_event_checked
d8794 2
a8795 5
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d8799 2
a8800 5
xcb_void_cookie_t
xcb_input_select_extension_event_checked (xcb_connection_t              *c  /**< */,
                                          xcb_window_t                   window  /**< */,
                                          uint16_t                       num_classes  /**< */,
                                          const xcb_input_event_class_t *classes  /**< */);
d8803 3
d8807 3
a8809 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d8814 1
a8814 1
 ** xcb_void_cookie_t xcb_input_select_extension_event
d8816 2
a8817 5
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d8821 2
a8822 5
xcb_void_cookie_t
xcb_input_select_extension_event (xcb_connection_t              *c  /**< */,
                                  xcb_window_t                   window  /**< */,
                                  uint16_t                       num_classes  /**< */,
                                  const xcb_input_event_class_t *classes  /**< */);
d8825 1
a8825 1
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer  /**< */);
d8838 1
a8838 1
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events
d8841 3
a8843 2
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
d8847 4
a8850 3
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */);
d8866 1
a8866 1
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events_unchecked
d8869 3
a8871 2
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
d8875 4
a8878 3
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c  /**< */,
                                                   xcb_window_t      window  /**< */);
d8883 1
a8883 1
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_this_classes
d8885 2
a8886 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
d8890 2
a8891 2
xcb_input_event_class_t *
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d8893 14
d8910 1
a8910 1
 ** int xcb_input_get_selected_extension_events_this_classes_length
d8912 4
a8915 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
d8919 5
d8925 1
a8925 1
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d8930 1
a8930 1
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_this_classes_end
d8932 2
a8933 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
d8937 2
a8938 2
xcb_generic_iterator_t
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d8943 1
a8943 1
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_all_classes
d8945 1
a8945 14
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
xcb_input_event_class_t *
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** int xcb_input_get_selected_extension_events_all_classes_length
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
d8951 1
a8951 1
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d8956 1
a8956 1
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_all_classes_end
d8958 1
a8958 1
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
d8964 1
a8964 1
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */);
d8967 2
a8968 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d8970 3
a8972 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_selected_extension_events_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d8977 1
a8977 1
 ** xcb_input_get_selected_extension_events_reply_t * xcb_input_get_selected_extension_events_reply
d8979 2
a8980 4
 ** @@param xcb_connection_t                                  *c
 ** @@param xcb_input_get_selected_extension_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                              **e
 ** @@returns xcb_input_get_selected_extension_events_reply_t *
d8984 2
a8985 7
xcb_input_get_selected_extension_events_reply_t *
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c  /**< */,
                                               xcb_input_get_selected_extension_events_cookie_t   cookie  /**< */,
                                               xcb_generic_error_t                              **e  /**< */);

int
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */);
d8988 3
d8992 3
a8994 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
d8999 1
a8999 1
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list_checked
d9001 2
a9002 6
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d9006 2
a9007 6
xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c  /**< */,
                                                     xcb_window_t                   window  /**< */,
                                                     uint16_t                       num_classes  /**< */,
                                                     uint8_t                        mode  /**< */,
                                                     const xcb_input_event_class_t *classes  /**< */);
d9010 2
d9013 3
a9015 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d9020 1
a9020 1
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list
d9022 2
a9023 6
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d9027 2
a9028 9
xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c  /**< */,
                                             xcb_window_t                   window  /**< */,
                                             uint16_t                       num_classes  /**< */,
                                             uint8_t                        mode  /**< */,
                                             const xcb_input_event_class_t *classes  /**< */);

int
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */);
d9031 3
d9035 3
a9037 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d9042 1
a9042 1
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list
d9044 2
a9045 3
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
d9049 2
a9050 3
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */);
d9053 2
d9056 3
a9058 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d9063 1
a9063 1
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list_unchecked
d9065 2
a9066 3
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
d9070 2
a9071 3
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c  /**< */,
                                                    xcb_window_t      window  /**< */);
d9073 9
d9085 1
a9085 1
 ** xcb_input_event_class_t * xcb_input_get_device_dont_propagate_list_classes
d9087 2
a9088 2
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns xcb_input_event_class_t *
d9092 2
a9093 2
xcb_input_event_class_t *
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d9095 8
d9106 1
a9106 1
 ** int xcb_input_get_device_dont_propagate_list_classes_length
d9108 2
a9109 2
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns int
d9113 2
a9114 2
int
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d9116 9
d9128 1
a9128 1
 ** xcb_generic_iterator_t xcb_input_get_device_dont_propagate_list_classes_end
d9130 1
a9130 1
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
d9136 1
a9136 1
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */);
d9139 2
a9140 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d9142 3
a9144 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_dont_propagate_list_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d9149 1
a9149 1
 ** xcb_input_get_device_dont_propagate_list_reply_t * xcb_input_get_device_dont_propagate_list_reply
d9151 2
a9152 4
 ** @@param xcb_connection_t                                   *c
 ** @@param xcb_input_get_device_dont_propagate_list_cookie_t   cookie
 ** @@param xcb_generic_error_t                               **e
 ** @@returns xcb_input_get_device_dont_propagate_list_reply_t *
d9156 2
a9157 4
xcb_input_get_device_dont_propagate_list_reply_t *
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c  /**< */,
                                                xcb_input_get_device_dont_propagate_list_cookie_t   cookie  /**< */,
                                                xcb_generic_error_t                               **e  /**< */);
d9160 3
d9164 3
a9166 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d9171 17
a9187 1
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events
d9189 2
a9190 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
d9194 2
a9195 5
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events (xcb_connection_t *c  /**< */,
                                    xcb_timestamp_t   start  /**< */,
                                    xcb_timestamp_t   stop  /**< */,
                                    uint8_t           device_id  /**< */);
a9196 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
d9200 1
a9200 1
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events_unchecked
d9202 2
a9203 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
d9207 2
a9208 5
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c  /**< */,
                                              xcb_timestamp_t   start  /**< */,
                                              xcb_timestamp_t   stop  /**< */,
                                              uint8_t           device_id  /**< */);
a9209 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_motion_events_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d9213 1
a9213 1
 ** xcb_input_get_device_motion_events_reply_t * xcb_input_get_device_motion_events_reply
d9215 2
a9216 4
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_input_get_device_motion_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_input_get_device_motion_events_reply_t *
d9220 2
a9221 4
xcb_input_get_device_motion_events_reply_t *
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c  /**< */,
                                          xcb_input_get_device_motion_events_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e  /**< */);
d9225 1
a9225 1
 * @@param i Pointer to a xcb_input_device_time_coord_iterator_t
d9229 1
a9229 1
 * element. The member index is increased by sizeof(xcb_input_device_time_coord_t)
d9234 1
a9234 1
 ** void xcb_input_device_time_coord_next
d9236 1
a9236 1
 ** @@param xcb_input_device_time_coord_iterator_t *i
d9242 1
a9242 1
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i  /**< */);
d9246 1
a9246 1
 * @@param i An xcb_input_device_time_coord_iterator_t
d9256 1
a9256 1
 ** xcb_generic_iterator_t xcb_input_device_time_coord_end
d9258 1
a9258 1
 ** @@param xcb_input_device_time_coord_iterator_t i
d9264 4
a9267 1
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i  /**< */);
d9280 1
a9280 1
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device
d9282 5
a9286 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
d9290 5
a9294 3
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */);
d9310 1
a9310 1
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device_unchecked
d9312 5
a9316 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
d9320 5
a9324 3
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */);
d9335 1
a9335 1
 * xcb_input_change_keyboard_device_unchecked(). is used.
d9343 1
a9343 1
 ** xcb_input_change_keyboard_device_reply_t * xcb_input_change_keyboard_device_reply
d9345 4
a9348 4
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_change_keyboard_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_change_keyboard_device_reply_t *
d9352 7
a9358 4
xcb_input_change_keyboard_device_reply_t *
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c  /**< */,
                                        xcb_input_change_keyboard_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e  /**< */);
d9371 1
a9371 1
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device
a9373 2
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
d9375 1
a9375 1
 ** @@returns xcb_input_change_pointer_device_cookie_t
d9379 3
a9381 5
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device (xcb_connection_t *c  /**< */,
                                 uint8_t           x_axis  /**< */,
                                 uint8_t           y_axis  /**< */,
                                 uint8_t           device_id  /**< */);
d9397 1
a9397 1
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device_unchecked
a9399 2
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
d9401 41
a9441 1
 ** @@returns xcb_input_change_pointer_device_cookie_t
d9445 2
a9446 5
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c  /**< */,
                                           uint8_t           x_axis  /**< */,
                                           uint8_t           y_axis  /**< */,
                                           uint8_t           device_id  /**< */);
d9457 1
a9457 1
 * xcb_input_change_pointer_device_unchecked(). is used.
d9465 59
a9523 1
 ** xcb_input_change_pointer_device_reply_t * xcb_input_change_pointer_device_reply
d9525 2
a9526 4
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_pointer_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_pointer_device_reply_t *
d9530 3
a9532 4
xcb_input_change_pointer_device_reply_t *
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c  /**< */,
                                       xcb_input_change_pointer_device_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e  /**< */);
d9534 9
d9544 16
a9559 1
xcb_input_grab_device_sizeof (const void  *_buffer  /**< */);
a9560 8
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 */
d9564 1
a9564 1
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device
d9566 2
a9567 10
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
d9571 2
a9572 10
xcb_input_grab_device_cookie_t
xcb_input_grab_device (xcb_connection_t              *c  /**< */,
                       xcb_window_t                   grab_window  /**< */,
                       xcb_timestamp_t                time  /**< */,
                       uint16_t                       num_classes  /**< */,
                       uint8_t                        this_device_mode  /**< */,
                       uint8_t                        other_device_mode  /**< */,
                       uint8_t                        owner_events  /**< */,
                       uint8_t                        device_id  /**< */,
                       const xcb_input_event_class_t *classes  /**< */);
a9573 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
d9577 1
a9577 1
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device_unchecked
d9579 2
a9580 10
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
d9584 3
a9586 10
xcb_input_grab_device_cookie_t
xcb_input_grab_device_unchecked (xcb_connection_t              *c  /**< */,
                                 xcb_window_t                   grab_window  /**< */,
                                 xcb_timestamp_t                time  /**< */,
                                 uint16_t                       num_classes  /**< */,
                                 uint8_t                        this_device_mode  /**< */,
                                 uint8_t                        other_device_mode  /**< */,
                                 uint8_t                        owner_events  /**< */,
                                 uint8_t                        device_id  /**< */,
                                 const xcb_input_event_class_t *classes  /**< */);
a9587 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_grab_device_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d9591 1
a9591 1
 ** xcb_input_grab_device_reply_t * xcb_input_grab_device_reply
d9593 2
a9594 4
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_grab_device_reply_t *
d9598 20
a9617 4
xcb_input_grab_device_reply_t *
xcb_input_grab_device_reply (xcb_connection_t                *c  /**< */,
                             xcb_input_grab_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e  /**< */);
d9633 1
a9633 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_checked
d9636 2
a9637 1
 ** @@param xcb_timestamp_t   time
d9639 4
d9648 8
a9655 3
xcb_input_ungrab_device_checked (xcb_connection_t *c  /**< */,
                                 xcb_timestamp_t   time  /**< */,
                                 uint8_t           device_id  /**< */);
d9668 1
a9668 1
 ** xcb_void_cookie_t xcb_input_ungrab_device
d9671 2
a9672 1
 ** @@param xcb_timestamp_t   time
d9674 4
d9683 8
a9690 6
xcb_input_ungrab_device (xcb_connection_t *c  /**< */,
                         xcb_timestamp_t   time  /**< */,
                         uint8_t           device_id  /**< */);

int
xcb_input_grab_device_key_sizeof (const void  *_buffer  /**< */);
d9706 1
a9706 1
 ** xcb_void_cookie_t xcb_input_grab_device_key_checked
d9708 8
a9715 11
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
d9721 8
a9728 11
xcb_input_grab_device_key_checked (xcb_connection_t              *c  /**< */,
                                   xcb_window_t                   grab_window  /**< */,
                                   uint16_t                       num_classes  /**< */,
                                   uint16_t                       modifiers  /**< */,
                                   uint8_t                        modifier_device  /**< */,
                                   uint8_t                        grabbed_device  /**< */,
                                   uint8_t                        key  /**< */,
                                   uint8_t                        this_device_mode  /**< */,
                                   uint8_t                        other_device_mode  /**< */,
                                   uint8_t                        owner_events  /**< */,
                                   const xcb_input_event_class_t *classes  /**< */);
d9741 1
a9741 1
 ** xcb_void_cookie_t xcb_input_grab_device_key
d9743 8
a9750 11
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
d9756 8
a9763 11
xcb_input_grab_device_key (xcb_connection_t              *c  /**< */,
                           xcb_window_t                   grab_window  /**< */,
                           uint16_t                       num_classes  /**< */,
                           uint16_t                       modifiers  /**< */,
                           uint8_t                        modifier_device  /**< */,
                           uint8_t                        grabbed_device  /**< */,
                           uint8_t                        key  /**< */,
                           uint8_t                        this_device_mode  /**< */,
                           uint8_t                        other_device_mode  /**< */,
                           uint8_t                        owner_events  /**< */,
                           const xcb_input_event_class_t *classes  /**< */);
d9779 1
a9779 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_key_checked
d9782 2
a9783 5
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
d9789 3
a9791 6
xcb_input_ungrab_device_key_checked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      grabWindow  /**< */,
                                     uint16_t          modifiers  /**< */,
                                     uint8_t           modifier_device  /**< */,
                                     uint8_t           key  /**< */,
                                     uint8_t           grabbed_device  /**< */);
d9804 1
a9804 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_key
d9807 2
a9808 5
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
d9814 99
a9912 6
xcb_input_ungrab_device_key (xcb_connection_t *c  /**< */,
                             xcb_window_t      grabWindow  /**< */,
                             uint16_t          modifiers  /**< */,
                             uint8_t           modifier_device  /**< */,
                             uint8_t           key  /**< */,
                             uint8_t           grabbed_device  /**< */);
d9914 9
d9924 2
a9925 1
xcb_input_grab_device_button_sizeof (const void  *_buffer  /**< */);
a9926 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
d9930 1
a9930 1
 ** xcb_void_cookie_t xcb_input_grab_device_button_checked
d9932 2
a9933 12
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d9937 20
a9956 12
xcb_void_cookie_t
xcb_input_grab_device_button_checked (xcb_connection_t              *c  /**< */,
                                      xcb_window_t                   grab_window  /**< */,
                                      uint8_t                        grabbed_device  /**< */,
                                      uint8_t                        modifier_device  /**< */,
                                      uint16_t                       num_classes  /**< */,
                                      uint16_t                       modifiers  /**< */,
                                      uint8_t                        this_device_mode  /**< */,
                                      uint8_t                        other_device_mode  /**< */,
                                      uint8_t                        button  /**< */,
                                      uint8_t                        owner_events  /**< */,
                                      const xcb_input_event_class_t *classes  /**< */);
d9969 1
a9969 1
 ** xcb_void_cookie_t xcb_input_grab_device_button
d9971 8
a9978 12
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d9982 8
a9989 12
xcb_void_cookie_t
xcb_input_grab_device_button (xcb_connection_t              *c  /**< */,
                              xcb_window_t                   grab_window  /**< */,
                              uint8_t                        grabbed_device  /**< */,
                              uint8_t                        modifier_device  /**< */,
                              uint16_t                       num_classes  /**< */,
                              uint16_t                       modifiers  /**< */,
                              uint8_t                        this_device_mode  /**< */,
                              uint8_t                        other_device_mode  /**< */,
                              uint8_t                        button  /**< */,
                              uint8_t                        owner_events  /**< */,
                              const xcb_input_event_class_t *classes  /**< */);
d9998 1
a9998 1
 * This form can be used only if the request will not cause
d10000 1
a10000 1
 * saved for handling by xcb_request_check().
d10005 1
a10005 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_button_checked
d10008 26
a10033 6
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
d10037 2
a10038 7
xcb_void_cookie_t
xcb_input_ungrab_device_button_checked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      grab_window  /**< */,
                                        uint16_t          modifiers  /**< */,
                                        uint8_t           modifier_device  /**< */,
                                        uint8_t           button  /**< */,
                                        uint8_t           grabbed_device  /**< */);
d10041 4
d10046 5
a10050 2
 * @@param c The connection
 * @@return A cookie
d10052 1
a10052 2
 * Delivers a request to the X server.
 * 
d10057 1
a10057 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_button
d10059 4
a10062 7
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
d10066 4
a10069 7
xcb_void_cookie_t
xcb_input_ungrab_device_button (xcb_connection_t *c  /**< */,
                                xcb_window_t      grab_window  /**< */,
                                uint16_t          modifiers  /**< */,
                                uint8_t           modifier_device  /**< */,
                                uint8_t           button  /**< */,
                                uint8_t           grabbed_device  /**< */);
d10072 2
d10075 21
a10095 2
 * @@param c The connection
 * @@return A cookie
d10097 3
a10099 5
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
d10104 1
a10104 1
 ** xcb_void_cookie_t xcb_input_allow_device_events_checked
d10106 2
a10107 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d10111 2
a10112 5
xcb_void_cookie_t
xcb_input_allow_device_events_checked (xcb_connection_t *c  /**< */,
                                       xcb_timestamp_t   time  /**< */,
                                       uint8_t           mode  /**< */,
                                       uint8_t           device_id  /**< */);
d10115 2
d10118 21
a10138 2
 * @@param c The connection
 * @@return A cookie
d10140 3
a10142 2
 * Delivers a request to the X server.
 * 
d10147 1
a10147 1
 ** xcb_void_cookie_t xcb_input_allow_device_events
d10149 2
a10150 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d10154 5
a10158 5
xcb_void_cookie_t
xcb_input_allow_device_events (xcb_connection_t *c  /**< */,
                               xcb_timestamp_t   time  /**< */,
                               uint8_t           mode  /**< */,
                               uint8_t           device_id  /**< */);
d10171 1
a10171 1
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus
d10173 4
a10176 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
d10180 4
a10183 3
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus (xcb_connection_t *c  /**< */,
                            uint8_t           device_id  /**< */);
d10199 44
a10242 1
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus_unchecked
d10244 2
a10245 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
d10249 2
a10250 3
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus_unchecked (xcb_connection_t *c  /**< */,
                                      uint8_t           device_id  /**< */);
d10261 1
a10261 1
 * xcb_input_get_device_focus_unchecked(). is used.
d10269 1
a10269 1
 ** xcb_input_get_device_focus_reply_t * xcb_input_get_device_focus_reply
d10272 1
a10272 1
 ** @@param xcb_input_get_device_focus_cookie_t   cookie
d10274 75
a10348 1
 ** @@returns xcb_input_get_device_focus_reply_t *
d10352 11
a10362 4
xcb_input_get_device_focus_reply_t *
xcb_input_get_device_focus_reply (xcb_connection_t                     *c  /**< */,
                                  xcb_input_get_device_focus_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e  /**< */);
d10378 1
a10378 1
 ** xcb_void_cookie_t xcb_input_set_device_focus_checked
d10380 4
a10383 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
d10389 4
a10392 5
xcb_input_set_device_focus_checked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      focus  /**< */,
                                    xcb_timestamp_t   time  /**< */,
                                    uint8_t           revert_to  /**< */,
                                    uint8_t           device_id  /**< */);
d10405 1
a10405 1
 ** xcb_void_cookie_t xcb_input_set_device_focus
d10407 4
a10410 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
d10416 7
a10422 5
xcb_input_set_device_focus (xcb_connection_t *c  /**< */,
                            xcb_window_t      focus  /**< */,
                            xcb_timestamp_t   time  /**< */,
                            uint8_t           revert_to  /**< */,
                            uint8_t           device_id  /**< */);
a10423 8
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 */
d10427 1
a10427 1
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control
d10429 2
a10430 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
d10434 2
a10435 3
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */);
a10436 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
d10440 1
a10440 1
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control_unchecked
d10442 2
a10443 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
d10447 2
a10448 3
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */);
a10449 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_feedback_control_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d10453 1
a10453 1
 ** xcb_input_get_feedback_control_reply_t * xcb_input_get_feedback_control_reply
d10455 2
a10456 4
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_get_feedback_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_get_feedback_control_reply_t *
d10460 2
a10461 4
xcb_input_get_feedback_control_reply_t *
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c  /**< */,
                                      xcb_input_get_feedback_control_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e  /**< */);
d10465 1
a10465 1
 * @@param i Pointer to a xcb_input_feedback_state_iterator_t
d10469 1
a10469 1
 * element. The member index is increased by sizeof(xcb_input_feedback_state_t)
d10474 1
a10474 1
 ** void xcb_input_feedback_state_next
d10476 1
a10476 1
 ** @@param xcb_input_feedback_state_iterator_t *i
d10482 1
a10482 1
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i  /**< */);
d10486 1
a10486 1
 * @@param i An xcb_input_feedback_state_iterator_t
d10496 1
a10496 1
 ** xcb_generic_iterator_t xcb_input_feedback_state_end
d10498 1
a10498 1
 ** @@param xcb_input_feedback_state_iterator_t i
d10504 1
a10504 1
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i  /**< */);
d10508 1
a10508 1
 * @@param i Pointer to a xcb_input_kbd_feedback_state_iterator_t
d10512 1
a10512 1
 * element. The member index is increased by sizeof(xcb_input_kbd_feedback_state_t)
d10517 1
a10517 1
 ** void xcb_input_kbd_feedback_state_next
d10519 1
a10519 1
 ** @@param xcb_input_kbd_feedback_state_iterator_t *i
d10525 1
a10525 1
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i  /**< */);
d10529 1
a10529 1
 * @@param i An xcb_input_kbd_feedback_state_iterator_t
d10539 1
a10539 1
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_state_end
d10541 1
a10541 1
 ** @@param xcb_input_kbd_feedback_state_iterator_t i
d10547 1
a10547 1
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i  /**< */);
d10551 1
a10551 1
 * @@param i Pointer to a xcb_input_ptr_feedback_state_iterator_t
d10555 1
a10555 1
 * element. The member index is increased by sizeof(xcb_input_ptr_feedback_state_t)
d10560 1
a10560 1
 ** void xcb_input_ptr_feedback_state_next
d10562 1
a10562 1
 ** @@param xcb_input_ptr_feedback_state_iterator_t *i
d10568 1
a10568 1
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i  /**< */);
d10572 1
a10572 1
 * @@param i An xcb_input_ptr_feedback_state_iterator_t
d10582 1
a10582 1
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_state_end
d10584 1
a10584 1
 ** @@param xcb_input_ptr_feedback_state_iterator_t i
d10590 1
a10590 1
xcb_input_ptr_feedback_state_end (xcb_input_ptr_feedback_state_iterator_t i  /**< */);
d10594 1
a10594 1
 * @@param i Pointer to a xcb_input_integer_feedback_state_iterator_t
d10598 1
a10598 1
 * element. The member index is increased by sizeof(xcb_input_integer_feedback_state_t)
d10603 1
a10603 1
 ** void xcb_input_integer_feedback_state_next
d10605 1
a10605 1
 ** @@param xcb_input_integer_feedback_state_iterator_t *i
d10611 1
a10611 1
xcb_input_integer_feedback_state_next (xcb_input_integer_feedback_state_iterator_t *i  /**< */);
d10615 1
a10615 1
 * @@param i An xcb_input_integer_feedback_state_iterator_t
d10625 1
a10625 1
 ** xcb_generic_iterator_t xcb_input_integer_feedback_state_end
d10627 1
a10627 1
 ** @@param xcb_input_integer_feedback_state_iterator_t i
d10633 1
a10633 1
xcb_input_integer_feedback_state_end (xcb_input_integer_feedback_state_iterator_t i  /**< */);
d10636 1
a10636 1
xcb_input_string_feedback_state_sizeof (const void  *_buffer  /**< */);
d10641 1
a10641 1
 ** xcb_keysym_t * xcb_input_string_feedback_state_keysyms
d10643 2
a10644 2
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns xcb_keysym_t *
d10648 2
a10649 2
xcb_keysym_t *
xcb_input_string_feedback_state_keysyms (const xcb_input_string_feedback_state_t *R  /**< */);
d10654 1
a10654 1
 ** int xcb_input_string_feedback_state_keysyms_length
d10656 1
a10656 1
 ** @@param const xcb_input_string_feedback_state_t *R
d10662 1
a10662 1
xcb_input_string_feedback_state_keysyms_length (const xcb_input_string_feedback_state_t *R  /**< */);
d10667 1
a10667 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_keysyms_end
d10669 1
a10669 1
 ** @@param const xcb_input_string_feedback_state_t *R
d10675 1
a10675 1
xcb_input_string_feedback_state_keysyms_end (const xcb_input_string_feedback_state_t *R  /**< */);
d10679 1
a10679 1
 * @@param i Pointer to a xcb_input_string_feedback_state_iterator_t
d10683 1
a10683 1
 * element. The member index is increased by sizeof(xcb_input_string_feedback_state_t)
d10688 1
a10688 1
 ** void xcb_input_string_feedback_state_next
d10690 1
a10690 1
 ** @@param xcb_input_string_feedback_state_iterator_t *i
d10696 1
a10696 1
xcb_input_string_feedback_state_next (xcb_input_string_feedback_state_iterator_t *i  /**< */);
d10700 1
a10700 1
 * @@param i An xcb_input_string_feedback_state_iterator_t
d10710 1
a10710 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_end
d10712 1
a10712 1
 ** @@param xcb_input_string_feedback_state_iterator_t i
d10718 110
a10827 1
xcb_input_string_feedback_state_end (xcb_input_string_feedback_state_iterator_t i  /**< */);
a10829 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_bell_feedback_state_iterator_t
d10831 5
a10835 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_bell_feedback_state_t)
d10840 1
a10840 1
 ** void xcb_input_bell_feedback_state_next
d10842 3
a10844 2
 ** @@param xcb_input_bell_feedback_state_iterator_t *i
 ** @@returns void
d10848 3
a10850 2
void
xcb_input_bell_feedback_state_next (xcb_input_bell_feedback_state_iterator_t *i  /**< */);
a10852 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_bell_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
d10854 8
a10861 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d10866 1
a10866 1
 ** xcb_generic_iterator_t xcb_input_bell_feedback_state_end
d10868 3
a10870 2
 ** @@param xcb_input_bell_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d10874 3
a10876 2
xcb_generic_iterator_t
xcb_input_bell_feedback_state_end (xcb_input_bell_feedback_state_iterator_t i  /**< */);
d10879 10
a10888 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_led_feedback_state_iterator_t
d10890 1
a10890 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_led_feedback_state_t)
d10895 1
a10895 1
 ** void xcb_input_led_feedback_state_next
d10897 4
a10900 2
 ** @@param xcb_input_led_feedback_state_iterator_t *i
 ** @@returns void
d10904 7
a10910 2
void
xcb_input_led_feedback_state_next (xcb_input_led_feedback_state_iterator_t *i  /**< */);
a10911 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_led_feedback_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d10915 1
a10915 1
 ** xcb_generic_iterator_t xcb_input_led_feedback_state_end
d10917 2
a10918 2
 ** @@param xcb_input_led_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d10922 2
a10923 2
xcb_generic_iterator_t
xcb_input_led_feedback_state_end (xcb_input_led_feedback_state_iterator_t i  /**< */);
a10924 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_feedback_ctl_t)
 */
d10928 1
a10928 1
 ** void xcb_input_feedback_ctl_next
d10930 2
a10931 2
 ** @@param xcb_input_feedback_ctl_iterator_t *i
 ** @@returns void
d10935 2
a10936 2
void
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i  /**< */);
a10937 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d10941 1
a10941 1
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_end
d10943 1
a10943 1
 ** @@param xcb_input_feedback_ctl_iterator_t i
d10949 1
a10949 1
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i  /**< */);
d10953 1
a10953 1
 * @@param i Pointer to a xcb_input_kbd_feedback_ctl_iterator_t
d10957 1
a10957 1
 * element. The member index is increased by sizeof(xcb_input_kbd_feedback_ctl_t)
d10962 1
a10962 1
 ** void xcb_input_kbd_feedback_ctl_next
d10964 1
a10964 1
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t *i
d10970 1
a10970 1
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i  /**< */);
d10974 1
a10974 1
 * @@param i An xcb_input_kbd_feedback_ctl_iterator_t
d10984 1
a10984 1
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_ctl_end
d10986 1
a10986 1
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t i
d10992 4
a10995 1
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i  /**< */);
a10997 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_ptr_feedback_ctl_iterator_t
d10999 8
a11006 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_ptr_feedback_ctl_t)
d11011 1
a11011 1
 ** void xcb_input_ptr_feedback_ctl_next
d11013 5
a11017 2
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t *i
 ** @@returns void
d11021 5
a11025 2
void
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i  /**< */);
a11027 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_ptr_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
d11029 5
a11033 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d11038 1
a11038 1
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_ctl_end
d11040 5
a11044 2
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11048 5
a11052 2
xcb_generic_iterator_t
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i  /**< */);
a11054 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_integer_feedback_ctl_iterator_t
d11056 5
a11060 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_integer_feedback_ctl_t)
d11065 1
a11065 1
 ** void xcb_input_integer_feedback_ctl_next
d11067 4
a11070 2
 ** @@param xcb_input_integer_feedback_ctl_iterator_t *i
 ** @@returns void
d11074 4
a11077 2
void
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i  /**< */);
a11079 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_integer_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
d11081 8
a11088 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d11093 1
a11093 1
 ** xcb_generic_iterator_t xcb_input_integer_feedback_ctl_end
d11095 4
a11098 2
 ** @@param xcb_input_integer_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11102 4
a11105 5
xcb_generic_iterator_t
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i  /**< */);

int
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer  /**< */);
d11107 14
d11124 1
a11124 1
 ** xcb_keysym_t * xcb_input_string_feedback_ctl_keysyms
d11126 4
a11129 2
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_keysym_t *
d11133 7
a11139 2
xcb_keysym_t *
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R  /**< */);
d11144 1
a11144 1
 ** int xcb_input_string_feedback_ctl_keysyms_length
d11146 2
a11147 2
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns int
d11151 2
a11152 2
int
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R  /**< */);
d11157 1
a11157 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_keysyms_end
d11159 2
a11160 2
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
d11164 2
a11165 2
xcb_generic_iterator_t
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R  /**< */);
a11166 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_string_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_string_feedback_ctl_t)
 */
d11170 1
a11170 1
 ** void xcb_input_string_feedback_ctl_next
d11172 2
a11173 2
 ** @@param xcb_input_string_feedback_ctl_iterator_t *i
 ** @@returns void
d11177 2
a11178 2
void
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i  /**< */);
a11179 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_string_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d11183 1
a11183 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_end
d11185 2
a11186 2
 ** @@param xcb_input_string_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11190 2
a11191 2
xcb_generic_iterator_t
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i  /**< */);
a11192 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_bell_feedback_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_bell_feedback_ctl_t)
 */
d11196 1
a11196 1
 ** void xcb_input_bell_feedback_ctl_next
d11198 2
a11199 2
 ** @@param xcb_input_bell_feedback_ctl_iterator_t *i
 ** @@returns void
d11203 2
a11204 2
void
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i  /**< */);
a11205 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_bell_feedback_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d11209 1
a11209 1
 ** xcb_generic_iterator_t xcb_input_bell_feedback_ctl_end
d11211 1
a11211 1
 ** @@param xcb_input_bell_feedback_ctl_iterator_t i
d11217 1
a11217 1
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i  /**< */);
d11221 1
a11221 1
 * @@param i Pointer to a xcb_input_led_feedback_ctl_iterator_t
d11225 1
a11225 1
 * element. The member index is increased by sizeof(xcb_input_led_feedback_ctl_t)
d11230 1
a11230 1
 ** void xcb_input_led_feedback_ctl_next
d11232 1
a11232 1
 ** @@param xcb_input_led_feedback_ctl_iterator_t *i
d11238 1
a11238 1
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i  /**< */);
d11242 1
a11242 1
 * @@param i An xcb_input_led_feedback_ctl_iterator_t
d11252 1
a11252 1
 ** xcb_generic_iterator_t xcb_input_led_feedback_ctl_end
d11254 1
a11254 1
 ** @@param xcb_input_led_feedback_ctl_iterator_t i
d11260 1
a11260 1
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i  /**< */);
d11263 1
a11263 1
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer  /**< */);
a11264 8
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 */
d11268 1
a11268 1
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping
d11270 2
a11271 5
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
d11275 2
a11276 48
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping (xcb_connection_t     *c  /**< */,
                                  uint8_t               device_id  /**< */,
                                  xcb_input_key_code_t  first_keycode  /**< */,
                                  uint8_t               count  /**< */);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
 **
 *****************************************************************************/
 
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c  /**< */,
                                            uint8_t               device_id  /**< */,
                                            xcb_input_key_code_t  first_keycode  /**< */,
                                            uint8_t               count  /**< */);


/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_get_device_key_mapping_keysyms
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
xcb_keysym_t *
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d11281 1
a11281 1
 ** int xcb_input_get_device_key_mapping_keysyms_length
d11283 1
a11283 1
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
d11289 1
a11289 1
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d11294 1
a11294 1
 ** xcb_generic_iterator_t xcb_input_get_device_key_mapping_keysyms_end
d11296 1
a11296 1
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
d11302 1
a11302 1
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R  /**< */);
d11305 2
a11306 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d11308 3
a11310 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_key_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d11315 1
a11315 1
 ** xcb_input_get_device_key_mapping_reply_t * xcb_input_get_device_key_mapping_reply
d11317 2
a11318 4
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_get_device_key_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_get_device_key_mapping_reply_t *
d11322 2
a11323 7
xcb_input_get_device_key_mapping_reply_t *
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c  /**< */,
                                        xcb_input_get_device_key_mapping_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e  /**< */);

int
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer  /**< */);
d11326 3
d11330 3
a11332 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
d11337 1
a11337 1
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping_checked
d11339 2
a11340 7
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
d11344 2
a11345 7
xcb_void_cookie_t
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c  /**< */,
                                             uint8_t               device_id  /**< */,
                                             xcb_input_key_code_t  first_keycode  /**< */,
                                             uint8_t               keysyms_per_keycode  /**< */,
                                             uint8_t               keycode_count  /**< */,
                                             const xcb_keysym_t   *keysyms  /**< */);
d11348 2
d11351 3
a11353 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d11358 1
a11358 1
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping
d11360 2
a11361 7
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
d11365 2
a11366 10
xcb_void_cookie_t
xcb_input_change_device_key_mapping (xcb_connection_t     *c  /**< */,
                                     uint8_t               device_id  /**< */,
                                     xcb_input_key_code_t  first_keycode  /**< */,
                                     uint8_t               keysyms_per_keycode  /**< */,
                                     uint8_t               keycode_count  /**< */,
                                     const xcb_keysym_t   *keysyms  /**< */);

int
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer  /**< */);
d11369 3
d11373 3
a11375 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d11380 1
a11380 1
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping
d11382 2
a11383 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
d11387 2
a11388 3
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */);
d11391 2
d11394 3
a11396 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d11401 1
a11401 1
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping_unchecked
d11403 2
a11404 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
d11408 2
a11409 3
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */);
d11411 9
d11423 1
a11423 27
 ** uint8_t * xcb_input_get_device_modifier_mapping_keymaps
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
uint8_t *
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** int xcb_input_get_device_modifier_mapping_keymaps_length
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_modifier_mapping_keymaps_end
d11425 1
a11425 1
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
d11431 1
a11431 1
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */);
d11434 2
a11435 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d11437 3
a11439 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_modifier_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d11444 1
a11444 1
 ** xcb_input_get_device_modifier_mapping_reply_t * xcb_input_get_device_modifier_mapping_reply
d11446 2
a11447 4
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_get_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_get_device_modifier_mapping_reply_t *
d11451 2
a11452 7
xcb_input_get_device_modifier_mapping_reply_t *
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
                                             xcb_input_get_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e  /**< */);

int
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer  /**< */);
d11455 3
d11459 3
a11461 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d11466 1
a11466 1
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping
d11468 2
a11469 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
d11473 5
a11477 5
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */,
                                       uint8_t           keycodes_per_modifier  /**< */,
                                       const uint8_t    *keymaps  /**< */);
a11478 11
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
d11482 1
a11482 1
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping_unchecked
d11484 2
a11485 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
d11489 2
a11490 5
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */,
                                                 uint8_t           keycodes_per_modifier  /**< */,
                                                 const uint8_t    *keymaps  /**< */);
a11491 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_modifier_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d11495 1
a11495 1
 ** xcb_input_set_device_modifier_mapping_reply_t * xcb_input_set_device_modifier_mapping_reply
d11497 2
a11498 4
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_set_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_set_device_modifier_mapping_reply_t *
d11502 3
a11504 4
xcb_input_set_device_modifier_mapping_reply_t *
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
                                             xcb_input_set_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e  /**< */);
d11506 11
a11516 2
int
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer  /**< */);
d11519 2
d11522 3
a11524 5
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
d11529 1
a11529 1
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping
d11531 2
a11532 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
d11536 2
a11537 3
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */);
d11540 3
d11544 3
a11546 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d11551 1
a11551 1
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping_unchecked
d11553 2
a11554 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
d11558 5
a11562 3
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */);
d11567 1
a11567 1
 ** uint8_t * xcb_input_get_device_button_mapping_map
d11569 2
a11570 2
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns uint8_t *
d11574 2
a11575 2
uint8_t *
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
d11580 1
a11580 1
 ** int xcb_input_get_device_button_mapping_map_length
d11582 1
a11582 1
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
d11588 1
a11588 1
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
d11593 1
a11593 1
 ** xcb_generic_iterator_t xcb_input_get_device_button_mapping_map_end
d11595 1
a11595 1
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
d11601 1
a11601 1
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R  /**< */);
a11602 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_button_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d11606 1
a11606 1
 ** xcb_input_get_device_button_mapping_reply_t * xcb_input_get_device_button_mapping_reply
d11608 2
a11609 4
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_get_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_get_device_button_mapping_reply_t *
a11612 5
xcb_input_get_device_button_mapping_reply_t *
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
                                           xcb_input_get_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e  /**< */);

d11614 1
a11614 1
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer  /**< */);
a11615 8
/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 */
d11619 1
a11619 1
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping
d11621 2
a11622 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
d11626 2
a11627 5
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           map_size  /**< */,
                                     const uint8_t    *map  /**< */);
d11630 2
d11633 3
a11635 8
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 * 
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d11640 1
a11640 1
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping_unchecked
d11642 2
a11643 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
d11647 2
a11648 5
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */,
                                               uint8_t           map_size  /**< */,
                                               const uint8_t    *map  /**< */);
d11651 3
a11653 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d11655 3
a11657 7
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_set_device_button_mapping_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d11662 1
a11662 1
 ** xcb_input_set_device_button_mapping_reply_t * xcb_input_set_device_button_mapping_reply
d11664 2
a11665 4
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_set_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_set_device_button_mapping_reply_t *
d11669 5
a11673 4
xcb_input_set_device_button_mapping_reply_t *
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
                                           xcb_input_set_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e  /**< */);
d11686 1
a11686 1
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state
d11688 3
a11690 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
d11694 3
a11696 3
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state (xcb_connection_t *c  /**< */,
                              uint8_t           device_id  /**< */);
d11712 1
a11712 1
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state_unchecked
d11714 3
a11716 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
d11720 3
a11722 3
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state_unchecked (xcb_connection_t *c  /**< */,
                                        uint8_t           device_id  /**< */);
a11723 14
/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 * 
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_query_device_state_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
d11727 1
a11727 1
 ** xcb_input_query_device_state_reply_t * xcb_input_query_device_state_reply
d11729 2
a11730 4
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_query_device_state_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_query_device_state_reply_t *
d11734 2
a11735 4
xcb_input_query_device_state_reply_t *
xcb_input_query_device_state_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_query_device_state_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e  /**< */);
a11736 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_input_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_input_state_t)
 */
d11740 1
a11740 1
 ** void xcb_input_input_state_next
d11742 2
a11743 2
 ** @@param xcb_input_input_state_iterator_t *i
 ** @@returns void
d11747 2
a11748 2
void
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i  /**< */);
d11751 10
a11760 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_input_state_iterator_t
 * @@return  The iterator pointing to the last element
d11762 1
a11762 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d11767 1
a11767 1
 ** xcb_generic_iterator_t xcb_input_input_state_end
d11769 4
a11772 2
 ** @@param xcb_input_input_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11776 4
a11779 2
xcb_generic_iterator_t
xcb_input_input_state_end (xcb_input_input_state_iterator_t i  /**< */);
a11781 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_key_state_iterator_t
d11783 8
a11790 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_key_state_t)
d11795 1
a11795 1
 ** void xcb_input_key_state_next
d11797 5
a11801 2
 ** @@param xcb_input_key_state_iterator_t *i
 ** @@returns void
d11805 5
a11809 2
void
xcb_input_key_state_next (xcb_input_key_state_iterator_t *i  /**< */);
a11811 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_key_state_iterator_t
 * @@return  The iterator pointing to the last element
d11813 5
a11817 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d11822 1
a11822 1
 ** xcb_generic_iterator_t xcb_input_key_state_end
d11824 5
a11828 2
 ** @@param xcb_input_key_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11832 5
a11836 2
xcb_generic_iterator_t
xcb_input_key_state_end (xcb_input_key_state_iterator_t i  /**< */);
a11838 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_button_state_iterator_t
d11840 5
a11844 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_button_state_t)
d11849 1
a11849 1
 ** void xcb_input_button_state_next
d11851 3
a11853 2
 ** @@param xcb_input_button_state_iterator_t *i
 ** @@returns void
d11857 3
a11859 2
void
xcb_input_button_state_next (xcb_input_button_state_iterator_t *i  /**< */);
a11861 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_button_state_iterator_t
 * @@return  The iterator pointing to the last element
d11863 8
a11870 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d11875 1
a11875 1
 ** xcb_generic_iterator_t xcb_input_button_state_end
d11877 3
a11879 2
 ** @@param xcb_input_button_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d11883 3
a11885 5
xcb_generic_iterator_t
xcb_input_button_state_end (xcb_input_button_state_iterator_t i  /**< */);

int
xcb_input_valuator_state_sizeof (const void  *_buffer  /**< */);
d11887 14
d11904 1
a11904 1
 ** uint32_t * xcb_input_valuator_state_valuators
d11906 4
a11909 2
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns uint32_t *
d11913 4
a11916 2
uint32_t *
xcb_input_valuator_state_valuators (const xcb_input_valuator_state_t *R  /**< */);
a11917 10

/*****************************************************************************
 **
 ** int xcb_input_valuator_state_valuators_length
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d11919 1
a11919 1
xcb_input_valuator_state_valuators_length (const xcb_input_valuator_state_t *R  /**< */);
d11921 8
d11932 1
a11932 1
 ** xcb_generic_iterator_t xcb_input_valuator_state_valuators_end
d11934 11
a11944 2
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns xcb_generic_iterator_t
d11948 11
a11958 2
xcb_generic_iterator_t
xcb_input_valuator_state_valuators_end (const xcb_input_valuator_state_t *R  /**< */);
a11960 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_valuator_state_iterator_t
d11962 8
a11969 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_valuator_state_t)
d11974 1
a11974 1
 ** void xcb_input_valuator_state_next
d11976 11
a11986 2
 ** @@param xcb_input_valuator_state_iterator_t *i
 ** @@returns void
d11990 11
a12000 2
void
xcb_input_valuator_state_next (xcb_input_valuator_state_iterator_t *i  /**< */);
d12003 10
a12012 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_valuator_state_iterator_t
 * @@return  The iterator pointing to the last element
d12014 1
a12014 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d12019 1
a12019 1
 ** xcb_generic_iterator_t xcb_input_valuator_state_end
d12021 4
a12024 2
 ** @@param xcb_input_valuator_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d12028 4
a12031 5
xcb_generic_iterator_t
xcb_input_valuator_state_end (xcb_input_valuator_state_iterator_t i  /**< */);

int
xcb_input_send_extension_event_sizeof (const void  *_buffer  /**< */);
d12047 1
a12047 1
 ** xcb_void_cookie_t xcb_input_send_extension_event_checked
d12049 3
a12051 8
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const char                    *events
 ** @@param const xcb_input_event_class_t *classes
d12057 3
a12059 8
xcb_input_send_extension_event_checked (xcb_connection_t              *c  /**< */,
                                        xcb_window_t                   destination  /**< */,
                                        uint8_t                        device_id  /**< */,
                                        uint8_t                        propagate  /**< */,
                                        uint16_t                       num_classes  /**< */,
                                        uint8_t                        num_events  /**< */,
                                        const char                    *events  /**< */,
                                        const xcb_input_event_class_t *classes  /**< */);
d12072 1
a12072 1
 ** xcb_void_cookie_t xcb_input_send_extension_event
d12074 3
a12076 8
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const char                    *events
 ** @@param const xcb_input_event_class_t *classes
d12082 3
a12084 8
xcb_input_send_extension_event (xcb_connection_t              *c  /**< */,
                                xcb_window_t                   destination  /**< */,
                                uint8_t                        device_id  /**< */,
                                uint8_t                        propagate  /**< */,
                                uint16_t                       num_classes  /**< */,
                                uint8_t                        num_events  /**< */,
                                const char                    *events  /**< */,
                                const xcb_input_event_class_t *classes  /**< */);
d12100 1
a12100 1
 ** xcb_void_cookie_t xcb_input_device_bell_checked
d12102 6
a12107 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
d12113 6
a12118 5
xcb_input_device_bell_checked (xcb_connection_t *c  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           feedback_id  /**< */,
                               uint8_t           feedback_class  /**< */,
                               int8_t            percent  /**< */);
d12131 1
a12131 1
 ** xcb_void_cookie_t xcb_input_device_bell
d12133 6
a12138 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
d12144 49
a12192 5
xcb_input_device_bell (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */,
                       uint8_t           feedback_id  /**< */,
                       uint8_t           feedback_class  /**< */,
                       int8_t            percent  /**< */);
d12195 1
a12195 1
xcb_input_set_device_valuators_sizeof (const void  *_buffer  /**< */);
d12208 1
a12208 1
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators
d12210 15
a12224 6
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
d12228 15
a12242 6
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */,
                                uint8_t           first_valuator  /**< */,
                                uint8_t           num_valuators  /**< */,
                                const int32_t    *valuators  /**< */);
d12258 66
a12323 1
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators_unchecked
d12325 2
a12326 6
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
d12330 2
a12331 6
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           first_valuator  /**< */,
                                          uint8_t           num_valuators  /**< */,
                                          const int32_t    *valuators  /**< */);
d12342 1
a12342 1
 * xcb_input_set_device_valuators_unchecked(). is used.
d12350 1
a12350 1
 ** xcb_input_set_device_valuators_reply_t * xcb_input_set_device_valuators_reply
d12352 4
a12355 4
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_set_device_valuators_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_set_device_valuators_reply_t *
d12359 7
a12365 4
xcb_input_set_device_valuators_reply_t *
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c  /**< */,
                                      xcb_input_set_device_valuators_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e  /**< */);
d12374 3
d12381 1
a12381 1
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control
d12383 8
a12390 4
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
d12394 8
a12401 4
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control (xcb_connection_t *c  /**< */,
                              uint16_t          control_id  /**< */,
                              uint8_t           device_id  /**< */);
a12409 3
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
d12414 1
a12414 1
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control_unchecked
d12416 8
a12423 4
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
d12427 11
a12437 4
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control_unchecked (xcb_connection_t *c  /**< */,
                                        uint16_t          control_id  /**< */,
                                        uint8_t           device_id  /**< */);
a12439 4
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
d12441 4
a12444 1
 * Returns the reply of the request asked by
a12445 5
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_input_get_device_control_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
d12450 1
a12450 1
 ** xcb_input_get_device_control_reply_t * xcb_input_get_device_control_reply
d12452 3
a12454 4
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_get_device_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_get_device_control_reply_t *
d12458 3
a12460 4
xcb_input_get_device_control_reply_t *
xcb_input_get_device_control_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_get_device_control_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e  /**< */);
a12462 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_state_iterator_t
d12464 8
a12471 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_state_t)
d12476 42
a12517 1
 ** void xcb_input_device_state_next
d12519 2
a12520 2
 ** @@param xcb_input_device_state_iterator_t *i
 ** @@returns void
d12524 2
a12525 2
void
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i  /**< */);
d12528 10
a12537 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_state_iterator_t
 * @@return  The iterator pointing to the last element
d12539 1
a12539 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d12544 1
a12544 1
 ** xcb_generic_iterator_t xcb_input_device_state_end
d12546 4
a12549 2
 ** @@param xcb_input_device_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d12553 4
a12556 5
xcb_generic_iterator_t
xcb_input_device_state_end (xcb_input_device_state_iterator_t i  /**< */);

int
xcb_input_device_resolution_state_sizeof (const void  *_buffer  /**< */);
d12561 1
a12561 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_values
d12563 2
a12564 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
d12568 2
a12569 2
uint32_t *
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R  /**< */);
d12574 1
a12574 1
 ** int xcb_input_device_resolution_state_resolution_values_length
d12576 1
a12576 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12582 2
a12583 1
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R  /**< */);
d12588 1
a12588 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_values_end
d12590 1
a12590 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12596 2
a12597 1
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R  /**< */);
d12602 1
a12602 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_min
d12604 2
a12605 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
d12609 2
a12610 2
uint32_t *
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R  /**< */);
d12615 1
a12615 1
 ** int xcb_input_device_resolution_state_resolution_min_length
d12617 1
a12617 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12623 2
a12624 1
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R  /**< */);
d12629 1
a12629 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_min_end
d12631 1
a12631 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12637 2
a12638 1
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R  /**< */);
d12643 1
a12643 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_max
d12645 1
a12645 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12651 1
a12651 1
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R  /**< */);
d12656 1
a12656 1
 ** int xcb_input_device_resolution_state_resolution_max_length
d12658 1
a12658 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12664 2
a12665 1
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R  /**< */);
d12670 1
a12670 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_max_end
d12672 1
a12672 1
 ** @@param const xcb_input_device_resolution_state_t *R
d12678 19
a12696 1
xcb_input_device_resolution_state_resolution_max_end (const xcb_input_device_resolution_state_t *R  /**< */);
a12698 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_resolution_state_iterator_t
d12700 8
a12707 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_resolution_state_t)
d12712 1
a12712 1
 ** void xcb_input_device_resolution_state_next
d12714 9
a12722 2
 ** @@param xcb_input_device_resolution_state_iterator_t *i
 ** @@returns void
d12726 9
a12734 2
void
xcb_input_device_resolution_state_next (xcb_input_device_resolution_state_iterator_t *i  /**< */);
a12736 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_resolution_state_iterator_t
 * @@return  The iterator pointing to the last element
d12738 5
a12742 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d12747 1
a12747 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_end
d12749 9
a12757 2
 ** @@param xcb_input_device_resolution_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d12761 9
a12769 2
xcb_generic_iterator_t
xcb_input_device_resolution_state_end (xcb_input_device_resolution_state_iterator_t i  /**< */);
a12771 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_calib_state_iterator_t
d12773 8
a12780 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_calib_state_t)
d12785 1
a12785 1
 ** void xcb_input_device_abs_calib_state_next
d12787 9
a12795 2
 ** @@param xcb_input_device_abs_calib_state_iterator_t *i
 ** @@returns void
d12799 9
a12807 2
void
xcb_input_device_abs_calib_state_next (xcb_input_device_abs_calib_state_iterator_t *i  /**< */);
a12809 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_calib_state_iterator_t
 * @@return  The iterator pointing to the last element
d12811 5
a12815 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d12820 1
a12820 1
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_state_end
d12822 9
a12830 2
 ** @@param xcb_input_device_abs_calib_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d12834 9
a12842 2
xcb_generic_iterator_t
xcb_input_device_abs_calib_state_end (xcb_input_device_abs_calib_state_iterator_t i  /**< */);
a12844 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_area_state_iterator_t
d12846 8
a12853 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_area_state_t)
d12858 1
a12858 1
 ** void xcb_input_device_abs_area_state_next
d12860 4
a12863 2
 ** @@param xcb_input_device_abs_area_state_iterator_t *i
 ** @@returns void
d12867 4
a12870 2
void
xcb_input_device_abs_area_state_next (xcb_input_device_abs_area_state_iterator_t *i  /**< */);
a12872 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_area_state_iterator_t
 * @@return  The iterator pointing to the last element
d12874 5
a12878 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d12883 45
a12927 1
 ** xcb_generic_iterator_t xcb_input_device_abs_area_state_end
d12929 1
a12929 1
 ** @@param xcb_input_device_abs_area_state_iterator_t i
d12935 15
a12949 1
xcb_input_device_abs_area_state_end (xcb_input_device_abs_area_state_iterator_t i  /**< */);
a12950 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_core_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_core_state_t)
 */
d12954 1
a12954 1
 ** void xcb_input_device_core_state_next
d12956 2
a12957 2
 ** @@param xcb_input_device_core_state_iterator_t *i
 ** @@returns void
d12961 3
a12963 2
void
xcb_input_device_core_state_next (xcb_input_device_core_state_iterator_t *i  /**< */);
a12964 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_core_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d12968 1
a12968 1
 ** xcb_generic_iterator_t xcb_input_device_core_state_end
d12970 1
a12970 1
 ** @@param xcb_input_device_core_state_iterator_t i
d12976 15
a12990 1
xcb_input_device_core_state_end (xcb_input_device_core_state_iterator_t i  /**< */);
a12991 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_enable_state_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_enable_state_t)
 */
d12995 1
a12995 1
 ** void xcb_input_device_enable_state_next
d12997 2
a12998 2
 ** @@param xcb_input_device_enable_state_iterator_t *i
 ** @@returns void
d13002 3
a13004 2
void
xcb_input_device_enable_state_next (xcb_input_device_enable_state_iterator_t *i  /**< */);
a13005 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_enable_state_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d13009 1
a13009 1
 ** xcb_generic_iterator_t xcb_input_device_enable_state_end
d13011 1
a13011 1
 ** @@param xcb_input_device_enable_state_iterator_t i
d13015 21
a13035 3
 
xcb_generic_iterator_t
xcb_input_device_enable_state_end (xcb_input_device_enable_state_iterator_t i  /**< */);
a13037 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_ctl_iterator_t
d13039 5
a13043 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_ctl_t)
d13048 1
a13048 1
 ** void xcb_input_device_ctl_next
d13050 8
a13057 2
 ** @@param xcb_input_device_ctl_iterator_t *i
 ** @@returns void
d13061 8
a13068 2
void
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i  /**< */);
a13070 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_ctl_iterator_t
 * @@return  The iterator pointing to the last element
d13072 8
a13079 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d13084 1
a13084 1
 ** xcb_generic_iterator_t xcb_input_device_ctl_end
d13086 8
a13093 2
 ** @@param xcb_input_device_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d13097 8
a13104 5
xcb_generic_iterator_t
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i  /**< */);

int
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer  /**< */);
d13109 1
a13109 1
 ** uint32_t * xcb_input_device_resolution_ctl_resolution_values
d13111 2
a13112 2
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns uint32_t *
d13116 2
a13117 2
uint32_t *
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R  /**< */);
d13119 14
d13136 1
a13136 1
 ** int xcb_input_device_resolution_ctl_resolution_values_length
d13138 4
a13141 2
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns int
d13145 5
d13151 1
a13151 1
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R  /**< */);
d13153 8
d13164 1
a13164 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_resolution_values_end
d13166 3
a13168 2
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns xcb_generic_iterator_t
d13172 3
a13174 2
xcb_generic_iterator_t
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R  /**< */);
a13176 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_resolution_ctl_iterator_t
d13178 8
a13185 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_resolution_ctl_t)
d13190 1
a13190 1
 ** void xcb_input_device_resolution_ctl_next
d13192 3
a13194 2
 ** @@param xcb_input_device_resolution_ctl_iterator_t *i
 ** @@returns void
d13198 3
a13200 2
void
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i  /**< */);
a13201 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_resolution_ctl_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d13205 1
a13205 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_end
d13207 2
a13208 2
 ** @@param xcb_input_device_resolution_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d13212 2
a13213 2
xcb_generic_iterator_t
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i  /**< */);
a13214 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_abs_calib_ctl_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_abs_calib_ctl_t)
 */
d13218 1
a13218 1
 ** void xcb_input_device_abs_calib_ctl_next
d13220 2
a13221 2
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t *i
 ** @@returns void
d13225 2
a13226 2
void
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i  /**< */);
d13229 10
a13238 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_abs_calib_ctl_iterator_t
 * @@return  The iterator pointing to the last element
d13240 1
a13240 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d13245 1
a13245 1
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_ctl_end
d13247 4
a13250 2
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d13254 4
a13257 2
xcb_generic_iterator_t
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i  /**< */);
d13261 1
a13261 1
 * @@param i Pointer to a xcb_input_device_abs_area_ctrl_iterator_t
d13265 1
a13265 1
 * element. The member index is increased by sizeof(xcb_input_device_abs_area_ctrl_t)
d13270 1
a13270 1
 ** void xcb_input_device_abs_area_ctrl_next
d13272 1
a13272 1
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t *i
d13278 1
a13278 1
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i  /**< */);
d13282 1
a13282 1
 * @@param i An xcb_input_device_abs_area_ctrl_iterator_t
d13292 1
a13292 1
 ** xcb_generic_iterator_t xcb_input_device_abs_area_ctrl_end
d13294 1
a13294 1
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t i
d13300 4
a13303 1
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i  /**< */);
a13305 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_input_device_core_ctrl_iterator_t
d13307 8
a13314 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_input_device_core_ctrl_t)
d13319 1
a13319 1
 ** void xcb_input_device_core_ctrl_next
d13321 4
a13324 2
 ** @@param xcb_input_device_core_ctrl_iterator_t *i
 ** @@returns void
d13328 4
a13331 2
void
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i  /**< */);
a13333 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_input_device_core_ctrl_iterator_t
 * @@return  The iterator pointing to the last element
d13335 5
a13339 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d13344 1
a13344 1
 ** xcb_generic_iterator_t xcb_input_device_core_ctrl_end
d13346 4
a13349 2
 ** @@param xcb_input_device_core_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d13353 34
a13386 2
xcb_generic_iterator_t
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i  /**< */);
d13390 1
a13390 1
 * @@param i Pointer to a xcb_input_device_enable_ctrl_iterator_t
d13394 1
a13394 1
 * element. The member index is increased by sizeof(xcb_input_device_enable_ctrl_t)
d13399 1
a13399 1
 ** void xcb_input_device_enable_ctrl_next
d13401 1
a13401 1
 ** @@param xcb_input_device_enable_ctrl_iterator_t *i
d13407 1
a13407 1
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i  /**< */);
d13411 1
a13411 1
 * @@param i An xcb_input_device_enable_ctrl_iterator_t
d13421 1
a13421 1
 ** xcb_generic_iterator_t xcb_input_device_enable_ctrl_end
d13423 1
a13423 1
 ** @@param xcb_input_device_enable_ctrl_iterator_t i
d13429 37
a13465 1
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i  /**< */);
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d2090 3
d2094 1
a2094 1
 * Delivers a request to the X server
d2119 1
a2119 1
 * Delivers a request to the X server
d2220 3
d2224 1
a2224 1
 * Delivers a request to the X server
d2245 1
a2245 1
 * Delivers a request to the X server
d2510 3
d2638 3
d2642 1
a2642 1
 * Delivers a request to the X server
d2665 1
a2665 1
 * Delivers a request to the X server
d2761 1
a2761 1
 * Delivers a request to the X server
d2787 1
a2787 1
 * Delivers a request to the X server
d2810 1
a2810 1
 * Delivers a request to the X server
d2835 1
a2835 1
 * Delivers a request to the X server
d2893 3
d2897 1
a2897 1
 * Delivers a request to the X server
d2927 1
a2927 1
 * Delivers a request to the X server
d2953 3
d2957 1
a2957 1
 * Delivers a request to the X server
d2980 1
a2980 1
 * Delivers a request to the X server
d3114 3
d3118 1
a3118 1
 * Delivers a request to the X server
d3150 1
a3150 1
 * Delivers a request to the X server
d3178 3
d3182 1
a3182 1
 * Delivers a request to the X server
d3205 1
a3205 1
 * Delivers a request to the X server
d3301 1
a3301 1
 * Delivers a request to the X server
d3328 1
a3328 1
 * Delivers a request to the X server
d3432 1
a3432 1
 * Delivers a request to the X server
d3455 1
a3455 1
 * Delivers a request to the X server
d3512 1
a3512 1
 * Delivers a request to the X server
d3539 1
a3539 1
 * Delivers a request to the X server
d3599 3
d3603 1
a3603 1
 * Delivers a request to the X server
d3640 1
a3640 1
 * Delivers a request to the X server
d3711 1
a3711 1
 * Delivers a request to the X server
d3739 1
a3739 1
 * Delivers a request to the X server
d3763 3
d3767 1
a3767 1
 * Delivers a request to the X server
d3811 1
a3811 1
 * Delivers a request to the X server
d3852 1
a3852 1
 * Delivers a request to the X server
d3886 1
a3886 1
 * Delivers a request to the X server
d3916 3
d3920 1
a3920 1
 * Delivers a request to the X server
d3964 1
a3964 1
 * Delivers a request to the X server
d4005 1
a4005 1
 * Delivers a request to the X server
d4039 1
a4039 1
 * Delivers a request to the X server
d4070 1
a4070 1
 * Delivers a request to the X server
d4100 1
a4100 1
 * Delivers a request to the X server
d4127 1
a4127 1
 * Delivers a request to the X server
d4150 1
a4150 1
 * Delivers a request to the X server
d4207 1
a4207 1
 * Delivers a request to the X server
d4239 1
a4239 1
 * Delivers a request to the X server
d4268 1
a4268 1
 * Delivers a request to the X server
d4291 1
a4291 1
 * Delivers a request to the X server
d4519 3
d4862 3
d5033 3
d5037 1
a5037 1
 * Delivers a request to the X server
d5064 1
a5064 1
 * Delivers a request to the X server
d5163 3
d5167 1
a5167 1
 * Delivers a request to the X server
d5201 1
a5201 1
 * Delivers a request to the X server
d5231 3
d5235 1
a5235 1
 * Delivers a request to the X server
d5258 1
a5258 1
 * Delivers a request to the X server
d5353 3
d5357 1
a5357 1
 * Delivers a request to the X server
d5384 1
a5384 1
 * Delivers a request to the X server
d5444 3
d5448 1
a5448 1
 * Delivers a request to the X server
d5471 1
a5471 1
 * Delivers a request to the X server
d5566 3
d5570 1
a5570 1
 * Delivers a request to the X server
d5597 1
a5597 1
 * Delivers a request to the X server
d5658 1
a5658 1
 * Delivers a request to the X server
d5681 1
a5681 1
 * Delivers a request to the X server
d5866 3
d5951 3
d5955 1
a5955 1
 * Delivers a request to the X server
d5993 1
a5993 1
 * Delivers a request to the X server
d6028 1
a6028 1
 * Delivers a request to the X server
d6060 1
a6060 1
 * Delivers a request to the X server
d6088 3
d6092 1
a6092 1
 * Delivers a request to the X server
d6121 1
a6121 1
 * Delivers a request to the X server
d6184 1
a6184 1
 * Delivers a request to the X server
d6209 1
a6209 1
 * Delivers a request to the X server
d6310 3
d6687 3
@


1.1
log
@Initial revision
@
text
@d94 8
d153 9
a161 7
typedef enum xcb_input_device_use_t {
    XCB_INPUT_DEVICE_USE_IS_X_POINTER = 0,
    XCB_INPUT_DEVICE_USE_IS_X_KEYBOARD = 1,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_DEVICE = 2,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_KEYBOARD = 3,
    XCB_INPUT_DEVICE_USE_IS_X_EXTENSION_POINTER = 4
} xcb_input_device_use_t;
d224 2
a225 2
    uint32_t minimum; /**<  */
    uint32_t maximum; /**<  */
a306 10
typedef enum xcb_input_input_class_t {
    XCB_INPUT_INPUT_CLASS_KEY = 0,
    XCB_INPUT_INPUT_CLASS_BUTTON = 1,
    XCB_INPUT_INPUT_CLASS_VALUATOR = 2,
    XCB_INPUT_INPUT_CLASS_FEEDBACK = 3,
    XCB_INPUT_INPUT_CLASS_PROXIMITY = 4,
    XCB_INPUT_INPUT_CLASS_FOCUS = 5,
    XCB_INPUT_INPUT_CLASS_OTHER = 6
} xcb_input_input_class_t;

d702 9
d810 9
d1846 1
a1846 1
typedef xcb_input_device_key_press_event_t xcb_input_focus_out_event_t;
d1943 60
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
