head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from sync.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "sync.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_sync_id = { "SYNC", 0 };

void
xcb_sync_alarm_next (xcb_sync_alarm_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_alarm_t);
}

xcb_generic_iterator_t
xcb_sync_alarm_end (xcb_sync_alarm_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_sync_counter_next (xcb_sync_counter_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_counter_t);
}

xcb_generic_iterator_t
xcb_sync_counter_end (xcb_sync_counter_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_sync_fence_next (xcb_sync_fence_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_fence_t);
}

xcb_generic_iterator_t
xcb_sync_fence_end (xcb_sync_fence_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_sync_int64_next (xcb_sync_int64_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_int64_t);
}

xcb_generic_iterator_t
xcb_sync_int64_end (xcb_sync_int64_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_sync_systemcounter_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_sync_systemcounter_t *_aux = (xcb_sync_systemcounter_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_sync_systemcounter_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_sync_systemcounter_name (const xcb_sync_systemcounter_t *R)
{
    return (char *) (R + 1);
}

int
xcb_sync_systemcounter_name_length (const xcb_sync_systemcounter_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_sync_systemcounter_name_end (const xcb_sync_systemcounter_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_sync_systemcounter_next (xcb_sync_systemcounter_iterator_t *i)
{
    xcb_sync_systemcounter_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_sync_systemcounter_t *)(((char *)R) + xcb_sync_systemcounter_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_sync_systemcounter_t *) child.data;
}

xcb_generic_iterator_t
xcb_sync_systemcounter_end (xcb_sync_systemcounter_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_sync_systemcounter_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_sync_trigger_next (xcb_sync_trigger_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_trigger_t);
}

xcb_generic_iterator_t
xcb_sync_trigger_end (xcb_sync_trigger_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_sync_waitcondition_next (xcb_sync_waitcondition_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_sync_waitcondition_t);
}

xcb_generic_iterator_t
xcb_sync_waitcondition_end (xcb_sync_waitcondition_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_sync_initialize_cookie_t
xcb_sync_initialize (xcb_connection_t *c,
                     uint8_t           desired_major_version,
                     uint8_t           desired_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_INITIALIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_initialize_cookie_t xcb_ret;
    xcb_sync_initialize_request_t xcb_out;

    xcb_out.desired_major_version = desired_major_version;
    xcb_out.desired_minor_version = desired_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_initialize_cookie_t
xcb_sync_initialize_unchecked (xcb_connection_t *c,
                               uint8_t           desired_major_version,
                               uint8_t           desired_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_INITIALIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_initialize_cookie_t xcb_ret;
    xcb_sync_initialize_request_t xcb_out;

    xcb_out.desired_major_version = desired_major_version;
    xcb_out.desired_minor_version = desired_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_initialize_reply_t *
xcb_sync_initialize_reply (xcb_connection_t              *c,
                           xcb_sync_initialize_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_sync_initialize_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_sync_list_system_counters_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_sync_list_system_counters_reply_t *_aux = (xcb_sync_list_system_counters_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_sync_list_system_counters_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* counters */
    for(i=0; i<_aux->counters_len; i++) {
        xcb_tmp_len = xcb_sync_systemcounter_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_sync_systemcounter_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_sync_list_system_counters_cookie_t
xcb_sync_list_system_counters (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_LIST_SYSTEM_COUNTERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_list_system_counters_cookie_t xcb_ret;
    xcb_sync_list_system_counters_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_list_system_counters_cookie_t
xcb_sync_list_system_counters_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_LIST_SYSTEM_COUNTERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_list_system_counters_cookie_t xcb_ret;
    xcb_sync_list_system_counters_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_sync_list_system_counters_counters_length (const xcb_sync_list_system_counters_reply_t *R)
{
    return R->counters_len;
}

xcb_sync_systemcounter_iterator_t
xcb_sync_list_system_counters_counters_iterator (const xcb_sync_list_system_counters_reply_t *R)
{
    xcb_sync_systemcounter_iterator_t i;
    i.data = (xcb_sync_systemcounter_t *) (R + 1);
    i.rem = R->counters_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_sync_list_system_counters_reply_t *
xcb_sync_list_system_counters_reply (xcb_connection_t                        *c,
                                     xcb_sync_list_system_counters_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_sync_list_system_counters_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_sync_create_counter_checked (xcb_connection_t   *c,
                                 xcb_sync_counter_t  id,
                                 xcb_sync_int64_t    initial_value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_counter_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.initial_value = initial_value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_create_counter (xcb_connection_t   *c,
                         xcb_sync_counter_t  id,
                         xcb_sync_int64_t    initial_value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_counter_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.initial_value = initial_value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_destroy_counter_checked (xcb_connection_t   *c,
                                  xcb_sync_counter_t  counter)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_counter_request_t xcb_out;

    xcb_out.counter = counter;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_destroy_counter (xcb_connection_t   *c,
                          xcb_sync_counter_t  counter)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_counter_request_t xcb_out;

    xcb_out.counter = counter;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_counter_cookie_t
xcb_sync_query_counter (xcb_connection_t   *c,
                        xcb_sync_counter_t  counter)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_COUNTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_counter_cookie_t xcb_ret;
    xcb_sync_query_counter_request_t xcb_out;

    xcb_out.counter = counter;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_counter_cookie_t
xcb_sync_query_counter_unchecked (xcb_connection_t   *c,
                                  xcb_sync_counter_t  counter)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_COUNTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_counter_cookie_t xcb_ret;
    xcb_sync_query_counter_request_t xcb_out;

    xcb_out.counter = counter;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_counter_reply_t *
xcb_sync_query_counter_reply (xcb_connection_t                 *c,
                              xcb_sync_query_counter_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_sync_query_counter_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_sync_await_sizeof (const void  *_buffer,
                       uint32_t     wait_list_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_sync_await_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* wait_list */
    xcb_block_len += wait_list_len * sizeof(xcb_sync_waitcondition_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_sync_waitcondition_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_sync_await_checked (xcb_connection_t               *c,
                        uint32_t                        wait_list_len,
                        const xcb_sync_waitcondition_t *wait_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_AWAIT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_await_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_waitcondition_t wait_list */
    xcb_parts[4].iov_base = (char *) wait_list;
    xcb_parts[4].iov_len = wait_list_len * sizeof(xcb_sync_waitcondition_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_await (xcb_connection_t               *c,
                uint32_t                        wait_list_len,
                const xcb_sync_waitcondition_t *wait_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_AWAIT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_await_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_waitcondition_t wait_list */
    xcb_parts[4].iov_base = (char *) wait_list;
    xcb_parts[4].iov_len = wait_list_len * sizeof(xcb_sync_waitcondition_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_waitcondition_t *
xcb_sync_await_wait_list (const xcb_sync_await_request_t *R)
{
    return (xcb_sync_waitcondition_t *) (R + 1);
}

int
xcb_sync_await_wait_list_length (const xcb_sync_await_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_sync_await_request_t))/sizeof(xcb_sync_waitcondition_t));
}

xcb_sync_waitcondition_iterator_t
xcb_sync_await_wait_list_iterator (const xcb_sync_await_request_t *R)
{
    xcb_sync_waitcondition_iterator_t i;
    i.data = (xcb_sync_waitcondition_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_sync_await_request_t))/sizeof(xcb_sync_waitcondition_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_sync_change_counter_checked (xcb_connection_t   *c,
                                 xcb_sync_counter_t  counter,
                                 xcb_sync_int64_t    amount)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_counter_request_t xcb_out;

    xcb_out.counter = counter;
    xcb_out.amount = amount;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_change_counter (xcb_connection_t   *c,
                         xcb_sync_counter_t  counter,
                         xcb_sync_int64_t    amount)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_counter_request_t xcb_out;

    xcb_out.counter = counter;
    xcb_out.amount = amount;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_set_counter_checked (xcb_connection_t   *c,
                              xcb_sync_counter_t  counter,
                              xcb_sync_int64_t    value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_SET_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_set_counter_request_t xcb_out;

    xcb_out.counter = counter;
    xcb_out.value = value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_set_counter (xcb_connection_t   *c,
                      xcb_sync_counter_t  counter,
                      xcb_sync_int64_t    value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_SET_COUNTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_set_counter_request_t xcb_out;

    xcb_out.counter = counter;
    xcb_out.value = value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_sync_create_alarm_value_list_serialize (void                                     **_buffer,
                                            uint32_t                                   value_mask,
                                            const xcb_sync_create_alarm_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[7];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_SYNC_CA_COUNTER) {
        /* xcb_sync_create_alarm_value_list_t.counter */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->counter;
        xcb_block_len += sizeof(xcb_sync_counter_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_counter_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_counter_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE_TYPE) {
        /* xcb_sync_create_alarm_value_list_t.valueType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valueType;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE) {
        /* xcb_sync_create_alarm_value_list_t.value */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->value;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_int64_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_TEST_TYPE) {
        /* xcb_sync_create_alarm_value_list_t.testType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->testType;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_DELTA) {
        /* xcb_sync_create_alarm_value_list_t.delta */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->delta;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_int64_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_EVENTS) {
        /* xcb_sync_create_alarm_value_list_t.events */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->events;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_sync_create_alarm_value_list_unpack (const void                          *_buffer,
                                         uint32_t                             value_mask,
                                         xcb_sync_create_alarm_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_SYNC_CA_COUNTER) {
        /* xcb_sync_create_alarm_value_list_t.counter */
        _aux->counter = *(xcb_sync_counter_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_counter_t);
        xcb_tmp += sizeof(xcb_sync_counter_t);
        xcb_align_to = ALIGNOF(xcb_sync_counter_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE_TYPE) {
        /* xcb_sync_create_alarm_value_list_t.valueType */
        _aux->valueType = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE) {
        /* xcb_sync_create_alarm_value_list_t.value */
        _aux->value = *(xcb_sync_int64_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_tmp += sizeof(xcb_sync_int64_t);
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_TEST_TYPE) {
        /* xcb_sync_create_alarm_value_list_t.testType */
        _aux->testType = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_DELTA) {
        /* xcb_sync_create_alarm_value_list_t.delta */
        _aux->delta = *(xcb_sync_int64_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_tmp += sizeof(xcb_sync_int64_t);
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_EVENTS) {
        /* xcb_sync_create_alarm_value_list_t.events */
        _aux->events = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_sync_create_alarm_value_list_sizeof (const void  *_buffer,
                                         uint32_t     value_mask)
{
    xcb_sync_create_alarm_value_list_t _aux;
    return xcb_sync_create_alarm_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_sync_create_alarm_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_sync_create_alarm_request_t *_aux = (xcb_sync_create_alarm_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_sync_create_alarm_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_sync_create_alarm_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_sync_create_alarm_checked (xcb_connection_t *c,
                               xcb_sync_alarm_t  id,
                               uint32_t          value_mask,
                               const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_alarm_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_create_alarm_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_sync_create_alarm_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_create_alarm (xcb_connection_t *c,
                       xcb_sync_alarm_t  id,
                       uint32_t          value_mask,
                       const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_alarm_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_create_alarm_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_sync_create_alarm_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_create_alarm_aux_checked (xcb_connection_t                         *c,
                                   xcb_sync_alarm_t                          id,
                                   uint32_t                                  value_mask,
                                   const xcb_sync_create_alarm_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_alarm_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_create_alarm_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_sync_create_alarm_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_create_alarm_aux (xcb_connection_t                         *c,
                           xcb_sync_alarm_t                          id,
                           uint32_t                                  value_mask,
                           const xcb_sync_create_alarm_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_alarm_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_create_alarm_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_sync_create_alarm_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_sync_create_alarm_value_list (const xcb_sync_create_alarm_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_sync_change_alarm_value_list_serialize (void                                     **_buffer,
                                            uint32_t                                   value_mask,
                                            const xcb_sync_change_alarm_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[7];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_SYNC_CA_COUNTER) {
        /* xcb_sync_change_alarm_value_list_t.counter */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->counter;
        xcb_block_len += sizeof(xcb_sync_counter_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_counter_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_counter_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE_TYPE) {
        /* xcb_sync_change_alarm_value_list_t.valueType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valueType;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE) {
        /* xcb_sync_change_alarm_value_list_t.value */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->value;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_int64_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_TEST_TYPE) {
        /* xcb_sync_change_alarm_value_list_t.testType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->testType;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_DELTA) {
        /* xcb_sync_change_alarm_value_list_t.delta */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->delta;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_sync_int64_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_EVENTS) {
        /* xcb_sync_change_alarm_value_list_t.events */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->events;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_sync_change_alarm_value_list_unpack (const void                          *_buffer,
                                         uint32_t                             value_mask,
                                         xcb_sync_change_alarm_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_SYNC_CA_COUNTER) {
        /* xcb_sync_change_alarm_value_list_t.counter */
        _aux->counter = *(xcb_sync_counter_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_counter_t);
        xcb_tmp += sizeof(xcb_sync_counter_t);
        xcb_align_to = ALIGNOF(xcb_sync_counter_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE_TYPE) {
        /* xcb_sync_change_alarm_value_list_t.valueType */
        _aux->valueType = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_VALUE) {
        /* xcb_sync_change_alarm_value_list_t.value */
        _aux->value = *(xcb_sync_int64_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_tmp += sizeof(xcb_sync_int64_t);
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_TEST_TYPE) {
        /* xcb_sync_change_alarm_value_list_t.testType */
        _aux->testType = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_SYNC_CA_DELTA) {
        /* xcb_sync_change_alarm_value_list_t.delta */
        _aux->delta = *(xcb_sync_int64_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_sync_int64_t);
        xcb_tmp += sizeof(xcb_sync_int64_t);
        xcb_align_to = ALIGNOF(xcb_sync_int64_t);
    }
    if(value_mask & XCB_SYNC_CA_EVENTS) {
        /* xcb_sync_change_alarm_value_list_t.events */
        _aux->events = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_sync_change_alarm_value_list_sizeof (const void  *_buffer,
                                         uint32_t     value_mask)
{
    xcb_sync_change_alarm_value_list_t _aux;
    return xcb_sync_change_alarm_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_sync_change_alarm_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_sync_change_alarm_request_t *_aux = (xcb_sync_change_alarm_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_sync_change_alarm_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_sync_change_alarm_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_sync_change_alarm_checked (xcb_connection_t *c,
                               xcb_sync_alarm_t  id,
                               uint32_t          value_mask,
                               const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_alarm_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_change_alarm_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_sync_change_alarm_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_change_alarm (xcb_connection_t *c,
                       xcb_sync_alarm_t  id,
                       uint32_t          value_mask,
                       const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_alarm_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_change_alarm_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_sync_change_alarm_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_change_alarm_aux_checked (xcb_connection_t                         *c,
                                   xcb_sync_alarm_t                          id,
                                   uint32_t                                  value_mask,
                                   const xcb_sync_change_alarm_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_alarm_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_change_alarm_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_sync_change_alarm_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_change_alarm_aux (xcb_connection_t                         *c,
                           xcb_sync_alarm_t                          id,
                           uint32_t                                  value_mask,
                           const xcb_sync_change_alarm_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CHANGE_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_change_alarm_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.id = id;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_change_alarm_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_sync_change_alarm_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_sync_change_alarm_value_list (const xcb_sync_change_alarm_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_sync_destroy_alarm_checked (xcb_connection_t *c,
                                xcb_sync_alarm_t  alarm)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_alarm_request_t xcb_out;

    xcb_out.alarm = alarm;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_destroy_alarm (xcb_connection_t *c,
                        xcb_sync_alarm_t  alarm)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_ALARM,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_alarm_request_t xcb_out;

    xcb_out.alarm = alarm;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_alarm_cookie_t
xcb_sync_query_alarm (xcb_connection_t *c,
                      xcb_sync_alarm_t  alarm)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_ALARM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_alarm_cookie_t xcb_ret;
    xcb_sync_query_alarm_request_t xcb_out;

    xcb_out.alarm = alarm;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_alarm_cookie_t
xcb_sync_query_alarm_unchecked (xcb_connection_t *c,
                                xcb_sync_alarm_t  alarm)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_ALARM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_alarm_cookie_t xcb_ret;
    xcb_sync_query_alarm_request_t xcb_out;

    xcb_out.alarm = alarm;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_alarm_reply_t *
xcb_sync_query_alarm_reply (xcb_connection_t               *c,
                            xcb_sync_query_alarm_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_sync_query_alarm_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_sync_set_priority_checked (xcb_connection_t *c,
                               uint32_t          id,
                               int32_t           priority)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_SET_PRIORITY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_set_priority_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.priority = priority;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_set_priority (xcb_connection_t *c,
                       uint32_t          id,
                       int32_t           priority)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_SET_PRIORITY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_set_priority_request_t xcb_out;

    xcb_out.id = id;
    xcb_out.priority = priority;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_get_priority_cookie_t
xcb_sync_get_priority (xcb_connection_t *c,
                       uint32_t          id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_GET_PRIORITY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_get_priority_cookie_t xcb_ret;
    xcb_sync_get_priority_request_t xcb_out;

    xcb_out.id = id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_get_priority_cookie_t
xcb_sync_get_priority_unchecked (xcb_connection_t *c,
                                 uint32_t          id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_GET_PRIORITY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_get_priority_cookie_t xcb_ret;
    xcb_sync_get_priority_request_t xcb_out;

    xcb_out.id = id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_get_priority_reply_t *
xcb_sync_get_priority_reply (xcb_connection_t                *c,
                             xcb_sync_get_priority_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_sync_get_priority_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_sync_create_fence_checked (xcb_connection_t *c,
                               xcb_drawable_t    drawable,
                               xcb_sync_fence_t  fence,
                               uint8_t           initially_triggered)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_fence_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;
    xcb_out.initially_triggered = initially_triggered;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_create_fence (xcb_connection_t *c,
                       xcb_drawable_t    drawable,
                       xcb_sync_fence_t  fence,
                       uint8_t           initially_triggered)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_CREATE_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_create_fence_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;
    xcb_out.initially_triggered = initially_triggered;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_trigger_fence_checked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_TRIGGER_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_trigger_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_trigger_fence (xcb_connection_t *c,
                        xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_TRIGGER_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_trigger_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_reset_fence_checked (xcb_connection_t *c,
                              xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_RESET_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_reset_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_reset_fence (xcb_connection_t *c,
                      xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_RESET_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_reset_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_destroy_fence_checked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_destroy_fence (xcb_connection_t *c,
                        xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_DESTROY_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_destroy_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_fence_cookie_t
xcb_sync_query_fence (xcb_connection_t *c,
                      xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_FENCE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_fence_cookie_t xcb_ret;
    xcb_sync_query_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_fence_cookie_t
xcb_sync_query_fence_unchecked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_QUERY_FENCE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_sync_query_fence_cookie_t xcb_ret;
    xcb_sync_query_fence_request_t xcb_out;

    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_query_fence_reply_t *
xcb_sync_query_fence_reply (xcb_connection_t               *c,
                            xcb_sync_query_fence_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_sync_query_fence_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_sync_await_fence_sizeof (const void  *_buffer,
                             uint32_t     fence_list_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_sync_await_fence_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* fence_list */
    xcb_block_len += fence_list_len * sizeof(xcb_sync_fence_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_sync_fence_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_sync_await_fence_checked (xcb_connection_t       *c,
                              uint32_t                fence_list_len,
                              const xcb_sync_fence_t *fence_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_AWAIT_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_await_fence_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_fence_t fence_list */
    xcb_parts[4].iov_base = (char *) fence_list;
    xcb_parts[4].iov_len = fence_list_len * sizeof(xcb_sync_fence_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_sync_await_fence (xcb_connection_t       *c,
                      uint32_t                fence_list_len,
                      const xcb_sync_fence_t *fence_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_sync_id,
        .opcode = XCB_SYNC_AWAIT_FENCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_sync_await_fence_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_sync_fence_t fence_list */
    xcb_parts[4].iov_base = (char *) fence_list;
    xcb_parts[4].iov_len = fence_list_len * sizeof(xcb_sync_fence_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_sync_fence_t *
xcb_sync_await_fence_fence_list (const xcb_sync_await_fence_request_t *R)
{
    return (xcb_sync_fence_t *) (R + 1);
}

int
xcb_sync_await_fence_fence_list_length (const xcb_sync_await_fence_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_sync_await_fence_request_t))/sizeof(xcb_sync_fence_t));
}

xcb_generic_iterator_t
xcb_sync_await_fence_fence_list_end (const xcb_sync_await_fence_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_sync_fence_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_sync_await_fence_request_t))/sizeof(xcb_sync_fence_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_sync_alarm_next (xcb_sync_alarm_iterator_t *i  /**< */)
d30 1
a30 1
xcb_sync_alarm_end (xcb_sync_alarm_iterator_t i  /**< */)
d40 1
a40 1
xcb_sync_counter_next (xcb_sync_counter_iterator_t *i  /**< */)
d48 1
a48 1
xcb_sync_counter_end (xcb_sync_counter_iterator_t i  /**< */)
d58 1
a58 1
xcb_sync_fence_next (xcb_sync_fence_iterator_t *i  /**< */)
d66 1
a66 1
xcb_sync_fence_end (xcb_sync_fence_iterator_t i  /**< */)
d76 1
a76 1
xcb_sync_int64_next (xcb_sync_int64_iterator_t *i  /**< */)
d84 1
a84 1
xcb_sync_int64_end (xcb_sync_int64_iterator_t i  /**< */)
d94 1
a94 1
xcb_sync_systemcounter_sizeof (const void  *_buffer  /**< */)
d112 9
d134 1
a134 1
xcb_sync_systemcounter_name (const xcb_sync_systemcounter_t *R  /**< */)
d140 1
a140 1
xcb_sync_systemcounter_name_length (const xcb_sync_systemcounter_t *R  /**< */)
d146 1
a146 1
xcb_sync_systemcounter_name_end (const xcb_sync_systemcounter_t *R  /**< */)
d156 1
a156 1
xcb_sync_systemcounter_next (xcb_sync_systemcounter_iterator_t *i  /**< */)
d167 1
a167 1
xcb_sync_systemcounter_end (xcb_sync_systemcounter_iterator_t i  /**< */)
d179 1
a179 1
xcb_sync_trigger_next (xcb_sync_trigger_iterator_t *i  /**< */)
d187 1
a187 1
xcb_sync_trigger_end (xcb_sync_trigger_iterator_t i  /**< */)
d197 1
a197 1
xcb_sync_waitcondition_next (xcb_sync_waitcondition_iterator_t *i  /**< */)
d205 1
a205 1
xcb_sync_waitcondition_end (xcb_sync_waitcondition_iterator_t i  /**< */)
d215 3
a217 3
xcb_sync_initialize (xcb_connection_t *c  /**< */,
                     uint8_t           desired_major_version  /**< */,
                     uint8_t           desired_minor_version  /**< */)
d220 4
a223 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_INITIALIZE,
        /* isvoid */ 0
d243 3
a245 3
xcb_sync_initialize_unchecked (xcb_connection_t *c  /**< */,
                               uint8_t           desired_major_version  /**< */,
                               uint8_t           desired_minor_version  /**< */)
d248 4
a251 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_INITIALIZE,
        /* isvoid */ 0
d271 1
a271 1
xcb_sync_initialize_reply (xcb_connection_t              *c  /**< */,
d273 1
a273 1
                           xcb_generic_error_t          **e  /**< */)
d279 1
a279 1
xcb_sync_list_system_counters_sizeof (const void  *_buffer  /**< */)
d315 1
a315 1
xcb_sync_list_system_counters (xcb_connection_t *c  /**< */)
d318 4
a321 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_LIST_SYSTEM_COUNTERS,
        /* isvoid */ 0
d339 1
a339 1
xcb_sync_list_system_counters_unchecked (xcb_connection_t *c  /**< */)
d342 4
a345 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_LIST_SYSTEM_COUNTERS,
        /* isvoid */ 0
d363 1
a363 1
xcb_sync_list_system_counters_counters_length (const xcb_sync_list_system_counters_reply_t *R  /**< */)
d369 1
a369 1
xcb_sync_list_system_counters_counters_iterator (const xcb_sync_list_system_counters_reply_t *R  /**< */)
d379 1
a379 1
xcb_sync_list_system_counters_reply (xcb_connection_t                        *c  /**< */,
d381 1
a381 1
                                     xcb_generic_error_t                    **e  /**< */)
d387 3
a389 3
xcb_sync_create_counter_checked (xcb_connection_t   *c  /**< */,
                                 xcb_sync_counter_t  id  /**< */,
                                 xcb_sync_int64_t    initial_value  /**< */)
d392 4
a395 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_COUNTER,
        /* isvoid */ 1
d415 3
a417 3
xcb_sync_create_counter (xcb_connection_t   *c  /**< */,
                         xcb_sync_counter_t  id  /**< */,
                         xcb_sync_int64_t    initial_value  /**< */)
d420 4
a423 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_COUNTER,
        /* isvoid */ 1
d443 2
a444 2
xcb_sync_destroy_counter_checked (xcb_connection_t   *c  /**< */,
                                  xcb_sync_counter_t  counter  /**< */)
d447 4
a450 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_COUNTER,
        /* isvoid */ 1
d469 2
a470 2
xcb_sync_destroy_counter (xcb_connection_t   *c  /**< */,
                          xcb_sync_counter_t  counter  /**< */)
d473 4
a476 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_COUNTER,
        /* isvoid */ 1
d495 2
a496 2
xcb_sync_query_counter (xcb_connection_t   *c  /**< */,
                        xcb_sync_counter_t  counter  /**< */)
d499 4
a502 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_COUNTER,
        /* isvoid */ 0
d521 2
a522 2
xcb_sync_query_counter_unchecked (xcb_connection_t   *c  /**< */,
                                  xcb_sync_counter_t  counter  /**< */)
d525 4
a528 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_COUNTER,
        /* isvoid */ 0
d547 1
a547 1
xcb_sync_query_counter_reply (xcb_connection_t                 *c  /**< */,
d549 1
a549 1
                              xcb_generic_error_t             **e  /**< */)
d555 2
a556 2
xcb_sync_await_sizeof (const void  *_buffer  /**< */,
                       uint32_t     wait_list_len  /**< */)
d586 3
a588 3
xcb_sync_await_checked (xcb_connection_t               *c  /**< */,
                        uint32_t                        wait_list_len  /**< */,
                        const xcb_sync_waitcondition_t *wait_list  /**< */)
d591 4
a594 4
        /* count */ 4,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_AWAIT,
        /* isvoid */ 1
d617 3
a619 3
xcb_sync_await (xcb_connection_t               *c  /**< */,
                uint32_t                        wait_list_len  /**< */,
                const xcb_sync_waitcondition_t *wait_list  /**< */)
d622 4
a625 4
        /* count */ 4,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_AWAIT,
        /* isvoid */ 1
d647 22
d670 3
a672 3
xcb_sync_change_counter_checked (xcb_connection_t   *c  /**< */,
                                 xcb_sync_counter_t  counter  /**< */,
                                 xcb_sync_int64_t    amount  /**< */)
d675 4
a678 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_COUNTER,
        /* isvoid */ 1
d698 3
a700 3
xcb_sync_change_counter (xcb_connection_t   *c  /**< */,
                         xcb_sync_counter_t  counter  /**< */,
                         xcb_sync_int64_t    amount  /**< */)
d703 4
a706 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_COUNTER,
        /* isvoid */ 1
d726 3
a728 3
xcb_sync_set_counter_checked (xcb_connection_t   *c  /**< */,
                              xcb_sync_counter_t  counter  /**< */,
                              xcb_sync_int64_t    value  /**< */)
d731 4
a734 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_SET_COUNTER,
        /* isvoid */ 1
d754 3
a756 3
xcb_sync_set_counter (xcb_connection_t   *c  /**< */,
                      xcb_sync_counter_t  counter  /**< */,
                      xcb_sync_int64_t    value  /**< */)
d759 4
a762 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_SET_COUNTER,
        /* isvoid */ 1
d782 3
a784 3
xcb_sync_create_alarm_value_list_serialize (void                                     **_buffer  /**< */,
                                            uint32_t                                   value_mask  /**< */,
                                            const xcb_sync_create_alarm_value_list_t  *_aux  /**< */)
d789 1
d848 1
a848 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d857 1
d877 3
a879 3
xcb_sync_create_alarm_value_list_unpack (const void                          *_buffer  /**< */,
                                         uint32_t                             value_mask  /**< */,
                                         xcb_sync_create_alarm_value_list_t  *_aux  /**< */)
d886 1
d932 1
a932 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d939 1
d945 2
a946 2
xcb_sync_create_alarm_value_list_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     value_mask  /**< */)
d952 31
d984 4
a987 4
xcb_sync_create_alarm_checked (xcb_connection_t *c  /**< */,
                               xcb_sync_alarm_t  id  /**< */,
                               uint32_t          value_mask  /**< */,
                               const void       *value_list  /**< */)
d990 4
a993 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_ALARM,
        /* isvoid */ 1
d1017 4
a1020 4
xcb_sync_create_alarm (xcb_connection_t *c  /**< */,
                       xcb_sync_alarm_t  id  /**< */,
                       uint32_t          value_mask  /**< */,
                       const void       *value_list  /**< */)
d1023 4
a1026 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_ALARM,
        /* isvoid */ 1
d1050 4
a1053 4
xcb_sync_create_alarm_aux_checked (xcb_connection_t                         *c  /**< */,
                                   xcb_sync_alarm_t                          id  /**< */,
                                   uint32_t                                  value_mask  /**< */,
                                   const xcb_sync_create_alarm_value_list_t *value_list  /**< */)
d1056 4
a1059 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_ALARM,
        /* isvoid */ 1
d1085 4
a1088 4
xcb_sync_create_alarm_aux (xcb_connection_t                         *c  /**< */,
                           xcb_sync_alarm_t                          id  /**< */,
                           uint32_t                                  value_mask  /**< */,
                           const xcb_sync_create_alarm_value_list_t *value_list  /**< */)
d1091 4
a1094 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_ALARM,
        /* isvoid */ 1
d1119 6
d1126 3
a1128 3
xcb_sync_change_alarm_value_list_serialize (void                                     **_buffer  /**< */,
                                            uint32_t                                   value_mask  /**< */,
                                            const xcb_sync_change_alarm_value_list_t  *_aux  /**< */)
d1133 1
d1192 1
a1192 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d1201 1
d1221 3
a1223 3
xcb_sync_change_alarm_value_list_unpack (const void                          *_buffer  /**< */,
                                         uint32_t                             value_mask  /**< */,
                                         xcb_sync_change_alarm_value_list_t  *_aux  /**< */)
d1230 1
d1276 1
a1276 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d1283 1
d1289 2
a1290 2
xcb_sync_change_alarm_value_list_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     value_mask  /**< */)
d1296 31
d1328 4
a1331 4
xcb_sync_change_alarm_checked (xcb_connection_t *c  /**< */,
                               xcb_sync_alarm_t  id  /**< */,
                               uint32_t          value_mask  /**< */,
                               const void       *value_list  /**< */)
d1334 4
a1337 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_ALARM,
        /* isvoid */ 1
d1361 4
a1364 4
xcb_sync_change_alarm (xcb_connection_t *c  /**< */,
                       xcb_sync_alarm_t  id  /**< */,
                       uint32_t          value_mask  /**< */,
                       const void       *value_list  /**< */)
d1367 4
a1370 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_ALARM,
        /* isvoid */ 1
d1394 4
a1397 4
xcb_sync_change_alarm_aux_checked (xcb_connection_t                         *c  /**< */,
                                   xcb_sync_alarm_t                          id  /**< */,
                                   uint32_t                                  value_mask  /**< */,
                                   const xcb_sync_change_alarm_value_list_t *value_list  /**< */)
d1400 4
a1403 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_ALARM,
        /* isvoid */ 1
d1429 4
a1432 4
xcb_sync_change_alarm_aux (xcb_connection_t                         *c  /**< */,
                           xcb_sync_alarm_t                          id  /**< */,
                           uint32_t                                  value_mask  /**< */,
                           const xcb_sync_change_alarm_value_list_t *value_list  /**< */)
d1435 4
a1438 4
        /* count */ 3,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CHANGE_ALARM,
        /* isvoid */ 1
d1463 6
d1470 2
a1471 2
xcb_sync_destroy_alarm_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_alarm_t  alarm  /**< */)
d1474 4
a1477 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_ALARM,
        /* isvoid */ 1
d1496 2
a1497 2
xcb_sync_destroy_alarm (xcb_connection_t *c  /**< */,
                        xcb_sync_alarm_t  alarm  /**< */)
d1500 4
a1503 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_ALARM,
        /* isvoid */ 1
d1522 2
a1523 2
xcb_sync_query_alarm (xcb_connection_t *c  /**< */,
                      xcb_sync_alarm_t  alarm  /**< */)
d1526 4
a1529 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_ALARM,
        /* isvoid */ 0
d1548 2
a1549 2
xcb_sync_query_alarm_unchecked (xcb_connection_t *c  /**< */,
                                xcb_sync_alarm_t  alarm  /**< */)
d1552 4
a1555 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_ALARM,
        /* isvoid */ 0
d1574 1
a1574 1
xcb_sync_query_alarm_reply (xcb_connection_t               *c  /**< */,
d1576 1
a1576 1
                            xcb_generic_error_t           **e  /**< */)
d1582 3
a1584 3
xcb_sync_set_priority_checked (xcb_connection_t *c  /**< */,
                               uint32_t          id  /**< */,
                               int32_t           priority  /**< */)
d1587 4
a1590 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_SET_PRIORITY,
        /* isvoid */ 1
d1610 3
a1612 3
xcb_sync_set_priority (xcb_connection_t *c  /**< */,
                       uint32_t          id  /**< */,
                       int32_t           priority  /**< */)
d1615 4
a1618 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_SET_PRIORITY,
        /* isvoid */ 1
d1638 2
a1639 2
xcb_sync_get_priority (xcb_connection_t *c  /**< */,
                       uint32_t          id  /**< */)
d1642 4
a1645 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_GET_PRIORITY,
        /* isvoid */ 0
d1664 2
a1665 2
xcb_sync_get_priority_unchecked (xcb_connection_t *c  /**< */,
                                 uint32_t          id  /**< */)
d1668 4
a1671 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_GET_PRIORITY,
        /* isvoid */ 0
d1690 1
a1690 1
xcb_sync_get_priority_reply (xcb_connection_t                *c  /**< */,
d1692 1
a1692 1
                             xcb_generic_error_t            **e  /**< */)
d1698 4
a1701 4
xcb_sync_create_fence_checked (xcb_connection_t *c  /**< */,
                               xcb_drawable_t    drawable  /**< */,
                               xcb_sync_fence_t  fence  /**< */,
                               uint8_t           initially_triggered  /**< */)
d1704 4
a1707 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_FENCE,
        /* isvoid */ 1
d1728 4
a1731 4
xcb_sync_create_fence (xcb_connection_t *c  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       xcb_sync_fence_t  fence  /**< */,
                       uint8_t           initially_triggered  /**< */)
d1734 4
a1737 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_CREATE_FENCE,
        /* isvoid */ 1
d1758 2
a1759 2
xcb_sync_trigger_fence_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */)
d1762 4
a1765 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_TRIGGER_FENCE,
        /* isvoid */ 1
d1784 2
a1785 2
xcb_sync_trigger_fence (xcb_connection_t *c  /**< */,
                        xcb_sync_fence_t  fence  /**< */)
d1788 4
a1791 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_TRIGGER_FENCE,
        /* isvoid */ 1
d1810 2
a1811 2
xcb_sync_reset_fence_checked (xcb_connection_t *c  /**< */,
                              xcb_sync_fence_t  fence  /**< */)
d1814 4
a1817 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_RESET_FENCE,
        /* isvoid */ 1
d1836 2
a1837 2
xcb_sync_reset_fence (xcb_connection_t *c  /**< */,
                      xcb_sync_fence_t  fence  /**< */)
d1840 4
a1843 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_RESET_FENCE,
        /* isvoid */ 1
d1862 2
a1863 2
xcb_sync_destroy_fence_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */)
d1866 4
a1869 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_FENCE,
        /* isvoid */ 1
d1888 2
a1889 2
xcb_sync_destroy_fence (xcb_connection_t *c  /**< */,
                        xcb_sync_fence_t  fence  /**< */)
d1892 4
a1895 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_DESTROY_FENCE,
        /* isvoid */ 1
d1914 2
a1915 2
xcb_sync_query_fence (xcb_connection_t *c  /**< */,
                      xcb_sync_fence_t  fence  /**< */)
d1918 4
a1921 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_FENCE,
        /* isvoid */ 0
d1940 2
a1941 2
xcb_sync_query_fence_unchecked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */)
d1944 4
a1947 4
        /* count */ 2,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_QUERY_FENCE,
        /* isvoid */ 0
d1966 1
a1966 1
xcb_sync_query_fence_reply (xcb_connection_t               *c  /**< */,
d1968 1
a1968 1
                            xcb_generic_error_t           **e  /**< */)
d1974 2
a1975 2
xcb_sync_await_fence_sizeof (const void  *_buffer  /**< */,
                             uint32_t     fence_list_len  /**< */)
d2005 3
a2007 3
xcb_sync_await_fence_checked (xcb_connection_t       *c  /**< */,
                              uint32_t                fence_list_len  /**< */,
                              const xcb_sync_fence_t *fence_list  /**< */)
d2010 4
a2013 4
        /* count */ 4,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_AWAIT_FENCE,
        /* isvoid */ 1
d2036 3
a2038 3
xcb_sync_await_fence (xcb_connection_t       *c  /**< */,
                      uint32_t                fence_list_len  /**< */,
                      const xcb_sync_fence_t *fence_list  /**< */)
d2041 4
a2044 4
        /* count */ 4,
        /* ext */ &xcb_sync_id,
        /* opcode */ XCB_SYNC_AWAIT_FENCE,
        /* isvoid */ 1
d2064 22
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_sync_alarm_next
 ** 
 ** @@param xcb_sync_alarm_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_alarm_end
 ** 
 ** @@param xcb_sync_alarm_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_sync_counter_next
 ** 
 ** @@param xcb_sync_counter_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_counter_end
 ** 
 ** @@param xcb_sync_counter_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_sync_fence_next
 ** 
 ** @@param xcb_sync_fence_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_fence_end
 ** 
 ** @@param xcb_sync_fence_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_sync_int64_next
 ** 
 ** @@param xcb_sync_int64_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_int64_end
 ** 
 ** @@param xcb_sync_int64_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a123 10

/*****************************************************************************
 **
 ** char * xcb_sync_systemcounter_name
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a129 10

/*****************************************************************************
 **
 ** int xcb_sync_systemcounter_name_length
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a135 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_systemcounter_name_end
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a145 10

/*****************************************************************************
 **
 ** void xcb_sync_systemcounter_next
 ** 
 ** @@param xcb_sync_systemcounter_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a156 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_systemcounter_end
 ** 
 ** @@param xcb_sync_systemcounter_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a168 10

/*****************************************************************************
 **
 ** void xcb_sync_trigger_next
 ** 
 ** @@param xcb_sync_trigger_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a176 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_trigger_end
 ** 
 ** @@param xcb_sync_trigger_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a186 10

/*****************************************************************************
 **
 ** void xcb_sync_waitcondition_next
 ** 
 ** @@param xcb_sync_waitcondition_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a194 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_waitcondition_end
 ** 
 ** @@param xcb_sync_waitcondition_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a204 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_cookie_t xcb_sync_initialize
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           desired_major_version
 ** @@param uint8_t           desired_minor_version
 ** @@returns xcb_sync_initialize_cookie_t
 **
 *****************************************************************************/
 
d216 1
a216 1
    
d220 1
a220 1
    
d223 1
a223 1
    
d228 1
a228 1
    
a232 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_cookie_t xcb_sync_initialize_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           desired_major_version
 ** @@param uint8_t           desired_minor_version
 ** @@returns xcb_sync_initialize_cookie_t
 **
 *****************************************************************************/
 
d244 1
a244 1
    
d248 1
a248 1
    
d251 1
a251 1
    
d256 1
a256 1
    
a260 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_reply_t * xcb_sync_initialize_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_sync_initialize_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_sync_initialize_reply_t *
 **
 *****************************************************************************/
 
a304 10

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_cookie_t xcb_sync_list_system_counters
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_sync_list_system_counters_cookie_t
 **
 *****************************************************************************/
 
d314 1
a314 1
    
d318 2
a319 2
    
    
d324 1
a324 1
    
a328 10

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_cookie_t xcb_sync_list_system_counters_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_sync_list_system_counters_cookie_t
 **
 *****************************************************************************/
 
d338 1
a338 1
    
d342 2
a343 2
    
    
d348 1
a348 1
    
a352 10

/*****************************************************************************
 **
 ** int xcb_sync_list_system_counters_counters_length
 ** 
 ** @@param const xcb_sync_list_system_counters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a358 10

/*****************************************************************************
 **
 ** xcb_sync_systemcounter_iterator_t xcb_sync_list_system_counters_counters_iterator
 ** 
 ** @@param const xcb_sync_list_system_counters_reply_t *R
 ** @@returns xcb_sync_systemcounter_iterator_t
 **
 *****************************************************************************/
 
a368 12

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_reply_t * xcb_sync_list_system_counters_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_sync_list_system_counters_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_sync_list_system_counters_reply_t *
 **
 *****************************************************************************/
 
a376 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  id
 ** @@param xcb_sync_int64_t    initial_value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d388 1
a388 1
    
d392 1
a392 1
    
d395 1
a395 1
    
d400 1
a400 1
    
a404 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  id
 ** @@param xcb_sync_int64_t    initial_value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d416 1
a416 1
    
d420 1
a420 1
    
d423 1
a423 1
    
d428 1
a428 1
    
a432 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d443 1
a443 1
    
d447 1
a447 1
    
d449 1
a449 1
    
d454 1
a454 1
    
a458 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d469 1
a469 1
    
d473 1
a473 1
    
d475 1
a475 1
    
d480 1
a480 1
    
a484 11

/*****************************************************************************
 **
 ** xcb_sync_query_counter_cookie_t xcb_sync_query_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_sync_query_counter_cookie_t
 **
 *****************************************************************************/
 
d495 1
a495 1
    
d499 1
a499 1
    
d501 1
a501 1
    
d506 1
a506 1
    
a510 11

/*****************************************************************************
 **
 ** xcb_sync_query_counter_cookie_t xcb_sync_query_counter_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_sync_query_counter_cookie_t
 **
 *****************************************************************************/
 
d521 1
a521 1
    
d525 1
a525 1
    
d527 1
a527 1
    
d532 1
a532 1
    
a536 12

/*****************************************************************************
 **
 ** xcb_sync_query_counter_reply_t * xcb_sync_query_counter_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_sync_query_counter_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_sync_query_counter_reply_t *
 **
 *****************************************************************************/
 
a575 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        wait_list_len
 ** @@param const xcb_sync_waitcondition_t *wait_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d587 1
a587 1
    
d591 2
a592 2
    
    
d602 1
a602 1
    
a606 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        wait_list_len
 ** @@param const xcb_sync_waitcondition_t *wait_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d618 1
a618 1
    
d622 2
a623 2
    
    
d633 1
a633 1
    
a637 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    amount
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d649 1
a649 1
    
d653 1
a653 1
    
d656 1
a656 1
    
d661 1
a661 1
    
a665 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    amount
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d677 1
a677 1
    
d681 1
a681 1
    
d684 1
a684 1
    
d689 1
a689 1
    
a693 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d705 1
a705 1
    
d709 1
a709 1
    
d712 1
a712 1
    
d717 1
a717 1
    
a721 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d733 1
a733 1
    
d737 1
a737 1
    
d740 1
a740 1
    
d745 1
a745 1
    
a916 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d929 1
a929 1
    
d933 1
a933 1
    
d936 1
a936 1
    
d943 1
a943 1
    xcb_parts[4].iov_len = 
d945 1
a945 1
    
a949 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d962 1
a962 1
    
d966 1
a966 1
    
d969 1
a969 1
    
d976 1
a976 1
    xcb_parts[4].iov_len = 
d978 1
a978 1
    
a982 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_aux_checked
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_create_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d995 1
a995 1
    
d1000 1
a1000 1
    
d1003 1
a1003 1
    
d1009 1
a1009 1
    xcb_parts[4].iov_len = 
d1012 1
a1012 1
    
a1017 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_aux
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_create_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1030 1
a1030 1
    
d1035 1
a1035 1
    
d1038 1
a1038 1
    
d1044 1
a1044 1
    xcb_parts[4].iov_len = 
d1047 1
a1047 1
    
a1219 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1232 1
a1232 1
    
d1236 1
a1236 1
    
d1239 1
a1239 1
    
d1246 1
a1246 1
    xcb_parts[4].iov_len = 
d1248 1
a1248 1
    
a1252 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1265 1
a1265 1
    
d1269 1
a1269 1
    
d1272 1
a1272 1
    
d1279 1
a1279 1
    xcb_parts[4].iov_len = 
d1281 1
a1281 1
    
a1285 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_aux_checked
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_change_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1298 1
a1298 1
    
d1303 1
a1303 1
    
d1306 1
a1306 1
    
d1312 1
a1312 1
    xcb_parts[4].iov_len = 
d1315 1
a1315 1
    
a1320 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_aux
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_change_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1333 1
a1333 1
    
d1338 1
a1338 1
    
d1341 1
a1341 1
    
d1347 1
a1347 1
    xcb_parts[4].iov_len = 
d1350 1
a1350 1
    
a1355 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1366 1
a1366 1
    
d1370 1
a1370 1
    
d1372 1
a1372 1
    
d1377 1
a1377 1
    
a1381 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1392 1
a1392 1
    
d1396 1
a1396 1
    
d1398 1
a1398 1
    
d1403 1
a1403 1
    
a1407 11

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_cookie_t xcb_sync_query_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_sync_query_alarm_cookie_t
 **
 *****************************************************************************/
 
d1418 1
a1418 1
    
d1422 1
a1422 1
    
d1424 1
a1424 1
    
d1429 1
a1429 1
    
a1433 11

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_cookie_t xcb_sync_query_alarm_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_sync_query_alarm_cookie_t
 **
 *****************************************************************************/
 
d1444 1
a1444 1
    
d1448 1
a1448 1
    
d1450 1
a1450 1
    
d1455 1
a1455 1
    
a1459 12

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_reply_t * xcb_sync_query_alarm_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_sync_query_alarm_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_sync_query_alarm_reply_t *
 **
 *****************************************************************************/
 
a1467 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_priority_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@param int32_t           priority
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1479 1
a1479 1
    
d1483 1
a1483 1
    
d1486 1
a1486 1
    
d1491 1
a1491 1
    
a1495 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_priority
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@param int32_t           priority
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1507 1
a1507 1
    
d1511 1
a1511 1
    
d1514 1
a1514 1
    
d1519 1
a1519 1
    
a1523 11

/*****************************************************************************
 **
 ** xcb_sync_get_priority_cookie_t xcb_sync_get_priority
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@returns xcb_sync_get_priority_cookie_t
 **
 *****************************************************************************/
 
d1534 1
a1534 1
    
d1538 1
a1538 1
    
d1540 1
a1540 1
    
d1545 1
a1545 1
    
a1549 11

/*****************************************************************************
 **
 ** xcb_sync_get_priority_cookie_t xcb_sync_get_priority_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@returns xcb_sync_get_priority_cookie_t
 **
 *****************************************************************************/
 
d1560 1
a1560 1
    
d1564 1
a1564 1
    
d1566 1
a1566 1
    
d1571 1
a1571 1
    
a1575 12

/*****************************************************************************
 **
 ** xcb_sync_get_priority_reply_t * xcb_sync_get_priority_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_sync_get_priority_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_sync_get_priority_reply_t *
 **
 *****************************************************************************/
 
a1583 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_sync_fence_t  fence
 ** @@param uint8_t           initially_triggered
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1596 1
a1596 1
    
d1600 1
a1600 1
    
d1604 1
a1604 1
    
d1609 1
a1609 1
    
a1613 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_sync_fence_t  fence
 ** @@param uint8_t           initially_triggered
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1626 1
a1626 1
    
d1630 1
a1630 1
    
d1634 1
a1634 1
    
d1639 1
a1639 1
    
a1643 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_trigger_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1654 1
a1654 1
    
d1658 1
a1658 1
    
d1660 1
a1660 1
    
d1665 1
a1665 1
    
a1669 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_trigger_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1680 1
a1680 1
    
d1684 1
a1684 1
    
d1686 1
a1686 1
    
d1691 1
a1691 1
    
a1695 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_reset_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1706 1
a1706 1
    
d1710 1
a1710 1
    
d1712 1
a1712 1
    
d1717 1
a1717 1
    
a1721 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_reset_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1732 1
a1732 1
    
d1736 1
a1736 1
    
d1738 1
a1738 1
    
d1743 1
a1743 1
    
a1747 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1758 1
a1758 1
    
d1762 1
a1762 1
    
d1764 1
a1764 1
    
d1769 1
a1769 1
    
a1773 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1784 1
a1784 1
    
d1788 1
a1788 1
    
d1790 1
a1790 1
    
d1795 1
a1795 1
    
a1799 11

/*****************************************************************************
 **
 ** xcb_sync_query_fence_cookie_t xcb_sync_query_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_sync_query_fence_cookie_t
 **
 *****************************************************************************/
 
d1810 1
a1810 1
    
d1814 1
a1814 1
    
d1816 1
a1816 1
    
d1821 1
a1821 1
    
a1825 11

/*****************************************************************************
 **
 ** xcb_sync_query_fence_cookie_t xcb_sync_query_fence_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_sync_query_fence_cookie_t
 **
 *****************************************************************************/
 
d1836 1
a1836 1
    
d1840 1
a1840 1
    
d1842 1
a1842 1
    
d1847 1
a1847 1
    
a1851 12

/*****************************************************************************
 **
 ** xcb_sync_query_fence_reply_t * xcb_sync_query_fence_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_sync_query_fence_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_sync_query_fence_reply_t *
 **
 *****************************************************************************/
 
a1890 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_fence_checked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint32_t                fence_list_len
 ** @@param const xcb_sync_fence_t *fence_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1902 1
a1902 1
    
d1906 2
a1907 2
    
    
d1917 1
a1917 1
    
a1921 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_fence
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint32_t                fence_list_len
 ** @@param const xcb_sync_fence_t *fence_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1933 1
a1933 1
    
d1937 2
a1938 2
    
    
d1948 1
a1948 1
    
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d181 1
a181 1
    unsigned int xcb_align_to;
d186 2
d483 1
a483 1
    unsigned int xcb_align_to;
d490 2
d891 1
a891 1
    unsigned int xcb_align_to;
d896 2
d1161 96
a1256 1
xcb_sync_create_alarm_sizeof (const void  *_buffer  /**< */)
a1258 1
    const xcb_sync_create_alarm_request_t *_aux = (xcb_sync_create_alarm_request_t *)_buffer;
d1262 1
a1262 1
    unsigned int xcb_align_to;
d1265 42
a1306 6
    xcb_block_len += sizeof(xcb_sync_create_alarm_request_t);
    xcb_tmp += xcb_block_len;
    /* value_list */
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
d1319 8
d1335 1
a1335 1
 ** @@param const uint32_t   *value_list
d1344 1
a1344 1
                               const uint32_t   *value_list  /**< */)
d1347 1
a1347 1
        /* count */ 4,
d1353 1
a1353 1
    struct iovec xcb_parts[6];
d1364 1
a1364 1
    /* uint32_t value_list */
d1366 2
a1367 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1381 1
a1381 1
 ** @@param const uint32_t   *value_list
d1390 1
a1390 1
                       const uint32_t   *value_list  /**< */)
d1393 1
a1393 1
        /* count */ 4,
d1399 1
a1399 1
    struct iovec xcb_parts[6];
d1410 1
a1410 1
    /* uint32_t value_list */
d1412 97
a1508 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1511 1
d1516 96
a1611 1
xcb_sync_change_alarm_sizeof (const void  *_buffer  /**< */)
a1613 1
    const xcb_sync_change_alarm_request_t *_aux = (xcb_sync_change_alarm_request_t *)_buffer;
d1617 1
a1617 1
    unsigned int xcb_align_to;
d1620 42
a1661 6
    xcb_block_len += sizeof(xcb_sync_change_alarm_request_t);
    xcb_tmp += xcb_block_len;
    /* value_list */
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
d1674 8
d1690 1
a1690 1
 ** @@param const uint32_t   *value_list
d1699 1
a1699 1
                               const uint32_t   *value_list  /**< */)
d1702 1
a1702 1
        /* count */ 4,
d1708 1
a1708 1
    struct iovec xcb_parts[6];
d1719 1
a1719 1
    /* uint32_t value_list */
d1721 2
a1722 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1736 1
a1736 1
 ** @@param const uint32_t   *value_list
d1745 1
a1745 1
                       const uint32_t   *value_list  /**< */)
d1748 1
a1748 1
        /* count */ 4,
d1754 1
a1754 1
    struct iovec xcb_parts[6];
d1765 1
a1765 1
    /* uint32_t value_list */
d1767 97
a1863 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1866 1
d2622 1
a2622 1
    unsigned int xcb_align_to;
d2627 2
@


1.2
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d15 2
d173 29
d268 3
a270 1
    xcb_generic_iterator_t child = xcb_sync_systemcounter_name_end(R);
a272 1
    i->index = child.index;
d408 1
d448 1
d473 34
d536 1
d570 1
d666 1
d706 1
d743 1
d780 1
d817 1
d854 1
d879 29
d941 1
d946 1
d984 1
d989 1
d1029 1
d1069 1
d1109 1
d1149 1
d1154 29
d1220 1
d1225 1
d1267 1
d1272 1
d1277 29
d1343 1
d1348 1
d1390 1
d1395 1
d1432 1
d1469 1
d1506 1
d1543 1
d1603 1
d1643 1
d1680 1
d1717 1
d1780 1
d1823 1
d1860 1
d1897 1
d1934 1
d1971 1
d2008 1
d2045 1
d2082 1
d2119 1
d2144 29
d2206 1
d2211 1
d2249 1
d2254 1
@


1.1
log
@Initial revision
@
text
@d93 38
d1548 474
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
