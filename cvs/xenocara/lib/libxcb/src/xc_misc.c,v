head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xc_misc.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xc_misc.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

xcb_extension_t xcb_xc_misc_id = { "XC-MISC", 0 };

xcb_xc_misc_get_version_cookie_t
xcb_xc_misc_get_version (xcb_connection_t *c,
                         uint16_t          client_major_version,
                         uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_version_cookie_t xcb_ret;
    xcb_xc_misc_get_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xc_misc_get_version_cookie_t
xcb_xc_misc_get_version_unchecked (xcb_connection_t *c,
                                   uint16_t          client_major_version,
                                   uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_version_cookie_t xcb_ret;
    xcb_xc_misc_get_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xc_misc_get_version_reply_t *
xcb_xc_misc_get_version_reply (xcb_connection_t                  *c,
                               xcb_xc_misc_get_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xc_misc_get_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xc_misc_get_xid_range_cookie_t
xcb_xc_misc_get_xid_range (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_XID_RANGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_xid_range_cookie_t xcb_ret;
    xcb_xc_misc_get_xid_range_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xc_misc_get_xid_range_cookie_t
xcb_xc_misc_get_xid_range_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_XID_RANGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_xid_range_cookie_t xcb_ret;
    xcb_xc_misc_get_xid_range_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xc_misc_get_xid_range_reply_t *
xcb_xc_misc_get_xid_range_reply (xcb_connection_t                    *c,
                                 xcb_xc_misc_get_xid_range_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_xc_misc_get_xid_range_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xc_misc_get_xid_list_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xc_misc_get_xid_list_reply_t *_aux = (xcb_xc_misc_get_xid_list_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xc_misc_get_xid_list_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* ids */
    xcb_block_len += _aux->ids_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xc_misc_get_xid_list_cookie_t
xcb_xc_misc_get_xid_list (xcb_connection_t *c,
                          uint32_t          count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_XID_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_xid_list_cookie_t xcb_ret;
    xcb_xc_misc_get_xid_list_request_t xcb_out;

    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xc_misc_get_xid_list_cookie_t
xcb_xc_misc_get_xid_list_unchecked (xcb_connection_t *c,
                                    uint32_t          count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xc_misc_id,
        .opcode = XCB_XC_MISC_GET_XID_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xc_misc_get_xid_list_cookie_t xcb_ret;
    xcb_xc_misc_get_xid_list_request_t xcb_out;

    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xc_misc_get_xid_list_ids (const xcb_xc_misc_get_xid_list_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xc_misc_get_xid_list_ids_length (const xcb_xc_misc_get_xid_list_reply_t *R)
{
    return R->ids_len;
}

xcb_generic_iterator_t
xcb_xc_misc_get_xid_list_ids_end (const xcb_xc_misc_get_xid_list_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->ids_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xc_misc_get_xid_list_reply_t *
xcb_xc_misc_get_xid_list_reply (xcb_connection_t                   *c,
                                xcb_xc_misc_get_xid_list_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_xc_misc_get_xid_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d21 3
a23 3
xcb_xc_misc_get_version (xcb_connection_t *c  /**< */,
                         uint16_t          client_major_version  /**< */,
                         uint16_t          client_minor_version  /**< */)
d26 4
a29 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_VERSION,
        /* isvoid */ 0
d49 3
a51 3
xcb_xc_misc_get_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint16_t          client_major_version  /**< */,
                                   uint16_t          client_minor_version  /**< */)
d54 4
a57 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_VERSION,
        /* isvoid */ 0
d77 1
a77 1
xcb_xc_misc_get_version_reply (xcb_connection_t                  *c  /**< */,
d79 1
a79 1
                               xcb_generic_error_t              **e  /**< */)
d85 1
a85 1
xcb_xc_misc_get_xid_range (xcb_connection_t *c  /**< */)
d88 4
a91 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_XID_RANGE,
        /* isvoid */ 0
d109 1
a109 1
xcb_xc_misc_get_xid_range_unchecked (xcb_connection_t *c  /**< */)
d112 4
a115 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_XID_RANGE,
        /* isvoid */ 0
d133 1
a133 1
xcb_xc_misc_get_xid_range_reply (xcb_connection_t                    *c  /**< */,
d135 1
a135 1
                                 xcb_generic_error_t                **e  /**< */)
d141 1
a141 1
xcb_xc_misc_get_xid_list_sizeof (const void  *_buffer  /**< */)
d172 2
a173 2
xcb_xc_misc_get_xid_list (xcb_connection_t *c  /**< */,
                          uint32_t          count  /**< */)
d176 4
a179 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_XID_LIST,
        /* isvoid */ 0
d198 2
a199 2
xcb_xc_misc_get_xid_list_unchecked (xcb_connection_t *c  /**< */,
                                    uint32_t          count  /**< */)
d202 4
a205 4
        /* count */ 2,
        /* ext */ &xcb_xc_misc_id,
        /* opcode */ XCB_XC_MISC_GET_XID_LIST,
        /* isvoid */ 0
d224 1
a224 1
xcb_xc_misc_get_xid_list_ids (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */)
d230 1
a230 1
xcb_xc_misc_get_xid_list_ids_length (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */)
d236 1
a236 1
xcb_xc_misc_get_xid_list_ids_end (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */)
d246 1
a246 1
xcb_xc_misc_get_xid_list_reply (xcb_connection_t                   *c  /**< */,
d248 1
a248 1
                                xcb_generic_error_t               **e  /**< */)
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a19 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_cookie_t xcb_xc_misc_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xc_misc_get_version_cookie_t
 **
 *****************************************************************************/
 
d31 1
a31 1
    
d35 1
a35 1
    
d38 1
a38 1
    
d43 1
a43 1
    
a47 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_cookie_t xcb_xc_misc_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xc_misc_get_version_cookie_t
 **
 *****************************************************************************/
 
d59 1
a59 1
    
d63 1
a63 1
    
d66 1
a66 1
    
d71 1
a71 1
    
a75 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_reply_t * xcb_xc_misc_get_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xc_misc_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xc_misc_get_version_reply_t *
 **
 *****************************************************************************/
 
a83 10

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_cookie_t xcb_xc_misc_get_xid_range
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xc_misc_get_xid_range_cookie_t
 **
 *****************************************************************************/
 
d93 1
a93 1
    
d97 2
a98 2
    
    
d103 1
a103 1
    
a107 10

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_cookie_t xcb_xc_misc_get_xid_range_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xc_misc_get_xid_range_cookie_t
 **
 *****************************************************************************/
 
d117 1
a117 1
    
d121 2
a122 2
    
    
d127 1
a127 1
    
a131 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_reply_t * xcb_xc_misc_get_xid_range_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xc_misc_get_xid_range_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xc_misc_get_xid_range_reply_t *
 **
 *****************************************************************************/
 
a170 11

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_cookie_t xcb_xc_misc_get_xid_list
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          count
 ** @@returns xcb_xc_misc_get_xid_list_cookie_t
 **
 *****************************************************************************/
 
d181 1
a181 1
    
d185 1
a185 1
    
d187 1
a187 1
    
d192 1
a192 1
    
a196 11

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_cookie_t xcb_xc_misc_get_xid_list_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          count
 ** @@returns xcb_xc_misc_get_xid_list_cookie_t
 **
 *****************************************************************************/
 
d207 1
a207 1
    
d211 1
a211 1
    
d213 1
a213 1
    
d218 1
a218 1
    
a222 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xc_misc_get_xid_list_ids
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a228 10

/*****************************************************************************
 **
 ** int xcb_xc_misc_get_xid_list_ids_length
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a234 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xc_misc_get_xid_list_ids_end
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a244 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_reply_t * xcb_xc_misc_get_xid_list_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_xc_misc_get_xid_list_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_xc_misc_get_xid_list_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d216 1
a216 1
    unsigned int xcb_align_to;
d221 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d16 2
d55 1
d95 1
d149 1
d183 1
d208 29
d269 1
d306 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
