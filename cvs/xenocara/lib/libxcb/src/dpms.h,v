head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dpms.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_DPMS_API XCB DPMS API
 * @@brief DPMS XCB Protocol Implementation.
 * @@{
 **/

#ifndef __DPMS_H
#define __DPMS_H

#include "xcb.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_DPMS_MAJOR_VERSION 0
#define XCB_DPMS_MINOR_VERSION 0

extern xcb_extension_t xcb_dpms_id;

/**
 * @@brief xcb_dpms_get_version_cookie_t
 **/
typedef struct xcb_dpms_get_version_cookie_t {
    unsigned int sequence;
} xcb_dpms_get_version_cookie_t;

/** Opcode for xcb_dpms_get_version. */
#define XCB_DPMS_GET_VERSION 0

/**
 * @@brief xcb_dpms_get_version_request_t
 **/
typedef struct xcb_dpms_get_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t client_major_version;
    uint16_t client_minor_version;
} xcb_dpms_get_version_request_t;

/**
 * @@brief xcb_dpms_get_version_reply_t
 **/
typedef struct xcb_dpms_get_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t server_major_version;
    uint16_t server_minor_version;
} xcb_dpms_get_version_reply_t;

/**
 * @@brief xcb_dpms_capable_cookie_t
 **/
typedef struct xcb_dpms_capable_cookie_t {
    unsigned int sequence;
} xcb_dpms_capable_cookie_t;

/** Opcode for xcb_dpms_capable. */
#define XCB_DPMS_CAPABLE 1

/**
 * @@brief xcb_dpms_capable_request_t
 **/
typedef struct xcb_dpms_capable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_dpms_capable_request_t;

/**
 * @@brief xcb_dpms_capable_reply_t
 **/
typedef struct xcb_dpms_capable_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  capable;
    uint8_t  pad1[23];
} xcb_dpms_capable_reply_t;

/**
 * @@brief xcb_dpms_get_timeouts_cookie_t
 **/
typedef struct xcb_dpms_get_timeouts_cookie_t {
    unsigned int sequence;
} xcb_dpms_get_timeouts_cookie_t;

/** Opcode for xcb_dpms_get_timeouts. */
#define XCB_DPMS_GET_TIMEOUTS 2

/**
 * @@brief xcb_dpms_get_timeouts_request_t
 **/
typedef struct xcb_dpms_get_timeouts_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_dpms_get_timeouts_request_t;

/**
 * @@brief xcb_dpms_get_timeouts_reply_t
 **/
typedef struct xcb_dpms_get_timeouts_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t standby_timeout;
    uint16_t suspend_timeout;
    uint16_t off_timeout;
    uint8_t  pad1[18];
} xcb_dpms_get_timeouts_reply_t;

/** Opcode for xcb_dpms_set_timeouts. */
#define XCB_DPMS_SET_TIMEOUTS 3

/**
 * @@brief xcb_dpms_set_timeouts_request_t
 **/
typedef struct xcb_dpms_set_timeouts_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t standby_timeout;
    uint16_t suspend_timeout;
    uint16_t off_timeout;
} xcb_dpms_set_timeouts_request_t;

/** Opcode for xcb_dpms_enable. */
#define XCB_DPMS_ENABLE 4

/**
 * @@brief xcb_dpms_enable_request_t
 **/
typedef struct xcb_dpms_enable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_dpms_enable_request_t;

/** Opcode for xcb_dpms_disable. */
#define XCB_DPMS_DISABLE 5

/**
 * @@brief xcb_dpms_disable_request_t
 **/
typedef struct xcb_dpms_disable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_dpms_disable_request_t;

typedef enum xcb_dpms_dpms_mode_t {
    XCB_DPMS_DPMS_MODE_ON = 0,
    XCB_DPMS_DPMS_MODE_STANDBY = 1,
    XCB_DPMS_DPMS_MODE_SUSPEND = 2,
    XCB_DPMS_DPMS_MODE_OFF = 3
} xcb_dpms_dpms_mode_t;

/** Opcode for xcb_dpms_force_level. */
#define XCB_DPMS_FORCE_LEVEL 6

/**
 * @@brief xcb_dpms_force_level_request_t
 **/
typedef struct xcb_dpms_force_level_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t power_level;
} xcb_dpms_force_level_request_t;

/**
 * @@brief xcb_dpms_info_cookie_t
 **/
typedef struct xcb_dpms_info_cookie_t {
    unsigned int sequence;
} xcb_dpms_info_cookie_t;

/** Opcode for xcb_dpms_info. */
#define XCB_DPMS_INFO 7

/**
 * @@brief xcb_dpms_info_request_t
 **/
typedef struct xcb_dpms_info_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_dpms_info_request_t;

/**
 * @@brief xcb_dpms_info_reply_t
 **/
typedef struct xcb_dpms_info_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t power_level;
    uint8_t  state;
    uint8_t  pad1[21];
} xcb_dpms_info_reply_t;

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dpms_get_version_cookie_t
xcb_dpms_get_version (xcb_connection_t *c,
                      uint16_t          client_major_version,
                      uint16_t          client_minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dpms_get_version_cookie_t
xcb_dpms_get_version_unchecked (xcb_connection_t *c,
                                uint16_t          client_major_version,
                                uint16_t          client_minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dpms_get_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dpms_get_version_reply_t *
xcb_dpms_get_version_reply (xcb_connection_t               *c,
                            xcb_dpms_get_version_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dpms_capable_cookie_t
xcb_dpms_capable (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dpms_capable_cookie_t
xcb_dpms_capable_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dpms_capable_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dpms_capable_reply_t *
xcb_dpms_capable_reply (xcb_connection_t           *c,
                        xcb_dpms_capable_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dpms_get_timeouts_cookie_t
xcb_dpms_get_timeouts (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dpms_get_timeouts_cookie_t
xcb_dpms_get_timeouts_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dpms_get_timeouts_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dpms_get_timeouts_reply_t *
xcb_dpms_get_timeouts_reply (xcb_connection_t                *c,
                             xcb_dpms_get_timeouts_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dpms_set_timeouts_checked (xcb_connection_t *c,
                               uint16_t          standby_timeout,
                               uint16_t          suspend_timeout,
                               uint16_t          off_timeout);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dpms_set_timeouts (xcb_connection_t *c,
                       uint16_t          standby_timeout,
                       uint16_t          suspend_timeout,
                       uint16_t          off_timeout);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dpms_enable_checked (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dpms_enable (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dpms_disable_checked (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dpms_disable (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dpms_force_level_checked (xcb_connection_t *c,
                              uint16_t          power_level);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dpms_force_level (xcb_connection_t *c,
                      uint16_t          power_level);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dpms_info_cookie_t
xcb_dpms_info (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dpms_info_cookie_t
xcb_dpms_info_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dpms_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dpms_info_reply_t *
xcb_dpms_info_reply (xcb_connection_t        *c,
                     xcb_dpms_info_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d30 1
a30 1
    unsigned int sequence; /**<  */
d40 5
a44 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t client_major_version; /**<  */
    uint16_t client_minor_version; /**<  */
d51 6
a56 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t server_major_version; /**<  */
    uint16_t server_minor_version; /**<  */
d63 1
a63 1
    unsigned int sequence; /**<  */
d73 3
a75 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d82 6
a87 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  capable; /**<  */
    uint8_t  pad1[23]; /**<  */
d94 1
a94 1
    unsigned int sequence; /**<  */
d104 3
a106 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d113 8
a120 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t standby_timeout; /**<  */
    uint16_t suspend_timeout; /**<  */
    uint16_t off_timeout; /**<  */
    uint8_t  pad1[18]; /**<  */
d130 6
a135 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t standby_timeout; /**<  */
    uint16_t suspend_timeout; /**<  */
    uint16_t off_timeout; /**<  */
d145 3
a147 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d157 3
a159 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d176 4
a179 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t power_level; /**<  */
d186 1
a186 1
    unsigned int sequence; /**<  */
d196 3
a198 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d205 7
a211 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t power_level; /**<  */
    uint8_t  state; /**<  */
    uint8_t  pad1[21]; /**<  */
d223 3
a225 3
xcb_dpms_get_version (xcb_connection_t *c  /**< */,
                      uint16_t          client_major_version  /**< */,
                      uint16_t          client_minor_version  /**< */);
d239 3
a241 3
xcb_dpms_get_version_unchecked (xcb_connection_t *c  /**< */,
                                uint16_t          client_major_version  /**< */,
                                uint16_t          client_minor_version  /**< */);
d258 1
a258 1
xcb_dpms_get_version_reply (xcb_connection_t               *c  /**< */,
d260 1
a260 1
                            xcb_generic_error_t           **e  /**< */);
d271 1
a271 1
xcb_dpms_capable (xcb_connection_t *c  /**< */);
d285 1
a285 1
xcb_dpms_capable_unchecked (xcb_connection_t *c  /**< */);
d302 1
a302 1
xcb_dpms_capable_reply (xcb_connection_t           *c  /**< */,
d304 1
a304 1
                        xcb_generic_error_t       **e  /**< */);
d315 1
a315 1
xcb_dpms_get_timeouts (xcb_connection_t *c  /**< */);
d329 1
a329 1
xcb_dpms_get_timeouts_unchecked (xcb_connection_t *c  /**< */);
d346 1
a346 1
xcb_dpms_get_timeouts_reply (xcb_connection_t                *c  /**< */,
d348 1
a348 1
                             xcb_generic_error_t            **e  /**< */);
d362 4
a365 4
xcb_dpms_set_timeouts_checked (xcb_connection_t *c  /**< */,
                               uint16_t          standby_timeout  /**< */,
                               uint16_t          suspend_timeout  /**< */,
                               uint16_t          off_timeout  /**< */);
d376 4
a379 4
xcb_dpms_set_timeouts (xcb_connection_t *c  /**< */,
                       uint16_t          standby_timeout  /**< */,
                       uint16_t          suspend_timeout  /**< */,
                       uint16_t          off_timeout  /**< */);
d393 1
a393 1
xcb_dpms_enable_checked (xcb_connection_t *c  /**< */);
d404 1
a404 1
xcb_dpms_enable (xcb_connection_t *c  /**< */);
d418 1
a418 1
xcb_dpms_disable_checked (xcb_connection_t *c  /**< */);
d429 1
a429 1
xcb_dpms_disable (xcb_connection_t *c  /**< */);
d443 2
a444 2
xcb_dpms_force_level_checked (xcb_connection_t *c  /**< */,
                              uint16_t          power_level  /**< */);
d455 2
a456 2
xcb_dpms_force_level (xcb_connection_t *c  /**< */,
                      uint16_t          power_level  /**< */);
d467 1
a467 1
xcb_dpms_info (xcb_connection_t *c  /**< */);
d481 1
a481 1
xcb_dpms_info_unchecked (xcb_connection_t *c  /**< */);
d498 1
a498 1
xcb_dpms_info_reply (xcb_connection_t        *c  /**< */,
d500 1
a500 1
                     xcb_generic_error_t    **e  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d23 1
a23 1
  
d220 1
a220 1
 * 
a221 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_cookie_t xcb_dpms_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_dpms_get_version_cookie_t
 **
 *****************************************************************************/
 
d233 1
a233 1
 * 
a237 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_cookie_t xcb_dpms_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_dpms_get_version_cookie_t
 **
 *****************************************************************************/
 
d250 1
a250 1
 * 
a256 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_reply_t * xcb_dpms_get_version_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dpms_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dpms_get_version_reply_t *
 **
 *****************************************************************************/
 
d268 1
a268 1
 * 
a269 10

/*****************************************************************************
 **
 ** xcb_dpms_capable_cookie_t xcb_dpms_capable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_capable_cookie_t
 **
 *****************************************************************************/
 
d279 1
a279 1
 * 
a283 10

/*****************************************************************************
 **
 ** xcb_dpms_capable_cookie_t xcb_dpms_capable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_capable_cookie_t
 **
 *****************************************************************************/
 
d294 1
a294 1
 * 
a300 12

/*****************************************************************************
 **
 ** xcb_dpms_capable_reply_t * xcb_dpms_capable_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dpms_capable_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dpms_capable_reply_t *
 **
 *****************************************************************************/
 
d312 1
a312 1
 * 
a313 10

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_cookie_t xcb_dpms_get_timeouts
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_get_timeouts_cookie_t
 **
 *****************************************************************************/
 
d323 1
a323 1
 * 
a327 10

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_cookie_t xcb_dpms_get_timeouts_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_get_timeouts_cookie_t
 **
 *****************************************************************************/
 
d338 1
a338 1
 * 
a344 12

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_reply_t * xcb_dpms_get_timeouts_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dpms_get_timeouts_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dpms_get_timeouts_reply_t *
 **
 *****************************************************************************/
 
d356 1
a356 1
 * 
a360 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_set_timeouts_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          standby_timeout
 ** @@param uint16_t          suspend_timeout
 ** @@param uint16_t          off_timeout
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d373 1
a373 1
 * 
a374 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_set_timeouts
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          standby_timeout
 ** @@param uint16_t          suspend_timeout
 ** @@param uint16_t          off_timeout
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d387 1
a387 1
 * 
a391 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_enable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d401 1
a401 1
 * 
a402 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_enable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d412 1
a412 1
 * 
a416 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_disable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d426 1
a426 1
 * 
a427 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_disable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d437 1
a437 1
 * 
a441 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_force_level_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          power_level
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d452 1
a452 1
 * 
a453 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_force_level
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          power_level
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d464 1
a464 1
 * 
a465 10

/*****************************************************************************
 **
 ** xcb_dpms_info_cookie_t xcb_dpms_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_info_cookie_t
 **
 *****************************************************************************/
 
d475 1
a475 1
 * 
a479 10

/*****************************************************************************
 **
 ** xcb_dpms_info_cookie_t xcb_dpms_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_info_cookie_t
 **
 *****************************************************************************/
 
d490 1
a490 1
 * 
a496 12

/*****************************************************************************
 **
 ** xcb_dpms_info_reply_t * xcb_dpms_info_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_dpms_info_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_dpms_info_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d163 4
a166 4
    XCB_DPMS_DPMS_MODE_ON,
    XCB_DPMS_DPMS_MODE_STANDBY,
    XCB_DPMS_DPMS_MODE_SUSPEND,
    XCB_DPMS_DPMS_MODE_OFF
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d215 1
a215 1
 * Delivers a request to the X server
d240 1
a240 1
 * Delivers a request to the X server
d299 1
a299 1
 * Delivers a request to the X server
d320 1
a320 1
 * Delivers a request to the X server
d375 1
a375 1
 * Delivers a request to the X server
d396 1
a396 1
 * Delivers a request to the X server
d451 1
a451 1
 * Delivers a request to the X server
d481 1
a481 1
 * Delivers a request to the X server
d508 1
a508 1
 * Delivers a request to the X server
d532 1
a532 1
 * Delivers a request to the X server
d553 1
a553 1
 * Delivers a request to the X server
d577 1
a577 1
 * Delivers a request to the X server
d598 1
a598 1
 * Delivers a request to the X server
d624 1
a624 1
 * Delivers a request to the X server
d647 1
a647 1
 * Delivers a request to the X server
d668 1
a668 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@d162 7
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
