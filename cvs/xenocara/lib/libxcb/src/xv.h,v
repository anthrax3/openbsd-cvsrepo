head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xv.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Xv_API XCB Xv API
 * @@brief Xv XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XV_H
#define __XV_H

#include "xcb.h"
#include "xproto.h"
#include "shm.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XV_MAJOR_VERSION 2
#define XCB_XV_MINOR_VERSION 2

extern xcb_extension_t xcb_xv_id;

typedef uint32_t xcb_xv_port_t;

/**
 * @@brief xcb_xv_port_iterator_t
 **/
typedef struct xcb_xv_port_iterator_t {
    xcb_xv_port_t *data;
    int            rem;
    int            index;
} xcb_xv_port_iterator_t;

typedef uint32_t xcb_xv_encoding_t;

/**
 * @@brief xcb_xv_encoding_iterator_t
 **/
typedef struct xcb_xv_encoding_iterator_t {
    xcb_xv_encoding_t *data;
    int                rem;
    int                index;
} xcb_xv_encoding_iterator_t;

typedef enum xcb_xv_type_t {
    XCB_XV_TYPE_INPUT_MASK = 1,
    XCB_XV_TYPE_OUTPUT_MASK = 2,
    XCB_XV_TYPE_VIDEO_MASK = 4,
    XCB_XV_TYPE_STILL_MASK = 8,
    XCB_XV_TYPE_IMAGE_MASK = 16
} xcb_xv_type_t;

typedef enum xcb_xv_image_format_info_type_t {
    XCB_XV_IMAGE_FORMAT_INFO_TYPE_RGB = 0,
    XCB_XV_IMAGE_FORMAT_INFO_TYPE_YUV = 1
} xcb_xv_image_format_info_type_t;

typedef enum xcb_xv_image_format_info_format_t {
    XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PACKED = 0,
    XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PLANAR = 1
} xcb_xv_image_format_info_format_t;

typedef enum xcb_xv_attribute_flag_t {
    XCB_XV_ATTRIBUTE_FLAG_GETTABLE = 1,
    XCB_XV_ATTRIBUTE_FLAG_SETTABLE = 2
} xcb_xv_attribute_flag_t;

typedef enum xcb_xv_video_notify_reason_t {
    XCB_XV_VIDEO_NOTIFY_REASON_STARTED = 0,
    XCB_XV_VIDEO_NOTIFY_REASON_STOPPED = 1,
    XCB_XV_VIDEO_NOTIFY_REASON_BUSY = 2,
    XCB_XV_VIDEO_NOTIFY_REASON_PREEMPTED = 3,
    XCB_XV_VIDEO_NOTIFY_REASON_HARD_ERROR = 4
} xcb_xv_video_notify_reason_t;

typedef enum xcb_xv_scanline_order_t {
    XCB_XV_SCANLINE_ORDER_TOP_TO_BOTTOM = 0,
    XCB_XV_SCANLINE_ORDER_BOTTOM_TO_TOP = 1
} xcb_xv_scanline_order_t;

typedef enum xcb_xv_grab_port_status_t {
    XCB_XV_GRAB_PORT_STATUS_SUCCESS = 0,
    XCB_XV_GRAB_PORT_STATUS_BAD_EXTENSION = 1,
    XCB_XV_GRAB_PORT_STATUS_ALREADY_GRABBED = 2,
    XCB_XV_GRAB_PORT_STATUS_INVALID_TIME = 3,
    XCB_XV_GRAB_PORT_STATUS_BAD_REPLY = 4,
    XCB_XV_GRAB_PORT_STATUS_BAD_ALLOC = 5
} xcb_xv_grab_port_status_t;

/**
 * @@brief xcb_xv_rational_t
 **/
typedef struct xcb_xv_rational_t {
    int32_t numerator;
    int32_t denominator;
} xcb_xv_rational_t;

/**
 * @@brief xcb_xv_rational_iterator_t
 **/
typedef struct xcb_xv_rational_iterator_t {
    xcb_xv_rational_t *data;
    int                rem;
    int                index;
} xcb_xv_rational_iterator_t;

/**
 * @@brief xcb_xv_format_t
 **/
typedef struct xcb_xv_format_t {
    xcb_visualid_t visual;
    uint8_t        depth;
    uint8_t        pad0[3];
} xcb_xv_format_t;

/**
 * @@brief xcb_xv_format_iterator_t
 **/
typedef struct xcb_xv_format_iterator_t {
    xcb_xv_format_t *data;
    int              rem;
    int              index;
} xcb_xv_format_iterator_t;

/**
 * @@brief xcb_xv_adaptor_info_t
 **/
typedef struct xcb_xv_adaptor_info_t {
    xcb_xv_port_t base_id;
    uint16_t      name_size;
    uint16_t      num_ports;
    uint16_t      num_formats;
    uint8_t       type;
    uint8_t       pad0;
} xcb_xv_adaptor_info_t;

/**
 * @@brief xcb_xv_adaptor_info_iterator_t
 **/
typedef struct xcb_xv_adaptor_info_iterator_t {
    xcb_xv_adaptor_info_t *data;
    int                    rem;
    int                    index;
} xcb_xv_adaptor_info_iterator_t;

/**
 * @@brief xcb_xv_encoding_info_t
 **/
typedef struct xcb_xv_encoding_info_t {
    xcb_xv_encoding_t encoding;
    uint16_t          name_size;
    uint16_t          width;
    uint16_t          height;
    uint8_t           pad0[2];
    xcb_xv_rational_t rate;
} xcb_xv_encoding_info_t;

/**
 * @@brief xcb_xv_encoding_info_iterator_t
 **/
typedef struct xcb_xv_encoding_info_iterator_t {
    xcb_xv_encoding_info_t *data;
    int                     rem;
    int                     index;
} xcb_xv_encoding_info_iterator_t;

/**
 * @@brief xcb_xv_image_t
 **/
typedef struct xcb_xv_image_t {
    uint32_t id;
    uint16_t width;
    uint16_t height;
    uint32_t data_size;
    uint32_t num_planes;
} xcb_xv_image_t;

/**
 * @@brief xcb_xv_image_iterator_t
 **/
typedef struct xcb_xv_image_iterator_t {
    xcb_xv_image_t *data;
    int             rem;
    int             index;
} xcb_xv_image_iterator_t;

/**
 * @@brief xcb_xv_attribute_info_t
 **/
typedef struct xcb_xv_attribute_info_t {
    uint32_t flags;
    int32_t  min;
    int32_t  max;
    uint32_t size;
} xcb_xv_attribute_info_t;

/**
 * @@brief xcb_xv_attribute_info_iterator_t
 **/
typedef struct xcb_xv_attribute_info_iterator_t {
    xcb_xv_attribute_info_t *data;
    int                      rem;
    int                      index;
} xcb_xv_attribute_info_iterator_t;

/**
 * @@brief xcb_xv_image_format_info_t
 **/
typedef struct xcb_xv_image_format_info_t {
    uint32_t id;
    uint8_t  type;
    uint8_t  byte_order;
    uint8_t  pad0[2];
    uint8_t  guid[16];
    uint8_t  bpp;
    uint8_t  num_planes;
    uint8_t  pad1[2];
    uint8_t  depth;
    uint8_t  pad2[3];
    uint32_t red_mask;
    uint32_t green_mask;
    uint32_t blue_mask;
    uint8_t  format;
    uint8_t  pad3[3];
    uint32_t y_sample_bits;
    uint32_t u_sample_bits;
    uint32_t v_sample_bits;
    uint32_t vhorz_y_period;
    uint32_t vhorz_u_period;
    uint32_t vhorz_v_period;
    uint32_t vvert_y_period;
    uint32_t vvert_u_period;
    uint32_t vvert_v_period;
    uint8_t  vcomp_order[32];
    uint8_t  vscanline_order;
    uint8_t  pad4[11];
} xcb_xv_image_format_info_t;

/**
 * @@brief xcb_xv_image_format_info_iterator_t
 **/
typedef struct xcb_xv_image_format_info_iterator_t {
    xcb_xv_image_format_info_t *data;
    int                         rem;
    int                         index;
} xcb_xv_image_format_info_iterator_t;

/** Opcode for xcb_xv_bad_port. */
#define XCB_XV_BAD_PORT 0

/**
 * @@brief xcb_xv_bad_port_error_t
 **/
typedef struct xcb_xv_bad_port_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_xv_bad_port_error_t;

/** Opcode for xcb_xv_bad_encoding. */
#define XCB_XV_BAD_ENCODING 1

/**
 * @@brief xcb_xv_bad_encoding_error_t
 **/
typedef struct xcb_xv_bad_encoding_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_xv_bad_encoding_error_t;

/** Opcode for xcb_xv_bad_control. */
#define XCB_XV_BAD_CONTROL 2

/**
 * @@brief xcb_xv_bad_control_error_t
 **/
typedef struct xcb_xv_bad_control_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_xv_bad_control_error_t;

/** Opcode for xcb_xv_video_notify. */
#define XCB_XV_VIDEO_NOTIFY 0

/**
 * @@brief xcb_xv_video_notify_event_t
 **/
typedef struct xcb_xv_video_notify_event_t {
    uint8_t         response_type;
    uint8_t         reason;
    uint16_t        sequence;
    xcb_timestamp_t time;
    xcb_drawable_t  drawable;
    xcb_xv_port_t   port;
} xcb_xv_video_notify_event_t;

/** Opcode for xcb_xv_port_notify. */
#define XCB_XV_PORT_NOTIFY 1

/**
 * @@brief xcb_xv_port_notify_event_t
 **/
typedef struct xcb_xv_port_notify_event_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    xcb_timestamp_t time;
    xcb_xv_port_t   port;
    xcb_atom_t      attribute;
    int32_t         value;
} xcb_xv_port_notify_event_t;

/**
 * @@brief xcb_xv_query_extension_cookie_t
 **/
typedef struct xcb_xv_query_extension_cookie_t {
    unsigned int sequence;
} xcb_xv_query_extension_cookie_t;

/** Opcode for xcb_xv_query_extension. */
#define XCB_XV_QUERY_EXTENSION 0

/**
 * @@brief xcb_xv_query_extension_request_t
 **/
typedef struct xcb_xv_query_extension_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xv_query_extension_request_t;

/**
 * @@brief xcb_xv_query_extension_reply_t
 **/
typedef struct xcb_xv_query_extension_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t major;
    uint16_t minor;
} xcb_xv_query_extension_reply_t;

/**
 * @@brief xcb_xv_query_adaptors_cookie_t
 **/
typedef struct xcb_xv_query_adaptors_cookie_t {
    unsigned int sequence;
} xcb_xv_query_adaptors_cookie_t;

/** Opcode for xcb_xv_query_adaptors. */
#define XCB_XV_QUERY_ADAPTORS 1

/**
 * @@brief xcb_xv_query_adaptors_request_t
 **/
typedef struct xcb_xv_query_adaptors_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_xv_query_adaptors_request_t;

/**
 * @@brief xcb_xv_query_adaptors_reply_t
 **/
typedef struct xcb_xv_query_adaptors_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_adaptors;
    uint8_t  pad1[22];
} xcb_xv_query_adaptors_reply_t;

/**
 * @@brief xcb_xv_query_encodings_cookie_t
 **/
typedef struct xcb_xv_query_encodings_cookie_t {
    unsigned int sequence;
} xcb_xv_query_encodings_cookie_t;

/** Opcode for xcb_xv_query_encodings. */
#define XCB_XV_QUERY_ENCODINGS 2

/**
 * @@brief xcb_xv_query_encodings_request_t
 **/
typedef struct xcb_xv_query_encodings_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
} xcb_xv_query_encodings_request_t;

/**
 * @@brief xcb_xv_query_encodings_reply_t
 **/
typedef struct xcb_xv_query_encodings_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_encodings;
    uint8_t  pad1[22];
} xcb_xv_query_encodings_reply_t;

/**
 * @@brief xcb_xv_grab_port_cookie_t
 **/
typedef struct xcb_xv_grab_port_cookie_t {
    unsigned int sequence;
} xcb_xv_grab_port_cookie_t;

/** Opcode for xcb_xv_grab_port. */
#define XCB_XV_GRAB_PORT 3

/**
 * @@brief xcb_xv_grab_port_request_t
 **/
typedef struct xcb_xv_grab_port_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_xv_port_t   port;
    xcb_timestamp_t time;
} xcb_xv_grab_port_request_t;

/**
 * @@brief xcb_xv_grab_port_reply_t
 **/
typedef struct xcb_xv_grab_port_reply_t {
    uint8_t  response_type;
    uint8_t  result;
    uint16_t sequence;
    uint32_t length;
} xcb_xv_grab_port_reply_t;

/** Opcode for xcb_xv_ungrab_port. */
#define XCB_XV_UNGRAB_PORT 4

/**
 * @@brief xcb_xv_ungrab_port_request_t
 **/
typedef struct xcb_xv_ungrab_port_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_xv_port_t   port;
    xcb_timestamp_t time;
} xcb_xv_ungrab_port_request_t;

/** Opcode for xcb_xv_put_video. */
#define XCB_XV_PUT_VIDEO 5

/**
 * @@brief xcb_xv_put_video_request_t
 **/
typedef struct xcb_xv_put_video_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t        vid_x;
    int16_t        vid_y;
    uint16_t       vid_w;
    uint16_t       vid_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
} xcb_xv_put_video_request_t;

/** Opcode for xcb_xv_put_still. */
#define XCB_XV_PUT_STILL 6

/**
 * @@brief xcb_xv_put_still_request_t
 **/
typedef struct xcb_xv_put_still_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t        vid_x;
    int16_t        vid_y;
    uint16_t       vid_w;
    uint16_t       vid_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
} xcb_xv_put_still_request_t;

/** Opcode for xcb_xv_get_video. */
#define XCB_XV_GET_VIDEO 7

/**
 * @@brief xcb_xv_get_video_request_t
 **/
typedef struct xcb_xv_get_video_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t        vid_x;
    int16_t        vid_y;
    uint16_t       vid_w;
    uint16_t       vid_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
} xcb_xv_get_video_request_t;

/** Opcode for xcb_xv_get_still. */
#define XCB_XV_GET_STILL 8

/**
 * @@brief xcb_xv_get_still_request_t
 **/
typedef struct xcb_xv_get_still_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    int16_t        vid_x;
    int16_t        vid_y;
    uint16_t       vid_w;
    uint16_t       vid_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
} xcb_xv_get_still_request_t;

/** Opcode for xcb_xv_stop_video. */
#define XCB_XV_STOP_VIDEO 9

/**
 * @@brief xcb_xv_stop_video_request_t
 **/
typedef struct xcb_xv_stop_video_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
} xcb_xv_stop_video_request_t;

/** Opcode for xcb_xv_select_video_notify. */
#define XCB_XV_SELECT_VIDEO_NOTIFY 10

/**
 * @@brief xcb_xv_select_video_notify_request_t
 **/
typedef struct xcb_xv_select_video_notify_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint8_t        onoff;
    uint8_t        pad0[3];
} xcb_xv_select_video_notify_request_t;

/** Opcode for xcb_xv_select_port_notify. */
#define XCB_XV_SELECT_PORT_NOTIFY 11

/**
 * @@brief xcb_xv_select_port_notify_request_t
 **/
typedef struct xcb_xv_select_port_notify_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
    uint8_t       onoff;
    uint8_t       pad0[3];
} xcb_xv_select_port_notify_request_t;

/**
 * @@brief xcb_xv_query_best_size_cookie_t
 **/
typedef struct xcb_xv_query_best_size_cookie_t {
    unsigned int sequence;
} xcb_xv_query_best_size_cookie_t;

/** Opcode for xcb_xv_query_best_size. */
#define XCB_XV_QUERY_BEST_SIZE 12

/**
 * @@brief xcb_xv_query_best_size_request_t
 **/
typedef struct xcb_xv_query_best_size_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
    uint16_t      vid_w;
    uint16_t      vid_h;
    uint16_t      drw_w;
    uint16_t      drw_h;
    uint8_t       motion;
    uint8_t       pad0[3];
} xcb_xv_query_best_size_request_t;

/**
 * @@brief xcb_xv_query_best_size_reply_t
 **/
typedef struct xcb_xv_query_best_size_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t actual_width;
    uint16_t actual_height;
} xcb_xv_query_best_size_reply_t;

/** Opcode for xcb_xv_set_port_attribute. */
#define XCB_XV_SET_PORT_ATTRIBUTE 13

/**
 * @@brief xcb_xv_set_port_attribute_request_t
 **/
typedef struct xcb_xv_set_port_attribute_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
    xcb_atom_t    attribute;
    int32_t       value;
} xcb_xv_set_port_attribute_request_t;

/**
 * @@brief xcb_xv_get_port_attribute_cookie_t
 **/
typedef struct xcb_xv_get_port_attribute_cookie_t {
    unsigned int sequence;
} xcb_xv_get_port_attribute_cookie_t;

/** Opcode for xcb_xv_get_port_attribute. */
#define XCB_XV_GET_PORT_ATTRIBUTE 14

/**
 * @@brief xcb_xv_get_port_attribute_request_t
 **/
typedef struct xcb_xv_get_port_attribute_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
    xcb_atom_t    attribute;
} xcb_xv_get_port_attribute_request_t;

/**
 * @@brief xcb_xv_get_port_attribute_reply_t
 **/
typedef struct xcb_xv_get_port_attribute_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    int32_t  value;
} xcb_xv_get_port_attribute_reply_t;

/**
 * @@brief xcb_xv_query_port_attributes_cookie_t
 **/
typedef struct xcb_xv_query_port_attributes_cookie_t {
    unsigned int sequence;
} xcb_xv_query_port_attributes_cookie_t;

/** Opcode for xcb_xv_query_port_attributes. */
#define XCB_XV_QUERY_PORT_ATTRIBUTES 15

/**
 * @@brief xcb_xv_query_port_attributes_request_t
 **/
typedef struct xcb_xv_query_port_attributes_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
} xcb_xv_query_port_attributes_request_t;

/**
 * @@brief xcb_xv_query_port_attributes_reply_t
 **/
typedef struct xcb_xv_query_port_attributes_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_attributes;
    uint32_t text_size;
    uint8_t  pad1[16];
} xcb_xv_query_port_attributes_reply_t;

/**
 * @@brief xcb_xv_list_image_formats_cookie_t
 **/
typedef struct xcb_xv_list_image_formats_cookie_t {
    unsigned int sequence;
} xcb_xv_list_image_formats_cookie_t;

/** Opcode for xcb_xv_list_image_formats. */
#define XCB_XV_LIST_IMAGE_FORMATS 16

/**
 * @@brief xcb_xv_list_image_formats_request_t
 **/
typedef struct xcb_xv_list_image_formats_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
} xcb_xv_list_image_formats_request_t;

/**
 * @@brief xcb_xv_list_image_formats_reply_t
 **/
typedef struct xcb_xv_list_image_formats_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_formats;
    uint8_t  pad1[20];
} xcb_xv_list_image_formats_reply_t;

/**
 * @@brief xcb_xv_query_image_attributes_cookie_t
 **/
typedef struct xcb_xv_query_image_attributes_cookie_t {
    unsigned int sequence;
} xcb_xv_query_image_attributes_cookie_t;

/** Opcode for xcb_xv_query_image_attributes. */
#define XCB_XV_QUERY_IMAGE_ATTRIBUTES 17

/**
 * @@brief xcb_xv_query_image_attributes_request_t
 **/
typedef struct xcb_xv_query_image_attributes_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port;
    uint32_t      id;
    uint16_t      width;
    uint16_t      height;
} xcb_xv_query_image_attributes_request_t;

/**
 * @@brief xcb_xv_query_image_attributes_reply_t
 **/
typedef struct xcb_xv_query_image_attributes_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_planes;
    uint32_t data_size;
    uint16_t width;
    uint16_t height;
    uint8_t  pad1[12];
} xcb_xv_query_image_attributes_reply_t;

/** Opcode for xcb_xv_put_image. */
#define XCB_XV_PUT_IMAGE 18

/**
 * @@brief xcb_xv_put_image_request_t
 **/
typedef struct xcb_xv_put_image_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    uint32_t       id;
    int16_t        src_x;
    int16_t        src_y;
    uint16_t       src_w;
    uint16_t       src_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
    uint16_t       width;
    uint16_t       height;
} xcb_xv_put_image_request_t;

/** Opcode for xcb_xv_shm_put_image. */
#define XCB_XV_SHM_PUT_IMAGE 19

/**
 * @@brief xcb_xv_shm_put_image_request_t
 **/
typedef struct xcb_xv_shm_put_image_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_xv_port_t  port;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    xcb_shm_seg_t  shmseg;
    uint32_t       id;
    uint32_t       offset;
    int16_t        src_x;
    int16_t        src_y;
    uint16_t       src_w;
    uint16_t       src_h;
    int16_t        drw_x;
    int16_t        drw_y;
    uint16_t       drw_w;
    uint16_t       drw_h;
    uint16_t       width;
    uint16_t       height;
    uint8_t        send_event;
    uint8_t        pad0[3];
} xcb_xv_shm_put_image_request_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_port_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_port_t)
 */
void
xcb_xv_port_next (xcb_xv_port_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_port_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_port_end (xcb_xv_port_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_encoding_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_encoding_t)
 */
void
xcb_xv_encoding_next (xcb_xv_encoding_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_encoding_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_encoding_end (xcb_xv_encoding_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_rational_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_rational_t)
 */
void
xcb_xv_rational_next (xcb_xv_rational_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_rational_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_rational_end (xcb_xv_rational_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_format_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_format_t)
 */
void
xcb_xv_format_next (xcb_xv_format_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_format_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_format_end (xcb_xv_format_iterator_t i);

int
xcb_xv_adaptor_info_sizeof (const void  *_buffer);

char *
xcb_xv_adaptor_info_name (const xcb_xv_adaptor_info_t *R);

int
xcb_xv_adaptor_info_name_length (const xcb_xv_adaptor_info_t *R);

xcb_generic_iterator_t
xcb_xv_adaptor_info_name_end (const xcb_xv_adaptor_info_t *R);

xcb_xv_format_t *
xcb_xv_adaptor_info_formats (const xcb_xv_adaptor_info_t *R);

int
xcb_xv_adaptor_info_formats_length (const xcb_xv_adaptor_info_t *R);

xcb_xv_format_iterator_t
xcb_xv_adaptor_info_formats_iterator (const xcb_xv_adaptor_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_adaptor_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_adaptor_info_t)
 */
void
xcb_xv_adaptor_info_next (xcb_xv_adaptor_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_adaptor_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_adaptor_info_end (xcb_xv_adaptor_info_iterator_t i);

int
xcb_xv_encoding_info_sizeof (const void  *_buffer);

char *
xcb_xv_encoding_info_name (const xcb_xv_encoding_info_t *R);

int
xcb_xv_encoding_info_name_length (const xcb_xv_encoding_info_t *R);

xcb_generic_iterator_t
xcb_xv_encoding_info_name_end (const xcb_xv_encoding_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_encoding_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_encoding_info_t)
 */
void
xcb_xv_encoding_info_next (xcb_xv_encoding_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_encoding_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_encoding_info_end (xcb_xv_encoding_info_iterator_t i);

int
xcb_xv_image_sizeof (const void  *_buffer);

uint32_t *
xcb_xv_image_pitches (const xcb_xv_image_t *R);

int
xcb_xv_image_pitches_length (const xcb_xv_image_t *R);

xcb_generic_iterator_t
xcb_xv_image_pitches_end (const xcb_xv_image_t *R);

uint32_t *
xcb_xv_image_offsets (const xcb_xv_image_t *R);

int
xcb_xv_image_offsets_length (const xcb_xv_image_t *R);

xcb_generic_iterator_t
xcb_xv_image_offsets_end (const xcb_xv_image_t *R);

uint8_t *
xcb_xv_image_data (const xcb_xv_image_t *R);

int
xcb_xv_image_data_length (const xcb_xv_image_t *R);

xcb_generic_iterator_t
xcb_xv_image_data_end (const xcb_xv_image_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_image_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_image_t)
 */
void
xcb_xv_image_next (xcb_xv_image_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_image_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_image_end (xcb_xv_image_iterator_t i);

int
xcb_xv_attribute_info_sizeof (const void  *_buffer);

char *
xcb_xv_attribute_info_name (const xcb_xv_attribute_info_t *R);

int
xcb_xv_attribute_info_name_length (const xcb_xv_attribute_info_t *R);

xcb_generic_iterator_t
xcb_xv_attribute_info_name_end (const xcb_xv_attribute_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_attribute_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_attribute_info_t)
 */
void
xcb_xv_attribute_info_next (xcb_xv_attribute_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_attribute_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_attribute_info_end (xcb_xv_attribute_info_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xv_image_format_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xv_image_format_info_t)
 */
void
xcb_xv_image_format_info_next (xcb_xv_image_format_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xv_image_format_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xv_image_format_info_end (xcb_xv_image_format_info_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_extension_cookie_t
xcb_xv_query_extension (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_extension_cookie_t
xcb_xv_query_extension_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_extension_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_extension_reply_t *
xcb_xv_query_extension_reply (xcb_connection_t                 *c,
                              xcb_xv_query_extension_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_xv_query_adaptors_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_adaptors_cookie_t
xcb_xv_query_adaptors (xcb_connection_t *c,
                       xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_adaptors_cookie_t
xcb_xv_query_adaptors_unchecked (xcb_connection_t *c,
                                 xcb_window_t      window);

int
xcb_xv_query_adaptors_info_length (const xcb_xv_query_adaptors_reply_t *R);

xcb_xv_adaptor_info_iterator_t
xcb_xv_query_adaptors_info_iterator (const xcb_xv_query_adaptors_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_adaptors_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_adaptors_reply_t *
xcb_xv_query_adaptors_reply (xcb_connection_t                *c,
                             xcb_xv_query_adaptors_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_xv_query_encodings_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_encodings_cookie_t
xcb_xv_query_encodings (xcb_connection_t *c,
                        xcb_xv_port_t     port);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_encodings_cookie_t
xcb_xv_query_encodings_unchecked (xcb_connection_t *c,
                                  xcb_xv_port_t     port);

int
xcb_xv_query_encodings_info_length (const xcb_xv_query_encodings_reply_t *R);

xcb_xv_encoding_info_iterator_t
xcb_xv_query_encodings_info_iterator (const xcb_xv_query_encodings_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_encodings_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_encodings_reply_t *
xcb_xv_query_encodings_reply (xcb_connection_t                 *c,
                              xcb_xv_query_encodings_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_grab_port_cookie_t
xcb_xv_grab_port (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_timestamp_t   time);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_grab_port_cookie_t
xcb_xv_grab_port_unchecked (xcb_connection_t *c,
                            xcb_xv_port_t     port,
                            xcb_timestamp_t   time);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_grab_port_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_grab_port_reply_t *
xcb_xv_grab_port_reply (xcb_connection_t           *c,
                        xcb_xv_grab_port_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_ungrab_port_checked (xcb_connection_t *c,
                            xcb_xv_port_t     port,
                            xcb_timestamp_t   time);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_ungrab_port (xcb_connection_t *c,
                    xcb_xv_port_t     port,
                    xcb_timestamp_t   time);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_put_video_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_put_video (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_put_still_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_put_still (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_get_video_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_get_video (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_get_still_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_get_still (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_stop_video_checked (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_stop_video (xcb_connection_t *c,
                   xcb_xv_port_t     port,
                   xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_select_video_notify_checked (xcb_connection_t *c,
                                    xcb_drawable_t    drawable,
                                    uint8_t           onoff);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_select_video_notify (xcb_connection_t *c,
                            xcb_drawable_t    drawable,
                            uint8_t           onoff);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_select_port_notify_checked (xcb_connection_t *c,
                                   xcb_xv_port_t     port,
                                   uint8_t           onoff);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_select_port_notify (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           uint8_t           onoff);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_best_size_cookie_t
xcb_xv_query_best_size (xcb_connection_t *c,
                        xcb_xv_port_t     port,
                        uint16_t          vid_w,
                        uint16_t          vid_h,
                        uint16_t          drw_w,
                        uint16_t          drw_h,
                        uint8_t           motion);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_best_size_cookie_t
xcb_xv_query_best_size_unchecked (xcb_connection_t *c,
                                  xcb_xv_port_t     port,
                                  uint16_t          vid_w,
                                  uint16_t          vid_h,
                                  uint16_t          drw_w,
                                  uint16_t          drw_h,
                                  uint8_t           motion);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_best_size_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_best_size_reply_t *
xcb_xv_query_best_size_reply (xcb_connection_t                 *c,
                              xcb_xv_query_best_size_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_set_port_attribute_checked (xcb_connection_t *c,
                                   xcb_xv_port_t     port,
                                   xcb_atom_t        attribute,
                                   int32_t           value);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_set_port_attribute (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_atom_t        attribute,
                           int32_t           value);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_get_port_attribute_cookie_t
xcb_xv_get_port_attribute (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_atom_t        attribute);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_get_port_attribute_cookie_t
xcb_xv_get_port_attribute_unchecked (xcb_connection_t *c,
                                     xcb_xv_port_t     port,
                                     xcb_atom_t        attribute);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_get_port_attribute_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_get_port_attribute_reply_t *
xcb_xv_get_port_attribute_reply (xcb_connection_t                    *c,
                                 xcb_xv_get_port_attribute_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_xv_query_port_attributes_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_port_attributes_cookie_t
xcb_xv_query_port_attributes (xcb_connection_t *c,
                              xcb_xv_port_t     port);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_port_attributes_cookie_t
xcb_xv_query_port_attributes_unchecked (xcb_connection_t *c,
                                        xcb_xv_port_t     port);

int
xcb_xv_query_port_attributes_attributes_length (const xcb_xv_query_port_attributes_reply_t *R);

xcb_xv_attribute_info_iterator_t
xcb_xv_query_port_attributes_attributes_iterator (const xcb_xv_query_port_attributes_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_port_attributes_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_port_attributes_reply_t *
xcb_xv_query_port_attributes_reply (xcb_connection_t                       *c,
                                    xcb_xv_query_port_attributes_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_xv_list_image_formats_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_list_image_formats_cookie_t
xcb_xv_list_image_formats (xcb_connection_t *c,
                           xcb_xv_port_t     port);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_list_image_formats_cookie_t
xcb_xv_list_image_formats_unchecked (xcb_connection_t *c,
                                     xcb_xv_port_t     port);

xcb_xv_image_format_info_t *
xcb_xv_list_image_formats_format (const xcb_xv_list_image_formats_reply_t *R);

int
xcb_xv_list_image_formats_format_length (const xcb_xv_list_image_formats_reply_t *R);

xcb_xv_image_format_info_iterator_t
xcb_xv_list_image_formats_format_iterator (const xcb_xv_list_image_formats_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_list_image_formats_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_list_image_formats_reply_t *
xcb_xv_list_image_formats_reply (xcb_connection_t                    *c,
                                 xcb_xv_list_image_formats_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_xv_query_image_attributes_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xv_query_image_attributes_cookie_t
xcb_xv_query_image_attributes (xcb_connection_t *c,
                               xcb_xv_port_t     port,
                               uint32_t          id,
                               uint16_t          width,
                               uint16_t          height);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xv_query_image_attributes_cookie_t
xcb_xv_query_image_attributes_unchecked (xcb_connection_t *c,
                                         xcb_xv_port_t     port,
                                         uint32_t          id,
                                         uint16_t          width,
                                         uint16_t          height);

uint32_t *
xcb_xv_query_image_attributes_pitches (const xcb_xv_query_image_attributes_reply_t *R);

int
xcb_xv_query_image_attributes_pitches_length (const xcb_xv_query_image_attributes_reply_t *R);

xcb_generic_iterator_t
xcb_xv_query_image_attributes_pitches_end (const xcb_xv_query_image_attributes_reply_t *R);

uint32_t *
xcb_xv_query_image_attributes_offsets (const xcb_xv_query_image_attributes_reply_t *R);

int
xcb_xv_query_image_attributes_offsets_length (const xcb_xv_query_image_attributes_reply_t *R);

xcb_generic_iterator_t
xcb_xv_query_image_attributes_offsets_end (const xcb_xv_query_image_attributes_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xv_query_image_attributes_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xv_query_image_attributes_reply_t *
xcb_xv_query_image_attributes_reply (xcb_connection_t                        *c,
                                     xcb_xv_query_image_attributes_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_xv_put_image_sizeof (const void  *_buffer,
                         uint32_t     data_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_put_image_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          uint32_t          id,
                          int16_t           src_x,
                          int16_t           src_y,
                          uint16_t          src_w,
                          uint16_t          src_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h,
                          uint16_t          width,
                          uint16_t          height,
                          uint32_t          data_len,
                          const uint8_t    *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_put_image (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  uint32_t          id,
                  int16_t           src_x,
                  int16_t           src_y,
                  uint16_t          src_w,
                  uint16_t          src_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h,
                  uint16_t          width,
                  uint16_t          height,
                  uint32_t          data_len,
                  const uint8_t    *data);

uint8_t *
xcb_xv_put_image_data (const xcb_xv_put_image_request_t *R);

int
xcb_xv_put_image_data_length (const xcb_xv_put_image_request_t *R);

xcb_generic_iterator_t
xcb_xv_put_image_data_end (const xcb_xv_put_image_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xv_shm_put_image_checked (xcb_connection_t *c,
                              xcb_xv_port_t     port,
                              xcb_drawable_t    drawable,
                              xcb_gcontext_t    gc,
                              xcb_shm_seg_t     shmseg,
                              uint32_t          id,
                              uint32_t          offset,
                              int16_t           src_x,
                              int16_t           src_y,
                              uint16_t          src_w,
                              uint16_t          src_h,
                              int16_t           drw_x,
                              int16_t           drw_y,
                              uint16_t          drw_w,
                              uint16_t          drw_h,
                              uint16_t          width,
                              uint16_t          height,
                              uint8_t           send_event);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xv_shm_put_image (xcb_connection_t *c,
                      xcb_xv_port_t     port,
                      xcb_drawable_t    drawable,
                      xcb_gcontext_t    gc,
                      xcb_shm_seg_t     shmseg,
                      uint32_t          id,
                      uint32_t          offset,
                      int16_t           src_x,
                      int16_t           src_y,
                      uint16_t          src_w,
                      uint16_t          src_h,
                      int16_t           drw_x,
                      int16_t           drw_y,
                      uint16_t          drw_w,
                      uint16_t          drw_h,
                      uint16_t          width,
                      uint16_t          height,
                      uint8_t           send_event);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d34 3
a36 3
    xcb_xv_port_t *data; /**<  */
    int            rem; /**<  */
    int            index; /**<  */
d45 3
a47 3
    xcb_xv_encoding_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d99 2
a100 2
    int32_t numerator; /**<  */
    int32_t denominator; /**<  */
d107 3
a109 3
    xcb_xv_rational_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d116 3
a118 3
    xcb_visualid_t visual; /**<  */
    uint8_t        depth; /**<  */
    uint8_t        pad0[3]; /**<  */
d125 3
a127 3
    xcb_xv_format_t *data; /**<  */
    int              rem; /**<  */
    int              index; /**<  */
d134 6
a139 6
    xcb_xv_port_t base_id; /**<  */
    uint16_t      name_size; /**<  */
    uint16_t      num_ports; /**<  */
    uint16_t      num_formats; /**<  */
    uint8_t       type; /**<  */
    uint8_t       pad0; /**<  */
d146 3
a148 3
    xcb_xv_adaptor_info_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d155 6
a160 6
    xcb_xv_encoding_t encoding; /**<  */
    uint16_t          name_size; /**<  */
    uint16_t          width; /**<  */
    uint16_t          height; /**<  */
    uint8_t           pad0[2]; /**<  */
    xcb_xv_rational_t rate; /**<  */
d167 3
a169 3
    xcb_xv_encoding_info_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d176 5
a180 5
    uint32_t id; /**<  */
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    uint32_t data_size; /**<  */
    uint32_t num_planes; /**<  */
d187 3
a189 3
    xcb_xv_image_t *data; /**<  */
    int             rem; /**<  */
    int             index; /**<  */
d196 4
a199 4
    uint32_t flags; /**<  */
    int32_t  min; /**<  */
    int32_t  max; /**<  */
    uint32_t size; /**<  */
d206 3
a208 3
    xcb_xv_attribute_info_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d215 27
a241 27
    uint32_t id; /**<  */
    uint8_t  type; /**<  */
    uint8_t  byte_order; /**<  */
    uint8_t  pad0[2]; /**<  */
    uint8_t  guid[16]; /**<  */
    uint8_t  bpp; /**<  */
    uint8_t  num_planes; /**<  */
    uint8_t  pad1[2]; /**<  */
    uint8_t  depth; /**<  */
    uint8_t  pad2[3]; /**<  */
    uint32_t red_mask; /**<  */
    uint32_t green_mask; /**<  */
    uint32_t blue_mask; /**<  */
    uint8_t  format; /**<  */
    uint8_t  pad3[3]; /**<  */
    uint32_t y_sample_bits; /**<  */
    uint32_t u_sample_bits; /**<  */
    uint32_t v_sample_bits; /**<  */
    uint32_t vhorz_y_period; /**<  */
    uint32_t vhorz_u_period; /**<  */
    uint32_t vhorz_v_period; /**<  */
    uint32_t vvert_y_period; /**<  */
    uint32_t vvert_u_period; /**<  */
    uint32_t vvert_v_period; /**<  */
    uint8_t  vcomp_order[32]; /**<  */
    uint8_t  vscanline_order; /**<  */
    uint8_t  pad4[11]; /**<  */
d248 3
a250 3
    xcb_xv_image_format_info_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d260 3
a262 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d272 3
a274 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d284 3
a286 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d296 6
a301 6
    uint8_t         response_type; /**<  */
    uint8_t         reason; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_drawable_t  drawable; /**<  */
    xcb_xv_port_t   port; /**<  */
d311 7
a317 7
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t time; /**<  */
    xcb_xv_port_t   port; /**<  */
    xcb_atom_t      attribute; /**<  */
    int32_t         value; /**<  */
d324 1
a324 1
    unsigned int sequence; /**<  */
d334 3
a336 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d343 6
a348 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major; /**<  */
    uint16_t minor; /**<  */
d355 1
a355 1
    unsigned int sequence; /**<  */
d365 4
a368 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d375 6
a380 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_adaptors; /**<  */
    uint8_t  pad1[22]; /**<  */
d387 1
a387 1
    unsigned int sequence; /**<  */
d397 4
a400 4
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
d407 6
a412 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_encodings; /**<  */
    uint8_t  pad1[22]; /**<  */
d419 1
a419 1
    unsigned int sequence; /**<  */
d429 5
a433 5
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_xv_port_t   port; /**<  */
    xcb_timestamp_t time; /**<  */
d440 4
a443 4
    uint8_t  response_type; /**<  */
    uint8_t  result; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
d453 5
a457 5
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_xv_port_t   port; /**<  */
    xcb_timestamp_t time; /**<  */
d467 14
a480 14
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    int16_t        vid_x; /**<  */
    int16_t        vid_y; /**<  */
    uint16_t       vid_w; /**<  */
    uint16_t       vid_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
d490 14
a503 14
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    int16_t        vid_x; /**<  */
    int16_t        vid_y; /**<  */
    uint16_t       vid_w; /**<  */
    uint16_t       vid_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
d513 14
a526 14
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    int16_t        vid_x; /**<  */
    int16_t        vid_y; /**<  */
    uint16_t       vid_w; /**<  */
    uint16_t       vid_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
d536 14
a549 14
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    int16_t        vid_x; /**<  */
    int16_t        vid_y; /**<  */
    uint16_t       vid_w; /**<  */
    uint16_t       vid_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
d559 5
a563 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
d573 6
a578 6
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint8_t        onoff; /**<  */
    uint8_t        pad0[3]; /**<  */
d588 6
a593 6
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
    uint8_t       onoff; /**<  */
    uint8_t       pad0[3]; /**<  */
d600 1
a600 1
    unsigned int sequence; /**<  */
d610 10
a619 10
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
    uint16_t      vid_w; /**<  */
    uint16_t      vid_h; /**<  */
    uint16_t      drw_w; /**<  */
    uint16_t      drw_h; /**<  */
    uint8_t       motion; /**<  */
    uint8_t       pad0[3]; /**<  */
d626 6
a631 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t actual_width; /**<  */
    uint16_t actual_height; /**<  */
d641 6
a646 6
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
    xcb_atom_t    attribute; /**<  */
    int32_t       value; /**<  */
d653 1
a653 1
    unsigned int sequence; /**<  */
d663 5
a667 5
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
    xcb_atom_t    attribute; /**<  */
d674 5
a678 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    int32_t  value; /**<  */
d685 1
a685 1
    unsigned int sequence; /**<  */
d695 4
a698 4
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
d705 7
a711 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_attributes; /**<  */
    uint32_t text_size; /**<  */
    uint8_t  pad1[16]; /**<  */
d718 1
a718 1
    unsigned int sequence; /**<  */
d728 4
a731 4
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
d738 6
a743 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_formats; /**<  */
    uint8_t  pad1[20]; /**<  */
d750 1
a750 1
    unsigned int sequence; /**<  */
d760 7
a766 7
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port; /**<  */
    uint32_t      id; /**<  */
    uint16_t      width; /**<  */
    uint16_t      height; /**<  */
d773 9
a781 9
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_planes; /**<  */
    uint32_t data_size; /**<  */
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    uint8_t  pad1[12]; /**<  */
d791 17
a807 17
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    uint32_t       id; /**<  */
    int16_t        src_x; /**<  */
    int16_t        src_y; /**<  */
    uint16_t       src_w; /**<  */
    uint16_t       src_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
    uint16_t       width; /**<  */
    uint16_t       height; /**<  */
d817 21
a837 21
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_xv_port_t  port; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    xcb_shm_seg_t  shmseg; /**<  */
    uint32_t       id; /**<  */
    uint32_t       offset; /**<  */
    int16_t        src_x; /**<  */
    int16_t        src_y; /**<  */
    uint16_t       src_w; /**<  */
    uint16_t       src_h; /**<  */
    int16_t        drw_x; /**<  */
    int16_t        drw_y; /**<  */
    uint16_t       drw_w; /**<  */
    uint16_t       drw_h; /**<  */
    uint16_t       width; /**<  */
    uint16_t       height; /**<  */
    uint8_t        send_event; /**<  */
    uint8_t        pad0[3]; /**<  */
d849 1
a849 1
xcb_xv_port_next (xcb_xv_port_iterator_t *i  /**< */);
d861 1
a861 1
xcb_xv_port_end (xcb_xv_port_iterator_t i  /**< */);
d872 1
a872 1
xcb_xv_encoding_next (xcb_xv_encoding_iterator_t *i  /**< */);
d884 1
a884 1
xcb_xv_encoding_end (xcb_xv_encoding_iterator_t i  /**< */);
d895 1
a895 1
xcb_xv_rational_next (xcb_xv_rational_iterator_t *i  /**< */);
d907 1
a907 1
xcb_xv_rational_end (xcb_xv_rational_iterator_t i  /**< */);
d918 1
a918 1
xcb_xv_format_next (xcb_xv_format_iterator_t *i  /**< */);
d930 1
a930 1
xcb_xv_format_end (xcb_xv_format_iterator_t i  /**< */);
d933 1
a933 1
xcb_xv_adaptor_info_sizeof (const void  *_buffer  /**< */);
d936 1
a936 1
xcb_xv_adaptor_info_name (const xcb_xv_adaptor_info_t *R  /**< */);
d939 1
a939 1
xcb_xv_adaptor_info_name_length (const xcb_xv_adaptor_info_t *R  /**< */);
d942 1
a942 1
xcb_xv_adaptor_info_name_end (const xcb_xv_adaptor_info_t *R  /**< */);
d945 1
a945 1
xcb_xv_adaptor_info_formats (const xcb_xv_adaptor_info_t *R  /**< */);
d948 1
a948 1
xcb_xv_adaptor_info_formats_length (const xcb_xv_adaptor_info_t *R  /**< */);
d951 1
a951 1
xcb_xv_adaptor_info_formats_iterator (const xcb_xv_adaptor_info_t *R  /**< */);
d962 1
a962 1
xcb_xv_adaptor_info_next (xcb_xv_adaptor_info_iterator_t *i  /**< */);
d974 1
a974 1
xcb_xv_adaptor_info_end (xcb_xv_adaptor_info_iterator_t i  /**< */);
d977 1
a977 1
xcb_xv_encoding_info_sizeof (const void  *_buffer  /**< */);
d980 1
a980 1
xcb_xv_encoding_info_name (const xcb_xv_encoding_info_t *R  /**< */);
d983 1
a983 1
xcb_xv_encoding_info_name_length (const xcb_xv_encoding_info_t *R  /**< */);
d986 1
a986 1
xcb_xv_encoding_info_name_end (const xcb_xv_encoding_info_t *R  /**< */);
d997 1
a997 1
xcb_xv_encoding_info_next (xcb_xv_encoding_info_iterator_t *i  /**< */);
d1009 1
a1009 1
xcb_xv_encoding_info_end (xcb_xv_encoding_info_iterator_t i  /**< */);
d1012 1
a1012 1
xcb_xv_image_sizeof (const void  *_buffer  /**< */);
d1015 1
a1015 1
xcb_xv_image_pitches (const xcb_xv_image_t *R  /**< */);
d1018 1
a1018 1
xcb_xv_image_pitches_length (const xcb_xv_image_t *R  /**< */);
d1021 1
a1021 1
xcb_xv_image_pitches_end (const xcb_xv_image_t *R  /**< */);
d1024 1
a1024 1
xcb_xv_image_offsets (const xcb_xv_image_t *R  /**< */);
d1027 1
a1027 1
xcb_xv_image_offsets_length (const xcb_xv_image_t *R  /**< */);
d1030 1
a1030 1
xcb_xv_image_offsets_end (const xcb_xv_image_t *R  /**< */);
d1033 1
a1033 1
xcb_xv_image_data (const xcb_xv_image_t *R  /**< */);
d1036 1
a1036 1
xcb_xv_image_data_length (const xcb_xv_image_t *R  /**< */);
d1039 1
a1039 1
xcb_xv_image_data_end (const xcb_xv_image_t *R  /**< */);
d1050 1
a1050 1
xcb_xv_image_next (xcb_xv_image_iterator_t *i  /**< */);
d1062 1
a1062 1
xcb_xv_image_end (xcb_xv_image_iterator_t i  /**< */);
d1065 1
a1065 1
xcb_xv_attribute_info_sizeof (const void  *_buffer  /**< */);
d1068 1
a1068 1
xcb_xv_attribute_info_name (const xcb_xv_attribute_info_t *R  /**< */);
d1071 1
a1071 1
xcb_xv_attribute_info_name_length (const xcb_xv_attribute_info_t *R  /**< */);
d1074 1
a1074 1
xcb_xv_attribute_info_name_end (const xcb_xv_attribute_info_t *R  /**< */);
d1085 1
a1085 1
xcb_xv_attribute_info_next (xcb_xv_attribute_info_iterator_t *i  /**< */);
d1097 1
a1097 1
xcb_xv_attribute_info_end (xcb_xv_attribute_info_iterator_t i  /**< */);
d1108 1
a1108 1
xcb_xv_image_format_info_next (xcb_xv_image_format_info_iterator_t *i  /**< */);
d1120 1
a1120 1
xcb_xv_image_format_info_end (xcb_xv_image_format_info_iterator_t i  /**< */);
d1131 1
a1131 1
xcb_xv_query_extension (xcb_connection_t *c  /**< */);
d1145 1
a1145 1
xcb_xv_query_extension_unchecked (xcb_connection_t *c  /**< */);
d1162 1
a1162 1
xcb_xv_query_extension_reply (xcb_connection_t                 *c  /**< */,
d1164 1
a1164 1
                              xcb_generic_error_t             **e  /**< */);
d1167 1
a1167 1
xcb_xv_query_adaptors_sizeof (const void  *_buffer  /**< */);
d1178 2
a1179 2
xcb_xv_query_adaptors (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */);
d1193 2
a1194 2
xcb_xv_query_adaptors_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */);
d1197 1
a1197 1
xcb_xv_query_adaptors_info_length (const xcb_xv_query_adaptors_reply_t *R  /**< */);
d1200 1
a1200 1
xcb_xv_query_adaptors_info_iterator (const xcb_xv_query_adaptors_reply_t *R  /**< */);
d1217 1
a1217 1
xcb_xv_query_adaptors_reply (xcb_connection_t                *c  /**< */,
d1219 1
a1219 1
                             xcb_generic_error_t            **e  /**< */);
d1222 1
a1222 1
xcb_xv_query_encodings_sizeof (const void  *_buffer  /**< */);
d1233 2
a1234 2
xcb_xv_query_encodings (xcb_connection_t *c  /**< */,
                        xcb_xv_port_t     port  /**< */);
d1248 2
a1249 2
xcb_xv_query_encodings_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_xv_port_t     port  /**< */);
d1252 1
a1252 1
xcb_xv_query_encodings_info_length (const xcb_xv_query_encodings_reply_t *R  /**< */);
d1255 1
a1255 1
xcb_xv_query_encodings_info_iterator (const xcb_xv_query_encodings_reply_t *R  /**< */);
d1272 1
a1272 1
xcb_xv_query_encodings_reply (xcb_connection_t                 *c  /**< */,
d1274 1
a1274 1
                              xcb_generic_error_t             **e  /**< */);
d1285 3
a1287 3
xcb_xv_grab_port (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_timestamp_t   time  /**< */);
d1301 3
a1303 3
xcb_xv_grab_port_unchecked (xcb_connection_t *c  /**< */,
                            xcb_xv_port_t     port  /**< */,
                            xcb_timestamp_t   time  /**< */);
d1320 1
a1320 1
xcb_xv_grab_port_reply (xcb_connection_t           *c  /**< */,
d1322 1
a1322 1
                        xcb_generic_error_t       **e  /**< */);
d1336 3
a1338 3
xcb_xv_ungrab_port_checked (xcb_connection_t *c  /**< */,
                            xcb_xv_port_t     port  /**< */,
                            xcb_timestamp_t   time  /**< */);
d1349 3
a1351 3
xcb_xv_ungrab_port (xcb_connection_t *c  /**< */,
                    xcb_xv_port_t     port  /**< */,
                    xcb_timestamp_t   time  /**< */);
d1365 12
a1376 12
xcb_xv_put_video_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */);
d1387 12
a1398 12
xcb_xv_put_video (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */);
d1412 12
a1423 12
xcb_xv_put_still_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */);
d1434 12
a1445 12
xcb_xv_put_still (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */);
d1459 12
a1470 12
xcb_xv_get_video_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */);
d1481 12
a1492 12
xcb_xv_get_video (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */);
d1506 12
a1517 12
xcb_xv_get_still_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */);
d1528 12
a1539 12
xcb_xv_get_still (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */);
d1553 3
a1555 3
xcb_xv_stop_video_checked (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_drawable_t    drawable  /**< */);
d1566 3
a1568 3
xcb_xv_stop_video (xcb_connection_t *c  /**< */,
                   xcb_xv_port_t     port  /**< */,
                   xcb_drawable_t    drawable  /**< */);
d1582 3
a1584 3
xcb_xv_select_video_notify_checked (xcb_connection_t *c  /**< */,
                                    xcb_drawable_t    drawable  /**< */,
                                    uint8_t           onoff  /**< */);
d1595 3
a1597 3
xcb_xv_select_video_notify (xcb_connection_t *c  /**< */,
                            xcb_drawable_t    drawable  /**< */,
                            uint8_t           onoff  /**< */);
d1611 3
a1613 3
xcb_xv_select_port_notify_checked (xcb_connection_t *c  /**< */,
                                   xcb_xv_port_t     port  /**< */,
                                   uint8_t           onoff  /**< */);
d1624 3
a1626 3
xcb_xv_select_port_notify (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           uint8_t           onoff  /**< */);
d1637 7
a1643 7
xcb_xv_query_best_size (xcb_connection_t *c  /**< */,
                        xcb_xv_port_t     port  /**< */,
                        uint16_t          vid_w  /**< */,
                        uint16_t          vid_h  /**< */,
                        uint16_t          drw_w  /**< */,
                        uint16_t          drw_h  /**< */,
                        uint8_t           motion  /**< */);
d1657 7
a1663 7
xcb_xv_query_best_size_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_xv_port_t     port  /**< */,
                                  uint16_t          vid_w  /**< */,
                                  uint16_t          vid_h  /**< */,
                                  uint16_t          drw_w  /**< */,
                                  uint16_t          drw_h  /**< */,
                                  uint8_t           motion  /**< */);
d1680 1
a1680 1
xcb_xv_query_best_size_reply (xcb_connection_t                 *c  /**< */,
d1682 1
a1682 1
                              xcb_generic_error_t             **e  /**< */);
d1696 4
a1699 4
xcb_xv_set_port_attribute_checked (xcb_connection_t *c  /**< */,
                                   xcb_xv_port_t     port  /**< */,
                                   xcb_atom_t        attribute  /**< */,
                                   int32_t           value  /**< */);
d1710 4
a1713 4
xcb_xv_set_port_attribute (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_atom_t        attribute  /**< */,
                           int32_t           value  /**< */);
d1724 3
a1726 3
xcb_xv_get_port_attribute (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_atom_t        attribute  /**< */);
d1740 3
a1742 3
xcb_xv_get_port_attribute_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_xv_port_t     port  /**< */,
                                     xcb_atom_t        attribute  /**< */);
d1759 1
a1759 1
xcb_xv_get_port_attribute_reply (xcb_connection_t                    *c  /**< */,
d1761 1
a1761 1
                                 xcb_generic_error_t                **e  /**< */);
d1764 1
a1764 1
xcb_xv_query_port_attributes_sizeof (const void  *_buffer  /**< */);
d1775 2
a1776 2
xcb_xv_query_port_attributes (xcb_connection_t *c  /**< */,
                              xcb_xv_port_t     port  /**< */);
d1790 2
a1791 2
xcb_xv_query_port_attributes_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_xv_port_t     port  /**< */);
d1794 1
a1794 1
xcb_xv_query_port_attributes_attributes_length (const xcb_xv_query_port_attributes_reply_t *R  /**< */);
d1797 1
a1797 1
xcb_xv_query_port_attributes_attributes_iterator (const xcb_xv_query_port_attributes_reply_t *R  /**< */);
d1814 1
a1814 1
xcb_xv_query_port_attributes_reply (xcb_connection_t                       *c  /**< */,
d1816 1
a1816 1
                                    xcb_generic_error_t                   **e  /**< */);
d1819 1
a1819 1
xcb_xv_list_image_formats_sizeof (const void  *_buffer  /**< */);
d1830 2
a1831 2
xcb_xv_list_image_formats (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */);
d1845 2
a1846 2
xcb_xv_list_image_formats_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_xv_port_t     port  /**< */);
d1849 1
a1849 1
xcb_xv_list_image_formats_format (const xcb_xv_list_image_formats_reply_t *R  /**< */);
d1852 1
a1852 1
xcb_xv_list_image_formats_format_length (const xcb_xv_list_image_formats_reply_t *R  /**< */);
d1855 1
a1855 1
xcb_xv_list_image_formats_format_iterator (const xcb_xv_list_image_formats_reply_t *R  /**< */);
d1872 1
a1872 1
xcb_xv_list_image_formats_reply (xcb_connection_t                    *c  /**< */,
d1874 1
a1874 1
                                 xcb_generic_error_t                **e  /**< */);
d1877 1
a1877 1
xcb_xv_query_image_attributes_sizeof (const void  *_buffer  /**< */);
d1888 5
a1892 5
xcb_xv_query_image_attributes (xcb_connection_t *c  /**< */,
                               xcb_xv_port_t     port  /**< */,
                               uint32_t          id  /**< */,
                               uint16_t          width  /**< */,
                               uint16_t          height  /**< */);
d1906 5
a1910 5
xcb_xv_query_image_attributes_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_xv_port_t     port  /**< */,
                                         uint32_t          id  /**< */,
                                         uint16_t          width  /**< */,
                                         uint16_t          height  /**< */);
d1913 1
a1913 1
xcb_xv_query_image_attributes_pitches (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1916 1
a1916 1
xcb_xv_query_image_attributes_pitches_length (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1919 1
a1919 1
xcb_xv_query_image_attributes_pitches_end (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1922 1
a1922 1
xcb_xv_query_image_attributes_offsets (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1925 1
a1925 1
xcb_xv_query_image_attributes_offsets_length (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1928 1
a1928 1
xcb_xv_query_image_attributes_offsets_end (const xcb_xv_query_image_attributes_reply_t *R  /**< */);
d1945 1
a1945 1
xcb_xv_query_image_attributes_reply (xcb_connection_t                        *c  /**< */,
d1947 1
a1947 1
                                     xcb_generic_error_t                    **e  /**< */);
d1950 2
a1951 2
xcb_xv_put_image_sizeof (const void  *_buffer  /**< */,
                         uint32_t     data_len  /**< */);
d1965 17
a1981 17
xcb_xv_put_image_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          uint32_t          id  /**< */,
                          int16_t           src_x  /**< */,
                          int16_t           src_y  /**< */,
                          uint16_t          src_w  /**< */,
                          uint16_t          src_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */,
                          uint16_t          width  /**< */,
                          uint16_t          height  /**< */,
                          uint32_t          data_len  /**< */,
                          const uint8_t    *data  /**< */);
d1992 26
a2017 17
xcb_xv_put_image (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  uint32_t          id  /**< */,
                  int16_t           src_x  /**< */,
                  int16_t           src_y  /**< */,
                  uint16_t          src_w  /**< */,
                  uint16_t          src_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */,
                  uint16_t          width  /**< */,
                  uint16_t          height  /**< */,
                  uint32_t          data_len  /**< */,
                  const uint8_t    *data  /**< */);
d2031 18
a2048 18
xcb_xv_shm_put_image_checked (xcb_connection_t *c  /**< */,
                              xcb_xv_port_t     port  /**< */,
                              xcb_drawable_t    drawable  /**< */,
                              xcb_gcontext_t    gc  /**< */,
                              xcb_shm_seg_t     shmseg  /**< */,
                              uint32_t          id  /**< */,
                              uint32_t          offset  /**< */,
                              int16_t           src_x  /**< */,
                              int16_t           src_y  /**< */,
                              uint16_t          src_w  /**< */,
                              uint16_t          src_h  /**< */,
                              int16_t           drw_x  /**< */,
                              int16_t           drw_y  /**< */,
                              uint16_t          drw_w  /**< */,
                              uint16_t          drw_h  /**< */,
                              uint16_t          width  /**< */,
                              uint16_t          height  /**< */,
                              uint8_t           send_event  /**< */);
d2059 18
a2076 18
xcb_xv_shm_put_image (xcb_connection_t *c  /**< */,
                      xcb_xv_port_t     port  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      xcb_gcontext_t    gc  /**< */,
                      xcb_shm_seg_t     shmseg  /**< */,
                      uint32_t          id  /**< */,
                      uint32_t          offset  /**< */,
                      int16_t           src_x  /**< */,
                      int16_t           src_y  /**< */,
                      uint16_t          src_w  /**< */,
                      uint16_t          src_h  /**< */,
                      int16_t           drw_x  /**< */,
                      int16_t           drw_y  /**< */,
                      uint16_t          drw_w  /**< */,
                      uint16_t          drw_h  /**< */,
                      uint16_t          width  /**< */,
                      uint16_t          height  /**< */,
                      uint8_t           send_event  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d25 1
a25 1
  
a847 10

/*****************************************************************************
 **
 ** void xcb_xv_port_next
 ** 
 ** @@param xcb_xv_port_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a859 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_port_end
 ** 
 ** @@param xcb_xv_port_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a870 10

/*****************************************************************************
 **
 ** void xcb_xv_encoding_next
 ** 
 ** @@param xcb_xv_encoding_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a882 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_end
 ** 
 ** @@param xcb_xv_encoding_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a893 10

/*****************************************************************************
 **
 ** void xcb_xv_rational_next
 ** 
 ** @@param xcb_xv_rational_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a905 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_rational_end
 ** 
 ** @@param xcb_xv_rational_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a916 10

/*****************************************************************************
 **
 ** void xcb_xv_format_next
 ** 
 ** @@param xcb_xv_format_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a928 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_format_end
 ** 
 ** @@param xcb_xv_format_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a934 10

/*****************************************************************************
 **
 ** char * xcb_xv_adaptor_info_name
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a937 10

/*****************************************************************************
 **
 ** int xcb_xv_adaptor_info_name_length
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a940 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_adaptor_info_name_end
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a943 10

/*****************************************************************************
 **
 ** xcb_xv_format_t * xcb_xv_adaptor_info_formats
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_xv_format_t *
 **
 *****************************************************************************/
 
a946 10

/*****************************************************************************
 **
 ** int xcb_xv_adaptor_info_formats_length
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a949 10

/*****************************************************************************
 **
 ** xcb_xv_format_iterator_t xcb_xv_adaptor_info_formats_iterator
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_xv_format_iterator_t
 **
 *****************************************************************************/
 
a960 10

/*****************************************************************************
 **
 ** void xcb_xv_adaptor_info_next
 ** 
 ** @@param xcb_xv_adaptor_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a972 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_adaptor_info_end
 ** 
 ** @@param xcb_xv_adaptor_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a978 10

/*****************************************************************************
 **
 ** char * xcb_xv_encoding_info_name
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a981 10

/*****************************************************************************
 **
 ** int xcb_xv_encoding_info_name_length
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a984 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_info_name_end
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a995 10

/*****************************************************************************
 **
 ** void xcb_xv_encoding_info_next
 ** 
 ** @@param xcb_xv_encoding_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1007 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_info_end
 ** 
 ** @@param xcb_xv_encoding_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1013 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_image_pitches
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1016 10

/*****************************************************************************
 **
 ** int xcb_xv_image_pitches_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1019 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_pitches_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1022 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_image_offsets
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1025 10

/*****************************************************************************
 **
 ** int xcb_xv_image_offsets_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1028 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_offsets_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1031 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xv_image_data
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a1034 10

/*****************************************************************************
 **
 ** int xcb_xv_image_data_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1037 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_data_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1048 10

/*****************************************************************************
 **
 ** void xcb_xv_image_next
 ** 
 ** @@param xcb_xv_image_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1060 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_end
 ** 
 ** @@param xcb_xv_image_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1066 10

/*****************************************************************************
 **
 ** char * xcb_xv_attribute_info_name
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a1069 10

/*****************************************************************************
 **
 ** int xcb_xv_attribute_info_name_length
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1072 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_attribute_info_name_end
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1083 10

/*****************************************************************************
 **
 ** void xcb_xv_attribute_info_next
 ** 
 ** @@param xcb_xv_attribute_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1095 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_attribute_info_end
 ** 
 ** @@param xcb_xv_attribute_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1106 10

/*****************************************************************************
 **
 ** void xcb_xv_image_format_info_next
 ** 
 ** @@param xcb_xv_image_format_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1118 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_format_info_end
 ** 
 ** @@param xcb_xv_image_format_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d1128 1
a1128 1
 * 
a1129 10

/*****************************************************************************
 **
 ** xcb_xv_query_extension_cookie_t xcb_xv_query_extension
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xv_query_extension_cookie_t
 **
 *****************************************************************************/
 
d1139 1
a1139 1
 * 
a1143 10

/*****************************************************************************
 **
 ** xcb_xv_query_extension_cookie_t xcb_xv_query_extension_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xv_query_extension_cookie_t
 **
 *****************************************************************************/
 
d1154 1
a1154 1
 * 
a1160 12

/*****************************************************************************
 **
 ** xcb_xv_query_extension_reply_t * xcb_xv_query_extension_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_extension_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_extension_reply_t *
 **
 *****************************************************************************/
 
d1175 1
a1175 1
 * 
a1176 11

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_cookie_t xcb_xv_query_adaptors
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xv_query_adaptors_cookie_t
 **
 *****************************************************************************/
 
d1187 1
a1187 1
 * 
a1191 11

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_cookie_t xcb_xv_query_adaptors_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xv_query_adaptors_cookie_t
 **
 *****************************************************************************/
 
a1195 10

/*****************************************************************************
 **
 ** int xcb_xv_query_adaptors_info_length
 ** 
 ** @@param const xcb_xv_query_adaptors_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1198 10

/*****************************************************************************
 **
 ** xcb_xv_adaptor_info_iterator_t xcb_xv_query_adaptors_info_iterator
 ** 
 ** @@param const xcb_xv_query_adaptors_reply_t *R
 ** @@returns xcb_xv_adaptor_info_iterator_t
 **
 *****************************************************************************/
 
d1209 1
a1209 1
 * 
a1215 12

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_reply_t * xcb_xv_query_adaptors_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_xv_query_adaptors_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_xv_query_adaptors_reply_t *
 **
 *****************************************************************************/
 
d1230 1
a1230 1
 * 
a1231 11

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_cookie_t xcb_xv_query_encodings
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_encodings_cookie_t
 **
 *****************************************************************************/
 
d1242 1
a1242 1
 * 
a1246 11

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_cookie_t xcb_xv_query_encodings_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_encodings_cookie_t
 **
 *****************************************************************************/
 
a1250 10

/*****************************************************************************
 **
 ** int xcb_xv_query_encodings_info_length
 ** 
 ** @@param const xcb_xv_query_encodings_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1253 10

/*****************************************************************************
 **
 ** xcb_xv_encoding_info_iterator_t xcb_xv_query_encodings_info_iterator
 ** 
 ** @@param const xcb_xv_query_encodings_reply_t *R
 ** @@returns xcb_xv_encoding_info_iterator_t
 **
 *****************************************************************************/
 
d1264 1
a1264 1
 * 
a1270 12

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_reply_t * xcb_xv_query_encodings_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_encodings_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_encodings_reply_t *
 **
 *****************************************************************************/
 
d1282 1
a1282 1
 * 
a1283 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_cookie_t xcb_xv_grab_port
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_xv_grab_port_cookie_t
 **
 *****************************************************************************/
 
d1295 1
a1295 1
 * 
a1299 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_cookie_t xcb_xv_grab_port_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_xv_grab_port_cookie_t
 **
 *****************************************************************************/
 
d1312 1
a1312 1
 * 
a1318 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_reply_t * xcb_xv_grab_port_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_xv_grab_port_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_xv_grab_port_reply_t *
 **
 *****************************************************************************/
 
d1330 1
a1330 1
 * 
a1334 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_ungrab_port_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1346 1
a1346 1
 * 
a1347 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_ungrab_port
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1359 1
a1359 1
 * 
a1363 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1384 1
a1384 1
 * 
a1385 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1406 1
a1406 1
 * 
a1410 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_still_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1431 1
a1431 1
 * 
a1432 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_still
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1453 1
a1453 1
 * 
a1457 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1478 1
a1478 1
 * 
a1479 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1500 1
a1500 1
 * 
a1504 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_still_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1525 1
a1525 1
 * 
a1526 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_still
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1547 1
a1547 1
 * 
a1551 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_stop_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1563 1
a1563 1
 * 
a1564 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_stop_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1576 1
a1576 1
 * 
a1580 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_video_notify_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1592 1
a1592 1
 * 
a1593 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_video_notify
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1605 1
a1605 1
 * 
a1609 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_port_notify_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1621 1
a1621 1
 * 
a1622 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_port_notify
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1634 1
a1634 1
 * 
a1635 16

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_cookie_t xcb_xv_query_best_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint8_t           motion
 ** @@returns xcb_xv_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d1651 1
a1651 1
 * 
a1655 16

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_cookie_t xcb_xv_query_best_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint8_t           motion
 ** @@returns xcb_xv_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d1672 1
a1672 1
 * 
a1678 12

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_reply_t * xcb_xv_query_best_size_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_best_size_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_best_size_reply_t *
 **
 *****************************************************************************/
 
d1690 1
a1690 1
 * 
a1694 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_set_port_attribute_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@param int32_t           value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1707 1
a1707 1
 * 
a1708 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_set_port_attribute
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@param int32_t           value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1721 1
a1721 1
 * 
a1722 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_cookie_t xcb_xv_get_port_attribute
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@returns xcb_xv_get_port_attribute_cookie_t
 **
 *****************************************************************************/
 
d1734 1
a1734 1
 * 
a1738 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_cookie_t xcb_xv_get_port_attribute_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@returns xcb_xv_get_port_attribute_cookie_t
 **
 *****************************************************************************/
 
d1751 1
a1751 1
 * 
a1757 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_reply_t * xcb_xv_get_port_attribute_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xv_get_port_attribute_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xv_get_port_attribute_reply_t *
 **
 *****************************************************************************/
 
d1772 1
a1772 1
 * 
a1773 11

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_cookie_t xcb_xv_query_port_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_port_attributes_cookie_t
 **
 *****************************************************************************/
 
d1784 1
a1784 1
 * 
a1788 11

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_cookie_t xcb_xv_query_port_attributes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_port_attributes_cookie_t
 **
 *****************************************************************************/
 
a1792 10

/*****************************************************************************
 **
 ** int xcb_xv_query_port_attributes_attributes_length
 ** 
 ** @@param const xcb_xv_query_port_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1795 10

/*****************************************************************************
 **
 ** xcb_xv_attribute_info_iterator_t xcb_xv_query_port_attributes_attributes_iterator
 ** 
 ** @@param const xcb_xv_query_port_attributes_reply_t *R
 ** @@returns xcb_xv_attribute_info_iterator_t
 **
 *****************************************************************************/
 
d1806 1
a1806 1
 * 
a1812 12

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_reply_t * xcb_xv_query_port_attributes_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_xv_query_port_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_xv_query_port_attributes_reply_t *
 **
 *****************************************************************************/
 
d1827 1
a1827 1
 * 
a1828 11

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_cookie_t xcb_xv_list_image_formats
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_list_image_formats_cookie_t
 **
 *****************************************************************************/
 
d1839 1
a1839 1
 * 
a1843 11

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_cookie_t xcb_xv_list_image_formats_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_list_image_formats_cookie_t
 **
 *****************************************************************************/
 
a1847 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_t * xcb_xv_list_image_formats_format
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns xcb_xv_image_format_info_t *
 **
 *****************************************************************************/
 
a1850 10

/*****************************************************************************
 **
 ** int xcb_xv_list_image_formats_format_length
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1853 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_iterator_t xcb_xv_list_image_formats_format_iterator
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns xcb_xv_image_format_info_iterator_t
 **
 *****************************************************************************/
 
d1864 1
a1864 1
 * 
a1870 12

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_reply_t * xcb_xv_list_image_formats_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xv_list_image_formats_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xv_list_image_formats_reply_t *
 **
 *****************************************************************************/
 
d1885 1
a1885 1
 * 
a1886 14

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_cookie_t xcb_xv_query_image_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint32_t          id
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_xv_query_image_attributes_cookie_t
 **
 *****************************************************************************/
 
d1900 1
a1900 1
 * 
a1904 14

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_cookie_t xcb_xv_query_image_attributes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint32_t          id
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_xv_query_image_attributes_cookie_t
 **
 *****************************************************************************/
 
a1911 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_query_image_attributes_pitches
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1914 10

/*****************************************************************************
 **
 ** int xcb_xv_query_image_attributes_pitches_length
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1917 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_query_image_attributes_pitches_end
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1920 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_query_image_attributes_offsets
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1923 10

/*****************************************************************************
 **
 ** int xcb_xv_query_image_attributes_offsets_length
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1926 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_query_image_attributes_offsets_end
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d1937 1
a1937 1
 * 
a1943 12

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_reply_t * xcb_xv_query_image_attributes_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_xv_query_image_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_xv_query_image_attributes_reply_t *
 **
 *****************************************************************************/
 
d1959 1
a1959 1
 * 
a1963 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          id
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1989 1
a1989 1
 * 
a1990 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          id
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2016 1
a2016 1
 * 
a2020 27

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_shm_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          id
 ** @@param uint32_t          offset
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           send_event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2047 1
a2047 1
 * 
a2048 27

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_shm_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          id
 ** @@param uint32_t          offset
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           send_event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d59 2
a60 2
    XCB_XV_IMAGE_FORMAT_INFO_TYPE_RGB,
    XCB_XV_IMAGE_FORMAT_INFO_TYPE_YUV
d64 2
a65 2
    XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PACKED,
    XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PLANAR
d74 5
a78 5
    XCB_XV_VIDEO_NOTIFY_REASON_STARTED,
    XCB_XV_VIDEO_NOTIFY_REASON_STOPPED,
    XCB_XV_VIDEO_NOTIFY_REASON_BUSY,
    XCB_XV_VIDEO_NOTIFY_REASON_PREEMPTED,
    XCB_XV_VIDEO_NOTIFY_REASON_HARD_ERROR
d82 2
a83 2
    XCB_XV_SCANLINE_ORDER_TOP_TO_BOTTOM,
    XCB_XV_SCANLINE_ORDER_BOTTOM_TO_TOP
d87 6
a92 6
    XCB_XV_GRAB_PORT_STATUS_SUCCESS,
    XCB_XV_GRAB_PORT_STATUS_BAD_EXTENSION,
    XCB_XV_GRAB_PORT_STATUS_ALREADY_GRABBED,
    XCB_XV_GRAB_PORT_STATUS_INVALID_TIME,
    XCB_XV_GRAB_PORT_STATUS_BAD_REPLY,
    XCB_XV_GRAB_PORT_STATUS_BAD_ALLOC
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d1012 3
d1136 3
d1221 3
d1384 3
d1513 1
a1513 1
 * Delivers a request to the X server
d1534 1
a1534 1
 * Delivers a request to the X server
d1588 3
d1592 1
a1592 1
 * Delivers a request to the X server
d1615 1
a1615 1
 * Delivers a request to the X server
d1697 3
d1701 1
a1701 1
 * Delivers a request to the X server
d1724 1
a1724 1
 * Delivers a request to the X server
d1807 1
a1807 1
 * Delivers a request to the X server
d1832 1
a1832 1
 * Delivers a request to the X server
d1891 1
a1891 1
 * Delivers a request to the X server
d1919 1
a1919 1
 * Delivers a request to the X server
d1944 1
a1944 1
 * Delivers a request to the X server
d1990 1
a1990 1
 * Delivers a request to the X server
d2033 1
a2033 1
 * Delivers a request to the X server
d2079 1
a2079 1
 * Delivers a request to the X server
d2122 1
a2122 1
 * Delivers a request to the X server
d2168 1
a2168 1
 * Delivers a request to the X server
d2211 1
a2211 1
 * Delivers a request to the X server
d2257 1
a2257 1
 * Delivers a request to the X server
d2300 1
a2300 1
 * Delivers a request to the X server
d2328 1
a2328 1
 * Delivers a request to the X server
d2353 1
a2353 1
 * Delivers a request to the X server
d2381 1
a2381 1
 * Delivers a request to the X server
d2406 1
a2406 1
 * Delivers a request to the X server
d2434 1
a2434 1
 * Delivers a request to the X server
d2459 1
a2459 1
 * Delivers a request to the X server
d2492 1
a2492 1
 * Delivers a request to the X server
d2559 1
a2559 1
 * Delivers a request to the X server
d2589 1
a2589 1
 * Delivers a request to the X server
d2616 1
a2616 1
 * Delivers a request to the X server
d2641 1
a2641 1
 * Delivers a request to the X server
d2699 3
d2703 1
a2703 1
 * Delivers a request to the X server
d2726 1
a2726 1
 * Delivers a request to the X server
d2808 3
d2812 1
a2812 1
 * Delivers a request to the X server
d2835 1
a2835 1
 * Delivers a request to the X server
d2930 3
d2934 1
a2934 1
 * Delivers a request to the X server
d2963 1
a2963 1
 * Delivers a request to the X server
d3103 4
d3108 1
a3108 1
 * Delivers a request to the X server
d3164 1
a3164 1
 * Delivers a request to the X server
d3217 1
a3217 1
 * Delivers a request to the X server
d3275 1
a3275 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@d73 22
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
