head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.06;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xinput.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xinput.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xfixes.h"

xcb_extension_t xcb_input_id = { "XInputExtension", 0 };

void
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_event_class_t);
}

xcb_generic_iterator_t
xcb_input_event_class_end (xcb_input_event_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_key_code_next (xcb_input_key_code_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_key_code_t);
}

xcb_generic_iterator_t
xcb_input_key_code_end (xcb_input_key_code_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_id_next (xcb_input_device_id_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_id_t);
}

xcb_generic_iterator_t
xcb_input_device_id_end (xcb_input_device_id_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_fp1616_next (xcb_input_fp1616_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_fp1616_t);
}

xcb_generic_iterator_t
xcb_input_fp1616_end (xcb_input_fp1616_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_fp3232_next (xcb_input_fp3232_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_fp3232_t);
}

xcb_generic_iterator_t
xcb_input_fp3232_end (xcb_input_fp3232_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_get_extension_version_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_extension_version_request_t *_aux = (xcb_input_get_extension_version_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_extension_version_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version (xcb_connection_t *c,
                                 uint16_t          name_len,
                                 const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_EXTENSION_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_get_extension_version_cookie_t xcb_ret;
    xcb_input_get_extension_version_request_t xcb_out;

    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_extension_version_cookie_t
xcb_input_get_extension_version_unchecked (xcb_connection_t *c,
                                           uint16_t          name_len,
                                           const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_EXTENSION_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_get_extension_version_cookie_t xcb_ret;
    xcb_input_get_extension_version_request_t xcb_out;

    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_extension_version_reply_t *
xcb_input_get_extension_version_reply (xcb_connection_t                          *c,
                                       xcb_input_get_extension_version_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_input_get_extension_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_device_info_next (xcb_input_device_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_info_t);
}

xcb_generic_iterator_t
xcb_input_device_info_end (xcb_input_device_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_key_info_t);
}

xcb_generic_iterator_t
xcb_input_key_info_end (xcb_input_key_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_button_info_t);
}

xcb_generic_iterator_t
xcb_input_button_info_end (xcb_input_button_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_axis_info_t);
}

xcb_generic_iterator_t
xcb_input_axis_info_end (xcb_input_axis_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_valuator_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_valuator_info_t *_aux = (xcb_input_valuator_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_valuator_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* axes */
    xcb_block_len += _aux->axes_len * sizeof(xcb_input_axis_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_axis_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_axis_info_t *
xcb_input_valuator_info_axes (const xcb_input_valuator_info_t *R)
{
    return (xcb_input_axis_info_t *) (R + 1);
}

int
xcb_input_valuator_info_axes_length (const xcb_input_valuator_info_t *R)
{
    return R->axes_len;
}

xcb_input_axis_info_iterator_t
xcb_input_valuator_info_axes_iterator (const xcb_input_valuator_info_t *R)
{
    xcb_input_axis_info_iterator_t i;
    i.data = (xcb_input_axis_info_t *) (R + 1);
    i.rem = R->axes_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_valuator_info_next (xcb_input_valuator_info_iterator_t *i)
{
    xcb_input_valuator_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_valuator_info_t *)(((char *)R) + xcb_input_valuator_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_valuator_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_valuator_info_end (xcb_input_valuator_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_valuator_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

xcb_input_axis_info_t *
xcb_input_input_info_info_valuator_axes (const xcb_input_input_info_info_t *S)
{
    return S->valuator.axes;
}

int
xcb_input_input_info_info_valuator_axes_length (const xcb_input_input_info_t *R,
                                                const xcb_input_input_info_info_t *S)
{
    return S->valuator.axes_len;
}

xcb_input_axis_info_iterator_t
xcb_input_input_info_info_valuator_axes_iterator (const xcb_input_input_info_t *R,
                                                  const xcb_input_input_info_info_t *S)
{
    xcb_input_axis_info_iterator_t i;
    i.data = S->valuator.axes;
    i.rem = S->valuator.axes_len;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_input_info_info_serialize (void                              **_buffer,
                                     uint8_t                             class_id,
                                     const xcb_input_input_info_info_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[11];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(class_id == XCB_INPUT_INPUT_CLASS_KEY) {
        /* xcb_input_input_info_info_t.key.min_keycode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key.min_keycode;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_key_code_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_input_info_info_t.key.max_keycode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key.max_keycode;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_key_code_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_input_info_info_t.key.num_keys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key.num_keys;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_input_info_info_t.key.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_BUTTON) {
        /* xcb_input_input_info_info_t.button.num_buttons */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->button.num_buttons;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_VALUATOR) {
        /* xcb_input_input_info_info_t.valuator.axes_len */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.axes_len;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_info_info_t.valuator.mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_info_info_t.valuator.motion_size */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.motion_size;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* axes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->valuator.axes;
        xcb_block_len += _aux->valuator.axes_len * sizeof(xcb_input_axis_info_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->valuator.axes_len * sizeof(xcb_input_axis_info_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_axis_info_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_input_info_info_unpack (const void                   *_buffer,
                                  uint8_t                       class_id,
                                  xcb_input_input_info_info_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;


    if(class_id == XCB_INPUT_INPUT_CLASS_KEY) {
        /* xcb_input_input_info_info_t.key.min_keycode */
        _aux->key.min_keycode = *(xcb_input_key_code_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_tmp += sizeof(xcb_input_key_code_t);
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_input_info_info_t.key.max_keycode */
        _aux->key.max_keycode = *(xcb_input_key_code_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_tmp += sizeof(xcb_input_key_code_t);
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_input_info_info_t.key.num_keys */
        _aux->key.num_keys = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_input_info_info_t.key.pad0 */
        _aux->key.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->key.pad0[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_BUTTON) {
        /* xcb_input_input_info_info_t.button.num_buttons */
        _aux->button.num_buttons = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_VALUATOR) {
        /* xcb_input_input_info_info_t.valuator.axes_len */
        _aux->valuator.axes_len = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_info_info_t.valuator.mode */
        _aux->valuator.mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_info_info_t.valuator.motion_size */
        _aux->valuator.motion_size = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* axes */
        _aux->valuator.axes = (xcb_input_axis_info_t *)xcb_tmp;
        xcb_block_len += _aux->valuator.axes_len * sizeof(xcb_input_axis_info_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_input_axis_info_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_input_info_info_sizeof (const void  *_buffer,
                                  uint8_t      class_id)
{
    xcb_input_input_info_info_t _aux;
    return xcb_input_input_info_info_unpack(_buffer, class_id, &_aux);
}

int
xcb_input_input_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_input_info_t *_aux = (xcb_input_input_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_input_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* info */
    xcb_block_len += xcb_input_input_info_info_sizeof(xcb_tmp, _aux->class_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_input_info_info (const xcb_input_input_info_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i)
{
    xcb_input_input_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_input_info_t *)(((char *)R) + xcb_input_input_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_input_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_input_info_end (xcb_input_input_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_input_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_device_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_name_t *_aux = (xcb_input_device_name_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_name_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_input_device_name_string (const xcb_input_device_name_t *R)
{
    return (char *) (R + 1);
}

int
xcb_input_device_name_string_length (const xcb_input_device_name_t *R)
{
    return R->len;
}

xcb_generic_iterator_t
xcb_input_device_name_string_end (const xcb_input_device_name_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_device_name_next (xcb_input_device_name_iterator_t *i)
{
    xcb_input_device_name_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_name_t *)(((char *)R) + xcb_input_device_name_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_name_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_name_end (xcb_input_device_name_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_name_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_list_input_devices_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_list_input_devices_reply_t *_aux = (xcb_input_list_input_devices_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const xcb_input_device_info_t* xcb_pre_tmp_4; /* sumof list ptr */
    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_list_input_devices_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* devices */
    xcb_block_len += _aux->devices_len * sizeof(xcb_input_device_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_device_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* infos */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->devices_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_list_input_devices_devices(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        xcb_pre_tmp_3 += xcb_pre_tmp_4->num_class_info;
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    for(i=0; i<xcb_pre_tmp_3; i++) {
        xcb_tmp_len = xcb_input_input_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_input_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* names */
    for(i=0; i<_aux->devices_len; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_str_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_LIST_INPUT_DEVICES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_list_input_devices_cookie_t xcb_ret;
    xcb_input_list_input_devices_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_LIST_INPUT_DEVICES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_list_input_devices_cookie_t xcb_ret;
    xcb_input_list_input_devices_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_device_info_t *
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R)
{
    return (xcb_input_device_info_t *) (R + 1);
}

int
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R)
{
    return R->devices_len;
}

xcb_input_device_info_iterator_t
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R)
{
    xcb_input_device_info_iterator_t i;
    i.data = (xcb_input_device_info_t *) (R + 1);
    i.rem = R->devices_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_list_input_devices_infos_length (const xcb_input_list_input_devices_reply_t *R)
{
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const xcb_input_device_info_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->devices_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_list_input_devices_devices(R);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        xcb_pre_tmp_7 += xcb_pre_tmp_8->num_class_info;
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    return xcb_pre_tmp_7;
}

xcb_input_input_info_iterator_t
xcb_input_list_input_devices_infos_iterator (const xcb_input_list_input_devices_reply_t *R)
{
    xcb_input_input_info_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_device_info_end(xcb_input_list_input_devices_devices_iterator(R));
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const xcb_input_device_info_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->devices_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_list_input_devices_devices(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        xcb_pre_tmp_11 += xcb_pre_tmp_12->num_class_info;
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    i.data = (xcb_input_input_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_input_info_t, prev.index));
    i.rem = xcb_pre_tmp_11;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_list_input_devices_names_length (const xcb_input_list_input_devices_reply_t *R)
{
    return R->devices_len;
}

xcb_str_iterator_t
xcb_input_list_input_devices_names_iterator (const xcb_input_list_input_devices_reply_t *R)
{
    xcb_str_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_input_info_end(xcb_input_list_input_devices_infos_iterator(R));
    i.data = (xcb_str_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_str_t, prev.index));
    i.rem = R->devices_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_list_input_devices_reply_t *
xcb_input_list_input_devices_reply (xcb_connection_t                       *c,
                                    xcb_input_list_input_devices_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_input_list_input_devices_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_input_class_info_t);
}

xcb_generic_iterator_t
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_open_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_open_device_reply_t *_aux = (xcb_input_open_device_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_open_device_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* class_info */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_input_class_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_input_class_info_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_open_device_cookie_t
xcb_input_open_device (xcb_connection_t *c,
                       uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_OPEN_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_open_device_cookie_t xcb_ret;
    xcb_input_open_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_open_device_cookie_t
xcb_input_open_device_unchecked (xcb_connection_t *c,
                                 uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_OPEN_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_open_device_cookie_t xcb_ret;
    xcb_input_open_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_input_class_info_t *
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R)
{
    return (xcb_input_input_class_info_t *) (R + 1);
}

int
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R)
{
    return R->num_classes;
}

xcb_input_input_class_info_iterator_t
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R)
{
    xcb_input_input_class_info_iterator_t i;
    i.data = (xcb_input_input_class_info_t *) (R + 1);
    i.rem = R->num_classes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_open_device_reply_t *
xcb_input_open_device_reply (xcb_connection_t                *c,
                             xcb_input_open_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_input_open_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_close_device_checked (xcb_connection_t *c,
                                uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CLOSE_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_close_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_close_device (xcb_connection_t *c,
                        uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CLOSE_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_close_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode (xcb_connection_t *c,
                           uint8_t           device_id,
                           uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_set_device_mode_cookie_t xcb_ret;
    xcb_input_set_device_mode_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode_unchecked (xcb_connection_t *c,
                                     uint8_t           device_id,
                                     uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_set_device_mode_cookie_t xcb_ret;
    xcb_input_set_device_mode_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_mode_reply_t *
xcb_input_set_device_mode_reply (xcb_connection_t                    *c,
                                 xcb_input_set_device_mode_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_input_set_device_mode_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_select_extension_event_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_select_extension_event_request_t *_aux = (xcb_input_select_extension_event_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_select_extension_event_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_select_extension_event_checked (xcb_connection_t              *c,
                                          xcb_window_t                   window,
                                          uint16_t                       num_classes,
                                          const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SELECT_EXTENSION_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_select_extension_event_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_select_extension_event (xcb_connection_t              *c,
                                  xcb_window_t                   window,
                                  uint16_t                       num_classes,
                                  const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SELECT_EXTENSION_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_select_extension_event_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_select_extension_event_classes (const xcb_input_select_extension_event_request_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_select_extension_event_classes_length (const xcb_input_select_extension_event_request_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_select_extension_event_classes_end (const xcb_input_select_extension_event_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_selected_extension_events_reply_t *_aux = (xcb_input_get_selected_extension_events_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_selected_extension_events_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* this_classes */
    xcb_block_len += _aux->num_this_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* all_classes */
    xcb_block_len += _aux->num_all_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events (xcb_connection_t *c,
                                         xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_selected_extension_events_cookie_t xcb_ret;
    xcb_input_get_selected_extension_events_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c,
                                                   xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_selected_extension_events_cookie_t xcb_ret;
    xcb_input_get_selected_extension_events_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R)
{
    return R->num_this_classes;
}

xcb_generic_iterator_t
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_this_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_event_class_t *
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_get_selected_extension_events_this_classes_end(R);
    return (xcb_input_event_class_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_event_class_t, prev.index) + 0);
}

int
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R)
{
    return R->num_all_classes;
}

xcb_generic_iterator_t
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_get_selected_extension_events_this_classes_end(R);
    i.data = ((xcb_input_event_class_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_input_event_class_t, prev.index))) + (R->num_all_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_selected_extension_events_reply_t *
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c,
                                               xcb_input_get_selected_extension_events_cookie_t   cookie  /**< */,
                                               xcb_generic_error_t                              **e)
{
    return (xcb_input_get_selected_extension_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_change_device_dont_propagate_list_request_t *_aux = (xcb_input_change_device_dont_propagate_list_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_change_device_dont_propagate_list_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c,
                                                     xcb_window_t                   window,
                                                     uint16_t                       num_classes,
                                                     uint8_t                        mode,
                                                     const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_dont_propagate_list_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c,
                                             xcb_window_t                   window,
                                             uint16_t                       num_classes,
                                             uint8_t                        mode,
                                             const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_dont_propagate_list_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_change_device_dont_propagate_list_classes (const xcb_input_change_device_dont_propagate_list_request_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_change_device_dont_propagate_list_classes_length (const xcb_input_change_device_dont_propagate_list_request_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_change_device_dont_propagate_list_classes_end (const xcb_input_change_device_dont_propagate_list_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_dont_propagate_list_reply_t *_aux = (xcb_input_get_device_dont_propagate_list_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_dont_propagate_list_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c,
                                          xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_dont_propagate_list_cookie_t xcb_ret;
    xcb_input_get_device_dont_propagate_list_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c,
                                                    xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_dont_propagate_list_cookie_t xcb_ret;
    xcb_input_get_device_dont_propagate_list_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_device_dont_propagate_list_reply_t *
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c,
                                                xcb_input_get_device_dont_propagate_list_cookie_t   cookie  /**< */,
                                                xcb_generic_error_t                               **e)
{
    return (xcb_input_get_device_dont_propagate_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_device_time_coord_sizeof (const void  *_buffer,
                                    uint8_t      num_axes)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_time_coord_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* axisvalues */
    xcb_block_len += num_axes * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int32_t *
xcb_input_device_time_coord_axisvalues (const xcb_input_device_time_coord_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_input_device_time_coord_axisvalues_length (const xcb_input_device_time_coord_t *R,
                                               uint8_t num_axes)
{
    return num_axes;
}

xcb_generic_iterator_t
xcb_input_device_time_coord_axisvalues_end (const xcb_input_device_time_coord_t *R,
                                            uint8_t num_axes)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (num_axes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i)
{
    xcb_input_device_time_coord_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_time_coord_t *)(((char *)R) + xcb_input_device_time_coord_sizeof(R, i->num_axes));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_time_coord_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_time_coord_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_get_device_motion_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_motion_events_reply_t *_aux = (xcb_input_get_device_motion_events_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_get_device_motion_events_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* events */
    for(i=0; i<_aux->num_events; i++) {
        xcb_tmp_len = xcb_input_device_time_coord_sizeof(xcb_tmp, _aux->num_axes);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_device_time_coord_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events (xcb_connection_t *c,
                                    xcb_timestamp_t   start,
                                    xcb_timestamp_t   stop,
                                    uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_motion_events_cookie_t xcb_ret;
    xcb_input_get_device_motion_events_request_t xcb_out;

    xcb_out.start = start;
    xcb_out.stop = stop;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c,
                                              xcb_timestamp_t   start,
                                              xcb_timestamp_t   stop,
                                              uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_motion_events_cookie_t xcb_ret;
    xcb_input_get_device_motion_events_request_t xcb_out;

    xcb_out.start = start;
    xcb_out.stop = stop;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_get_device_motion_events_events_length (const xcb_input_get_device_motion_events_reply_t *R)
{
    return R->num_events;
}

xcb_input_device_time_coord_iterator_t
xcb_input_get_device_motion_events_events_iterator (const xcb_input_get_device_motion_events_reply_t *R)
{
    xcb_input_device_time_coord_iterator_t i;
    i.data = (xcb_input_device_time_coord_t *) (R + 1);
    i.rem = R->num_events;
    i.index = (char *) i.data - (char *) R;
    i.num_axes = R->num_axes;
    return i;
}

xcb_input_get_device_motion_events_reply_t *
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c,
                                          xcb_input_get_device_motion_events_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e)
{
    return (xcb_input_get_device_motion_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device (xcb_connection_t *c,
                                  uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_change_keyboard_device_cookie_t xcb_ret;
    xcb_input_change_keyboard_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c,
                                            uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_change_keyboard_device_cookie_t xcb_ret;
    xcb_input_change_keyboard_device_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_keyboard_device_reply_t *
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c,
                                        xcb_input_change_keyboard_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_input_change_keyboard_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device (xcb_connection_t *c,
                                 uint8_t           x_axis,
                                 uint8_t           y_axis,
                                 uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_POINTER_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_change_pointer_device_cookie_t xcb_ret;
    xcb_input_change_pointer_device_request_t xcb_out;

    xcb_out.x_axis = x_axis;
    xcb_out.y_axis = y_axis;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c,
                                           uint8_t           x_axis,
                                           uint8_t           y_axis,
                                           uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_POINTER_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_change_pointer_device_cookie_t xcb_ret;
    xcb_input_change_pointer_device_request_t xcb_out;

    xcb_out.x_axis = x_axis;
    xcb_out.y_axis = y_axis;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_pointer_device_reply_t *
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c,
                                       xcb_input_change_pointer_device_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_input_change_pointer_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_grab_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_grab_device_request_t *_aux = (xcb_input_grab_device_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_grab_device_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_grab_device_cookie_t
xcb_input_grab_device (xcb_connection_t              *c,
                       xcb_window_t                   grab_window,
                       xcb_timestamp_t                time,
                       uint16_t                       num_classes,
                       uint8_t                        this_device_mode,
                       uint8_t                        other_device_mode,
                       uint8_t                        owner_events,
                       uint8_t                        device_id,
                       const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_grab_device_cookie_t xcb_ret;
    xcb_input_grab_device_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.num_classes = num_classes;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_grab_device_cookie_t
xcb_input_grab_device_unchecked (xcb_connection_t              *c,
                                 xcb_window_t                   grab_window,
                                 xcb_timestamp_t                time,
                                 uint16_t                       num_classes,
                                 uint8_t                        this_device_mode,
                                 uint8_t                        other_device_mode,
                                 uint8_t                        owner_events,
                                 uint8_t                        device_id,
                                 const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_grab_device_cookie_t xcb_ret;
    xcb_input_grab_device_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.num_classes = num_classes;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_grab_device_reply_t *
xcb_input_grab_device_reply (xcb_connection_t                *c,
                             xcb_input_grab_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_input_grab_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_ungrab_device_checked (xcb_connection_t *c,
                                 xcb_timestamp_t   time,
                                 uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_ungrab_device (xcb_connection_t *c,
                         xcb_timestamp_t   time,
                         uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_grab_device_key_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_grab_device_key_request_t *_aux = (xcb_input_grab_device_key_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_grab_device_key_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_grab_device_key_checked (xcb_connection_t              *c,
                                   xcb_window_t                   grab_window,
                                   uint16_t                       num_classes,
                                   uint16_t                       modifiers,
                                   uint8_t                        modifier_device,
                                   uint8_t                        grabbed_device,
                                   uint8_t                        key,
                                   uint8_t                        this_device_mode,
                                   uint8_t                        other_device_mode,
                                   uint8_t                        owner_events,
                                   const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_key_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.key = key;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_grab_device_key (xcb_connection_t              *c,
                           xcb_window_t                   grab_window,
                           uint16_t                       num_classes,
                           uint16_t                       modifiers,
                           uint8_t                        modifier_device,
                           uint8_t                        grabbed_device,
                           uint8_t                        key,
                           uint8_t                        this_device_mode,
                           uint8_t                        other_device_mode,
                           uint8_t                        owner_events,
                           const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_key_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.key = key;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_grab_device_key_classes (const xcb_input_grab_device_key_request_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_grab_device_key_classes_length (const xcb_input_grab_device_key_request_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_grab_device_key_classes_end (const xcb_input_grab_device_key_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_input_ungrab_device_key_checked (xcb_connection_t *c,
                                     xcb_window_t      grabWindow,
                                     uint16_t          modifiers,
                                     uint8_t           modifier_device,
                                     uint8_t           key,
                                     uint8_t           grabbed_device)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_key_request_t xcb_out;

    xcb_out.grabWindow = grabWindow;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.key = key;
    xcb_out.grabbed_device = grabbed_device;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_ungrab_device_key (xcb_connection_t *c,
                             xcb_window_t      grabWindow,
                             uint16_t          modifiers,
                             uint8_t           modifier_device,
                             uint8_t           key,
                             uint8_t           grabbed_device)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_key_request_t xcb_out;

    xcb_out.grabWindow = grabWindow;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.key = key;
    xcb_out.grabbed_device = grabbed_device;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_grab_device_button_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_grab_device_button_request_t *_aux = (xcb_input_grab_device_button_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_grab_device_button_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_grab_device_button_checked (xcb_connection_t              *c,
                                      xcb_window_t                   grab_window,
                                      uint8_t                        grabbed_device,
                                      uint8_t                        modifier_device,
                                      uint16_t                       num_classes,
                                      uint16_t                       modifiers,
                                      uint8_t                        this_device_mode,
                                      uint8_t                        other_device_mode,
                                      uint8_t                        button,
                                      uint8_t                        owner_events,
                                      const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_button_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.modifier_device = modifier_device;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.button = button;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_grab_device_button (xcb_connection_t              *c,
                              xcb_window_t                   grab_window,
                              uint8_t                        grabbed_device,
                              uint8_t                        modifier_device,
                              uint16_t                       num_classes,
                              uint16_t                       modifiers,
                              uint8_t                        this_device_mode,
                              uint8_t                        other_device_mode,
                              uint8_t                        button,
                              uint8_t                        owner_events,
                              const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GRAB_DEVICE_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_button_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.modifier_device = modifier_device;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.button = button;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_event_class_t *
xcb_input_grab_device_button_classes (const xcb_input_grab_device_button_request_t *R)
{
    return (xcb_input_event_class_t *) (R + 1);
}

int
xcb_input_grab_device_button_classes_length (const xcb_input_grab_device_button_request_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_grab_device_button_classes_end (const xcb_input_grab_device_button_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_input_ungrab_device_button_checked (xcb_connection_t *c,
                                        xcb_window_t      grab_window,
                                        uint16_t          modifiers,
                                        uint8_t           modifier_device,
                                        uint8_t           button,
                                        uint8_t           grabbed_device)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_button_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.button = button;
    xcb_out.grabbed_device = grabbed_device;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_ungrab_device_button (xcb_connection_t *c,
                                xcb_window_t      grab_window,
                                uint16_t          modifiers,
                                uint8_t           modifier_device,
                                uint8_t           button,
                                uint8_t           grabbed_device)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_UNGRAB_DEVICE_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_button_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.button = button;
    xcb_out.grabbed_device = grabbed_device;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_allow_device_events_checked (xcb_connection_t *c,
                                       xcb_timestamp_t   time,
                                       uint8_t           mode,
                                       uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_ALLOW_DEVICE_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_allow_device_events_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.mode = mode;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_allow_device_events (xcb_connection_t *c,
                               xcb_timestamp_t   time,
                               uint8_t           mode,
                               uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_ALLOW_DEVICE_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_allow_device_events_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.mode = mode;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus (xcb_connection_t *c,
                            uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_focus_cookie_t xcb_ret;
    xcb_input_get_device_focus_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus_unchecked (xcb_connection_t *c,
                                      uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_focus_cookie_t xcb_ret;
    xcb_input_get_device_focus_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_focus_reply_t *
xcb_input_get_device_focus_reply (xcb_connection_t                     *c,
                                  xcb_input_get_device_focus_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_input_get_device_focus_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_set_device_focus_checked (xcb_connection_t *c,
                                    xcb_window_t      focus,
                                    xcb_timestamp_t   time,
                                    uint8_t           revert_to,
                                    uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_set_device_focus_request_t xcb_out;

    xcb_out.focus = focus;
    xcb_out.time = time;
    xcb_out.revert_to = revert_to;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_set_device_focus (xcb_connection_t *c,
                            xcb_window_t      focus,
                            xcb_timestamp_t   time,
                            uint8_t           revert_to,
                            uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_set_device_focus_request_t xcb_out;

    xcb_out.focus = focus;
    xcb_out.time = time;
    xcb_out.revert_to = revert_to;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_kbd_feedback_state_t);
}

xcb_generic_iterator_t
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_ptr_feedback_state_t);
}

xcb_generic_iterator_t
xcb_input_ptr_feedback_state_end (xcb_input_ptr_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_integer_feedback_state_next (xcb_input_integer_feedback_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_integer_feedback_state_t);
}

xcb_generic_iterator_t
xcb_input_integer_feedback_state_end (xcb_input_integer_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_string_feedback_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_string_feedback_state_t *_aux = (xcb_input_string_feedback_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_string_feedback_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += _aux->num_keysyms * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_keysym_t *
xcb_input_string_feedback_state_keysyms (const xcb_input_string_feedback_state_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_input_string_feedback_state_keysyms_length (const xcb_input_string_feedback_state_t *R)
{
    return R->num_keysyms;
}

xcb_generic_iterator_t
xcb_input_string_feedback_state_keysyms_end (const xcb_input_string_feedback_state_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->num_keysyms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_string_feedback_state_next (xcb_input_string_feedback_state_iterator_t *i)
{
    xcb_input_string_feedback_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_string_feedback_state_t *)(((char *)R) + xcb_input_string_feedback_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_string_feedback_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_string_feedback_state_end (xcb_input_string_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_string_feedback_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_bell_feedback_state_next (xcb_input_bell_feedback_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_bell_feedback_state_t);
}

xcb_generic_iterator_t
xcb_input_bell_feedback_state_end (xcb_input_bell_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_led_feedback_state_next (xcb_input_led_feedback_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_led_feedback_state_t);
}

xcb_generic_iterator_t
xcb_input_led_feedback_state_end (xcb_input_led_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_keysym_t *
xcb_input_feedback_state_data_string_keysyms (const xcb_input_feedback_state_data_t *S)
{
    return S->string.keysyms;
}

int
xcb_input_feedback_state_data_string_keysyms_length (const xcb_input_feedback_state_t *R,
                                                     const xcb_input_feedback_state_data_t *S)
{
    return S->string.num_keysyms;
}

xcb_generic_iterator_t
xcb_input_feedback_state_data_string_keysyms_end (const xcb_input_feedback_state_t *R,
                                                  const xcb_input_feedback_state_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->string.keysyms + S->string.num_keysyms;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_feedback_state_data_serialize (void                                  **_buffer,
                                         uint8_t                                 class_id,
                                         const xcb_input_feedback_state_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[27];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(class_id == XCB_INPUT_FEEDBACK_CLASS_KEYBOARD) {
        /* xcb_input_feedback_state_data_t.keyboard.pitch */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.pitch;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.keyboard.duration */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.duration;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.keyboard.led_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.led_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.keyboard.led_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.led_values;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.keyboard.global_auto_repeat */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.global_auto_repeat;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.click */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.click;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.percent;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.auto_repeats */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyboard.auto_repeats;
        xcb_block_len += 32;
        xcb_parts[xcb_parts_idx].iov_len = 32;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_POINTER) {
        /* xcb_input_feedback_state_data_t.pointer.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.pointer.accel_num */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.accel_num;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.pointer.accel_denom */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.accel_denom;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.pointer.threshold */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.threshold;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_STRING) {
        /* xcb_input_feedback_state_data_t.string.max_symbols */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->string.max_symbols;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.string.num_keysyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->string.num_keysyms;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keysyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->string.keysyms;
        xcb_block_len += _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keysym_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_INTEGER) {
        /* xcb_input_feedback_state_data_t.integer.resolution */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->integer.resolution;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.integer.min_value */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->integer.min_value;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_feedback_state_data_t.integer.max_value */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->integer.max_value;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_LED) {
        /* xcb_input_feedback_state_data_t.led.led_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led.led_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.led.led_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led.led_values;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_BELL) {
        /* xcb_input_feedback_state_data_t.bell.percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.percent;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.bell.pad2 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.bell.pitch */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.pitch;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.bell.duration */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.duration;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_feedback_state_data_unpack (const void                       *_buffer,
                                      uint8_t                           class_id,
                                      xcb_input_feedback_state_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(class_id == XCB_INPUT_FEEDBACK_CLASS_KEYBOARD) {
        /* xcb_input_feedback_state_data_t.keyboard.pitch */
        _aux->keyboard.pitch = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.keyboard.duration */
        _aux->keyboard.duration = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.keyboard.led_mask */
        _aux->keyboard.led_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.keyboard.led_values */
        _aux->keyboard.led_values = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.keyboard.global_auto_repeat */
        _aux->keyboard.global_auto_repeat = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.click */
        _aux->keyboard.click = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.percent */
        _aux->keyboard.percent = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.pad0 */
        _aux->keyboard.pad0 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.keyboard.auto_repeats */
        memcpy(_aux->keyboard.auto_repeats, xcb_tmp, sizeof(uint8_t) * 32);
        xcb_block_len += sizeof(uint8_t) * 32;
        xcb_tmp += sizeof(uint8_t) * 32;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_POINTER) {
        /* xcb_input_feedback_state_data_t.pointer.pad1 */
        _aux->pointer.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->pointer.pad1[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.pointer.accel_num */
        _aux->pointer.accel_num = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.pointer.accel_denom */
        _aux->pointer.accel_denom = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.pointer.threshold */
        _aux->pointer.threshold = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_STRING) {
        /* xcb_input_feedback_state_data_t.string.max_symbols */
        _aux->string.max_symbols = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.string.num_keysyms */
        _aux->string.num_keysyms = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keysyms */
        _aux->string.keysyms = (xcb_keysym_t *)xcb_tmp;
        xcb_block_len += _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_keysym_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_INTEGER) {
        /* xcb_input_feedback_state_data_t.integer.resolution */
        _aux->integer.resolution = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.integer.min_value */
        _aux->integer.min_value = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_feedback_state_data_t.integer.max_value */
        _aux->integer.max_value = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_LED) {
        /* xcb_input_feedback_state_data_t.led.led_mask */
        _aux->led.led_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_state_data_t.led.led_values */
        _aux->led.led_values = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_BELL) {
        /* xcb_input_feedback_state_data_t.bell.percent */
        _aux->bell.percent = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.bell.pad2 */
        _aux->bell.pad2[0] = *(uint8_t *)xcb_tmp;
        _aux->bell.pad2[1] = *(uint8_t *)xcb_tmp;
        _aux->bell.pad2[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_state_data_t.bell.pitch */
        _aux->bell.pitch = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_feedback_state_data_t.bell.duration */
        _aux->bell.duration = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_feedback_state_data_sizeof (const void  *_buffer,
                                      uint8_t      class_id)
{
    xcb_input_feedback_state_data_t _aux;
    return xcb_input_feedback_state_data_unpack(_buffer, class_id, &_aux);
}

int
xcb_input_feedback_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_feedback_state_t *_aux = (xcb_input_feedback_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_feedback_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_feedback_state_data_sizeof(xcb_tmp, _aux->class_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_feedback_state_data (const xcb_input_feedback_state_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i)
{
    xcb_input_feedback_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_feedback_state_t *)(((char *)R) + xcb_input_feedback_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_feedback_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_feedback_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_get_feedback_control_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_feedback_control_reply_t *_aux = (xcb_input_get_feedback_control_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_get_feedback_control_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* feedbacks */
    for(i=0; i<_aux->num_feedbacks; i++) {
        xcb_tmp_len = xcb_input_feedback_state_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_feedback_state_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control (xcb_connection_t *c,
                                uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_FEEDBACK_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_feedback_control_cookie_t xcb_ret;
    xcb_input_get_feedback_control_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c,
                                          uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_FEEDBACK_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_feedback_control_cookie_t xcb_ret;
    xcb_input_get_feedback_control_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_get_feedback_control_feedbacks_length (const xcb_input_get_feedback_control_reply_t *R)
{
    return R->num_feedbacks;
}

xcb_input_feedback_state_iterator_t
xcb_input_get_feedback_control_feedbacks_iterator (const xcb_input_get_feedback_control_reply_t *R)
{
    xcb_input_feedback_state_iterator_t i;
    i.data = (xcb_input_feedback_state_t *) (R + 1);
    i.rem = R->num_feedbacks;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_feedback_control_reply_t *
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c,
                                      xcb_input_get_feedback_control_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_input_get_feedback_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_kbd_feedback_ctl_t);
}

xcb_generic_iterator_t
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_ptr_feedback_ctl_t);
}

xcb_generic_iterator_t
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_integer_feedback_ctl_t);
}

xcb_generic_iterator_t
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_string_feedback_ctl_t *_aux = (xcb_input_string_feedback_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_string_feedback_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += _aux->num_keysyms * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_keysym_t *
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R)
{
    return R->num_keysyms;
}

xcb_generic_iterator_t
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->num_keysyms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i)
{
    xcb_input_string_feedback_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_string_feedback_ctl_t *)(((char *)R) + xcb_input_string_feedback_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_string_feedback_ctl_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_string_feedback_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_bell_feedback_ctl_t);
}

xcb_generic_iterator_t
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_led_feedback_ctl_t);
}

xcb_generic_iterator_t
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_keysym_t *
xcb_input_feedback_ctl_data_string_keysyms (const xcb_input_feedback_ctl_data_t *S)
{
    return S->string.keysyms;
}

int
xcb_input_feedback_ctl_data_string_keysyms_length (const xcb_input_feedback_ctl_t *R,
                                                   const xcb_input_feedback_ctl_data_t *S)
{
    return S->string.num_keysyms;
}

xcb_generic_iterator_t
xcb_input_feedback_ctl_data_string_keysyms_end (const xcb_input_feedback_ctl_t *R,
                                                const xcb_input_feedback_ctl_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->string.keysyms + S->string.num_keysyms;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_feedback_ctl_data_serialize (void                                **_buffer,
                                       uint8_t                               class_id,
                                       const xcb_input_feedback_ctl_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[24];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(class_id == XCB_INPUT_FEEDBACK_CLASS_KEYBOARD) {
        /* xcb_input_feedback_ctl_data_t.keyboard.key */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.key;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_key_code_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.auto_repeat_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.auto_repeat_mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.key_click_percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.key_click_percent;
        xcb_block_len += sizeof(int8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.bell_percent;
        xcb_block_len += sizeof(int8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_pitch */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.bell_pitch;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_duration */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.bell_duration;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.led_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.led_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.led_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keyboard.led_values;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_POINTER) {
        /* xcb_input_feedback_ctl_data_t.pointer.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.pointer.num */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.num;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.pointer.denom */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.denom;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.pointer.threshold */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->pointer.threshold;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_STRING) {
        /* xcb_input_feedback_ctl_data_t.string.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.string.num_keysyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->string.num_keysyms;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keysyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->string.keysyms;
        xcb_block_len += _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keysym_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_INTEGER) {
        /* xcb_input_feedback_ctl_data_t.integer.int_to_display */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->integer.int_to_display;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_LED) {
        /* xcb_input_feedback_ctl_data_t.led.led_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led.led_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_ctl_data_t.led.led_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led.led_values;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_BELL) {
        /* xcb_input_feedback_ctl_data_t.bell.percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.percent;
        xcb_block_len += sizeof(int8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.bell.pad2 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.bell.pitch */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.pitch;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.bell.duration */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell.duration;
        xcb_block_len += sizeof(int16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_feedback_ctl_data_unpack (const void                     *_buffer,
                                    uint8_t                         class_id,
                                    xcb_input_feedback_ctl_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(class_id == XCB_INPUT_FEEDBACK_CLASS_KEYBOARD) {
        /* xcb_input_feedback_ctl_data_t.keyboard.key */
        _aux->keyboard.key = *(xcb_input_key_code_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_key_code_t);
        xcb_tmp += sizeof(xcb_input_key_code_t);
        xcb_align_to = ALIGNOF(xcb_input_key_code_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.auto_repeat_mode */
        _aux->keyboard.auto_repeat_mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.key_click_percent */
        _aux->keyboard.key_click_percent = *(int8_t *)xcb_tmp;
        xcb_block_len += sizeof(int8_t);
        xcb_tmp += sizeof(int8_t);
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_percent */
        _aux->keyboard.bell_percent = *(int8_t *)xcb_tmp;
        xcb_block_len += sizeof(int8_t);
        xcb_tmp += sizeof(int8_t);
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_pitch */
        _aux->keyboard.bell_pitch = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.bell_duration */
        _aux->keyboard.bell_duration = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.led_mask */
        _aux->keyboard.led_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_ctl_data_t.keyboard.led_values */
        _aux->keyboard.led_values = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_POINTER) {
        /* xcb_input_feedback_ctl_data_t.pointer.pad0 */
        _aux->pointer.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->pointer.pad0[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.pointer.num */
        _aux->pointer.num = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.pointer.denom */
        _aux->pointer.denom = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.pointer.threshold */
        _aux->pointer.threshold = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_STRING) {
        /* xcb_input_feedback_ctl_data_t.string.pad1 */
        _aux->string.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->string.pad1[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.string.num_keysyms */
        _aux->string.num_keysyms = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keysyms */
        _aux->string.keysyms = (xcb_keysym_t *)xcb_tmp;
        xcb_block_len += _aux->string.num_keysyms * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_keysym_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_INTEGER) {
        /* xcb_input_feedback_ctl_data_t.integer.int_to_display */
        _aux->integer.int_to_display = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_LED) {
        /* xcb_input_feedback_ctl_data_t.led.led_mask */
        _aux->led.led_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_feedback_ctl_data_t.led.led_values */
        _aux->led.led_values = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(class_id == XCB_INPUT_FEEDBACK_CLASS_BELL) {
        /* xcb_input_feedback_ctl_data_t.bell.percent */
        _aux->bell.percent = *(int8_t *)xcb_tmp;
        xcb_block_len += sizeof(int8_t);
        xcb_tmp += sizeof(int8_t);
        xcb_align_to = ALIGNOF(int8_t);
        /* xcb_input_feedback_ctl_data_t.bell.pad2 */
        _aux->bell.pad2[0] = *(uint8_t *)xcb_tmp;
        _aux->bell.pad2[1] = *(uint8_t *)xcb_tmp;
        _aux->bell.pad2[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_feedback_ctl_data_t.bell.pitch */
        _aux->bell.pitch = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
        /* xcb_input_feedback_ctl_data_t.bell.duration */
        _aux->bell.duration = *(int16_t *)xcb_tmp;
        xcb_block_len += sizeof(int16_t);
        xcb_tmp += sizeof(int16_t);
        xcb_align_to = ALIGNOF(int16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_feedback_ctl_data_sizeof (const void  *_buffer,
                                    uint8_t      class_id)
{
    xcb_input_feedback_ctl_data_t _aux;
    return xcb_input_feedback_ctl_data_unpack(_buffer, class_id, &_aux);
}

int
xcb_input_feedback_ctl_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_feedback_ctl_t *_aux = (xcb_input_feedback_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_feedback_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_feedback_ctl_data_sizeof(xcb_tmp, _aux->class_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_feedback_ctl_data (const xcb_input_feedback_ctl_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i)
{
    xcb_input_feedback_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_feedback_ctl_t *)(((char *)R) + xcb_input_feedback_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_feedback_ctl_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_feedback_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_change_feedback_control_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_change_feedback_control_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* feedback */
    xcb_block_len += xcb_input_feedback_ctl_sizeof(xcb_tmp);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_feedback_ctl_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_change_feedback_control_checked (xcb_connection_t         *c,
                                           uint32_t                  mask,
                                           uint8_t                   device_id,
                                           uint8_t                   feedback_id,
                                           xcb_input_feedback_ctl_t *feedback)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_FEEDBACK_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_feedback_control_request_t xcb_out;

    xcb_out.mask = mask;
    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_feedback_ctl_t feedback */
    xcb_parts[4].iov_base = (char *) feedback;
    xcb_parts[4].iov_len =
      xcb_input_feedback_ctl_sizeof (feedback);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_feedback_control (xcb_connection_t         *c,
                                   uint32_t                  mask,
                                   uint8_t                   device_id,
                                   uint8_t                   feedback_id,
                                   xcb_input_feedback_ctl_t *feedback)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_FEEDBACK_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_feedback_control_request_t xcb_out;

    xcb_out.mask = mask;
    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_feedback_ctl_t feedback */
    xcb_parts[4].iov_base = (char *) feedback;
    xcb_parts[4].iov_len =
      xcb_input_feedback_ctl_sizeof (feedback);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_feedback_ctl_t *
xcb_input_change_feedback_control_feedback (const xcb_input_change_feedback_control_request_t *R)
{
    return (xcb_input_feedback_ctl_t *) (R + 1);
}

int
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_key_mapping_reply_t *_aux = (xcb_input_get_device_key_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_key_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += _aux->length * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping (xcb_connection_t     *c,
                                  uint8_t               device_id,
                                  xcb_input_key_code_t  first_keycode,
                                  uint8_t               count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_key_mapping_cookie_t xcb_ret;
    xcb_input_get_device_key_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c,
                                            uint8_t               device_id,
                                            xcb_input_key_code_t  first_keycode,
                                            uint8_t               count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_key_mapping_cookie_t xcb_ret;
    xcb_input_get_device_key_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_keysym_t *
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_device_key_mapping_reply_t *
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c,
                                        xcb_input_get_device_key_mapping_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_input_get_device_key_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_change_device_key_mapping_request_t *_aux = (xcb_input_change_device_key_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_change_device_key_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += (_aux->keycode_count * _aux->keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c,
                                             uint8_t               device_id,
                                             xcb_input_key_code_t  first_keycode,
                                             uint8_t               keysyms_per_keycode,
                                             uint8_t               keycode_count,
                                             const xcb_keysym_t   *keysyms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_key_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    xcb_out.keycode_count = keycode_count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_device_key_mapping (xcb_connection_t     *c,
                                     uint8_t               device_id,
                                     xcb_input_key_code_t  first_keycode,
                                     uint8_t               keysyms_per_keycode,
                                     uint8_t               keycode_count,
                                     const xcb_keysym_t   *keysyms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_key_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    xcb_out.keycode_count = keycode_count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_keysym_t *
xcb_input_change_device_key_mapping_keysyms (const xcb_input_change_device_key_mapping_request_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_input_change_device_key_mapping_keysyms_length (const xcb_input_change_device_key_mapping_request_t *R)
{
    return (R->keycode_count * R->keysyms_per_keycode);
}

xcb_generic_iterator_t
xcb_input_change_device_key_mapping_keysyms_end (const xcb_input_change_device_key_mapping_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + ((R->keycode_count * R->keysyms_per_keycode));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_modifier_mapping_reply_t *_aux = (xcb_input_get_device_modifier_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_modifier_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keymaps */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping (xcb_connection_t *c,
                                       uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_get_device_modifier_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c,
                                                 uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_get_device_modifier_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R)
{
    return (R->keycodes_per_modifier * 8);
}

xcb_generic_iterator_t
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->keycodes_per_modifier * 8));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_device_modifier_mapping_reply_t *
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c,
                                             xcb_input_get_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e)
{
    return (xcb_input_get_device_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_set_device_modifier_mapping_request_t *_aux = (xcb_input_set_device_modifier_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_set_device_modifier_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keymaps */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping (xcb_connection_t *c,
                                       uint8_t           device_id,
                                       uint8_t           keycodes_per_modifier,
                                       const uint8_t    *keymaps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_set_device_modifier_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.keycodes_per_modifier = keycodes_per_modifier;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t keymaps */
    xcb_parts[4].iov_base = (char *) keymaps;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c,
                                                 uint8_t           device_id,
                                                 uint8_t           keycodes_per_modifier,
                                                 const uint8_t    *keymaps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_set_device_modifier_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.keycodes_per_modifier = keycodes_per_modifier;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t keymaps */
    xcb_parts[4].iov_base = (char *) keymaps;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_modifier_mapping_reply_t *
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c,
                                             xcb_input_set_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e)
{
    return (xcb_input_set_device_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_button_mapping_reply_t *_aux = (xcb_input_get_device_button_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_button_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += _aux->map_size * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping (xcb_connection_t *c,
                                     uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_button_mapping_cookie_t xcb_ret;
    xcb_input_get_device_button_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c,
                                               uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_button_mapping_cookie_t xcb_ret;
    xcb_input_get_device_button_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R)
{
    return R->map_size;
}

xcb_generic_iterator_t
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->map_size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_get_device_button_mapping_reply_t *
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c,
                                           xcb_input_get_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_input_get_device_button_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_set_device_button_mapping_request_t *_aux = (xcb_input_set_device_button_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_set_device_button_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += _aux->map_size * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping (xcb_connection_t *c,
                                     uint8_t           device_id,
                                     uint8_t           map_size,
                                     const uint8_t    *map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_button_mapping_cookie_t xcb_ret;
    xcb_input_set_device_button_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.map_size = map_size;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_size * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c,
                                               uint8_t           device_id,
                                               uint8_t           map_size,
                                               const uint8_t    *map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_button_mapping_cookie_t xcb_ret;
    xcb_input_set_device_button_mapping_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.map_size = map_size;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_size * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_button_mapping_reply_t *
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c,
                                           xcb_input_set_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_input_set_device_button_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_key_state_next (xcb_input_key_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_key_state_t);
}

xcb_generic_iterator_t
xcb_input_key_state_end (xcb_input_key_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_button_state_next (xcb_input_button_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_button_state_t);
}

xcb_generic_iterator_t
xcb_input_button_state_end (xcb_input_button_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_valuator_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_valuator_state_t *_aux = (xcb_input_valuator_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_valuator_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuators */
    xcb_block_len += _aux->num_valuators * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int32_t *
xcb_input_valuator_state_valuators (const xcb_input_valuator_state_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_input_valuator_state_valuators_length (const xcb_input_valuator_state_t *R)
{
    return R->num_valuators;
}

xcb_generic_iterator_t
xcb_input_valuator_state_valuators_end (const xcb_input_valuator_state_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_valuator_state_next (xcb_input_valuator_state_iterator_t *i)
{
    xcb_input_valuator_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_valuator_state_t *)(((char *)R) + xcb_input_valuator_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_valuator_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_valuator_state_end (xcb_input_valuator_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_valuator_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int32_t *
xcb_input_input_state_data_valuator_valuators (const xcb_input_input_state_data_t *S)
{
    return S->valuator.valuators;
}

int
xcb_input_input_state_data_valuator_valuators_length (const xcb_input_input_state_t *R,
                                                      const xcb_input_input_state_data_t *S)
{
    return S->valuator.num_valuators;
}

xcb_generic_iterator_t
xcb_input_input_state_data_valuator_valuators_end (const xcb_input_input_state_t *R,
                                                   const xcb_input_input_state_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->valuator.valuators + S->valuator.num_valuators;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_input_state_data_serialize (void                               **_buffer,
                                      uint8_t                              class_id,
                                      const xcb_input_input_state_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[11];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(class_id == XCB_INPUT_INPUT_CLASS_KEY) {
        /* xcb_input_input_state_data_t.key.num_keys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key.num_keys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.key.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.key.keys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->key.keys;
        xcb_block_len += 32;
        xcb_parts[xcb_parts_idx].iov_len = 32;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_BUTTON) {
        /* xcb_input_input_state_data_t.button.num_buttons */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->button.num_buttons;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.button.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.button.buttons */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->button.buttons;
        xcb_block_len += 32;
        xcb_parts[xcb_parts_idx].iov_len = 32;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_VALUATOR) {
        /* xcb_input_input_state_data_t.valuator.num_valuators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.num_valuators;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.valuator.mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* valuators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->valuator.valuators;
        xcb_block_len += _aux->valuator.num_valuators * sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->valuator.num_valuators * sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_input_state_data_unpack (const void                    *_buffer,
                                   uint8_t                        class_id,
                                   xcb_input_input_state_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;


    if(class_id == XCB_INPUT_INPUT_CLASS_KEY) {
        /* xcb_input_input_state_data_t.key.num_keys */
        _aux->key.num_keys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.key.pad0 */
        _aux->key.pad0 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.key.keys */
        memcpy(_aux->key.keys, xcb_tmp, sizeof(uint8_t) * 32);
        xcb_block_len += sizeof(uint8_t) * 32;
        xcb_tmp += sizeof(uint8_t) * 32;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_BUTTON) {
        /* xcb_input_input_state_data_t.button.num_buttons */
        _aux->button.num_buttons = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.button.pad1 */
        _aux->button.pad1 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.button.buttons */
        memcpy(_aux->button.buttons, xcb_tmp, sizeof(uint8_t) * 32);
        xcb_block_len += sizeof(uint8_t) * 32;
        xcb_tmp += sizeof(uint8_t) * 32;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(class_id == XCB_INPUT_INPUT_CLASS_VALUATOR) {
        /* xcb_input_input_state_data_t.valuator.num_valuators */
        _aux->valuator.num_valuators = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_input_state_data_t.valuator.mode */
        _aux->valuator.mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* valuators */
        _aux->valuator.valuators = (int32_t *)xcb_tmp;
        xcb_block_len += _aux->valuator.num_valuators * sizeof(int32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(int32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_input_state_data_sizeof (const void  *_buffer,
                                   uint8_t      class_id)
{
    xcb_input_input_state_data_t _aux;
    return xcb_input_input_state_data_unpack(_buffer, class_id, &_aux);
}

int
xcb_input_input_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_input_state_t *_aux = (xcb_input_input_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_input_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_input_state_data_sizeof(xcb_tmp, _aux->class_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_input_state_data (const xcb_input_input_state_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i)
{
    xcb_input_input_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_input_state_t *)(((char *)R) + xcb_input_input_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_input_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_input_state_end (xcb_input_input_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_input_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_query_device_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_query_device_state_reply_t *_aux = (xcb_input_query_device_state_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_query_device_state_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    for(i=0; i<_aux->num_classes; i++) {
        xcb_tmp_len = xcb_input_input_state_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_input_state_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_query_device_state_cookie_t
xcb_input_query_device_state (xcb_connection_t *c,
                              uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_QUERY_DEVICE_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_query_device_state_cookie_t xcb_ret;
    xcb_input_query_device_state_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_query_device_state_cookie_t
xcb_input_query_device_state_unchecked (xcb_connection_t *c,
                                        uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_QUERY_DEVICE_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_query_device_state_cookie_t xcb_ret;
    xcb_input_query_device_state_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_query_device_state_classes_length (const xcb_input_query_device_state_reply_t *R)
{
    return R->num_classes;
}

xcb_input_input_state_iterator_t
xcb_input_query_device_state_classes_iterator (const xcb_input_query_device_state_reply_t *R)
{
    xcb_input_input_state_iterator_t i;
    i.data = (xcb_input_input_state_t *) (R + 1);
    i.rem = R->num_classes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_query_device_state_reply_t *
xcb_input_query_device_state_reply (xcb_connection_t                       *c,
                                    xcb_input_query_device_state_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_input_query_device_state_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_send_extension_event_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_send_extension_event_request_t *_aux = (xcb_input_send_extension_event_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_send_extension_event_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* events */
    xcb_block_len += (_aux->num_events * 32) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_send_extension_event_checked (xcb_connection_t              *c,
                                        xcb_window_t                   destination,
                                        uint8_t                        device_id,
                                        uint8_t                        propagate,
                                        uint16_t                       num_classes,
                                        uint8_t                        num_events,
                                        const uint8_t                 *events,
                                        const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SEND_EXTENSION_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_input_send_extension_event_request_t xcb_out;

    xcb_out.destination = destination;
    xcb_out.device_id = device_id;
    xcb_out.propagate = propagate;
    xcb_out.num_classes = num_classes;
    xcb_out.num_events = num_events;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t events */
    xcb_parts[4].iov_base = (char *) events;
    xcb_parts[4].iov_len = (num_events * 32) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[6].iov_base = (char *) classes;
    xcb_parts[6].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_send_extension_event (xcb_connection_t              *c,
                                xcb_window_t                   destination,
                                uint8_t                        device_id,
                                uint8_t                        propagate,
                                uint16_t                       num_classes,
                                uint8_t                        num_events,
                                const uint8_t                 *events,
                                const xcb_input_event_class_t *classes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SEND_EXTENSION_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_input_send_extension_event_request_t xcb_out;

    xcb_out.destination = destination;
    xcb_out.device_id = device_id;
    xcb_out.propagate = propagate;
    xcb_out.num_classes = num_classes;
    xcb_out.num_events = num_events;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t events */
    xcb_parts[4].iov_base = (char *) events;
    xcb_parts[4].iov_len = (num_events * 32) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[6].iov_base = (char *) classes;
    xcb_parts[6].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_input_send_extension_event_events (const xcb_input_send_extension_event_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_input_send_extension_event_events_length (const xcb_input_send_extension_event_request_t *R)
{
    return (R->num_events * 32);
}

xcb_generic_iterator_t
xcb_input_send_extension_event_events_end (const xcb_input_send_extension_event_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->num_events * 32));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_event_class_t *
xcb_input_send_extension_event_classes (const xcb_input_send_extension_event_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_send_extension_event_events_end(R);
    return (xcb_input_event_class_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_event_class_t, prev.index) + 0);
}

int
xcb_input_send_extension_event_classes_length (const xcb_input_send_extension_event_request_t *R)
{
    return R->num_classes;
}

xcb_generic_iterator_t
xcb_input_send_extension_event_classes_end (const xcb_input_send_extension_event_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_send_extension_event_events_end(R);
    i.data = ((xcb_input_event_class_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_input_event_class_t, prev.index))) + (R->num_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_input_device_bell_checked (xcb_connection_t *c,
                               uint8_t           device_id,
                               uint8_t           feedback_id,
                               uint8_t           feedback_class,
                               int8_t            percent)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_DEVICE_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_device_bell_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    xcb_out.feedback_class = feedback_class;
    xcb_out.percent = percent;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_device_bell (xcb_connection_t *c,
                       uint8_t           device_id,
                       uint8_t           feedback_id,
                       uint8_t           feedback_class,
                       int8_t            percent)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_DEVICE_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_device_bell_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    xcb_out.feedback_class = feedback_class;
    xcb_out.percent = percent;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_set_device_valuators_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_set_device_valuators_request_t *_aux = (xcb_input_set_device_valuators_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_set_device_valuators_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuators */
    xcb_block_len += _aux->num_valuators * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators (xcb_connection_t *c,
                                uint8_t           device_id,
                                uint8_t           first_valuator,
                                uint8_t           num_valuators,
                                const int32_t    *valuators)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_VALUATORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_valuators_cookie_t xcb_ret;
    xcb_input_set_device_valuators_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_valuator = first_valuator;
    xcb_out.num_valuators = num_valuators;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t valuators */
    xcb_parts[4].iov_base = (char *) valuators;
    xcb_parts[4].iov_len = num_valuators * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c,
                                          uint8_t           device_id,
                                          uint8_t           first_valuator,
                                          uint8_t           num_valuators,
                                          const int32_t    *valuators)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_SET_DEVICE_VALUATORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_set_device_valuators_cookie_t xcb_ret;
    xcb_input_set_device_valuators_request_t xcb_out;

    xcb_out.device_id = device_id;
    xcb_out.first_valuator = first_valuator;
    xcb_out.num_valuators = num_valuators;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t valuators */
    xcb_parts[4].iov_base = (char *) valuators;
    xcb_parts[4].iov_len = num_valuators * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_set_device_valuators_reply_t *
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c,
                                      xcb_input_set_device_valuators_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_input_set_device_valuators_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_device_resolution_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_resolution_state_t *_aux = (xcb_input_device_resolution_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_resolution_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* resolution_values */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* resolution_min */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* resolution_max */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R)
{
    return R->num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_values_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R)
{
    return R->num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_values_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_min_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R)
{
    return R->num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_max_end (const xcb_input_device_resolution_state_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_min_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_device_resolution_state_next (xcb_input_device_resolution_state_iterator_t *i)
{
    xcb_input_device_resolution_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_resolution_state_t *)(((char *)R) + xcb_input_device_resolution_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_resolution_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_resolution_state_end (xcb_input_device_resolution_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_resolution_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_device_abs_calib_state_next (xcb_input_device_abs_calib_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_calib_state_t);
}

xcb_generic_iterator_t
xcb_input_device_abs_calib_state_end (xcb_input_device_abs_calib_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_abs_area_state_next (xcb_input_device_abs_area_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_area_state_t);
}

xcb_generic_iterator_t
xcb_input_device_abs_area_state_end (xcb_input_device_abs_area_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_core_state_next (xcb_input_device_core_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_core_state_t);
}

xcb_generic_iterator_t
xcb_input_device_core_state_end (xcb_input_device_core_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_enable_state_next (xcb_input_device_enable_state_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_enable_state_t);
}

xcb_generic_iterator_t
xcb_input_device_enable_state_end (xcb_input_device_enable_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

uint32_t *
xcb_input_device_state_data_resolution_resolution_values (const xcb_input_device_state_data_t *S)
{
    return S->resolution.resolution_values;
}

int
xcb_input_device_state_data_resolution_resolution_values_length (const xcb_input_device_state_t *R,
                                                                 const xcb_input_device_state_data_t *S)
{
    return S->resolution.num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_values_end (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->resolution.resolution_values + S->resolution.num_valuators;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_device_state_data_resolution_resolution_min (const xcb_input_device_state_data_t *S)
{
    return S->resolution.resolution_min;
}

int
xcb_input_device_state_data_resolution_resolution_min_length (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S)
{
    return S->resolution.num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_min_end (const xcb_input_device_state_t *R,
                                                           const xcb_input_device_state_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->resolution.resolution_min + S->resolution.num_valuators;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_device_state_data_resolution_resolution_max (const xcb_input_device_state_data_t *S)
{
    return S->resolution.resolution_max;
}

int
xcb_input_device_state_data_resolution_resolution_max_length (const xcb_input_device_state_t *R,
                                                              const xcb_input_device_state_data_t *S)
{
    return S->resolution.num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_state_data_resolution_resolution_max_end (const xcb_input_device_state_t *R,
                                                           const xcb_input_device_state_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->resolution.resolution_max + S->resolution.num_valuators;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_device_state_data_serialize (void                                **_buffer,
                                       uint16_t                              control_id,
                                       const xcb_input_device_state_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[27];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(control_id == XCB_INPUT_DEVICE_CONTROL_RESOLUTION) {
        /* xcb_input_device_state_data_t.resolution.num_valuators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->resolution.num_valuators;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->resolution.resolution_values;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_min */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->resolution.resolution_min;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_max */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->resolution.resolution_max;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_CALIB) {
        /* xcb_input_device_state_data_t.abs_calib.min_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.min_x;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.max_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.max_x;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.min_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.min_y;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.max_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.max_y;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.flip_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.flip_x;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.flip_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.flip_y;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.rotation */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.rotation;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.button_threshold */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.button_threshold;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_CORE) {
        /* xcb_input_device_state_data_t.core.status */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->core.status;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.core.iscore */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->core.iscore;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.core.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ENABLE) {
        /* xcb_input_device_state_data_t.enable.enable */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->enable.enable;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.enable.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_AREA) {
        /* xcb_input_device_state_data_t.abs_area.offset_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.offset_x;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.offset_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.offset_y;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.width;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.height */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.height;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.screen */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.screen;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.following */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.following;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_device_state_data_unpack (const void                     *_buffer,
                                    uint16_t                        control_id,
                                    xcb_input_device_state_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(control_id == XCB_INPUT_DEVICE_CONTROL_RESOLUTION) {
        /* xcb_input_device_state_data_t.resolution.num_valuators */
        _aux->resolution.num_valuators = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_values */
        _aux->resolution.resolution_values = (uint32_t *)xcb_tmp;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_min */
        _aux->resolution.resolution_min = (uint32_t *)xcb_tmp;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_max */
        _aux->resolution.resolution_max = (uint32_t *)xcb_tmp;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_CALIB) {
        /* xcb_input_device_state_data_t.abs_calib.min_x */
        _aux->abs_calib.min_x = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.max_x */
        _aux->abs_calib.max_x = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.min_y */
        _aux->abs_calib.min_y = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.max_y */
        _aux->abs_calib.max_y = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_state_data_t.abs_calib.flip_x */
        _aux->abs_calib.flip_x = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.flip_y */
        _aux->abs_calib.flip_y = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.rotation */
        _aux->abs_calib.rotation = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_calib.button_threshold */
        _aux->abs_calib.button_threshold = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_CORE) {
        /* xcb_input_device_state_data_t.core.status */
        _aux->core.status = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.core.iscore */
        _aux->core.iscore = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.core.pad0 */
        _aux->core.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->core.pad0[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ENABLE) {
        /* xcb_input_device_state_data_t.enable.enable */
        _aux->enable.enable = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_state_data_t.enable.pad1 */
        _aux->enable.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->enable.pad1[1] = *(uint8_t *)xcb_tmp;
        _aux->enable.pad1[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_AREA) {
        /* xcb_input_device_state_data_t.abs_area.offset_x */
        _aux->abs_area.offset_x = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.offset_y */
        _aux->abs_area.offset_y = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.width */
        _aux->abs_area.width = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.height */
        _aux->abs_area.height = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.screen */
        _aux->abs_area.screen = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_state_data_t.abs_area.following */
        _aux->abs_area.following = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_device_state_data_sizeof (const void  *_buffer,
                                    uint16_t     control_id)
{
    xcb_input_device_state_data_t _aux;
    return xcb_input_device_state_data_unpack(_buffer, control_id, &_aux);
}

int
xcb_input_device_state_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_state_t *_aux = (xcb_input_device_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_device_state_data_sizeof(xcb_tmp, _aux->control_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_device_state_data (const xcb_input_device_state_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i)
{
    xcb_input_device_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_state_t *)(((char *)R) + xcb_input_device_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_state_end (xcb_input_device_state_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_get_device_control_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_control_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* control */
    xcb_block_len += xcb_input_device_state_sizeof(xcb_tmp);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_device_state_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_control_cookie_t
xcb_input_get_device_control (xcb_connection_t *c,
                              uint16_t          control_id,
                              uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_control_cookie_t xcb_ret;
    xcb_input_get_device_control_request_t xcb_out;

    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_control_cookie_t
xcb_input_get_device_control_unchecked (xcb_connection_t *c,
                                        uint16_t          control_id,
                                        uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_control_cookie_t xcb_ret;
    xcb_input_get_device_control_request_t xcb_out;

    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_device_state_t *
xcb_input_get_device_control_control (const xcb_input_get_device_control_reply_t *R)
{
    return (xcb_input_device_state_t *) (R + 1);
}

xcb_input_get_device_control_reply_t *
xcb_input_get_device_control_reply (xcb_connection_t                       *c,
                                    xcb_input_get_device_control_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_input_get_device_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_resolution_ctl_t *_aux = (xcb_input_device_resolution_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_resolution_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* resolution_values */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R)
{
    return R->num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i)
{
    xcb_input_device_resolution_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_resolution_ctl_t *)(((char *)R) + xcb_input_device_resolution_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_resolution_ctl_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_resolution_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_calib_ctl_t);
}

xcb_generic_iterator_t
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_area_ctrl_t);
}

xcb_generic_iterator_t
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_core_ctrl_t);
}

xcb_generic_iterator_t
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_enable_ctrl_t);
}

xcb_generic_iterator_t
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

uint32_t *
xcb_input_device_ctl_data_resolution_resolution_values (const xcb_input_device_ctl_data_t *S)
{
    return S->resolution.resolution_values;
}

int
xcb_input_device_ctl_data_resolution_resolution_values_length (const xcb_input_device_ctl_t *R,
                                                               const xcb_input_device_ctl_data_t *S)
{
    return S->resolution.num_valuators;
}

xcb_generic_iterator_t
xcb_input_device_ctl_data_resolution_resolution_values_end (const xcb_input_device_ctl_t *R,
                                                            const xcb_input_device_ctl_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->resolution.resolution_values + S->resolution.num_valuators;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_device_ctl_data_serialize (void                              **_buffer,
                                     uint16_t                            control_id,
                                     const xcb_input_device_ctl_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[24];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(control_id == XCB_INPUT_DEVICE_CONTROL_RESOLUTION) {
        /* xcb_input_device_ctl_data_t.resolution.first_valuator */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->resolution.first_valuator;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.resolution.num_valuators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->resolution.num_valuators;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.resolution.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_values */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->resolution.resolution_values;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_CALIB) {
        /* xcb_input_device_ctl_data_t.abs_calib.min_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.min_x;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.max_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.max_x;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.min_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.min_y;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.max_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.max_y;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.flip_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.flip_x;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.flip_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.flip_y;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.rotation */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.rotation;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.button_threshold */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_calib.button_threshold;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_CORE) {
        /* xcb_input_device_ctl_data_t.core.status */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->core.status;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.core.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ENABLE) {
        /* xcb_input_device_ctl_data_t.enable.enable */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->enable.enable;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.enable.pad2 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_AREA) {
        /* xcb_input_device_ctl_data_t.abs_area.offset_x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.offset_x;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_area.offset_y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.offset_y;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_area.width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.width;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.height */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.height;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.screen */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.screen;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.following */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->abs_area.following;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_device_ctl_data_unpack (const void                   *_buffer,
                                  uint16_t                      control_id,
                                  xcb_input_device_ctl_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(control_id == XCB_INPUT_DEVICE_CONTROL_RESOLUTION) {
        /* xcb_input_device_ctl_data_t.resolution.first_valuator */
        _aux->resolution.first_valuator = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.resolution.num_valuators */
        _aux->resolution.num_valuators = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.resolution.pad0 */
        _aux->resolution.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->resolution.pad0[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* resolution_values */
        _aux->resolution.resolution_values = (uint32_t *)xcb_tmp;
        xcb_block_len += _aux->resolution.num_valuators * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_CALIB) {
        /* xcb_input_device_ctl_data_t.abs_calib.min_x */
        _aux->abs_calib.min_x = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.max_x */
        _aux->abs_calib.max_x = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.min_y */
        _aux->abs_calib.min_y = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.max_y */
        _aux->abs_calib.max_y = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.flip_x */
        _aux->abs_calib.flip_x = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.flip_y */
        _aux->abs_calib.flip_y = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.rotation */
        _aux->abs_calib.rotation = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_calib.button_threshold */
        _aux->abs_calib.button_threshold = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_CORE) {
        /* xcb_input_device_ctl_data_t.core.status */
        _aux->core.status = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.core.pad1 */
        _aux->core.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->core.pad1[1] = *(uint8_t *)xcb_tmp;
        _aux->core.pad1[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ENABLE) {
        /* xcb_input_device_ctl_data_t.enable.enable */
        _aux->enable.enable = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_ctl_data_t.enable.pad2 */
        _aux->enable.pad2[0] = *(uint8_t *)xcb_tmp;
        _aux->enable.pad2[1] = *(uint8_t *)xcb_tmp;
        _aux->enable.pad2[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(control_id == XCB_INPUT_DEVICE_CONTROL_ABS_AREA) {
        /* xcb_input_device_ctl_data_t.abs_area.offset_x */
        _aux->abs_area.offset_x = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_area.offset_y */
        _aux->abs_area.offset_y = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_ctl_data_t.abs_area.width */
        _aux->abs_area.width = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.height */
        _aux->abs_area.height = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.screen */
        _aux->abs_area.screen = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
        /* xcb_input_device_ctl_data_t.abs_area.following */
        _aux->abs_area.following = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_device_ctl_data_sizeof (const void  *_buffer,
                                  uint16_t     control_id)
{
    xcb_input_device_ctl_data_t _aux;
    return xcb_input_device_ctl_data_unpack(_buffer, control_id, &_aux);
}

int
xcb_input_device_ctl_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_ctl_t *_aux = (xcb_input_device_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_device_ctl_data_sizeof(xcb_tmp, _aux->control_id);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_device_ctl_data (const xcb_input_device_ctl_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i)
{
    xcb_input_device_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_ctl_t *)(((char *)R) + xcb_input_device_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_ctl_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_change_device_control_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_change_device_control_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* control */
    xcb_block_len += xcb_input_device_ctl_sizeof(xcb_tmp);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_device_ctl_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_change_device_control_cookie_t
xcb_input_change_device_control (xcb_connection_t       *c,
                                 uint16_t                control_id,
                                 uint8_t                 device_id,
                                 xcb_input_device_ctl_t *control)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_change_device_control_cookie_t xcb_ret;
    xcb_input_change_device_control_request_t xcb_out;

    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_device_ctl_t control */
    xcb_parts[4].iov_base = (char *) control;
    xcb_parts[4].iov_len =
      xcb_input_device_ctl_sizeof (control);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_device_control_cookie_t
xcb_input_change_device_control_unchecked (xcb_connection_t       *c,
                                           uint16_t                control_id,
                                           uint8_t                 device_id,
                                           xcb_input_device_ctl_t *control)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_change_device_control_cookie_t xcb_ret;
    xcb_input_change_device_control_request_t xcb_out;

    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_device_ctl_t control */
    xcb_parts[4].iov_base = (char *) control;
    xcb_parts[4].iov_len =
      xcb_input_device_ctl_sizeof (control);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_change_device_control_reply_t *
xcb_input_change_device_control_reply (xcb_connection_t                          *c,
                                       xcb_input_change_device_control_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_input_change_device_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_list_device_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_list_device_properties_reply_t *_aux = (xcb_input_list_device_properties_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_list_device_properties_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* atoms */
    xcb_block_len += _aux->num_atoms * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_list_device_properties_cookie_t
xcb_input_list_device_properties (xcb_connection_t *c,
                                  uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_LIST_DEVICE_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_list_device_properties_cookie_t xcb_ret;
    xcb_input_list_device_properties_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_list_device_properties_cookie_t
xcb_input_list_device_properties_unchecked (xcb_connection_t *c,
                                            uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_LIST_DEVICE_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_list_device_properties_cookie_t xcb_ret;
    xcb_input_list_device_properties_request_t xcb_out;

    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_input_list_device_properties_atoms (const xcb_input_list_device_properties_reply_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_input_list_device_properties_atoms_length (const xcb_input_list_device_properties_reply_t *R)
{
    return R->num_atoms;
}

xcb_generic_iterator_t
xcb_input_list_device_properties_atoms_end (const xcb_input_list_device_properties_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->num_atoms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_list_device_properties_reply_t *
xcb_input_list_device_properties_reply (xcb_connection_t                           *c,
                                        xcb_input_list_device_properties_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_input_list_device_properties_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

uint8_t *
xcb_input_change_device_property_items_data_8 (const xcb_input_change_device_property_items_t *S)
{
    return S->data8;
}

int
xcb_input_change_device_property_items_data_8_length (const xcb_input_change_device_property_request_t *R,
                                                      const xcb_input_change_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_8_end (const xcb_input_change_device_property_request_t *R,
                                                   const xcb_input_change_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data8 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint16_t *
xcb_input_change_device_property_items_data_16 (const xcb_input_change_device_property_items_t *S)
{
    return S->data16;
}

int
xcb_input_change_device_property_items_data_16_length (const xcb_input_change_device_property_request_t *R,
                                                       const xcb_input_change_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_16_end (const xcb_input_change_device_property_request_t *R,
                                                    const xcb_input_change_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data16 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_change_device_property_items_data_32 (const xcb_input_change_device_property_items_t *S)
{
    return S->data32;
}

int
xcb_input_change_device_property_items_data_32_length (const xcb_input_change_device_property_request_t *R,
                                                       const xcb_input_change_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_change_device_property_items_data_32_end (const xcb_input_change_device_property_request_t *R,
                                                    const xcb_input_change_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data32 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_change_device_property_items_serialize (void                                           **_buffer,
                                                  uint32_t                                         num_items,
                                                  uint8_t                                          format,
                                                  const xcb_input_change_device_property_items_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[9];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data8;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data16;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data32;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_change_device_property_items_unpack (const void                                *_buffer,
                                               uint32_t                                   num_items,
                                               uint8_t                                    format,
                                               xcb_input_change_device_property_items_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        _aux->data8 = (uint8_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        _aux->data16 = (uint16_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        _aux->data32 = (uint32_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_change_device_property_items_sizeof (const void  *_buffer,
                                               uint32_t     num_items,
                                               uint8_t      format)
{
    xcb_input_change_device_property_items_t _aux;
    return xcb_input_change_device_property_items_unpack(_buffer, num_items, format, &_aux);
}

int
xcb_input_change_device_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_change_device_property_request_t *_aux = (xcb_input_change_device_property_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_change_device_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += xcb_input_change_device_property_items_sizeof(xcb_tmp, _aux->num_items, _aux->format);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_change_device_property_checked (xcb_connection_t *c,
                                          xcb_atom_t        property,
                                          xcb_atom_t        type,
                                          uint8_t           device_id,
                                          uint8_t           format,
                                          uint8_t           mode,
                                          uint32_t          num_items,
                                          const void       *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.device_id = device_id;
    xcb_out.format = format;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_change_device_property_items_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len =
      xcb_input_change_device_property_items_sizeof (items, num_items, format);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_device_property (xcb_connection_t *c,
                                  xcb_atom_t        property,
                                  xcb_atom_t        type,
                                  uint8_t           device_id,
                                  uint8_t           format,
                                  uint8_t           mode,
                                  uint32_t          num_items,
                                  const void       *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.device_id = device_id;
    xcb_out.format = format;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_change_device_property_items_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len =
      xcb_input_change_device_property_items_sizeof (items, num_items, format);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_device_property_aux_checked (xcb_connection_t                               *c,
                                              xcb_atom_t                                      property,
                                              xcb_atom_t                                      type,
                                              uint8_t                                         device_id,
                                              uint8_t                                         format,
                                              uint8_t                                         mode,
                                              uint32_t                                        num_items,
                                              const xcb_input_change_device_property_items_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_property_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.device_id = device_id;
    xcb_out.format = format;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_change_device_property_items_t items */
    xcb_parts[4].iov_len =
      xcb_input_change_device_property_items_serialize (&xcb_aux0, num_items, format, items);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_change_device_property_aux (xcb_connection_t                               *c,
                                      xcb_atom_t                                      property,
                                      xcb_atom_t                                      type,
                                      uint8_t                                         device_id,
                                      uint8_t                                         format,
                                      uint8_t                                         mode,
                                      uint32_t                                        num_items,
                                      const xcb_input_change_device_property_items_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_change_device_property_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.device_id = device_id;
    xcb_out.format = format;
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_change_device_property_items_t items */
    xcb_parts[4].iov_len =
      xcb_input_change_device_property_items_serialize (&xcb_aux0, num_items, format, items);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_input_change_device_property_items (const xcb_input_change_device_property_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_input_delete_device_property_checked (xcb_connection_t *c,
                                          xcb_atom_t        property,
                                          uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_DELETE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_delete_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_delete_device_property (xcb_connection_t *c,
                                  xcb_atom_t        property,
                                  uint8_t           device_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_DELETE_DEVICE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_delete_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_input_get_device_property_items_data_8 (const xcb_input_get_device_property_items_t *S)
{
    return S->data8;
}

int
xcb_input_get_device_property_items_data_8_length (const xcb_input_get_device_property_reply_t *R,
                                                   const xcb_input_get_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_8_end (const xcb_input_get_device_property_reply_t *R,
                                                const xcb_input_get_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data8 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint16_t *
xcb_input_get_device_property_items_data_16 (const xcb_input_get_device_property_items_t *S)
{
    return S->data16;
}

int
xcb_input_get_device_property_items_data_16_length (const xcb_input_get_device_property_reply_t *R,
                                                    const xcb_input_get_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_16_end (const xcb_input_get_device_property_reply_t *R,
                                                 const xcb_input_get_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data16 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_get_device_property_items_data_32 (const xcb_input_get_device_property_items_t *S)
{
    return S->data32;
}

int
xcb_input_get_device_property_items_data_32_length (const xcb_input_get_device_property_reply_t *R,
                                                    const xcb_input_get_device_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_get_device_property_items_data_32_end (const xcb_input_get_device_property_reply_t *R,
                                                 const xcb_input_get_device_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data32 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_get_device_property_items_serialize (void                                        **_buffer,
                                               uint32_t                                      num_items,
                                               uint8_t                                       format,
                                               const xcb_input_get_device_property_items_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[9];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data8;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data16;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data32;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_get_device_property_items_unpack (const void                             *_buffer,
                                            uint32_t                                num_items,
                                            uint8_t                                 format,
                                            xcb_input_get_device_property_items_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        _aux->data8 = (uint8_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        _aux->data16 = (uint16_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        _aux->data32 = (uint32_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_get_device_property_items_sizeof (const void  *_buffer,
                                            uint32_t     num_items,
                                            uint8_t      format)
{
    xcb_input_get_device_property_items_t _aux;
    return xcb_input_get_device_property_items_unpack(_buffer, num_items, format, &_aux);
}

int
xcb_input_get_device_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_property_reply_t *_aux = (xcb_input_get_device_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_get_device_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += xcb_input_get_device_property_items_sizeof(xcb_tmp, _aux->num_items, _aux->format);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_get_device_property_cookie_t
xcb_input_get_device_property (xcb_connection_t *c,
                               xcb_atom_t        property,
                               xcb_atom_t        type,
                               uint32_t          offset,
                               uint32_t          len,
                               uint8_t           device_id,
                               uint8_t           _delete)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_property_cookie_t xcb_ret;
    xcb_input_get_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.offset = offset;
    xcb_out.len = len;
    xcb_out.device_id = device_id;
    xcb_out._delete = _delete;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_get_device_property_cookie_t
xcb_input_get_device_property_unchecked (xcb_connection_t *c,
                                         xcb_atom_t        property,
                                         xcb_atom_t        type,
                                         uint32_t          offset,
                                         uint32_t          len,
                                         uint8_t           device_id,
                                         uint8_t           _delete)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_GET_DEVICE_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_get_device_property_cookie_t xcb_ret;
    xcb_input_get_device_property_request_t xcb_out;

    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.offset = offset;
    xcb_out.len = len;
    xcb_out.device_id = device_id;
    xcb_out._delete = _delete;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_input_get_device_property_items (const xcb_input_get_device_property_reply_t *R)
{
    return (void *) (R + 1);
}

xcb_input_get_device_property_reply_t *
xcb_input_get_device_property_reply (xcb_connection_t                        *c,
                                     xcb_input_get_device_property_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_input_get_device_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_group_info_next (xcb_input_group_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_group_info_t);
}

xcb_generic_iterator_t
xcb_input_group_info_end (xcb_input_group_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_modifier_info_next (xcb_input_modifier_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_modifier_info_t);
}

xcb_generic_iterator_t
xcb_input_modifier_info_end (xcb_input_modifier_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_xi_query_pointer_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_query_pointer_reply_t *_aux = (xcb_input_xi_query_pointer_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_query_pointer_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* buttons */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_query_pointer_cookie_t
xcb_input_xi_query_pointer (xcb_connection_t      *c,
                            xcb_window_t           window,
                            xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_pointer_cookie_t xcb_ret;
    xcb_input_xi_query_pointer_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_query_pointer_cookie_t
xcb_input_xi_query_pointer_unchecked (xcb_connection_t      *c,
                                      xcb_window_t           window,
                                      xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_pointer_cookie_t xcb_ret;
    xcb_input_xi_query_pointer_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_input_xi_query_pointer_buttons (const xcb_input_xi_query_pointer_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_xi_query_pointer_buttons_length (const xcb_input_xi_query_pointer_reply_t *R)
{
    return R->buttons_len;
}

xcb_generic_iterator_t
xcb_input_xi_query_pointer_buttons_end (const xcb_input_xi_query_pointer_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->buttons_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_query_pointer_reply_t *
xcb_input_xi_query_pointer_reply (xcb_connection_t                     *c,
                                  xcb_input_xi_query_pointer_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_input_xi_query_pointer_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_xi_warp_pointer_checked (xcb_connection_t      *c,
                                   xcb_window_t           src_win,
                                   xcb_window_t           dst_win,
                                   xcb_input_fp1616_t     src_x,
                                   xcb_input_fp1616_t     src_y,
                                   uint16_t               src_width,
                                   uint16_t               src_height,
                                   xcb_input_fp1616_t     dst_x,
                                   xcb_input_fp1616_t     dst_y,
                                   xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_WARP_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_warp_pointer_request_t xcb_out;

    xcb_out.src_win = src_win;
    xcb_out.dst_win = dst_win;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_width = src_width;
    xcb_out.src_height = src_height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_warp_pointer (xcb_connection_t      *c,
                           xcb_window_t           src_win,
                           xcb_window_t           dst_win,
                           xcb_input_fp1616_t     src_x,
                           xcb_input_fp1616_t     src_y,
                           uint16_t               src_width,
                           uint16_t               src_height,
                           xcb_input_fp1616_t     dst_x,
                           xcb_input_fp1616_t     dst_y,
                           xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_WARP_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_warp_pointer_request_t xcb_out;

    xcb_out.src_win = src_win;
    xcb_out.dst_win = dst_win;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_width = src_width;
    xcb_out.src_height = src_height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_cursor_checked (xcb_connection_t      *c,
                                    xcb_window_t           window,
                                    xcb_cursor_t           cursor,
                                    xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_cursor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.cursor = cursor;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_cursor (xcb_connection_t      *c,
                            xcb_window_t           window,
                            xcb_cursor_t           cursor,
                            xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_cursor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.cursor = cursor;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_add_master_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_add_master_t *_aux = (xcb_input_add_master_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_add_master_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_input_add_master_name (const xcb_input_add_master_t *R)
{
    return (char *) (R + 1);
}

int
xcb_input_add_master_name_length (const xcb_input_add_master_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_input_add_master_name_end (const xcb_input_add_master_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_add_master_next (xcb_input_add_master_iterator_t *i)
{
    xcb_input_add_master_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_add_master_t *)(((char *)R) + xcb_input_add_master_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_add_master_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_add_master_end (xcb_input_add_master_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_add_master_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_remove_master_next (xcb_input_remove_master_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_remove_master_t);
}

xcb_generic_iterator_t
xcb_input_remove_master_end (xcb_input_remove_master_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_attach_slave_next (xcb_input_attach_slave_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_attach_slave_t);
}

xcb_generic_iterator_t
xcb_input_attach_slave_end (xcb_input_attach_slave_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_detach_slave_next (xcb_input_detach_slave_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_detach_slave_t);
}

xcb_generic_iterator_t
xcb_input_detach_slave_end (xcb_input_detach_slave_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

char *
xcb_input_hierarchy_change_data_add_master_name (const xcb_input_hierarchy_change_data_t *S)
{
    return S->add_master.name;
}

int
xcb_input_hierarchy_change_data_add_master_name_length (const xcb_input_hierarchy_change_t *R,
                                                        const xcb_input_hierarchy_change_data_t *S)
{
    return S->add_master.name_len;
}

xcb_generic_iterator_t
xcb_input_hierarchy_change_data_add_master_name_end (const xcb_input_hierarchy_change_t *R,
                                                     const xcb_input_hierarchy_change_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->add_master.name + S->add_master.name_len;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_hierarchy_change_data_serialize (void                                    **_buffer,
                                           uint16_t                                  type,
                                           const xcb_input_hierarchy_change_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[16];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_ADD_MASTER) {
        /* xcb_input_hierarchy_change_data_t.add_master.name_len */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->add_master.name_len;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_hierarchy_change_data_t.add_master.send_core */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->add_master.send_core;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.add_master.enable */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->add_master.enable;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* name */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->add_master.name;
        xcb_block_len += _aux->add_master.name_len * sizeof(char);
        xcb_parts[xcb_parts_idx].iov_len = _aux->add_master.name_len * sizeof(char);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(char);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_REMOVE_MASTER) {
        /* xcb_input_hierarchy_change_data_t.remove_master.deviceid */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->remove_master.deviceid;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->remove_master.return_mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_pointer */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->remove_master.return_pointer;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_keyboard */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->remove_master.return_keyboard;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_ATTACH_SLAVE) {
        /* xcb_input_hierarchy_change_data_t.attach_slave.deviceid */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->attach_slave.deviceid;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.attach_slave.master */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->attach_slave.master;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_DETACH_SLAVE) {
        /* xcb_input_hierarchy_change_data_t.detach_slave.deviceid */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->detach_slave.deviceid;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_device_id_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.detach_slave.pad2 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_hierarchy_change_data_unpack (const void                         *_buffer,
                                        uint16_t                            type,
                                        xcb_input_hierarchy_change_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_ADD_MASTER) {
        /* xcb_input_hierarchy_change_data_t.add_master.name_len */
        _aux->add_master.name_len = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_hierarchy_change_data_t.add_master.send_core */
        _aux->add_master.send_core = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.add_master.enable */
        _aux->add_master.enable = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* name */
        _aux->add_master.name = (char *)xcb_tmp;
        xcb_block_len += _aux->add_master.name_len * sizeof(char);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(char);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_REMOVE_MASTER) {
        /* xcb_input_hierarchy_change_data_t.remove_master.deviceid */
        _aux->remove_master.deviceid = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_mode */
        _aux->remove_master.return_mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.pad1 */
        _aux->remove_master.pad1 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_pointer */
        _aux->remove_master.return_pointer = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.remove_master.return_keyboard */
        _aux->remove_master.return_keyboard = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_ATTACH_SLAVE) {
        /* xcb_input_hierarchy_change_data_t.attach_slave.deviceid */
        _aux->attach_slave.deviceid = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.attach_slave.master */
        _aux->attach_slave.master = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
    }
    if(type == XCB_INPUT_HIERARCHY_CHANGE_TYPE_DETACH_SLAVE) {
        /* xcb_input_hierarchy_change_data_t.detach_slave.deviceid */
        _aux->detach_slave.deviceid = *(xcb_input_device_id_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_device_id_t);
        xcb_tmp += sizeof(xcb_input_device_id_t);
        xcb_align_to = ALIGNOF(xcb_input_device_id_t);
        /* xcb_input_hierarchy_change_data_t.detach_slave.pad2 */
        _aux->detach_slave.pad2[0] = *(uint8_t *)xcb_tmp;
        _aux->detach_slave.pad2[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_hierarchy_change_data_sizeof (const void  *_buffer,
                                        uint16_t     type)
{
    xcb_input_hierarchy_change_data_t _aux;
    return xcb_input_hierarchy_change_data_unpack(_buffer, type, &_aux);
}

int
xcb_input_hierarchy_change_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_hierarchy_change_t *_aux = (xcb_input_hierarchy_change_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_hierarchy_change_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_hierarchy_change_data_sizeof(xcb_tmp, _aux->type);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_hierarchy_change_data (const xcb_input_hierarchy_change_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_hierarchy_change_next (xcb_input_hierarchy_change_iterator_t *i)
{
    xcb_input_hierarchy_change_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_hierarchy_change_t *)(((char *)R) + xcb_input_hierarchy_change_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_hierarchy_change_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_hierarchy_change_end (xcb_input_hierarchy_change_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_hierarchy_change_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_xi_change_hierarchy_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_change_hierarchy_request_t *_aux = (xcb_input_xi_change_hierarchy_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_xi_change_hierarchy_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* changes */
    for(i=0; i<_aux->num_changes; i++) {
        xcb_tmp_len = xcb_input_hierarchy_change_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_hierarchy_change_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_xi_change_hierarchy_checked (xcb_connection_t                   *c,
                                       uint8_t                             num_changes,
                                       const xcb_input_hierarchy_change_t *changes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_HIERARCHY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_hierarchy_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.num_changes = num_changes;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_hierarchy_change_t changes */
    xcb_parts[4].iov_base = (char *) changes;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)changes;
    for(i=0; i<num_changes; i++) {
        xcb_tmp_len = xcb_input_hierarchy_change_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_hierarchy (xcb_connection_t                   *c,
                               uint8_t                             num_changes,
                               const xcb_input_hierarchy_change_t *changes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_HIERARCHY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_hierarchy_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.num_changes = num_changes;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_hierarchy_change_t changes */
    xcb_parts[4].iov_base = (char *) changes;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)changes;
    for(i=0; i<num_changes; i++) {
        xcb_tmp_len = xcb_input_hierarchy_change_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_xi_change_hierarchy_changes_length (const xcb_input_xi_change_hierarchy_request_t *R)
{
    return R->num_changes;
}

xcb_input_hierarchy_change_iterator_t
xcb_input_xi_change_hierarchy_changes_iterator (const xcb_input_xi_change_hierarchy_request_t *R)
{
    xcb_input_hierarchy_change_iterator_t i;
    i.data = (xcb_input_hierarchy_change_t *) (R + 1);
    i.rem = R->num_changes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_input_xi_set_client_pointer_checked (xcb_connection_t      *c,
                                         xcb_window_t           window,
                                         xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SET_CLIENT_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_set_client_pointer_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_set_client_pointer (xcb_connection_t      *c,
                                 xcb_window_t           window,
                                 xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SET_CLIENT_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_set_client_pointer_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_client_pointer_cookie_t
xcb_input_xi_get_client_pointer (xcb_connection_t *c,
                                 xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_CLIENT_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_client_pointer_cookie_t xcb_ret;
    xcb_input_xi_get_client_pointer_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_client_pointer_cookie_t
xcb_input_xi_get_client_pointer_unchecked (xcb_connection_t *c,
                                           xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_CLIENT_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_client_pointer_cookie_t xcb_ret;
    xcb_input_xi_get_client_pointer_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_client_pointer_reply_t *
xcb_input_xi_get_client_pointer_reply (xcb_connection_t                          *c,
                                       xcb_input_xi_get_client_pointer_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_input_xi_get_client_pointer_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_event_mask_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_event_mask_t *_aux = (xcb_input_event_mask_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_event_mask_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* mask */
    xcb_block_len += _aux->mask_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_event_mask_mask (const xcb_input_event_mask_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_event_mask_mask_length (const xcb_input_event_mask_t *R)
{
    return R->mask_len;
}

xcb_generic_iterator_t
xcb_input_event_mask_mask_end (const xcb_input_event_mask_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->mask_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_event_mask_next (xcb_input_event_mask_iterator_t *i)
{
    xcb_input_event_mask_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_event_mask_t *)(((char *)R) + xcb_input_event_mask_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_event_mask_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_event_mask_end (xcb_input_event_mask_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_event_mask_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_xi_select_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_select_events_request_t *_aux = (xcb_input_xi_select_events_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_xi_select_events_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* masks */
    for(i=0; i<_aux->num_mask; i++) {
        xcb_tmp_len = xcb_input_event_mask_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_event_mask_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_xi_select_events_checked (xcb_connection_t             *c,
                                    xcb_window_t                  window,
                                    uint16_t                      num_mask,
                                    const xcb_input_event_mask_t *masks)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_select_events_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.window = window;
    xcb_out.num_mask = num_mask;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_mask_t masks */
    xcb_parts[4].iov_base = (char *) masks;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)masks;
    for(i=0; i<num_mask; i++) {
        xcb_tmp_len = xcb_input_event_mask_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_select_events (xcb_connection_t             *c,
                            xcb_window_t                  window,
                            uint16_t                      num_mask,
                            const xcb_input_event_mask_t *masks)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_select_events_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.window = window;
    xcb_out.num_mask = num_mask;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_mask_t masks */
    xcb_parts[4].iov_base = (char *) masks;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)masks;
    for(i=0; i<num_mask; i++) {
        xcb_tmp_len = xcb_input_event_mask_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_xi_select_events_masks_length (const xcb_input_xi_select_events_request_t *R)
{
    return R->num_mask;
}

xcb_input_event_mask_iterator_t
xcb_input_xi_select_events_masks_iterator (const xcb_input_xi_select_events_request_t *R)
{
    xcb_input_event_mask_iterator_t i;
    i.data = (xcb_input_event_mask_t *) (R + 1);
    i.rem = R->num_mask;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_query_version_cookie_t
xcb_input_xi_query_version (xcb_connection_t *c,
                            uint16_t          major_version,
                            uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_version_cookie_t xcb_ret;
    xcb_input_xi_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_query_version_cookie_t
xcb_input_xi_query_version_unchecked (xcb_connection_t *c,
                                      uint16_t          major_version,
                                      uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_version_cookie_t xcb_ret;
    xcb_input_xi_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_query_version_reply_t *
xcb_input_xi_query_version_reply (xcb_connection_t                     *c,
                                  xcb_input_xi_query_version_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_input_xi_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_button_class_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_button_class_t *_aux = (xcb_input_button_class_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_button_class_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* state */
    xcb_block_len += ((_aux->num_buttons + 31) / 32) * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* labels */
    xcb_block_len += _aux->num_buttons * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_button_class_state (const xcb_input_button_class_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_button_class_state_length (const xcb_input_button_class_t *R)
{
    return ((R->num_buttons + 31) / 32);
}

xcb_generic_iterator_t
xcb_input_button_class_state_end (const xcb_input_button_class_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (((R->num_buttons + 31) / 32));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_atom_t *
xcb_input_button_class_labels (const xcb_input_button_class_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_button_class_state_end(R);
    return (xcb_atom_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_atom_t, prev.index) + 0);
}

int
xcb_input_button_class_labels_length (const xcb_input_button_class_t *R)
{
    return R->num_buttons;
}

xcb_generic_iterator_t
xcb_input_button_class_labels_end (const xcb_input_button_class_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_button_class_state_end(R);
    i.data = ((xcb_atom_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_atom_t, prev.index))) + (R->num_buttons);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_button_class_next (xcb_input_button_class_iterator_t *i)
{
    xcb_input_button_class_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_button_class_t *)(((char *)R) + xcb_input_button_class_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_button_class_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_button_class_end (xcb_input_button_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_button_class_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_key_class_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_key_class_t *_aux = (xcb_input_key_class_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_key_class_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keys */
    xcb_block_len += _aux->num_keys * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_key_class_keys (const xcb_input_key_class_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_key_class_keys_length (const xcb_input_key_class_t *R)
{
    return R->num_keys;
}

xcb_generic_iterator_t
xcb_input_key_class_keys_end (const xcb_input_key_class_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_keys);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_key_class_next (xcb_input_key_class_iterator_t *i)
{
    xcb_input_key_class_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_key_class_t *)(((char *)R) + xcb_input_key_class_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_key_class_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_key_class_end (xcb_input_key_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_key_class_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_input_scroll_class_next (xcb_input_scroll_class_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_scroll_class_t);
}

xcb_generic_iterator_t
xcb_input_scroll_class_end (xcb_input_scroll_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_touch_class_next (xcb_input_touch_class_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_touch_class_t);
}

xcb_generic_iterator_t
xcb_input_touch_class_end (xcb_input_touch_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_input_valuator_class_next (xcb_input_valuator_class_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_valuator_class_t);
}

xcb_generic_iterator_t
xcb_input_valuator_class_end (xcb_input_valuator_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

uint32_t *
xcb_input_device_class_data_key_keys (const xcb_input_device_class_data_t *S)
{
    return S->key.keys;
}

int
xcb_input_device_class_data_key_keys_length (const xcb_input_device_class_t *R,
                                             const xcb_input_device_class_data_t *S)
{
    return S->key.num_keys;
}

xcb_generic_iterator_t
xcb_input_device_class_data_key_keys_end (const xcb_input_device_class_t *R,
                                          const xcb_input_device_class_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key.keys + S->key.num_keys;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_device_class_data_button_state (const xcb_input_device_class_data_t *S)
{
    return S->button.state;
}

int
xcb_input_device_class_data_button_state_length (const xcb_input_device_class_t *R,
                                                 const xcb_input_device_class_data_t *S)
{
    return ((S->button.num_buttons + 31) / 32);
}

xcb_generic_iterator_t
xcb_input_device_class_data_button_state_end (const xcb_input_device_class_t *R,
                                              const xcb_input_device_class_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->button.state + ((S->button.num_buttons + 31) / 32);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_input_device_class_data_button_labels (const xcb_input_device_class_data_t *S)
{
    return S->button.labels;
}

int
xcb_input_device_class_data_button_labels_length (const xcb_input_device_class_t *R,
                                                  const xcb_input_device_class_data_t *S)
{
    return S->button.num_buttons;
}

xcb_generic_iterator_t
xcb_input_device_class_data_button_labels_end (const xcb_input_device_class_t *R,
                                               const xcb_input_device_class_data_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->button.labels + S->button.num_buttons;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_device_class_data_serialize (void                                **_buffer,
                                       uint16_t                              type,
                                       const xcb_input_device_class_data_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[24];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_KEY) {
        /* xcb_input_device_class_data_t.key.num_keys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key.num_keys;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->key.keys;
        xcb_block_len += _aux->key.num_keys * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->key.num_keys * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_BUTTON) {
        /* xcb_input_device_class_data_t.button.num_buttons */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->button.num_buttons;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* state */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->button.state;
        xcb_block_len += ((_aux->button.num_buttons + 31) / 32) * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = ((_aux->button.num_buttons + 31) / 32) * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* labels */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->button.labels;
        xcb_block_len += _aux->button.num_buttons * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->button.num_buttons * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_VALUATOR) {
        /* xcb_input_device_class_data_t.valuator.number */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.number;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.valuator.label */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.label;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
        /* xcb_input_device_class_data_t.valuator.min */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.min;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_fp3232_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.max */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.max;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_fp3232_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.value */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.value;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_fp3232_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.resolution */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.resolution;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_class_data_t.valuator.mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->valuator.mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.valuator.pad0 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*3;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*3;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_SCROLL) {
        /* xcb_input_device_class_data_t.scroll.number */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->scroll.number;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.scroll.scroll_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->scroll.scroll_type;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.scroll.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.scroll.flags */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->scroll.flags;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_class_data_t.scroll.increment */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->scroll.increment;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_input_fp3232_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_TOUCH) {
        /* xcb_input_device_class_data_t.touch.mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->touch.mode;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.touch.num_touches */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->touch.num_touches;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_device_class_data_unpack (const void                     *_buffer,
                                    uint16_t                        type,
                                    xcb_input_device_class_data_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 2;


    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_KEY) {
        /* xcb_input_device_class_data_t.key.num_keys */
        _aux->key.num_keys = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keys */
        _aux->key.keys = (uint32_t *)xcb_tmp;
        xcb_block_len += _aux->key.num_keys * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_BUTTON) {
        /* xcb_input_device_class_data_t.button.num_buttons */
        _aux->button.num_buttons = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* state */
        _aux->button.state = (uint32_t *)xcb_tmp;
        xcb_block_len += ((_aux->button.num_buttons + 31) / 32) * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* labels */
        _aux->button.labels = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += _aux->button.num_buttons * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_VALUATOR) {
        /* xcb_input_device_class_data_t.valuator.number */
        _aux->valuator.number = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.valuator.label */
        _aux->valuator.label = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
        /* xcb_input_device_class_data_t.valuator.min */
        _aux->valuator.min = *(xcb_input_fp3232_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_tmp += sizeof(xcb_input_fp3232_t);
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.max */
        _aux->valuator.max = *(xcb_input_fp3232_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_tmp += sizeof(xcb_input_fp3232_t);
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.value */
        _aux->valuator.value = *(xcb_input_fp3232_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_tmp += sizeof(xcb_input_fp3232_t);
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
        /* xcb_input_device_class_data_t.valuator.resolution */
        _aux->valuator.resolution = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_class_data_t.valuator.mode */
        _aux->valuator.mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.valuator.pad0 */
        _aux->valuator.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->valuator.pad0[1] = *(uint8_t *)xcb_tmp;
        _aux->valuator.pad0[2] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 3;
        xcb_tmp += sizeof(uint8_t) * 3;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_SCROLL) {
        /* xcb_input_device_class_data_t.scroll.number */
        _aux->scroll.number = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.scroll.scroll_type */
        _aux->scroll.scroll_type = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_input_device_class_data_t.scroll.pad1 */
        _aux->scroll.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->scroll.pad1[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.scroll.flags */
        _aux->scroll.flags = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_input_device_class_data_t.scroll.increment */
        _aux->scroll.increment = *(xcb_input_fp3232_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_input_fp3232_t);
        xcb_tmp += sizeof(xcb_input_fp3232_t);
        xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    }
    if(type == XCB_INPUT_DEVICE_CLASS_TYPE_TOUCH) {
        /* xcb_input_device_class_data_t.touch.mode */
        _aux->touch.mode = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_input_device_class_data_t.touch.num_touches */
        _aux->touch.num_touches = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_device_class_data_sizeof (const void  *_buffer,
                                    uint16_t     type)
{
    xcb_input_device_class_data_t _aux;
    return xcb_input_device_class_data_unpack(_buffer, type, &_aux);
}

int
xcb_input_device_class_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_class_t *_aux = (xcb_input_device_class_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_class_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += xcb_input_device_class_data_sizeof(xcb_tmp, _aux->type);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

void *
xcb_input_device_class_data (const xcb_input_device_class_t *R)
{
    return (void *) (R + 1);
}

void
xcb_input_device_class_next (xcb_input_device_class_iterator_t *i)
{
    xcb_input_device_class_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_class_t *)(((char *)R) + xcb_input_device_class_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_class_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_device_class_end (xcb_input_device_class_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_class_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_xi_device_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_device_info_t *_aux = (xcb_input_xi_device_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_xi_device_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* classes */
    for(i=0; i<_aux->num_classes; i++) {
        xcb_tmp_len = xcb_input_device_class_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_device_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_input_xi_device_info_name (const xcb_input_xi_device_info_t *R)
{
    return (char *) (R + 1);
}

int
xcb_input_xi_device_info_name_length (const xcb_input_xi_device_info_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_input_xi_device_info_name_end (const xcb_input_xi_device_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_xi_device_info_classes_length (const xcb_input_xi_device_info_t *R)
{
    return R->num_classes;
}

xcb_input_device_class_iterator_t
xcb_input_xi_device_info_classes_iterator (const xcb_input_xi_device_info_t *R)
{
    xcb_input_device_class_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_xi_device_info_name_end(R);
    i.data = (xcb_input_device_class_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)));
    i.rem = R->num_classes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_input_xi_device_info_next (xcb_input_xi_device_info_iterator_t *i)
{
    xcb_input_xi_device_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_xi_device_info_t *)(((char *)R) + xcb_input_xi_device_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_xi_device_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_xi_device_info_end (xcb_input_xi_device_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_xi_device_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_input_xi_query_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_query_device_reply_t *_aux = (xcb_input_xi_query_device_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_xi_query_device_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* infos */
    for(i=0; i<_aux->num_infos; i++) {
        xcb_tmp_len = xcb_input_xi_device_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_xi_device_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_query_device_cookie_t
xcb_input_xi_query_device (xcb_connection_t      *c,
                           xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_device_cookie_t xcb_ret;
    xcb_input_xi_query_device_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_query_device_cookie_t
xcb_input_xi_query_device_unchecked (xcb_connection_t      *c,
                                     xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_QUERY_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_query_device_cookie_t xcb_ret;
    xcb_input_xi_query_device_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_xi_query_device_infos_length (const xcb_input_xi_query_device_reply_t *R)
{
    return R->num_infos;
}

xcb_input_xi_device_info_iterator_t
xcb_input_xi_query_device_infos_iterator (const xcb_input_xi_query_device_reply_t *R)
{
    xcb_input_xi_device_info_iterator_t i;
    i.data = (xcb_input_xi_device_info_t *) (R + 1);
    i.rem = R->num_infos;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_query_device_reply_t *
xcb_input_xi_query_device_reply (xcb_connection_t                    *c,
                                 xcb_input_xi_query_device_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_input_xi_query_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_xi_set_focus_checked (xcb_connection_t      *c,
                                xcb_window_t           window,
                                xcb_timestamp_t        time,
                                xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SET_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_set_focus_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_set_focus (xcb_connection_t      *c,
                        xcb_window_t           window,
                        xcb_timestamp_t        time,
                        xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_SET_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_set_focus_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_focus_cookie_t
xcb_input_xi_get_focus (xcb_connection_t      *c,
                        xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_focus_cookie_t xcb_ret;
    xcb_input_xi_get_focus_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_focus_cookie_t
xcb_input_xi_get_focus_unchecked (xcb_connection_t      *c,
                                  xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_focus_cookie_t xcb_ret;
    xcb_input_xi_get_focus_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_focus_reply_t *
xcb_input_xi_get_focus_reply (xcb_connection_t                 *c,
                              xcb_input_xi_get_focus_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_input_xi_get_focus_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_xi_grab_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_grab_device_request_t *_aux = (xcb_input_xi_grab_device_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_grab_device_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* mask */
    xcb_block_len += _aux->mask_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_grab_device_cookie_t
xcb_input_xi_grab_device (xcb_connection_t      *c,
                          xcb_window_t           window,
                          xcb_timestamp_t        time,
                          xcb_cursor_t           cursor,
                          xcb_input_device_id_t  deviceid,
                          uint8_t                mode,
                          uint8_t                paired_device_mode,
                          uint8_t                owner_events,
                          uint16_t               mask_len,
                          const uint32_t        *mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_xi_grab_device_cookie_t xcb_ret;
    xcb_input_xi_grab_device_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.time = time;
    xcb_out.cursor = cursor;
    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.paired_device_mode = paired_device_mode;
    xcb_out.owner_events = owner_events;
    xcb_out.pad0 = 0;
    xcb_out.mask_len = mask_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t mask */
    xcb_parts[4].iov_base = (char *) mask;
    xcb_parts[4].iov_len = mask_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_grab_device_cookie_t
xcb_input_xi_grab_device_unchecked (xcb_connection_t      *c,
                                    xcb_window_t           window,
                                    xcb_timestamp_t        time,
                                    xcb_cursor_t           cursor,
                                    xcb_input_device_id_t  deviceid,
                                    uint8_t                mode,
                                    uint8_t                paired_device_mode,
                                    uint8_t                owner_events,
                                    uint16_t               mask_len,
                                    const uint32_t        *mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_input_xi_grab_device_cookie_t xcb_ret;
    xcb_input_xi_grab_device_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.time = time;
    xcb_out.cursor = cursor;
    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.paired_device_mode = paired_device_mode;
    xcb_out.owner_events = owner_events;
    xcb_out.pad0 = 0;
    xcb_out.mask_len = mask_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t mask */
    xcb_parts[4].iov_base = (char *) mask;
    xcb_parts[4].iov_len = mask_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_grab_device_reply_t *
xcb_input_xi_grab_device_reply (xcb_connection_t                   *c,
                                xcb_input_xi_grab_device_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_input_xi_grab_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_input_xi_ungrab_device_checked (xcb_connection_t      *c,
                                    xcb_timestamp_t        time,
                                    xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_ungrab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_ungrab_device (xcb_connection_t      *c,
                            xcb_timestamp_t        time,
                            xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_ungrab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_allow_events_checked (xcb_connection_t      *c,
                                   xcb_timestamp_t        time,
                                   xcb_input_device_id_t  deviceid,
                                   uint8_t                event_mode,
                                   uint32_t               touchid,
                                   xcb_window_t           grab_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_ALLOW_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_allow_events_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    xcb_out.event_mode = event_mode;
    xcb_out.pad0 = 0;
    xcb_out.touchid = touchid;
    xcb_out.grab_window = grab_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_allow_events (xcb_connection_t      *c,
                           xcb_timestamp_t        time,
                           xcb_input_device_id_t  deviceid,
                           uint8_t                event_mode,
                           uint32_t               touchid,
                           xcb_window_t           grab_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_ALLOW_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_allow_events_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.deviceid = deviceid;
    xcb_out.event_mode = event_mode;
    xcb_out.pad0 = 0;
    xcb_out.touchid = touchid;
    xcb_out.grab_window = grab_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_input_grab_modifier_info_next (xcb_input_grab_modifier_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_grab_modifier_info_t);
}

xcb_generic_iterator_t
xcb_input_grab_modifier_info_end (xcb_input_grab_modifier_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_xi_passive_grab_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_passive_grab_device_request_t *_aux = (xcb_input_xi_passive_grab_device_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_passive_grab_device_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* mask */
    xcb_block_len += _aux->mask_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* modifiers */
    xcb_block_len += _aux->num_modifiers * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_passive_grab_device_cookie_t
xcb_input_xi_passive_grab_device (xcb_connection_t      *c,
                                  xcb_timestamp_t        time,
                                  xcb_window_t           grab_window,
                                  xcb_cursor_t           cursor,
                                  uint32_t               detail,
                                  xcb_input_device_id_t  deviceid,
                                  uint16_t               num_modifiers,
                                  uint16_t               mask_len,
                                  uint8_t                grab_type,
                                  uint8_t                grab_mode,
                                  uint8_t                paired_device_mode,
                                  uint8_t                owner_events,
                                  const uint32_t        *mask,
                                  const uint32_t        *modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_PASSIVE_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[8];
    xcb_input_xi_passive_grab_device_cookie_t xcb_ret;
    xcb_input_xi_passive_grab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.grab_window = grab_window;
    xcb_out.cursor = cursor;
    xcb_out.detail = detail;
    xcb_out.deviceid = deviceid;
    xcb_out.num_modifiers = num_modifiers;
    xcb_out.mask_len = mask_len;
    xcb_out.grab_type = grab_type;
    xcb_out.grab_mode = grab_mode;
    xcb_out.paired_device_mode = paired_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t mask */
    xcb_parts[4].iov_base = (char *) mask;
    xcb_parts[4].iov_len = mask_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* uint32_t modifiers */
    xcb_parts[6].iov_base = (char *) modifiers;
    xcb_parts[6].iov_len = num_modifiers * sizeof(uint32_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_passive_grab_device_cookie_t
xcb_input_xi_passive_grab_device_unchecked (xcb_connection_t      *c,
                                            xcb_timestamp_t        time,
                                            xcb_window_t           grab_window,
                                            xcb_cursor_t           cursor,
                                            uint32_t               detail,
                                            xcb_input_device_id_t  deviceid,
                                            uint16_t               num_modifiers,
                                            uint16_t               mask_len,
                                            uint8_t                grab_type,
                                            uint8_t                grab_mode,
                                            uint8_t                paired_device_mode,
                                            uint8_t                owner_events,
                                            const uint32_t        *mask,
                                            const uint32_t        *modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_PASSIVE_GRAB_DEVICE,
        .isvoid = 0
    };

    struct iovec xcb_parts[8];
    xcb_input_xi_passive_grab_device_cookie_t xcb_ret;
    xcb_input_xi_passive_grab_device_request_t xcb_out;

    xcb_out.time = time;
    xcb_out.grab_window = grab_window;
    xcb_out.cursor = cursor;
    xcb_out.detail = detail;
    xcb_out.deviceid = deviceid;
    xcb_out.num_modifiers = num_modifiers;
    xcb_out.mask_len = mask_len;
    xcb_out.grab_type = grab_type;
    xcb_out.grab_mode = grab_mode;
    xcb_out.paired_device_mode = paired_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t mask */
    xcb_parts[4].iov_base = (char *) mask;
    xcb_parts[4].iov_len = mask_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* uint32_t modifiers */
    xcb_parts[6].iov_base = (char *) modifiers;
    xcb_parts[6].iov_len = num_modifiers * sizeof(uint32_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_grab_modifier_info_t *
xcb_input_xi_passive_grab_device_modifiers (const xcb_input_xi_passive_grab_device_reply_t *R)
{
    return (xcb_input_grab_modifier_info_t *) (R + 1);
}

int
xcb_input_xi_passive_grab_device_modifiers_length (const xcb_input_xi_passive_grab_device_reply_t *R)
{
    return R->num_modifiers;
}

xcb_input_grab_modifier_info_iterator_t
xcb_input_xi_passive_grab_device_modifiers_iterator (const xcb_input_xi_passive_grab_device_reply_t *R)
{
    xcb_input_grab_modifier_info_iterator_t i;
    i.data = (xcb_input_grab_modifier_info_t *) (R + 1);
    i.rem = R->num_modifiers;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_passive_grab_device_reply_t *
xcb_input_xi_passive_grab_device_reply (xcb_connection_t                           *c,
                                        xcb_input_xi_passive_grab_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_input_xi_passive_grab_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_xi_passive_ungrab_device_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_passive_ungrab_device_request_t *_aux = (xcb_input_xi_passive_ungrab_device_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_passive_ungrab_device_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* modifiers */
    xcb_block_len += _aux->num_modifiers * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_xi_passive_ungrab_device_checked (xcb_connection_t      *c,
                                            xcb_window_t           grab_window,
                                            uint32_t               detail,
                                            xcb_input_device_id_t  deviceid,
                                            uint16_t               num_modifiers,
                                            uint8_t                grab_type,
                                            const uint32_t        *modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_PASSIVE_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_passive_ungrab_device_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.detail = detail;
    xcb_out.deviceid = deviceid;
    xcb_out.num_modifiers = num_modifiers;
    xcb_out.grab_type = grab_type;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t modifiers */
    xcb_parts[4].iov_base = (char *) modifiers;
    xcb_parts[4].iov_len = num_modifiers * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_passive_ungrab_device (xcb_connection_t      *c,
                                    xcb_window_t           grab_window,
                                    uint32_t               detail,
                                    xcb_input_device_id_t  deviceid,
                                    uint16_t               num_modifiers,
                                    uint8_t                grab_type,
                                    const uint32_t        *modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_PASSIVE_UNGRAB_DEVICE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_passive_ungrab_device_request_t xcb_out;

    xcb_out.grab_window = grab_window;
    xcb_out.detail = detail;
    xcb_out.deviceid = deviceid;
    xcb_out.num_modifiers = num_modifiers;
    xcb_out.grab_type = grab_type;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t modifiers */
    xcb_parts[4].iov_base = (char *) modifiers;
    xcb_parts[4].iov_len = num_modifiers * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_input_xi_passive_ungrab_device_modifiers (const xcb_input_xi_passive_ungrab_device_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_xi_passive_ungrab_device_modifiers_length (const xcb_input_xi_passive_ungrab_device_request_t *R)
{
    return R->num_modifiers;
}

xcb_generic_iterator_t
xcb_input_xi_passive_ungrab_device_modifiers_end (const xcb_input_xi_passive_ungrab_device_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_modifiers);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_xi_list_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_list_properties_reply_t *_aux = (xcb_input_xi_list_properties_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_list_properties_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* properties */
    xcb_block_len += _aux->num_properties * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_list_properties_cookie_t
xcb_input_xi_list_properties (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_LIST_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_list_properties_cookie_t xcb_ret;
    xcb_input_xi_list_properties_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_list_properties_cookie_t
xcb_input_xi_list_properties_unchecked (xcb_connection_t      *c,
                                        xcb_input_device_id_t  deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_LIST_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_list_properties_cookie_t xcb_ret;
    xcb_input_xi_list_properties_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_input_xi_list_properties_properties (const xcb_input_xi_list_properties_reply_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_input_xi_list_properties_properties_length (const xcb_input_xi_list_properties_reply_t *R)
{
    return R->num_properties;
}

xcb_generic_iterator_t
xcb_input_xi_list_properties_properties_end (const xcb_input_xi_list_properties_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->num_properties);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_list_properties_reply_t *
xcb_input_xi_list_properties_reply (xcb_connection_t                       *c,
                                    xcb_input_xi_list_properties_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_input_xi_list_properties_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

uint8_t *
xcb_input_xi_change_property_items_data_8 (const xcb_input_xi_change_property_items_t *S)
{
    return S->data8;
}

int
xcb_input_xi_change_property_items_data_8_length (const xcb_input_xi_change_property_request_t *R,
                                                  const xcb_input_xi_change_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_8_end (const xcb_input_xi_change_property_request_t *R,
                                               const xcb_input_xi_change_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data8 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint16_t *
xcb_input_xi_change_property_items_data_16 (const xcb_input_xi_change_property_items_t *S)
{
    return S->data16;
}

int
xcb_input_xi_change_property_items_data_16_length (const xcb_input_xi_change_property_request_t *R,
                                                   const xcb_input_xi_change_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_16_end (const xcb_input_xi_change_property_request_t *R,
                                                const xcb_input_xi_change_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data16 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_xi_change_property_items_data_32 (const xcb_input_xi_change_property_items_t *S)
{
    return S->data32;
}

int
xcb_input_xi_change_property_items_data_32_length (const xcb_input_xi_change_property_request_t *R,
                                                   const xcb_input_xi_change_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_change_property_items_data_32_end (const xcb_input_xi_change_property_request_t *R,
                                                const xcb_input_xi_change_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data32 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_xi_change_property_items_serialize (void                                       **_buffer,
                                              uint32_t                                     num_items,
                                              uint8_t                                      format,
                                              const xcb_input_xi_change_property_items_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[9];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data8;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data16;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data32;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_xi_change_property_items_unpack (const void                            *_buffer,
                                           uint32_t                               num_items,
                                           uint8_t                                format,
                                           xcb_input_xi_change_property_items_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        _aux->data8 = (uint8_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        _aux->data16 = (uint16_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        _aux->data32 = (uint32_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_xi_change_property_items_sizeof (const void  *_buffer,
                                           uint32_t     num_items,
                                           uint8_t      format)
{
    xcb_input_xi_change_property_items_t _aux;
    return xcb_input_xi_change_property_items_unpack(_buffer, num_items, format, &_aux);
}

int
xcb_input_xi_change_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_change_property_request_t *_aux = (xcb_input_xi_change_property_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_change_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += xcb_input_xi_change_property_items_sizeof(xcb_tmp, _aux->num_items, _aux->format);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_xi_change_property_checked (xcb_connection_t      *c,
                                      xcb_input_device_id_t  deviceid,
                                      uint8_t                mode,
                                      uint8_t                format,
                                      xcb_atom_t             property,
                                      xcb_atom_t             type,
                                      uint32_t               num_items,
                                      const void            *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.format = format;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_xi_change_property_items_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len =
      xcb_input_xi_change_property_items_sizeof (items, num_items, format);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_property (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid,
                              uint8_t                mode,
                              uint8_t                format,
                              xcb_atom_t             property,
                              xcb_atom_t             type,
                              uint32_t               num_items,
                              const void            *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.format = format;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_xi_change_property_items_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len =
      xcb_input_xi_change_property_items_sizeof (items, num_items, format);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_property_aux_checked (xcb_connection_t                           *c,
                                          xcb_input_device_id_t                       deviceid,
                                          uint8_t                                     mode,
                                          uint8_t                                     format,
                                          xcb_atom_t                                  property,
                                          xcb_atom_t                                  type,
                                          uint32_t                                    num_items,
                                          const xcb_input_xi_change_property_items_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_property_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.format = format;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_xi_change_property_items_t items */
    xcb_parts[4].iov_len =
      xcb_input_xi_change_property_items_serialize (&xcb_aux0, num_items, format, items);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_change_property_aux (xcb_connection_t                           *c,
                                  xcb_input_device_id_t                       deviceid,
                                  uint8_t                                     mode,
                                  uint8_t                                     format,
                                  xcb_atom_t                                  property,
                                  xcb_atom_t                                  type,
                                  uint32_t                                    num_items,
                                  const xcb_input_xi_change_property_items_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_change_property_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceid = deviceid;
    xcb_out.mode = mode;
    xcb_out.format = format;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_xi_change_property_items_t items */
    xcb_parts[4].iov_len =
      xcb_input_xi_change_property_items_serialize (&xcb_aux0, num_items, format, items);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_input_xi_change_property_items (const xcb_input_xi_change_property_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_input_xi_delete_property_checked (xcb_connection_t      *c,
                                      xcb_input_device_id_t  deviceid,
                                      xcb_atom_t             property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_DELETE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_delete_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_delete_property (xcb_connection_t      *c,
                              xcb_input_device_id_t  deviceid,
                              xcb_atom_t             property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_DELETE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_delete_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_input_xi_get_property_items_data_8 (const xcb_input_xi_get_property_items_t *S)
{
    return S->data8;
}

int
xcb_input_xi_get_property_items_data_8_length (const xcb_input_xi_get_property_reply_t *R,
                                               const xcb_input_xi_get_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_8_end (const xcb_input_xi_get_property_reply_t *R,
                                            const xcb_input_xi_get_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data8 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint16_t *
xcb_input_xi_get_property_items_data_16 (const xcb_input_xi_get_property_items_t *S)
{
    return S->data16;
}

int
xcb_input_xi_get_property_items_data_16_length (const xcb_input_xi_get_property_reply_t *R,
                                                const xcb_input_xi_get_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_16_end (const xcb_input_xi_get_property_reply_t *R,
                                             const xcb_input_xi_get_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data16 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint32_t *
xcb_input_xi_get_property_items_data_32 (const xcb_input_xi_get_property_items_t *S)
{
    return S->data32;
}

int
xcb_input_xi_get_property_items_data_32_length (const xcb_input_xi_get_property_reply_t *R,
                                                const xcb_input_xi_get_property_items_t *S)
{
    return R->num_items;
}

xcb_generic_iterator_t
xcb_input_xi_get_property_items_data_32_end (const xcb_input_xi_get_property_reply_t *R,
                                             const xcb_input_xi_get_property_items_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->data32 + R->num_items;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_input_xi_get_property_items_serialize (void                                    **_buffer,
                                           uint32_t                                  num_items,
                                           uint8_t                                   format,
                                           const xcb_input_xi_get_property_items_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[9];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data8;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data16;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->data32;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = num_items * sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_input_xi_get_property_items_unpack (const void                         *_buffer,
                                        uint32_t                            num_items,
                                        uint8_t                             format,
                                        xcb_input_xi_get_property_items_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(format == XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data8 */
        _aux->data8 = (uint8_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data16 */
        _aux->data16 = (uint16_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(format == XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* data32 */
        _aux->data32 = (uint32_t *)xcb_tmp;
        xcb_block_len += num_items * sizeof(uint32_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_input_xi_get_property_items_sizeof (const void  *_buffer,
                                        uint32_t     num_items,
                                        uint8_t      format)
{
    xcb_input_xi_get_property_items_t _aux;
    return xcb_input_xi_get_property_items_unpack(_buffer, num_items, format, &_aux);
}

int
xcb_input_xi_get_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_get_property_reply_t *_aux = (xcb_input_xi_get_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_get_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += xcb_input_xi_get_property_items_sizeof(xcb_tmp, _aux->num_items, _aux->format);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_get_property_cookie_t
xcb_input_xi_get_property (xcb_connection_t      *c,
                           xcb_input_device_id_t  deviceid,
                           uint8_t                _delete,
                           xcb_atom_t             property,
                           xcb_atom_t             type,
                           uint32_t               offset,
                           uint32_t               len)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_property_cookie_t xcb_ret;
    xcb_input_xi_get_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    xcb_out._delete = _delete;
    xcb_out.pad0 = 0;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.offset = offset;
    xcb_out.len = len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_property_cookie_t
xcb_input_xi_get_property_unchecked (xcb_connection_t      *c,
                                     xcb_input_device_id_t  deviceid,
                                     uint8_t                _delete,
                                     xcb_atom_t             property,
                                     xcb_atom_t             type,
                                     uint32_t               offset,
                                     uint32_t               len)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_property_cookie_t xcb_ret;
    xcb_input_xi_get_property_request_t xcb_out;

    xcb_out.deviceid = deviceid;
    xcb_out._delete = _delete;
    xcb_out.pad0 = 0;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.offset = offset;
    xcb_out.len = len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_input_xi_get_property_items (const xcb_input_xi_get_property_reply_t *R)
{
    return (void *) (R + 1);
}

xcb_input_xi_get_property_reply_t *
xcb_input_xi_get_property_reply (xcb_connection_t                    *c,
                                 xcb_input_xi_get_property_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_input_xi_get_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_input_xi_get_selected_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_get_selected_events_reply_t *_aux = (xcb_input_xi_get_selected_events_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_xi_get_selected_events_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* masks */
    for(i=0; i<_aux->num_masks; i++) {
        xcb_tmp_len = xcb_input_event_mask_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_event_mask_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_xi_get_selected_events_cookie_t
xcb_input_xi_get_selected_events (xcb_connection_t *c,
                                  xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_SELECTED_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_selected_events_cookie_t xcb_ret;
    xcb_input_xi_get_selected_events_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_xi_get_selected_events_cookie_t
xcb_input_xi_get_selected_events_unchecked (xcb_connection_t *c,
                                            xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_GET_SELECTED_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_input_xi_get_selected_events_cookie_t xcb_ret;
    xcb_input_xi_get_selected_events_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_input_xi_get_selected_events_masks_length (const xcb_input_xi_get_selected_events_reply_t *R)
{
    return R->num_masks;
}

xcb_input_event_mask_iterator_t
xcb_input_xi_get_selected_events_masks_iterator (const xcb_input_xi_get_selected_events_reply_t *R)
{
    xcb_input_event_mask_iterator_t i;
    i.data = (xcb_input_event_mask_t *) (R + 1);
    i.rem = R->num_masks;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_xi_get_selected_events_reply_t *
xcb_input_xi_get_selected_events_reply (xcb_connection_t                           *c,
                                        xcb_input_xi_get_selected_events_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_input_xi_get_selected_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_input_barrier_release_pointer_info_next (xcb_input_barrier_release_pointer_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_barrier_release_pointer_info_t);
}

xcb_generic_iterator_t
xcb_input_barrier_release_pointer_info_end (xcb_input_barrier_release_pointer_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_xi_barrier_release_pointer_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_xi_barrier_release_pointer_request_t *_aux = (xcb_input_xi_barrier_release_pointer_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_xi_barrier_release_pointer_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* barriers */
    xcb_block_len += _aux->num_barriers * sizeof(xcb_input_barrier_release_pointer_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_barrier_release_pointer_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_input_xi_barrier_release_pointer_checked (xcb_connection_t                               *c,
                                              uint32_t                                        num_barriers,
                                              const xcb_input_barrier_release_pointer_info_t *barriers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_BARRIER_RELEASE_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_barrier_release_pointer_request_t xcb_out;

    xcb_out.num_barriers = num_barriers;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_barrier_release_pointer_info_t barriers */
    xcb_parts[4].iov_base = (char *) barriers;
    xcb_parts[4].iov_len = num_barriers * sizeof(xcb_input_barrier_release_pointer_info_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_input_xi_barrier_release_pointer (xcb_connection_t                               *c,
                                      uint32_t                                        num_barriers,
                                      const xcb_input_barrier_release_pointer_info_t *barriers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_input_id,
        .opcode = XCB_INPUT_XI_BARRIER_RELEASE_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_xi_barrier_release_pointer_request_t xcb_out;

    xcb_out.num_barriers = num_barriers;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_barrier_release_pointer_info_t barriers */
    xcb_parts[4].iov_base = (char *) barriers;
    xcb_parts[4].iov_len = num_barriers * sizeof(xcb_input_barrier_release_pointer_info_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_input_barrier_release_pointer_info_t *
xcb_input_xi_barrier_release_pointer_barriers (const xcb_input_xi_barrier_release_pointer_request_t *R)
{
    return (xcb_input_barrier_release_pointer_info_t *) (R + 1);
}

int
xcb_input_xi_barrier_release_pointer_barriers_length (const xcb_input_xi_barrier_release_pointer_request_t *R)
{
    return R->num_barriers;
}

xcb_input_barrier_release_pointer_info_iterator_t
xcb_input_xi_barrier_release_pointer_barriers_iterator (const xcb_input_xi_barrier_release_pointer_request_t *R)
{
    xcb_input_barrier_release_pointer_info_iterator_t i;
    i.data = (xcb_input_barrier_release_pointer_info_t *) (R + 1);
    i.rem = R->num_barriers;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_device_changed_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_changed_event_t *_aux = (xcb_input_device_changed_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_input_device_changed_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* classes */
    for(i=0; i<_aux->num_classes; i++) {
        xcb_tmp_len = xcb_input_device_class_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_input_device_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int
xcb_input_device_changed_classes_length (const xcb_input_device_changed_event_t *R)
{
    return R->num_classes;
}

xcb_input_device_class_iterator_t
xcb_input_device_changed_classes_iterator (const xcb_input_device_changed_event_t *R)
{
    xcb_input_device_class_iterator_t i;
    i.data = (xcb_input_device_class_t *) (R + 1);
    i.rem = R->num_classes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_key_press_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_key_press_event_t *_aux = (xcb_input_key_press_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_key_press_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_key_press_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_key_press_button_mask (const xcb_input_key_press_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_key_press_button_mask_length (const xcb_input_key_press_event_t *R)
{
    return R->buttons_len;
}

xcb_generic_iterator_t
xcb_input_key_press_button_mask_end (const xcb_input_key_press_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->buttons_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_input_key_press_valuator_mask (const xcb_input_key_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_key_press_button_mask_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_input_key_press_valuator_mask_length (const xcb_input_key_press_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_key_press_valuator_mask_end (const xcb_input_key_press_event_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_key_press_button_mask_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_key_press_axisvalues (const xcb_input_key_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_key_press_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_key_press_axisvalues_length (const xcb_input_key_press_event_t *R)
{
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_key_press_valuator_mask(R);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    return xcb_pre_tmp_7;
}

xcb_input_fp3232_iterator_t
xcb_input_key_press_axisvalues_iterator (const xcb_input_key_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_key_press_valuator_mask_end(R);
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_key_press_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_11;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_key_release_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_key_press_sizeof(_buffer);
}

int
xcb_input_button_press_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_button_press_event_t *_aux = (xcb_input_button_press_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_button_press_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_button_press_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_button_press_button_mask (const xcb_input_button_press_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_button_press_button_mask_length (const xcb_input_button_press_event_t *R)
{
    return R->buttons_len;
}

xcb_generic_iterator_t
xcb_input_button_press_button_mask_end (const xcb_input_button_press_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->buttons_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_input_button_press_valuator_mask (const xcb_input_button_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_button_press_button_mask_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_input_button_press_valuator_mask_length (const xcb_input_button_press_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_button_press_valuator_mask_end (const xcb_input_button_press_event_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_button_press_button_mask_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_button_press_axisvalues (const xcb_input_button_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_button_press_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_button_press_axisvalues_length (const xcb_input_button_press_event_t *R)
{
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_button_press_valuator_mask(R);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    return xcb_pre_tmp_7;
}

xcb_input_fp3232_iterator_t
xcb_input_button_press_axisvalues_iterator (const xcb_input_button_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_button_press_valuator_mask_end(R);
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_button_press_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_11;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_button_release_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_button_press_sizeof(_buffer);
}

int
xcb_input_motion_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_button_press_sizeof(_buffer);
}

int
xcb_input_enter_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_enter_event_t *_aux = (xcb_input_enter_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_enter_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* buttons */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_enter_buttons (const xcb_input_enter_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_enter_buttons_length (const xcb_input_enter_event_t *R)
{
    return R->buttons_len;
}

xcb_generic_iterator_t
xcb_input_enter_buttons_end (const xcb_input_enter_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->buttons_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_leave_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_enter_sizeof(_buffer);
}

int
xcb_input_focus_in_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_enter_sizeof(_buffer);
}

int
xcb_input_focus_out_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_enter_sizeof(_buffer);
}

void
xcb_input_hierarchy_info_next (xcb_input_hierarchy_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_hierarchy_info_t);
}

xcb_generic_iterator_t
xcb_input_hierarchy_info_end (xcb_input_hierarchy_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_input_hierarchy_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_hierarchy_event_t *_aux = (xcb_input_hierarchy_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_hierarchy_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* infos */
    xcb_block_len += _aux->num_infos * sizeof(xcb_input_hierarchy_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_hierarchy_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_input_hierarchy_info_t *
xcb_input_hierarchy_infos (const xcb_input_hierarchy_event_t *R)
{
    return (xcb_input_hierarchy_info_t *) (R + 1);
}

int
xcb_input_hierarchy_infos_length (const xcb_input_hierarchy_event_t *R)
{
    return R->num_infos;
}

xcb_input_hierarchy_info_iterator_t
xcb_input_hierarchy_infos_iterator (const xcb_input_hierarchy_event_t *R)
{
    xcb_input_hierarchy_info_iterator_t i;
    i.data = (xcb_input_hierarchy_info_t *) (R + 1);
    i.rem = R->num_infos;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_raw_key_press_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_key_press_event_t *_aux = (xcb_input_raw_key_press_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_raw_key_press_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_raw_key_press_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues_raw */
    /* sumof start */
    xcb_pre_tmp_5 = _aux->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_raw_key_press_valuator_mask(_aux);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    xcb_block_len += xcb_pre_tmp_7 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_raw_key_press_valuator_mask (const xcb_input_raw_key_press_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_raw_key_press_valuator_mask_length (const xcb_input_raw_key_press_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_raw_key_press_valuator_mask_end (const xcb_input_raw_key_press_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_key_press_axisvalues (const xcb_input_raw_key_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_raw_key_press_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_key_press_axisvalues_length (const xcb_input_raw_key_press_event_t *R)
{
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_raw_key_press_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    return xcb_pre_tmp_11;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_key_press_axisvalues_iterator (const xcb_input_raw_key_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_raw_key_press_valuator_mask_end(R);
    int xcb_pre_tmp_13; /* sumof length */
    int xcb_pre_tmp_14; /* sumof loop counter */
    int64_t xcb_pre_tmp_15; /* sumof sum */
    const uint32_t* xcb_pre_tmp_16; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_13 = R->valuators_len;
    xcb_pre_tmp_15 = 0;
    xcb_pre_tmp_16 = xcb_input_raw_key_press_valuator_mask(R);
    for (xcb_pre_tmp_14 = 0; xcb_pre_tmp_14 < xcb_pre_tmp_13; xcb_pre_tmp_14++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_16;
        xcb_pre_tmp_15 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_16++;
    }
    /* sumof end. Result is in xcb_pre_tmp_15 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_15;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_key_press_axisvalues_raw (const xcb_input_raw_key_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_key_press_axisvalues_iterator(R));
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_key_press_axisvalues_raw_length (const xcb_input_raw_key_press_event_t *R)
{
    int xcb_pre_tmp_17; /* sumof length */
    int xcb_pre_tmp_18; /* sumof loop counter */
    int64_t xcb_pre_tmp_19; /* sumof sum */
    const uint32_t* xcb_pre_tmp_20; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_17 = R->valuators_len;
    xcb_pre_tmp_19 = 0;
    xcb_pre_tmp_20 = xcb_input_raw_key_press_valuator_mask(R);
    for (xcb_pre_tmp_18 = 0; xcb_pre_tmp_18 < xcb_pre_tmp_17; xcb_pre_tmp_18++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_20;
        xcb_pre_tmp_19 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_20++;
    }
    /* sumof end. Result is in xcb_pre_tmp_19 */
    return xcb_pre_tmp_19;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_key_press_axisvalues_raw_iterator (const xcb_input_raw_key_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_key_press_axisvalues_iterator(R));
    int xcb_pre_tmp_21; /* sumof length */
    int xcb_pre_tmp_22; /* sumof loop counter */
    int64_t xcb_pre_tmp_23; /* sumof sum */
    const uint32_t* xcb_pre_tmp_24; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_21 = R->valuators_len;
    xcb_pre_tmp_23 = 0;
    xcb_pre_tmp_24 = xcb_input_raw_key_press_valuator_mask(R);
    for (xcb_pre_tmp_22 = 0; xcb_pre_tmp_22 < xcb_pre_tmp_21; xcb_pre_tmp_22++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_24;
        xcb_pre_tmp_23 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_24++;
    }
    /* sumof end. Result is in xcb_pre_tmp_23 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_23;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_raw_key_release_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_raw_key_press_sizeof(_buffer);
}

int
xcb_input_raw_button_press_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_button_press_event_t *_aux = (xcb_input_raw_button_press_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_raw_button_press_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_raw_button_press_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues_raw */
    /* sumof start */
    xcb_pre_tmp_5 = _aux->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_raw_button_press_valuator_mask(_aux);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    xcb_block_len += xcb_pre_tmp_7 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_raw_button_press_valuator_mask (const xcb_input_raw_button_press_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_raw_button_press_valuator_mask_length (const xcb_input_raw_button_press_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_raw_button_press_valuator_mask_end (const xcb_input_raw_button_press_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_button_press_axisvalues (const xcb_input_raw_button_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_raw_button_press_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_button_press_axisvalues_length (const xcb_input_raw_button_press_event_t *R)
{
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_raw_button_press_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    return xcb_pre_tmp_11;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_button_press_axisvalues_iterator (const xcb_input_raw_button_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_raw_button_press_valuator_mask_end(R);
    int xcb_pre_tmp_13; /* sumof length */
    int xcb_pre_tmp_14; /* sumof loop counter */
    int64_t xcb_pre_tmp_15; /* sumof sum */
    const uint32_t* xcb_pre_tmp_16; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_13 = R->valuators_len;
    xcb_pre_tmp_15 = 0;
    xcb_pre_tmp_16 = xcb_input_raw_button_press_valuator_mask(R);
    for (xcb_pre_tmp_14 = 0; xcb_pre_tmp_14 < xcb_pre_tmp_13; xcb_pre_tmp_14++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_16;
        xcb_pre_tmp_15 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_16++;
    }
    /* sumof end. Result is in xcb_pre_tmp_15 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_15;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_button_press_axisvalues_raw (const xcb_input_raw_button_press_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_button_press_axisvalues_iterator(R));
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_button_press_axisvalues_raw_length (const xcb_input_raw_button_press_event_t *R)
{
    int xcb_pre_tmp_17; /* sumof length */
    int xcb_pre_tmp_18; /* sumof loop counter */
    int64_t xcb_pre_tmp_19; /* sumof sum */
    const uint32_t* xcb_pre_tmp_20; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_17 = R->valuators_len;
    xcb_pre_tmp_19 = 0;
    xcb_pre_tmp_20 = xcb_input_raw_button_press_valuator_mask(R);
    for (xcb_pre_tmp_18 = 0; xcb_pre_tmp_18 < xcb_pre_tmp_17; xcb_pre_tmp_18++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_20;
        xcb_pre_tmp_19 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_20++;
    }
    /* sumof end. Result is in xcb_pre_tmp_19 */
    return xcb_pre_tmp_19;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_button_press_axisvalues_raw_iterator (const xcb_input_raw_button_press_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_button_press_axisvalues_iterator(R));
    int xcb_pre_tmp_21; /* sumof length */
    int xcb_pre_tmp_22; /* sumof loop counter */
    int64_t xcb_pre_tmp_23; /* sumof sum */
    const uint32_t* xcb_pre_tmp_24; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_21 = R->valuators_len;
    xcb_pre_tmp_23 = 0;
    xcb_pre_tmp_24 = xcb_input_raw_button_press_valuator_mask(R);
    for (xcb_pre_tmp_22 = 0; xcb_pre_tmp_22 < xcb_pre_tmp_21; xcb_pre_tmp_22++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_24;
        xcb_pre_tmp_23 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_24++;
    }
    /* sumof end. Result is in xcb_pre_tmp_23 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_23;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_raw_button_release_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_raw_button_press_sizeof(_buffer);
}

int
xcb_input_raw_motion_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_raw_button_press_sizeof(_buffer);
}

int
xcb_input_touch_begin_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_touch_begin_event_t *_aux = (xcb_input_touch_begin_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_touch_begin_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_touch_begin_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_touch_begin_button_mask (const xcb_input_touch_begin_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_touch_begin_button_mask_length (const xcb_input_touch_begin_event_t *R)
{
    return R->buttons_len;
}

xcb_generic_iterator_t
xcb_input_touch_begin_button_mask_end (const xcb_input_touch_begin_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->buttons_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_input_touch_begin_valuator_mask (const xcb_input_touch_begin_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_touch_begin_button_mask_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_input_touch_begin_valuator_mask_length (const xcb_input_touch_begin_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_touch_begin_valuator_mask_end (const xcb_input_touch_begin_event_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_touch_begin_button_mask_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_touch_begin_axisvalues (const xcb_input_touch_begin_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_touch_begin_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_touch_begin_axisvalues_length (const xcb_input_touch_begin_event_t *R)
{
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    return xcb_pre_tmp_7;
}

xcb_input_fp3232_iterator_t
xcb_input_touch_begin_axisvalues_iterator (const xcb_input_touch_begin_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_touch_begin_valuator_mask_end(R);
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_11;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_touch_update_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_touch_begin_sizeof(_buffer);
}

int
xcb_input_touch_end_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_touch_begin_sizeof(_buffer);
}

int
xcb_input_raw_touch_begin_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_touch_begin_event_t *_aux = (xcb_input_raw_touch_begin_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint32_t* xcb_pre_tmp_4; /* sumof list ptr */
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint32_t* xcb_pre_tmp_8; /* sumof list ptr */

    xcb_block_len += sizeof(xcb_input_raw_touch_begin_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues */
    /* sumof start */
    xcb_pre_tmp_1 = _aux->valuators_len;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = xcb_input_raw_touch_begin_valuator_mask(_aux);
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_4;
        xcb_pre_tmp_3 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* axisvalues_raw */
    /* sumof start */
    xcb_pre_tmp_5 = _aux->valuators_len;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = xcb_input_raw_touch_begin_valuator_mask(_aux);
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_8;
        xcb_pre_tmp_7 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    xcb_block_len += xcb_pre_tmp_7 * sizeof(xcb_input_fp3232_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_fp3232_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_input_raw_touch_begin_valuator_mask (const xcb_input_raw_touch_begin_event_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_input_raw_touch_begin_valuator_mask_length (const xcb_input_raw_touch_begin_event_t *R)
{
    return R->valuators_len;
}

xcb_generic_iterator_t
xcb_input_raw_touch_begin_valuator_mask_end (const xcb_input_raw_touch_begin_event_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->valuators_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_touch_begin_axisvalues (const xcb_input_raw_touch_begin_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_raw_touch_begin_valuator_mask_end(R);
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_touch_begin_axisvalues_length (const xcb_input_raw_touch_begin_event_t *R)
{
    int xcb_pre_tmp_9; /* sumof length */
    int xcb_pre_tmp_10; /* sumof loop counter */
    int64_t xcb_pre_tmp_11; /* sumof sum */
    const uint32_t* xcb_pre_tmp_12; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_9 = R->valuators_len;
    xcb_pre_tmp_11 = 0;
    xcb_pre_tmp_12 = xcb_input_raw_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_10 = 0; xcb_pre_tmp_10 < xcb_pre_tmp_9; xcb_pre_tmp_10++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_12;
        xcb_pre_tmp_11 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_12++;
    }
    /* sumof end. Result is in xcb_pre_tmp_11 */
    return xcb_pre_tmp_11;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_touch_begin_axisvalues_iterator (const xcb_input_raw_touch_begin_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_raw_touch_begin_valuator_mask_end(R);
    int xcb_pre_tmp_13; /* sumof length */
    int xcb_pre_tmp_14; /* sumof loop counter */
    int64_t xcb_pre_tmp_15; /* sumof sum */
    const uint32_t* xcb_pre_tmp_16; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_13 = R->valuators_len;
    xcb_pre_tmp_15 = 0;
    xcb_pre_tmp_16 = xcb_input_raw_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_14 = 0; xcb_pre_tmp_14 < xcb_pre_tmp_13; xcb_pre_tmp_14++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_16;
        xcb_pre_tmp_15 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_16++;
    }
    /* sumof end. Result is in xcb_pre_tmp_15 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_15;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_input_fp3232_t *
xcb_input_raw_touch_begin_axisvalues_raw (const xcb_input_raw_touch_begin_event_t *R)
{
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_touch_begin_axisvalues_iterator(R));
    return (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index) + 0);
}

int
xcb_input_raw_touch_begin_axisvalues_raw_length (const xcb_input_raw_touch_begin_event_t *R)
{
    int xcb_pre_tmp_17; /* sumof length */
    int xcb_pre_tmp_18; /* sumof loop counter */
    int64_t xcb_pre_tmp_19; /* sumof sum */
    const uint32_t* xcb_pre_tmp_20; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_17 = R->valuators_len;
    xcb_pre_tmp_19 = 0;
    xcb_pre_tmp_20 = xcb_input_raw_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_18 = 0; xcb_pre_tmp_18 < xcb_pre_tmp_17; xcb_pre_tmp_18++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_20;
        xcb_pre_tmp_19 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_20++;
    }
    /* sumof end. Result is in xcb_pre_tmp_19 */
    return xcb_pre_tmp_19;
}

xcb_input_fp3232_iterator_t
xcb_input_raw_touch_begin_axisvalues_raw_iterator (const xcb_input_raw_touch_begin_event_t *R)
{
    xcb_input_fp3232_iterator_t i;
    xcb_generic_iterator_t prev = xcb_input_fp3232_end(xcb_input_raw_touch_begin_axisvalues_iterator(R));
    int xcb_pre_tmp_21; /* sumof length */
    int xcb_pre_tmp_22; /* sumof loop counter */
    int64_t xcb_pre_tmp_23; /* sumof sum */
    const uint32_t* xcb_pre_tmp_24; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_21 = R->valuators_len;
    xcb_pre_tmp_23 = 0;
    xcb_pre_tmp_24 = xcb_input_raw_touch_begin_valuator_mask(R);
    for (xcb_pre_tmp_22 = 0; xcb_pre_tmp_22 < xcb_pre_tmp_21; xcb_pre_tmp_22++) {
        const uint32_t *xcb_listelement = xcb_pre_tmp_24;
        xcb_pre_tmp_23 += xcb_popcount((*xcb_listelement));
        xcb_pre_tmp_24++;
    }
    /* sumof end. Result is in xcb_pre_tmp_23 */
    i.data = (xcb_input_fp3232_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_fp3232_t, prev.index));
    i.rem = xcb_pre_tmp_23;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_input_raw_touch_update_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_raw_touch_begin_sizeof(_buffer);
}

int
xcb_input_raw_touch_end_sizeof (const void  *_buffer  /**< */)
{
    return xcb_input_raw_touch_begin_sizeof(_buffer);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i  /**< */)
d30 1
a30 1
xcb_input_event_class_end (xcb_input_event_class_iterator_t i  /**< */)
d40 1
a40 1
xcb_input_key_code_next (xcb_input_key_code_iterator_t *i  /**< */)
d48 1
a48 1
xcb_input_key_code_end (xcb_input_key_code_iterator_t i  /**< */)
d58 1
a58 1
xcb_input_device_id_next (xcb_input_device_id_iterator_t *i  /**< */)
d66 1
a66 1
xcb_input_device_id_end (xcb_input_device_id_iterator_t i  /**< */)
d76 1
a76 1
xcb_input_fp1616_next (xcb_input_fp1616_iterator_t *i  /**< */)
d84 1
a84 1
xcb_input_fp1616_end (xcb_input_fp1616_iterator_t i  /**< */)
d94 1
a94 1
xcb_input_fp3232_next (xcb_input_fp3232_iterator_t *i  /**< */)
d102 1
a102 1
xcb_input_fp3232_end (xcb_input_fp3232_iterator_t i  /**< */)
d112 1
a112 1
xcb_input_get_extension_version_sizeof (const void  *_buffer  /**< */)
d143 3
a145 3
xcb_input_get_extension_version (xcb_connection_t *c  /**< */,
                                 uint16_t          name_len  /**< */,
                                 const char       *name  /**< */)
d148 4
a151 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_EXTENSION_VERSION,
        /* isvoid */ 0
d176 3
a178 3
xcb_input_get_extension_version_unchecked (xcb_connection_t *c  /**< */,
                                           uint16_t          name_len  /**< */,
                                           const char       *name  /**< */)
d181 4
a184 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_EXTENSION_VERSION,
        /* isvoid */ 0
d209 1
a209 1
xcb_input_get_extension_version_reply (xcb_connection_t                          *c  /**< */,
d211 1
a211 1
                                       xcb_generic_error_t                      **e  /**< */)
d217 1
a217 1
xcb_input_device_info_next (xcb_input_device_info_iterator_t *i  /**< */)
d225 1
a225 1
xcb_input_device_info_end (xcb_input_device_info_iterator_t i  /**< */)
d235 1
a235 1
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i  /**< */)
d243 1
a243 1
xcb_input_key_info_end (xcb_input_key_info_iterator_t i  /**< */)
d253 1
a253 1
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i  /**< */)
d261 1
a261 1
xcb_input_button_info_end (xcb_input_button_info_iterator_t i  /**< */)
d271 1
a271 1
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i  /**< */)
d279 1
a279 1
xcb_input_axis_info_end (xcb_input_axis_info_iterator_t i  /**< */)
d289 1
a289 1
xcb_input_valuator_info_sizeof (const void  *_buffer  /**< */)
d320 1
a320 1
xcb_input_valuator_info_axes (const xcb_input_valuator_info_t *R  /**< */)
d326 1
a326 1
xcb_input_valuator_info_axes_length (const xcb_input_valuator_info_t *R  /**< */)
d332 1
a332 1
xcb_input_valuator_info_axes_iterator (const xcb_input_valuator_info_t *R  /**< */)
d342 1
a342 1
xcb_input_valuator_info_next (xcb_input_valuator_info_iterator_t *i  /**< */)
d353 1
a353 1
xcb_input_valuator_info_end (xcb_input_valuator_info_iterator_t i  /**< */)
d364 274
d639 1
a639 1
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i  /**< */)
d641 4
d646 1
a646 2
    ++i->data;
    i->index += sizeof(xcb_input_input_info_t);
d650 1
a650 1
xcb_input_input_info_end (xcb_input_input_info_iterator_t i  /**< */)
d653 5
a657 3
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
d662 1
a662 1
xcb_input_device_name_sizeof (const void  *_buffer  /**< */)
d693 1
a693 1
xcb_input_device_name_string (const xcb_input_device_name_t *R  /**< */)
d699 1
a699 1
xcb_input_device_name_string_length (const xcb_input_device_name_t *R  /**< */)
d705 1
a705 1
xcb_input_device_name_string_end (const xcb_input_device_name_t *R  /**< */)
d715 1
a715 1
xcb_input_device_name_next (xcb_input_device_name_iterator_t *i  /**< */)
d726 1
a726 1
xcb_input_device_name_end (xcb_input_device_name_iterator_t i  /**< */)
d738 1
a738 1
xcb_input_list_input_devices_sizeof (const void  *_buffer  /**< */)
d747 6
d770 48
d823 1
a823 1
xcb_input_list_input_devices (xcb_connection_t *c  /**< */)
d826 4
a829 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_INPUT_DEVICES,
        /* isvoid */ 0
d847 1
a847 1
xcb_input_list_input_devices_unchecked (xcb_connection_t *c  /**< */)
d850 4
a853 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_INPUT_DEVICES,
        /* isvoid */ 0
d871 1
a871 1
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R  /**< */)
d877 1
a877 1
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R  /**< */)
d883 1
a883 1
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R  /**< */)
d892 60
d953 1
a953 1
xcb_input_list_input_devices_reply (xcb_connection_t                       *c  /**< */,
d955 1
a955 1
                                    xcb_generic_error_t                   **e  /**< */)
d961 1
a961 1
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i  /**< */)
d969 1
a969 1
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i  /**< */)
d979 1
a979 1
xcb_input_open_device_sizeof (const void  *_buffer  /**< */)
d997 9
d1019 2
a1020 2
xcb_input_open_device (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */)
d1023 4
a1026 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_OPEN_DEVICE,
        /* isvoid */ 0
d1046 2
a1047 2
xcb_input_open_device_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           device_id  /**< */)
d1050 4
a1053 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_OPEN_DEVICE,
        /* isvoid */ 0
d1073 1
a1073 1
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R  /**< */)
d1079 1
a1079 1
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R  /**< */)
d1085 1
a1085 1
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R  /**< */)
d1095 1
a1095 1
xcb_input_open_device_reply (xcb_connection_t                *c  /**< */,
d1097 1
a1097 1
                             xcb_generic_error_t            **e  /**< */)
d1103 2
a1104 2
xcb_input_close_device_checked (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */)
d1107 4
a1110 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CLOSE_DEVICE,
        /* isvoid */ 1
d1130 2
a1131 2
xcb_input_close_device (xcb_connection_t *c  /**< */,
                        uint8_t           device_id  /**< */)
d1134 4
a1137 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CLOSE_DEVICE,
        /* isvoid */ 1
d1157 3
a1159 3
xcb_input_set_device_mode (xcb_connection_t *c  /**< */,
                           uint8_t           device_id  /**< */,
                           uint8_t           mode  /**< */)
d1162 4
a1165 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODE,
        /* isvoid */ 0
d1186 3
a1188 3
xcb_input_set_device_mode_unchecked (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           mode  /**< */)
d1191 4
a1194 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODE,
        /* isvoid */ 0
d1215 1
a1215 1
xcb_input_set_device_mode_reply (xcb_connection_t                    *c  /**< */,
d1217 1
a1217 1
                                 xcb_generic_error_t                **e  /**< */)
d1223 1
a1223 1
xcb_input_select_extension_event_sizeof (const void  *_buffer  /**< */)
d1254 4
a1257 4
xcb_input_select_extension_event_checked (xcb_connection_t              *c  /**< */,
                                          xcb_window_t                   window  /**< */,
                                          uint16_t                       num_classes  /**< */,
                                          const xcb_input_event_class_t *classes  /**< */)
d1260 4
a1263 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SELECT_EXTENSION_EVENT,
        /* isvoid */ 1
d1289 4
a1292 4
xcb_input_select_extension_event (xcb_connection_t              *c  /**< */,
                                  xcb_window_t                   window  /**< */,
                                  uint16_t                       num_classes  /**< */,
                                  const xcb_input_event_class_t *classes  /**< */)
d1295 4
a1298 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SELECT_EXTENSION_EVENT,
        /* isvoid */ 1
d1323 22
d1346 1
a1346 1
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer  /**< */)
d1389 2
a1390 2
xcb_input_get_selected_extension_events (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */)
d1393 4
a1396 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
        /* isvoid */ 0
d1415 2
a1416 2
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c  /**< */,
                                                   xcb_window_t      window  /**< */)
d1419 4
a1422 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
        /* isvoid */ 0
d1441 1
a1441 1
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1447 1
a1447 1
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1453 1
a1453 1
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1463 1
a1463 1
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1470 1
a1470 1
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1476 1
a1476 1
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1479 2
a1480 2
    xcb_generic_iterator_t child = xcb_input_get_selected_extension_events_this_classes_end(R);
    i.data = ((xcb_input_event_class_t *) child.data) + (R->num_all_classes);
d1487 1
a1487 1
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c  /**< */,
d1489 1
a1489 1
                                               xcb_generic_error_t                              **e  /**< */)
d1495 1
a1495 1
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */)
d1526 5
a1530 5
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c  /**< */,
                                                     xcb_window_t                   window  /**< */,
                                                     uint16_t                       num_classes  /**< */,
                                                     uint8_t                        mode  /**< */,
                                                     const xcb_input_event_class_t *classes  /**< */)
d1533 4
a1536 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
        /* isvoid */ 1
d1563 5
a1567 5
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c  /**< */,
                                             xcb_window_t                   window  /**< */,
                                             uint16_t                       num_classes  /**< */,
                                             uint8_t                        mode  /**< */,
                                             const xcb_input_event_class_t *classes  /**< */)
d1570 4
a1573 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
        /* isvoid */ 1
d1599 6
d1606 1
a1606 1
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */)
d1608 22
a1629 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_device_dont_propagate_list_reply_t *_aux = (xcb_input_get_device_dont_propagate_list_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d1653 2
a1654 2
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */)
d1657 4
a1660 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
        /* isvoid */ 0
d1679 2
a1680 2
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c  /**< */,
                                                    xcb_window_t      window  /**< */)
d1683 4
a1686 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
        /* isvoid */ 0
d1705 1
a1705 1
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1711 1
a1711 1
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1717 1
a1717 1
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1727 1
a1727 1
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c  /**< */,
d1729 1
a1729 1
                                                xcb_generic_error_t                               **e  /**< */)
d1734 55
d1790 1
a1790 1
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i  /**< */)
d1792 4
d1797 1
a1797 2
    ++i->data;
    i->index += sizeof(xcb_input_device_time_coord_t);
d1801 1
a1801 1
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i  /**< */)
d1804 5
a1808 3
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
d1812 36
d1849 4
a1852 4
xcb_input_get_device_motion_events (xcb_connection_t *c  /**< */,
                                    xcb_timestamp_t   start  /**< */,
                                    xcb_timestamp_t   stop  /**< */,
                                    uint8_t           device_id  /**< */)
d1855 4
a1858 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        /* isvoid */ 0
d1868 1
d1880 4
a1883 4
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c  /**< */,
                                              xcb_timestamp_t   start  /**< */,
                                              xcb_timestamp_t   stop  /**< */,
                                              uint8_t           device_id  /**< */)
d1886 4
a1889 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        /* isvoid */ 0
d1899 1
d1910 17
d1928 1
a1928 1
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c  /**< */,
d1930 1
a1930 1
                                          xcb_generic_error_t                         **e  /**< */)
d1936 2
a1937 2
xcb_input_change_keyboard_device (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */)
d1940 4
a1943 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        /* isvoid */ 0
d1963 2
a1964 2
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */)
d1967 4
a1970 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        /* isvoid */ 0
d1990 1
a1990 1
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c  /**< */,
d1992 1
a1992 1
                                        xcb_generic_error_t                       **e  /**< */)
d1998 4
a2001 4
xcb_input_change_pointer_device (xcb_connection_t *c  /**< */,
                                 uint8_t           x_axis  /**< */,
                                 uint8_t           y_axis  /**< */,
                                 uint8_t           device_id  /**< */)
d2004 4
a2007 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_POINTER_DEVICE,
        /* isvoid */ 0
d2029 4
a2032 4
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c  /**< */,
                                           uint8_t           x_axis  /**< */,
                                           uint8_t           y_axis  /**< */,
                                           uint8_t           device_id  /**< */)
d2035 4
a2038 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_POINTER_DEVICE,
        /* isvoid */ 0
d2060 1
a2060 1
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c  /**< */,
d2062 1
a2062 1
                                       xcb_generic_error_t                      **e  /**< */)
d2068 1
a2068 1
xcb_input_grab_device_sizeof (const void  *_buffer  /**< */)
d2099 9
a2107 9
xcb_input_grab_device (xcb_connection_t              *c  /**< */,
                       xcb_window_t                   grab_window  /**< */,
                       xcb_timestamp_t                time  /**< */,
                       uint16_t                       num_classes  /**< */,
                       uint8_t                        this_device_mode  /**< */,
                       uint8_t                        other_device_mode  /**< */,
                       uint8_t                        owner_events  /**< */,
                       uint8_t                        device_id  /**< */,
                       const xcb_input_event_class_t *classes  /**< */)
d2110 4
a2113 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE,
        /* isvoid */ 0
d2144 9
a2152 9
xcb_input_grab_device_unchecked (xcb_connection_t              *c  /**< */,
                                 xcb_window_t                   grab_window  /**< */,
                                 xcb_timestamp_t                time  /**< */,
                                 uint16_t                       num_classes  /**< */,
                                 uint8_t                        this_device_mode  /**< */,
                                 uint8_t                        other_device_mode  /**< */,
                                 uint8_t                        owner_events  /**< */,
                                 uint8_t                        device_id  /**< */,
                                 const xcb_input_event_class_t *classes  /**< */)
d2155 4
a2158 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE,
        /* isvoid */ 0
d2189 1
a2189 1
xcb_input_grab_device_reply (xcb_connection_t                *c  /**< */,
d2191 1
a2191 1
                             xcb_generic_error_t            **e  /**< */)
d2197 3
a2199 3
xcb_input_ungrab_device_checked (xcb_connection_t *c  /**< */,
                                 xcb_timestamp_t   time  /**< */,
                                 uint8_t           device_id  /**< */)
d2202 4
a2205 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE,
        /* isvoid */ 1
d2214 1
d2226 3
a2228 3
xcb_input_ungrab_device (xcb_connection_t *c  /**< */,
                         xcb_timestamp_t   time  /**< */,
                         uint8_t           device_id  /**< */)
d2231 4
a2234 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE,
        /* isvoid */ 1
d2243 1
d2255 1
a2255 1
xcb_input_grab_device_key_sizeof (const void  *_buffer  /**< */)
d2286 17
a2302 17
xcb_input_grab_device_key_checked (xcb_connection_t              *c  /**< */,
                                   xcb_window_t                   grab_window  /**< */,
                                   uint16_t                       num_classes  /**< */,
                                   uint16_t                       modifiers  /**< */,
                                   uint8_t                        modifier_device  /**< */,
                                   uint8_t                        grabbed_device  /**< */,
                                   uint8_t                        key  /**< */,
                                   uint8_t                        this_device_mode  /**< */,
                                   uint8_t                        other_device_mode  /**< */,
                                   uint8_t                        owner_events  /**< */,
                                   const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_KEY,
        /* isvoid */ 1
d2335 17
a2351 17
xcb_input_grab_device_key (xcb_connection_t              *c  /**< */,
                           xcb_window_t                   grab_window  /**< */,
                           uint16_t                       num_classes  /**< */,
                           uint16_t                       modifiers  /**< */,
                           uint8_t                        modifier_device  /**< */,
                           uint8_t                        grabbed_device  /**< */,
                           uint8_t                        key  /**< */,
                           uint8_t                        this_device_mode  /**< */,
                           uint8_t                        other_device_mode  /**< */,
                           uint8_t                        owner_events  /**< */,
                           const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_KEY,
        /* isvoid */ 1
d2383 22
d2406 6
a2411 6
xcb_input_ungrab_device_key_checked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      grabWindow  /**< */,
                                     uint16_t          modifiers  /**< */,
                                     uint8_t           modifier_device  /**< */,
                                     uint8_t           key  /**< */,
                                     uint8_t           grabbed_device  /**< */)
d2414 4
a2417 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_KEY,
        /* isvoid */ 1
d2440 6
a2445 6
xcb_input_ungrab_device_key (xcb_connection_t *c  /**< */,
                             xcb_window_t      grabWindow  /**< */,
                             uint16_t          modifiers  /**< */,
                             uint8_t           modifier_device  /**< */,
                             uint8_t           key  /**< */,
                             uint8_t           grabbed_device  /**< */)
d2448 4
a2451 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_KEY,
        /* isvoid */ 1
d2474 1
a2474 1
xcb_input_grab_device_button_sizeof (const void  *_buffer  /**< */)
d2505 17
a2521 17
xcb_input_grab_device_button_checked (xcb_connection_t              *c  /**< */,
                                      xcb_window_t                   grab_window  /**< */,
                                      uint8_t                        grabbed_device  /**< */,
                                      uint8_t                        modifier_device  /**< */,
                                      uint16_t                       num_classes  /**< */,
                                      uint16_t                       modifiers  /**< */,
                                      uint8_t                        this_device_mode  /**< */,
                                      uint8_t                        other_device_mode  /**< */,
                                      uint8_t                        button  /**< */,
                                      uint8_t                        owner_events  /**< */,
                                      const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2554 17
a2570 17
xcb_input_grab_device_button (xcb_connection_t              *c  /**< */,
                              xcb_window_t                   grab_window  /**< */,
                              uint8_t                        grabbed_device  /**< */,
                              uint8_t                        modifier_device  /**< */,
                              uint16_t                       num_classes  /**< */,
                              uint16_t                       modifiers  /**< */,
                              uint8_t                        this_device_mode  /**< */,
                              uint8_t                        other_device_mode  /**< */,
                              uint8_t                        button  /**< */,
                              uint8_t                        owner_events  /**< */,
                              const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2602 22
d2625 6
a2630 6
xcb_input_ungrab_device_button_checked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      grab_window  /**< */,
                                        uint16_t          modifiers  /**< */,
                                        uint8_t           modifier_device  /**< */,
                                        uint8_t           button  /**< */,
                                        uint8_t           grabbed_device  /**< */)
d2633 4
a2636 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2648 1
d2660 6
a2665 6
xcb_input_ungrab_device_button (xcb_connection_t *c  /**< */,
                                xcb_window_t      grab_window  /**< */,
                                uint16_t          modifiers  /**< */,
                                uint8_t           modifier_device  /**< */,
                                uint8_t           button  /**< */,
                                uint8_t           grabbed_device  /**< */)
d2668 4
a2671 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2683 1
d2695 4
a2698 4
xcb_input_allow_device_events_checked (xcb_connection_t *c  /**< */,
                                       xcb_timestamp_t   time  /**< */,
                                       uint8_t           mode  /**< */,
                                       uint8_t           device_id  /**< */)
d2701 4
a2704 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_ALLOW_DEVICE_EVENTS,
        /* isvoid */ 1
d2714 1
d2726 4
a2729 4
xcb_input_allow_device_events (xcb_connection_t *c  /**< */,
                               xcb_timestamp_t   time  /**< */,
                               uint8_t           mode  /**< */,
                               uint8_t           device_id  /**< */)
d2732 4
a2735 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_ALLOW_DEVICE_EVENTS,
        /* isvoid */ 1
d2745 1
d2757 2
a2758 2
xcb_input_get_device_focus (xcb_connection_t *c  /**< */,
                            uint8_t           device_id  /**< */)
d2761 4
a2764 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_FOCUS,
        /* isvoid */ 0
d2784 2
a2785 2
xcb_input_get_device_focus_unchecked (xcb_connection_t *c  /**< */,
                                      uint8_t           device_id  /**< */)
d2788 4
a2791 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_FOCUS,
        /* isvoid */ 0
d2811 1
a2811 1
xcb_input_get_device_focus_reply (xcb_connection_t                     *c  /**< */,
d2813 1
a2813 1
                                  xcb_generic_error_t                 **e  /**< */)
d2819 5
a2823 5
xcb_input_set_device_focus_checked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      focus  /**< */,
                                    xcb_timestamp_t   time  /**< */,
                                    uint8_t           revert_to  /**< */,
                                    uint8_t           device_id  /**< */)
d2826 4
a2829 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_FOCUS,
        /* isvoid */ 1
d2840 1
d2852 5
a2856 5
xcb_input_set_device_focus (xcb_connection_t *c  /**< */,
                            xcb_window_t      focus  /**< */,
                            xcb_timestamp_t   time  /**< */,
                            uint8_t           revert_to  /**< */,
                            uint8_t           device_id  /**< */)
d2859 4
a2862 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_FOCUS,
        /* isvoid */ 1
d2873 1
d2885 1
a2885 1
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i  /**< */)
d2893 1
a2893 1
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i  /**< */)
d2903 1
a2903 1
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i  /**< */)
d2911 1
a2911 1
xcb_input_ptr_feedback_state_end (xcb_input_ptr_feedback_state_iterator_t i  /**< */)
d2921 1
a2921 1
xcb_input_integer_feedback_state_next (xcb_input_integer_feedback_state_iterator_t *i  /**< */)
d2929 1
a2929 1
xcb_input_integer_feedback_state_end (xcb_input_integer_feedback_state_iterator_t i  /**< */)
d2939 1
a2939 1
xcb_input_string_feedback_state_sizeof (const void  *_buffer  /**< */)
d2970 1
a2970 1
xcb_input_string_feedback_state_keysyms (const xcb_input_string_feedback_state_t *R  /**< */)
d2976 1
a2976 1
xcb_input_string_feedback_state_keysyms_length (const xcb_input_string_feedback_state_t *R  /**< */)
d2982 1
a2982 1
xcb_input_string_feedback_state_keysyms_end (const xcb_input_string_feedback_state_t *R  /**< */)
d2992 1
a2992 1
xcb_input_string_feedback_state_next (xcb_input_string_feedback_state_iterator_t *i  /**< */)
d3003 1
a3003 1
xcb_input_string_feedback_state_end (xcb_input_string_feedback_state_iterator_t i  /**< */)
d3015 1
a3015 1
xcb_input_bell_feedback_state_next (xcb_input_bell_feedback_state_iterator_t *i  /**< */)
d3023 1
a3023 1
xcb_input_bell_feedback_state_end (xcb_input_bell_feedback_state_iterator_t i  /**< */)
d3033 1
a3033 1
xcb_input_led_feedback_state_next (xcb_input_led_feedback_state_iterator_t *i  /**< */)
d3041 1
a3041 1
xcb_input_led_feedback_state_end (xcb_input_led_feedback_state_iterator_t i  /**< */)
d3050 2
a3051 33
int
xcb_input_feedback_state_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_feedback_state_t *_aux = (xcb_input_feedback_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_feedback_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* uninterpreted_data */
    xcb_block_len += (_aux->len - 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint8_t *
xcb_input_feedback_state_uninterpreted_data (const xcb_input_feedback_state_t *R  /**< */)
d3053 1
a3053 1
    return (uint8_t *) (R + 1);
d3057 2
a3058 1
xcb_input_feedback_state_uninterpreted_data_length (const xcb_input_feedback_state_t *R  /**< */)
d3060 1
a3060 1
    return (R->len - 4);
d3064 2
a3065 1
xcb_input_feedback_state_uninterpreted_data_end (const xcb_input_feedback_state_t *R  /**< */)
d3068 1
a3068 1
    i.data = ((uint8_t *) (R + 1)) + ((R->len - 4));
d3070 1
a3070 1
    i.index = (char *) i.data - (char *) R;
a3073 23
void
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i  /**< */)
{
    xcb_input_feedback_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_feedback_state_t *)(((char *)R) + xcb_input_feedback_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_feedback_state_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_feedback_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

d3075 3
a3077 1
xcb_input_get_feedback_control_sizeof (const void  *_buffer  /**< */)
d3079 1
a3079 2
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_get_feedback_control_reply_t *_aux = (xcb_input_get_feedback_control_reply_t *)_buffer;
a3080 2
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
d3082 1
d3084 5
d3090 1
a3090 1
    unsigned int xcb_tmp_len;
d3092 467
a3558 9
    xcb_block_len += sizeof(xcb_input_get_feedback_control_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* feedbacks */
    for(i=0; i<_aux->num_feedbacks; i++) {
        xcb_tmp_len = xcb_input_feedback_state_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
d3574 2
a3575 2
xcb_input_get_feedback_control (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */)
d3578 4
a3581 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_FEEDBACK_CONTROL,
        /* isvoid */ 0
d3601 2
a3602 2
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */)
d3605 4
a3608 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_FEEDBACK_CONTROL,
        /* isvoid */ 0
d3628 1
a3628 1
xcb_input_get_feedback_control_feedbacks_length (const xcb_input_get_feedback_control_reply_t *R  /**< */)
d3634 1
a3634 1
xcb_input_get_feedback_control_feedbacks_iterator (const xcb_input_get_feedback_control_reply_t *R  /**< */)
d3644 1
a3644 1
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c  /**< */,
d3646 1
a3646 1
                                      xcb_generic_error_t                     **e  /**< */)
d3652 1
a3652 1
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i  /**< */)
d3660 1
a3660 1
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i  /**< */)
d3670 1
a3670 1
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i  /**< */)
d3678 1
a3678 1
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i  /**< */)
d3688 1
a3688 1
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i  /**< */)
d3696 1
a3696 1
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i  /**< */)
d3706 1
a3706 1
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer  /**< */)
d3737 1
a3737 1
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R  /**< */)
d3743 1
a3743 1
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R  /**< */)
d3749 1
a3749 1
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R  /**< */)
d3759 1
a3759 1
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i  /**< */)
d3770 1
a3770 1
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i  /**< */)
d3782 1
a3782 1
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i  /**< */)
d3790 1
a3790 1
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i  /**< */)
d3800 1
a3800 1
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i  /**< */)
d3808 1
a3808 1
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i  /**< */)
d3817 2
a3818 33
int
xcb_input_feedback_ctl_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_feedback_ctl_t *_aux = (xcb_input_feedback_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_feedback_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* uninterpreted_data */
    xcb_block_len += (_aux->len - 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint8_t *
xcb_input_feedback_ctl_uninterpreted_data (const xcb_input_feedback_ctl_t *R  /**< */)
d3820 1
a3820 1
    return (uint8_t *) (R + 1);
d3824 2
a3825 1
xcb_input_feedback_ctl_uninterpreted_data_length (const xcb_input_feedback_ctl_t *R  /**< */)
d3827 1
a3827 1
    return (R->len - 4);
d3831 2
a3832 1
xcb_input_feedback_ctl_uninterpreted_data_end (const xcb_input_feedback_ctl_t *R  /**< */)
d3835 1
a3835 1
    i.data = ((uint8_t *) (R + 1)) + ((R->len - 4));
d3837 1
a3837 1
    i.index = (char *) i.data - (char *) R;
a3840 23
void
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i  /**< */)
{
    xcb_input_feedback_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_feedback_ctl_t *)(((char *)R) + xcb_input_feedback_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_feedback_ctl_t *) child.data;
}

xcb_generic_iterator_t
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_feedback_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

d3842 3
a3844 1
xcb_input_change_feedback_control_sizeof (const void  *_buffer  /**< */)
d3846 430
a4275 1
    char *xcb_tmp = (char *)_buffer;
d4303 5
a4307 5
xcb_input_change_feedback_control_checked (xcb_connection_t         *c  /**< */,
                                           uint32_t                  mask  /**< */,
                                           uint8_t                   device_id  /**< */,
                                           uint8_t                   feedback_id  /**< */,
                                           xcb_input_feedback_ctl_t *feedback  /**< */)
d4310 4
a4313 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_FEEDBACK_CONTROL,
        /* isvoid */ 1
d4323 1
d4339 5
a4343 5
xcb_input_change_feedback_control (xcb_connection_t         *c  /**< */,
                                   uint32_t                  mask  /**< */,
                                   uint8_t                   device_id  /**< */,
                                   uint8_t                   feedback_id  /**< */,
                                   xcb_input_feedback_ctl_t *feedback  /**< */)
d4346 4
a4349 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_FEEDBACK_CONTROL,
        /* isvoid */ 1
d4359 1
d4374 6
d4381 1
a4381 1
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer  /**< */)
d4412 4
a4415 4
xcb_input_get_device_key_mapping (xcb_connection_t     *c  /**< */,
                                  uint8_t               device_id  /**< */,
                                  xcb_input_key_code_t  first_keycode  /**< */,
                                  uint8_t               count  /**< */)
d4418 4
a4421 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        /* isvoid */ 0
d4431 1
d4443 4
a4446 4
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c  /**< */,
                                            uint8_t               device_id  /**< */,
                                            xcb_input_key_code_t  first_keycode  /**< */,
                                            uint8_t               count  /**< */)
d4449 4
a4452 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        /* isvoid */ 0
d4462 1
d4474 1
a4474 1
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4480 1
a4480 1
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4486 1
a4486 1
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4496 1
a4496 1
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c  /**< */,
d4498 1
a4498 1
                                        xcb_generic_error_t                       **e  /**< */)
d4504 1
a4504 1
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer  /**< */)
d4535 6
a4540 6
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c  /**< */,
                                             uint8_t               device_id  /**< */,
                                             xcb_input_key_code_t  first_keycode  /**< */,
                                             uint8_t               keysyms_per_keycode  /**< */,
                                             uint8_t               keycode_count  /**< */,
                                             const xcb_keysym_t   *keysyms  /**< */)
d4543 4
a4546 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
        /* isvoid */ 1
d4573 6
a4578 6
xcb_input_change_device_key_mapping (xcb_connection_t     *c  /**< */,
                                     uint8_t               device_id  /**< */,
                                     xcb_input_key_code_t  first_keycode  /**< */,
                                     uint8_t               keysyms_per_keycode  /**< */,
                                     uint8_t               keycode_count  /**< */,
                                     const xcb_keysym_t   *keysyms  /**< */)
d4581 4
a4584 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
        /* isvoid */ 1
d4610 22
d4633 1
a4633 1
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d4664 2
a4665 2
xcb_input_get_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */)
d4668 4
a4671 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4691 2
a4692 2
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */)
d4695 4
a4698 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4718 1
a4718 1
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4724 1
a4724 1
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4730 1
a4730 1
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4740 1
a4740 1
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
d4742 1
a4742 1
                                             xcb_generic_error_t                            **e  /**< */)
d4748 1
a4748 1
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d4779 4
a4782 4
xcb_input_set_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */,
                                       uint8_t           keycodes_per_modifier  /**< */,
                                       const uint8_t    *keymaps  /**< */)
d4785 4
a4788 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4797 1
a4797 1
    xcb_out.pad0 = 0;
d4814 4
a4817 4
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */,
                                                 uint8_t           keycodes_per_modifier  /**< */,
                                                 const uint8_t    *keymaps  /**< */)
d4820 4
a4823 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4832 1
a4832 1
    xcb_out.pad0 = 0;
d4849 1
a4849 1
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
d4851 1
a4851 1
                                             xcb_generic_error_t                            **e  /**< */)
d4857 1
a4857 1
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer  /**< */)
d4875 9
d4897 2
a4898 2
xcb_input_get_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */)
d4901 4
a4904 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
        /* isvoid */ 0
d4924 2
a4925 2
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */)
d4928 4
a4931 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
        /* isvoid */ 0
d4951 1
a4951 1
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d4957 1
a4957 1
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d4963 1
a4963 1
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d4973 1
a4973 1
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
d4975 1
a4975 1
                                           xcb_generic_error_t                          **e  /**< */)
d4981 1
a4981 1
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer  /**< */)
d5012 4
a5015 4
xcb_input_set_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           map_size  /**< */,
                                     const uint8_t    *map  /**< */)
d5018 4
a5021 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
        /* isvoid */ 0
d5047 4
a5050 4
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */,
                                               uint8_t           map_size  /**< */,
                                               const uint8_t    *map  /**< */)
d5053 4
a5056 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
        /* isvoid */ 0
d5082 1
a5082 1
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
d5084 1
a5084 1
                                           xcb_generic_error_t                          **e  /**< */)
d5090 1
a5090 1
xcb_input_key_state_next (xcb_input_key_state_iterator_t *i  /**< */)
d5098 1
a5098 1
xcb_input_key_state_end (xcb_input_key_state_iterator_t i  /**< */)
d5108 1
a5108 1
xcb_input_button_state_next (xcb_input_button_state_iterator_t *i  /**< */)
d5116 1
a5116 1
xcb_input_button_state_end (xcb_input_button_state_iterator_t i  /**< */)
d5126 1
a5126 1
xcb_input_valuator_state_sizeof (const void  *_buffer  /**< */)
d5141 1
a5141 1
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
d5143 1
a5143 1
    xcb_align_to = ALIGNOF(uint32_t);
d5156 2
a5157 2
uint32_t *
xcb_input_valuator_state_valuators (const xcb_input_valuator_state_t *R  /**< */)
d5159 1
a5159 1
    return (uint32_t *) (R + 1);
d5163 1
a5163 1
xcb_input_valuator_state_valuators_length (const xcb_input_valuator_state_t *R  /**< */)
d5169 1
a5169 1
xcb_input_valuator_state_valuators_end (const xcb_input_valuator_state_t *R  /**< */)
d5172 1
a5172 1
    i.data = ((uint32_t *) (R + 1)) + (R->num_valuators);
d5179 1
a5179 1
xcb_input_valuator_state_next (xcb_input_valuator_state_iterator_t *i  /**< */)
d5190 1
a5190 1
xcb_input_valuator_state_end (xcb_input_valuator_state_iterator_t i  /**< */)
d5201 24
d5226 3
a5228 1
xcb_input_input_state_sizeof (const void  *_buffer  /**< */)
d5230 1
a5230 2
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_input_state_t *_aux = (xcb_input_input_state_t *)_buffer;
a5231 2
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
d5233 1
d5235 7
d5243 80
a5322 3
    xcb_block_len += sizeof(xcb_input_input_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
d5324 92
a5415 4
    /* uninterpreted_data */
    xcb_block_len += (_aux->len - 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
d5417 1
a5417 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d5424 1
d5429 3
a5431 2
uint8_t *
xcb_input_input_state_uninterpreted_data (const xcb_input_input_state_t *R  /**< */)
d5433 2
a5434 1
    return (uint8_t *) (R + 1);
d5438 1
a5438 1
xcb_input_input_state_uninterpreted_data_length (const xcb_input_input_state_t *R  /**< */)
d5440 26
a5465 1
    return (R->len - 4);
d5468 2
a5469 2
xcb_generic_iterator_t
xcb_input_input_state_uninterpreted_data_end (const xcb_input_input_state_t *R  /**< */)
d5471 1
a5471 5
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->len - 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d5475 1
a5475 1
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i  /**< */)
d5486 1
a5486 1
xcb_input_input_state_end (xcb_input_input_state_iterator_t i  /**< */)
d5498 1
a5498 1
xcb_input_query_device_state_sizeof (const void  *_buffer  /**< */)
d5534 2
a5535 2
xcb_input_query_device_state (xcb_connection_t *c  /**< */,
                              uint8_t           device_id  /**< */)
d5538 4
a5541 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_QUERY_DEVICE_STATE,
        /* isvoid */ 0
d5561 2
a5562 2
xcb_input_query_device_state_unchecked (xcb_connection_t *c  /**< */,
                                        uint8_t           device_id  /**< */)
d5565 4
a5568 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_QUERY_DEVICE_STATE,
        /* isvoid */ 0
d5588 1
a5588 1
xcb_input_query_device_state_classes_length (const xcb_input_query_device_state_reply_t *R  /**< */)
d5594 1
a5594 1
xcb_input_query_device_state_classes_iterator (const xcb_input_query_device_state_reply_t *R  /**< */)
d5604 1
a5604 1
xcb_input_query_device_state_reply (xcb_connection_t                       *c  /**< */,
d5606 1
a5606 1
                                    xcb_generic_error_t                   **e  /**< */)
d5612 1
a5612 1
xcb_input_send_extension_event_sizeof (const void  *_buffer  /**< */)
d5655 8
a5662 8
xcb_input_send_extension_event_checked (xcb_connection_t              *c  /**< */,
                                        xcb_window_t                   destination  /**< */,
                                        uint8_t                        device_id  /**< */,
                                        uint8_t                        propagate  /**< */,
                                        uint16_t                       num_classes  /**< */,
                                        uint8_t                        num_events  /**< */,
                                        const uint8_t                 *events  /**< */,
                                        const xcb_input_event_class_t *classes  /**< */)
d5665 4
a5668 4
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SEND_EXTENSION_EVENT,
        /* isvoid */ 1
d5702 8
a5709 8
xcb_input_send_extension_event (xcb_connection_t              *c  /**< */,
                                xcb_window_t                   destination  /**< */,
                                uint8_t                        device_id  /**< */,
                                uint8_t                        propagate  /**< */,
                                uint16_t                       num_classes  /**< */,
                                uint8_t                        num_events  /**< */,
                                const uint8_t                 *events  /**< */,
                                const xcb_input_event_class_t *classes  /**< */)
d5712 4
a5715 4
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SEND_EXTENSION_EVENT,
        /* isvoid */ 1
d5748 46
d5795 5
a5799 5
xcb_input_device_bell_checked (xcb_connection_t *c  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           feedback_id  /**< */,
                               uint8_t           feedback_class  /**< */,
                               int8_t            percent  /**< */)
d5802 4
a5805 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DEVICE_BELL,
        /* isvoid */ 1
d5827 5
a5831 5
xcb_input_device_bell (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */,
                       uint8_t           feedback_id  /**< */,
                       uint8_t           feedback_class  /**< */,
                       int8_t            percent  /**< */)
d5834 4
a5837 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DEVICE_BELL,
        /* isvoid */ 1
d5859 1
a5859 1
xcb_input_set_device_valuators_sizeof (const void  *_buffer  /**< */)
d5890 5
a5894 5
xcb_input_set_device_valuators (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */,
                                uint8_t           first_valuator  /**< */,
                                uint8_t           num_valuators  /**< */,
                                const int32_t    *valuators  /**< */)
d5897 4
a5900 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_VALUATORS,
        /* isvoid */ 0
d5927 5
a5931 5
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           first_valuator  /**< */,
                                          uint8_t           num_valuators  /**< */,
                                          const int32_t    *valuators  /**< */)
d5934 4
a5937 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_VALUATORS,
        /* isvoid */ 0
d5964 1
a5964 1
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c  /**< */,
d5966 1
a5966 1
                                      xcb_generic_error_t                     **e  /**< */)
d5972 1
a5972 1
xcb_input_device_resolution_state_sizeof (const void  *_buffer  /**< */)
d6027 1
a6027 1
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R  /**< */)
d6033 1
a6033 1
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6039 1
a6039 1
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R  /**< */)
d6049 1
a6049 1
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R  /**< */)
d6056 1
a6056 1
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6062 1
a6062 1
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R  /**< */)
d6065 2
a6066 2
    xcb_generic_iterator_t child = xcb_input_device_resolution_state_resolution_values_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_valuators);
d6073 1
a6073 1
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R  /**< */)
d6080 1
a6080 1
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6086 1
a6086 1
xcb_input_device_resolution_state_resolution_max_end (const xcb_input_device_resolution_state_t *R  /**< */)
d6089 2
a6090 2
    xcb_generic_iterator_t child = xcb_input_device_resolution_state_resolution_min_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_valuators);
d6097 1
a6097 1
xcb_input_device_resolution_state_next (xcb_input_device_resolution_state_iterator_t *i  /**< */)
d6108 1
a6108 1
xcb_input_device_resolution_state_end (xcb_input_device_resolution_state_iterator_t i  /**< */)
d6120 1
a6120 1
xcb_input_device_abs_calib_state_next (xcb_input_device_abs_calib_state_iterator_t *i  /**< */)
d6128 1
a6128 1
xcb_input_device_abs_calib_state_end (xcb_input_device_abs_calib_state_iterator_t i  /**< */)
d6138 1
a6138 1
xcb_input_device_abs_area_state_next (xcb_input_device_abs_area_state_iterator_t *i  /**< */)
d6146 1
a6146 1
xcb_input_device_abs_area_state_end (xcb_input_device_abs_area_state_iterator_t i  /**< */)
d6156 1
a6156 1
xcb_input_device_core_state_next (xcb_input_device_core_state_iterator_t *i  /**< */)
d6164 1
a6164 1
xcb_input_device_core_state_end (xcb_input_device_core_state_iterator_t i  /**< */)
d6174 1
a6174 1
xcb_input_device_enable_state_next (xcb_input_device_enable_state_iterator_t *i  /**< */)
d6182 1
a6182 1
xcb_input_device_enable_state_end (xcb_input_device_enable_state_iterator_t i  /**< */)
d6191 6
d6198 2
a6199 1
xcb_input_device_state_sizeof (const void  *_buffer  /**< */)
d6201 2
a6202 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_state_t *_aux = (xcb_input_device_state_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d6204 9
a6212 19

    xcb_block_len += sizeof(xcb_input_device_state_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* uninterpreted_data */
    xcb_block_len += (_aux->len - 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d6215 2
a6216 2
uint8_t *
xcb_input_device_state_uninterpreted_data (const xcb_input_device_state_t *R  /**< */)
d6218 1
a6218 1
    return (uint8_t *) (R + 1);
d6222 2
a6223 1
xcb_input_device_state_uninterpreted_data_length (const xcb_input_device_state_t *R  /**< */)
d6225 1
a6225 1
    return (R->len - 4);
d6229 2
a6230 1
xcb_input_device_state_uninterpreted_data_end (const xcb_input_device_state_t *R  /**< */)
d6233 1
a6233 1
    i.data = ((uint8_t *) (R + 1)) + ((R->len - 4));
d6235 1
a6235 1
    i.index = (char *) i.data - (char *) R;
d6239 9
a6247 2
void
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i  /**< */)
d6249 1
a6249 6
    xcb_input_device_state_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_device_state_t *)(((char *)R) + xcb_input_device_state_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_input_device_state_t *) child.data;
d6253 2
a6254 1
xcb_input_device_state_end (xcb_input_device_state_iterator_t i  /**< */)
d6256 5
a6260 7
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_input_device_state_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
d6264 3
a6266 1
xcb_input_get_device_control_sizeof (const void  *_buffer  /**< */)
d6268 1
a6268 1
    char *xcb_tmp = (char *)_buffer;
d6270 477
a6746 2
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
d6771 3
a6773 3
xcb_input_get_device_control (xcb_connection_t *c  /**< */,
                              uint16_t          control_id  /**< */,
                              uint8_t           device_id  /**< */)
d6776 4
a6779 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_CONTROL,
        /* isvoid */ 0
d6800 3
a6802 3
xcb_input_get_device_control_unchecked (xcb_connection_t *c  /**< */,
                                        uint16_t          control_id  /**< */,
                                        uint8_t           device_id  /**< */)
d6805 4
a6808 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_CONTROL,
        /* isvoid */ 0
d6829 1
a6829 1
xcb_input_get_device_control_control (const xcb_input_get_device_control_reply_t *R  /**< */)
d6835 1
a6835 1
xcb_input_get_device_control_reply (xcb_connection_t                       *c  /**< */,
d6837 1
a6837 1
                                    xcb_generic_error_t                   **e  /**< */)
d6843 1
a6843 1
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer  /**< */)
d6874 1
a6874 1
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R  /**< */)
d6880 1
a6880 1
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R  /**< */)
d6886 1
a6886 1
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R  /**< */)
d6896 1
a6896 1
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i  /**< */)
d6907 1
a6907 1
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i  /**< */)
d6919 1
a6919 1
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i  /**< */)
d6927 1
a6927 1
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i  /**< */)
d6937 1
a6937 1
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i  /**< */)
d6945 1
a6945 1
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i  /**< */)
d6955 1
a6955 1
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i  /**< */)
d6963 1
a6963 1
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i  /**< */)
d6973 1
a6973 1
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i  /**< */)
d6981 1
a6981 1
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i  /**< */)
d6990 2
a6991 33
int
xcb_input_device_ctl_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_ctl_t *_aux = (xcb_input_device_ctl_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_device_ctl_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* uninterpreted_data */
    xcb_block_len += (_aux->len - 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint8_t *
xcb_input_device_ctl_uninterpreted_data (const xcb_input_device_ctl_t *R  /**< */)
d6993 1
a6993 1
    return (uint8_t *) (R + 1);
d6997 2
a6998 1
xcb_input_device_ctl_uninterpreted_data_length (const xcb_input_device_ctl_t *R  /**< */)
d7000 1
a7000 1
    return (R->len - 4);
d7004 2
a7005 1
xcb_input_device_ctl_uninterpreted_data_end (const xcb_input_device_ctl_t *R  /**< */)
d7008 1
a7008 1
    i.data = ((uint8_t *) (R + 1)) + ((R->len - 4));
d7010 1
a7010 1
    i.index = (char *) i.data - (char *) R;
d7014 407
a7420 2
void
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i  /**< */)
d7431 1
a7431 1
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i  /**< */)
d7443 1
a7443 1
xcb_input_change_device_control_sizeof (const void  *_buffer  /**< */)
d7473 4
a7476 4
xcb_input_change_device_control (xcb_connection_t       *c  /**< */,
                                 uint16_t                control_id  /**< */,
                                 uint8_t                 device_id  /**< */,
                                 xcb_input_device_ctl_t *control  /**< */)
d7479 4
a7482 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_CONTROL,
        /* isvoid */ 0
d7507 4
a7510 4
xcb_input_change_device_control_unchecked (xcb_connection_t       *c  /**< */,
                                           uint16_t                control_id  /**< */,
                                           uint8_t                 device_id  /**< */,
                                           xcb_input_device_ctl_t *control  /**< */)
d7513 4
a7516 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_CONTROL,
        /* isvoid */ 0
d7541 1
a7541 1
xcb_input_change_device_control_reply (xcb_connection_t                          *c  /**< */,
d7543 1
a7543 1
                                       xcb_generic_error_t                      **e  /**< */)
d7549 1
a7549 1
xcb_input_list_device_properties_sizeof (const void  *_buffer  /**< */)
d7580 2
a7581 2
xcb_input_list_device_properties (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */)
d7584 4
a7587 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_DEVICE_PROPERTIES,
        /* isvoid */ 0
d7607 2
a7608 2
xcb_input_list_device_properties_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */)
d7611 4
a7614 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_DEVICE_PROPERTIES,
        /* isvoid */ 0
d7634 1
a7634 1
xcb_input_list_device_properties_atoms (const xcb_input_list_device_properties_reply_t *R  /**< */)
d7640 1
a7640 1
xcb_input_list_device_properties_atoms_length (const xcb_input_list_device_properties_reply_t *R  /**< */)
d7646 1
a7646 1
xcb_input_list_device_properties_atoms_end (const xcb_input_list_device_properties_reply_t *R  /**< */)
d7656 1
a7656 1
xcb_input_list_device_properties_reply (xcb_connection_t                           *c  /**< */,
d7658 1
a7658 1
                                        xcb_generic_error_t                       **e  /**< */)
d7664 1
a7664 1
xcb_input_change_device_property_items_data_8 (const xcb_input_change_device_property_items_t *S  /**< */)
d7666 1
a7666 1
    return /* items */ S->data8;
d7670 2
a7671 2
xcb_input_change_device_property_items_data_8_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                      const xcb_input_change_device_property_items_t *S  /**< */)
d7677 2
a7678 2
xcb_input_change_device_property_items_data_8_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                   const xcb_input_change_device_property_items_t *S  /**< */)
d7681 1
a7681 1
    i.data = /* items */ S->data8 + R->num_items;
d7688 1
a7688 1
xcb_input_change_device_property_items_data_16 (const xcb_input_change_device_property_items_t *S  /**< */)
d7690 1
a7690 1
    return /* items */ S->data16;
d7694 2
a7695 2
xcb_input_change_device_property_items_data_16_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                       const xcb_input_change_device_property_items_t *S  /**< */)
d7701 2
a7702 2
xcb_input_change_device_property_items_data_16_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                    const xcb_input_change_device_property_items_t *S  /**< */)
d7705 1
a7705 1
    i.data = /* items */ S->data16 + R->num_items;
d7712 1
a7712 1
xcb_input_change_device_property_items_data_32 (const xcb_input_change_device_property_items_t *S  /**< */)
d7714 1
a7714 1
    return /* items */ S->data32;
d7718 2
a7719 2
xcb_input_change_device_property_items_data_32_length (const xcb_input_change_device_property_request_t *R  /**< */,
                                                       const xcb_input_change_device_property_items_t *S  /**< */)
d7725 2
a7726 2
xcb_input_change_device_property_items_data_32_end (const xcb_input_change_device_property_request_t *R  /**< */,
                                                    const xcb_input_change_device_property_items_t *S  /**< */)
d7729 1
a7729 1
    i.data = /* items */ S->data32 + R->num_items;
d7736 4
a7739 4
xcb_input_change_device_property_items_serialize (void                                           **_buffer  /**< */,
                                                  uint32_t                                         num_items  /**< */,
                                                  uint8_t                                          format  /**< */,
                                                  const xcb_input_change_device_property_items_t  *_aux  /**< */)
d7744 1
d7748 1
a7748 1
    struct iovec xcb_parts[7];
d7754 1
a7754 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d7756 1
a7756 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7765 1
d7772 12
d7785 1
a7785 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d7787 1
a7787 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7796 1
d7803 12
d7816 1
a7816 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d7818 1
a7818 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7827 1
d7836 1
a7836 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7845 1
d7865 4
a7868 4
xcb_input_change_device_property_items_unpack (const void                                *_buffer  /**< */,
                                               uint32_t                                   num_items  /**< */,
                                               uint8_t                                    format  /**< */,
                                               xcb_input_change_device_property_items_t  *_aux  /**< */)
d7875 1
d7878 1
a7878 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d7880 1
a7880 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7887 1
d7893 10
d7904 1
a7904 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d7906 1
a7906 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7913 1
d7919 10
d7930 1
a7930 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d7932 1
a7932 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7939 1
d7947 1
a7947 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7954 1
d7960 3
a7962 3
xcb_input_change_device_property_items_sizeof (const void  *_buffer  /**< */,
                                               uint32_t     num_items  /**< */,
                                               uint8_t      format  /**< */)
d7968 31
d8000 8
a8007 8
xcb_input_change_device_property_checked (xcb_connection_t *c  /**< */,
                                          xcb_atom_t        property  /**< */,
                                          xcb_atom_t        type  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           format  /**< */,
                                          uint8_t           mode  /**< */,
                                          uint32_t          num_items  /**< */,
                                          const void       *items  /**< */)
d8010 4
a8013 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8042 8
a8049 8
xcb_input_change_device_property (xcb_connection_t *c  /**< */,
                                  xcb_atom_t        property  /**< */,
                                  xcb_atom_t        type  /**< */,
                                  uint8_t           device_id  /**< */,
                                  uint8_t           format  /**< */,
                                  uint8_t           mode  /**< */,
                                  uint32_t          num_items  /**< */,
                                  const void       *items  /**< */)
d8052 4
a8055 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8084 8
a8091 8
xcb_input_change_device_property_aux_checked (xcb_connection_t                               *c  /**< */,
                                              xcb_atom_t                                      property  /**< */,
                                              xcb_atom_t                                      type  /**< */,
                                              uint8_t                                         device_id  /**< */,
                                              uint8_t                                         format  /**< */,
                                              uint8_t                                         mode  /**< */,
                                              uint32_t                                        num_items  /**< */,
                                              const xcb_input_change_device_property_items_t *items  /**< */)
d8094 4
a8097 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8128 8
a8135 8
xcb_input_change_device_property_aux (xcb_connection_t                               *c  /**< */,
                                      xcb_atom_t                                      property  /**< */,
                                      xcb_atom_t                                      type  /**< */,
                                      uint8_t                                         device_id  /**< */,
                                      uint8_t                                         format  /**< */,
                                      uint8_t                                         mode  /**< */,
                                      uint32_t                                        num_items  /**< */,
                                      const xcb_input_change_device_property_items_t *items  /**< */)
d8138 4
a8141 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8171 6
d8178 3
a8180 3
xcb_input_delete_device_property_checked (xcb_connection_t *c  /**< */,
                                          xcb_atom_t        property  /**< */,
                                          uint8_t           device_id  /**< */)
d8183 4
a8186 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DELETE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8207 3
a8209 3
xcb_input_delete_device_property (xcb_connection_t *c  /**< */,
                                  xcb_atom_t        property  /**< */,
                                  uint8_t           device_id  /**< */)
d8212 4
a8215 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DELETE_DEVICE_PROPERTY,
        /* isvoid */ 1
d8236 1
a8236 1
xcb_input_get_device_property_items_data_8 (const xcb_input_get_device_property_items_t *S  /**< */)
d8238 1
a8238 1
    return /* items */ S->data8;
d8242 2
a8243 2
xcb_input_get_device_property_items_data_8_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                   const xcb_input_get_device_property_items_t *S  /**< */)
d8249 2
a8250 2
xcb_input_get_device_property_items_data_8_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                const xcb_input_get_device_property_items_t *S  /**< */)
d8253 1
a8253 1
    i.data = /* items */ S->data8 + R->num_items;
d8260 1
a8260 1
xcb_input_get_device_property_items_data_16 (const xcb_input_get_device_property_items_t *S  /**< */)
d8262 1
a8262 1
    return /* items */ S->data16;
d8266 2
a8267 2
xcb_input_get_device_property_items_data_16_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                    const xcb_input_get_device_property_items_t *S  /**< */)
d8273 2
a8274 2
xcb_input_get_device_property_items_data_16_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                 const xcb_input_get_device_property_items_t *S  /**< */)
d8277 1
a8277 1
    i.data = /* items */ S->data16 + R->num_items;
d8284 1
a8284 1
xcb_input_get_device_property_items_data_32 (const xcb_input_get_device_property_items_t *S  /**< */)
d8286 1
a8286 1
    return /* items */ S->data32;
d8290 2
a8291 2
xcb_input_get_device_property_items_data_32_length (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                    const xcb_input_get_device_property_items_t *S  /**< */)
d8297 2
a8298 2
xcb_input_get_device_property_items_data_32_end (const xcb_input_get_device_property_reply_t *R  /**< */,
                                                 const xcb_input_get_device_property_items_t *S  /**< */)
d8301 1
a8301 1
    i.data = /* items */ S->data32 + R->num_items;
d8308 4
a8311 4
xcb_input_get_device_property_items_serialize (void                                        **_buffer  /**< */,
                                               uint32_t                                      num_items  /**< */,
                                               uint8_t                                       format  /**< */,
                                               const xcb_input_get_device_property_items_t  *_aux  /**< */)
d8316 1
d8320 1
a8320 1
    struct iovec xcb_parts[7];
d8326 1
a8326 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d8328 1
a8328 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8337 1
d8344 12
d8357 1
a8357 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d8359 1
a8359 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8368 1
d8375 12
d8388 1
a8388 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d8390 1
a8390 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8399 1
d8408 1
a8408 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8417 1
d8437 4
a8440 4
xcb_input_get_device_property_items_unpack (const void                             *_buffer  /**< */,
                                            uint32_t                                num_items  /**< */,
                                            uint8_t                                 format  /**< */,
                                            xcb_input_get_device_property_items_t  *_aux  /**< */)
d8447 1
d8450 1
a8450 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d8452 1
a8452 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8459 1
d8465 10
d8476 1
a8476 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d8478 1
a8478 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8485 1
d8491 10
d8502 1
a8502 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d8504 1
a8504 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8511 1
d8519 1
a8519 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8526 1
d8532 3
a8534 3
xcb_input_get_device_property_items_sizeof (const void  *_buffer  /**< */,
                                            uint32_t     num_items  /**< */,
                                            uint8_t      format  /**< */)
d8540 31
d8572 7
a8578 7
xcb_input_get_device_property (xcb_connection_t *c  /**< */,
                               xcb_atom_t        property  /**< */,
                               xcb_atom_t        type  /**< */,
                               uint32_t          offset  /**< */,
                               uint32_t          len  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           _delete  /**< */)
d8581 4
a8584 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_PROPERTY,
        /* isvoid */ 0
d8609 7
a8615 7
xcb_input_get_device_property_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_atom_t        property  /**< */,
                                         xcb_atom_t        type  /**< */,
                                         uint32_t          offset  /**< */,
                                         uint32_t          len  /**< */,
                                         uint8_t           device_id  /**< */,
                                         uint8_t           _delete  /**< */)
d8618 4
a8621 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_PROPERTY,
        /* isvoid */ 0
d8646 1
a8646 1
xcb_input_get_device_property_items (const xcb_input_get_device_property_reply_t *R  /**< */)
d8652 1
a8652 1
xcb_input_get_device_property_reply (xcb_connection_t                        *c  /**< */,
d8654 1
a8654 1
                                     xcb_generic_error_t                    **e  /**< */)
d8660 1
a8660 1
xcb_input_group_info_next (xcb_input_group_info_iterator_t *i  /**< */)
d8668 1
a8668 1
xcb_input_group_info_end (xcb_input_group_info_iterator_t i  /**< */)
d8678 1
a8678 1
xcb_input_modifier_info_next (xcb_input_modifier_info_iterator_t *i  /**< */)
d8686 1
a8686 1
xcb_input_modifier_info_end (xcb_input_modifier_info_iterator_t i  /**< */)
d8696 1
a8696 1
xcb_input_xi_query_pointer_sizeof (const void  *_buffer  /**< */)
d8727 3
a8729 3
xcb_input_xi_query_pointer (xcb_connection_t      *c  /**< */,
                            xcb_window_t           window  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */)
d8732 4
a8735 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_POINTER,
        /* isvoid */ 0
d8756 3
a8758 3
xcb_input_xi_query_pointer_unchecked (xcb_connection_t      *c  /**< */,
                                      xcb_window_t           window  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */)
d8761 4
a8764 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_POINTER,
        /* isvoid */ 0
d8785 1
a8785 1
xcb_input_xi_query_pointer_buttons (const xcb_input_xi_query_pointer_reply_t *R  /**< */)
d8791 1
a8791 1
xcb_input_xi_query_pointer_buttons_length (const xcb_input_xi_query_pointer_reply_t *R  /**< */)
d8797 1
a8797 1
xcb_input_xi_query_pointer_buttons_end (const xcb_input_xi_query_pointer_reply_t *R  /**< */)
d8807 1
a8807 1
xcb_input_xi_query_pointer_reply (xcb_connection_t                     *c  /**< */,
d8809 1
a8809 1
                                  xcb_generic_error_t                 **e  /**< */)
d8815 16
a8830 16
xcb_input_xi_warp_pointer_checked (xcb_connection_t      *c  /**< */,
                                   xcb_window_t           src_win  /**< */,
                                   xcb_window_t           dst_win  /**< */,
                                   xcb_input_fp1616_t     src_x  /**< */,
                                   xcb_input_fp1616_t     src_y  /**< */,
                                   uint16_t               src_width  /**< */,
                                   uint16_t               src_height  /**< */,
                                   xcb_input_fp1616_t     dst_x  /**< */,
                                   xcb_input_fp1616_t     dst_y  /**< */,
                                   xcb_input_device_id_t  deviceid  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_WARP_POINTER,
        /* isvoid */ 1
d8858 16
a8873 16
xcb_input_xi_warp_pointer (xcb_connection_t      *c  /**< */,
                           xcb_window_t           src_win  /**< */,
                           xcb_window_t           dst_win  /**< */,
                           xcb_input_fp1616_t     src_x  /**< */,
                           xcb_input_fp1616_t     src_y  /**< */,
                           uint16_t               src_width  /**< */,
                           uint16_t               src_height  /**< */,
                           xcb_input_fp1616_t     dst_x  /**< */,
                           xcb_input_fp1616_t     dst_y  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_WARP_POINTER,
        /* isvoid */ 1
d8901 4
a8904 4
xcb_input_xi_change_cursor_checked (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           window  /**< */,
                                    xcb_cursor_t           cursor  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */)
d8907 4
a8910 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_CURSOR,
        /* isvoid */ 1
d8932 4
a8935 4
xcb_input_xi_change_cursor (xcb_connection_t      *c  /**< */,
                            xcb_window_t           window  /**< */,
                            xcb_cursor_t           cursor  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */)
d8938 4
a8941 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_CURSOR,
        /* isvoid */ 1
d8963 1
a8963 1
xcb_input_add_master_sizeof (const void  *_buffer  /**< */)
d8981 9
d9003 1
a9003 1
xcb_input_add_master_name (const xcb_input_add_master_t *R  /**< */)
d9009 1
a9009 1
xcb_input_add_master_name_length (const xcb_input_add_master_t *R  /**< */)
d9015 1
a9015 1
xcb_input_add_master_name_end (const xcb_input_add_master_t *R  /**< */)
d9025 1
a9025 1
xcb_input_add_master_next (xcb_input_add_master_iterator_t *i  /**< */)
d9036 1
a9036 1
xcb_input_add_master_end (xcb_input_add_master_iterator_t i  /**< */)
d9048 1
a9048 1
xcb_input_remove_master_next (xcb_input_remove_master_iterator_t *i  /**< */)
d9056 1
a9056 1
xcb_input_remove_master_end (xcb_input_remove_master_iterator_t i  /**< */)
d9066 1
a9066 1
xcb_input_attach_slave_next (xcb_input_attach_slave_iterator_t *i  /**< */)
d9074 1
a9074 1
xcb_input_attach_slave_end (xcb_input_attach_slave_iterator_t i  /**< */)
d9084 1
a9084 1
xcb_input_detach_slave_next (xcb_input_detach_slave_iterator_t *i  /**< */)
d9092 1
a9092 1
xcb_input_detach_slave_end (xcb_input_detach_slave_iterator_t i  /**< */)
d9101 307
d9409 1
a9409 1
xcb_input_hierarchy_change_sizeof (const void  *_buffer  /**< */)
d9423 2
a9424 2
    /* uninterpreted_data */
    xcb_block_len += ((_aux->len * 4) - 4) * sizeof(uint8_t);
d9426 1
a9426 1
    xcb_align_to = ALIGNOF(uint8_t);
d9439 2
a9440 2
uint8_t *
xcb_input_hierarchy_change_uninterpreted_data (const xcb_input_hierarchy_change_t *R  /**< */)
d9442 1
a9442 17
    return (uint8_t *) (R + 1);
}

int
xcb_input_hierarchy_change_uninterpreted_data_length (const xcb_input_hierarchy_change_t *R  /**< */)
{
    return ((R->len * 4) - 4);
}

xcb_generic_iterator_t
xcb_input_hierarchy_change_uninterpreted_data_end (const xcb_input_hierarchy_change_t *R  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (((R->len * 4) - 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d9446 1
a9446 1
xcb_input_hierarchy_change_next (xcb_input_hierarchy_change_iterator_t *i  /**< */)
d9457 1
a9457 1
xcb_input_hierarchy_change_end (xcb_input_hierarchy_change_iterator_t i  /**< */)
d9469 1
a9469 1
xcb_input_xi_change_hierarchy_sizeof (const void  *_buffer  /**< */)
d9505 3
a9507 3
xcb_input_xi_change_hierarchy_checked (xcb_connection_t                   *c  /**< */,
                                       uint8_t                             num_changes  /**< */,
                                       const xcb_input_hierarchy_change_t *changes  /**< */)
d9510 4
a9513 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_HIERARCHY,
        /* isvoid */ 1
d9547 3
a9549 3
xcb_input_xi_change_hierarchy (xcb_connection_t                   *c  /**< */,
                               uint8_t                             num_changes  /**< */,
                               const xcb_input_hierarchy_change_t *changes  /**< */)
d9552 4
a9555 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_HIERARCHY,
        /* isvoid */ 1
d9588 16
d9605 3
a9607 3
xcb_input_xi_set_client_pointer_checked (xcb_connection_t      *c  /**< */,
                                         xcb_window_t           window  /**< */,
                                         xcb_input_device_id_t  deviceid  /**< */)
d9610 4
a9613 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SET_CLIENT_POINTER,
        /* isvoid */ 1
d9634 3
a9636 3
xcb_input_xi_set_client_pointer (xcb_connection_t      *c  /**< */,
                                 xcb_window_t           window  /**< */,
                                 xcb_input_device_id_t  deviceid  /**< */)
d9639 4
a9642 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SET_CLIENT_POINTER,
        /* isvoid */ 1
d9663 2
a9664 2
xcb_input_xi_get_client_pointer (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */)
d9667 4
a9670 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_CLIENT_POINTER,
        /* isvoid */ 0
d9689 2
a9690 2
xcb_input_xi_get_client_pointer_unchecked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */)
d9693 4
a9696 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_CLIENT_POINTER,
        /* isvoid */ 0
d9715 1
a9715 1
xcb_input_xi_get_client_pointer_reply (xcb_connection_t                          *c  /**< */,
d9717 1
a9717 1
                                       xcb_generic_error_t                      **e  /**< */)
d9723 1
a9723 1
xcb_input_event_mask_sizeof (const void  *_buffer  /**< */)
d9754 1
a9754 1
xcb_input_event_mask_mask (const xcb_input_event_mask_t *R  /**< */)
d9760 1
a9760 1
xcb_input_event_mask_mask_length (const xcb_input_event_mask_t *R  /**< */)
d9766 1
a9766 1
xcb_input_event_mask_mask_end (const xcb_input_event_mask_t *R  /**< */)
d9776 1
a9776 1
xcb_input_event_mask_next (xcb_input_event_mask_iterator_t *i  /**< */)
d9787 1
a9787 1
xcb_input_event_mask_end (xcb_input_event_mask_iterator_t i  /**< */)
d9799 1
a9799 1
xcb_input_xi_select_events_sizeof (const void  *_buffer  /**< */)
d9835 4
a9838 4
xcb_input_xi_select_events_checked (xcb_connection_t             *c  /**< */,
                                    xcb_window_t                  window  /**< */,
                                    uint16_t                      num_mask  /**< */,
                                    const xcb_input_event_mask_t *masks  /**< */)
d9841 4
a9844 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SELECT_EVENTS,
        /* isvoid */ 1
d9879 4
a9882 4
xcb_input_xi_select_events (xcb_connection_t             *c  /**< */,
                            xcb_window_t                  window  /**< */,
                            uint16_t                      num_mask  /**< */,
                            const xcb_input_event_mask_t *masks  /**< */)
d9885 4
a9888 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SELECT_EVENTS,
        /* isvoid */ 1
d9922 16
d9939 3
a9941 3
xcb_input_xi_query_version (xcb_connection_t *c  /**< */,
                            uint16_t          major_version  /**< */,
                            uint16_t          minor_version  /**< */)
d9944 4
a9947 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_VERSION,
        /* isvoid */ 0
d9967 3
a9969 3
xcb_input_xi_query_version_unchecked (xcb_connection_t *c  /**< */,
                                      uint16_t          major_version  /**< */,
                                      uint16_t          minor_version  /**< */)
d9972 4
a9975 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_VERSION,
        /* isvoid */ 0
d9995 1
a9995 1
xcb_input_xi_query_version_reply (xcb_connection_t                     *c  /**< */,
d9997 1
a9997 1
                                  xcb_generic_error_t                 **e  /**< */)
d10003 1
a10003 1
xcb_input_button_class_sizeof (const void  *_buffer  /**< */)
d10046 1
a10046 1
xcb_input_button_class_state (const xcb_input_button_class_t *R  /**< */)
d10052 1
a10052 1
xcb_input_button_class_state_length (const xcb_input_button_class_t *R  /**< */)
d10058 1
a10058 1
xcb_input_button_class_state_end (const xcb_input_button_class_t *R  /**< */)
d10068 1
a10068 1
xcb_input_button_class_labels (const xcb_input_button_class_t *R  /**< */)
d10075 1
a10075 1
xcb_input_button_class_labels_length (const xcb_input_button_class_t *R  /**< */)
d10081 1
a10081 1
xcb_input_button_class_labels_end (const xcb_input_button_class_t *R  /**< */)
d10084 2
a10085 2
    xcb_generic_iterator_t child = xcb_input_button_class_state_end(R);
    i.data = ((xcb_atom_t *) child.data) + (R->num_buttons);
d10092 1
a10092 1
xcb_input_button_class_next (xcb_input_button_class_iterator_t *i  /**< */)
d10103 1
a10103 1
xcb_input_button_class_end (xcb_input_button_class_iterator_t i  /**< */)
d10115 1
a10115 1
xcb_input_key_class_sizeof (const void  *_buffer  /**< */)
d10146 1
a10146 1
xcb_input_key_class_keys (const xcb_input_key_class_t *R  /**< */)
d10152 1
a10152 1
xcb_input_key_class_keys_length (const xcb_input_key_class_t *R  /**< */)
d10158 1
a10158 1
xcb_input_key_class_keys_end (const xcb_input_key_class_t *R  /**< */)
d10168 1
a10168 1
xcb_input_key_class_next (xcb_input_key_class_iterator_t *i  /**< */)
d10179 1
a10179 1
xcb_input_key_class_end (xcb_input_key_class_iterator_t i  /**< */)
d10191 1
a10191 1
xcb_input_scroll_class_next (xcb_input_scroll_class_iterator_t *i  /**< */)
d10199 1
a10199 1
xcb_input_scroll_class_end (xcb_input_scroll_class_iterator_t i  /**< */)
d10209 1
a10209 1
xcb_input_touch_class_next (xcb_input_touch_class_iterator_t *i  /**< */)
d10217 1
a10217 1
xcb_input_touch_class_end (xcb_input_touch_class_iterator_t i  /**< */)
d10227 1
a10227 1
xcb_input_valuator_class_next (xcb_input_valuator_class_iterator_t *i  /**< */)
d10235 1
a10235 1
xcb_input_valuator_class_end (xcb_input_valuator_class_iterator_t i  /**< */)
d10244 6
d10251 9
a10259 1
xcb_input_device_class_sizeof (const void  *_buffer  /**< */)
d10261 6
a10266 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_device_class_t *_aux = (xcb_input_device_class_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d10268 5
d10274 232
a10505 3
    xcb_block_len += sizeof(xcb_input_device_class_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
d10507 172
a10678 4
    /* uninterpreted_data */
    xcb_block_len += ((_aux->len * 4) - 8) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
d10680 1
a10680 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10687 1
d10692 3
a10694 2
uint8_t *
xcb_input_device_class_uninterpreted_data (const xcb_input_device_class_t *R  /**< */)
d10696 2
a10697 1
    return (uint8_t *) (R + 1);
d10701 1
a10701 1
xcb_input_device_class_uninterpreted_data_length (const xcb_input_device_class_t *R  /**< */)
d10703 26
a10728 1
    return ((R->len * 4) - 8);
d10731 2
a10732 2
xcb_generic_iterator_t
xcb_input_device_class_uninterpreted_data_end (const xcb_input_device_class_t *R  /**< */)
d10734 1
a10734 5
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (((R->len * 4) - 8));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d10738 1
a10738 1
xcb_input_device_class_next (xcb_input_device_class_iterator_t *i  /**< */)
d10749 1
a10749 1
xcb_input_device_class_end (xcb_input_device_class_iterator_t i  /**< */)
d10761 1
a10761 1
xcb_input_xi_device_info_sizeof (const void  *_buffer  /**< */)
d10778 1
a10778 1
    xcb_block_len += (((_aux->name_len + 3) / 4) * 4) * sizeof(char);
d10781 9
d10818 1
a10818 1
xcb_input_xi_device_info_name (const xcb_input_xi_device_info_t *R  /**< */)
d10824 1
a10824 1
xcb_input_xi_device_info_name_length (const xcb_input_xi_device_info_t *R  /**< */)
d10826 1
a10826 1
    return (((R->name_len + 3) / 4) * 4);
d10830 1
a10830 1
xcb_input_xi_device_info_name_end (const xcb_input_xi_device_info_t *R  /**< */)
d10833 1
a10833 1
    i.data = ((char *) (R + 1)) + ((((R->name_len + 3) / 4) * 4));
d10840 1
a10840 1
xcb_input_xi_device_info_classes_length (const xcb_input_xi_device_info_t *R  /**< */)
d10846 1
a10846 1
xcb_input_xi_device_info_classes_iterator (const xcb_input_xi_device_info_t *R  /**< */)
d10850 1
a10850 1
    i.data = (xcb_input_device_class_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_device_class_t, prev.index));
d10857 1
a10857 1
xcb_input_xi_device_info_next (xcb_input_xi_device_info_iterator_t *i  /**< */)
d10868 1
a10868 1
xcb_input_xi_device_info_end (xcb_input_xi_device_info_iterator_t i  /**< */)
d10880 1
a10880 1
xcb_input_xi_query_device_sizeof (const void  *_buffer  /**< */)
d10916 2
a10917 2
xcb_input_xi_query_device (xcb_connection_t      *c  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */)
d10920 4
a10923 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_DEVICE,
        /* isvoid */ 0
d10943 2
a10944 2
xcb_input_xi_query_device_unchecked (xcb_connection_t      *c  /**< */,
                                     xcb_input_device_id_t  deviceid  /**< */)
d10947 4
a10950 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_QUERY_DEVICE,
        /* isvoid */ 0
d10970 1
a10970 1
xcb_input_xi_query_device_infos_length (const xcb_input_xi_query_device_reply_t *R  /**< */)
d10976 1
a10976 1
xcb_input_xi_query_device_infos_iterator (const xcb_input_xi_query_device_reply_t *R  /**< */)
d10986 1
a10986 1
xcb_input_xi_query_device_reply (xcb_connection_t                    *c  /**< */,
d10988 1
a10988 1
                                 xcb_generic_error_t                **e  /**< */)
d10994 4
a10997 4
xcb_input_xi_set_focus_checked (xcb_connection_t      *c  /**< */,
                                xcb_window_t           window  /**< */,
                                xcb_timestamp_t        time  /**< */,
                                xcb_input_device_id_t  deviceid  /**< */)
d11000 4
a11003 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SET_FOCUS,
        /* isvoid */ 1
d11025 4
a11028 4
xcb_input_xi_set_focus (xcb_connection_t      *c  /**< */,
                        xcb_window_t           window  /**< */,
                        xcb_timestamp_t        time  /**< */,
                        xcb_input_device_id_t  deviceid  /**< */)
d11031 4
a11034 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_SET_FOCUS,
        /* isvoid */ 1
d11056 2
a11057 2
xcb_input_xi_get_focus (xcb_connection_t      *c  /**< */,
                        xcb_input_device_id_t  deviceid  /**< */)
d11060 4
a11063 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_FOCUS,
        /* isvoid */ 0
d11083 2
a11084 2
xcb_input_xi_get_focus_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_input_device_id_t  deviceid  /**< */)
d11087 4
a11090 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_FOCUS,
        /* isvoid */ 0
d11110 1
a11110 1
xcb_input_xi_get_focus_reply (xcb_connection_t                 *c  /**< */,
d11112 1
a11112 1
                              xcb_generic_error_t             **e  /**< */)
d11118 1
a11118 1
xcb_input_xi_grab_device_sizeof (const void  *_buffer  /**< */)
d11149 16
a11164 16
xcb_input_xi_grab_device (xcb_connection_t      *c  /**< */,
                          xcb_window_t           window  /**< */,
                          xcb_timestamp_t        time  /**< */,
                          xcb_cursor_t           cursor  /**< */,
                          xcb_input_device_id_t  deviceid  /**< */,
                          uint8_t                mode  /**< */,
                          uint8_t                paired_device_mode  /**< */,
                          uint8_t                owner_events  /**< */,
                          uint16_t               mask_len  /**< */,
                          const uint32_t        *mask  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GRAB_DEVICE,
        /* isvoid */ 0
d11196 16
a11211 16
xcb_input_xi_grab_device_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           window  /**< */,
                                    xcb_timestamp_t        time  /**< */,
                                    xcb_cursor_t           cursor  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */,
                                    uint8_t                mode  /**< */,
                                    uint8_t                paired_device_mode  /**< */,
                                    uint8_t                owner_events  /**< */,
                                    uint16_t               mask_len  /**< */,
                                    const uint32_t        *mask  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GRAB_DEVICE,
        /* isvoid */ 0
d11243 1
a11243 1
xcb_input_xi_grab_device_reply (xcb_connection_t                   *c  /**< */,
d11245 1
a11245 1
                                xcb_generic_error_t               **e  /**< */)
d11251 3
a11253 3
xcb_input_xi_ungrab_device_checked (xcb_connection_t      *c  /**< */,
                                    xcb_timestamp_t        time  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */)
d11256 4
a11259 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_UNGRAB_DEVICE,
        /* isvoid */ 1
d11280 3
a11282 3
xcb_input_xi_ungrab_device (xcb_connection_t      *c  /**< */,
                            xcb_timestamp_t        time  /**< */,
                            xcb_input_device_id_t  deviceid  /**< */)
d11285 4
a11288 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_UNGRAB_DEVICE,
        /* isvoid */ 1
d11309 6
a11314 6
xcb_input_xi_allow_events_checked (xcb_connection_t      *c  /**< */,
                                   xcb_timestamp_t        time  /**< */,
                                   xcb_input_device_id_t  deviceid  /**< */,
                                   uint8_t                event_mode  /**< */,
                                   uint32_t               touchid  /**< */,
                                   xcb_window_t           grab_window  /**< */)
d11317 4
a11320 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_ALLOW_EVENTS,
        /* isvoid */ 1
d11344 6
a11349 6
xcb_input_xi_allow_events (xcb_connection_t      *c  /**< */,
                           xcb_timestamp_t        time  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */,
                           uint8_t                event_mode  /**< */,
                           uint32_t               touchid  /**< */,
                           xcb_window_t           grab_window  /**< */)
d11352 4
a11355 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_ALLOW_EVENTS,
        /* isvoid */ 1
d11379 1
a11379 1
xcb_input_grab_modifier_info_next (xcb_input_grab_modifier_info_iterator_t *i  /**< */)
d11387 1
a11387 1
xcb_input_grab_modifier_info_end (xcb_input_grab_modifier_info_iterator_t i  /**< */)
d11397 1
a11397 1
xcb_input_xi_passive_grab_device_sizeof (const void  *_buffer  /**< */)
d11440 20
a11459 20
xcb_input_xi_passive_grab_device (xcb_connection_t      *c  /**< */,
                                  xcb_timestamp_t        time  /**< */,
                                  xcb_window_t           grab_window  /**< */,
                                  xcb_cursor_t           cursor  /**< */,
                                  uint32_t               detail  /**< */,
                                  xcb_input_device_id_t  deviceid  /**< */,
                                  uint16_t               num_modifiers  /**< */,
                                  uint16_t               mask_len  /**< */,
                                  uint8_t                grab_type  /**< */,
                                  uint8_t                grab_mode  /**< */,
                                  uint8_t                paired_device_mode  /**< */,
                                  uint8_t                owner_events  /**< */,
                                  const uint32_t        *mask  /**< */,
                                  const uint32_t        *modifiers  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_PASSIVE_GRAB_DEVICE,
        /* isvoid */ 0
d11499 20
a11518 20
xcb_input_xi_passive_grab_device_unchecked (xcb_connection_t      *c  /**< */,
                                            xcb_timestamp_t        time  /**< */,
                                            xcb_window_t           grab_window  /**< */,
                                            xcb_cursor_t           cursor  /**< */,
                                            uint32_t               detail  /**< */,
                                            xcb_input_device_id_t  deviceid  /**< */,
                                            uint16_t               num_modifiers  /**< */,
                                            uint16_t               mask_len  /**< */,
                                            uint8_t                grab_type  /**< */,
                                            uint8_t                grab_mode  /**< */,
                                            uint8_t                paired_device_mode  /**< */,
                                            uint8_t                owner_events  /**< */,
                                            const uint32_t        *mask  /**< */,
                                            const uint32_t        *modifiers  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_PASSIVE_GRAB_DEVICE,
        /* isvoid */ 0
d11558 1
a11558 1
xcb_input_xi_passive_grab_device_modifiers (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */)
d11564 1
a11564 1
xcb_input_xi_passive_grab_device_modifiers_length (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */)
d11570 1
a11570 1
xcb_input_xi_passive_grab_device_modifiers_iterator (const xcb_input_xi_passive_grab_device_reply_t *R  /**< */)
d11580 1
a11580 1
xcb_input_xi_passive_grab_device_reply (xcb_connection_t                           *c  /**< */,
d11582 1
a11582 1
                                        xcb_generic_error_t                       **e  /**< */)
d11588 1
a11588 1
xcb_input_xi_passive_ungrab_device_sizeof (const void  *_buffer  /**< */)
d11619 7
a11625 7
xcb_input_xi_passive_ungrab_device_checked (xcb_connection_t      *c  /**< */,
                                            xcb_window_t           grab_window  /**< */,
                                            uint32_t               detail  /**< */,
                                            xcb_input_device_id_t  deviceid  /**< */,
                                            uint16_t               num_modifiers  /**< */,
                                            uint8_t                grab_type  /**< */,
                                            const uint32_t        *modifiers  /**< */)
d11628 4
a11631 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_PASSIVE_UNGRAB_DEVICE,
        /* isvoid */ 1
d11660 7
a11666 7
xcb_input_xi_passive_ungrab_device (xcb_connection_t      *c  /**< */,
                                    xcb_window_t           grab_window  /**< */,
                                    uint32_t               detail  /**< */,
                                    xcb_input_device_id_t  deviceid  /**< */,
                                    uint16_t               num_modifiers  /**< */,
                                    uint8_t                grab_type  /**< */,
                                    const uint32_t        *modifiers  /**< */)
d11669 4
a11672 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_PASSIVE_UNGRAB_DEVICE,
        /* isvoid */ 1
d11700 22
d11723 1
a11723 1
xcb_input_xi_list_properties_sizeof (const void  *_buffer  /**< */)
d11754 2
a11755 2
xcb_input_xi_list_properties (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */)
d11758 4
a11761 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_LIST_PROPERTIES,
        /* isvoid */ 0
d11781 2
a11782 2
xcb_input_xi_list_properties_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_input_device_id_t  deviceid  /**< */)
d11785 4
a11788 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_LIST_PROPERTIES,
        /* isvoid */ 0
d11808 1
a11808 1
xcb_input_xi_list_properties_properties (const xcb_input_xi_list_properties_reply_t *R  /**< */)
d11814 1
a11814 1
xcb_input_xi_list_properties_properties_length (const xcb_input_xi_list_properties_reply_t *R  /**< */)
d11820 1
a11820 1
xcb_input_xi_list_properties_properties_end (const xcb_input_xi_list_properties_reply_t *R  /**< */)
d11830 1
a11830 1
xcb_input_xi_list_properties_reply (xcb_connection_t                       *c  /**< */,
d11832 1
a11832 1
                                    xcb_generic_error_t                   **e  /**< */)
d11838 1
a11838 1
xcb_input_xi_change_property_items_data_8 (const xcb_input_xi_change_property_items_t *S  /**< */)
d11840 1
a11840 1
    return /* items */ S->data8;
d11844 2
a11845 2
xcb_input_xi_change_property_items_data_8_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                  const xcb_input_xi_change_property_items_t *S  /**< */)
d11851 2
a11852 2
xcb_input_xi_change_property_items_data_8_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                               const xcb_input_xi_change_property_items_t *S  /**< */)
d11855 1
a11855 1
    i.data = /* items */ S->data8 + R->num_items;
d11862 1
a11862 1
xcb_input_xi_change_property_items_data_16 (const xcb_input_xi_change_property_items_t *S  /**< */)
d11864 1
a11864 1
    return /* items */ S->data16;
d11868 2
a11869 2
xcb_input_xi_change_property_items_data_16_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                   const xcb_input_xi_change_property_items_t *S  /**< */)
d11875 2
a11876 2
xcb_input_xi_change_property_items_data_16_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                const xcb_input_xi_change_property_items_t *S  /**< */)
d11879 1
a11879 1
    i.data = /* items */ S->data16 + R->num_items;
d11886 1
a11886 1
xcb_input_xi_change_property_items_data_32 (const xcb_input_xi_change_property_items_t *S  /**< */)
d11888 1
a11888 1
    return /* items */ S->data32;
d11892 2
a11893 2
xcb_input_xi_change_property_items_data_32_length (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                   const xcb_input_xi_change_property_items_t *S  /**< */)
d11899 2
a11900 2
xcb_input_xi_change_property_items_data_32_end (const xcb_input_xi_change_property_request_t *R  /**< */,
                                                const xcb_input_xi_change_property_items_t *S  /**< */)
d11903 1
a11903 1
    i.data = /* items */ S->data32 + R->num_items;
d11910 4
a11913 4
xcb_input_xi_change_property_items_serialize (void                                       **_buffer  /**< */,
                                              uint32_t                                     num_items  /**< */,
                                              uint8_t                                      format  /**< */,
                                              const xcb_input_xi_change_property_items_t  *_aux  /**< */)
d11918 1
d11922 1
a11922 1
    struct iovec xcb_parts[7];
d11928 1
a11928 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d11930 1
a11930 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d11939 1
d11946 1
a11946 2
    }
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d11948 1
a11948 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d11957 14
d11977 12
d11990 1
a11990 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d11992 1
a11992 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12001 1
d12010 1
a12010 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12019 1
d12039 4
a12042 4
xcb_input_xi_change_property_items_unpack (const void                            *_buffer  /**< */,
                                           uint32_t                               num_items  /**< */,
                                           uint8_t                                format  /**< */,
                                           xcb_input_xi_change_property_items_t  *_aux  /**< */)
d12049 1
d12052 1
a12052 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d12054 1
a12054 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12061 1
d12067 10
d12078 1
a12078 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d12080 1
a12080 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12087 1
d12093 10
d12104 1
a12104 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d12106 1
a12106 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12113 1
d12121 1
a12121 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12128 1
d12134 3
a12136 3
xcb_input_xi_change_property_items_sizeof (const void  *_buffer  /**< */,
                                           uint32_t     num_items  /**< */,
                                           uint8_t      format  /**< */)
d12142 31
d12174 8
a12181 8
xcb_input_xi_change_property_checked (xcb_connection_t      *c  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */,
                                      uint8_t                mode  /**< */,
                                      uint8_t                format  /**< */,
                                      xcb_atom_t             property  /**< */,
                                      xcb_atom_t             type  /**< */,
                                      uint32_t               num_items  /**< */,
                                      const void            *items  /**< */)
d12184 4
a12187 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_PROPERTY,
        /* isvoid */ 1
d12215 8
a12222 8
xcb_input_xi_change_property (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */,
                              uint8_t                mode  /**< */,
                              uint8_t                format  /**< */,
                              xcb_atom_t             property  /**< */,
                              xcb_atom_t             type  /**< */,
                              uint32_t               num_items  /**< */,
                              const void            *items  /**< */)
d12225 4
a12228 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_PROPERTY,
        /* isvoid */ 1
d12256 8
a12263 8
xcb_input_xi_change_property_aux_checked (xcb_connection_t                           *c  /**< */,
                                          xcb_input_device_id_t                       deviceid  /**< */,
                                          uint8_t                                     mode  /**< */,
                                          uint8_t                                     format  /**< */,
                                          xcb_atom_t                                  property  /**< */,
                                          xcb_atom_t                                  type  /**< */,
                                          uint32_t                                    num_items  /**< */,
                                          const xcb_input_xi_change_property_items_t *items  /**< */)
d12266 4
a12269 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_PROPERTY,
        /* isvoid */ 1
d12299 8
a12306 8
xcb_input_xi_change_property_aux (xcb_connection_t                           *c  /**< */,
                                  xcb_input_device_id_t                       deviceid  /**< */,
                                  uint8_t                                     mode  /**< */,
                                  uint8_t                                     format  /**< */,
                                  xcb_atom_t                                  property  /**< */,
                                  xcb_atom_t                                  type  /**< */,
                                  uint32_t                                    num_items  /**< */,
                                  const xcb_input_xi_change_property_items_t *items  /**< */)
d12309 4
a12312 4
        /* count */ 3,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_CHANGE_PROPERTY,
        /* isvoid */ 1
d12341 6
d12348 3
a12350 3
xcb_input_xi_delete_property_checked (xcb_connection_t      *c  /**< */,
                                      xcb_input_device_id_t  deviceid  /**< */,
                                      xcb_atom_t             property  /**< */)
d12353 4
a12356 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_DELETE_PROPERTY,
        /* isvoid */ 1
d12377 3
a12379 3
xcb_input_xi_delete_property (xcb_connection_t      *c  /**< */,
                              xcb_input_device_id_t  deviceid  /**< */,
                              xcb_atom_t             property  /**< */)
d12382 4
a12385 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_DELETE_PROPERTY,
        /* isvoid */ 1
d12406 1
a12406 1
xcb_input_xi_get_property_items_data_8 (const xcb_input_xi_get_property_items_t *S  /**< */)
d12408 1
a12408 1
    return /* items */ S->data8;
d12412 2
a12413 2
xcb_input_xi_get_property_items_data_8_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                               const xcb_input_xi_get_property_items_t *S  /**< */)
d12419 2
a12420 2
xcb_input_xi_get_property_items_data_8_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                            const xcb_input_xi_get_property_items_t *S  /**< */)
d12423 1
a12423 1
    i.data = /* items */ S->data8 + R->num_items;
d12430 1
a12430 1
xcb_input_xi_get_property_items_data_16 (const xcb_input_xi_get_property_items_t *S  /**< */)
d12432 1
a12432 1
    return /* items */ S->data16;
d12436 2
a12437 2
xcb_input_xi_get_property_items_data_16_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                                const xcb_input_xi_get_property_items_t *S  /**< */)
d12443 2
a12444 2
xcb_input_xi_get_property_items_data_16_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                             const xcb_input_xi_get_property_items_t *S  /**< */)
d12447 1
a12447 1
    i.data = /* items */ S->data16 + R->num_items;
d12454 1
a12454 1
xcb_input_xi_get_property_items_data_32 (const xcb_input_xi_get_property_items_t *S  /**< */)
d12456 1
a12456 1
    return /* items */ S->data32;
d12460 2
a12461 2
xcb_input_xi_get_property_items_data_32_length (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                                const xcb_input_xi_get_property_items_t *S  /**< */)
d12467 2
a12468 2
xcb_input_xi_get_property_items_data_32_end (const xcb_input_xi_get_property_reply_t *R  /**< */,
                                             const xcb_input_xi_get_property_items_t *S  /**< */)
d12471 1
a12471 1
    i.data = /* items */ S->data32 + R->num_items;
d12478 4
a12481 4
xcb_input_xi_get_property_items_serialize (void                                    **_buffer  /**< */,
                                           uint32_t                                  num_items  /**< */,
                                           uint8_t                                   format  /**< */,
                                           const xcb_input_xi_get_property_items_t  *_aux  /**< */)
d12486 1
d12490 1
a12490 1
    struct iovec xcb_parts[7];
d12496 1
a12496 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d12498 1
a12498 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12507 1
d12514 12
d12527 1
a12527 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d12529 1
a12529 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12538 1
d12545 12
d12558 1
a12558 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d12560 1
a12560 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12569 1
d12578 1
a12578 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12587 1
d12607 4
a12610 4
xcb_input_xi_get_property_items_unpack (const void                         *_buffer  /**< */,
                                        uint32_t                            num_items  /**< */,
                                        uint8_t                             format  /**< */,
                                        xcb_input_xi_get_property_items_t  *_aux  /**< */)
d12617 1
d12620 1
a12620 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_8_BITS) {
d12622 1
a12622 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12629 1
d12635 10
d12646 1
a12646 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_16_BITS) {
d12648 1
a12648 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12655 1
d12661 10
d12672 1
a12672 1
    if(format & XCB_INPUT_PROPERTY_FORMAT_32_BITS) {
d12674 1
a12674 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12681 1
d12689 1
a12689 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d12696 1
d12702 3
a12704 3
xcb_input_xi_get_property_items_sizeof (const void  *_buffer  /**< */,
                                        uint32_t     num_items  /**< */,
                                        uint8_t      format  /**< */)
d12710 31
d12742 7
a12748 7
xcb_input_xi_get_property (xcb_connection_t      *c  /**< */,
                           xcb_input_device_id_t  deviceid  /**< */,
                           uint8_t                _delete  /**< */,
                           xcb_atom_t             property  /**< */,
                           xcb_atom_t             type  /**< */,
                           uint32_t               offset  /**< */,
                           uint32_t               len  /**< */)
d12751 4
a12754 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_PROPERTY,
        /* isvoid */ 0
d12779 7
a12785 7
xcb_input_xi_get_property_unchecked (xcb_connection_t      *c  /**< */,
                                     xcb_input_device_id_t  deviceid  /**< */,
                                     uint8_t                _delete  /**< */,
                                     xcb_atom_t             property  /**< */,
                                     xcb_atom_t             type  /**< */,
                                     uint32_t               offset  /**< */,
                                     uint32_t               len  /**< */)
d12788 4
a12791 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_PROPERTY,
        /* isvoid */ 0
d12816 1
a12816 1
xcb_input_xi_get_property_items (const xcb_input_xi_get_property_reply_t *R  /**< */)
d12822 1
a12822 1
xcb_input_xi_get_property_reply (xcb_connection_t                    *c  /**< */,
d12824 1
a12824 1
                                 xcb_generic_error_t                **e  /**< */)
d12830 1
a12830 1
xcb_input_xi_get_selected_events_sizeof (const void  *_buffer  /**< */)
d12866 2
a12867 2
xcb_input_xi_get_selected_events (xcb_connection_t *c  /**< */,
                                  xcb_window_t      window  /**< */)
d12870 4
a12873 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_SELECTED_EVENTS,
        /* isvoid */ 0
d12892 2
a12893 2
xcb_input_xi_get_selected_events_unchecked (xcb_connection_t *c  /**< */,
                                            xcb_window_t      window  /**< */)
d12896 4
a12899 4
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_GET_SELECTED_EVENTS,
        /* isvoid */ 0
d12918 1
a12918 1
xcb_input_xi_get_selected_events_masks_length (const xcb_input_xi_get_selected_events_reply_t *R  /**< */)
d12924 1
a12924 1
xcb_input_xi_get_selected_events_masks_iterator (const xcb_input_xi_get_selected_events_reply_t *R  /**< */)
d12934 1
a12934 1
xcb_input_xi_get_selected_events_reply (xcb_connection_t                           *c  /**< */,
d12936 1
a12936 1
                                        xcb_generic_error_t                       **e  /**< */)
d12942 1
a12942 1
xcb_input_barrier_release_pointer_info_next (xcb_input_barrier_release_pointer_info_iterator_t *i  /**< */)
d12950 1
a12950 1
xcb_input_barrier_release_pointer_info_end (xcb_input_barrier_release_pointer_info_iterator_t i  /**< */)
d12960 1
a12960 1
xcb_input_xi_barrier_release_pointer_sizeof (const void  *_buffer  /**< */)
d12991 3
a12993 3
xcb_input_xi_barrier_release_pointer_checked (xcb_connection_t                               *c  /**< */,
                                              uint32_t                                        num_barriers  /**< */,
                                              const xcb_input_barrier_release_pointer_info_t *barriers  /**< */)
d12996 4
a12999 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_BARRIER_RELEASE_POINTER,
        /* isvoid */ 1
d13023 3
a13025 3
xcb_input_xi_barrier_release_pointer (xcb_connection_t                               *c  /**< */,
                                      uint32_t                                        num_barriers  /**< */,
                                      const xcb_input_barrier_release_pointer_info_t *barriers  /**< */)
d13028 4
a13031 4
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_XI_BARRIER_RELEASE_POINTER,
        /* isvoid */ 1
d13054 22
d13077 1
a13077 1
xcb_input_device_changed_sizeof (const void  *_buffer  /**< */)
d13113 17
a13129 1
xcb_input_key_press_sizeof (const void  *_buffer  /**< */)
d13138 4
d13171 9
a13179 29

    return xcb_buffer_len;
}

int
xcb_input_key_release_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_key_release_event_t *_aux = (xcb_input_key_release_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_key_release_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
d13181 2
a13182 3
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
d13184 1
a13184 1
    xcb_align_to = ALIGNOF(uint32_t);
d13197 104
d13302 1
a13302 1
xcb_input_button_press_sizeof (const void  *_buffer  /**< */)
d13311 4
d13344 12
a13355 21

    return xcb_buffer_len;
}

int
xcb_input_button_release_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_button_release_event_t *_aux = (xcb_input_button_release_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_button_release_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
d13357 1
a13357 13
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
d13367 30
a13396 1
    return xcb_buffer_len;
d13400 18
a13417 1
xcb_input_motion_sizeof (const void  *_buffer  /**< */)
d13419 3
a13421 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_motion_event_t *_aux = (xcb_input_motion_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d13423 44
d13468 5
a13472 28
    xcb_block_len += sizeof(xcb_input_motion_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d13474 4
a13477 1
    return xcb_buffer_len;
d13481 1
a13481 1
xcb_input_enter_sizeof (const void  *_buffer  /**< */)
d13511 6
d13518 1
a13518 1
xcb_input_leave_sizeof (const void  *_buffer  /**< */)
d13520 2
a13521 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_leave_event_t *_aux = (xcb_input_leave_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d13523 9
d13533 4
a13536 18
    xcb_block_len += sizeof(xcb_input_leave_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* buttons */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d13542 1
a13542 26
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_focus_in_event_t *_aux = (xcb_input_focus_in_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_focus_in_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* buttons */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d13548 1
a13548 26
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_focus_out_event_t *_aux = (xcb_input_focus_out_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_focus_out_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* buttons */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d13552 1
a13552 1
xcb_input_hierarchy_info_next (xcb_input_hierarchy_info_iterator_t *i  /**< */)
d13560 1
a13560 1
xcb_input_hierarchy_info_end (xcb_input_hierarchy_info_iterator_t i  /**< */)
d13570 1
a13570 1
xcb_input_hierarchy_sizeof (const void  *_buffer  /**< */)
d13600 22
d13623 1
a13623 1
xcb_input_raw_key_press_sizeof (const void  *_buffer  /**< */)
d13632 8
d13657 44
d13705 126
d13834 6
d13841 1
a13841 1
    const xcb_input_raw_key_release_event_t *_aux = (xcb_input_raw_key_release_event_t *)_buffer;
d13847 8
d13856 1
a13856 1
    xcb_block_len += sizeof(xcb_input_raw_key_release_event_t);
d13872 21
a13892 18

    return xcb_buffer_len;
}

int
xcb_input_raw_button_press_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_button_press_event_t *_aux = (xcb_input_raw_button_press_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_raw_button_press_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
d13894 12
a13905 2
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
d13907 1
a13907 1
    xcb_align_to = ALIGNOF(uint32_t);
d13920 6
d13927 1
a13927 1
xcb_input_raw_button_release_sizeof (const void  *_buffer  /**< */)
d13929 2
a13930 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_button_release_event_t *_aux = (xcb_input_raw_button_release_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d13932 9
d13942 6
a13947 16
    xcb_block_len += sizeof(xcb_input_raw_button_release_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d13949 43
a13991 1
    return xcb_buffer_len;
d13994 2
a13995 2
int
xcb_input_raw_motion_sizeof (const void  *_buffer  /**< */)
d13997 3
a13999 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_motion_event_t *_aux = (xcb_input_raw_motion_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d14001 44
d14046 5
a14050 16
    xcb_block_len += sizeof(xcb_input_raw_motion_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d14052 4
a14055 1
    return xcb_buffer_len;
d14059 1
a14059 1
xcb_input_touch_begin_sizeof (const void  *_buffer  /**< */)
d14068 4
d14101 9
a14109 29

    return xcb_buffer_len;
}

int
xcb_input_touch_update_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_touch_update_event_t *_aux = (xcb_input_touch_update_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_touch_update_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
d14111 2
a14112 3
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
d14114 1
a14114 1
    xcb_align_to = ALIGNOF(uint32_t);
d14127 104
d14234 6
d14241 1
a14241 1
    const xcb_input_touch_end_event_t *_aux = (xcb_input_touch_end_event_t *)_buffer;
d14247 8
d14256 1
a14256 1
    xcb_block_len += sizeof(xcb_input_touch_end_event_t);
d14260 2
a14261 2
    /* button_mask */
    xcb_block_len += _aux->buttons_len * sizeof(uint32_t);
d14272 12
a14283 2
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
d14285 1
a14285 1
    xcb_align_to = ALIGNOF(uint32_t);
d14294 12
a14305 16

    return xcb_buffer_len;
}

int
xcb_input_raw_touch_begin_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_touch_begin_event_t *_aux = (xcb_input_raw_touch_begin_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_input_raw_touch_begin_event_t);
d14307 1
a14307 6
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
d14320 6
d14327 1
a14327 1
xcb_input_raw_touch_update_sizeof (const void  *_buffer  /**< */)
d14329 2
a14330 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_touch_update_event_t *_aux = (xcb_input_raw_touch_update_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d14332 9
d14342 6
a14347 16
    xcb_block_len += sizeof(xcb_input_raw_touch_update_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d14349 43
a14391 1
    return xcb_buffer_len;
d14394 2
a14395 2
int
xcb_input_raw_touch_end_sizeof (const void  *_buffer  /**< */)
d14397 3
a14399 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_raw_touch_end_event_t *_aux = (xcb_input_raw_touch_end_event_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
d14401 44
d14446 5
a14450 16
    xcb_block_len += sizeof(xcb_input_raw_touch_end_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valuator_mask */
    xcb_block_len += _aux->valuators_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d14452 4
a14455 1
    return xcb_buffer_len;
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a16 3
#include "xproto.h"
#include "render.h"
#include "shape.h"
a20 10

/*****************************************************************************
 **
 ** void xcb_input_event_class_next
 ** 
 ** @@param xcb_input_event_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_class_end
 ** 
 ** @@param xcb_input_event_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_input_key_code_next
 ** 
 ** @@param xcb_input_key_code_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_code_end
 ** 
 ** @@param xcb_input_key_code_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_input_device_id_next
 ** 
 ** @@param xcb_input_device_id_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_id_end
 ** 
 ** @@param xcb_input_device_id_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_input_fp1616_next
 ** 
 ** @@param xcb_input_fp1616_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_fp1616_end
 ** 
 ** @@param xcb_input_fp1616_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a92 10

/*****************************************************************************
 **
 ** void xcb_input_fp3232_next
 ** 
 ** @@param xcb_input_fp3232_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a100 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_fp3232_end
 ** 
 ** @@param xcb_input_fp3232_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a141 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
 **
 *****************************************************************************/
 
d153 1
a153 1
    
d157 1
a157 1
    
d160 1
a160 1
    
d170 1
a170 1
    
a174 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_cookie_t xcb_input_get_extension_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_input_get_extension_version_cookie_t
 **
 *****************************************************************************/
 
d186 1
a186 1
    
d190 1
a190 1
    
d193 1
a193 1
    
d203 1
a203 1
    
a207 12

/*****************************************************************************
 **
 ** xcb_input_get_extension_version_reply_t * xcb_input_get_extension_version_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_get_extension_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_get_extension_version_reply_t *
 **
 *****************************************************************************/
 
a215 10

/*****************************************************************************
 **
 ** void xcb_input_device_info_next
 ** 
 ** @@param xcb_input_device_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a223 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_info_end
 ** 
 ** @@param xcb_input_device_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a233 10

/*****************************************************************************
 **
 ** void xcb_input_key_info_next
 ** 
 ** @@param xcb_input_key_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a241 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_info_end
 ** 
 ** @@param xcb_input_key_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a251 10

/*****************************************************************************
 **
 ** void xcb_input_button_info_next
 ** 
 ** @@param xcb_input_button_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a259 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_info_end
 ** 
 ** @@param xcb_input_button_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a269 10

/*****************************************************************************
 **
 ** void xcb_input_axis_info_next
 ** 
 ** @@param xcb_input_axis_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a277 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_axis_info_end
 ** 
 ** @@param xcb_input_axis_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a318 10

/*****************************************************************************
 **
 ** xcb_input_axis_info_t * xcb_input_valuator_info_axes
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_t *
 **
 *****************************************************************************/
 
a324 10

/*****************************************************************************
 **
 ** int xcb_input_valuator_info_axes_length
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a330 10

/*****************************************************************************
 **
 ** xcb_input_axis_info_iterator_t xcb_input_valuator_info_axes_iterator
 ** 
 ** @@param const xcb_input_valuator_info_t *R
 ** @@returns xcb_input_axis_info_iterator_t
 **
 *****************************************************************************/
 
a340 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_info_next
 ** 
 ** @@param xcb_input_valuator_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a351 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_info_end
 ** 
 ** @@param xcb_input_valuator_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a363 10

/*****************************************************************************
 **
 ** void xcb_input_input_info_next
 ** 
 ** @@param xcb_input_input_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a371 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_info_end
 ** 
 ** @@param xcb_input_input_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a412 10

/*****************************************************************************
 **
 ** char * xcb_input_device_name_string
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a418 10

/*****************************************************************************
 **
 ** int xcb_input_device_name_string_length
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a424 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_name_string_end
 ** 
 ** @@param const xcb_input_device_name_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a434 10

/*****************************************************************************
 **
 ** void xcb_input_device_name_next
 ** 
 ** @@param xcb_input_device_name_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a445 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_name_end
 ** 
 ** @@param xcb_input_device_name_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a488 10

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
 **
 *****************************************************************************/
 
d498 1
a498 1
    
d502 2
a503 2
    
    
d508 1
a508 1
    
a512 10

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
 **
 *****************************************************************************/
 
d522 1
a522 1
    
d526 2
a527 2
    
    
d532 1
a532 1
    
a536 10

/*****************************************************************************
 **
 ** xcb_input_device_info_t * xcb_input_list_input_devices_devices
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_t *
 **
 *****************************************************************************/
 
a542 10

/*****************************************************************************
 **
 ** int xcb_input_list_input_devices_devices_length
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a548 10

/*****************************************************************************
 **
 ** xcb_input_device_info_iterator_t xcb_input_list_input_devices_devices_iterator
 ** 
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_iterator_t
 **
 *****************************************************************************/
 
a558 12

/*****************************************************************************
 **
 ** xcb_input_list_input_devices_reply_t * xcb_input_list_input_devices_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_list_input_devices_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_list_input_devices_reply_t *
 **
 *****************************************************************************/
 
a566 10

/*****************************************************************************
 **
 ** void xcb_input_input_class_info_next
 ** 
 ** @@param xcb_input_input_class_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a574 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_class_info_end
 ** 
 ** @@param xcb_input_input_class_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a615 11

/*****************************************************************************
 **
 ** xcb_input_open_device_cookie_t xcb_input_open_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
 **
 *****************************************************************************/
 
d626 1
a626 1
    
d630 1
a630 1
    
d633 1
a633 1
    
d638 1
a638 1
    
a642 11

/*****************************************************************************
 **
 ** xcb_input_open_device_cookie_t xcb_input_open_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
 **
 *****************************************************************************/
 
d653 1
a653 1
    
d657 1
a657 1
    
d660 1
a660 1
    
d665 1
a665 1
    
a669 10

/*****************************************************************************
 **
 ** xcb_input_input_class_info_t * xcb_input_open_device_class_info
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_t *
 **
 *****************************************************************************/
 
a675 10

/*****************************************************************************
 **
 ** int xcb_input_open_device_class_info_length
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a681 10

/*****************************************************************************
 **
 ** xcb_input_input_class_info_iterator_t xcb_input_open_device_class_info_iterator
 ** 
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_iterator_t
 **
 *****************************************************************************/
 
a691 12

/*****************************************************************************
 **
 ** xcb_input_open_device_reply_t * xcb_input_open_device_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_open_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_open_device_reply_t *
 **
 *****************************************************************************/
 
a699 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_close_device_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d710 1
a710 1
    
d714 1
a714 1
    
d717 1
a717 1
    
d722 1
a722 1
    
a726 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_close_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d737 1
a737 1
    
d741 1
a741 1
    
d744 1
a744 1
    
d749 1
a749 1
    
a753 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
 **
 *****************************************************************************/
 
d765 1
a765 1
    
d769 1
a769 1
    
d773 1
a773 1
    
d778 1
a778 1
    
a782 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
 **
 *****************************************************************************/
 
d794 1
a794 1
    
d798 1
a798 1
    
d802 1
a802 1
    
d807 1
a807 1
    
a811 12

/*****************************************************************************
 **
 ** xcb_input_set_device_mode_reply_t * xcb_input_set_device_mode_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_set_device_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_set_device_mode_reply_t *
 **
 *****************************************************************************/
 
a850 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_select_extension_event_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d863 1
a863 1
    
d867 1
a867 1
    
d871 1
a871 1
    
d881 1
a881 1
    
a885 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_select_extension_event
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d898 1
a898 1
    
d902 1
a902 1
    
d906 1
a906 1
    
d916 1
a916 1
    
a963 11

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
 **
 *****************************************************************************/
 
d974 1
a974 1
    
d978 1
a978 1
    
d980 1
a980 1
    
d985 1
a985 1
    
a989 11

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
 **
 *****************************************************************************/
 
d1000 1
a1000 1
    
d1004 1
a1004 1
    
d1006 1
a1006 1
    
d1011 1
a1011 1
    
a1015 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_this_classes
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a1021 10

/*****************************************************************************
 **
 ** int xcb_input_get_selected_extension_events_this_classes_length
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1027 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_this_classes_end
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1037 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_all_classes
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a1044 10

/*****************************************************************************
 **
 ** int xcb_input_get_selected_extension_events_all_classes_length
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1050 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_all_classes_end
 ** 
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1061 12

/*****************************************************************************
 **
 ** xcb_input_get_selected_extension_events_reply_t * xcb_input_get_selected_extension_events_reply
 ** 
 ** @@param xcb_connection_t                                  *c
 ** @@param xcb_input_get_selected_extension_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                              **e
 ** @@returns xcb_input_get_selected_extension_events_reply_t *
 **
 *****************************************************************************/
 
a1100 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1114 1
a1114 1
    
d1118 1
a1118 1
    
d1123 1
a1123 1
    
d1133 1
a1133 1
    
a1137 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        mode
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1151 1
a1151 1
    
d1155 1
a1155 1
    
d1160 1
a1160 1
    
d1170 1
a1170 1
    
a1205 11

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
 **
 *****************************************************************************/
 
d1216 1
a1216 1
    
d1220 1
a1220 1
    
d1222 1
a1222 1
    
d1227 1
a1227 1
    
a1231 11

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
 **
 *****************************************************************************/
 
d1242 1
a1242 1
    
d1246 1
a1246 1
    
d1248 1
a1248 1
    
d1253 1
a1253 1
    
a1257 10

/*****************************************************************************
 **
 ** xcb_input_event_class_t * xcb_input_get_device_dont_propagate_list_classes
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns xcb_input_event_class_t *
 **
 *****************************************************************************/
 
a1263 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_dont_propagate_list_classes_length
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1269 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_dont_propagate_list_classes_end
 ** 
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1279 12

/*****************************************************************************
 **
 ** xcb_input_get_device_dont_propagate_list_reply_t * xcb_input_get_device_dont_propagate_list_reply
 ** 
 ** @@param xcb_connection_t                                   *c
 ** @@param xcb_input_get_device_dont_propagate_list_cookie_t   cookie
 ** @@param xcb_generic_error_t                               **e
 ** @@returns xcb_input_get_device_dont_propagate_list_reply_t *
 **
 *****************************************************************************/
 
a1287 10

/*****************************************************************************
 **
 ** void xcb_input_device_time_coord_next
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1295 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_time_coord_end
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1305 13

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
 **
 *****************************************************************************/
 
d1318 1
a1318 1
    
d1322 1
a1322 1
    
d1326 1
a1326 1
    
d1331 1
a1331 1
    
a1335 13

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
 **
 *****************************************************************************/
 
d1348 1
a1348 1
    
d1352 1
a1352 1
    
d1356 1
a1356 1
    
d1361 1
a1361 1
    
a1365 12

/*****************************************************************************
 **
 ** xcb_input_get_device_motion_events_reply_t * xcb_input_get_device_motion_events_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_input_get_device_motion_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_input_get_device_motion_events_reply_t *
 **
 *****************************************************************************/
 
a1373 11

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
 **
 *****************************************************************************/
 
d1384 1
a1384 1
    
d1388 1
a1388 1
    
d1391 1
a1391 1
    
d1396 1
a1396 1
    
a1400 11

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
 **
 *****************************************************************************/
 
d1411 1
a1411 1
    
d1415 1
a1415 1
    
d1418 1
a1418 1
    
d1423 1
a1423 1
    
a1427 12

/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_reply_t * xcb_input_change_keyboard_device_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_change_keyboard_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_change_keyboard_device_reply_t *
 **
 *****************************************************************************/
 
a1435 13

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
 **
 *****************************************************************************/
 
d1448 1
a1448 1
    
d1452 1
a1452 1
    
d1457 1
a1457 1
    
d1462 1
a1462 1
    
a1466 13

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
 **
 *****************************************************************************/
 
d1479 1
a1479 1
    
d1483 1
a1483 1
    
d1488 1
a1488 1
    
d1493 1
a1493 1
    
a1497 12

/*****************************************************************************
 **
 ** xcb_input_change_pointer_device_reply_t * xcb_input_change_pointer_device_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_pointer_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_pointer_device_reply_t *
 **
 *****************************************************************************/
 
a1536 18

/*****************************************************************************
 **
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
 **
 *****************************************************************************/
 
d1554 1
a1554 1
    
d1558 1
a1558 1
    
d1567 1
a1567 1
    
d1577 1
a1577 1
    
a1581 18

/*****************************************************************************
 **
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
 **
 *****************************************************************************/
 
d1599 1
a1599 1
    
d1603 1
a1603 1
    
d1612 1
a1612 1
    
d1622 1
a1622 1
    
a1626 12

/*****************************************************************************
 **
 ** xcb_input_grab_device_reply_t * xcb_input_grab_device_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_grab_device_reply_t *
 **
 *****************************************************************************/
 
a1634 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1646 1
a1646 1
    
d1650 1
a1650 1
    
d1653 1
a1653 1
    
d1658 1
a1658 1
    
a1662 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1674 1
a1674 1
    
d1678 1
a1678 1
    
d1681 1
a1681 1
    
d1686 1
a1686 1
    
a1721 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_key_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1741 1
a1741 1
    
d1745 1
a1745 1
    
d1756 1
a1756 1
    
d1766 1
a1766 1
    
a1770 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_key
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1790 1
a1790 1
    
d1794 1
a1794 1
    
d1805 1
a1805 1
    
d1815 1
a1815 1
    
a1819 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_key_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1834 1
a1834 1
    
d1838 1
a1838 1
    
d1844 1
a1844 1
    
d1849 1
a1849 1
    
a1853 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_key
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1868 1
a1868 1
    
d1872 1
a1872 1
    
d1878 1
a1878 1
    
d1883 1
a1883 1
    
a1918 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_button_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1938 1
a1938 1
    
d1942 1
a1942 1
    
d1953 1
a1953 1
    
d1963 1
a1963 1
    
a1967 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_grab_device_button
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        button
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1987 1
a1987 1
    
d1991 1
a1991 1
    
d2002 1
a2002 1
    
d2012 1
a2012 1
    
a2016 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_button_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2031 1
a2031 1
    
d2035 1
a2035 1
    
d2041 1
a2041 1
    
d2046 1
a2046 1
    
a2050 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_button
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2065 1
a2065 1
    
d2069 1
a2069 1
    
d2075 1
a2075 1
    
d2080 1
a2080 1
    
a2084 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_allow_device_events_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2097 1
a2097 1
    
d2101 1
a2101 1
    
d2105 1
a2105 1
    
d2110 1
a2110 1
    
a2114 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_allow_device_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2127 1
a2127 1
    
d2131 1
a2131 1
    
d2135 1
a2135 1
    
d2140 1
a2140 1
    
a2144 11

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
 **
 *****************************************************************************/
 
d2155 1
a2155 1
    
d2159 1
a2159 1
    
d2162 1
a2162 1
    
d2167 1
a2167 1
    
a2171 11

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
 **
 *****************************************************************************/
 
d2182 1
a2182 1
    
d2186 1
a2186 1
    
d2189 1
a2189 1
    
d2194 1
a2194 1
    
a2198 12

/*****************************************************************************
 **
 ** xcb_input_get_device_focus_reply_t * xcb_input_get_device_focus_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_get_device_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_get_device_focus_reply_t *
 **
 *****************************************************************************/
 
a2206 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_set_device_focus_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2220 1
a2220 1
    
d2224 1
a2224 1
    
d2229 1
a2229 1
    
d2234 1
a2234 1
    
a2238 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_set_device_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2252 1
a2252 1
    
d2256 1
a2256 1
    
d2261 1
a2261 1
    
d2266 1
a2266 1
    
a2270 10

/*****************************************************************************
 **
 ** void xcb_input_kbd_feedback_state_next
 ** 
 ** @@param xcb_input_kbd_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2278 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_state_end
 ** 
 ** @@param xcb_input_kbd_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2288 10

/*****************************************************************************
 **
 ** void xcb_input_ptr_feedback_state_next
 ** 
 ** @@param xcb_input_ptr_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2296 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_state_end
 ** 
 ** @@param xcb_input_ptr_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2306 10

/*****************************************************************************
 **
 ** void xcb_input_integer_feedback_state_next
 ** 
 ** @@param xcb_input_integer_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2314 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_integer_feedback_state_end
 ** 
 ** @@param xcb_input_integer_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2355 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_string_feedback_state_keysyms
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a2361 10

/*****************************************************************************
 **
 ** int xcb_input_string_feedback_state_keysyms_length
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2367 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_keysyms_end
 ** 
 ** @@param const xcb_input_string_feedback_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2377 10

/*****************************************************************************
 **
 ** void xcb_input_string_feedback_state_next
 ** 
 ** @@param xcb_input_string_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2388 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_state_end
 ** 
 ** @@param xcb_input_string_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2400 10

/*****************************************************************************
 **
 ** void xcb_input_bell_feedback_state_next
 ** 
 ** @@param xcb_input_bell_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2408 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_bell_feedback_state_end
 ** 
 ** @@param xcb_input_bell_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2418 10

/*****************************************************************************
 **
 ** void xcb_input_led_feedback_state_next
 ** 
 ** @@param xcb_input_led_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2426 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_led_feedback_state_end
 ** 
 ** @@param xcb_input_led_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2467 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_feedback_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2473 10

/*****************************************************************************
 **
 ** int xcb_input_feedback_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2479 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_feedback_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2489 10

/*****************************************************************************
 **
 ** void xcb_input_feedback_state_next
 ** 
 ** @@param xcb_input_feedback_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2500 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_state_end
 ** 
 ** @@param xcb_input_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2548 11

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
 **
 *****************************************************************************/
 
d2559 1
a2559 1
    
d2563 1
a2563 1
    
d2566 1
a2566 1
    
d2571 1
a2571 1
    
a2575 11

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
 **
 *****************************************************************************/
 
d2586 1
a2586 1
    
d2590 1
a2590 1
    
d2593 1
a2593 1
    
d2598 1
a2598 1
    
a2602 10

/*****************************************************************************
 **
 ** int xcb_input_get_feedback_control_feedbacks_length
 ** 
 ** @@param const xcb_input_get_feedback_control_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2608 10

/*****************************************************************************
 **
 ** xcb_input_feedback_state_iterator_t xcb_input_get_feedback_control_feedbacks_iterator
 ** 
 ** @@param const xcb_input_get_feedback_control_reply_t *R
 ** @@returns xcb_input_feedback_state_iterator_t
 **
 *****************************************************************************/
 
a2618 12

/*****************************************************************************
 **
 ** xcb_input_get_feedback_control_reply_t * xcb_input_get_feedback_control_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_get_feedback_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_get_feedback_control_reply_t *
 **
 *****************************************************************************/
 
a2626 10

/*****************************************************************************
 **
 ** void xcb_input_kbd_feedback_ctl_next
 ** 
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2634 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_ctl_end
 ** 
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2644 10

/*****************************************************************************
 **
 ** void xcb_input_ptr_feedback_ctl_next
 ** 
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2652 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_ctl_end
 ** 
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2662 10

/*****************************************************************************
 **
 ** void xcb_input_integer_feedback_ctl_next
 ** 
 ** @@param xcb_input_integer_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2670 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_integer_feedback_ctl_end
 ** 
 ** @@param xcb_input_integer_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2711 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_string_feedback_ctl_keysyms
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a2717 10

/*****************************************************************************
 **
 ** int xcb_input_string_feedback_ctl_keysyms_length
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2723 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_keysyms_end
 ** 
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2733 10

/*****************************************************************************
 **
 ** void xcb_input_string_feedback_ctl_next
 ** 
 ** @@param xcb_input_string_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2744 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_end
 ** 
 ** @@param xcb_input_string_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2756 10

/*****************************************************************************
 **
 ** void xcb_input_bell_feedback_ctl_next
 ** 
 ** @@param xcb_input_bell_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2764 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_bell_feedback_ctl_end
 ** 
 ** @@param xcb_input_bell_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2774 10

/*****************************************************************************
 **
 ** void xcb_input_led_feedback_ctl_next
 ** 
 ** @@param xcb_input_led_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2782 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_led_feedback_ctl_end
 ** 
 ** @@param xcb_input_led_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2823 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_feedback_ctl_uninterpreted_data
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2829 10

/*****************************************************************************
 **
 ** int xcb_input_feedback_ctl_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2835 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2845 10

/*****************************************************************************
 **
 ** void xcb_input_feedback_ctl_next
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2856 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_end
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2898 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_feedback_control_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param uint32_t                  mask
 ** @@param uint8_t                   device_id
 ** @@param uint8_t                   feedback_id
 ** @@param xcb_input_feedback_ctl_t *feedback
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2912 1
a2912 1
    
d2916 1
a2916 1
    
d2920 1
a2920 1
    
d2927 1
a2927 1
    xcb_parts[4].iov_len = 
d2929 1
a2929 1
    
a2933 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_feedback_control
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param uint32_t                  mask
 ** @@param uint8_t                   device_id
 ** @@param uint8_t                   feedback_id
 ** @@param xcb_input_feedback_ctl_t *feedback
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2947 1
a2947 1
    
d2951 1
a2951 1
    
d2955 1
a2955 1
    
d2962 1
a2962 1
    xcb_parts[4].iov_len = 
d2964 1
a2964 1
    
a2999 13

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
 **
 *****************************************************************************/
 
d3012 1
a3012 1
    
d3016 1
a3016 1
    
d3020 1
a3020 1
    
d3025 1
a3025 1
    
a3029 13

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
 **
 *****************************************************************************/
 
d3042 1
a3042 1
    
d3046 1
a3046 1
    
d3050 1
a3050 1
    
d3055 1
a3055 1
    
a3059 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_input_get_device_key_mapping_keysyms
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a3065 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_key_mapping_keysyms_length
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3071 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_key_mapping_keysyms_end
 ** 
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3081 12

/*****************************************************************************
 **
 ** xcb_input_get_device_key_mapping_reply_t * xcb_input_get_device_key_mapping_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_get_device_key_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_get_device_key_mapping_reply_t *
 **
 *****************************************************************************/
 
a3120 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3135 1
a3135 1
    
d3139 1
a3139 1
    
d3144 1
a3144 1
    
d3154 1
a3154 1
    
a3158 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3173 1
a3173 1
    
d3177 1
a3177 1
    
d3182 1
a3182 1
    
d3192 1
a3192 1
    
a3227 11

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d3238 1
a3238 1
    
d3242 1
a3242 1
    
d3245 1
a3245 1
    
d3250 1
a3250 1
    
a3254 11

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d3265 1
a3265 1
    
d3269 1
a3269 1
    
d3272 1
a3272 1
    
d3277 1
a3277 1
    
a3281 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_modifier_mapping_keymaps
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3287 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_modifier_mapping_keymaps_length
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3293 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_modifier_mapping_keymaps_end
 ** 
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3303 12

/*****************************************************************************
 **
 ** xcb_input_get_device_modifier_mapping_reply_t * xcb_input_get_device_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_get_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_get_device_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
a3342 13

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d3355 1
a3355 1
    
d3359 1
a3359 1
    
d3363 1
a3363 1
    
d3373 1
a3373 1
    
a3377 13

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d3390 1
a3390 1
    
d3394 1
a3394 1
    
d3398 1
a3398 1
    
d3408 1
a3408 1
    
a3412 12

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_reply_t * xcb_input_set_device_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_set_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_set_device_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
a3451 11

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d3462 1
a3462 1
    
d3466 1
a3466 1
    
d3469 1
a3469 1
    
d3474 1
a3474 1
    
a3478 11

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d3489 1
a3489 1
    
d3493 1
a3493 1
    
d3496 1
a3496 1
    
d3501 1
a3501 1
    
a3505 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_button_mapping_map
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3511 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_button_mapping_map_length
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3517 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_button_mapping_map_end
 ** 
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3527 12

/*****************************************************************************
 **
 ** xcb_input_get_device_button_mapping_reply_t * xcb_input_get_device_button_mapping_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_get_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_get_device_button_mapping_reply_t *
 **
 *****************************************************************************/
 
a3566 13

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d3579 1
a3579 1
    
d3583 1
a3583 1
    
d3587 1
a3587 1
    
d3597 1
a3597 1
    
a3601 13

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
 **
 *****************************************************************************/
 
d3614 1
a3614 1
    
d3618 1
a3618 1
    
d3622 1
a3622 1
    
d3632 1
a3632 1
    
a3636 12

/*****************************************************************************
 **
 ** xcb_input_set_device_button_mapping_reply_t * xcb_input_set_device_button_mapping_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_set_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_set_device_button_mapping_reply_t *
 **
 *****************************************************************************/
 
a3644 10

/*****************************************************************************
 **
 ** void xcb_input_key_state_next
 ** 
 ** @@param xcb_input_key_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3652 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_state_end
 ** 
 ** @@param xcb_input_key_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3662 10

/*****************************************************************************
 **
 ** void xcb_input_button_state_next
 ** 
 ** @@param xcb_input_button_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3670 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_state_end
 ** 
 ** @@param xcb_input_button_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3711 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_valuator_state_valuators
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a3717 10

/*****************************************************************************
 **
 ** int xcb_input_valuator_state_valuators_length
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3723 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_state_valuators_end
 ** 
 ** @@param const xcb_input_valuator_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3733 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_state_next
 ** 
 ** @@param xcb_input_valuator_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3744 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_state_end
 ** 
 ** @@param xcb_input_valuator_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3787 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_input_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3793 10

/*****************************************************************************
 **
 ** int xcb_input_input_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3799 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_input_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3809 10

/*****************************************************************************
 **
 ** void xcb_input_input_state_next
 ** 
 ** @@param xcb_input_input_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3820 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_state_end
 ** 
 ** @@param xcb_input_input_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3868 11

/*****************************************************************************
 **
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
 **
 *****************************************************************************/
 
d3879 1
a3879 1
    
d3883 1
a3883 1
    
d3886 1
a3886 1
    
d3891 1
a3891 1
    
a3895 11

/*****************************************************************************
 **
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_query_device_state_cookie_t
 **
 *****************************************************************************/
 
d3906 1
a3906 1
    
d3910 1
a3910 1
    
d3913 1
a3913 1
    
d3918 1
a3918 1
    
a3922 10

/*****************************************************************************
 **
 ** int xcb_input_query_device_state_classes_length
 ** 
 ** @@param const xcb_input_query_device_state_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3928 10

/*****************************************************************************
 **
 ** xcb_input_input_state_iterator_t xcb_input_query_device_state_classes_iterator
 ** 
 ** @@param const xcb_input_query_device_state_reply_t *R
 ** @@returns xcb_input_input_state_iterator_t
 **
 *****************************************************************************/
 
a3938 12

/*****************************************************************************
 **
 ** xcb_input_query_device_state_reply_t * xcb_input_query_device_state_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_query_device_state_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_query_device_state_reply_t *
 **
 *****************************************************************************/
 
a3989 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_send_extension_event_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const uint8_t                 *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4006 1
a4006 1
    
d4010 1
a4010 1
    
d4017 1
a4017 1
    
d4032 1
a4032 1
    
a4036 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_send_extension_event
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const uint8_t                 *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4053 1
a4053 1
    
d4057 1
a4057 1
    
d4064 1
a4064 1
    
d4079 1
a4079 1
    
a4083 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_device_bell_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4097 1
a4097 1
    
d4101 1
a4101 1
    
d4106 1
a4106 1
    
d4111 1
a4111 1
    
a4115 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_device_bell
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4129 1
a4129 1
    
d4133 1
a4133 1
    
d4138 1
a4138 1
    
d4143 1
a4143 1
    
a4178 14

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
 **
 *****************************************************************************/
 
d4192 1
a4192 1
    
d4196 1
a4196 1
    
d4201 1
a4201 1
    
d4211 1
a4211 1
    
a4215 14

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
 **
 *****************************************************************************/
 
d4229 1
a4229 1
    
d4233 1
a4233 1
    
d4238 1
a4238 1
    
d4248 1
a4248 1
    
a4252 12

/*****************************************************************************
 **
 ** xcb_input_set_device_valuators_reply_t * xcb_input_set_device_valuators_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_set_device_valuators_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_set_device_valuators_reply_t *
 **
 *****************************************************************************/
 
a4315 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_values
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4321 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_values_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4327 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_values_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4337 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_min
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4344 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_min_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4350 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_min_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4361 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_state_resolution_max
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4368 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_max_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4374 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_max_end
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4385 10

/*****************************************************************************
 **
 ** void xcb_input_device_resolution_state_next
 ** 
 ** @@param xcb_input_device_resolution_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4396 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_end
 ** 
 ** @@param xcb_input_device_resolution_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4408 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_calib_state_next
 ** 
 ** @@param xcb_input_device_abs_calib_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4416 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_state_end
 ** 
 ** @@param xcb_input_device_abs_calib_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4426 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_area_state_next
 ** 
 ** @@param xcb_input_device_abs_area_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4434 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_area_state_end
 ** 
 ** @@param xcb_input_device_abs_area_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4444 10

/*****************************************************************************
 **
 ** void xcb_input_device_core_state_next
 ** 
 ** @@param xcb_input_device_core_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4452 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_core_state_end
 ** 
 ** @@param xcb_input_device_core_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4462 10

/*****************************************************************************
 **
 ** void xcb_input_device_enable_state_next
 ** 
 ** @@param xcb_input_device_enable_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4470 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_enable_state_end
 ** 
 ** @@param xcb_input_device_enable_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4511 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_state_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a4517 10

/*****************************************************************************
 **
 ** int xcb_input_device_state_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4523 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_state_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_state_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4533 10

/*****************************************************************************
 **
 ** void xcb_input_device_state_next
 ** 
 ** @@param xcb_input_device_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4544 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_state_end
 ** 
 ** @@param xcb_input_device_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4586 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
 **
 *****************************************************************************/
 
d4598 1
a4598 1
    
d4602 1
a4602 1
    
d4606 1
a4606 1
    
d4611 1
a4611 1
    
a4615 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
 **
 *****************************************************************************/
 
d4627 1
a4627 1
    
d4631 1
a4631 1
    
d4635 1
a4635 1
    
d4640 1
a4640 1
    
a4644 10

/*****************************************************************************
 **
 ** xcb_input_device_state_t * xcb_input_get_device_control_control
 ** 
 ** @@param const xcb_input_get_device_control_reply_t *R
 ** @@returns xcb_input_device_state_t *
 **
 *****************************************************************************/
 
a4650 12

/*****************************************************************************
 **
 ** xcb_input_get_device_control_reply_t * xcb_input_get_device_control_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_get_device_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_get_device_control_reply_t *
 **
 *****************************************************************************/
 
a4689 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_device_resolution_ctl_resolution_values
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4695 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_ctl_resolution_values_length
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4701 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_resolution_values_end
 ** 
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4711 10

/*****************************************************************************
 **
 ** void xcb_input_device_resolution_ctl_next
 ** 
 ** @@param xcb_input_device_resolution_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4722 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_end
 ** 
 ** @@param xcb_input_device_resolution_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4734 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_calib_ctl_next
 ** 
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4742 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_ctl_end
 ** 
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4752 10

/*****************************************************************************
 **
 ** void xcb_input_device_abs_area_ctrl_next
 ** 
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4760 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_abs_area_ctrl_end
 ** 
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4770 10

/*****************************************************************************
 **
 ** void xcb_input_device_core_ctrl_next
 ** 
 ** @@param xcb_input_device_core_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4778 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_core_ctrl_end
 ** 
 ** @@param xcb_input_device_core_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4788 10

/*****************************************************************************
 **
 ** void xcb_input_device_enable_ctrl_next
 ** 
 ** @@param xcb_input_device_enable_ctrl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4796 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_enable_ctrl_end
 ** 
 ** @@param xcb_input_device_enable_ctrl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4837 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_ctl_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a4843 10

/*****************************************************************************
 **
 ** int xcb_input_device_ctl_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4849 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_ctl_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_ctl_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4859 10

/*****************************************************************************
 **
 ** void xcb_input_device_ctl_next
 ** 
 ** @@param xcb_input_device_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4870 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_ctl_end
 ** 
 ** @@param xcb_input_device_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4912 13

/*****************************************************************************
 **
 ** xcb_input_change_device_control_cookie_t xcb_input_change_device_control
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint16_t                control_id
 ** @@param uint8_t                 device_id
 ** @@param xcb_input_device_ctl_t *control
 ** @@returns xcb_input_change_device_control_cookie_t
 **
 *****************************************************************************/
 
d4925 1
a4925 1
    
d4929 1
a4929 1
    
d4933 1
a4933 1
    
d4940 1
a4940 1
    xcb_parts[4].iov_len = 
d4942 1
a4942 1
    
a4946 13

/*****************************************************************************
 **
 ** xcb_input_change_device_control_cookie_t xcb_input_change_device_control_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint16_t                control_id
 ** @@param uint8_t                 device_id
 ** @@param xcb_input_device_ctl_t *control
 ** @@returns xcb_input_change_device_control_cookie_t
 **
 *****************************************************************************/
 
d4959 1
a4959 1
    
d4963 1
a4963 1
    
d4967 1
a4967 1
    
d4974 1
a4974 1
    xcb_parts[4].iov_len = 
d4976 1
a4976 1
    
a4980 12

/*****************************************************************************
 **
 ** xcb_input_change_device_control_reply_t * xcb_input_change_device_control_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_device_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_device_control_reply_t *
 **
 *****************************************************************************/
 
a5019 11

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_cookie_t xcb_input_list_device_properties
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_list_device_properties_cookie_t
 **
 *****************************************************************************/
 
d5030 1
a5030 1
    
d5034 1
a5034 1
    
d5037 1
a5037 1
    
d5042 1
a5042 1
    
a5046 11

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_cookie_t xcb_input_list_device_properties_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_list_device_properties_cookie_t
 **
 *****************************************************************************/
 
d5057 1
a5057 1
    
d5061 1
a5061 1
    
d5064 1
a5064 1
    
d5069 1
a5069 1
    
a5073 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_list_device_properties_atoms
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5079 10

/*****************************************************************************
 **
 ** int xcb_input_list_device_properties_atoms_length
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5085 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_list_device_properties_atoms_end
 ** 
 ** @@param const xcb_input_list_device_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5095 12

/*****************************************************************************
 **
 ** xcb_input_list_device_properties_reply_t * xcb_input_list_device_properties_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_list_device_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_list_device_properties_reply_t *
 **
 *****************************************************************************/
 
a5103 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_change_device_property_items_data_8
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5109 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_8_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5116 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_8_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5127 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_change_device_property_items_data_16
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a5133 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_16_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5140 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_16_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5151 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_change_device_property_items_data_32
 ** 
 ** @@param const xcb_input_change_device_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a5157 10

/*****************************************************************************
 **
 ** int xcb_input_change_device_property_items_data_32_length
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5164 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_change_device_property_items_data_32_end
 ** 
 ** @@param const xcb_input_change_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5354 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           device_id
 ** @@param uint8_t           format
 ** @@param uint8_t           mode
 ** @@param uint32_t          num_items
 ** @@param const void       *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5371 1
a5371 1
    
d5375 1
a5375 1
    
d5383 1
a5383 1
    
d5390 1
a5390 1
    xcb_parts[4].iov_len = 
d5392 1
a5392 1
    
a5396 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           device_id
 ** @@param uint8_t           format
 ** @@param uint8_t           mode
 ** @@param uint32_t          num_items
 ** @@param const void       *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5413 1
a5413 1
    
d5417 1
a5417 1
    
d5425 1
a5425 1
    
d5432 1
a5432 1
    xcb_parts[4].iov_len = 
d5434 1
a5434 1
    
a5438 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_aux_checked
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_atom_t                                      property
 ** @@param xcb_atom_t                                      type
 ** @@param uint8_t                                         device_id
 ** @@param uint8_t                                         format
 ** @@param uint8_t                                         mode
 ** @@param uint32_t                                        num_items
 ** @@param const xcb_input_change_device_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5455 1
a5455 1
    
d5460 1
a5460 1
    
d5468 1
a5468 1
    
d5474 1
a5474 1
    xcb_parts[4].iov_len = 
d5477 1
a5477 1
    
a5482 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_change_device_property_aux
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_atom_t                                      property
 ** @@param xcb_atom_t                                      type
 ** @@param uint8_t                                         device_id
 ** @@param uint8_t                                         format
 ** @@param uint8_t                                         mode
 ** @@param uint32_t                                        num_items
 ** @@param const xcb_input_change_device_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5499 1
a5499 1
    
d5504 1
a5504 1
    
d5512 1
a5512 1
    
d5518 1
a5518 1
    xcb_parts[4].iov_len = 
d5521 1
a5521 1
    
a5526 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_delete_device_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5538 1
a5538 1
    
d5542 1
a5542 1
    
d5546 1
a5546 1
    
d5551 1
a5551 1
    
a5555 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_delete_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5567 1
a5567 1
    
d5571 1
a5571 1
    
d5575 1
a5575 1
    
d5580 1
a5580 1
    
a5584 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_get_device_property_items_data_8
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5590 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_8_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5597 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_8_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5608 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_get_device_property_items_data_16
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a5614 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_16_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5621 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_16_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5632 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_get_device_property_items_data_32
 ** 
 ** @@param const xcb_input_get_device_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a5638 10

/*****************************************************************************
 **
 ** int xcb_input_get_device_property_items_data_32_length
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5645 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_get_device_property_items_data_32_end
 ** 
 ** @@param const xcb_input_get_device_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5835 16

/*****************************************************************************
 **
 ** xcb_input_get_device_property_cookie_t xcb_input_get_device_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          offset
 ** @@param uint32_t          len
 ** @@param uint8_t           device_id
 ** @@param uint8_t           _delete
 ** @@returns xcb_input_get_device_property_cookie_t
 **
 *****************************************************************************/
 
d5851 1
a5851 1
    
d5855 1
a5855 1
    
d5863 1
a5863 1
    
d5868 1
a5868 1
    
a5872 16

/*****************************************************************************
 **
 ** xcb_input_get_device_property_cookie_t xcb_input_get_device_property_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          offset
 ** @@param uint32_t          len
 ** @@param uint8_t           device_id
 ** @@param uint8_t           _delete
 ** @@returns xcb_input_get_device_property_cookie_t
 **
 *****************************************************************************/
 
d5888 1
a5888 1
    
d5892 1
a5892 1
    
d5900 1
a5900 1
    
d5905 1
a5905 1
    
a5909 10

/*****************************************************************************
 **
 ** xcb_input_get_device_property_items_t * xcb_input_get_device_property_items
 ** 
 ** @@param const xcb_input_get_device_property_reply_t *R
 ** @@returns xcb_input_get_device_property_items_t *
 **
 *****************************************************************************/
 
a5915 12

/*****************************************************************************
 **
 ** xcb_input_get_device_property_reply_t * xcb_input_get_device_property_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_input_get_device_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_input_get_device_property_reply_t *
 **
 *****************************************************************************/
 
a5923 10

/*****************************************************************************
 **
 ** void xcb_input_group_info_next
 ** 
 ** @@param xcb_input_group_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5931 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_group_info_end
 ** 
 ** @@param xcb_input_group_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5941 10

/*****************************************************************************
 **
 ** void xcb_input_modifier_info_next
 ** 
 ** @@param xcb_input_modifier_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a5949 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_modifier_info_end
 ** 
 ** @@param xcb_input_modifier_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5990 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_cookie_t xcb_input_xi_query_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_pointer_cookie_t
 **
 *****************************************************************************/
 
d6002 1
a6002 1
    
d6006 1
a6006 1
    
d6010 1
a6010 1
    
d6015 1
a6015 1
    
a6019 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_cookie_t xcb_input_xi_query_pointer_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_pointer_cookie_t
 **
 *****************************************************************************/
 
d6031 1
a6031 1
    
d6035 1
a6035 1
    
d6039 1
a6039 1
    
d6044 1
a6044 1
    
a6048 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_query_pointer_buttons
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6054 10

/*****************************************************************************
 **
 ** int xcb_input_xi_query_pointer_buttons_length
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6060 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_query_pointer_buttons_end
 ** 
 ** @@param const xcb_input_xi_query_pointer_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6070 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_pointer_reply_t * xcb_input_xi_query_pointer_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_xi_query_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_xi_query_pointer_reply_t *
 **
 *****************************************************************************/
 
a6078 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_warp_pointer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           src_win
 ** @@param xcb_window_t           dst_win
 ** @@param xcb_input_fp1616_t     src_x
 ** @@param xcb_input_fp1616_t     src_y
 ** @@param uint16_t               src_width
 ** @@param uint16_t               src_height
 ** @@param xcb_input_fp1616_t     dst_x
 ** @@param xcb_input_fp1616_t     dst_y
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6097 1
a6097 1
    
d6101 1
a6101 1
    
d6112 1
a6112 1
    
d6117 1
a6117 1
    
a6121 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_warp_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           src_win
 ** @@param xcb_window_t           dst_win
 ** @@param xcb_input_fp1616_t     src_x
 ** @@param xcb_input_fp1616_t     src_y
 ** @@param uint16_t               src_width
 ** @@param uint16_t               src_height
 ** @@param xcb_input_fp1616_t     dst_x
 ** @@param xcb_input_fp1616_t     dst_y
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6140 1
a6140 1
    
d6144 1
a6144 1
    
d6155 1
a6155 1
    
d6160 1
a6160 1
    
a6164 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_cursor_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6177 1
a6177 1
    
d6181 1
a6181 1
    
d6186 1
a6186 1
    
d6191 1
a6191 1
    
a6195 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_cursor
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6208 1
a6208 1
    
d6212 1
a6212 1
    
d6217 1
a6217 1
    
d6222 1
a6222 1
    
a6257 10

/*****************************************************************************
 **
 ** char * xcb_input_add_master_name
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a6263 10

/*****************************************************************************
 **
 ** int xcb_input_add_master_name_length
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6269 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_add_master_name_end
 ** 
 ** @@param const xcb_input_add_master_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6279 10

/*****************************************************************************
 **
 ** void xcb_input_add_master_next
 ** 
 ** @@param xcb_input_add_master_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6290 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_add_master_end
 ** 
 ** @@param xcb_input_add_master_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6302 10

/*****************************************************************************
 **
 ** void xcb_input_remove_master_next
 ** 
 ** @@param xcb_input_remove_master_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6310 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_remove_master_end
 ** 
 ** @@param xcb_input_remove_master_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6320 10

/*****************************************************************************
 **
 ** void xcb_input_attach_slave_next
 ** 
 ** @@param xcb_input_attach_slave_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6328 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_attach_slave_end
 ** 
 ** @@param xcb_input_attach_slave_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6338 10

/*****************************************************************************
 **
 ** void xcb_input_detach_slave_next
 ** 
 ** @@param xcb_input_detach_slave_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6346 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_detach_slave_end
 ** 
 ** @@param xcb_input_detach_slave_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6387 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_hierarchy_change_uninterpreted_data
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6393 10

/*****************************************************************************
 **
 ** int xcb_input_hierarchy_change_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6399 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_change_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_hierarchy_change_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6409 10

/*****************************************************************************
 **
 ** void xcb_input_hierarchy_change_next
 ** 
 ** @@param xcb_input_hierarchy_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6420 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_change_end
 ** 
 ** @@param xcb_input_hierarchy_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6468 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_hierarchy_checked
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param uint8_t                             num_changes
 ** @@param const xcb_input_hierarchy_change_t *changes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6480 1
a6480 1
    
d6487 1
a6487 1
    
d6489 2
a6490 1
    
d6506 1
a6506 1
    
a6510 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_hierarchy
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param uint8_t                             num_changes
 ** @@param const xcb_input_hierarchy_change_t *changes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6522 1
a6522 1
    
d6529 1
a6529 1
    
d6531 2
a6532 1
    
d6548 1
a6548 1
    
a6552 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_client_pointer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6564 1
a6564 1
    
d6568 1
a6568 1
    
d6572 1
a6572 1
    
d6577 1
a6577 1
    
a6581 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_client_pointer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6593 1
a6593 1
    
d6597 1
a6597 1
    
d6601 1
a6601 1
    
d6606 1
a6606 1
    
a6610 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_cookie_t xcb_input_xi_get_client_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_client_pointer_cookie_t
 **
 *****************************************************************************/
 
d6621 1
a6621 1
    
d6625 1
a6625 1
    
d6627 1
a6627 1
    
d6632 1
a6632 1
    
a6636 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_cookie_t xcb_input_xi_get_client_pointer_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_client_pointer_cookie_t
 **
 *****************************************************************************/
 
d6647 1
a6647 1
    
d6651 1
a6651 1
    
d6653 1
a6653 1
    
d6658 1
a6658 1
    
a6662 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_client_pointer_reply_t * xcb_input_xi_get_client_pointer_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_xi_get_client_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_xi_get_client_pointer_reply_t *
 **
 *****************************************************************************/
 
a6701 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_event_mask_mask
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6707 10

/*****************************************************************************
 **
 ** int xcb_input_event_mask_mask_length
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6713 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_mask_mask_end
 ** 
 ** @@param const xcb_input_event_mask_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6723 10

/*****************************************************************************
 **
 ** void xcb_input_event_mask_next
 ** 
 ** @@param xcb_input_event_mask_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6734 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_event_mask_end
 ** 
 ** @@param xcb_input_event_mask_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6782 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_select_events_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_window_t                  window
 ** @@param uint16_t                      num_mask
 ** @@param const xcb_input_event_mask_t *masks
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6795 1
a6795 1
    
d6802 1
a6802 1
    
d6806 1
a6806 1
    
d6822 1
a6822 1
    
a6826 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_select_events
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_window_t                  window
 ** @@param uint16_t                      num_mask
 ** @@param const xcb_input_event_mask_t *masks
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6839 1
a6839 1
    
d6846 1
a6846 1
    
d6850 1
a6850 1
    
d6866 1
a6866 1
    
a6870 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_cookie_t xcb_input_xi_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_input_xi_query_version_cookie_t
 **
 *****************************************************************************/
 
d6882 1
a6882 1
    
d6886 1
a6886 1
    
d6889 1
a6889 1
    
d6894 1
a6894 1
    
a6898 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_cookie_t xcb_input_xi_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_input_xi_query_version_cookie_t
 **
 *****************************************************************************/
 
d6910 1
a6910 1
    
d6914 1
a6914 1
    
d6917 1
a6917 1
    
d6922 1
a6922 1
    
a6926 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_version_reply_t * xcb_input_xi_query_version_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_xi_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_xi_query_version_reply_t *
 **
 *****************************************************************************/
 
a6977 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_button_class_state
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6983 10

/*****************************************************************************
 **
 ** int xcb_input_button_class_state_length
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6989 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_state_end
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6999 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_button_class_labels
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a7006 10

/*****************************************************************************
 **
 ** int xcb_input_button_class_labels_length
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7012 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_labels_end
 ** 
 ** @@param const xcb_input_button_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7023 10

/*****************************************************************************
 **
 ** void xcb_input_button_class_next
 ** 
 ** @@param xcb_input_button_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7034 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_class_end
 ** 
 ** @@param xcb_input_button_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7077 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_key_class_keys
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7083 10

/*****************************************************************************
 **
 ** int xcb_input_key_class_keys_length
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7089 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_class_keys_end
 ** 
 ** @@param const xcb_input_key_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7099 10

/*****************************************************************************
 **
 ** void xcb_input_key_class_next
 ** 
 ** @@param xcb_input_key_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7110 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_class_end
 ** 
 ** @@param xcb_input_key_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7122 10

/*****************************************************************************
 **
 ** void xcb_input_scroll_class_next
 ** 
 ** @@param xcb_input_scroll_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7130 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_scroll_class_end
 ** 
 ** @@param xcb_input_scroll_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7140 10

/*****************************************************************************
 **
 ** void xcb_input_touch_class_next
 ** 
 ** @@param xcb_input_touch_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7148 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_touch_class_end
 ** 
 ** @@param xcb_input_touch_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7158 10

/*****************************************************************************
 **
 ** void xcb_input_valuator_class_next
 ** 
 ** @@param xcb_input_valuator_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7166 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_valuator_class_end
 ** 
 ** @@param xcb_input_valuator_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7207 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_device_class_uninterpreted_data
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7213 10

/*****************************************************************************
 **
 ** int xcb_input_device_class_uninterpreted_data_length
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7219 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_class_uninterpreted_data_end
 ** 
 ** @@param const xcb_input_device_class_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7229 10

/*****************************************************************************
 **
 ** void xcb_input_device_class_next
 ** 
 ** @@param xcb_input_device_class_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7240 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_class_end
 ** 
 ** @@param xcb_input_device_class_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7300 10

/*****************************************************************************
 **
 ** char * xcb_input_xi_device_info_name
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a7306 10

/*****************************************************************************
 **
 ** int xcb_input_xi_device_info_name_length
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7312 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_device_info_name_end
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7322 10

/*****************************************************************************
 **
 ** int xcb_input_xi_device_info_classes_length
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7328 10

/*****************************************************************************
 **
 ** xcb_input_device_class_iterator_t xcb_input_xi_device_info_classes_iterator
 ** 
 ** @@param const xcb_input_xi_device_info_t *R
 ** @@returns xcb_input_device_class_iterator_t
 **
 *****************************************************************************/
 
a7339 10

/*****************************************************************************
 **
 ** void xcb_input_xi_device_info_next
 ** 
 ** @@param xcb_input_xi_device_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7350 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_device_info_end
 ** 
 ** @@param xcb_input_xi_device_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7398 11

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_cookie_t xcb_input_xi_query_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_device_cookie_t
 **
 *****************************************************************************/
 
d7409 1
a7409 1
    
d7413 1
a7413 1
    
d7416 1
a7416 1
    
d7421 1
a7421 1
    
a7425 11

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_cookie_t xcb_input_xi_query_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_query_device_cookie_t
 **
 *****************************************************************************/
 
d7436 1
a7436 1
    
d7440 1
a7440 1
    
d7443 1
a7443 1
    
d7448 1
a7448 1
    
a7452 10

/*****************************************************************************
 **
 ** int xcb_input_xi_query_device_infos_length
 ** 
 ** @@param const xcb_input_xi_query_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7458 10

/*****************************************************************************
 **
 ** xcb_input_xi_device_info_iterator_t xcb_input_xi_query_device_infos_iterator
 ** 
 ** @@param const xcb_input_xi_query_device_reply_t *R
 ** @@returns xcb_input_xi_device_info_iterator_t
 **
 *****************************************************************************/
 
a7468 12

/*****************************************************************************
 **
 ** xcb_input_xi_query_device_reply_t * xcb_input_xi_query_device_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_xi_query_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_xi_query_device_reply_t *
 **
 *****************************************************************************/
 
a7476 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_focus_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7489 1
a7489 1
    
d7493 1
a7493 1
    
d7498 1
a7498 1
    
d7503 1
a7503 1
    
a7507 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_set_focus
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7520 1
a7520 1
    
d7524 1
a7524 1
    
d7529 1
a7529 1
    
d7534 1
a7534 1
    
a7538 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_cookie_t xcb_input_xi_get_focus
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_get_focus_cookie_t
 **
 *****************************************************************************/
 
d7549 1
a7549 1
    
d7553 1
a7553 1
    
d7556 1
a7556 1
    
d7561 1
a7561 1
    
a7565 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_cookie_t xcb_input_xi_get_focus_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_get_focus_cookie_t
 **
 *****************************************************************************/
 
d7576 1
a7576 1
    
d7580 1
a7580 1
    
d7583 1
a7583 1
    
d7588 1
a7588 1
    
a7592 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_focus_reply_t * xcb_input_xi_get_focus_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_input_xi_get_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_input_xi_get_focus_reply_t *
 **
 *****************************************************************************/
 
a7631 19

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_cookie_t xcb_input_xi_grab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param uint16_t               mask_len
 ** @@param const uint32_t        *mask
 ** @@returns xcb_input_xi_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7650 1
a7650 1
    
d7654 1
a7654 1
    
d7664 1
a7664 1
    
d7674 1
a7674 1
    
a7678 19

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_cookie_t xcb_input_xi_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_cursor_t           cursor
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param uint16_t               mask_len
 ** @@param const uint32_t        *mask
 ** @@returns xcb_input_xi_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7697 1
a7697 1
    
d7701 1
a7701 1
    
d7711 1
a7711 1
    
d7721 1
a7721 1
    
a7725 12

/*****************************************************************************
 **
 ** xcb_input_xi_grab_device_reply_t * xcb_input_xi_grab_device_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_input_xi_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_input_xi_grab_device_reply_t *
 **
 *****************************************************************************/
 
a7733 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7745 1
a7745 1
    
d7749 1
a7749 1
    
d7753 1
a7753 1
    
d7758 1
a7758 1
    
a7762 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_ungrab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7774 1
a7774 1
    
d7778 1
a7778 1
    
d7782 1
a7782 1
    
d7787 1
a7787 1
    
a7791 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_allow_events_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                event_mode
 ** @@param uint32_t               touchid
 ** @@param xcb_window_t           grab_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7806 1
a7806 1
    
d7810 1
a7810 1
    
d7817 1
a7817 1
    
d7822 1
a7822 1
    
a7826 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_allow_events
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                event_mode
 ** @@param uint32_t               touchid
 ** @@param xcb_window_t           grab_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7841 1
a7841 1
    
d7845 1
a7845 1
    
d7852 1
a7852 1
    
d7857 1
a7857 1
    
a7861 10

/*****************************************************************************
 **
 ** void xcb_input_grab_modifier_info_next
 ** 
 ** @@param xcb_input_grab_modifier_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a7869 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_grab_modifier_info_end
 ** 
 ** @@param xcb_input_grab_modifier_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7922 23

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_cookie_t xcb_input_xi_passive_grab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_window_t           grab_window
 ** @@param xcb_cursor_t           cursor
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint16_t               mask_len
 ** @@param uint8_t                grab_type
 ** @@param uint8_t                grab_mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param const uint32_t        *mask
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_input_xi_passive_grab_device_cookie_t
 **
 *****************************************************************************/
 
d7945 1
a7945 1
    
d7949 1
a7949 1
    
d7962 1
a7962 1
    
d7977 1
a7977 1
    
a7981 23

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_cookie_t xcb_input_xi_passive_grab_device_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_timestamp_t        time
 ** @@param xcb_window_t           grab_window
 ** @@param xcb_cursor_t           cursor
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint16_t               mask_len
 ** @@param uint8_t                grab_type
 ** @@param uint8_t                grab_mode
 ** @@param uint8_t                paired_device_mode
 ** @@param uint8_t                owner_events
 ** @@param const uint32_t        *mask
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_input_xi_passive_grab_device_cookie_t
 **
 *****************************************************************************/
 
d8004 1
a8004 1
    
d8008 1
a8008 1
    
d8021 1
a8021 1
    
d8036 1
a8036 1
    
a8040 10

/*****************************************************************************
 **
 ** xcb_input_grab_modifier_info_t * xcb_input_xi_passive_grab_device_modifiers
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns xcb_input_grab_modifier_info_t *
 **
 *****************************************************************************/
 
a8046 10

/*****************************************************************************
 **
 ** int xcb_input_xi_passive_grab_device_modifiers_length
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8052 10

/*****************************************************************************
 **
 ** xcb_input_grab_modifier_info_iterator_t xcb_input_xi_passive_grab_device_modifiers_iterator
 ** 
 ** @@param const xcb_input_xi_passive_grab_device_reply_t *R
 ** @@returns xcb_input_grab_modifier_info_iterator_t
 **
 *****************************************************************************/
 
a8062 12

/*****************************************************************************
 **
 ** xcb_input_xi_passive_grab_device_reply_t * xcb_input_xi_passive_grab_device_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_xi_passive_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_xi_passive_grab_device_reply_t *
 **
 *****************************************************************************/
 
a8101 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_passive_ungrab_device_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           grab_window
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint8_t                grab_type
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8117 1
a8117 1
    
d8121 1
a8121 1
    
d8128 1
a8128 1
    
d8138 1
a8138 1
    
a8142 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_passive_ungrab_device
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           grab_window
 ** @@param uint32_t               detail
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint16_t               num_modifiers
 ** @@param uint8_t                grab_type
 ** @@param const uint32_t        *modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8158 1
a8158 1
    
d8162 1
a8162 1
    
d8169 1
a8169 1
    
d8179 1
a8179 1
    
a8214 11

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_cookie_t xcb_input_xi_list_properties
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_list_properties_cookie_t
 **
 *****************************************************************************/
 
d8225 1
a8225 1
    
d8229 1
a8229 1
    
d8232 1
a8232 1
    
d8237 1
a8237 1
    
a8241 11

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_cookie_t xcb_input_xi_list_properties_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@returns xcb_input_xi_list_properties_cookie_t
 **
 *****************************************************************************/
 
d8252 1
a8252 1
    
d8256 1
a8256 1
    
d8259 1
a8259 1
    
d8264 1
a8264 1
    
a8268 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_input_xi_list_properties_properties
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8274 10

/*****************************************************************************
 **
 ** int xcb_input_xi_list_properties_properties_length
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8280 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_list_properties_properties_end
 ** 
 ** @@param const xcb_input_xi_list_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8290 12

/*****************************************************************************
 **
 ** xcb_input_xi_list_properties_reply_t * xcb_input_xi_list_properties_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_xi_list_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_xi_list_properties_reply_t *
 **
 *****************************************************************************/
 
a8298 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_xi_change_property_items_data_8
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8304 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_8_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8311 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_8_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8322 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_xi_change_property_items_data_16
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a8328 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_16_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8335 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_16_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8346 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_change_property_items_data_32
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8352 10

/*****************************************************************************
 **
 ** int xcb_input_xi_change_property_items_data_32_length
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8359 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_change_property_items_data_32_end
 ** 
 ** @@param const xcb_input_xi_change_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8549 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                format
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               num_items
 ** @@param const void            *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8566 1
a8566 1
    
d8570 1
a8570 1
    
d8577 1
a8577 1
    
d8584 1
a8584 1
    xcb_parts[4].iov_len = 
d8586 1
a8586 1
    
a8590 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                mode
 ** @@param uint8_t                format
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               num_items
 ** @@param const void            *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8607 1
a8607 1
    
d8611 1
a8611 1
    
d8618 1
a8618 1
    
d8625 1
a8625 1
    xcb_parts[4].iov_len = 
d8627 1
a8627 1
    
a8631 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_aux_checked
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_device_id_t                       deviceid
 ** @@param uint8_t                                     mode
 ** @@param uint8_t                                     format
 ** @@param xcb_atom_t                                  property
 ** @@param xcb_atom_t                                  type
 ** @@param uint32_t                                    num_items
 ** @@param const xcb_input_xi_change_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8648 1
a8648 1
    
d8653 1
a8653 1
    
d8660 1
a8660 1
    
d8666 1
a8666 1
    xcb_parts[4].iov_len = 
d8669 1
a8669 1
    
a8674 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_change_property_aux
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_device_id_t                       deviceid
 ** @@param uint8_t                                     mode
 ** @@param uint8_t                                     format
 ** @@param xcb_atom_t                                  property
 ** @@param xcb_atom_t                                  type
 ** @@param uint32_t                                    num_items
 ** @@param const xcb_input_xi_change_property_items_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8691 1
a8691 1
    
d8696 1
a8696 1
    
d8703 1
a8703 1
    
d8709 1
a8709 1
    xcb_parts[4].iov_len = 
d8712 1
a8712 1
    
a8717 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_delete_property_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param xcb_atom_t             property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8729 1
a8729 1
    
d8733 1
a8733 1
    
d8737 1
a8737 1
    
d8742 1
a8742 1
    
a8746 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_delete_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param xcb_atom_t             property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8758 1
a8758 1
    
d8762 1
a8762 1
    
d8766 1
a8766 1
    
d8771 1
a8771 1
    
a8775 10

/*****************************************************************************
 **
 ** uint8_t * xcb_input_xi_get_property_items_data_8
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8781 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_8_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8788 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_8_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8799 10

/*****************************************************************************
 **
 ** uint16_t * xcb_input_xi_get_property_items_data_16
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a8805 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_16_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8812 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_16_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8823 10

/*****************************************************************************
 **
 ** uint32_t * xcb_input_xi_get_property_items_data_32
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *S
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8829 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_property_items_data_32_length
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8836 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_xi_get_property_items_data_32_end
 ** 
 ** @@param const xcb_input_xi_get_property_items_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9026 16

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_cookie_t xcb_input_xi_get_property
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                _delete
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               offset
 ** @@param uint32_t               len
 ** @@returns xcb_input_xi_get_property_cookie_t
 **
 *****************************************************************************/
 
d9042 1
a9042 1
    
d9046 1
a9046 1
    
d9054 1
a9054 1
    
d9059 1
a9059 1
    
a9063 16

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_cookie_t xcb_input_xi_get_property_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_input_device_id_t  deviceid
 ** @@param uint8_t                _delete
 ** @@param xcb_atom_t             property
 ** @@param xcb_atom_t             type
 ** @@param uint32_t               offset
 ** @@param uint32_t               len
 ** @@returns xcb_input_xi_get_property_cookie_t
 **
 *****************************************************************************/
 
d9079 1
a9079 1
    
d9083 1
a9083 1
    
d9091 1
a9091 1
    
d9096 1
a9096 1
    
a9100 10

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_items_t * xcb_input_xi_get_property_items
 ** 
 ** @@param const xcb_input_xi_get_property_reply_t *R
 ** @@returns xcb_input_xi_get_property_items_t *
 **
 *****************************************************************************/
 
a9106 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_property_reply_t * xcb_input_xi_get_property_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_xi_get_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_xi_get_property_reply_t *
 **
 *****************************************************************************/
 
a9150 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_cookie_t xcb_input_xi_get_selected_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_selected_events_cookie_t
 **
 *****************************************************************************/
 
d9161 1
a9161 1
    
d9165 1
a9165 1
    
d9167 1
a9167 1
    
d9172 1
a9172 1
    
a9176 11

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_cookie_t xcb_input_xi_get_selected_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_xi_get_selected_events_cookie_t
 **
 *****************************************************************************/
 
d9187 1
a9187 1
    
d9191 1
a9191 1
    
d9193 1
a9193 1
    
d9198 1
a9198 1
    
a9202 10

/*****************************************************************************
 **
 ** int xcb_input_xi_get_selected_events_masks_length
 ** 
 ** @@param const xcb_input_xi_get_selected_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9208 10

/*****************************************************************************
 **
 ** xcb_input_event_mask_iterator_t xcb_input_xi_get_selected_events_masks_iterator
 ** 
 ** @@param const xcb_input_xi_get_selected_events_reply_t *R
 ** @@returns xcb_input_event_mask_iterator_t
 **
 *****************************************************************************/
 
a9218 12

/*****************************************************************************
 **
 ** xcb_input_xi_get_selected_events_reply_t * xcb_input_xi_get_selected_events_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_xi_get_selected_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_xi_get_selected_events_reply_t *
 **
 *****************************************************************************/
 
a9226 10

/*****************************************************************************
 **
 ** void xcb_input_barrier_release_pointer_info_next
 ** 
 ** @@param xcb_input_barrier_release_pointer_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a9234 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_barrier_release_pointer_info_end
 ** 
 ** @@param xcb_input_barrier_release_pointer_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9275 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_barrier_release_pointer_checked
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param uint32_t                                        num_barriers
 ** @@param const xcb_input_barrier_release_pointer_info_t *barriers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9287 1
a9287 1
    
d9291 1
a9291 1
    
d9293 1
a9293 1
    
d9303 1
a9303 1
    
a9307 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_xi_barrier_release_pointer
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param uint32_t                                        num_barriers
 ** @@param const xcb_input_barrier_release_pointer_info_t *barriers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9319 1
a9319 1
    
d9323 1
a9323 1
    
d9325 1
a9325 1
    
d9335 1
a9335 1
    
a9714 10

/*****************************************************************************
 **
 ** void xcb_input_hierarchy_info_next
 ** 
 ** @@param xcb_input_hierarchy_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a9722 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_hierarchy_info_end
 ** 
 ** @@param xcb_input_hierarchy_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d18 3
d27 38
d103 77
a179 1
 ** void xcb_input_event_class_next
d181 1
a181 1
 ** @@param xcb_input_event_class_iterator_t *i
d187 1
a187 1
xcb_input_event_class_next (xcb_input_event_class_iterator_t *i  /**< */)
d191 1
a191 1
    i->index += sizeof(xcb_input_event_class_t);
d197 1
a197 1
 ** xcb_generic_iterator_t xcb_input_event_class_end
d199 1
a199 1
 ** @@param xcb_input_event_class_iterator_t i
d205 1
a205 1
xcb_input_event_class_end (xcb_input_event_class_iterator_t i  /**< */)
d222 1
a222 1
    unsigned int xcb_align_to;
d227 2
a392 29
int
xcb_input_list_input_devices_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_list_input_devices_reply_t *_aux = (xcb_input_list_input_devices_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to;


    xcb_block_len += sizeof(xcb_input_list_input_devices_reply_t);
    xcb_tmp += xcb_block_len;
    /* devices */
    xcb_block_len += _aux->devices_len * sizeof(xcb_input_device_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_device_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

d396 1
a396 1
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices
d398 2
a399 2
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
d403 2
a404 2
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices (xcb_connection_t *c  /**< */)
d406 3
a408 19
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_INPUT_DEVICES,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_list_input_devices_cookie_t xcb_ret;
    xcb_input_list_input_devices_request_t xcb_out;
    
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d414 1
a414 1
 ** xcb_input_list_input_devices_cookie_t xcb_input_list_input_devices_unchecked
d416 2
a417 2
 ** @@param xcb_connection_t *c
 ** @@returns xcb_input_list_input_devices_cookie_t
d421 2
a422 2
xcb_input_list_input_devices_cookie_t
xcb_input_list_input_devices_unchecked (xcb_connection_t *c  /**< */)
d424 5
a428 19
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_LIST_INPUT_DEVICES,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_list_input_devices_cookie_t xcb_ret;
    xcb_input_list_input_devices_request_t xcb_out;
    
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d434 1
a434 1
 ** xcb_input_device_info_t * xcb_input_list_input_devices_devices
d436 2
a437 2
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_t *
d441 2
a442 2
xcb_input_device_info_t *
xcb_input_list_input_devices_devices (const xcb_input_list_input_devices_reply_t *R  /**< */)
d444 3
a446 1
    return (xcb_input_device_info_t *) (R + 1);
d452 1
a452 1
 ** int xcb_input_list_input_devices_devices_length
d454 2
a455 2
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns int
d459 2
a460 2
int
xcb_input_list_input_devices_devices_length (const xcb_input_list_input_devices_reply_t *R  /**< */)
d462 5
a466 1
    return R->devices_len;
d472 1
a472 1
 ** xcb_input_device_info_iterator_t xcb_input_list_input_devices_devices_iterator
d474 2
a475 2
 ** @@param const xcb_input_list_input_devices_reply_t *R
 ** @@returns xcb_input_device_info_iterator_t
d479 2
a480 2
xcb_input_device_info_iterator_t
xcb_input_list_input_devices_devices_iterator (const xcb_input_list_input_devices_reply_t *R  /**< */)
d482 3
a484 5
    xcb_input_device_info_iterator_t i;
    i.data = (xcb_input_device_info_t *) (R + 1);
    i.rem = R->devices_len;
    i.index = (char *) i.data - (char *) R;
    return i;
d490 1
a490 1
 ** xcb_input_list_input_devices_reply_t * xcb_input_list_input_devices_reply
d492 4
a495 156
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_list_input_devices_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_list_input_devices_reply_t *
 **
 *****************************************************************************/
 
xcb_input_list_input_devices_reply_t *
xcb_input_list_input_devices_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_list_input_devices_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e  /**< */)
{
    return (xcb_input_list_input_devices_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}


/*****************************************************************************
 **
 ** void xcb_input_input_info_next
 ** 
 ** @@param xcb_input_input_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_input_info_next (xcb_input_input_info_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_input_info_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_input_info_end
 ** 
 ** @@param xcb_input_input_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_input_info_end (xcb_input_input_info_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}


/*****************************************************************************
 **
 ** void xcb_input_key_info_next
 ** 
 ** @@param xcb_input_key_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_key_info_next (xcb_input_key_info_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_key_info_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_key_info_end
 ** 
 ** @@param xcb_input_key_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_key_info_end (xcb_input_key_info_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}


/*****************************************************************************
 **
 ** void xcb_input_button_info_next
 ** 
 ** @@param xcb_input_button_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_button_info_next (xcb_input_button_info_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_button_info_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_button_info_end
 ** 
 ** @@param xcb_input_button_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_button_info_end (xcb_input_button_info_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}


/*****************************************************************************
 **
 ** void xcb_input_axis_info_next
 ** 
 ** @@param xcb_input_axis_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_axis_info_next (xcb_input_axis_info_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_axis_info_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_axis_info_end
 ** 
 ** @@param xcb_input_axis_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
d515 1
a515 1
    unsigned int xcb_align_to;
d520 2
d636 1
a636 1
 ** void xcb_input_input_class_info_next
d638 1
a638 1
 ** @@param xcb_input_input_class_info_iterator_t *i
d644 1
a644 1
xcb_input_input_class_info_next (xcb_input_input_class_info_iterator_t *i  /**< */)
d648 1
a648 1
    i->index += sizeof(xcb_input_input_class_info_t);
d654 1
a654 1
 ** xcb_generic_iterator_t xcb_input_input_class_info_end
d656 1
a656 1
 ** @@param xcb_input_input_class_info_iterator_t i
d662 1
a662 1
xcb_input_input_class_info_end (xcb_input_input_class_info_iterator_t i  /**< */)
d672 1
a672 1
xcb_input_open_device_sizeof (const void  *_buffer  /**< */)
d675 1
a675 1
    const xcb_input_open_device_reply_t *_aux = (xcb_input_open_device_reply_t *)_buffer;
d679 1
a679 1
    unsigned int xcb_align_to;
d682 1
a682 1
    xcb_block_len += sizeof(xcb_input_open_device_reply_t);
d684 4
a687 2
    /* class_info */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_input_class_info_t);
d689 1
a689 1
    xcb_align_to = ALIGNOF(xcb_input_input_class_info_t);
d705 1
a705 1
 ** xcb_input_open_device_cookie_t xcb_input_open_device
d707 2
a708 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
d712 2
a713 3
xcb_input_open_device_cookie_t
xcb_input_open_device (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */)
d715 1
a715 21
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_OPEN_DEVICE,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_open_device_cookie_t xcb_ret;
    xcb_input_open_device_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d721 1
a721 1
 ** xcb_input_open_device_cookie_t xcb_input_open_device_unchecked
d723 2
a724 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_open_device_cookie_t
d728 2
a729 3
xcb_input_open_device_cookie_t
xcb_input_open_device_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           device_id  /**< */)
d731 1
a731 21
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_OPEN_DEVICE,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_open_device_cookie_t xcb_ret;
    xcb_input_open_device_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d737 1
a737 1
 ** xcb_input_input_class_info_t * xcb_input_open_device_class_info
d739 2
a740 2
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_t *
d744 2
a745 2
xcb_input_input_class_info_t *
xcb_input_open_device_class_info (const xcb_input_open_device_reply_t *R  /**< */)
d747 5
a751 1
    return (xcb_input_input_class_info_t *) (R + 1);
d757 1
a757 1
 ** int xcb_input_open_device_class_info_length
d759 2
a760 2
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns int
d764 2
a765 2
int
xcb_input_open_device_class_info_length (const xcb_input_open_device_reply_t *R  /**< */)
d767 6
a772 1
    return R->num_classes;
d778 1
a778 1
 ** xcb_input_input_class_info_iterator_t xcb_input_open_device_class_info_iterator
d780 2
a781 2
 ** @@param const xcb_input_open_device_reply_t *R
 ** @@returns xcb_input_input_class_info_iterator_t
d785 2
a786 2
xcb_input_input_class_info_iterator_t
xcb_input_open_device_class_info_iterator (const xcb_input_open_device_reply_t *R  /**< */)
d788 7
a794 5
    xcb_input_input_class_info_iterator_t i;
    i.data = (xcb_input_input_class_info_t *) (R + 1);
    i.rem = R->num_classes;
    i.index = (char *) i.data - (char *) R;
    return i;
d797 27
d825 1
a825 17
/*****************************************************************************
 **
 ** xcb_input_open_device_reply_t * xcb_input_open_device_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_open_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_open_device_reply_t *
 **
 *****************************************************************************/
 
xcb_input_open_device_reply_t *
xcb_input_open_device_reply (xcb_connection_t                *c  /**< */,
                             xcb_input_open_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e  /**< */)
{
    return (xcb_input_open_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d831 1
a831 1
 ** xcb_void_cookie_t xcb_input_close_device_checked
d834 1
a834 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d838 2
a839 3
xcb_void_cookie_t
xcb_input_close_device_checked (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */)
d844 2
a845 2
        /* opcode */ XCB_INPUT_CLOSE_DEVICE,
        /* isvoid */ 1
d849 2
a850 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_close_device_request_t xcb_out;
a851 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d865 1
a865 1
 ** xcb_void_cookie_t xcb_input_close_device
d868 1
a868 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_void_cookie_t
d872 2
a873 3
xcb_void_cookie_t
xcb_input_close_device (xcb_connection_t *c  /**< */,
                        uint8_t           device_id  /**< */)
d878 2
a879 2
        /* opcode */ XCB_INPUT_CLOSE_DEVICE,
        /* isvoid */ 1
d883 2
a884 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_close_device_request_t xcb_out;
a885 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d899 1
a899 1
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode
d901 2
a902 4
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
d906 2
a907 4
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode (xcb_connection_t *c  /**< */,
                           uint8_t           device_id  /**< */,
                           uint8_t           mode  /**< */)
d909 1
a909 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODE,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_set_device_mode_cookie_t xcb_ret;
    xcb_input_set_device_mode_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d915 1
a915 1
 ** xcb_input_set_device_mode_cookie_t xcb_input_set_device_mode_unchecked
d917 2
a918 4
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           mode
 ** @@returns xcb_input_set_device_mode_cookie_t
d922 2
a923 4
xcb_input_set_device_mode_cookie_t
xcb_input_set_device_mode_unchecked (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           mode  /**< */)
d925 1
a925 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SET_DEVICE_MODE,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_set_device_mode_cookie_t xcb_ret;
    xcb_input_set_device_mode_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d931 1
a931 1
 ** xcb_input_set_device_mode_reply_t * xcb_input_set_device_mode_reply
d933 2
a934 4
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_input_set_device_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_input_set_device_mode_reply_t *
d938 2
a939 4
xcb_input_set_device_mode_reply_t *
xcb_input_set_device_mode_reply (xcb_connection_t                    *c  /**< */,
                                 xcb_input_set_device_mode_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e  /**< */)
d941 5
a945 1
    return (xcb_input_set_device_mode_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d948 16
a963 2
int
xcb_input_select_extension_event_sizeof (const void  *_buffer  /**< */)
d965 1
a965 24
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_select_extension_event_request_t *_aux = (xcb_input_select_extension_event_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to;


    xcb_block_len += sizeof(xcb_input_select_extension_event_request_t);
    xcb_tmp += xcb_block_len;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d971 1
a971 1
 ** xcb_void_cookie_t xcb_input_select_extension_event_checked
d973 2
a974 5
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d978 6
a983 33
xcb_void_cookie_t
xcb_input_select_extension_event_checked (xcb_connection_t              *c  /**< */,
                                          xcb_window_t                   window  /**< */,
                                          uint16_t                       num_classes  /**< */,
                                          const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SELECT_EXTENSION_EVENT,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_select_extension_event_request_t xcb_out;
    
    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d989 1
a989 1
 ** xcb_void_cookie_t xcb_input_select_extension_event
d991 2
a992 5
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   window
 ** @@param uint16_t                       num_classes
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d996 2
a997 5
xcb_void_cookie_t
xcb_input_select_extension_event (xcb_connection_t              *c  /**< */,
                                  xcb_window_t                   window  /**< */,
                                  uint16_t                       num_classes  /**< */,
                                  const xcb_input_event_class_t *classes  /**< */)
d999 5
a1003 27
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SELECT_EXTENSION_EVENT,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_select_extension_event_request_t xcb_out;
    
    xcb_out.window = window;
    xcb_out.num_classes = num_classes;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d1007 1
a1007 1
xcb_input_get_selected_extension_events_sizeof (const void  *_buffer  /**< */)
d1010 1
a1010 1
    const xcb_input_get_selected_extension_events_reply_t *_aux = (xcb_input_get_selected_extension_events_reply_t *)_buffer;
d1014 1
a1014 1
    unsigned int xcb_align_to;
d1017 1
a1017 4
    xcb_block_len += sizeof(xcb_input_get_selected_extension_events_reply_t);
    xcb_tmp += xcb_block_len;
    /* this_classes */
    xcb_block_len += _aux->num_this_classes * sizeof(xcb_input_event_class_t);
d1019 1
a1019 8
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
d1021 2
a1022 2
    /* all_classes */
    xcb_block_len += _aux->num_all_classes * sizeof(xcb_input_event_class_t);
d1024 1
a1024 1
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
d1040 1
a1040 1
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events
d1043 2
a1044 2
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
d1048 3
a1050 3
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */)
d1055 1
a1055 1
        /* opcode */ XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
d1060 2
a1061 2
    xcb_input_get_selected_extension_events_cookie_t xcb_ret;
    xcb_input_get_selected_extension_events_request_t xcb_out;
d1063 2
a1064 1
    xcb_out.window = window;
d1078 1
a1078 1
 ** xcb_input_get_selected_extension_events_cookie_t xcb_input_get_selected_extension_events_unchecked
d1081 2
a1082 2
 ** @@param xcb_window_t      window
 ** @@returns xcb_input_get_selected_extension_events_cookie_t
d1086 3
a1088 3
xcb_input_get_selected_extension_events_cookie_t
xcb_input_get_selected_extension_events_unchecked (xcb_connection_t *c  /**< */,
                                                   xcb_window_t      window  /**< */)
d1093 1
a1093 1
        /* opcode */ XCB_INPUT_GET_SELECTED_EXTENSION_EVENTS,
d1098 2
a1099 2
    xcb_input_get_selected_extension_events_cookie_t xcb_ret;
    xcb_input_get_selected_extension_events_request_t xcb_out;
d1101 2
a1102 1
    xcb_out.window = window;
d1116 1
a1116 1
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_this_classes
d1118 2
a1119 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
d1123 2
a1124 2
xcb_input_event_class_t *
xcb_input_get_selected_extension_events_this_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1126 1
a1126 1
    return (xcb_input_event_class_t *) (R + 1);
d1132 1
a1132 1
 ** int xcb_input_get_selected_extension_events_this_classes_length
d1134 1
a1134 1
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
d1140 1
a1140 1
xcb_input_get_selected_extension_events_this_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1142 1
a1142 1
    return R->num_this_classes;
d1148 1
a1148 1
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_this_classes_end
d1150 2
a1151 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
d1155 2
a1156 2
xcb_generic_iterator_t
xcb_input_get_selected_extension_events_this_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1158 3
a1160 3
    xcb_generic_iterator_t i;
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_this_classes);
    i.rem = 0;
d1168 1
a1168 1
 ** xcb_input_event_class_t * xcb_input_get_selected_extension_events_all_classes
d1170 4
a1173 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_input_event_class_t *
d1177 4
a1180 2
xcb_input_event_class_t *
xcb_input_get_selected_extension_events_all_classes (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1182 1
a1182 2
    xcb_generic_iterator_t prev = xcb_input_get_selected_extension_events_this_classes_end(R);
    return (xcb_input_event_class_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_input_event_class_t, prev.index) + 0);
d1188 1
a1188 1
 ** int xcb_input_get_selected_extension_events_all_classes_length
d1190 3
a1192 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns int
d1196 3
a1198 2
int
xcb_input_get_selected_extension_events_all_classes_length (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1200 21
a1220 1
    return R->num_all_classes;
d1226 1
a1226 1
 ** xcb_generic_iterator_t xcb_input_get_selected_extension_events_all_classes_end
d1228 3
a1230 2
 ** @@param const xcb_input_get_selected_extension_events_reply_t *R
 ** @@returns xcb_generic_iterator_t
d1234 3
a1236 2
xcb_generic_iterator_t
xcb_input_get_selected_extension_events_all_classes_end (const xcb_input_get_selected_extension_events_reply_t *R  /**< */)
d1238 103
a1340 6
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t child = xcb_input_get_selected_extension_events_this_classes_end(R);
    i.data = ((xcb_input_event_class_t *) child.data) + (R->num_all_classes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d1346 1
a1346 1
 ** xcb_input_get_selected_extension_events_reply_t * xcb_input_get_selected_extension_events_reply
d1348 4
a1351 4
 ** @@param xcb_connection_t                                  *c
 ** @@param xcb_input_get_selected_extension_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                              **e
 ** @@returns xcb_input_get_selected_extension_events_reply_t *
d1355 4
a1358 4
xcb_input_get_selected_extension_events_reply_t *
xcb_input_get_selected_extension_events_reply (xcb_connection_t                                  *c  /**< */,
                                               xcb_input_get_selected_extension_events_cookie_t   cookie  /**< */,
                                               xcb_generic_error_t                              **e  /**< */)
d1360 1
a1360 1
    return (xcb_input_get_selected_extension_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d1364 1
a1364 1
xcb_input_change_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */)
d1367 1
a1367 1
    const xcb_input_change_device_dont_propagate_list_request_t *_aux = (xcb_input_change_device_dont_propagate_list_request_t *)_buffer;
d1371 1
a1371 1
    unsigned int xcb_align_to;
d1374 1
a1374 1
    xcb_block_len += sizeof(xcb_input_change_device_dont_propagate_list_request_t);
d1376 2
d1397 1
a1397 1
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list_checked
a1401 1
 ** @@param uint8_t                        mode
d1408 4
a1411 5
xcb_input_change_device_dont_propagate_list_checked (xcb_connection_t              *c  /**< */,
                                                     xcb_window_t                   window  /**< */,
                                                     uint16_t                       num_classes  /**< */,
                                                     uint8_t                        mode  /**< */,
                                                     const xcb_input_event_class_t *classes  /**< */)
d1416 1
a1416 1
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
d1422 1
a1422 1
    xcb_input_change_device_dont_propagate_list_request_t xcb_out;
d1426 1
a1426 2
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
d1445 1
a1445 1
 ** xcb_void_cookie_t xcb_input_change_device_dont_propagate_list
a1449 1
 ** @@param uint8_t                        mode
d1456 4
a1459 5
xcb_input_change_device_dont_propagate_list (xcb_connection_t              *c  /**< */,
                                             xcb_window_t                   window  /**< */,
                                             uint16_t                       num_classes  /**< */,
                                             uint8_t                        mode  /**< */,
                                             const xcb_input_event_class_t *classes  /**< */)
d1464 1
a1464 1
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_DONT_PROPAGATE_LIST,
d1470 1
a1470 1
    xcb_input_change_device_dont_propagate_list_request_t xcb_out;
d1474 1
a1474 2
    xcb_out.mode = mode;
    xcb_out.pad0 = 0;
d1491 1
a1491 1
xcb_input_get_device_dont_propagate_list_sizeof (const void  *_buffer  /**< */)
d1494 1
a1494 1
    const xcb_input_get_device_dont_propagate_list_reply_t *_aux = (xcb_input_get_device_dont_propagate_list_reply_t *)_buffer;
d1498 1
a1498 1
    unsigned int xcb_align_to;
d1501 6
a1506 1
    xcb_block_len += sizeof(xcb_input_get_device_dont_propagate_list_reply_t);
d1508 11
a1518 2
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
d1536 1
a1536 1
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list
d1540 1
a1540 1
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
d1544 3
a1546 3
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */)
d1551 1
a1551 1
        /* opcode */ XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
d1556 2
a1557 2
    xcb_input_get_device_dont_propagate_list_cookie_t xcb_ret;
    xcb_input_get_device_dont_propagate_list_request_t xcb_out;
d1573 1
a1573 1
 ** xcb_input_get_device_dont_propagate_list_cookie_t xcb_input_get_device_dont_propagate_list_unchecked
d1577 1
a1577 1
 ** @@returns xcb_input_get_device_dont_propagate_list_cookie_t
d1581 3
a1583 3
xcb_input_get_device_dont_propagate_list_cookie_t
xcb_input_get_device_dont_propagate_list_unchecked (xcb_connection_t *c  /**< */,
                                                    xcb_window_t      window  /**< */)
d1588 1
a1588 1
        /* opcode */ XCB_INPUT_GET_DEVICE_DONT_PROPAGATE_LIST,
d1593 2
a1594 2
    xcb_input_get_device_dont_propagate_list_cookie_t xcb_ret;
    xcb_input_get_device_dont_propagate_list_request_t xcb_out;
d1610 1
a1610 1
 ** xcb_input_event_class_t * xcb_input_get_device_dont_propagate_list_classes
d1612 1
a1612 1
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
d1618 1
a1618 1
xcb_input_get_device_dont_propagate_list_classes (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1626 1
a1626 1
 ** int xcb_input_get_device_dont_propagate_list_classes_length
d1628 1
a1628 1
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
d1634 1
a1634 1
xcb_input_get_device_dont_propagate_list_classes_length (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1636 1
a1636 1
    return R->num_classes;
d1642 1
a1642 1
 ** xcb_generic_iterator_t xcb_input_get_device_dont_propagate_list_classes_end
d1644 1
a1644 1
 ** @@param const xcb_input_get_device_dont_propagate_list_reply_t *R
d1650 1
a1650 1
xcb_input_get_device_dont_propagate_list_classes_end (const xcb_input_get_device_dont_propagate_list_reply_t *R  /**< */)
d1653 1
a1653 1
    i.data = ((xcb_input_event_class_t *) (R + 1)) + (R->num_classes);
d1662 1
a1662 1
 ** xcb_input_get_device_dont_propagate_list_reply_t * xcb_input_get_device_dont_propagate_list_reply
d1664 2
a1665 4
 ** @@param xcb_connection_t                                   *c
 ** @@param xcb_input_get_device_dont_propagate_list_cookie_t   cookie
 ** @@param xcb_generic_error_t                               **e
 ** @@returns xcb_input_get_device_dont_propagate_list_reply_t *
d1669 2
a1670 4
xcb_input_get_device_dont_propagate_list_reply_t *
xcb_input_get_device_dont_propagate_list_reply (xcb_connection_t                                   *c  /**< */,
                                                xcb_input_get_device_dont_propagate_list_cookie_t   cookie  /**< */,
                                                xcb_generic_error_t                               **e  /**< */)
d1672 2
a1673 1
    return (xcb_input_get_device_dont_propagate_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d1679 1
a1679 1
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events
d1681 2
a1682 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
d1686 2
a1687 5
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events (xcb_connection_t *c  /**< */,
                                    xcb_timestamp_t   start  /**< */,
                                    xcb_timestamp_t   stop  /**< */,
                                    uint8_t           device_id  /**< */)
d1689 1
a1689 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_motion_events_cookie_t xcb_ret;
    xcb_input_get_device_motion_events_request_t xcb_out;
    
    xcb_out.start = start;
    xcb_out.stop = stop;
    xcb_out.device_id = device_id;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d1695 1
a1695 1
 ** xcb_input_get_device_motion_events_cookie_t xcb_input_get_device_motion_events_unchecked
d1697 2
a1698 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_motion_events_cookie_t
d1702 2
a1703 5
xcb_input_get_device_motion_events_cookie_t
xcb_input_get_device_motion_events_unchecked (xcb_connection_t *c  /**< */,
                                              xcb_timestamp_t   start  /**< */,
                                              xcb_timestamp_t   stop  /**< */,
                                              uint8_t           device_id  /**< */)
d1705 6
a1710 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_MOTION_EVENTS,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_motion_events_cookie_t xcb_ret;
    xcb_input_get_device_motion_events_request_t xcb_out;
    
    xcb_out.start = start;
    xcb_out.stop = stop;
    xcb_out.device_id = device_id;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d1716 1
a1716 1
 ** xcb_input_get_device_motion_events_reply_t * xcb_input_get_device_motion_events_reply
d1718 4
a1721 4
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_input_get_device_motion_events_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_input_get_device_motion_events_reply_t *
d1725 4
a1728 4
xcb_input_get_device_motion_events_reply_t *
xcb_input_get_device_motion_events_reply (xcb_connection_t                             *c  /**< */,
                                          xcb_input_get_device_motion_events_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e  /**< */)
d1730 1
a1730 1
    return (xcb_input_get_device_motion_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d1733 9
a1742 16
/*****************************************************************************
 **
 ** void xcb_input_device_time_coord_next
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_device_time_coord_next (xcb_input_device_time_coord_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_time_coord_t);
}
d1744 16
d1761 1
a1761 17
/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_time_coord_end
 ** 
 ** @@param xcb_input_device_time_coord_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_device_time_coord_end (xcb_input_device_time_coord_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d1767 1
a1767 1
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device
d1769 6
a1774 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
d1778 6
a1783 3
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device (xcb_connection_t *c  /**< */,
                                  uint8_t           device_id  /**< */)
d1786 1
a1786 1
        /* count */ 2,
d1788 2
a1789 2
        /* opcode */ XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        /* isvoid */ 0
d1792 3
a1794 3
    struct iovec xcb_parts[4];
    xcb_input_change_keyboard_device_cookie_t xcb_ret;
    xcb_input_change_keyboard_device_request_t xcb_out;
d1796 4
a1799 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d1805 5
d1818 1
a1818 1
 ** xcb_input_change_keyboard_device_cookie_t xcb_input_change_keyboard_device_unchecked
d1820 6
a1825 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_keyboard_device_cookie_t
d1829 6
a1834 3
xcb_input_change_keyboard_device_cookie_t
xcb_input_change_keyboard_device_unchecked (xcb_connection_t *c  /**< */,
                                            uint8_t           device_id  /**< */)
d1837 1
a1837 1
        /* count */ 2,
d1839 2
a1840 2
        /* opcode */ XCB_INPUT_CHANGE_KEYBOARD_DEVICE,
        /* isvoid */ 0
d1843 3
a1845 3
    struct iovec xcb_parts[4];
    xcb_input_change_keyboard_device_cookie_t xcb_ret;
    xcb_input_change_keyboard_device_request_t xcb_out;
d1847 4
a1850 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d1856 5
d1866 10
d1877 18
a1894 17
/*****************************************************************************
 **
 ** xcb_input_change_keyboard_device_reply_t * xcb_input_change_keyboard_device_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_change_keyboard_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_change_keyboard_device_reply_t *
 **
 *****************************************************************************/
 
xcb_input_change_keyboard_device_reply_t *
xcb_input_change_keyboard_device_reply (xcb_connection_t                           *c  /**< */,
                                        xcb_input_change_keyboard_device_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e  /**< */)
{
    return (xcb_input_change_keyboard_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d1900 1
a1900 1
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device
d1903 2
a1904 4
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
d1908 3
a1910 5
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device (xcb_connection_t *c  /**< */,
                                 uint8_t           x_axis  /**< */,
                                 uint8_t           y_axis  /**< */,
                                 uint8_t           device_id  /**< */)
d1915 1
a1915 1
        /* opcode */ XCB_INPUT_CHANGE_POINTER_DEVICE,
d1920 2
a1921 2
    xcb_input_change_pointer_device_cookie_t xcb_ret;
    xcb_input_change_pointer_device_request_t xcb_out;
d1923 1
a1923 4
    xcb_out.x_axis = x_axis;
    xcb_out.y_axis = y_axis;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;
d1937 1
a1937 1
 ** xcb_input_change_pointer_device_cookie_t xcb_input_change_pointer_device_unchecked
d1940 2
a1941 4
 ** @@param uint8_t           x_axis
 ** @@param uint8_t           y_axis
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_change_pointer_device_cookie_t
d1945 3
a1947 5
xcb_input_change_pointer_device_cookie_t
xcb_input_change_pointer_device_unchecked (xcb_connection_t *c  /**< */,
                                           uint8_t           x_axis  /**< */,
                                           uint8_t           y_axis  /**< */,
                                           uint8_t           device_id  /**< */)
d1952 1
a1952 1
        /* opcode */ XCB_INPUT_CHANGE_POINTER_DEVICE,
d1957 2
a1958 2
    xcb_input_change_pointer_device_cookie_t xcb_ret;
    xcb_input_change_pointer_device_request_t xcb_out;
d1960 1
a1960 4
    xcb_out.x_axis = x_axis;
    xcb_out.y_axis = y_axis;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;
d1974 1
a1974 1
 ** xcb_input_change_pointer_device_reply_t * xcb_input_change_pointer_device_reply
d1976 2
a1977 4
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_input_change_pointer_device_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_input_change_pointer_device_reply_t *
d1981 2
a1982 4
xcb_input_change_pointer_device_reply_t *
xcb_input_change_pointer_device_reply (xcb_connection_t                          *c  /**< */,
                                       xcb_input_change_pointer_device_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e  /**< */)
d1984 1
a1984 1
    return (xcb_input_change_pointer_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d1987 10
d1998 1
a1998 1
xcb_input_grab_device_sizeof (const void  *_buffer  /**< */)
d2000 3
a2002 6
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_grab_device_request_t *_aux = (xcb_input_grab_device_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to;
d2004 18
a2022 14
    xcb_block_len += sizeof(xcb_input_grab_device_request_t);
    xcb_tmp += xcb_block_len;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
d2024 17
a2040 1
    return xcb_buffer_len;
d2046 1
a2046 1
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device
d2048 2
a2049 10
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
d2053 2
a2054 10
xcb_input_grab_device_cookie_t
xcb_input_grab_device (xcb_connection_t              *c  /**< */,
                       xcb_window_t                   grab_window  /**< */,
                       xcb_timestamp_t                time  /**< */,
                       uint16_t                       num_classes  /**< */,
                       uint8_t                        this_device_mode  /**< */,
                       uint8_t                        other_device_mode  /**< */,
                       uint8_t                        owner_events  /**< */,
                       uint8_t                        device_id  /**< */,
                       const xcb_input_event_class_t *classes  /**< */)
d2056 3
a2058 32
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[6];
    xcb_input_grab_device_cookie_t xcb_ret;
    xcb_input_grab_device_request_t xcb_out;
    
    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.num_classes = num_classes;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d2064 1
a2064 1
 ** xcb_input_grab_device_cookie_t xcb_input_grab_device_unchecked
d2066 2
a2067 10
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param xcb_timestamp_t                time
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param uint8_t                        device_id
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_input_grab_device_cookie_t
d2071 71
a2141 10
xcb_input_grab_device_cookie_t
xcb_input_grab_device_unchecked (xcb_connection_t              *c  /**< */,
                                 xcb_window_t                   grab_window  /**< */,
                                 xcb_timestamp_t                time  /**< */,
                                 uint16_t                       num_classes  /**< */,
                                 uint8_t                        this_device_mode  /**< */,
                                 uint8_t                        other_device_mode  /**< */,
                                 uint8_t                        owner_events  /**< */,
                                 uint8_t                        device_id  /**< */,
                                 const xcb_input_event_class_t *classes  /**< */)
d2144 1
a2144 1
        /* count */ 4,
d2146 1
a2146 1
        /* opcode */ XCB_INPUT_GRAB_DEVICE,
d2150 3
a2152 3
    struct iovec xcb_parts[6];
    xcb_input_grab_device_cookie_t xcb_ret;
    xcb_input_grab_device_request_t xcb_out;
d2154 2
a2155 6
    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.num_classes = num_classes;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
a2156 1
    memset(xcb_out.pad0, 0, 2);
a2161 5
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d2170 1
a2170 1
 ** xcb_input_grab_device_reply_t * xcb_input_grab_device_reply
d2172 4
a2175 4
 ** @@param xcb_connection_t                *c
 ** @@param xcb_input_grab_device_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_input_grab_device_reply_t *
d2179 4
a2182 4
xcb_input_grab_device_reply_t *
xcb_input_grab_device_reply (xcb_connection_t                *c  /**< */,
                             xcb_input_grab_device_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e  /**< */)
d2184 1
a2184 1
    return (xcb_input_grab_device_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d2190 1
a2190 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_checked
a2192 1
 ** @@param xcb_timestamp_t   time
d2194 1
a2194 1
 ** @@returns xcb_void_cookie_t
d2198 3
a2200 4
xcb_void_cookie_t
xcb_input_ungrab_device_checked (xcb_connection_t *c  /**< */,
                                 xcb_timestamp_t   time  /**< */,
                                 uint8_t           device_id  /**< */)
d2205 2
a2206 2
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE,
        /* isvoid */ 1
d2210 2
a2211 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_request_t xcb_out;
a2212 1
    xcb_out.time = time;
d2214 1
d2228 1
a2228 1
 ** xcb_void_cookie_t xcb_input_ungrab_device
a2230 1
 ** @@param xcb_timestamp_t   time
d2232 1
a2232 1
 ** @@returns xcb_void_cookie_t
d2236 3
a2238 4
xcb_void_cookie_t
xcb_input_ungrab_device (xcb_connection_t *c  /**< */,
                         xcb_timestamp_t   time  /**< */,
                         uint8_t           device_id  /**< */)
d2243 2
a2244 2
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE,
        /* isvoid */ 1
d2248 2
a2249 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_request_t xcb_out;
a2250 1
    xcb_out.time = time;
d2252 1
d2263 16
a2278 2
int
xcb_input_grab_device_key_sizeof (const void  *_buffer  /**< */)
d2280 1
a2280 24
    char *xcb_tmp = (char *)_buffer;
    const xcb_input_grab_device_key_request_t *_aux = (xcb_input_grab_device_key_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to;


    xcb_block_len += sizeof(xcb_input_grab_device_key_request_t);
    xcb_tmp += xcb_block_len;
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
d2286 1
a2286 1
 ** xcb_void_cookie_t xcb_input_grab_device_key_checked
d2288 5
a2292 12
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d2296 5
a2300 12
xcb_void_cookie_t
xcb_input_grab_device_key_checked (xcb_connection_t              *c  /**< */,
                                   xcb_window_t                   grab_window  /**< */,
                                   uint16_t                       num_classes  /**< */,
                                   uint16_t                       modifiers  /**< */,
                                   uint8_t                        modifier_device  /**< */,
                                   uint8_t                        grabbed_device  /**< */,
                                   uint8_t                        key  /**< */,
                                   uint8_t                        this_device_mode  /**< */,
                                   uint8_t                        other_device_mode  /**< */,
                                   uint8_t                        owner_events  /**< */,
                                   const xcb_input_event_class_t *classes  /**< */)
d2303 1
a2303 1
        /* count */ 4,
d2305 2
a2306 2
        /* opcode */ XCB_INPUT_GRAB_DEVICE_KEY,
        /* isvoid */ 1
d2309 3
a2311 3
    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_key_request_t xcb_out;
d2313 4
a2316 10
    xcb_out.grab_window = grab_window;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.key = key;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);
a2321 5
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d2330 1
a2330 70
 ** xcb_void_cookie_t xcb_input_grab_device_key
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   grab_window
 ** @@param uint16_t                       num_classes
 ** @@param uint16_t                       modifiers
 ** @@param uint8_t                        modifier_device
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        key
 ** @@param uint8_t                        this_device_mode
 ** @@param uint8_t                        other_device_mode
 ** @@param uint8_t                        owner_events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
xcb_void_cookie_t
xcb_input_grab_device_key (xcb_connection_t              *c  /**< */,
                           xcb_window_t                   grab_window  /**< */,
                           uint16_t                       num_classes  /**< */,
                           uint16_t                       modifiers  /**< */,
                           uint8_t                        modifier_device  /**< */,
                           uint8_t                        grabbed_device  /**< */,
                           uint8_t                        key  /**< */,
                           uint8_t                        this_device_mode  /**< */,
                           uint8_t                        other_device_mode  /**< */,
                           uint8_t                        owner_events  /**< */,
                           const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_KEY,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_key_request_t xcb_out;
    
    xcb_out.grab_window = grab_window;
    xcb_out.num_classes = num_classes;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.key = key;
    xcb_out.this_device_mode = this_device_mode;
    xcb_out.other_device_mode = other_device_mode;
    xcb_out.owner_events = owner_events;
    memset(xcb_out.pad0, 0, 2);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[4].iov_base = (char *) classes;
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}


/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_input_ungrab_device_key_checked
d2333 4
a2336 6
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
d2340 5
a2344 7
xcb_void_cookie_t
xcb_input_ungrab_device_key_checked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      grabWindow  /**< */,
                                     uint16_t          modifiers  /**< */,
                                     uint8_t           modifier_device  /**< */,
                                     uint8_t           key  /**< */,
                                     uint8_t           grabbed_device  /**< */)
d2349 2
a2350 2
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_KEY,
        /* isvoid */ 1
d2354 2
a2355 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_key_request_t xcb_out;
d2357 4
a2360 5
    xcb_out.grabWindow = grabWindow;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.key = key;
    xcb_out.grabbed_device = grabbed_device;
d2367 1
a2367 1
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
d2374 1
a2374 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_key
d2376 4
a2379 7
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      grabWindow
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           key
 ** @@param uint8_t           grabbed_device
 ** @@returns xcb_void_cookie_t
d2383 4
a2386 7
xcb_void_cookie_t
xcb_input_ungrab_device_key (xcb_connection_t *c  /**< */,
                             xcb_window_t      grabWindow  /**< */,
                             uint16_t          modifiers  /**< */,
                             uint8_t           modifier_device  /**< */,
                             uint8_t           key  /**< */,
                             uint8_t           grabbed_device  /**< */)
d2388 1
a2388 24
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_KEY,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_ungrab_device_key_request_t xcb_out;
    
    xcb_out.grabWindow = grabWindow;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.key = key;
    xcb_out.grabbed_device = grabbed_device;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d2392 1
a2392 1
xcb_input_grab_device_button_sizeof (const void  *_buffer  /**< */)
d2395 1
a2395 1
    const xcb_input_grab_device_button_request_t *_aux = (xcb_input_grab_device_button_request_t *)_buffer;
d2399 1
a2399 1
    unsigned int xcb_align_to;
d2402 1
a2402 1
    xcb_block_len += sizeof(xcb_input_grab_device_button_request_t);
d2404 2
d2425 1
a2425 1
 ** xcb_void_cookie_t xcb_input_grab_device_button_checked
d2429 1
a2429 2
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
a2430 1
 ** @@param uint16_t                       modifiers
a2432 1
 ** @@param uint8_t                        button
d2434 1
d2436 1
a2436 1
 ** @@returns xcb_void_cookie_t
d2440 10
a2449 12
xcb_void_cookie_t
xcb_input_grab_device_button_checked (xcb_connection_t              *c  /**< */,
                                      xcb_window_t                   grab_window  /**< */,
                                      uint8_t                        grabbed_device  /**< */,
                                      uint8_t                        modifier_device  /**< */,
                                      uint16_t                       num_classes  /**< */,
                                      uint16_t                       modifiers  /**< */,
                                      uint8_t                        this_device_mode  /**< */,
                                      uint8_t                        other_device_mode  /**< */,
                                      uint8_t                        button  /**< */,
                                      uint8_t                        owner_events  /**< */,
                                      const xcb_input_event_class_t *classes  /**< */)
d2454 2
a2455 2
        /* opcode */ XCB_INPUT_GRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2459 2
a2460 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_button_request_t xcb_out;
d2463 1
a2463 2
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.modifier_device = modifier_device;
a2464 1
    xcb_out.modifiers = modifiers;
a2466 1
    xcb_out.button = button;
d2468 1
d2477 1
a2477 1
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
d2488 1
a2488 1
 ** xcb_void_cookie_t xcb_input_grab_device_button
d2492 1
a2492 2
 ** @@param uint8_t                        grabbed_device
 ** @@param uint8_t                        modifier_device
a2493 1
 ** @@param uint16_t                       modifiers
a2495 1
 ** @@param uint8_t                        button
d2497 1
d2499 1
a2499 1
 ** @@returns xcb_void_cookie_t
d2503 16
a2518 18
xcb_void_cookie_t
xcb_input_grab_device_button (xcb_connection_t              *c  /**< */,
                              xcb_window_t                   grab_window  /**< */,
                              uint8_t                        grabbed_device  /**< */,
                              uint8_t                        modifier_device  /**< */,
                              uint16_t                       num_classes  /**< */,
                              uint16_t                       modifiers  /**< */,
                              uint8_t                        this_device_mode  /**< */,
                              uint8_t                        other_device_mode  /**< */,
                              uint8_t                        button  /**< */,
                              uint8_t                        owner_events  /**< */,
                              const xcb_input_event_class_t *classes  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GRAB_DEVICE_BUTTON,
        /* isvoid */ 1
d2522 2
a2523 2
    xcb_void_cookie_t xcb_ret;
    xcb_input_grab_device_button_request_t xcb_out;
d2526 1
a2526 2
    xcb_out.grabbed_device = grabbed_device;
    xcb_out.modifier_device = modifier_device;
a2527 1
    xcb_out.modifiers = modifiers;
a2529 1
    xcb_out.button = button;
d2531 1
d2540 1
a2540 1
    xcb_parts[4].iov_len = num_classes * sizeof(xcb_input_event_class_t);
d2551 21
a2571 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_button_checked
d2574 2
a2575 5
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
d2581 3
a2583 6
xcb_input_ungrab_device_button_checked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      grab_window  /**< */,
                                        uint16_t          modifiers  /**< */,
                                        uint8_t           modifier_device  /**< */,
                                        uint8_t           button  /**< */,
                                        uint8_t           grabbed_device  /**< */)
d2588 1
a2588 1
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_BUTTON,
d2594 1
a2594 1
    xcb_input_ungrab_device_button_request_t xcb_out;
d2596 2
a2597 5
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.button = button;
    xcb_out.grabbed_device = grabbed_device;
d2611 1
a2611 1
 ** xcb_void_cookie_t xcb_input_ungrab_device_button
d2614 2
a2615 5
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param uint8_t           modifier_device
 ** @@param uint8_t           button
 ** @@param uint8_t           grabbed_device
d2621 3
a2623 6
xcb_input_ungrab_device_button (xcb_connection_t *c  /**< */,
                                xcb_window_t      grab_window  /**< */,
                                uint16_t          modifiers  /**< */,
                                uint8_t           modifier_device  /**< */,
                                uint8_t           button  /**< */,
                                uint8_t           grabbed_device  /**< */)
d2628 1
a2628 1
        /* opcode */ XCB_INPUT_UNGRAB_DEVICE_BUTTON,
d2634 1
a2634 1
    xcb_input_ungrab_device_button_request_t xcb_out;
d2636 2
a2637 5
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.modifier_device = modifier_device;
    xcb_out.button = button;
    xcb_out.grabbed_device = grabbed_device;
d2648 31
d2682 1
a2682 1
 ** xcb_void_cookie_t xcb_input_allow_device_events_checked
d2684 11
a2694 4
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
d2700 11
a2710 4
xcb_input_allow_device_events_checked (xcb_connection_t *c  /**< */,
                                       xcb_timestamp_t   time  /**< */,
                                       uint8_t           mode  /**< */,
                                       uint8_t           device_id  /**< */)
d2713 1
a2713 1
        /* count */ 2,
d2715 1
a2715 1
        /* opcode */ XCB_INPUT_ALLOW_DEVICE_EVENTS,
d2719 1
a2719 1
    struct iovec xcb_parts[4];
d2721 1
a2721 1
    xcb_input_allow_device_events_request_t xcb_out;
d2723 10
a2732 3
    xcb_out.time = time;
    xcb_out.mode = mode;
    xcb_out.device_id = device_id;
d2738 5
d2751 1
a2751 1
 ** xcb_void_cookie_t xcb_input_allow_device_events
d2753 11
a2763 4
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           mode
 ** @@param uint8_t           device_id
d2769 11
a2779 4
xcb_input_allow_device_events (xcb_connection_t *c  /**< */,
                               xcb_timestamp_t   time  /**< */,
                               uint8_t           mode  /**< */,
                               uint8_t           device_id  /**< */)
d2782 1
a2782 1
        /* count */ 2,
d2784 1
a2784 1
        /* opcode */ XCB_INPUT_ALLOW_DEVICE_EVENTS,
d2788 1
a2788 1
    struct iovec xcb_parts[4];
d2790 1
a2790 1
    xcb_input_allow_device_events_request_t xcb_out;
d2792 10
a2801 3
    xcb_out.time = time;
    xcb_out.mode = mode;
    xcb_out.device_id = device_id;
d2807 5
d2820 1
a2820 1
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus
d2823 6
a2828 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
d2832 7
a2838 3
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus (xcb_connection_t *c  /**< */,
                            uint8_t           device_id  /**< */)
d2843 2
a2844 2
        /* opcode */ XCB_INPUT_GET_DEVICE_FOCUS,
        /* isvoid */ 0
d2848 2
a2849 2
    xcb_input_get_device_focus_cookie_t xcb_ret;
    xcb_input_get_device_focus_request_t xcb_out;
d2851 5
a2855 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d2869 1
a2869 1
 ** xcb_input_get_device_focus_cookie_t xcb_input_get_device_focus_unchecked
d2872 6
a2877 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_focus_cookie_t
d2881 7
a2887 3
xcb_input_get_device_focus_cookie_t
xcb_input_get_device_focus_unchecked (xcb_connection_t *c  /**< */,
                                      uint8_t           device_id  /**< */)
d2892 2
a2893 2
        /* opcode */ XCB_INPUT_GET_DEVICE_FOCUS,
        /* isvoid */ 0
d2897 2
a2898 2
    xcb_input_get_device_focus_cookie_t xcb_ret;
    xcb_input_get_device_focus_request_t xcb_out;
d2900 5
a2904 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d2915 27
d2943 1
a2943 17
/*****************************************************************************
 **
 ** xcb_input_get_device_focus_reply_t * xcb_input_get_device_focus_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_input_get_device_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_input_get_device_focus_reply_t *
 **
 *****************************************************************************/
 
xcb_input_get_device_focus_reply_t *
xcb_input_get_device_focus_reply (xcb_connection_t                     *c  /**< */,
                                  xcb_input_get_device_focus_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e  /**< */)
{
    return (xcb_input_get_device_focus_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d2949 1
a2949 1
 ** xcb_void_cookie_t xcb_input_set_device_focus_checked
d2951 11
a2961 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
d2967 11
a2977 5
xcb_input_set_device_focus_checked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      focus  /**< */,
                                    xcb_timestamp_t   time  /**< */,
                                    uint8_t           revert_to  /**< */,
                                    uint8_t           device_id  /**< */)
d2980 1
a2980 1
        /* count */ 2,
d2982 1
a2982 1
        /* opcode */ XCB_INPUT_SET_DEVICE_FOCUS,
d2986 1
a2986 1
    struct iovec xcb_parts[4];
d2988 1
a2988 1
    xcb_input_set_device_focus_request_t xcb_out;
d2990 10
a2999 4
    xcb_out.focus = focus;
    xcb_out.time = time;
    xcb_out.revert_to = revert_to;
    xcb_out.device_id = device_id;
d3005 5
d3018 1
a3018 1
 ** xcb_void_cookie_t xcb_input_set_device_focus
d3020 11
a3030 5
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           revert_to
 ** @@param uint8_t           device_id
d3036 11
a3046 5
xcb_input_set_device_focus (xcb_connection_t *c  /**< */,
                            xcb_window_t      focus  /**< */,
                            xcb_timestamp_t   time  /**< */,
                            uint8_t           revert_to  /**< */,
                            uint8_t           device_id  /**< */)
d3049 1
a3049 1
        /* count */ 2,
d3051 1
a3051 1
        /* opcode */ XCB_INPUT_SET_DEVICE_FOCUS,
d3055 1
a3055 1
    struct iovec xcb_parts[4];
d3057 1
a3057 1
    xcb_input_set_device_focus_request_t xcb_out;
d3059 10
a3068 4
    xcb_out.focus = focus;
    xcb_out.time = time;
    xcb_out.revert_to = revert_to;
    xcb_out.device_id = device_id;
d3074 5
d3087 1
a3087 1
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control
d3090 6
a3095 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
d3099 7
a3105 3
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */)
d3110 3
a3112 3
        /* opcode */ XCB_INPUT_GET_FEEDBACK_CONTROL,
        /* isvoid */ 0
    };
d3115 2
a3116 2
    xcb_input_get_feedback_control_cookie_t xcb_ret;
    xcb_input_get_feedback_control_request_t xcb_out;
d3118 5
a3122 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d3136 1
a3136 1
 ** xcb_input_get_feedback_control_cookie_t xcb_input_get_feedback_control_unchecked
d3139 6
a3144 2
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_feedback_control_cookie_t
d3148 7
a3154 3
xcb_input_get_feedback_control_cookie_t
xcb_input_get_feedback_control_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */)
d3159 2
a3160 2
        /* opcode */ XCB_INPUT_GET_FEEDBACK_CONTROL,
        /* isvoid */ 0
d3164 2
a3165 2
    xcb_input_get_feedback_control_cookie_t xcb_ret;
    xcb_input_get_feedback_control_request_t xcb_out;
d3167 5
a3171 2
    xcb_out.device_id = device_id;
    memset(xcb_out.pad0, 0, 3);
d3185 1
a3185 1
 ** xcb_input_get_feedback_control_reply_t * xcb_input_get_feedback_control_reply
d3187 5
a3191 4
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_get_feedback_control_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_get_feedback_control_reply_t *
d3195 5
a3199 4
xcb_input_get_feedback_control_reply_t *
xcb_input_get_feedback_control_reply (xcb_connection_t                         *c  /**< */,
                                      xcb_input_get_feedback_control_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e  /**< */)
d3201 22
a3222 1
    return (xcb_input_get_feedback_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d3228 1
a3228 1
 ** void xcb_input_feedback_state_next
d3230 5
a3234 2
 ** @@param xcb_input_feedback_state_iterator_t *i
 ** @@returns void
d3238 5
a3242 2
void
xcb_input_feedback_state_next (xcb_input_feedback_state_iterator_t *i  /**< */)
d3244 22
a3265 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_feedback_state_t);
d3271 1
a3271 1
 ** xcb_generic_iterator_t xcb_input_feedback_state_end
d3273 3
a3275 2
 ** @@param xcb_input_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d3279 3
a3281 2
xcb_generic_iterator_t
xcb_input_feedback_state_end (xcb_input_feedback_state_iterator_t i  /**< */)
d3283 21
a3303 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d3309 1
a3309 1
 ** void xcb_input_kbd_feedback_state_next
d3311 3
a3313 2
 ** @@param xcb_input_kbd_feedback_state_iterator_t *i
 ** @@returns void
d3317 3
a3319 2
void
xcb_input_kbd_feedback_state_next (xcb_input_kbd_feedback_state_iterator_t *i  /**< */)
d3321 21
a3341 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_kbd_feedback_state_t);
d3347 1
a3347 1
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_state_end
d3349 4
a3352 2
 ** @@param xcb_input_kbd_feedback_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
d3356 4
a3359 2
xcb_generic_iterator_t
xcb_input_kbd_feedback_state_end (xcb_input_kbd_feedback_state_iterator_t i  /**< */)
d3361 1
a3361 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d3367 1
a3367 1
 ** void xcb_input_ptr_feedback_state_next
d3369 6
a3374 2
 ** @@param xcb_input_ptr_feedback_state_iterator_t *i
 ** @@returns void
d3378 128
a3505 2
void
xcb_input_ptr_feedback_state_next (xcb_input_ptr_feedback_state_iterator_t *i  /**< */)
d3578 1
a3578 1
    unsigned int xcb_align_to;
d3583 2
d3772 2
a3773 12

/*****************************************************************************
 **
 ** void xcb_input_feedback_ctl_next
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_feedback_ctl_next (xcb_input_feedback_ctl_iterator_t *i  /**< */)
d3775 6
a3780 4
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_feedback_ctl_t);
}
d3783 16
a3798 18
/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_feedback_ctl_end
 ** 
 ** @@param xcb_input_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_feedback_ctl_end (xcb_input_feedback_ctl_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}
d3800 1
a3800 16

/*****************************************************************************
 **
 ** void xcb_input_kbd_feedback_ctl_next
 ** 
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_kbd_feedback_ctl_next (xcb_input_kbd_feedback_ctl_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_kbd_feedback_ctl_t);
d3806 1
a3806 1
 ** xcb_generic_iterator_t xcb_input_kbd_feedback_ctl_end
d3808 2
a3809 2
 ** @@param xcb_input_kbd_feedback_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d3813 2
a3814 2
xcb_generic_iterator_t
xcb_input_kbd_feedback_ctl_end (xcb_input_kbd_feedback_ctl_iterator_t i  /**< */)
d3816 1
a3816 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d3822 1
a3822 1
 ** void xcb_input_ptr_feedback_ctl_next
d3824 2
a3825 2
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t *i
 ** @@returns void
d3829 2
a3830 2
void
xcb_input_ptr_feedback_ctl_next (xcb_input_ptr_feedback_ctl_iterator_t *i  /**< */)
d3832 1
a3832 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_ptr_feedback_ctl_t);
d3838 1
a3838 1
 ** xcb_generic_iterator_t xcb_input_ptr_feedback_ctl_end
d3840 1
a3840 1
 ** @@param xcb_input_ptr_feedback_ctl_iterator_t i
d3846 1
a3846 1
xcb_input_ptr_feedback_ctl_end (xcb_input_ptr_feedback_ctl_iterator_t i  /**< */)
d3848 5
a3852 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d3858 1
a3858 1
 ** void xcb_input_integer_feedback_ctl_next
d3860 1
a3860 1
 ** @@param xcb_input_integer_feedback_ctl_iterator_t *i
d3866 1
a3866 1
xcb_input_integer_feedback_ctl_next (xcb_input_integer_feedback_ctl_iterator_t *i  /**< */)
d3868 4
d3873 1
a3873 2
    ++i->data;
    i->index += sizeof(xcb_input_integer_feedback_ctl_t);
d3879 1
a3879 1
 ** xcb_generic_iterator_t xcb_input_integer_feedback_ctl_end
d3881 1
a3881 1
 ** @@param xcb_input_integer_feedback_ctl_iterator_t i
d3887 1
a3887 1
xcb_input_integer_feedback_ctl_end (xcb_input_integer_feedback_ctl_iterator_t i  /**< */)
d3890 5
a3894 3
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
d3899 1
a3899 1
xcb_input_string_feedback_ctl_sizeof (const void  *_buffer  /**< */)
d3902 1
a3902 1
    const xcb_input_string_feedback_ctl_t *_aux = (xcb_input_string_feedback_ctl_t *)_buffer;
d3906 1
a3906 1
    unsigned int xcb_align_to;
d3908 2
d3911 1
a3911 1
    xcb_block_len += sizeof(xcb_input_string_feedback_ctl_t);
d3913 9
a3921 4
    /* keysyms */
    xcb_block_len += _aux->num_keysyms * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
d3937 1
a3937 1
 ** xcb_keysym_t * xcb_input_string_feedback_ctl_keysyms
d3939 3
a3941 2
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_keysym_t *
d3945 41
a3985 2
xcb_keysym_t *
xcb_input_string_feedback_ctl_keysyms (const xcb_input_string_feedback_ctl_t *R  /**< */)
d3987 21
a4007 1
    return (xcb_keysym_t *) (R + 1);
d4013 1
a4013 1
 ** int xcb_input_string_feedback_ctl_keysyms_length
d4015 1
a4015 1
 ** @@param const xcb_input_string_feedback_ctl_t *R
d4021 1
a4021 1
xcb_input_string_feedback_ctl_keysyms_length (const xcb_input_string_feedback_ctl_t *R  /**< */)
d4023 1
a4023 1
    return R->num_keysyms;
d4029 1
a4029 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_keysyms_end
d4031 2
a4032 2
 ** @@param const xcb_input_string_feedback_ctl_t *R
 ** @@returns xcb_generic_iterator_t
d4036 2
a4037 2
xcb_generic_iterator_t
xcb_input_string_feedback_ctl_keysyms_end (const xcb_input_string_feedback_ctl_t *R  /**< */)
d4039 3
a4041 3
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->num_keysyms);
    i.rem = 0;
d4049 21
a4069 1
 ** void xcb_input_string_feedback_ctl_next
d4071 1
a4071 1
 ** @@param xcb_input_string_feedback_ctl_iterator_t *i
d4077 1
a4077 1
xcb_input_string_feedback_ctl_next (xcb_input_string_feedback_ctl_iterator_t *i  /**< */)
a4078 4
    xcb_input_string_feedback_ctl_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_input_string_feedback_ctl_t *)(((char *)R) + xcb_input_string_feedback_ctl_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
d4080 2
a4081 1
    i->data = (xcb_input_string_feedback_ctl_t *) child.data;
d4087 1
a4087 1
 ** xcb_generic_iterator_t xcb_input_string_feedback_ctl_end
d4089 1
a4089 1
 ** @@param xcb_input_string_feedback_ctl_iterator_t i
d4095 1
a4095 1
xcb_input_string_feedback_ctl_end (xcb_input_string_feedback_ctl_iterator_t i  /**< */)
d4098 3
a4100 5
    while(i.rem > 0)
        xcb_input_string_feedback_ctl_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
d4107 1
a4107 1
 ** void xcb_input_bell_feedback_ctl_next
d4109 1
a4109 1
 ** @@param xcb_input_bell_feedback_ctl_iterator_t *i
d4115 1
a4115 1
xcb_input_bell_feedback_ctl_next (xcb_input_bell_feedback_ctl_iterator_t *i  /**< */)
d4119 1
a4119 1
    i->index += sizeof(xcb_input_bell_feedback_ctl_t);
d4125 1
a4125 1
 ** xcb_generic_iterator_t xcb_input_bell_feedback_ctl_end
d4127 1
a4127 1
 ** @@param xcb_input_bell_feedback_ctl_iterator_t i
d4133 1
a4133 1
xcb_input_bell_feedback_ctl_end (xcb_input_bell_feedback_ctl_iterator_t i  /**< */)
d4145 1
a4145 1
 ** void xcb_input_led_feedback_ctl_next
d4147 1
a4147 1
 ** @@param xcb_input_led_feedback_ctl_iterator_t *i
d4153 1
a4153 1
xcb_input_led_feedback_ctl_next (xcb_input_led_feedback_ctl_iterator_t *i  /**< */)
d4157 1
a4157 1
    i->index += sizeof(xcb_input_led_feedback_ctl_t);
d4163 1
a4163 1
 ** xcb_generic_iterator_t xcb_input_led_feedback_ctl_end
d4165 1
a4165 1
 ** @@param xcb_input_led_feedback_ctl_iterator_t i
d4171 1
a4171 1
xcb_input_led_feedback_ctl_end (xcb_input_led_feedback_ctl_iterator_t i  /**< */)
d4181 1
a4181 1
xcb_input_get_device_key_mapping_sizeof (const void  *_buffer  /**< */)
d4184 1
a4184 1
    const xcb_input_get_device_key_mapping_reply_t *_aux = (xcb_input_get_device_key_mapping_reply_t *)_buffer;
d4188 1
a4188 1
    unsigned int xcb_align_to;
d4191 1
a4191 1
    xcb_block_len += sizeof(xcb_input_get_device_key_mapping_reply_t);
d4193 2
d4196 1
a4196 1
    xcb_block_len += _aux->length * sizeof(xcb_keysym_t);
d4214 1
a4214 1
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping
d4216 2
a4217 5
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
d4221 2
a4222 5
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping (xcb_connection_t     *c  /**< */,
                                  uint8_t               device_id  /**< */,
                                  xcb_input_key_code_t  first_keycode  /**< */,
                                  uint8_t               count  /**< */)
d4224 1
a4224 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_key_mapping_cookie_t xcb_ret;
    xcb_input_get_device_key_mapping_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d4230 1
a4230 1
 ** xcb_input_get_device_key_mapping_cookie_t xcb_input_get_device_key_mapping_unchecked
d4232 2
a4233 5
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               count
 ** @@returns xcb_input_get_device_key_mapping_cookie_t
d4237 2
a4238 5
xcb_input_get_device_key_mapping_cookie_t
xcb_input_get_device_key_mapping_unchecked (xcb_connection_t     *c  /**< */,
                                            uint8_t               device_id  /**< */,
                                            xcb_input_key_code_t  first_keycode  /**< */,
                                            uint8_t               count  /**< */)
d4240 1
a4240 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_KEY_MAPPING,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_key_mapping_cookie_t xcb_ret;
    xcb_input_get_device_key_mapping_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d4246 1
a4246 1
 ** xcb_keysym_t * xcb_input_get_device_key_mapping_keysyms
d4248 2
a4249 2
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
 ** @@returns xcb_keysym_t *
d4253 2
a4254 2
xcb_keysym_t *
xcb_input_get_device_key_mapping_keysyms (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4256 5
a4260 1
    return (xcb_keysym_t *) (R + 1);
d4266 1
a4266 1
 ** int xcb_input_get_device_key_mapping_keysyms_length
d4268 167
a4434 1
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
d4440 1
a4440 1
xcb_input_get_device_key_mapping_keysyms_length (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4442 1
a4442 1
    return R->length;
d4448 1
a4448 1
 ** xcb_generic_iterator_t xcb_input_get_device_key_mapping_keysyms_end
d4450 1
a4450 1
 ** @@param const xcb_input_get_device_key_mapping_reply_t *R
d4456 1
a4456 1
xcb_input_get_device_key_mapping_keysyms_end (const xcb_input_get_device_key_mapping_reply_t *R  /**< */)
d4459 1
a4459 1
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->length);
d4468 22
a4489 1
 ** xcb_input_get_device_key_mapping_reply_t * xcb_input_get_device_key_mapping_reply
d4491 2
a4492 4
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_input_get_device_key_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_input_get_device_key_mapping_reply_t *
d4496 2
a4497 4
xcb_input_get_device_key_mapping_reply_t *
xcb_input_get_device_key_mapping_reply (xcb_connection_t                           *c  /**< */,
                                        xcb_input_get_device_key_mapping_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e  /**< */)
d4499 7
a4505 1
    return (xcb_input_get_device_key_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d4509 1
a4509 1
xcb_input_change_device_key_mapping_sizeof (const void  *_buffer  /**< */)
a4511 1
    const xcb_input_change_device_key_mapping_request_t *_aux = (xcb_input_change_device_key_mapping_request_t *)_buffer;
d4515 1
a4515 1
    unsigned int xcb_align_to;
d4518 1
a4518 1
    xcb_block_len += sizeof(xcb_input_change_device_key_mapping_request_t);
d4520 4
a4523 2
    /* keysyms */
    xcb_block_len += (_aux->keycode_count * _aux->keysyms_per_keycode) * sizeof(xcb_keysym_t);
d4525 1
a4525 1
    xcb_align_to = ALIGNOF(xcb_keysym_t);
d4541 1
a4541 1
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping_checked
d4543 5
a4547 6
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
d4553 5
a4557 6
xcb_input_change_device_key_mapping_checked (xcb_connection_t     *c  /**< */,
                                             uint8_t               device_id  /**< */,
                                             xcb_input_key_code_t  first_keycode  /**< */,
                                             uint8_t               keysyms_per_keycode  /**< */,
                                             uint8_t               keycode_count  /**< */,
                                             const xcb_keysym_t   *keysyms  /**< */)
d4562 1
a4562 1
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
d4568 1
a4568 1
    xcb_input_change_device_key_mapping_request_t xcb_out;
d4570 1
d4572 1
a4572 3
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    xcb_out.keycode_count = keycode_count;
d4578 4
a4581 5
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d4590 1
a4590 1
 ** xcb_void_cookie_t xcb_input_change_device_key_mapping
d4592 5
a4596 6
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               device_id
 ** @@param xcb_input_key_code_t  first_keycode
 ** @@param uint8_t               keysyms_per_keycode
 ** @@param uint8_t               keycode_count
 ** @@param const xcb_keysym_t   *keysyms
d4602 5
a4606 6
xcb_input_change_device_key_mapping (xcb_connection_t     *c  /**< */,
                                     uint8_t               device_id  /**< */,
                                     xcb_input_key_code_t  first_keycode  /**< */,
                                     uint8_t               keysyms_per_keycode  /**< */,
                                     uint8_t               keycode_count  /**< */,
                                     const xcb_keysym_t   *keysyms  /**< */)
d4611 1
a4611 1
        /* opcode */ XCB_INPUT_CHANGE_DEVICE_KEY_MAPPING,
d4617 1
a4617 1
    xcb_input_change_device_key_mapping_request_t xcb_out;
d4619 1
d4621 1
a4621 3
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    xcb_out.keycode_count = keycode_count;
d4627 4
a4630 5
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d4637 1
a4637 1
xcb_input_get_device_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d4640 1
a4640 1
    const xcb_input_get_device_modifier_mapping_reply_t *_aux = (xcb_input_get_device_modifier_mapping_reply_t *)_buffer;
d4644 1
a4644 1
    unsigned int xcb_align_to;
d4647 1
a4647 1
    xcb_block_len += sizeof(xcb_input_get_device_modifier_mapping_reply_t);
d4649 4
a4652 2
    /* keymaps */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(uint8_t);
d4654 1
a4654 1
    xcb_align_to = ALIGNOF(uint8_t);
d4670 1
a4670 1
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping
d4672 5
a4676 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
d4680 5
a4684 3
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */)
d4689 1
a4689 1
        /* opcode */ XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
d4694 2
a4695 2
    xcb_input_get_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_get_device_modifier_mapping_request_t xcb_out;
d4698 2
a4699 1
    memset(xcb_out.pad0, 0, 3);
d4713 1
a4713 1
 ** xcb_input_get_device_modifier_mapping_cookie_t xcb_input_get_device_modifier_mapping_unchecked
d4715 5
a4719 3
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_modifier_mapping_cookie_t
d4723 5
a4727 3
xcb_input_get_device_modifier_mapping_cookie_t
xcb_input_get_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */)
d4732 1
a4732 1
        /* opcode */ XCB_INPUT_GET_DEVICE_MODIFIER_MAPPING,
d4737 2
a4738 2
    xcb_input_get_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_get_device_modifier_mapping_request_t xcb_out;
d4741 2
a4742 1
    memset(xcb_out.pad0, 0, 3);
d4756 1
a4756 1
 ** uint8_t * xcb_input_get_device_modifier_mapping_keymaps
d4758 2
a4759 2
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
 ** @@returns uint8_t *
d4763 2
a4764 2
uint8_t *
xcb_input_get_device_modifier_mapping_keymaps (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4766 1
a4766 1
    return (uint8_t *) (R + 1);
d4772 1
a4772 1
 ** int xcb_input_get_device_modifier_mapping_keymaps_length
d4774 1
a4774 1
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
d4780 1
a4780 1
xcb_input_get_device_modifier_mapping_keymaps_length (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4782 1
a4782 1
    return (R->keycodes_per_modifier * 8);
d4788 1
a4788 1
 ** xcb_generic_iterator_t xcb_input_get_device_modifier_mapping_keymaps_end
d4790 1
a4790 1
 ** @@param const xcb_input_get_device_modifier_mapping_reply_t *R
d4796 1
a4796 1
xcb_input_get_device_modifier_mapping_keymaps_end (const xcb_input_get_device_modifier_mapping_reply_t *R  /**< */)
d4799 1
a4799 1
    i.data = ((uint8_t *) (R + 1)) + ((R->keycodes_per_modifier * 8));
d4808 1
a4808 1
 ** xcb_input_get_device_modifier_mapping_reply_t * xcb_input_get_device_modifier_mapping_reply
d4810 4
a4813 4
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_get_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_get_device_modifier_mapping_reply_t *
d4817 4
a4820 4
xcb_input_get_device_modifier_mapping_reply_t *
xcb_input_get_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
                                             xcb_input_get_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e  /**< */)
d4822 1
a4822 1
    return (xcb_input_get_device_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d4826 1
a4826 1
xcb_input_set_device_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d4829 1
a4829 1
    const xcb_input_set_device_modifier_mapping_request_t *_aux = (xcb_input_set_device_modifier_mapping_request_t *)_buffer;
d4833 1
a4833 1
    unsigned int xcb_align_to;
d4836 1
a4836 1
    xcb_block_len += sizeof(xcb_input_set_device_modifier_mapping_request_t);
d4838 4
a4841 2
    /* keymaps */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(uint8_t);
d4843 1
a4843 1
    xcb_align_to = ALIGNOF(uint8_t);
d4859 1
a4859 1
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping
d4861 7
a4867 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
d4871 7
a4877 5
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping (xcb_connection_t *c  /**< */,
                                       uint8_t           device_id  /**< */,
                                       uint8_t           keycodes_per_modifier  /**< */,
                                       const uint8_t    *keymaps  /**< */)
d4882 2
a4883 2
        /* opcode */ XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4887 2
a4888 2
    xcb_input_set_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_set_device_modifier_mapping_request_t xcb_out;
d4891 3
a4893 2
    xcb_out.keycodes_per_modifier = keycodes_per_modifier;
    xcb_out.pad0 = 0;
d4899 3
a4901 3
    /* uint8_t keymaps */
    xcb_parts[4].iov_base = (char *) keymaps;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
d4912 1
a4912 1
 ** xcb_input_set_device_modifier_mapping_cookie_t xcb_input_set_device_modifier_mapping_unchecked
d4914 7
a4920 5
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           keycodes_per_modifier
 ** @@param const uint8_t    *keymaps
 ** @@returns xcb_input_set_device_modifier_mapping_cookie_t
d4924 7
a4930 5
xcb_input_set_device_modifier_mapping_cookie_t
xcb_input_set_device_modifier_mapping_unchecked (xcb_connection_t *c  /**< */,
                                                 uint8_t           device_id  /**< */,
                                                 uint8_t           keycodes_per_modifier  /**< */,
                                                 const uint8_t    *keymaps  /**< */)
d4935 2
a4936 2
        /* opcode */ XCB_INPUT_SET_DEVICE_MODIFIER_MAPPING,
        /* isvoid */ 0
d4940 2
a4941 2
    xcb_input_set_device_modifier_mapping_cookie_t xcb_ret;
    xcb_input_set_device_modifier_mapping_request_t xcb_out;
d4944 3
a4946 2
    xcb_out.keycodes_per_modifier = keycodes_per_modifier;
    xcb_out.pad0 = 0;
d4952 3
a4954 3
    /* uint8_t keymaps */
    xcb_parts[4].iov_base = (char *) keymaps;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
a4961 20

/*****************************************************************************
 **
 ** xcb_input_set_device_modifier_mapping_reply_t * xcb_input_set_device_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_input_set_device_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_input_set_device_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
xcb_input_set_device_modifier_mapping_reply_t *
xcb_input_set_device_modifier_mapping_reply (xcb_connection_t                                *c  /**< */,
                                             xcb_input_set_device_modifier_mapping_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e  /**< */)
{
    return (xcb_input_set_device_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

d4963 1
a4963 1
xcb_input_get_device_button_mapping_sizeof (const void  *_buffer  /**< */)
d4966 1
a4966 1
    const xcb_input_get_device_button_mapping_reply_t *_aux = (xcb_input_get_device_button_mapping_reply_t *)_buffer;
d4970 1
a4970 1
    unsigned int xcb_align_to;
d4973 1
a4973 1
    xcb_block_len += sizeof(xcb_input_get_device_button_mapping_reply_t);
d4975 4
a4978 2
    /* map */
    xcb_block_len += _aux->map_size * sizeof(uint8_t);
d4996 1
a4996 1
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping
d5000 1
a5000 1
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
d5004 3
a5006 3
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */)
d5011 1
a5011 1
        /* opcode */ XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
d5016 2
a5017 2
    xcb_input_get_device_button_mapping_cookie_t xcb_ret;
    xcb_input_get_device_button_mapping_request_t xcb_out;
d5034 1
a5034 1
 ** xcb_input_get_device_button_mapping_cookie_t xcb_input_get_device_button_mapping_unchecked
d5038 1
a5038 1
 ** @@returns xcb_input_get_device_button_mapping_cookie_t
d5042 3
a5044 3
xcb_input_get_device_button_mapping_cookie_t
xcb_input_get_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */)
d5049 1
a5049 1
        /* opcode */ XCB_INPUT_GET_DEVICE_BUTTON_MAPPING,
d5054 2
a5055 2
    xcb_input_get_device_button_mapping_cookie_t xcb_ret;
    xcb_input_get_device_button_mapping_request_t xcb_out;
d5072 1
a5072 1
 ** uint8_t * xcb_input_get_device_button_mapping_map
d5074 1
a5074 1
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
d5080 1
a5080 1
xcb_input_get_device_button_mapping_map (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d5088 1
a5088 1
 ** int xcb_input_get_device_button_mapping_map_length
d5090 1
a5090 1
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
d5096 1
a5096 1
xcb_input_get_device_button_mapping_map_length (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d5098 1
a5098 1
    return R->map_size;
d5104 1
a5104 1
 ** xcb_generic_iterator_t xcb_input_get_device_button_mapping_map_end
d5106 1
a5106 1
 ** @@param const xcb_input_get_device_button_mapping_reply_t *R
d5112 1
a5112 1
xcb_input_get_device_button_mapping_map_end (const xcb_input_get_device_button_mapping_reply_t *R  /**< */)
d5115 1
a5115 1
    i.data = ((uint8_t *) (R + 1)) + (R->map_size);
d5124 1
a5124 1
 ** xcb_input_get_device_button_mapping_reply_t * xcb_input_get_device_button_mapping_reply
d5126 4
a5129 4
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_get_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_get_device_button_mapping_reply_t *
d5133 4
a5136 4
xcb_input_get_device_button_mapping_reply_t *
xcb_input_get_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
                                           xcb_input_get_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e  /**< */)
d5138 1
a5138 1
    return (xcb_input_get_device_button_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d5142 1
a5142 1
xcb_input_set_device_button_mapping_sizeof (const void  *_buffer  /**< */)
d5145 1
a5145 1
    const xcb_input_set_device_button_mapping_request_t *_aux = (xcb_input_set_device_button_mapping_request_t *)_buffer;
d5149 1
a5149 1
    unsigned int xcb_align_to;
d5152 1
a5152 1
    xcb_block_len += sizeof(xcb_input_set_device_button_mapping_request_t);
d5154 4
a5157 2
    /* map */
    xcb_block_len += _aux->map_size * sizeof(uint8_t);
d5175 1
a5175 1
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping
d5179 3
a5181 3
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
d5185 5
a5189 5
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping (xcb_connection_t *c  /**< */,
                                     uint8_t           device_id  /**< */,
                                     uint8_t           map_size  /**< */,
                                     const uint8_t    *map  /**< */)
d5194 1
a5194 1
        /* opcode */ XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
d5199 2
a5200 2
    xcb_input_set_device_button_mapping_cookie_t xcb_ret;
    xcb_input_set_device_button_mapping_request_t xcb_out;
d5203 2
a5204 2
    xcb_out.map_size = map_size;
    memset(xcb_out.pad0, 0, 2);
d5210 3
a5212 3
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_size * sizeof(uint8_t);
d5223 1
a5223 1
 ** xcb_input_set_device_button_mapping_cookie_t xcb_input_set_device_button_mapping_unchecked
d5227 3
a5229 3
 ** @@param uint8_t           map_size
 ** @@param const uint8_t    *map
 ** @@returns xcb_input_set_device_button_mapping_cookie_t
d5233 5
a5237 5
xcb_input_set_device_button_mapping_cookie_t
xcb_input_set_device_button_mapping_unchecked (xcb_connection_t *c  /**< */,
                                               uint8_t           device_id  /**< */,
                                               uint8_t           map_size  /**< */,
                                               const uint8_t    *map  /**< */)
d5242 1
a5242 1
        /* opcode */ XCB_INPUT_SET_DEVICE_BUTTON_MAPPING,
d5247 2
a5248 2
    xcb_input_set_device_button_mapping_cookie_t xcb_ret;
    xcb_input_set_device_button_mapping_request_t xcb_out;
d5251 2
a5252 2
    xcb_out.map_size = map_size;
    memset(xcb_out.pad0, 0, 2);
d5258 3
a5260 3
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_size * sizeof(uint8_t);
d5271 1
a5271 1
 ** xcb_input_set_device_button_mapping_reply_t * xcb_input_set_device_button_mapping_reply
d5273 4
a5276 4
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_input_set_device_button_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_input_set_device_button_mapping_reply_t *
d5280 10
a5289 4
xcb_input_set_device_button_mapping_reply_t *
xcb_input_set_device_button_mapping_reply (xcb_connection_t                              *c  /**< */,
                                           xcb_input_set_device_button_mapping_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e  /**< */)
d5291 26
a5316 1
    return (xcb_input_set_device_button_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d5322 1
a5322 1
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state
d5326 1
a5326 1
 ** @@returns xcb_input_query_device_state_cookie_t
d5330 3
a5332 3
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state (xcb_connection_t *c  /**< */,
                              uint8_t           device_id  /**< */)
d5337 1
a5337 1
        /* opcode */ XCB_INPUT_QUERY_DEVICE_STATE,
d5342 2
a5343 2
    xcb_input_query_device_state_cookie_t xcb_ret;
    xcb_input_query_device_state_request_t xcb_out;
d5360 1
a5360 1
 ** xcb_input_query_device_state_cookie_t xcb_input_query_device_state_unchecked
d5364 1
a5364 1
 ** @@returns xcb_input_query_device_state_cookie_t
d5368 3
a5370 3
xcb_input_query_device_state_cookie_t
xcb_input_query_device_state_unchecked (xcb_connection_t *c  /**< */,
                                        uint8_t           device_id  /**< */)
d5375 1
a5375 1
        /* opcode */ XCB_INPUT_QUERY_DEVICE_STATE,
d5380 2
a5381 2
    xcb_input_query_device_state_cookie_t xcb_ret;
    xcb_input_query_device_state_request_t xcb_out;
d5398 1
a5398 1
 ** xcb_input_query_device_state_reply_t * xcb_input_query_device_state_reply
d5400 2
a5401 4
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_input_query_device_state_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_input_query_device_state_reply_t *
d5405 2
a5406 4
xcb_input_query_device_state_reply_t *
xcb_input_query_device_state_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_query_device_state_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e  /**< */)
d5408 1
a5408 1
    return (xcb_input_query_device_state_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d5414 1
a5414 1
 ** void xcb_input_input_state_next
d5416 2
a5417 2
 ** @@param xcb_input_input_state_iterator_t *i
 ** @@returns void
d5421 2
a5422 2
void
xcb_input_input_state_next (xcb_input_input_state_iterator_t *i  /**< */)
d5424 1
a5424 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_input_state_t);
d5430 1
a5430 1
 ** xcb_generic_iterator_t xcb_input_input_state_end
d5432 1
a5432 1
 ** @@param xcb_input_input_state_iterator_t i
d5438 172
a5609 1
xcb_input_input_state_end (xcb_input_input_state_iterator_t i  /**< */)
d5611 1
a5611 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d5698 1
a5698 1
    unsigned int xcb_align_to;
d5703 2
d5817 1
a5817 1
xcb_input_send_extension_event_sizeof (const void  *_buffer  /**< */)
d5820 1
a5820 1
    const xcb_input_send_extension_event_request_t *_aux = (xcb_input_send_extension_event_request_t *)_buffer;
d5824 1
a5824 1
    unsigned int xcb_align_to;
d5827 1
a5827 4
    xcb_block_len += sizeof(xcb_input_send_extension_event_request_t);
    xcb_tmp += xcb_block_len;
    /* events */
    xcb_block_len += (_aux->num_events * 32) * sizeof(char);
d5829 1
a5829 8
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
d5831 2
a5832 2
    /* classes */
    xcb_block_len += _aux->num_classes * sizeof(xcb_input_event_class_t);
d5834 1
a5834 1
    xcb_align_to = ALIGNOF(xcb_input_event_class_t);
d5850 1
a5850 1
 ** xcb_void_cookie_t xcb_input_send_extension_event_checked
d5852 2
a5853 9
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const char                    *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d5857 2
a5858 9
xcb_void_cookie_t
xcb_input_send_extension_event_checked (xcb_connection_t              *c  /**< */,
                                        xcb_window_t                   destination  /**< */,
                                        uint8_t                        device_id  /**< */,
                                        uint8_t                        propagate  /**< */,
                                        uint16_t                       num_classes  /**< */,
                                        uint8_t                        num_events  /**< */,
                                        const char                    *events  /**< */,
                                        const xcb_input_event_class_t *classes  /**< */)
d5860 1
a5860 35
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SEND_EXTENSION_EVENT,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_input_send_extension_event_request_t xcb_out;
    
    xcb_out.destination = destination;
    xcb_out.device_id = device_id;
    xcb_out.propagate = propagate;
    xcb_out.num_classes = num_classes;
    xcb_out.num_events = num_events;
    memset(xcb_out.pad0, 0, 3);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char events */
    xcb_parts[4].iov_base = (char *) events;
    xcb_parts[4].iov_len = (num_events * 32) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[6].iov_base = (char *) classes;
    xcb_parts[6].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d5866 1
a5866 1
 ** xcb_void_cookie_t xcb_input_send_extension_event
d5868 18
a5885 9
 ** @@param xcb_connection_t              *c
 ** @@param xcb_window_t                   destination
 ** @@param uint8_t                        device_id
 ** @@param uint8_t                        propagate
 ** @@param uint16_t                       num_classes
 ** @@param uint8_t                        num_events
 ** @@param const char                    *events
 ** @@param const xcb_input_event_class_t *classes
 ** @@returns xcb_void_cookie_t
d5889 2
a5890 9
xcb_void_cookie_t
xcb_input_send_extension_event (xcb_connection_t              *c  /**< */,
                                xcb_window_t                   destination  /**< */,
                                uint8_t                        device_id  /**< */,
                                uint8_t                        propagate  /**< */,
                                uint16_t                       num_classes  /**< */,
                                uint8_t                        num_events  /**< */,
                                const char                    *events  /**< */,
                                const xcb_input_event_class_t *classes  /**< */)
d5892 5
a5896 35
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 6,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_SEND_EXTENSION_EVENT,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_input_send_extension_event_request_t xcb_out;
    
    xcb_out.destination = destination;
    xcb_out.device_id = device_id;
    xcb_out.propagate = propagate;
    xcb_out.num_classes = num_classes;
    xcb_out.num_events = num_events;
    memset(xcb_out.pad0, 0, 3);
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char events */
    xcb_parts[4].iov_base = (char *) events;
    xcb_parts[4].iov_len = (num_events * 32) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_input_event_class_t classes */
    xcb_parts[6].iov_base = (char *) classes;
    xcb_parts[6].iov_len = num_classes * sizeof(xcb_input_event_class_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d5902 1
a5902 1
 ** xcb_void_cookie_t xcb_input_device_bell_checked
d5904 2
a5905 6
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
d5909 2
a5910 6
xcb_void_cookie_t
xcb_input_device_bell_checked (xcb_connection_t *c  /**< */,
                               uint8_t           device_id  /**< */,
                               uint8_t           feedback_id  /**< */,
                               uint8_t           feedback_class  /**< */,
                               int8_t            percent  /**< */)
d5912 6
a5917 23
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DEVICE_BELL,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_device_bell_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    xcb_out.feedback_class = feedback_class;
    xcb_out.percent = percent;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d5923 1
a5923 1
 ** xcb_void_cookie_t xcb_input_device_bell
d5925 2
a5926 6
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           device_id
 ** @@param uint8_t           feedback_id
 ** @@param uint8_t           feedback_class
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
d5930 2
a5931 6
xcb_void_cookie_t
xcb_input_device_bell (xcb_connection_t *c  /**< */,
                       uint8_t           device_id  /**< */,
                       uint8_t           feedback_id  /**< */,
                       uint8_t           feedback_class  /**< */,
                       int8_t            percent  /**< */)
d5933 7
a5939 23
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_DEVICE_BELL,
        /* isvoid */ 1
    };
    
    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_input_device_bell_request_t xcb_out;
    
    xcb_out.device_id = device_id;
    xcb_out.feedback_id = feedback_id;
    xcb_out.feedback_class = feedback_class;
    xcb_out.percent = percent;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d5943 1
a5943 1
xcb_input_set_device_valuators_sizeof (const void  *_buffer  /**< */)
d5946 1
a5946 1
    const xcb_input_set_device_valuators_request_t *_aux = (xcb_input_set_device_valuators_request_t *)_buffer;
d5950 1
a5950 1
    unsigned int xcb_align_to;
d5952 2
d5955 1
a5955 1
    xcb_block_len += sizeof(xcb_input_set_device_valuators_request_t);
d5957 9
a5965 4
    /* valuators */
    xcb_block_len += _aux->num_valuators * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
d5981 1
a5981 1
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators
d5985 1
a5985 4
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
d5989 3
a5991 6
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators (xcb_connection_t *c  /**< */,
                                uint8_t           device_id  /**< */,
                                uint8_t           first_valuator  /**< */,
                                uint8_t           num_valuators  /**< */,
                                const int32_t    *valuators  /**< */)
d5994 1
a5994 1
        /* count */ 4,
d5996 1
a5996 1
        /* opcode */ XCB_INPUT_SET_DEVICE_VALUATORS,
d6000 3
a6002 3
    struct iovec xcb_parts[6];
    xcb_input_set_device_valuators_cookie_t xcb_ret;
    xcb_input_set_device_valuators_request_t xcb_out;
d6005 1
a6005 3
    xcb_out.first_valuator = first_valuator;
    xcb_out.num_valuators = num_valuators;
    xcb_out.pad0 = 0;
a6010 5
    /* int32_t valuators */
    xcb_parts[4].iov_base = (char *) valuators;
    xcb_parts[4].iov_len = num_valuators * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d6019 1
a6019 1
 ** xcb_input_set_device_valuators_cookie_t xcb_input_set_device_valuators_unchecked
d6023 1
a6023 4
 ** @@param uint8_t           first_valuator
 ** @@param uint8_t           num_valuators
 ** @@param const int32_t    *valuators
 ** @@returns xcb_input_set_device_valuators_cookie_t
d6027 3
a6029 6
xcb_input_set_device_valuators_cookie_t
xcb_input_set_device_valuators_unchecked (xcb_connection_t *c  /**< */,
                                          uint8_t           device_id  /**< */,
                                          uint8_t           first_valuator  /**< */,
                                          uint8_t           num_valuators  /**< */,
                                          const int32_t    *valuators  /**< */)
d6032 1
a6032 1
        /* count */ 4,
d6034 1
a6034 1
        /* opcode */ XCB_INPUT_SET_DEVICE_VALUATORS,
d6038 3
a6040 3
    struct iovec xcb_parts[6];
    xcb_input_set_device_valuators_cookie_t xcb_ret;
    xcb_input_set_device_valuators_request_t xcb_out;
d6043 1
a6043 3
    xcb_out.first_valuator = first_valuator;
    xcb_out.num_valuators = num_valuators;
    xcb_out.pad0 = 0;
a6048 5
    /* int32_t valuators */
    xcb_parts[4].iov_base = (char *) valuators;
    xcb_parts[4].iov_len = num_valuators * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d6057 1
a6057 1
 ** xcb_input_set_device_valuators_reply_t * xcb_input_set_device_valuators_reply
d6059 2
a6060 4
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_input_set_device_valuators_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_input_set_device_valuators_reply_t *
d6064 2
a6065 4
xcb_input_set_device_valuators_reply_t *
xcb_input_set_device_valuators_reply (xcb_connection_t                         *c  /**< */,
                                      xcb_input_set_device_valuators_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e  /**< */)
d6067 1
a6067 1
    return (xcb_input_set_device_valuators_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d6073 1
a6073 1
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control
d6075 2
a6076 4
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
d6080 2
a6081 4
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control (xcb_connection_t *c  /**< */,
                              uint16_t          control_id  /**< */,
                              uint8_t           device_id  /**< */)
d6083 5
a6087 22
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_CONTROL,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_control_cookie_t xcb_ret;
    xcb_input_get_device_control_request_t xcb_out;
    
    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d6093 1
a6093 42
 ** xcb_input_get_device_control_cookie_t xcb_input_get_device_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          control_id
 ** @@param uint8_t           device_id
 ** @@returns xcb_input_get_device_control_cookie_t
 **
 *****************************************************************************/
 
xcb_input_get_device_control_cookie_t
xcb_input_get_device_control_unchecked (xcb_connection_t *c  /**< */,
                                        uint16_t          control_id  /**< */,
                                        uint8_t           device_id  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_input_id,
        /* opcode */ XCB_INPUT_GET_DEVICE_CONTROL,
        /* isvoid */ 0
    };
    
    struct iovec xcb_parts[4];
    xcb_input_get_device_control_cookie_t xcb_ret;
    xcb_input_get_device_control_request_t xcb_out;
    
    xcb_out.control_id = control_id;
    xcb_out.device_id = device_id;
    xcb_out.pad0 = 0;
    
    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}


/*****************************************************************************
 **
 ** xcb_input_get_device_control_reply_t * xcb_input_get_device_control_reply
d6096 1
a6096 1
 ** @@param xcb_input_get_device_control_cookie_t   cookie
d6098 1
a6098 1
 ** @@returns xcb_input_get_device_control_reply_t *
d6102 3
a6104 3
xcb_input_get_device_control_reply_t *
xcb_input_get_device_control_reply (xcb_connection_t                       *c  /**< */,
                                    xcb_input_get_device_control_cookie_t   cookie  /**< */,
d6107 1
a6107 39
    return (xcb_input_get_device_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}


/*****************************************************************************
 **
 ** void xcb_input_device_state_next
 ** 
 ** @@param xcb_input_device_state_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_device_state_next (xcb_input_device_state_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_state_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_state_end
 ** 
 ** @@param xcb_input_device_state_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_device_state_end (xcb_input_device_state_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d6111 1
a6111 1
xcb_input_device_resolution_state_sizeof (const void  *_buffer  /**< */)
d6114 1
a6114 1
    const xcb_input_device_resolution_state_t *_aux = (xcb_input_device_resolution_state_t *)_buffer;
d6118 1
a6118 1
    unsigned int xcb_align_to;
d6121 1
a6121 4
    xcb_block_len += sizeof(xcb_input_device_resolution_state_t);
    xcb_tmp += xcb_block_len;
    /* resolution_values */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
d6123 1
a6123 8
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
d6125 2
a6126 2
    /* resolution_min */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
d6128 1
a6128 1
    xcb_align_to = ALIGNOF(uint32_t);
d6137 2
a6138 2
    /* resolution_max */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
d6140 1
a6140 1
    xcb_align_to = ALIGNOF(uint32_t);
d6156 1
a6156 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_values
d6158 9
a6166 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
d6170 9
a6178 2
uint32_t *
xcb_input_device_resolution_state_resolution_values (const xcb_input_device_resolution_state_t *R  /**< */)
d6180 35
a6214 1
    return (uint32_t *) (R + 1);
d6220 1
a6220 1
 ** int xcb_input_device_resolution_state_resolution_values_length
d6222 9
a6230 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
d6234 9
a6242 2
int
xcb_input_device_resolution_state_resolution_values_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6244 35
a6278 1
    return R->num_valuators;
d6284 1
a6284 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_values_end
d6286 6
a6291 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
d6295 6
a6300 2
xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_values_end (const xcb_input_device_resolution_state_t *R  /**< */)
d6302 23
a6324 5
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d6330 1
a6330 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_min
d6332 6
a6337 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
d6341 6
a6346 2
uint32_t *
xcb_input_device_resolution_state_resolution_min (const xcb_input_device_resolution_state_t *R  /**< */)
d6348 23
a6370 2
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_values_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
a6372 10

/*****************************************************************************
 **
 ** int xcb_input_device_resolution_state_resolution_min_length
 ** 
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d6374 1
a6374 1
xcb_input_device_resolution_state_resolution_min_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6376 26
a6401 1
    return R->num_valuators;
d6407 1
a6407 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_state_resolution_min_end
d6409 6
a6414 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns xcb_generic_iterator_t
d6418 6
a6423 2
xcb_generic_iterator_t
xcb_input_device_resolution_state_resolution_min_end (const xcb_input_device_resolution_state_t *R  /**< */)
d6425 28
a6452 6
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t child = xcb_input_device_resolution_state_resolution_values_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_valuators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
d6458 1
a6458 1
 ** uint32_t * xcb_input_device_resolution_state_resolution_max
d6460 6
a6465 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns uint32_t *
d6469 6
a6474 2
uint32_t *
xcb_input_device_resolution_state_resolution_max (const xcb_input_device_resolution_state_t *R  /**< */)
d6476 28
a6503 2
    xcb_generic_iterator_t prev = xcb_input_device_resolution_state_resolution_min_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
d6509 1
a6509 1
 ** int xcb_input_device_resolution_state_resolution_max_length
d6511 4
a6514 2
 ** @@param const xcb_input_device_resolution_state_t *R
 ** @@returns int
d6518 8
d6527 1
a6527 1
xcb_input_device_resolution_state_resolution_max_length (const xcb_input_device_resolution_state_t *R  /**< */)
d6529 190
a6718 2
    return R->num_valuators;
}
a6935 38

/*****************************************************************************
 **
 ** void xcb_input_device_ctl_next
 ** 
 ** @@param xcb_input_device_ctl_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
void
xcb_input_device_ctl_next (xcb_input_device_ctl_iterator_t *i  /**< */)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_ctl_t);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_input_device_ctl_end
 ** 
 ** @@param xcb_input_device_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_input_device_ctl_end (xcb_input_device_ctl_iterator_t i  /**< */)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

d6937 1
a6937 1
xcb_input_device_resolution_ctl_sizeof (const void  *_buffer  /**< */)
d6940 1
a6940 1
    const xcb_input_device_resolution_ctl_t *_aux = (xcb_input_device_resolution_ctl_t *)_buffer;
d6944 1
a6944 1
    unsigned int xcb_align_to;
d6947 1
a6947 1
    xcb_block_len += sizeof(xcb_input_device_resolution_ctl_t);
d6949 4
a6952 2
    /* resolution_values */
    xcb_block_len += _aux->num_valuators * sizeof(uint32_t);
d6954 1
a6954 1
    xcb_align_to = ALIGNOF(uint32_t);
d6970 1
a6970 1
 ** uint32_t * xcb_input_device_resolution_ctl_resolution_values
d6972 2
a6973 2
 ** @@param const xcb_input_device_resolution_ctl_t *R
 ** @@returns uint32_t *
d6977 2
a6978 2
uint32_t *
xcb_input_device_resolution_ctl_resolution_values (const xcb_input_device_resolution_ctl_t *R  /**< */)
d6980 1
a6980 1
    return (uint32_t *) (R + 1);
d6986 1
a6986 1
 ** int xcb_input_device_resolution_ctl_resolution_values_length
d6988 1
a6988 1
 ** @@param const xcb_input_device_resolution_ctl_t *R
d6994 1
a6994 1
xcb_input_device_resolution_ctl_resolution_values_length (const xcb_input_device_resolution_ctl_t *R  /**< */)
d6996 1
a6996 1
    return R->num_valuators;
d7002 1
a7002 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_resolution_values_end
d7004 1
a7004 1
 ** @@param const xcb_input_device_resolution_ctl_t *R
d7010 1
a7010 1
xcb_input_device_resolution_ctl_resolution_values_end (const xcb_input_device_resolution_ctl_t *R  /**< */)
d7013 1
a7013 1
    i.data = ((uint32_t *) (R + 1)) + (R->num_valuators);
d7022 1
a7022 1
 ** void xcb_input_device_resolution_ctl_next
d7024 1
a7024 1
 ** @@param xcb_input_device_resolution_ctl_iterator_t *i
d7030 1
a7030 1
xcb_input_device_resolution_ctl_next (xcb_input_device_resolution_ctl_iterator_t *i  /**< */)
d7032 1
a7032 1
    xcb_input_device_resolution_ctl_t *R = i->data;
d7034 1
a7034 1
    child.data = (xcb_input_device_resolution_ctl_t *)(((char *)R) + xcb_input_device_resolution_ctl_sizeof(R));
d7037 1
a7037 1
    i->data = (xcb_input_device_resolution_ctl_t *) child.data;
d7043 1
a7043 1
 ** xcb_generic_iterator_t xcb_input_device_resolution_ctl_end
d7045 1
a7045 1
 ** @@param xcb_input_device_resolution_ctl_iterator_t i
d7051 1
a7051 1
xcb_input_device_resolution_ctl_end (xcb_input_device_resolution_ctl_iterator_t i  /**< */)
d7055 1
a7055 1
        xcb_input_device_resolution_ctl_next(&i);
d7062 128
d7193 1
a7193 1
 ** void xcb_input_device_abs_calib_ctl_next
d7195 4
a7198 2
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t *i
 ** @@returns void
d7202 10
a7211 2
void
xcb_input_device_abs_calib_ctl_next (xcb_input_device_abs_calib_ctl_iterator_t *i  /**< */)
d7213 26
a7238 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_calib_ctl_t);
d7244 1
a7244 1
 ** xcb_generic_iterator_t xcb_input_device_abs_calib_ctl_end
d7246 2
a7247 2
 ** @@param xcb_input_device_abs_calib_ctl_iterator_t i
 ** @@returns xcb_generic_iterator_t
d7251 2
a7252 2
xcb_generic_iterator_t
xcb_input_device_abs_calib_ctl_end (xcb_input_device_abs_calib_ctl_iterator_t i  /**< */)
d7254 1
a7254 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d7260 1
a7260 1
 ** void xcb_input_device_abs_area_ctrl_next
d7262 2
a7263 2
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t *i
 ** @@returns void
d7267 2
a7268 2
void
xcb_input_device_abs_area_ctrl_next (xcb_input_device_abs_area_ctrl_iterator_t *i  /**< */)
d7270 1
a7270 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_input_device_abs_area_ctrl_t);
d7276 1
a7276 1
 ** xcb_generic_iterator_t xcb_input_device_abs_area_ctrl_end
d7278 1
a7278 1
 ** @@param xcb_input_device_abs_area_ctrl_iterator_t i
d7284 1
a7284 1
xcb_input_device_abs_area_ctrl_end (xcb_input_device_abs_area_ctrl_iterator_t i  /**< */)
d7286 5
a7290 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d7296 1
a7296 1
 ** void xcb_input_device_core_ctrl_next
d7298 1
a7298 1
 ** @@param xcb_input_device_core_ctrl_iterator_t *i
d7304 1
a7304 1
xcb_input_device_core_ctrl_next (xcb_input_device_core_ctrl_iterator_t *i  /**< */)
d7306 4
d7311 1
a7311 2
    ++i->data;
    i->index += sizeof(xcb_input_device_core_ctrl_t);
d7317 1
a7317 1
 ** xcb_generic_iterator_t xcb_input_device_core_ctrl_end
d7319 1
a7319 1
 ** @@param xcb_input_device_core_ctrl_iterator_t i
d7325 1
a7325 1
xcb_input_device_core_ctrl_end (xcb_input_device_core_ctrl_iterator_t i  /**< */)
d7328 5
a7332 3
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
d7339 1
a7339 1
 ** void xcb_input_device_enable_ctrl_next
d7341 1
a7341 1
 ** @@param xcb_input_device_enable_ctrl_iterator_t *i
d7347 1
a7347 1
xcb_input_device_enable_ctrl_next (xcb_input_device_enable_ctrl_iterator_t *i  /**< */)
d7351 1
a7351 1
    i->index += sizeof(xcb_input_device_enable_ctrl_t);
d7357 1
a7357 1
 ** xcb_generic_iterator_t xcb_input_device_enable_ctrl_end
d7359 1
a7359 1
 ** @@param xcb_input_device_enable_ctrl_iterator_t i
d7365 1
a7365 1
xcb_input_device_enable_ctrl_end (xcb_input_device_enable_ctrl_iterator_t i  /**< */)
d7372 7624
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d97 29
d161 1
d166 1
d206 1
d211 1
d274 29
d332 1
d366 1
d595 29
d690 3
a692 1
    xcb_generic_iterator_t child = xcb_input_axis_info_end(xcb_input_valuator_info_axes_iterator(R));
a694 1
    i->index = child.index;
d757 29
d819 1
d857 1
d967 1
d1005 1
d1046 1
d1087 1
d1112 29
d1179 1
d1184 1
d1227 1
d1232 1
d1237 41
d1310 1
d1347 1
d1478 29
d1548 1
d1553 1
d1599 1
d1604 1
d1609 29
d1670 1
d1707 1
d1822 1
d1865 1
d1961 1
d1999 1
d2063 1
d2107 1
d2132 29
d2214 1
d2219 1
d2277 1
d2282 1
d2342 1
d2382 1
d2387 29
d2475 1
d2480 1
d2544 1
d2549 1
d2598 1
d2647 1
d2652 29
d2740 1
d2745 1
d2809 1
d2814 1
d2863 1
d2912 1
d2955 1
d2998 1
d3036 1
d3074 1
d3140 1
d3186 1
d3224 1
d3262 1
d3439 29
d3534 3
a3536 1
    xcb_generic_iterator_t child = xcb_input_string_feedback_state_keysyms_end(R);
a3538 1
    i->index = child.index;
d3791 29
d3886 3
a3888 1
    xcb_generic_iterator_t child = xcb_input_string_feedback_ctl_keysyms_end(R);
a3890 1
    i->index = child.index;
d3991 29
d4058 1
d4101 1
d4178 29
d4250 1
d4255 1
d4303 1
d4308 1
d4313 29
d4375 1
d4413 1
d4490 29
d4557 1
d4562 1
d4605 1
d4610 1
d4635 29
d4697 1
d4735 1
d4812 29
d4879 1
d4884 1
d4927 1
d4932 1
d4990 1
d5028 1
d5167 29
d5262 3
a5264 1
    xcb_generic_iterator_t child = xcb_input_valuator_state_valuators_end(R);
a5266 1
    i->index = child.index;
d5291 41
d5381 1
d5386 1
d5391 1
d5445 1
d5450 1
d5455 1
d5501 1
d5547 1
d5552 29
d5622 1
d5627 1
d5673 1
d5678 1
d5739 1
d5780 1
d5843 53
d6070 3
a6072 1
    xcb_generic_iterator_t child = xcb_input_device_resolution_state_resolution_max_end(R);
a6074 1
    i->index = child.index;
d6289 29
d6384 3
a6386 1
    xcb_generic_iterator_t child = xcb_input_device_resolution_ctl_resolution_values_end(R);
a6388 1
    i->index = child.index;
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
