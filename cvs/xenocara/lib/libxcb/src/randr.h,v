head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from randr.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_RandR_API XCB RandR API
 * @@brief RandR XCB Protocol Implementation.
 * @@{
 **/

#ifndef __RANDR_H
#define __RANDR_H

#include "xcb.h"
#include "xproto.h"
#include "render.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_RANDR_MAJOR_VERSION 1
#define XCB_RANDR_MINOR_VERSION 5

extern xcb_extension_t xcb_randr_id;

typedef uint32_t xcb_randr_mode_t;

/**
 * @@brief xcb_randr_mode_iterator_t
 **/
typedef struct xcb_randr_mode_iterator_t {
    xcb_randr_mode_t *data;
    int               rem;
    int               index;
} xcb_randr_mode_iterator_t;

typedef uint32_t xcb_randr_crtc_t;

/**
 * @@brief xcb_randr_crtc_iterator_t
 **/
typedef struct xcb_randr_crtc_iterator_t {
    xcb_randr_crtc_t *data;
    int               rem;
    int               index;
} xcb_randr_crtc_iterator_t;

typedef uint32_t xcb_randr_output_t;

/**
 * @@brief xcb_randr_output_iterator_t
 **/
typedef struct xcb_randr_output_iterator_t {
    xcb_randr_output_t *data;
    int                 rem;
    int                 index;
} xcb_randr_output_iterator_t;

typedef uint32_t xcb_randr_provider_t;

/**
 * @@brief xcb_randr_provider_iterator_t
 **/
typedef struct xcb_randr_provider_iterator_t {
    xcb_randr_provider_t *data;
    int                   rem;
    int                   index;
} xcb_randr_provider_iterator_t;

/** Opcode for xcb_randr_bad_output. */
#define XCB_RANDR_BAD_OUTPUT 0

/**
 * @@brief xcb_randr_bad_output_error_t
 **/
typedef struct xcb_randr_bad_output_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_randr_bad_output_error_t;

/** Opcode for xcb_randr_bad_crtc. */
#define XCB_RANDR_BAD_CRTC 1

/**
 * @@brief xcb_randr_bad_crtc_error_t
 **/
typedef struct xcb_randr_bad_crtc_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_randr_bad_crtc_error_t;

/** Opcode for xcb_randr_bad_mode. */
#define XCB_RANDR_BAD_MODE 2

/**
 * @@brief xcb_randr_bad_mode_error_t
 **/
typedef struct xcb_randr_bad_mode_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_randr_bad_mode_error_t;

/** Opcode for xcb_randr_bad_provider. */
#define XCB_RANDR_BAD_PROVIDER 3

/**
 * @@brief xcb_randr_bad_provider_error_t
 **/
typedef struct xcb_randr_bad_provider_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_randr_bad_provider_error_t;

typedef enum xcb_randr_rotation_t {
    XCB_RANDR_ROTATION_ROTATE_0 = 1,
    XCB_RANDR_ROTATION_ROTATE_90 = 2,
    XCB_RANDR_ROTATION_ROTATE_180 = 4,
    XCB_RANDR_ROTATION_ROTATE_270 = 8,
    XCB_RANDR_ROTATION_REFLECT_X = 16,
    XCB_RANDR_ROTATION_REFLECT_Y = 32
} xcb_randr_rotation_t;

/**
 * @@brief xcb_randr_screen_size_t
 **/
typedef struct xcb_randr_screen_size_t {
    uint16_t width;
    uint16_t height;
    uint16_t mwidth;
    uint16_t mheight;
} xcb_randr_screen_size_t;

/**
 * @@brief xcb_randr_screen_size_iterator_t
 **/
typedef struct xcb_randr_screen_size_iterator_t {
    xcb_randr_screen_size_t *data;
    int                      rem;
    int                      index;
} xcb_randr_screen_size_iterator_t;

/**
 * @@brief xcb_randr_refresh_rates_t
 **/
typedef struct xcb_randr_refresh_rates_t {
    uint16_t nRates;
} xcb_randr_refresh_rates_t;

/**
 * @@brief xcb_randr_refresh_rates_iterator_t
 **/
typedef struct xcb_randr_refresh_rates_iterator_t {
    xcb_randr_refresh_rates_t *data;
    int                        rem;
    int                        index;
} xcb_randr_refresh_rates_iterator_t;

/**
 * @@brief xcb_randr_query_version_cookie_t
 **/
typedef struct xcb_randr_query_version_cookie_t {
    unsigned int sequence;
} xcb_randr_query_version_cookie_t;

/** Opcode for xcb_randr_query_version. */
#define XCB_RANDR_QUERY_VERSION 0

/**
 * @@brief xcb_randr_query_version_request_t
 **/
typedef struct xcb_randr_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_randr_query_version_request_t;

/**
 * @@brief xcb_randr_query_version_reply_t
 **/
typedef struct xcb_randr_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint8_t  pad1[16];
} xcb_randr_query_version_reply_t;

typedef enum xcb_randr_set_config_t {
    XCB_RANDR_SET_CONFIG_SUCCESS = 0,
    XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME = 1,
    XCB_RANDR_SET_CONFIG_INVALID_TIME = 2,
    XCB_RANDR_SET_CONFIG_FAILED = 3
} xcb_randr_set_config_t;

/**
 * @@brief xcb_randr_set_screen_config_cookie_t
 **/
typedef struct xcb_randr_set_screen_config_cookie_t {
    unsigned int sequence;
} xcb_randr_set_screen_config_cookie_t;

/** Opcode for xcb_randr_set_screen_config. */
#define XCB_RANDR_SET_SCREEN_CONFIG 2

/**
 * @@brief xcb_randr_set_screen_config_request_t
 **/
typedef struct xcb_randr_set_screen_config_request_t {
    uint8_t         major_opcode;
    uint8_t         minor_opcode;
    uint16_t        length;
    xcb_window_t    window;
    xcb_timestamp_t timestamp;
    xcb_timestamp_t config_timestamp;
    uint16_t        sizeID;
    uint16_t        rotation;
    uint16_t        rate;
    uint8_t         pad0[2];
} xcb_randr_set_screen_config_request_t;

/**
 * @@brief xcb_randr_set_screen_config_reply_t
 **/
typedef struct xcb_randr_set_screen_config_reply_t {
    uint8_t         response_type;
    uint8_t         status;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t new_timestamp;
    xcb_timestamp_t config_timestamp;
    xcb_window_t    root;
    uint16_t        subpixel_order;
    uint8_t         pad0[10];
} xcb_randr_set_screen_config_reply_t;

typedef enum xcb_randr_notify_mask_t {
    XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE = 1,
    XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE = 2,
    XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE = 4,
    XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY = 8,
    XCB_RANDR_NOTIFY_MASK_PROVIDER_CHANGE = 16,
    XCB_RANDR_NOTIFY_MASK_PROVIDER_PROPERTY = 32,
    XCB_RANDR_NOTIFY_MASK_RESOURCE_CHANGE = 64
} xcb_randr_notify_mask_t;

/** Opcode for xcb_randr_select_input. */
#define XCB_RANDR_SELECT_INPUT 4

/**
 * @@brief xcb_randr_select_input_request_t
 **/
typedef struct xcb_randr_select_input_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint16_t     enable;
    uint8_t      pad0[2];
} xcb_randr_select_input_request_t;

/**
 * @@brief xcb_randr_get_screen_info_cookie_t
 **/
typedef struct xcb_randr_get_screen_info_cookie_t {
    unsigned int sequence;
} xcb_randr_get_screen_info_cookie_t;

/** Opcode for xcb_randr_get_screen_info. */
#define XCB_RANDR_GET_SCREEN_INFO 5

/**
 * @@brief xcb_randr_get_screen_info_request_t
 **/
typedef struct xcb_randr_get_screen_info_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_screen_info_request_t;

/**
 * @@brief xcb_randr_get_screen_info_reply_t
 **/
typedef struct xcb_randr_get_screen_info_reply_t {
    uint8_t         response_type;
    uint8_t         rotations;
    uint16_t        sequence;
    uint32_t        length;
    xcb_window_t    root;
    xcb_timestamp_t timestamp;
    xcb_timestamp_t config_timestamp;
    uint16_t        nSizes;
    uint16_t        sizeID;
    uint16_t        rotation;
    uint16_t        rate;
    uint16_t        nInfo;
    uint8_t         pad0[2];
} xcb_randr_get_screen_info_reply_t;

/**
 * @@brief xcb_randr_get_screen_size_range_cookie_t
 **/
typedef struct xcb_randr_get_screen_size_range_cookie_t {
    unsigned int sequence;
} xcb_randr_get_screen_size_range_cookie_t;

/** Opcode for xcb_randr_get_screen_size_range. */
#define XCB_RANDR_GET_SCREEN_SIZE_RANGE 6

/**
 * @@brief xcb_randr_get_screen_size_range_request_t
 **/
typedef struct xcb_randr_get_screen_size_range_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_screen_size_range_request_t;

/**
 * @@brief xcb_randr_get_screen_size_range_reply_t
 **/
typedef struct xcb_randr_get_screen_size_range_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t min_width;
    uint16_t min_height;
    uint16_t max_width;
    uint16_t max_height;
    uint8_t  pad1[16];
} xcb_randr_get_screen_size_range_reply_t;

/** Opcode for xcb_randr_set_screen_size. */
#define XCB_RANDR_SET_SCREEN_SIZE 7

/**
 * @@brief xcb_randr_set_screen_size_request_t
 **/
typedef struct xcb_randr_set_screen_size_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint16_t     width;
    uint16_t     height;
    uint32_t     mm_width;
    uint32_t     mm_height;
} xcb_randr_set_screen_size_request_t;

typedef enum xcb_randr_mode_flag_t {
    XCB_RANDR_MODE_FLAG_HSYNC_POSITIVE = 1,
    XCB_RANDR_MODE_FLAG_HSYNC_NEGATIVE = 2,
    XCB_RANDR_MODE_FLAG_VSYNC_POSITIVE = 4,
    XCB_RANDR_MODE_FLAG_VSYNC_NEGATIVE = 8,
    XCB_RANDR_MODE_FLAG_INTERLACE = 16,
    XCB_RANDR_MODE_FLAG_DOUBLE_SCAN = 32,
    XCB_RANDR_MODE_FLAG_CSYNC = 64,
    XCB_RANDR_MODE_FLAG_CSYNC_POSITIVE = 128,
    XCB_RANDR_MODE_FLAG_CSYNC_NEGATIVE = 256,
    XCB_RANDR_MODE_FLAG_HSKEW_PRESENT = 512,
    XCB_RANDR_MODE_FLAG_BCAST = 1024,
    XCB_RANDR_MODE_FLAG_PIXEL_MULTIPLEX = 2048,
    XCB_RANDR_MODE_FLAG_DOUBLE_CLOCK = 4096,
    XCB_RANDR_MODE_FLAG_HALVE_CLOCK = 8192
} xcb_randr_mode_flag_t;

/**
 * @@brief xcb_randr_mode_info_t
 **/
typedef struct xcb_randr_mode_info_t {
    uint32_t id;
    uint16_t width;
    uint16_t height;
    uint32_t dot_clock;
    uint16_t hsync_start;
    uint16_t hsync_end;
    uint16_t htotal;
    uint16_t hskew;
    uint16_t vsync_start;
    uint16_t vsync_end;
    uint16_t vtotal;
    uint16_t name_len;
    uint32_t mode_flags;
} xcb_randr_mode_info_t;

/**
 * @@brief xcb_randr_mode_info_iterator_t
 **/
typedef struct xcb_randr_mode_info_iterator_t {
    xcb_randr_mode_info_t *data;
    int                    rem;
    int                    index;
} xcb_randr_mode_info_iterator_t;

/**
 * @@brief xcb_randr_get_screen_resources_cookie_t
 **/
typedef struct xcb_randr_get_screen_resources_cookie_t {
    unsigned int sequence;
} xcb_randr_get_screen_resources_cookie_t;

/** Opcode for xcb_randr_get_screen_resources. */
#define XCB_RANDR_GET_SCREEN_RESOURCES 8

/**
 * @@brief xcb_randr_get_screen_resources_request_t
 **/
typedef struct xcb_randr_get_screen_resources_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_screen_resources_request_t;

/**
 * @@brief xcb_randr_get_screen_resources_reply_t
 **/
typedef struct xcb_randr_get_screen_resources_reply_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    xcb_timestamp_t config_timestamp;
    uint16_t        num_crtcs;
    uint16_t        num_outputs;
    uint16_t        num_modes;
    uint16_t        names_len;
    uint8_t         pad1[8];
} xcb_randr_get_screen_resources_reply_t;

typedef enum xcb_randr_connection_t {
    XCB_RANDR_CONNECTION_CONNECTED = 0,
    XCB_RANDR_CONNECTION_DISCONNECTED = 1,
    XCB_RANDR_CONNECTION_UNKNOWN = 2
} xcb_randr_connection_t;

/**
 * @@brief xcb_randr_get_output_info_cookie_t
 **/
typedef struct xcb_randr_get_output_info_cookie_t {
    unsigned int sequence;
} xcb_randr_get_output_info_cookie_t;

/** Opcode for xcb_randr_get_output_info. */
#define XCB_RANDR_GET_OUTPUT_INFO 9

/**
 * @@brief xcb_randr_get_output_info_request_t
 **/
typedef struct xcb_randr_get_output_info_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_timestamp_t    config_timestamp;
} xcb_randr_get_output_info_request_t;

/**
 * @@brief xcb_randr_get_output_info_reply_t
 **/
typedef struct xcb_randr_get_output_info_reply_t {
    uint8_t          response_type;
    uint8_t          status;
    uint16_t         sequence;
    uint32_t         length;
    xcb_timestamp_t  timestamp;
    xcb_randr_crtc_t crtc;
    uint32_t         mm_width;
    uint32_t         mm_height;
    uint8_t          connection;
    uint8_t          subpixel_order;
    uint16_t         num_crtcs;
    uint16_t         num_modes;
    uint16_t         num_preferred;
    uint16_t         num_clones;
    uint16_t         name_len;
} xcb_randr_get_output_info_reply_t;

/**
 * @@brief xcb_randr_list_output_properties_cookie_t
 **/
typedef struct xcb_randr_list_output_properties_cookie_t {
    unsigned int sequence;
} xcb_randr_list_output_properties_cookie_t;

/** Opcode for xcb_randr_list_output_properties. */
#define XCB_RANDR_LIST_OUTPUT_PROPERTIES 10

/**
 * @@brief xcb_randr_list_output_properties_request_t
 **/
typedef struct xcb_randr_list_output_properties_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
} xcb_randr_list_output_properties_request_t;

/**
 * @@brief xcb_randr_list_output_properties_reply_t
 **/
typedef struct xcb_randr_list_output_properties_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_atoms;
    uint8_t  pad1[22];
} xcb_randr_list_output_properties_reply_t;

/**
 * @@brief xcb_randr_query_output_property_cookie_t
 **/
typedef struct xcb_randr_query_output_property_cookie_t {
    unsigned int sequence;
} xcb_randr_query_output_property_cookie_t;

/** Opcode for xcb_randr_query_output_property. */
#define XCB_RANDR_QUERY_OUTPUT_PROPERTY 11

/**
 * @@brief xcb_randr_query_output_property_request_t
 **/
typedef struct xcb_randr_query_output_property_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_atom_t         property;
} xcb_randr_query_output_property_request_t;

/**
 * @@brief xcb_randr_query_output_property_reply_t
 **/
typedef struct xcb_randr_query_output_property_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pending;
    uint8_t  range;
    uint8_t  immutable;
    uint8_t  pad1[21];
} xcb_randr_query_output_property_reply_t;

/** Opcode for xcb_randr_configure_output_property. */
#define XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY 12

/**
 * @@brief xcb_randr_configure_output_property_request_t
 **/
typedef struct xcb_randr_configure_output_property_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_atom_t         property;
    uint8_t            pending;
    uint8_t            range;
    uint8_t            pad0[2];
} xcb_randr_configure_output_property_request_t;

/** Opcode for xcb_randr_change_output_property. */
#define XCB_RANDR_CHANGE_OUTPUT_PROPERTY 13

/**
 * @@brief xcb_randr_change_output_property_request_t
 **/
typedef struct xcb_randr_change_output_property_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_atom_t         property;
    xcb_atom_t         type;
    uint8_t            format;
    uint8_t            mode;
    uint8_t            pad0[2];
    uint32_t           num_units;
} xcb_randr_change_output_property_request_t;

/** Opcode for xcb_randr_delete_output_property. */
#define XCB_RANDR_DELETE_OUTPUT_PROPERTY 14

/**
 * @@brief xcb_randr_delete_output_property_request_t
 **/
typedef struct xcb_randr_delete_output_property_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_atom_t         property;
} xcb_randr_delete_output_property_request_t;

/**
 * @@brief xcb_randr_get_output_property_cookie_t
 **/
typedef struct xcb_randr_get_output_property_cookie_t {
    unsigned int sequence;
} xcb_randr_get_output_property_cookie_t;

/** Opcode for xcb_randr_get_output_property. */
#define XCB_RANDR_GET_OUTPUT_PROPERTY 15

/**
 * @@brief xcb_randr_get_output_property_request_t
 **/
typedef struct xcb_randr_get_output_property_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_atom_t         property;
    xcb_atom_t         type;
    uint32_t           long_offset;
    uint32_t           long_length;
    uint8_t            _delete;
    uint8_t            pending;
    uint8_t            pad0[2];
} xcb_randr_get_output_property_request_t;

/**
 * @@brief xcb_randr_get_output_property_reply_t
 **/
typedef struct xcb_randr_get_output_property_reply_t {
    uint8_t    response_type;
    uint8_t    format;
    uint16_t   sequence;
    uint32_t   length;
    xcb_atom_t type;
    uint32_t   bytes_after;
    uint32_t   num_items;
    uint8_t    pad0[12];
} xcb_randr_get_output_property_reply_t;

/**
 * @@brief xcb_randr_create_mode_cookie_t
 **/
typedef struct xcb_randr_create_mode_cookie_t {
    unsigned int sequence;
} xcb_randr_create_mode_cookie_t;

/** Opcode for xcb_randr_create_mode. */
#define XCB_RANDR_CREATE_MODE 16

/**
 * @@brief xcb_randr_create_mode_request_t
 **/
typedef struct xcb_randr_create_mode_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_window_t          window;
    xcb_randr_mode_info_t mode_info;
} xcb_randr_create_mode_request_t;

/**
 * @@brief xcb_randr_create_mode_reply_t
 **/
typedef struct xcb_randr_create_mode_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_randr_mode_t mode;
    uint8_t          pad1[20];
} xcb_randr_create_mode_reply_t;

/** Opcode for xcb_randr_destroy_mode. */
#define XCB_RANDR_DESTROY_MODE 17

/**
 * @@brief xcb_randr_destroy_mode_request_t
 **/
typedef struct xcb_randr_destroy_mode_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_mode_t mode;
} xcb_randr_destroy_mode_request_t;

/** Opcode for xcb_randr_add_output_mode. */
#define XCB_RANDR_ADD_OUTPUT_MODE 18

/**
 * @@brief xcb_randr_add_output_mode_request_t
 **/
typedef struct xcb_randr_add_output_mode_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_randr_mode_t   mode;
} xcb_randr_add_output_mode_request_t;

/** Opcode for xcb_randr_delete_output_mode. */
#define XCB_RANDR_DELETE_OUTPUT_MODE 19

/**
 * @@brief xcb_randr_delete_output_mode_request_t
 **/
typedef struct xcb_randr_delete_output_mode_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_randr_output_t output;
    xcb_randr_mode_t   mode;
} xcb_randr_delete_output_mode_request_t;

/**
 * @@brief xcb_randr_get_crtc_info_cookie_t
 **/
typedef struct xcb_randr_get_crtc_info_cookie_t {
    unsigned int sequence;
} xcb_randr_get_crtc_info_cookie_t;

/** Opcode for xcb_randr_get_crtc_info. */
#define XCB_RANDR_GET_CRTC_INFO 20

/**
 * @@brief xcb_randr_get_crtc_info_request_t
 **/
typedef struct xcb_randr_get_crtc_info_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
    xcb_timestamp_t  config_timestamp;
} xcb_randr_get_crtc_info_request_t;

/**
 * @@brief xcb_randr_get_crtc_info_reply_t
 **/
typedef struct xcb_randr_get_crtc_info_reply_t {
    uint8_t          response_type;
    uint8_t          status;
    uint16_t         sequence;
    uint32_t         length;
    xcb_timestamp_t  timestamp;
    int16_t          x;
    int16_t          y;
    uint16_t         width;
    uint16_t         height;
    xcb_randr_mode_t mode;
    uint16_t         rotation;
    uint16_t         rotations;
    uint16_t         num_outputs;
    uint16_t         num_possible_outputs;
} xcb_randr_get_crtc_info_reply_t;

/**
 * @@brief xcb_randr_set_crtc_config_cookie_t
 **/
typedef struct xcb_randr_set_crtc_config_cookie_t {
    unsigned int sequence;
} xcb_randr_set_crtc_config_cookie_t;

/** Opcode for xcb_randr_set_crtc_config. */
#define XCB_RANDR_SET_CRTC_CONFIG 21

/**
 * @@brief xcb_randr_set_crtc_config_request_t
 **/
typedef struct xcb_randr_set_crtc_config_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
    xcb_timestamp_t  timestamp;
    xcb_timestamp_t  config_timestamp;
    int16_t          x;
    int16_t          y;
    xcb_randr_mode_t mode;
    uint16_t         rotation;
    uint8_t          pad0[2];
} xcb_randr_set_crtc_config_request_t;

/**
 * @@brief xcb_randr_set_crtc_config_reply_t
 **/
typedef struct xcb_randr_set_crtc_config_reply_t {
    uint8_t         response_type;
    uint8_t         status;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    uint8_t         pad0[20];
} xcb_randr_set_crtc_config_reply_t;

/**
 * @@brief xcb_randr_get_crtc_gamma_size_cookie_t
 **/
typedef struct xcb_randr_get_crtc_gamma_size_cookie_t {
    unsigned int sequence;
} xcb_randr_get_crtc_gamma_size_cookie_t;

/** Opcode for xcb_randr_get_crtc_gamma_size. */
#define XCB_RANDR_GET_CRTC_GAMMA_SIZE 22

/**
 * @@brief xcb_randr_get_crtc_gamma_size_request_t
 **/
typedef struct xcb_randr_get_crtc_gamma_size_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
} xcb_randr_get_crtc_gamma_size_request_t;

/**
 * @@brief xcb_randr_get_crtc_gamma_size_reply_t
 **/
typedef struct xcb_randr_get_crtc_gamma_size_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t size;
    uint8_t  pad1[22];
} xcb_randr_get_crtc_gamma_size_reply_t;

/**
 * @@brief xcb_randr_get_crtc_gamma_cookie_t
 **/
typedef struct xcb_randr_get_crtc_gamma_cookie_t {
    unsigned int sequence;
} xcb_randr_get_crtc_gamma_cookie_t;

/** Opcode for xcb_randr_get_crtc_gamma. */
#define XCB_RANDR_GET_CRTC_GAMMA 23

/**
 * @@brief xcb_randr_get_crtc_gamma_request_t
 **/
typedef struct xcb_randr_get_crtc_gamma_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
} xcb_randr_get_crtc_gamma_request_t;

/**
 * @@brief xcb_randr_get_crtc_gamma_reply_t
 **/
typedef struct xcb_randr_get_crtc_gamma_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t size;
    uint8_t  pad1[22];
} xcb_randr_get_crtc_gamma_reply_t;

/** Opcode for xcb_randr_set_crtc_gamma. */
#define XCB_RANDR_SET_CRTC_GAMMA 24

/**
 * @@brief xcb_randr_set_crtc_gamma_request_t
 **/
typedef struct xcb_randr_set_crtc_gamma_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
    uint16_t         size;
    uint8_t          pad0[2];
} xcb_randr_set_crtc_gamma_request_t;

/**
 * @@brief xcb_randr_get_screen_resources_current_cookie_t
 **/
typedef struct xcb_randr_get_screen_resources_current_cookie_t {
    unsigned int sequence;
} xcb_randr_get_screen_resources_current_cookie_t;

/** Opcode for xcb_randr_get_screen_resources_current. */
#define XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT 25

/**
 * @@brief xcb_randr_get_screen_resources_current_request_t
 **/
typedef struct xcb_randr_get_screen_resources_current_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_screen_resources_current_request_t;

/**
 * @@brief xcb_randr_get_screen_resources_current_reply_t
 **/
typedef struct xcb_randr_get_screen_resources_current_reply_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    xcb_timestamp_t config_timestamp;
    uint16_t        num_crtcs;
    uint16_t        num_outputs;
    uint16_t        num_modes;
    uint16_t        names_len;
    uint8_t         pad1[8];
} xcb_randr_get_screen_resources_current_reply_t;

typedef enum xcb_randr_transform_t {
    XCB_RANDR_TRANSFORM_UNIT = 1,
    XCB_RANDR_TRANSFORM_SCALE_UP = 2,
    XCB_RANDR_TRANSFORM_SCALE_DOWN = 4,
    XCB_RANDR_TRANSFORM_PROJECTIVE = 8
} xcb_randr_transform_t;

/** Opcode for xcb_randr_set_crtc_transform. */
#define XCB_RANDR_SET_CRTC_TRANSFORM 26

/**
 * @@brief xcb_randr_set_crtc_transform_request_t
 **/
typedef struct xcb_randr_set_crtc_transform_request_t {
    uint8_t                major_opcode;
    uint8_t                minor_opcode;
    uint16_t               length;
    xcb_randr_crtc_t       crtc;
    xcb_render_transform_t transform;
    uint16_t               filter_len;
    uint8_t                pad0[2];
} xcb_randr_set_crtc_transform_request_t;

/**
 * @@brief xcb_randr_get_crtc_transform_cookie_t
 **/
typedef struct xcb_randr_get_crtc_transform_cookie_t {
    unsigned int sequence;
} xcb_randr_get_crtc_transform_cookie_t;

/** Opcode for xcb_randr_get_crtc_transform. */
#define XCB_RANDR_GET_CRTC_TRANSFORM 27

/**
 * @@brief xcb_randr_get_crtc_transform_request_t
 **/
typedef struct xcb_randr_get_crtc_transform_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
} xcb_randr_get_crtc_transform_request_t;

/**
 * @@brief xcb_randr_get_crtc_transform_reply_t
 **/
typedef struct xcb_randr_get_crtc_transform_reply_t {
    uint8_t                response_type;
    uint8_t                pad0;
    uint16_t               sequence;
    uint32_t               length;
    xcb_render_transform_t pending_transform;
    uint8_t                has_transforms;
    uint8_t                pad1[3];
    xcb_render_transform_t current_transform;
    uint8_t                pad2[4];
    uint16_t               pending_len;
    uint16_t               pending_nparams;
    uint16_t               current_len;
    uint16_t               current_nparams;
} xcb_randr_get_crtc_transform_reply_t;

/**
 * @@brief xcb_randr_get_panning_cookie_t
 **/
typedef struct xcb_randr_get_panning_cookie_t {
    unsigned int sequence;
} xcb_randr_get_panning_cookie_t;

/** Opcode for xcb_randr_get_panning. */
#define XCB_RANDR_GET_PANNING 28

/**
 * @@brief xcb_randr_get_panning_request_t
 **/
typedef struct xcb_randr_get_panning_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
} xcb_randr_get_panning_request_t;

/**
 * @@brief xcb_randr_get_panning_reply_t
 **/
typedef struct xcb_randr_get_panning_reply_t {
    uint8_t         response_type;
    uint8_t         status;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    uint16_t        left;
    uint16_t        top;
    uint16_t        width;
    uint16_t        height;
    uint16_t        track_left;
    uint16_t        track_top;
    uint16_t        track_width;
    uint16_t        track_height;
    int16_t         border_left;
    int16_t         border_top;
    int16_t         border_right;
    int16_t         border_bottom;
} xcb_randr_get_panning_reply_t;

/**
 * @@brief xcb_randr_set_panning_cookie_t
 **/
typedef struct xcb_randr_set_panning_cookie_t {
    unsigned int sequence;
} xcb_randr_set_panning_cookie_t;

/** Opcode for xcb_randr_set_panning. */
#define XCB_RANDR_SET_PANNING 29

/**
 * @@brief xcb_randr_set_panning_request_t
 **/
typedef struct xcb_randr_set_panning_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_randr_crtc_t crtc;
    xcb_timestamp_t  timestamp;
    uint16_t         left;
    uint16_t         top;
    uint16_t         width;
    uint16_t         height;
    uint16_t         track_left;
    uint16_t         track_top;
    uint16_t         track_width;
    uint16_t         track_height;
    int16_t          border_left;
    int16_t          border_top;
    int16_t          border_right;
    int16_t          border_bottom;
} xcb_randr_set_panning_request_t;

/**
 * @@brief xcb_randr_set_panning_reply_t
 **/
typedef struct xcb_randr_set_panning_reply_t {
    uint8_t         response_type;
    uint8_t         status;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
} xcb_randr_set_panning_reply_t;

/** Opcode for xcb_randr_set_output_primary. */
#define XCB_RANDR_SET_OUTPUT_PRIMARY 30

/**
 * @@brief xcb_randr_set_output_primary_request_t
 **/
typedef struct xcb_randr_set_output_primary_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_window_t       window;
    xcb_randr_output_t output;
} xcb_randr_set_output_primary_request_t;

/**
 * @@brief xcb_randr_get_output_primary_cookie_t
 **/
typedef struct xcb_randr_get_output_primary_cookie_t {
    unsigned int sequence;
} xcb_randr_get_output_primary_cookie_t;

/** Opcode for xcb_randr_get_output_primary. */
#define XCB_RANDR_GET_OUTPUT_PRIMARY 31

/**
 * @@brief xcb_randr_get_output_primary_request_t
 **/
typedef struct xcb_randr_get_output_primary_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_output_primary_request_t;

/**
 * @@brief xcb_randr_get_output_primary_reply_t
 **/
typedef struct xcb_randr_get_output_primary_reply_t {
    uint8_t            response_type;
    uint8_t            pad0;
    uint16_t           sequence;
    uint32_t           length;
    xcb_randr_output_t output;
} xcb_randr_get_output_primary_reply_t;

/**
 * @@brief xcb_randr_get_providers_cookie_t
 **/
typedef struct xcb_randr_get_providers_cookie_t {
    unsigned int sequence;
} xcb_randr_get_providers_cookie_t;

/** Opcode for xcb_randr_get_providers. */
#define XCB_RANDR_GET_PROVIDERS 32

/**
 * @@brief xcb_randr_get_providers_request_t
 **/
typedef struct xcb_randr_get_providers_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_get_providers_request_t;

/**
 * @@brief xcb_randr_get_providers_reply_t
 **/
typedef struct xcb_randr_get_providers_reply_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    uint16_t        num_providers;
    uint8_t         pad1[18];
} xcb_randr_get_providers_reply_t;

typedef enum xcb_randr_provider_capability_t {
    XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OUTPUT = 1,
    XCB_RANDR_PROVIDER_CAPABILITY_SINK_OUTPUT = 2,
    XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OFFLOAD = 4,
    XCB_RANDR_PROVIDER_CAPABILITY_SINK_OFFLOAD = 8
} xcb_randr_provider_capability_t;

/**
 * @@brief xcb_randr_get_provider_info_cookie_t
 **/
typedef struct xcb_randr_get_provider_info_cookie_t {
    unsigned int sequence;
} xcb_randr_get_provider_info_cookie_t;

/** Opcode for xcb_randr_get_provider_info. */
#define XCB_RANDR_GET_PROVIDER_INFO 33

/**
 * @@brief xcb_randr_get_provider_info_request_t
 **/
typedef struct xcb_randr_get_provider_info_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_timestamp_t      config_timestamp;
} xcb_randr_get_provider_info_request_t;

/**
 * @@brief xcb_randr_get_provider_info_reply_t
 **/
typedef struct xcb_randr_get_provider_info_reply_t {
    uint8_t         response_type;
    uint8_t         status;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    uint32_t        capabilities;
    uint16_t        num_crtcs;
    uint16_t        num_outputs;
    uint16_t        num_associated_providers;
    uint16_t        name_len;
    uint8_t         pad0[8];
} xcb_randr_get_provider_info_reply_t;

/** Opcode for xcb_randr_set_provider_offload_sink. */
#define XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK 34

/**
 * @@brief xcb_randr_set_provider_offload_sink_request_t
 **/
typedef struct xcb_randr_set_provider_offload_sink_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_randr_provider_t sink_provider;
    xcb_timestamp_t      config_timestamp;
} xcb_randr_set_provider_offload_sink_request_t;

/** Opcode for xcb_randr_set_provider_output_source. */
#define XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE 35

/**
 * @@brief xcb_randr_set_provider_output_source_request_t
 **/
typedef struct xcb_randr_set_provider_output_source_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_randr_provider_t source_provider;
    xcb_timestamp_t      config_timestamp;
} xcb_randr_set_provider_output_source_request_t;

/**
 * @@brief xcb_randr_list_provider_properties_cookie_t
 **/
typedef struct xcb_randr_list_provider_properties_cookie_t {
    unsigned int sequence;
} xcb_randr_list_provider_properties_cookie_t;

/** Opcode for xcb_randr_list_provider_properties. */
#define XCB_RANDR_LIST_PROVIDER_PROPERTIES 36

/**
 * @@brief xcb_randr_list_provider_properties_request_t
 **/
typedef struct xcb_randr_list_provider_properties_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
} xcb_randr_list_provider_properties_request_t;

/**
 * @@brief xcb_randr_list_provider_properties_reply_t
 **/
typedef struct xcb_randr_list_provider_properties_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t num_atoms;
    uint8_t  pad1[22];
} xcb_randr_list_provider_properties_reply_t;

/**
 * @@brief xcb_randr_query_provider_property_cookie_t
 **/
typedef struct xcb_randr_query_provider_property_cookie_t {
    unsigned int sequence;
} xcb_randr_query_provider_property_cookie_t;

/** Opcode for xcb_randr_query_provider_property. */
#define XCB_RANDR_QUERY_PROVIDER_PROPERTY 37

/**
 * @@brief xcb_randr_query_provider_property_request_t
 **/
typedef struct xcb_randr_query_provider_property_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_atom_t           property;
} xcb_randr_query_provider_property_request_t;

/**
 * @@brief xcb_randr_query_provider_property_reply_t
 **/
typedef struct xcb_randr_query_provider_property_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pending;
    uint8_t  range;
    uint8_t  immutable;
    uint8_t  pad1[21];
} xcb_randr_query_provider_property_reply_t;

/** Opcode for xcb_randr_configure_provider_property. */
#define XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY 38

/**
 * @@brief xcb_randr_configure_provider_property_request_t
 **/
typedef struct xcb_randr_configure_provider_property_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_atom_t           property;
    uint8_t              pending;
    uint8_t              range;
    uint8_t              pad0[2];
} xcb_randr_configure_provider_property_request_t;

/** Opcode for xcb_randr_change_provider_property. */
#define XCB_RANDR_CHANGE_PROVIDER_PROPERTY 39

/**
 * @@brief xcb_randr_change_provider_property_request_t
 **/
typedef struct xcb_randr_change_provider_property_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_atom_t           property;
    xcb_atom_t           type;
    uint8_t              format;
    uint8_t              mode;
    uint8_t              pad0[2];
    uint32_t             num_items;
} xcb_randr_change_provider_property_request_t;

/** Opcode for xcb_randr_delete_provider_property. */
#define XCB_RANDR_DELETE_PROVIDER_PROPERTY 40

/**
 * @@brief xcb_randr_delete_provider_property_request_t
 **/
typedef struct xcb_randr_delete_provider_property_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_atom_t           property;
} xcb_randr_delete_provider_property_request_t;

/**
 * @@brief xcb_randr_get_provider_property_cookie_t
 **/
typedef struct xcb_randr_get_provider_property_cookie_t {
    unsigned int sequence;
} xcb_randr_get_provider_property_cookie_t;

/** Opcode for xcb_randr_get_provider_property. */
#define XCB_RANDR_GET_PROVIDER_PROPERTY 41

/**
 * @@brief xcb_randr_get_provider_property_request_t
 **/
typedef struct xcb_randr_get_provider_property_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_randr_provider_t provider;
    xcb_atom_t           property;
    xcb_atom_t           type;
    uint32_t             long_offset;
    uint32_t             long_length;
    uint8_t              _delete;
    uint8_t              pending;
    uint8_t              pad0[2];
} xcb_randr_get_provider_property_request_t;

/**
 * @@brief xcb_randr_get_provider_property_reply_t
 **/
typedef struct xcb_randr_get_provider_property_reply_t {
    uint8_t    response_type;
    uint8_t    format;
    uint16_t   sequence;
    uint32_t   length;
    xcb_atom_t type;
    uint32_t   bytes_after;
    uint32_t   num_items;
    uint8_t    pad0[12];
} xcb_randr_get_provider_property_reply_t;

/** Opcode for xcb_randr_screen_change_notify. */
#define XCB_RANDR_SCREEN_CHANGE_NOTIFY 0

/**
 * @@brief xcb_randr_screen_change_notify_event_t
 **/
typedef struct xcb_randr_screen_change_notify_event_t {
    uint8_t         response_type;
    uint8_t         rotation;
    uint16_t        sequence;
    xcb_timestamp_t timestamp;
    xcb_timestamp_t config_timestamp;
    xcb_window_t    root;
    xcb_window_t    request_window;
    uint16_t        sizeID;
    uint16_t        subpixel_order;
    uint16_t        width;
    uint16_t        height;
    uint16_t        mwidth;
    uint16_t        mheight;
} xcb_randr_screen_change_notify_event_t;

typedef enum xcb_randr_notify_t {
    XCB_RANDR_NOTIFY_CRTC_CHANGE = 0,
    XCB_RANDR_NOTIFY_OUTPUT_CHANGE = 1,
    XCB_RANDR_NOTIFY_OUTPUT_PROPERTY = 2,
    XCB_RANDR_NOTIFY_PROVIDER_CHANGE = 3,
    XCB_RANDR_NOTIFY_PROVIDER_PROPERTY = 4,
    XCB_RANDR_NOTIFY_RESOURCE_CHANGE = 5
} xcb_randr_notify_t;

/**
 * @@brief xcb_randr_crtc_change_t
 **/
typedef struct xcb_randr_crtc_change_t {
    xcb_timestamp_t  timestamp;
    xcb_window_t     window;
    xcb_randr_crtc_t crtc;
    xcb_randr_mode_t mode;
    uint16_t         rotation;
    uint8_t          pad0[2];
    int16_t          x;
    int16_t          y;
    uint16_t         width;
    uint16_t         height;
} xcb_randr_crtc_change_t;

/**
 * @@brief xcb_randr_crtc_change_iterator_t
 **/
typedef struct xcb_randr_crtc_change_iterator_t {
    xcb_randr_crtc_change_t *data;
    int                      rem;
    int                      index;
} xcb_randr_crtc_change_iterator_t;

/**
 * @@brief xcb_randr_output_change_t
 **/
typedef struct xcb_randr_output_change_t {
    xcb_timestamp_t    timestamp;
    xcb_timestamp_t    config_timestamp;
    xcb_window_t       window;
    xcb_randr_output_t output;
    xcb_randr_crtc_t   crtc;
    xcb_randr_mode_t   mode;
    uint16_t           rotation;
    uint8_t            connection;
    uint8_t            subpixel_order;
} xcb_randr_output_change_t;

/**
 * @@brief xcb_randr_output_change_iterator_t
 **/
typedef struct xcb_randr_output_change_iterator_t {
    xcb_randr_output_change_t *data;
    int                        rem;
    int                        index;
} xcb_randr_output_change_iterator_t;

/**
 * @@brief xcb_randr_output_property_t
 **/
typedef struct xcb_randr_output_property_t {
    xcb_window_t       window;
    xcb_randr_output_t output;
    xcb_atom_t         atom;
    xcb_timestamp_t    timestamp;
    uint8_t            status;
    uint8_t            pad0[11];
} xcb_randr_output_property_t;

/**
 * @@brief xcb_randr_output_property_iterator_t
 **/
typedef struct xcb_randr_output_property_iterator_t {
    xcb_randr_output_property_t *data;
    int                          rem;
    int                          index;
} xcb_randr_output_property_iterator_t;

/**
 * @@brief xcb_randr_provider_change_t
 **/
typedef struct xcb_randr_provider_change_t {
    xcb_timestamp_t      timestamp;
    xcb_window_t         window;
    xcb_randr_provider_t provider;
    uint8_t              pad0[16];
} xcb_randr_provider_change_t;

/**
 * @@brief xcb_randr_provider_change_iterator_t
 **/
typedef struct xcb_randr_provider_change_iterator_t {
    xcb_randr_provider_change_t *data;
    int                          rem;
    int                          index;
} xcb_randr_provider_change_iterator_t;

/**
 * @@brief xcb_randr_provider_property_t
 **/
typedef struct xcb_randr_provider_property_t {
    xcb_window_t         window;
    xcb_randr_provider_t provider;
    xcb_atom_t           atom;
    xcb_timestamp_t      timestamp;
    uint8_t              state;
    uint8_t              pad0[11];
} xcb_randr_provider_property_t;

/**
 * @@brief xcb_randr_provider_property_iterator_t
 **/
typedef struct xcb_randr_provider_property_iterator_t {
    xcb_randr_provider_property_t *data;
    int                            rem;
    int                            index;
} xcb_randr_provider_property_iterator_t;

/**
 * @@brief xcb_randr_resource_change_t
 **/
typedef struct xcb_randr_resource_change_t {
    xcb_timestamp_t timestamp;
    xcb_window_t    window;
    uint8_t         pad0[20];
} xcb_randr_resource_change_t;

/**
 * @@brief xcb_randr_resource_change_iterator_t
 **/
typedef struct xcb_randr_resource_change_iterator_t {
    xcb_randr_resource_change_t *data;
    int                          rem;
    int                          index;
} xcb_randr_resource_change_iterator_t;

/**
 * @@brief xcb_randr_notify_data_t
 **/
typedef union xcb_randr_notify_data_t {
    xcb_randr_crtc_change_t       cc;
    xcb_randr_output_change_t     oc;
    xcb_randr_output_property_t   op;
    xcb_randr_provider_change_t   pc;
    xcb_randr_provider_property_t pp;
    xcb_randr_resource_change_t   rc;
} xcb_randr_notify_data_t;

/**
 * @@brief xcb_randr_notify_data_iterator_t
 **/
typedef struct xcb_randr_notify_data_iterator_t {
    xcb_randr_notify_data_t *data;
    int                      rem;
    int                      index;
} xcb_randr_notify_data_iterator_t;

/** Opcode for xcb_randr_notify. */
#define XCB_RANDR_NOTIFY 1

/**
 * @@brief xcb_randr_notify_event_t
 **/
typedef struct xcb_randr_notify_event_t {
    uint8_t                 response_type;
    uint8_t                 subCode;
    uint16_t                sequence;
    xcb_randr_notify_data_t u;
} xcb_randr_notify_event_t;

/**
 * @@brief xcb_randr_monitor_info_t
 **/
typedef struct xcb_randr_monitor_info_t {
    xcb_atom_t name;
    uint8_t    primary;
    uint8_t    automatic;
    uint16_t   nOutput;
    int16_t    x;
    int16_t    y;
    uint16_t   width;
    uint16_t   height;
    uint32_t   width_in_millimeters;
    uint32_t   height_in_millimeters;
} xcb_randr_monitor_info_t;

/**
 * @@brief xcb_randr_monitor_info_iterator_t
 **/
typedef struct xcb_randr_monitor_info_iterator_t {
    xcb_randr_monitor_info_t *data;
    int                       rem;
    int                       index;
} xcb_randr_monitor_info_iterator_t;

/**
 * @@brief xcb_randr_get_monitors_cookie_t
 **/
typedef struct xcb_randr_get_monitors_cookie_t {
    unsigned int sequence;
} xcb_randr_get_monitors_cookie_t;

/** Opcode for xcb_randr_get_monitors. */
#define XCB_RANDR_GET_MONITORS 42

/**
 * @@brief xcb_randr_get_monitors_request_t
 **/
typedef struct xcb_randr_get_monitors_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint8_t      get_active;
} xcb_randr_get_monitors_request_t;

/**
 * @@brief xcb_randr_get_monitors_reply_t
 **/
typedef struct xcb_randr_get_monitors_reply_t {
    uint8_t         response_type;
    uint8_t         pad0;
    uint16_t        sequence;
    uint32_t        length;
    xcb_timestamp_t timestamp;
    uint32_t        nMonitors;
    uint32_t        nOutputs;
    uint8_t         pad1[12];
} xcb_randr_get_monitors_reply_t;

/** Opcode for xcb_randr_set_monitor. */
#define XCB_RANDR_SET_MONITOR 43

/**
 * @@brief xcb_randr_set_monitor_request_t
 **/
typedef struct xcb_randr_set_monitor_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_randr_set_monitor_request_t;

/** Opcode for xcb_randr_delete_monitor. */
#define XCB_RANDR_DELETE_MONITOR 44

/**
 * @@brief xcb_randr_delete_monitor_request_t
 **/
typedef struct xcb_randr_delete_monitor_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    xcb_atom_t   name;
} xcb_randr_delete_monitor_request_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_mode_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_mode_t)
 */
void
xcb_randr_mode_next (xcb_randr_mode_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_mode_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_mode_end (xcb_randr_mode_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_crtc_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_crtc_t)
 */
void
xcb_randr_crtc_next (xcb_randr_crtc_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_crtc_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_crtc_end (xcb_randr_crtc_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_output_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_output_t)
 */
void
xcb_randr_output_next (xcb_randr_output_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_output_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_output_end (xcb_randr_output_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_provider_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_provider_t)
 */
void
xcb_randr_provider_next (xcb_randr_provider_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_provider_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_provider_end (xcb_randr_provider_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_screen_size_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_screen_size_t)
 */
void
xcb_randr_screen_size_next (xcb_randr_screen_size_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_screen_size_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_screen_size_end (xcb_randr_screen_size_iterator_t i);

int
xcb_randr_refresh_rates_sizeof (const void  *_buffer);

uint16_t *
xcb_randr_refresh_rates_rates (const xcb_randr_refresh_rates_t *R);

int
xcb_randr_refresh_rates_rates_length (const xcb_randr_refresh_rates_t *R);

xcb_generic_iterator_t
xcb_randr_refresh_rates_rates_end (const xcb_randr_refresh_rates_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_refresh_rates_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_refresh_rates_t)
 */
void
xcb_randr_refresh_rates_next (xcb_randr_refresh_rates_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_refresh_rates_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_refresh_rates_end (xcb_randr_refresh_rates_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_query_version_cookie_t
xcb_randr_query_version (xcb_connection_t *c,
                         uint32_t          major_version,
                         uint32_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_query_version_cookie_t
xcb_randr_query_version_unchecked (xcb_connection_t *c,
                                   uint32_t          major_version,
                                   uint32_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_query_version_reply_t *
xcb_randr_query_version_reply (xcb_connection_t                  *c,
                               xcb_randr_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_set_screen_config_cookie_t
xcb_randr_set_screen_config (xcb_connection_t *c,
                             xcb_window_t      window,
                             xcb_timestamp_t   timestamp,
                             xcb_timestamp_t   config_timestamp,
                             uint16_t          sizeID,
                             uint16_t          rotation,
                             uint16_t          rate);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_set_screen_config_cookie_t
xcb_randr_set_screen_config_unchecked (xcb_connection_t *c,
                                       xcb_window_t      window,
                                       xcb_timestamp_t   timestamp,
                                       xcb_timestamp_t   config_timestamp,
                                       uint16_t          sizeID,
                                       uint16_t          rotation,
                                       uint16_t          rate);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_set_screen_config_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_set_screen_config_reply_t *
xcb_randr_set_screen_config_reply (xcb_connection_t                      *c,
                                   xcb_randr_set_screen_config_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_select_input_checked (xcb_connection_t *c,
                                xcb_window_t      window,
                                uint16_t          enable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_select_input (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint16_t          enable);

int
xcb_randr_get_screen_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_screen_info_cookie_t
xcb_randr_get_screen_info (xcb_connection_t *c,
                           xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_screen_info_cookie_t
xcb_randr_get_screen_info_unchecked (xcb_connection_t *c,
                                     xcb_window_t      window);

xcb_randr_screen_size_t *
xcb_randr_get_screen_info_sizes (const xcb_randr_get_screen_info_reply_t *R);

int
xcb_randr_get_screen_info_sizes_length (const xcb_randr_get_screen_info_reply_t *R);

xcb_randr_screen_size_iterator_t
xcb_randr_get_screen_info_sizes_iterator (const xcb_randr_get_screen_info_reply_t *R);

int
xcb_randr_get_screen_info_rates_length (const xcb_randr_get_screen_info_reply_t *R);

xcb_randr_refresh_rates_iterator_t
xcb_randr_get_screen_info_rates_iterator (const xcb_randr_get_screen_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_screen_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_screen_info_reply_t *
xcb_randr_get_screen_info_reply (xcb_connection_t                    *c,
                                 xcb_randr_get_screen_info_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_screen_size_range_cookie_t
xcb_randr_get_screen_size_range (xcb_connection_t *c,
                                 xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_screen_size_range_cookie_t
xcb_randr_get_screen_size_range_unchecked (xcb_connection_t *c,
                                           xcb_window_t      window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_screen_size_range_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_screen_size_range_reply_t *
xcb_randr_get_screen_size_range_reply (xcb_connection_t                          *c,
                                       xcb_randr_get_screen_size_range_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_screen_size_checked (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   uint16_t          width,
                                   uint16_t          height,
                                   uint32_t          mm_width,
                                   uint32_t          mm_height);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_screen_size (xcb_connection_t *c,
                           xcb_window_t      window,
                           uint16_t          width,
                           uint16_t          height,
                           uint32_t          mm_width,
                           uint32_t          mm_height);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_mode_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_mode_info_t)
 */
void
xcb_randr_mode_info_next (xcb_randr_mode_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_mode_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_mode_info_end (xcb_randr_mode_info_iterator_t i);

int
xcb_randr_get_screen_resources_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_screen_resources_cookie_t
xcb_randr_get_screen_resources (xcb_connection_t *c,
                                xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_screen_resources_cookie_t
xcb_randr_get_screen_resources_unchecked (xcb_connection_t *c,
                                          xcb_window_t      window);

xcb_randr_crtc_t *
xcb_randr_get_screen_resources_crtcs (const xcb_randr_get_screen_resources_reply_t *R);

int
xcb_randr_get_screen_resources_crtcs_length (const xcb_randr_get_screen_resources_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_crtcs_end (const xcb_randr_get_screen_resources_reply_t *R);

xcb_randr_output_t *
xcb_randr_get_screen_resources_outputs (const xcb_randr_get_screen_resources_reply_t *R);

int
xcb_randr_get_screen_resources_outputs_length (const xcb_randr_get_screen_resources_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_outputs_end (const xcb_randr_get_screen_resources_reply_t *R);

xcb_randr_mode_info_t *
xcb_randr_get_screen_resources_modes (const xcb_randr_get_screen_resources_reply_t *R);

int
xcb_randr_get_screen_resources_modes_length (const xcb_randr_get_screen_resources_reply_t *R);

xcb_randr_mode_info_iterator_t
xcb_randr_get_screen_resources_modes_iterator (const xcb_randr_get_screen_resources_reply_t *R);

uint8_t *
xcb_randr_get_screen_resources_names (const xcb_randr_get_screen_resources_reply_t *R);

int
xcb_randr_get_screen_resources_names_length (const xcb_randr_get_screen_resources_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_names_end (const xcb_randr_get_screen_resources_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_screen_resources_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_screen_resources_reply_t *
xcb_randr_get_screen_resources_reply (xcb_connection_t                         *c,
                                      xcb_randr_get_screen_resources_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_randr_get_output_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_output_info_cookie_t
xcb_randr_get_output_info (xcb_connection_t   *c,
                           xcb_randr_output_t  output,
                           xcb_timestamp_t     config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_output_info_cookie_t
xcb_randr_get_output_info_unchecked (xcb_connection_t   *c,
                                     xcb_randr_output_t  output,
                                     xcb_timestamp_t     config_timestamp);

xcb_randr_crtc_t *
xcb_randr_get_output_info_crtcs (const xcb_randr_get_output_info_reply_t *R);

int
xcb_randr_get_output_info_crtcs_length (const xcb_randr_get_output_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_output_info_crtcs_end (const xcb_randr_get_output_info_reply_t *R);

xcb_randr_mode_t *
xcb_randr_get_output_info_modes (const xcb_randr_get_output_info_reply_t *R);

int
xcb_randr_get_output_info_modes_length (const xcb_randr_get_output_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_output_info_modes_end (const xcb_randr_get_output_info_reply_t *R);

xcb_randr_output_t *
xcb_randr_get_output_info_clones (const xcb_randr_get_output_info_reply_t *R);

int
xcb_randr_get_output_info_clones_length (const xcb_randr_get_output_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_output_info_clones_end (const xcb_randr_get_output_info_reply_t *R);

uint8_t *
xcb_randr_get_output_info_name (const xcb_randr_get_output_info_reply_t *R);

int
xcb_randr_get_output_info_name_length (const xcb_randr_get_output_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_output_info_name_end (const xcb_randr_get_output_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_output_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_output_info_reply_t *
xcb_randr_get_output_info_reply (xcb_connection_t                    *c,
                                 xcb_randr_get_output_info_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_randr_list_output_properties_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_list_output_properties_cookie_t
xcb_randr_list_output_properties (xcb_connection_t   *c,
                                  xcb_randr_output_t  output);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_list_output_properties_cookie_t
xcb_randr_list_output_properties_unchecked (xcb_connection_t   *c,
                                            xcb_randr_output_t  output);

xcb_atom_t *
xcb_randr_list_output_properties_atoms (const xcb_randr_list_output_properties_reply_t *R);

int
xcb_randr_list_output_properties_atoms_length (const xcb_randr_list_output_properties_reply_t *R);

xcb_generic_iterator_t
xcb_randr_list_output_properties_atoms_end (const xcb_randr_list_output_properties_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_list_output_properties_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_list_output_properties_reply_t *
xcb_randr_list_output_properties_reply (xcb_connection_t                           *c,
                                        xcb_randr_list_output_properties_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

int
xcb_randr_query_output_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_query_output_property_cookie_t
xcb_randr_query_output_property (xcb_connection_t   *c,
                                 xcb_randr_output_t  output,
                                 xcb_atom_t          property);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_query_output_property_cookie_t
xcb_randr_query_output_property_unchecked (xcb_connection_t   *c,
                                           xcb_randr_output_t  output,
                                           xcb_atom_t          property);

int32_t *
xcb_randr_query_output_property_valid_values (const xcb_randr_query_output_property_reply_t *R);

int
xcb_randr_query_output_property_valid_values_length (const xcb_randr_query_output_property_reply_t *R);

xcb_generic_iterator_t
xcb_randr_query_output_property_valid_values_end (const xcb_randr_query_output_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_query_output_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_query_output_property_reply_t *
xcb_randr_query_output_property_reply (xcb_connection_t                          *c,
                                       xcb_randr_query_output_property_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_randr_configure_output_property_sizeof (const void  *_buffer,
                                            uint32_t     values_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_configure_output_property_checked (xcb_connection_t   *c,
                                             xcb_randr_output_t  output,
                                             xcb_atom_t          property,
                                             uint8_t             pending,
                                             uint8_t             range,
                                             uint32_t            values_len,
                                             const int32_t      *values);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_configure_output_property (xcb_connection_t   *c,
                                     xcb_randr_output_t  output,
                                     xcb_atom_t          property,
                                     uint8_t             pending,
                                     uint8_t             range,
                                     uint32_t            values_len,
                                     const int32_t      *values);

int32_t *
xcb_randr_configure_output_property_values (const xcb_randr_configure_output_property_request_t *R);

int
xcb_randr_configure_output_property_values_length (const xcb_randr_configure_output_property_request_t *R);

xcb_generic_iterator_t
xcb_randr_configure_output_property_values_end (const xcb_randr_configure_output_property_request_t *R);

int
xcb_randr_change_output_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_change_output_property_checked (xcb_connection_t   *c,
                                          xcb_randr_output_t  output,
                                          xcb_atom_t          property,
                                          xcb_atom_t          type,
                                          uint8_t             format,
                                          uint8_t             mode,
                                          uint32_t            num_units,
                                          const void         *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_change_output_property (xcb_connection_t   *c,
                                  xcb_randr_output_t  output,
                                  xcb_atom_t          property,
                                  xcb_atom_t          type,
                                  uint8_t             format,
                                  uint8_t             mode,
                                  uint32_t            num_units,
                                  const void         *data);

void *
xcb_randr_change_output_property_data (const xcb_randr_change_output_property_request_t *R);

int
xcb_randr_change_output_property_data_length (const xcb_randr_change_output_property_request_t *R);

xcb_generic_iterator_t
xcb_randr_change_output_property_data_end (const xcb_randr_change_output_property_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_delete_output_property_checked (xcb_connection_t   *c,
                                          xcb_randr_output_t  output,
                                          xcb_atom_t          property);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_delete_output_property (xcb_connection_t   *c,
                                  xcb_randr_output_t  output,
                                  xcb_atom_t          property);

int
xcb_randr_get_output_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_output_property_cookie_t
xcb_randr_get_output_property (xcb_connection_t   *c,
                               xcb_randr_output_t  output,
                               xcb_atom_t          property,
                               xcb_atom_t          type,
                               uint32_t            long_offset,
                               uint32_t            long_length,
                               uint8_t             _delete,
                               uint8_t             pending);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_output_property_cookie_t
xcb_randr_get_output_property_unchecked (xcb_connection_t   *c,
                                         xcb_randr_output_t  output,
                                         xcb_atom_t          property,
                                         xcb_atom_t          type,
                                         uint32_t            long_offset,
                                         uint32_t            long_length,
                                         uint8_t             _delete,
                                         uint8_t             pending);

uint8_t *
xcb_randr_get_output_property_data (const xcb_randr_get_output_property_reply_t *R);

int
xcb_randr_get_output_property_data_length (const xcb_randr_get_output_property_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_output_property_data_end (const xcb_randr_get_output_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_output_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_output_property_reply_t *
xcb_randr_get_output_property_reply (xcb_connection_t                        *c,
                                     xcb_randr_get_output_property_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_randr_create_mode_sizeof (const void  *_buffer,
                              uint32_t     name_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_create_mode_cookie_t
xcb_randr_create_mode (xcb_connection_t      *c,
                       xcb_window_t           window,
                       xcb_randr_mode_info_t  mode_info,
                       uint32_t               name_len,
                       const char            *name);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_create_mode_cookie_t
xcb_randr_create_mode_unchecked (xcb_connection_t      *c,
                                 xcb_window_t           window,
                                 xcb_randr_mode_info_t  mode_info,
                                 uint32_t               name_len,
                                 const char            *name);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_create_mode_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_create_mode_reply_t *
xcb_randr_create_mode_reply (xcb_connection_t                *c,
                             xcb_randr_create_mode_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_destroy_mode_checked (xcb_connection_t *c,
                                xcb_randr_mode_t  mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_destroy_mode (xcb_connection_t *c,
                        xcb_randr_mode_t  mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_add_output_mode_checked (xcb_connection_t   *c,
                                   xcb_randr_output_t  output,
                                   xcb_randr_mode_t    mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_add_output_mode (xcb_connection_t   *c,
                           xcb_randr_output_t  output,
                           xcb_randr_mode_t    mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_delete_output_mode_checked (xcb_connection_t   *c,
                                      xcb_randr_output_t  output,
                                      xcb_randr_mode_t    mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_delete_output_mode (xcb_connection_t   *c,
                              xcb_randr_output_t  output,
                              xcb_randr_mode_t    mode);

int
xcb_randr_get_crtc_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_crtc_info_cookie_t
xcb_randr_get_crtc_info (xcb_connection_t *c,
                         xcb_randr_crtc_t  crtc,
                         xcb_timestamp_t   config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_crtc_info_cookie_t
xcb_randr_get_crtc_info_unchecked (xcb_connection_t *c,
                                   xcb_randr_crtc_t  crtc,
                                   xcb_timestamp_t   config_timestamp);

xcb_randr_output_t *
xcb_randr_get_crtc_info_outputs (const xcb_randr_get_crtc_info_reply_t *R);

int
xcb_randr_get_crtc_info_outputs_length (const xcb_randr_get_crtc_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_info_outputs_end (const xcb_randr_get_crtc_info_reply_t *R);

xcb_randr_output_t *
xcb_randr_get_crtc_info_possible (const xcb_randr_get_crtc_info_reply_t *R);

int
xcb_randr_get_crtc_info_possible_length (const xcb_randr_get_crtc_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_info_possible_end (const xcb_randr_get_crtc_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_crtc_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_crtc_info_reply_t *
xcb_randr_get_crtc_info_reply (xcb_connection_t                  *c,
                               xcb_randr_get_crtc_info_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_randr_set_crtc_config_sizeof (const void  *_buffer,
                                  uint32_t     outputs_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_set_crtc_config_cookie_t
xcb_randr_set_crtc_config (xcb_connection_t         *c,
                           xcb_randr_crtc_t          crtc,
                           xcb_timestamp_t           timestamp,
                           xcb_timestamp_t           config_timestamp,
                           int16_t                   x,
                           int16_t                   y,
                           xcb_randr_mode_t          mode,
                           uint16_t                  rotation,
                           uint32_t                  outputs_len,
                           const xcb_randr_output_t *outputs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_set_crtc_config_cookie_t
xcb_randr_set_crtc_config_unchecked (xcb_connection_t         *c,
                                     xcb_randr_crtc_t          crtc,
                                     xcb_timestamp_t           timestamp,
                                     xcb_timestamp_t           config_timestamp,
                                     int16_t                   x,
                                     int16_t                   y,
                                     xcb_randr_mode_t          mode,
                                     uint16_t                  rotation,
                                     uint32_t                  outputs_len,
                                     const xcb_randr_output_t *outputs);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_set_crtc_config_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_set_crtc_config_reply_t *
xcb_randr_set_crtc_config_reply (xcb_connection_t                    *c,
                                 xcb_randr_set_crtc_config_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_crtc_gamma_size_cookie_t
xcb_randr_get_crtc_gamma_size (xcb_connection_t *c,
                               xcb_randr_crtc_t  crtc);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_crtc_gamma_size_cookie_t
xcb_randr_get_crtc_gamma_size_unchecked (xcb_connection_t *c,
                                         xcb_randr_crtc_t  crtc);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_crtc_gamma_size_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_crtc_gamma_size_reply_t *
xcb_randr_get_crtc_gamma_size_reply (xcb_connection_t                        *c,
                                     xcb_randr_get_crtc_gamma_size_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_randr_get_crtc_gamma_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_crtc_gamma_cookie_t
xcb_randr_get_crtc_gamma (xcb_connection_t *c,
                          xcb_randr_crtc_t  crtc);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_crtc_gamma_cookie_t
xcb_randr_get_crtc_gamma_unchecked (xcb_connection_t *c,
                                    xcb_randr_crtc_t  crtc);

uint16_t *
xcb_randr_get_crtc_gamma_red (const xcb_randr_get_crtc_gamma_reply_t *R);

int
xcb_randr_get_crtc_gamma_red_length (const xcb_randr_get_crtc_gamma_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_red_end (const xcb_randr_get_crtc_gamma_reply_t *R);

uint16_t *
xcb_randr_get_crtc_gamma_green (const xcb_randr_get_crtc_gamma_reply_t *R);

int
xcb_randr_get_crtc_gamma_green_length (const xcb_randr_get_crtc_gamma_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_green_end (const xcb_randr_get_crtc_gamma_reply_t *R);

uint16_t *
xcb_randr_get_crtc_gamma_blue (const xcb_randr_get_crtc_gamma_reply_t *R);

int
xcb_randr_get_crtc_gamma_blue_length (const xcb_randr_get_crtc_gamma_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_blue_end (const xcb_randr_get_crtc_gamma_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_crtc_gamma_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_crtc_gamma_reply_t *
xcb_randr_get_crtc_gamma_reply (xcb_connection_t                   *c,
                                xcb_randr_get_crtc_gamma_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_randr_set_crtc_gamma_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_crtc_gamma_checked (xcb_connection_t *c,
                                  xcb_randr_crtc_t  crtc,
                                  uint16_t          size,
                                  const uint16_t   *red,
                                  const uint16_t   *green,
                                  const uint16_t   *blue);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_crtc_gamma (xcb_connection_t *c,
                          xcb_randr_crtc_t  crtc,
                          uint16_t          size,
                          const uint16_t   *red,
                          const uint16_t   *green,
                          const uint16_t   *blue);

uint16_t *
xcb_randr_set_crtc_gamma_red (const xcb_randr_set_crtc_gamma_request_t *R);

int
xcb_randr_set_crtc_gamma_red_length (const xcb_randr_set_crtc_gamma_request_t *R);

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_red_end (const xcb_randr_set_crtc_gamma_request_t *R);

uint16_t *
xcb_randr_set_crtc_gamma_green (const xcb_randr_set_crtc_gamma_request_t *R);

int
xcb_randr_set_crtc_gamma_green_length (const xcb_randr_set_crtc_gamma_request_t *R);

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_green_end (const xcb_randr_set_crtc_gamma_request_t *R);

uint16_t *
xcb_randr_set_crtc_gamma_blue (const xcb_randr_set_crtc_gamma_request_t *R);

int
xcb_randr_set_crtc_gamma_blue_length (const xcb_randr_set_crtc_gamma_request_t *R);

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_blue_end (const xcb_randr_set_crtc_gamma_request_t *R);

int
xcb_randr_get_screen_resources_current_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_screen_resources_current_cookie_t
xcb_randr_get_screen_resources_current (xcb_connection_t *c,
                                        xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_screen_resources_current_cookie_t
xcb_randr_get_screen_resources_current_unchecked (xcb_connection_t *c,
                                                  xcb_window_t      window);

xcb_randr_crtc_t *
xcb_randr_get_screen_resources_current_crtcs (const xcb_randr_get_screen_resources_current_reply_t *R);

int
xcb_randr_get_screen_resources_current_crtcs_length (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_crtcs_end (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_randr_output_t *
xcb_randr_get_screen_resources_current_outputs (const xcb_randr_get_screen_resources_current_reply_t *R);

int
xcb_randr_get_screen_resources_current_outputs_length (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_outputs_end (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_randr_mode_info_t *
xcb_randr_get_screen_resources_current_modes (const xcb_randr_get_screen_resources_current_reply_t *R);

int
xcb_randr_get_screen_resources_current_modes_length (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_randr_mode_info_iterator_t
xcb_randr_get_screen_resources_current_modes_iterator (const xcb_randr_get_screen_resources_current_reply_t *R);

uint8_t *
xcb_randr_get_screen_resources_current_names (const xcb_randr_get_screen_resources_current_reply_t *R);

int
xcb_randr_get_screen_resources_current_names_length (const xcb_randr_get_screen_resources_current_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_names_end (const xcb_randr_get_screen_resources_current_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_screen_resources_current_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_screen_resources_current_reply_t *
xcb_randr_get_screen_resources_current_reply (xcb_connection_t                                 *c,
                                              xcb_randr_get_screen_resources_current_cookie_t   cookie  /**< */,
                                              xcb_generic_error_t                             **e);

int
xcb_randr_set_crtc_transform_sizeof (const void  *_buffer,
                                     uint32_t     filter_params_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_crtc_transform_checked (xcb_connection_t         *c,
                                      xcb_randr_crtc_t          crtc,
                                      xcb_render_transform_t    transform,
                                      uint16_t                  filter_len,
                                      const char               *filter_name,
                                      uint32_t                  filter_params_len,
                                      const xcb_render_fixed_t *filter_params);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_crtc_transform (xcb_connection_t         *c,
                              xcb_randr_crtc_t          crtc,
                              xcb_render_transform_t    transform,
                              uint16_t                  filter_len,
                              const char               *filter_name,
                              uint32_t                  filter_params_len,
                              const xcb_render_fixed_t *filter_params);

char *
xcb_randr_set_crtc_transform_filter_name (const xcb_randr_set_crtc_transform_request_t *R);

int
xcb_randr_set_crtc_transform_filter_name_length (const xcb_randr_set_crtc_transform_request_t *R);

xcb_generic_iterator_t
xcb_randr_set_crtc_transform_filter_name_end (const xcb_randr_set_crtc_transform_request_t *R);

xcb_render_fixed_t *
xcb_randr_set_crtc_transform_filter_params (const xcb_randr_set_crtc_transform_request_t *R);

int
xcb_randr_set_crtc_transform_filter_params_length (const xcb_randr_set_crtc_transform_request_t *R);

xcb_generic_iterator_t
xcb_randr_set_crtc_transform_filter_params_end (const xcb_randr_set_crtc_transform_request_t *R);

int
xcb_randr_get_crtc_transform_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_crtc_transform_cookie_t
xcb_randr_get_crtc_transform (xcb_connection_t *c,
                              xcb_randr_crtc_t  crtc);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_crtc_transform_cookie_t
xcb_randr_get_crtc_transform_unchecked (xcb_connection_t *c,
                                        xcb_randr_crtc_t  crtc);

char *
xcb_randr_get_crtc_transform_pending_filter_name (const xcb_randr_get_crtc_transform_reply_t *R);

int
xcb_randr_get_crtc_transform_pending_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_pending_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_render_fixed_t *
xcb_randr_get_crtc_transform_pending_params (const xcb_randr_get_crtc_transform_reply_t *R);

int
xcb_randr_get_crtc_transform_pending_params_length (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_pending_params_end (const xcb_randr_get_crtc_transform_reply_t *R);

char *
xcb_randr_get_crtc_transform_current_filter_name (const xcb_randr_get_crtc_transform_reply_t *R);

int
xcb_randr_get_crtc_transform_current_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_current_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_render_fixed_t *
xcb_randr_get_crtc_transform_current_params (const xcb_randr_get_crtc_transform_reply_t *R);

int
xcb_randr_get_crtc_transform_current_params_length (const xcb_randr_get_crtc_transform_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_current_params_end (const xcb_randr_get_crtc_transform_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_crtc_transform_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_crtc_transform_reply_t *
xcb_randr_get_crtc_transform_reply (xcb_connection_t                       *c,
                                    xcb_randr_get_crtc_transform_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_panning_cookie_t
xcb_randr_get_panning (xcb_connection_t *c,
                       xcb_randr_crtc_t  crtc);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_panning_cookie_t
xcb_randr_get_panning_unchecked (xcb_connection_t *c,
                                 xcb_randr_crtc_t  crtc);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_panning_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_panning_reply_t *
xcb_randr_get_panning_reply (xcb_connection_t                *c,
                             xcb_randr_get_panning_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_set_panning_cookie_t
xcb_randr_set_panning (xcb_connection_t *c,
                       xcb_randr_crtc_t  crtc,
                       xcb_timestamp_t   timestamp,
                       uint16_t          left,
                       uint16_t          top,
                       uint16_t          width,
                       uint16_t          height,
                       uint16_t          track_left,
                       uint16_t          track_top,
                       uint16_t          track_width,
                       uint16_t          track_height,
                       int16_t           border_left,
                       int16_t           border_top,
                       int16_t           border_right,
                       int16_t           border_bottom);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_set_panning_cookie_t
xcb_randr_set_panning_unchecked (xcb_connection_t *c,
                                 xcb_randr_crtc_t  crtc,
                                 xcb_timestamp_t   timestamp,
                                 uint16_t          left,
                                 uint16_t          top,
                                 uint16_t          width,
                                 uint16_t          height,
                                 uint16_t          track_left,
                                 uint16_t          track_top,
                                 uint16_t          track_width,
                                 uint16_t          track_height,
                                 int16_t           border_left,
                                 int16_t           border_top,
                                 int16_t           border_right,
                                 int16_t           border_bottom);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_set_panning_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_set_panning_reply_t *
xcb_randr_set_panning_reply (xcb_connection_t                *c,
                             xcb_randr_set_panning_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_output_primary_checked (xcb_connection_t   *c,
                                      xcb_window_t        window,
                                      xcb_randr_output_t  output);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_output_primary (xcb_connection_t   *c,
                              xcb_window_t        window,
                              xcb_randr_output_t  output);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_output_primary_cookie_t
xcb_randr_get_output_primary (xcb_connection_t *c,
                              xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_output_primary_cookie_t
xcb_randr_get_output_primary_unchecked (xcb_connection_t *c,
                                        xcb_window_t      window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_output_primary_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_output_primary_reply_t *
xcb_randr_get_output_primary_reply (xcb_connection_t                       *c,
                                    xcb_randr_get_output_primary_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_randr_get_providers_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_providers_cookie_t
xcb_randr_get_providers (xcb_connection_t *c,
                         xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_providers_cookie_t
xcb_randr_get_providers_unchecked (xcb_connection_t *c,
                                   xcb_window_t      window);

xcb_randr_provider_t *
xcb_randr_get_providers_providers (const xcb_randr_get_providers_reply_t *R);

int
xcb_randr_get_providers_providers_length (const xcb_randr_get_providers_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_providers_providers_end (const xcb_randr_get_providers_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_providers_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_providers_reply_t *
xcb_randr_get_providers_reply (xcb_connection_t                  *c,
                               xcb_randr_get_providers_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_randr_get_provider_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_provider_info_cookie_t
xcb_randr_get_provider_info (xcb_connection_t     *c,
                             xcb_randr_provider_t  provider,
                             xcb_timestamp_t       config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_provider_info_cookie_t
xcb_randr_get_provider_info_unchecked (xcb_connection_t     *c,
                                       xcb_randr_provider_t  provider,
                                       xcb_timestamp_t       config_timestamp);

xcb_randr_crtc_t *
xcb_randr_get_provider_info_crtcs (const xcb_randr_get_provider_info_reply_t *R);

int
xcb_randr_get_provider_info_crtcs_length (const xcb_randr_get_provider_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_info_crtcs_end (const xcb_randr_get_provider_info_reply_t *R);

xcb_randr_output_t *
xcb_randr_get_provider_info_outputs (const xcb_randr_get_provider_info_reply_t *R);

int
xcb_randr_get_provider_info_outputs_length (const xcb_randr_get_provider_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_info_outputs_end (const xcb_randr_get_provider_info_reply_t *R);

xcb_randr_provider_t *
xcb_randr_get_provider_info_associated_providers (const xcb_randr_get_provider_info_reply_t *R);

int
xcb_randr_get_provider_info_associated_providers_length (const xcb_randr_get_provider_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_info_associated_providers_end (const xcb_randr_get_provider_info_reply_t *R);

uint32_t *
xcb_randr_get_provider_info_associated_capability (const xcb_randr_get_provider_info_reply_t *R);

int
xcb_randr_get_provider_info_associated_capability_length (const xcb_randr_get_provider_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_info_associated_capability_end (const xcb_randr_get_provider_info_reply_t *R);

char *
xcb_randr_get_provider_info_name (const xcb_randr_get_provider_info_reply_t *R);

int
xcb_randr_get_provider_info_name_length (const xcb_randr_get_provider_info_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_info_name_end (const xcb_randr_get_provider_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_provider_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_provider_info_reply_t *
xcb_randr_get_provider_info_reply (xcb_connection_t                      *c,
                                   xcb_randr_get_provider_info_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_provider_offload_sink_checked (xcb_connection_t     *c,
                                             xcb_randr_provider_t  provider,
                                             xcb_randr_provider_t  sink_provider,
                                             xcb_timestamp_t       config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_provider_offload_sink (xcb_connection_t     *c,
                                     xcb_randr_provider_t  provider,
                                     xcb_randr_provider_t  sink_provider,
                                     xcb_timestamp_t       config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_provider_output_source_checked (xcb_connection_t     *c,
                                              xcb_randr_provider_t  provider,
                                              xcb_randr_provider_t  source_provider,
                                              xcb_timestamp_t       config_timestamp);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_provider_output_source (xcb_connection_t     *c,
                                      xcb_randr_provider_t  provider,
                                      xcb_randr_provider_t  source_provider,
                                      xcb_timestamp_t       config_timestamp);

int
xcb_randr_list_provider_properties_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_list_provider_properties_cookie_t
xcb_randr_list_provider_properties (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_list_provider_properties_cookie_t
xcb_randr_list_provider_properties_unchecked (xcb_connection_t     *c,
                                              xcb_randr_provider_t  provider);

xcb_atom_t *
xcb_randr_list_provider_properties_atoms (const xcb_randr_list_provider_properties_reply_t *R);

int
xcb_randr_list_provider_properties_atoms_length (const xcb_randr_list_provider_properties_reply_t *R);

xcb_generic_iterator_t
xcb_randr_list_provider_properties_atoms_end (const xcb_randr_list_provider_properties_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_list_provider_properties_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_list_provider_properties_reply_t *
xcb_randr_list_provider_properties_reply (xcb_connection_t                             *c,
                                          xcb_randr_list_provider_properties_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e);

int
xcb_randr_query_provider_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_query_provider_property_cookie_t
xcb_randr_query_provider_property (xcb_connection_t     *c,
                                   xcb_randr_provider_t  provider,
                                   xcb_atom_t            property);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_query_provider_property_cookie_t
xcb_randr_query_provider_property_unchecked (xcb_connection_t     *c,
                                             xcb_randr_provider_t  provider,
                                             xcb_atom_t            property);

int32_t *
xcb_randr_query_provider_property_valid_values (const xcb_randr_query_provider_property_reply_t *R);

int
xcb_randr_query_provider_property_valid_values_length (const xcb_randr_query_provider_property_reply_t *R);

xcb_generic_iterator_t
xcb_randr_query_provider_property_valid_values_end (const xcb_randr_query_provider_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_query_provider_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_query_provider_property_reply_t *
xcb_randr_query_provider_property_reply (xcb_connection_t                            *c,
                                         xcb_randr_query_provider_property_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

int
xcb_randr_configure_provider_property_sizeof (const void  *_buffer,
                                              uint32_t     values_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_configure_provider_property_checked (xcb_connection_t     *c,
                                               xcb_randr_provider_t  provider,
                                               xcb_atom_t            property,
                                               uint8_t               pending,
                                               uint8_t               range,
                                               uint32_t              values_len,
                                               const int32_t        *values);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_configure_provider_property (xcb_connection_t     *c,
                                       xcb_randr_provider_t  provider,
                                       xcb_atom_t            property,
                                       uint8_t               pending,
                                       uint8_t               range,
                                       uint32_t              values_len,
                                       const int32_t        *values);

int32_t *
xcb_randr_configure_provider_property_values (const xcb_randr_configure_provider_property_request_t *R);

int
xcb_randr_configure_provider_property_values_length (const xcb_randr_configure_provider_property_request_t *R);

xcb_generic_iterator_t
xcb_randr_configure_provider_property_values_end (const xcb_randr_configure_provider_property_request_t *R);

int
xcb_randr_change_provider_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_change_provider_property_checked (xcb_connection_t     *c,
                                            xcb_randr_provider_t  provider,
                                            xcb_atom_t            property,
                                            xcb_atom_t            type,
                                            uint8_t               format,
                                            uint8_t               mode,
                                            uint32_t              num_items,
                                            const void           *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_change_provider_property (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider,
                                    xcb_atom_t            property,
                                    xcb_atom_t            type,
                                    uint8_t               format,
                                    uint8_t               mode,
                                    uint32_t              num_items,
                                    const void           *data);

void *
xcb_randr_change_provider_property_data (const xcb_randr_change_provider_property_request_t *R);

int
xcb_randr_change_provider_property_data_length (const xcb_randr_change_provider_property_request_t *R);

xcb_generic_iterator_t
xcb_randr_change_provider_property_data_end (const xcb_randr_change_provider_property_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_delete_provider_property_checked (xcb_connection_t     *c,
                                            xcb_randr_provider_t  provider,
                                            xcb_atom_t            property);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_delete_provider_property (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider,
                                    xcb_atom_t            property);

int
xcb_randr_get_provider_property_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_provider_property_cookie_t
xcb_randr_get_provider_property (xcb_connection_t     *c,
                                 xcb_randr_provider_t  provider,
                                 xcb_atom_t            property,
                                 xcb_atom_t            type,
                                 uint32_t              long_offset,
                                 uint32_t              long_length,
                                 uint8_t               _delete,
                                 uint8_t               pending);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_provider_property_cookie_t
xcb_randr_get_provider_property_unchecked (xcb_connection_t     *c,
                                           xcb_randr_provider_t  provider,
                                           xcb_atom_t            property,
                                           xcb_atom_t            type,
                                           uint32_t              long_offset,
                                           uint32_t              long_length,
                                           uint8_t               _delete,
                                           uint8_t               pending);

void *
xcb_randr_get_provider_property_data (const xcb_randr_get_provider_property_reply_t *R);

int
xcb_randr_get_provider_property_data_length (const xcb_randr_get_provider_property_reply_t *R);

xcb_generic_iterator_t
xcb_randr_get_provider_property_data_end (const xcb_randr_get_provider_property_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_provider_property_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_provider_property_reply_t *
xcb_randr_get_provider_property_reply (xcb_connection_t                          *c,
                                       xcb_randr_get_provider_property_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_crtc_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_crtc_change_t)
 */
void
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_crtc_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_output_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_output_change_t)
 */
void
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_output_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_output_property_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_output_property_t)
 */
void
xcb_randr_output_property_next (xcb_randr_output_property_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_output_property_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_output_property_end (xcb_randr_output_property_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_provider_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_provider_change_t)
 */
void
xcb_randr_provider_change_next (xcb_randr_provider_change_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_provider_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_provider_change_end (xcb_randr_provider_change_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_provider_property_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_provider_property_t)
 */
void
xcb_randr_provider_property_next (xcb_randr_provider_property_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_provider_property_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_provider_property_end (xcb_randr_provider_property_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_resource_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_resource_change_t)
 */
void
xcb_randr_resource_change_next (xcb_randr_resource_change_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_resource_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_resource_change_end (xcb_randr_resource_change_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_notify_data_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_notify_data_t)
 */
void
xcb_randr_notify_data_next (xcb_randr_notify_data_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_notify_data_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_notify_data_end (xcb_randr_notify_data_iterator_t i);

int
xcb_randr_monitor_info_sizeof (const void  *_buffer);

xcb_randr_output_t *
xcb_randr_monitor_info_outputs (const xcb_randr_monitor_info_t *R);

int
xcb_randr_monitor_info_outputs_length (const xcb_randr_monitor_info_t *R);

xcb_generic_iterator_t
xcb_randr_monitor_info_outputs_end (const xcb_randr_monitor_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_monitor_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_monitor_info_t)
 */
void
xcb_randr_monitor_info_next (xcb_randr_monitor_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_monitor_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_randr_monitor_info_end (xcb_randr_monitor_info_iterator_t i);

int
xcb_randr_get_monitors_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_randr_get_monitors_cookie_t
xcb_randr_get_monitors (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint8_t           get_active);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_randr_get_monitors_cookie_t
xcb_randr_get_monitors_unchecked (xcb_connection_t *c,
                                  xcb_window_t      window,
                                  uint8_t           get_active);

int
xcb_randr_get_monitors_monitors_length (const xcb_randr_get_monitors_reply_t *R);

xcb_randr_monitor_info_iterator_t
xcb_randr_get_monitors_monitors_iterator (const xcb_randr_get_monitors_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_randr_get_monitors_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_randr_get_monitors_reply_t *
xcb_randr_get_monitors_reply (xcb_connection_t                 *c,
                              xcb_randr_get_monitors_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_randr_set_monitor_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_set_monitor_checked (xcb_connection_t         *c,
                               xcb_window_t              window,
                               xcb_randr_monitor_info_t *monitorinfo);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_set_monitor (xcb_connection_t         *c,
                       xcb_window_t              window,
                       xcb_randr_monitor_info_t *monitorinfo);

xcb_randr_monitor_info_t *
xcb_randr_set_monitor_monitorinfo (const xcb_randr_set_monitor_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_randr_delete_monitor_checked (xcb_connection_t *c,
                                  xcb_window_t      window,
                                  xcb_atom_t        name);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_randr_delete_monitor (xcb_connection_t *c,
                          xcb_window_t      window,
                          xcb_atom_t        name);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d24 1
a24 1
#define XCB_RANDR_MINOR_VERSION 4
d34 3
a36 3
    xcb_randr_mode_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d45 3
a47 3
    xcb_randr_crtc_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d56 3
a58 3
    xcb_randr_output_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d67 3
a69 3
    xcb_randr_provider_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d79 3
a81 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d91 3
a93 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d103 3
a105 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d115 3
a117 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d133 4
a136 4
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    uint16_t mwidth; /**<  */
    uint16_t mheight; /**<  */
d143 3
a145 3
    xcb_randr_screen_size_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d152 1
a152 1
    uint16_t nRates; /**<  */
d159 3
a161 3
    xcb_randr_refresh_rates_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d168 1
a168 1
    unsigned int sequence; /**<  */
d178 5
a182 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d189 7
a195 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint8_t  pad1[16]; /**<  */
d209 1
a209 1
    unsigned int sequence; /**<  */
d219 10
a228 10
    uint8_t         major_opcode; /**<  */
    uint8_t         minor_opcode; /**<  */
    uint16_t        length; /**<  */
    xcb_window_t    window; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    uint16_t        sizeID; /**<  */
    uint16_t        rotation; /**<  */
    uint16_t        rate; /**<  */
    uint8_t         pad0[2]; /**<  */
d235 9
a243 9
    uint8_t         response_type; /**<  */
    uint8_t         status; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t new_timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    xcb_window_t    root; /**<  */
    uint16_t        subpixel_order; /**<  */
    uint8_t         pad0[10]; /**<  */
d263 6
a268 6
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint16_t     enable; /**<  */
    uint8_t      pad0[2]; /**<  */
d275 1
a275 1
    unsigned int sequence; /**<  */
d285 4
a288 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d295 13
a307 13
    uint8_t         response_type; /**<  */
    uint8_t         rotations; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_window_t    root; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    uint16_t        nSizes; /**<  */
    uint16_t        sizeID; /**<  */
    uint16_t        rotation; /**<  */
    uint16_t        rate; /**<  */
    uint16_t        nInfo; /**<  */
    uint8_t         pad0[2]; /**<  */
d314 1
a314 1
    unsigned int sequence; /**<  */
d324 4
a327 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d334 9
a342 9
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t min_width; /**<  */
    uint16_t min_height; /**<  */
    uint16_t max_width; /**<  */
    uint16_t max_height; /**<  */
    uint8_t  pad1[16]; /**<  */
d352 8
a359 8
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint16_t     width; /**<  */
    uint16_t     height; /**<  */
    uint32_t     mm_width; /**<  */
    uint32_t     mm_height; /**<  */
d383 13
a395 13
    uint32_t id; /**<  */
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    uint32_t dot_clock; /**<  */
    uint16_t hsync_start; /**<  */
    uint16_t hsync_end; /**<  */
    uint16_t htotal; /**<  */
    uint16_t hskew; /**<  */
    uint16_t vsync_start; /**<  */
    uint16_t vsync_end; /**<  */
    uint16_t vtotal; /**<  */
    uint16_t name_len; /**<  */
    uint32_t mode_flags; /**<  */
d402 3
a404 3
    xcb_randr_mode_info_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d411 1
a411 1
    unsigned int sequence; /**<  */
d421 4
a424 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d431 11
a441 11
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    uint16_t        num_crtcs; /**<  */
    uint16_t        num_outputs; /**<  */
    uint16_t        num_modes; /**<  */
    uint16_t        names_len; /**<  */
    uint8_t         pad1[8]; /**<  */
d454 1
a454 1
    unsigned int sequence; /**<  */
d464 5
a468 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_timestamp_t    config_timestamp; /**<  */
d475 15
a489 15
    uint8_t          response_type; /**<  */
    uint8_t          status; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_timestamp_t  timestamp; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    uint32_t         mm_width; /**<  */
    uint32_t         mm_height; /**<  */
    uint8_t          connection; /**<  */
    uint8_t          subpixel_order; /**<  */
    uint16_t         num_crtcs; /**<  */
    uint16_t         num_modes; /**<  */
    uint16_t         num_preferred; /**<  */
    uint16_t         num_clones; /**<  */
    uint16_t         name_len; /**<  */
d496 1
a496 1
    unsigned int sequence; /**<  */
d506 4
a509 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
d516 6
a521 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_atoms; /**<  */
    uint8_t  pad1[22]; /**<  */
d528 1
a528 1
    unsigned int sequence; /**<  */
d538 5
a542 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         property; /**<  */
d549 8
a556 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pending; /**<  */
    uint8_t  range; /**<  */
    uint8_t  immutable; /**<  */
    uint8_t  pad1[21]; /**<  */
d566 8
a573 8
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         property; /**<  */
    uint8_t            pending; /**<  */
    uint8_t            range; /**<  */
    uint8_t            pad0[2]; /**<  */
d583 10
a592 10
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         property; /**<  */
    xcb_atom_t         type; /**<  */
    uint8_t            format; /**<  */
    uint8_t            mode; /**<  */
    uint8_t            pad0[2]; /**<  */
    uint32_t           num_units; /**<  */
d602 5
a606 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         property; /**<  */
d613 1
a613 1
    unsigned int sequence; /**<  */
d623 11
a633 11
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         property; /**<  */
    xcb_atom_t         type; /**<  */
    uint32_t           long_offset; /**<  */
    uint32_t           long_length; /**<  */
    uint8_t            _delete; /**<  */
    uint8_t            pending; /**<  */
    uint8_t            pad0[2]; /**<  */
d640 8
a647 8
    uint8_t    response_type; /**<  */
    uint8_t    format; /**<  */
    uint16_t   sequence; /**<  */
    uint32_t   length; /**<  */
    xcb_atom_t type; /**<  */
    uint32_t   bytes_after; /**<  */
    uint32_t   num_items; /**<  */
    uint8_t    pad0[12]; /**<  */
d654 1
a654 1
    unsigned int sequence; /**<  */
d664 5
a668 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_window_t          window; /**<  */
    xcb_randr_mode_info_t mode_info; /**<  */
d675 6
a680 6
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_randr_mode_t mode; /**<  */
    uint8_t          pad1[20]; /**<  */
d690 4
a693 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_mode_t mode; /**<  */
d703 5
a707 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_randr_mode_t   mode; /**<  */
d717 5
a721 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_randr_mode_t   mode; /**<  */
d728 1
a728 1
    unsigned int sequence; /**<  */
d738 5
a742 5
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    xcb_timestamp_t  config_timestamp; /**<  */
d749 14
a762 14
    uint8_t          response_type; /**<  */
    uint8_t          status; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_timestamp_t  timestamp; /**<  */
    int16_t          x; /**<  */
    int16_t          y; /**<  */
    uint16_t         width; /**<  */
    uint16_t         height; /**<  */
    xcb_randr_mode_t mode; /**<  */
    uint16_t         rotation; /**<  */
    uint16_t         rotations; /**<  */
    uint16_t         num_outputs; /**<  */
    uint16_t         num_possible_outputs; /**<  */
d769 1
a769 1
    unsigned int sequence; /**<  */
d779 11
a789 11
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    xcb_timestamp_t  timestamp; /**<  */
    xcb_timestamp_t  config_timestamp; /**<  */
    int16_t          x; /**<  */
    int16_t          y; /**<  */
    xcb_randr_mode_t mode; /**<  */
    uint16_t         rotation; /**<  */
    uint8_t          pad0[2]; /**<  */
d796 6
a801 6
    uint8_t         response_type; /**<  */
    uint8_t         status; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    uint8_t         pad0[20]; /**<  */
d808 1
a808 1
    unsigned int sequence; /**<  */
d818 4
a821 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
d828 6
a833 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t size; /**<  */
    uint8_t  pad1[22]; /**<  */
d840 1
a840 1
    unsigned int sequence; /**<  */
d850 4
a853 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
d860 6
a865 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t size; /**<  */
    uint8_t  pad1[22]; /**<  */
d875 6
a880 6
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    uint16_t         size; /**<  */
    uint8_t          pad0[2]; /**<  */
d887 1
a887 1
    unsigned int sequence; /**<  */
d897 4
a900 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d907 11
a917 11
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    uint16_t        num_crtcs; /**<  */
    uint16_t        num_outputs; /**<  */
    uint16_t        num_modes; /**<  */
    uint16_t        names_len; /**<  */
    uint8_t         pad1[8]; /**<  */
d934 7
a940 7
    uint8_t                major_opcode; /**<  */
    uint8_t                minor_opcode; /**<  */
    uint16_t               length; /**<  */
    xcb_randr_crtc_t       crtc; /**<  */
    xcb_render_transform_t transform; /**<  */
    uint16_t               filter_len; /**<  */
    uint8_t                pad0[2]; /**<  */
d947 1
a947 1
    unsigned int sequence; /**<  */
d957 4
a960 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
d967 13
a979 13
    uint8_t                response_type; /**<  */
    uint8_t                pad0; /**<  */
    uint16_t               sequence; /**<  */
    uint32_t               length; /**<  */
    xcb_render_transform_t pending_transform; /**<  */
    uint8_t                has_transforms; /**<  */
    uint8_t                pad1[3]; /**<  */
    xcb_render_transform_t current_transform; /**<  */
    uint8_t                pad2[4]; /**<  */
    uint16_t               pending_len; /**<  */
    uint16_t               pending_nparams; /**<  */
    uint16_t               current_len; /**<  */
    uint16_t               current_nparams; /**<  */
d986 1
a986 1
    unsigned int sequence; /**<  */
d996 4
a999 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
d1006 17
a1022 17
    uint8_t         response_type; /**<  */
    uint8_t         status; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    uint16_t        left; /**<  */
    uint16_t        top; /**<  */
    uint16_t        width; /**<  */
    uint16_t        height; /**<  */
    uint16_t        track_left; /**<  */
    uint16_t        track_top; /**<  */
    uint16_t        track_width; /**<  */
    uint16_t        track_height; /**<  */
    int16_t         border_left; /**<  */
    int16_t         border_top; /**<  */
    int16_t         border_right; /**<  */
    int16_t         border_bottom; /**<  */
d1029 1
a1029 1
    unsigned int sequence; /**<  */
d1039 17
a1055 17
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    xcb_timestamp_t  timestamp; /**<  */
    uint16_t         left; /**<  */
    uint16_t         top; /**<  */
    uint16_t         width; /**<  */
    uint16_t         height; /**<  */
    uint16_t         track_left; /**<  */
    uint16_t         track_top; /**<  */
    uint16_t         track_width; /**<  */
    uint16_t         track_height; /**<  */
    int16_t          border_left; /**<  */
    int16_t          border_top; /**<  */
    int16_t          border_right; /**<  */
    int16_t          border_bottom; /**<  */
d1062 5
a1066 5
    uint8_t         response_type; /**<  */
    uint8_t         status; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
d1076 5
a1080 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_window_t       window; /**<  */
    xcb_randr_output_t output; /**<  */
d1087 1
a1087 1
    unsigned int sequence; /**<  */
d1097 4
a1100 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d1107 5
a1111 5
    uint8_t            response_type; /**<  */
    uint8_t            pad0; /**<  */
    uint16_t           sequence; /**<  */
    uint32_t           length; /**<  */
    xcb_randr_output_t output; /**<  */
d1118 1
a1118 1
    unsigned int sequence; /**<  */
d1128 4
a1131 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d1138 7
a1144 7
    uint8_t         response_type; /**<  */
    uint8_t         pad0; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    uint16_t        num_providers; /**<  */
    uint8_t         pad1[18]; /**<  */
d1158 1
a1158 1
    unsigned int sequence; /**<  */
d1168 5
a1172 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_timestamp_t      config_timestamp; /**<  */
d1179 11
a1189 11
    uint8_t         response_type; /**<  */
    uint8_t         status; /**<  */
    uint16_t        sequence; /**<  */
    uint32_t        length; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    uint32_t        capabilities; /**<  */
    uint16_t        num_crtcs; /**<  */
    uint16_t        num_outputs; /**<  */
    uint16_t        num_associated_providers; /**<  */
    uint16_t        name_len; /**<  */
    uint8_t         pad0[8]; /**<  */
d1199 6
a1204 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_randr_provider_t sink_provider; /**<  */
    xcb_timestamp_t      config_timestamp; /**<  */
d1214 6
a1219 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_randr_provider_t source_provider; /**<  */
    xcb_timestamp_t      config_timestamp; /**<  */
d1226 1
a1226 1
    unsigned int sequence; /**<  */
d1236 4
a1239 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
d1246 6
a1251 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t num_atoms; /**<  */
    uint8_t  pad1[22]; /**<  */
d1258 1
a1258 1
    unsigned int sequence; /**<  */
d1268 5
a1272 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           property; /**<  */
d1279 8
a1286 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pending; /**<  */
    uint8_t  range; /**<  */
    uint8_t  immutable; /**<  */
    uint8_t  pad1[21]; /**<  */
d1296 8
a1303 8
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           property; /**<  */
    uint8_t              pending; /**<  */
    uint8_t              range; /**<  */
    uint8_t              pad0[2]; /**<  */
d1313 10
a1322 10
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           property; /**<  */
    xcb_atom_t           type; /**<  */
    uint8_t              format; /**<  */
    uint8_t              mode; /**<  */
    uint8_t              pad0[2]; /**<  */
    uint32_t             num_items; /**<  */
d1332 5
a1336 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           property; /**<  */
d1343 1
a1343 1
    unsigned int sequence; /**<  */
d1353 11
a1363 11
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           property; /**<  */
    xcb_atom_t           type; /**<  */
    uint32_t             long_offset; /**<  */
    uint32_t             long_length; /**<  */
    uint8_t              _delete; /**<  */
    uint8_t              pending; /**<  */
    uint8_t              pad0[2]; /**<  */
d1370 8
a1377 8
    uint8_t    response_type; /**<  */
    uint8_t    format; /**<  */
    uint16_t   sequence; /**<  */
    uint32_t   length; /**<  */
    xcb_atom_t type; /**<  */
    uint32_t   bytes_after; /**<  */
    uint32_t   num_items; /**<  */
    uint8_t    pad0[12]; /**<  */
d1387 13
a1399 13
    uint8_t         response_type; /**<  */
    uint8_t         rotation; /**<  */
    uint16_t        sequence; /**<  */
    xcb_timestamp_t timestamp; /**<  */
    xcb_timestamp_t config_timestamp; /**<  */
    xcb_window_t    root; /**<  */
    xcb_window_t    request_window; /**<  */
    uint16_t        sizeID; /**<  */
    uint16_t        subpixel_order; /**<  */
    uint16_t        width; /**<  */
    uint16_t        height; /**<  */
    uint16_t        mwidth; /**<  */
    uint16_t        mheight; /**<  */
d1415 10
a1424 10
    xcb_timestamp_t  timestamp; /**<  */
    xcb_window_t     window; /**<  */
    xcb_randr_crtc_t crtc; /**<  */
    xcb_randr_mode_t mode; /**<  */
    uint16_t         rotation; /**<  */
    uint8_t          pad0[2]; /**<  */
    int16_t          x; /**<  */
    int16_t          y; /**<  */
    uint16_t         width; /**<  */
    uint16_t         height; /**<  */
d1431 3
a1433 3
    xcb_randr_crtc_change_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d1440 9
a1448 9
    xcb_timestamp_t    timestamp; /**<  */
    xcb_timestamp_t    config_timestamp; /**<  */
    xcb_window_t       window; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_randr_crtc_t   crtc; /**<  */
    xcb_randr_mode_t   mode; /**<  */
    uint16_t           rotation; /**<  */
    uint8_t            connection; /**<  */
    uint8_t            subpixel_order; /**<  */
d1455 3
a1457 3
    xcb_randr_output_change_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d1464 6
a1469 6
    xcb_window_t       window; /**<  */
    xcb_randr_output_t output; /**<  */
    xcb_atom_t         atom; /**<  */
    xcb_timestamp_t    timestamp; /**<  */
    uint8_t            status; /**<  */
    uint8_t            pad0[11]; /**<  */
d1476 3
a1478 3
    xcb_randr_output_property_t *data; /**<  */
    int                          rem; /**<  */
    int                          index; /**<  */
d1485 4
a1488 4
    xcb_timestamp_t      timestamp; /**<  */
    xcb_window_t         window; /**<  */
    xcb_randr_provider_t provider; /**<  */
    uint8_t              pad0[16]; /**<  */
d1495 3
a1497 3
    xcb_randr_provider_change_t *data; /**<  */
    int                          rem; /**<  */
    int                          index; /**<  */
d1504 6
a1509 6
    xcb_window_t         window; /**<  */
    xcb_randr_provider_t provider; /**<  */
    xcb_atom_t           atom; /**<  */
    xcb_timestamp_t      timestamp; /**<  */
    uint8_t              state; /**<  */
    uint8_t              pad0[11]; /**<  */
d1516 3
a1518 3
    xcb_randr_provider_property_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
d1525 3
a1527 3
    xcb_timestamp_t timestamp; /**<  */
    xcb_window_t    window; /**<  */
    uint8_t         pad0[20]; /**<  */
d1534 3
a1536 3
    xcb_randr_resource_change_t *data; /**<  */
    int                          rem; /**<  */
    int                          index; /**<  */
d1543 6
a1548 6
    xcb_randr_crtc_change_t       cc; /**<  */
    xcb_randr_output_change_t     oc; /**<  */
    xcb_randr_output_property_t   op; /**<  */
    xcb_randr_provider_change_t   pc; /**<  */
    xcb_randr_provider_property_t pp; /**<  */
    xcb_randr_resource_change_t   rc; /**<  */
d1555 3
a1557 3
    xcb_randr_notify_data_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d1567 4
a1570 4
    uint8_t                 response_type; /**<  */
    uint8_t                 subCode; /**<  */
    uint16_t                sequence; /**<  */
    xcb_randr_notify_data_t u; /**<  */
d1574 87
d1669 1
a1669 1
xcb_randr_mode_next (xcb_randr_mode_iterator_t *i  /**< */);
d1681 1
a1681 1
xcb_randr_mode_end (xcb_randr_mode_iterator_t i  /**< */);
d1692 1
a1692 1
xcb_randr_crtc_next (xcb_randr_crtc_iterator_t *i  /**< */);
d1704 1
a1704 1
xcb_randr_crtc_end (xcb_randr_crtc_iterator_t i  /**< */);
d1715 1
a1715 1
xcb_randr_output_next (xcb_randr_output_iterator_t *i  /**< */);
d1727 1
a1727 1
xcb_randr_output_end (xcb_randr_output_iterator_t i  /**< */);
d1738 1
a1738 1
xcb_randr_provider_next (xcb_randr_provider_iterator_t *i  /**< */);
d1750 1
a1750 1
xcb_randr_provider_end (xcb_randr_provider_iterator_t i  /**< */);
d1761 1
a1761 1
xcb_randr_screen_size_next (xcb_randr_screen_size_iterator_t *i  /**< */);
d1773 1
a1773 1
xcb_randr_screen_size_end (xcb_randr_screen_size_iterator_t i  /**< */);
d1776 1
a1776 1
xcb_randr_refresh_rates_sizeof (const void  *_buffer  /**< */);
d1779 1
a1779 1
xcb_randr_refresh_rates_rates (const xcb_randr_refresh_rates_t *R  /**< */);
d1782 1
a1782 1
xcb_randr_refresh_rates_rates_length (const xcb_randr_refresh_rates_t *R  /**< */);
d1785 1
a1785 1
xcb_randr_refresh_rates_rates_end (const xcb_randr_refresh_rates_t *R  /**< */);
d1796 1
a1796 1
xcb_randr_refresh_rates_next (xcb_randr_refresh_rates_iterator_t *i  /**< */);
d1808 1
a1808 1
xcb_randr_refresh_rates_end (xcb_randr_refresh_rates_iterator_t i  /**< */);
d1819 3
a1821 3
xcb_randr_query_version (xcb_connection_t *c  /**< */,
                         uint32_t          major_version  /**< */,
                         uint32_t          minor_version  /**< */);
d1835 3
a1837 3
xcb_randr_query_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint32_t          major_version  /**< */,
                                   uint32_t          minor_version  /**< */);
d1854 1
a1854 1
xcb_randr_query_version_reply (xcb_connection_t                  *c  /**< */,
d1856 1
a1856 1
                               xcb_generic_error_t              **e  /**< */);
d1867 7
a1873 7
xcb_randr_set_screen_config (xcb_connection_t *c  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_timestamp_t   timestamp  /**< */,
                             xcb_timestamp_t   config_timestamp  /**< */,
                             uint16_t          sizeID  /**< */,
                             uint16_t          rotation  /**< */,
                             uint16_t          rate  /**< */);
d1887 7
a1893 7
xcb_randr_set_screen_config_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_window_t      window  /**< */,
                                       xcb_timestamp_t   timestamp  /**< */,
                                       xcb_timestamp_t   config_timestamp  /**< */,
                                       uint16_t          sizeID  /**< */,
                                       uint16_t          rotation  /**< */,
                                       uint16_t          rate  /**< */);
d1910 1
a1910 1
xcb_randr_set_screen_config_reply (xcb_connection_t                      *c  /**< */,
d1912 1
a1912 1
                                   xcb_generic_error_t                  **e  /**< */);
d1926 3
a1928 3
xcb_randr_select_input_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */,
                                uint16_t          enable  /**< */);
d1939 3
a1941 3
xcb_randr_select_input (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */,
                        uint16_t          enable  /**< */);
d1944 1
a1944 1
xcb_randr_get_screen_info_sizeof (const void  *_buffer  /**< */);
d1955 2
a1956 2
xcb_randr_get_screen_info (xcb_connection_t *c  /**< */,
                           xcb_window_t      window  /**< */);
d1970 2
a1971 2
xcb_randr_get_screen_info_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      window  /**< */);
d1974 1
a1974 1
xcb_randr_get_screen_info_sizes (const xcb_randr_get_screen_info_reply_t *R  /**< */);
d1977 1
a1977 1
xcb_randr_get_screen_info_sizes_length (const xcb_randr_get_screen_info_reply_t *R  /**< */);
d1980 1
a1980 1
xcb_randr_get_screen_info_sizes_iterator (const xcb_randr_get_screen_info_reply_t *R  /**< */);
d1983 1
a1983 1
xcb_randr_get_screen_info_rates_length (const xcb_randr_get_screen_info_reply_t *R  /**< */);
d1986 1
a1986 1
xcb_randr_get_screen_info_rates_iterator (const xcb_randr_get_screen_info_reply_t *R  /**< */);
d2003 1
a2003 1
xcb_randr_get_screen_info_reply (xcb_connection_t                    *c  /**< */,
d2005 1
a2005 1
                                 xcb_generic_error_t                **e  /**< */);
d2016 2
a2017 2
xcb_randr_get_screen_size_range (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */);
d2031 2
a2032 2
xcb_randr_get_screen_size_range_unchecked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */);
d2049 1
a2049 1
xcb_randr_get_screen_size_range_reply (xcb_connection_t                          *c  /**< */,
d2051 1
a2051 1
                                       xcb_generic_error_t                      **e  /**< */);
d2065 6
a2070 6
xcb_randr_set_screen_size_checked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   uint16_t          width  /**< */,
                                   uint16_t          height  /**< */,
                                   uint32_t          mm_width  /**< */,
                                   uint32_t          mm_height  /**< */);
d2081 6
a2086 6
xcb_randr_set_screen_size (xcb_connection_t *c  /**< */,
                           xcb_window_t      window  /**< */,
                           uint16_t          width  /**< */,
                           uint16_t          height  /**< */,
                           uint32_t          mm_width  /**< */,
                           uint32_t          mm_height  /**< */);
d2097 1
a2097 1
xcb_randr_mode_info_next (xcb_randr_mode_info_iterator_t *i  /**< */);
d2109 1
a2109 1
xcb_randr_mode_info_end (xcb_randr_mode_info_iterator_t i  /**< */);
d2112 1
a2112 1
xcb_randr_get_screen_resources_sizeof (const void  *_buffer  /**< */);
d2123 2
a2124 2
xcb_randr_get_screen_resources (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */);
d2138 2
a2139 2
xcb_randr_get_screen_resources_unchecked (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */);
d2142 1
a2142 1
xcb_randr_get_screen_resources_crtcs (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2145 1
a2145 1
xcb_randr_get_screen_resources_crtcs_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2148 1
a2148 1
xcb_randr_get_screen_resources_crtcs_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2151 1
a2151 1
xcb_randr_get_screen_resources_outputs (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2154 1
a2154 1
xcb_randr_get_screen_resources_outputs_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2157 1
a2157 1
xcb_randr_get_screen_resources_outputs_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2160 1
a2160 1
xcb_randr_get_screen_resources_modes (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2163 1
a2163 1
xcb_randr_get_screen_resources_modes_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2166 1
a2166 1
xcb_randr_get_screen_resources_modes_iterator (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2169 1
a2169 1
xcb_randr_get_screen_resources_names (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2172 1
a2172 1
xcb_randr_get_screen_resources_names_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2175 1
a2175 1
xcb_randr_get_screen_resources_names_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */);
d2192 1
a2192 1
xcb_randr_get_screen_resources_reply (xcb_connection_t                         *c  /**< */,
d2194 1
a2194 1
                                      xcb_generic_error_t                     **e  /**< */);
d2197 1
a2197 1
xcb_randr_get_output_info_sizeof (const void  *_buffer  /**< */);
d2208 3
a2210 3
xcb_randr_get_output_info (xcb_connection_t   *c  /**< */,
                           xcb_randr_output_t  output  /**< */,
                           xcb_timestamp_t     config_timestamp  /**< */);
d2224 3
a2226 3
xcb_randr_get_output_info_unchecked (xcb_connection_t   *c  /**< */,
                                     xcb_randr_output_t  output  /**< */,
                                     xcb_timestamp_t     config_timestamp  /**< */);
d2229 1
a2229 1
xcb_randr_get_output_info_crtcs (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2232 1
a2232 1
xcb_randr_get_output_info_crtcs_length (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2235 1
a2235 1
xcb_randr_get_output_info_crtcs_end (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2238 1
a2238 1
xcb_randr_get_output_info_modes (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2241 1
a2241 1
xcb_randr_get_output_info_modes_length (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2244 1
a2244 1
xcb_randr_get_output_info_modes_end (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2247 1
a2247 1
xcb_randr_get_output_info_clones (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2250 1
a2250 1
xcb_randr_get_output_info_clones_length (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2253 1
a2253 1
xcb_randr_get_output_info_clones_end (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2256 1
a2256 1
xcb_randr_get_output_info_name (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2259 1
a2259 1
xcb_randr_get_output_info_name_length (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2262 1
a2262 1
xcb_randr_get_output_info_name_end (const xcb_randr_get_output_info_reply_t *R  /**< */);
d2279 1
a2279 1
xcb_randr_get_output_info_reply (xcb_connection_t                    *c  /**< */,
d2281 1
a2281 1
                                 xcb_generic_error_t                **e  /**< */);
d2284 1
a2284 1
xcb_randr_list_output_properties_sizeof (const void  *_buffer  /**< */);
d2295 2
a2296 2
xcb_randr_list_output_properties (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */);
d2310 2
a2311 2
xcb_randr_list_output_properties_unchecked (xcb_connection_t   *c  /**< */,
                                            xcb_randr_output_t  output  /**< */);
d2314 1
a2314 1
xcb_randr_list_output_properties_atoms (const xcb_randr_list_output_properties_reply_t *R  /**< */);
d2317 1
a2317 1
xcb_randr_list_output_properties_atoms_length (const xcb_randr_list_output_properties_reply_t *R  /**< */);
d2320 1
a2320 1
xcb_randr_list_output_properties_atoms_end (const xcb_randr_list_output_properties_reply_t *R  /**< */);
d2337 1
a2337 1
xcb_randr_list_output_properties_reply (xcb_connection_t                           *c  /**< */,
d2339 1
a2339 1
                                        xcb_generic_error_t                       **e  /**< */);
d2342 1
a2342 1
xcb_randr_query_output_property_sizeof (const void  *_buffer  /**< */);
d2353 3
a2355 3
xcb_randr_query_output_property (xcb_connection_t   *c  /**< */,
                                 xcb_randr_output_t  output  /**< */,
                                 xcb_atom_t          property  /**< */);
d2369 3
a2371 3
xcb_randr_query_output_property_unchecked (xcb_connection_t   *c  /**< */,
                                           xcb_randr_output_t  output  /**< */,
                                           xcb_atom_t          property  /**< */);
d2374 1
a2374 1
xcb_randr_query_output_property_valid_values (const xcb_randr_query_output_property_reply_t *R  /**< */);
d2377 1
a2377 1
xcb_randr_query_output_property_valid_values_length (const xcb_randr_query_output_property_reply_t *R  /**< */);
d2380 1
a2380 1
xcb_randr_query_output_property_valid_values_end (const xcb_randr_query_output_property_reply_t *R  /**< */);
d2397 1
a2397 1
xcb_randr_query_output_property_reply (xcb_connection_t                          *c  /**< */,
d2399 1
a2399 1
                                       xcb_generic_error_t                      **e  /**< */);
d2402 2
a2403 2
xcb_randr_configure_output_property_sizeof (const void  *_buffer  /**< */,
                                            uint32_t     values_len  /**< */);
d2417 7
a2423 7
xcb_randr_configure_output_property_checked (xcb_connection_t   *c  /**< */,
                                             xcb_randr_output_t  output  /**< */,
                                             xcb_atom_t          property  /**< */,
                                             uint8_t             pending  /**< */,
                                             uint8_t             range  /**< */,
                                             uint32_t            values_len  /**< */,
                                             const int32_t      *values  /**< */);
d2434 16
a2449 7
xcb_randr_configure_output_property (xcb_connection_t   *c  /**< */,
                                     xcb_randr_output_t  output  /**< */,
                                     xcb_atom_t          property  /**< */,
                                     uint8_t             pending  /**< */,
                                     uint8_t             range  /**< */,
                                     uint32_t            values_len  /**< */,
                                     const int32_t      *values  /**< */);
d2452 1
a2452 1
xcb_randr_change_output_property_sizeof (const void  *_buffer  /**< */);
d2466 8
a2473 8
xcb_randr_change_output_property_checked (xcb_connection_t   *c  /**< */,
                                          xcb_randr_output_t  output  /**< */,
                                          xcb_atom_t          property  /**< */,
                                          xcb_atom_t          type  /**< */,
                                          uint8_t             format  /**< */,
                                          uint8_t             mode  /**< */,
                                          uint32_t            num_units  /**< */,
                                          const void         *data  /**< */);
d2484 17
a2500 8
xcb_randr_change_output_property (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */,
                                  xcb_atom_t          property  /**< */,
                                  xcb_atom_t          type  /**< */,
                                  uint8_t             format  /**< */,
                                  uint8_t             mode  /**< */,
                                  uint32_t            num_units  /**< */,
                                  const void         *data  /**< */);
d2514 3
a2516 3
xcb_randr_delete_output_property_checked (xcb_connection_t   *c  /**< */,
                                          xcb_randr_output_t  output  /**< */,
                                          xcb_atom_t          property  /**< */);
d2527 3
a2529 3
xcb_randr_delete_output_property (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */,
                                  xcb_atom_t          property  /**< */);
d2532 1
a2532 1
xcb_randr_get_output_property_sizeof (const void  *_buffer  /**< */);
d2543 8
a2550 8
xcb_randr_get_output_property (xcb_connection_t   *c  /**< */,
                               xcb_randr_output_t  output  /**< */,
                               xcb_atom_t          property  /**< */,
                               xcb_atom_t          type  /**< */,
                               uint32_t            long_offset  /**< */,
                               uint32_t            long_length  /**< */,
                               uint8_t             _delete  /**< */,
                               uint8_t             pending  /**< */);
d2564 8
a2571 8
xcb_randr_get_output_property_unchecked (xcb_connection_t   *c  /**< */,
                                         xcb_randr_output_t  output  /**< */,
                                         xcb_atom_t          property  /**< */,
                                         xcb_atom_t          type  /**< */,
                                         uint32_t            long_offset  /**< */,
                                         uint32_t            long_length  /**< */,
                                         uint8_t             _delete  /**< */,
                                         uint8_t             pending  /**< */);
d2574 1
a2574 1
xcb_randr_get_output_property_data (const xcb_randr_get_output_property_reply_t *R  /**< */);
d2577 1
a2577 1
xcb_randr_get_output_property_data_length (const xcb_randr_get_output_property_reply_t *R  /**< */);
d2580 1
a2580 1
xcb_randr_get_output_property_data_end (const xcb_randr_get_output_property_reply_t *R  /**< */);
d2597 1
a2597 1
xcb_randr_get_output_property_reply (xcb_connection_t                        *c  /**< */,
d2599 1
a2599 1
                                     xcb_generic_error_t                    **e  /**< */);
d2602 2
a2603 2
xcb_randr_create_mode_sizeof (const void  *_buffer  /**< */,
                              uint32_t     name_len  /**< */);
d2614 5
a2618 5
xcb_randr_create_mode (xcb_connection_t      *c  /**< */,
                       xcb_window_t           window  /**< */,
                       xcb_randr_mode_info_t  mode_info  /**< */,
                       uint32_t               name_len  /**< */,
                       const char            *name  /**< */);
d2632 5
a2636 5
xcb_randr_create_mode_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_window_t           window  /**< */,
                                 xcb_randr_mode_info_t  mode_info  /**< */,
                                 uint32_t               name_len  /**< */,
                                 const char            *name  /**< */);
d2653 1
a2653 1
xcb_randr_create_mode_reply (xcb_connection_t                *c  /**< */,
d2655 1
a2655 1
                             xcb_generic_error_t            **e  /**< */);
d2669 2
a2670 2
xcb_randr_destroy_mode_checked (xcb_connection_t *c  /**< */,
                                xcb_randr_mode_t  mode  /**< */);
d2681 2
a2682 2
xcb_randr_destroy_mode (xcb_connection_t *c  /**< */,
                        xcb_randr_mode_t  mode  /**< */);
d2696 3
a2698 3
xcb_randr_add_output_mode_checked (xcb_connection_t   *c  /**< */,
                                   xcb_randr_output_t  output  /**< */,
                                   xcb_randr_mode_t    mode  /**< */);
d2709 3
a2711 3
xcb_randr_add_output_mode (xcb_connection_t   *c  /**< */,
                           xcb_randr_output_t  output  /**< */,
                           xcb_randr_mode_t    mode  /**< */);
d2725 3
a2727 3
xcb_randr_delete_output_mode_checked (xcb_connection_t   *c  /**< */,
                                      xcb_randr_output_t  output  /**< */,
                                      xcb_randr_mode_t    mode  /**< */);
d2738 3
a2740 3
xcb_randr_delete_output_mode (xcb_connection_t   *c  /**< */,
                              xcb_randr_output_t  output  /**< */,
                              xcb_randr_mode_t    mode  /**< */);
d2743 1
a2743 1
xcb_randr_get_crtc_info_sizeof (const void  *_buffer  /**< */);
d2754 3
a2756 3
xcb_randr_get_crtc_info (xcb_connection_t *c  /**< */,
                         xcb_randr_crtc_t  crtc  /**< */,
                         xcb_timestamp_t   config_timestamp  /**< */);
d2770 3
a2772 3
xcb_randr_get_crtc_info_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_randr_crtc_t  crtc  /**< */,
                                   xcb_timestamp_t   config_timestamp  /**< */);
d2775 1
a2775 1
xcb_randr_get_crtc_info_outputs (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2778 1
a2778 1
xcb_randr_get_crtc_info_outputs_length (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2781 1
a2781 1
xcb_randr_get_crtc_info_outputs_end (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2784 1
a2784 1
xcb_randr_get_crtc_info_possible (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2787 1
a2787 1
xcb_randr_get_crtc_info_possible_length (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2790 1
a2790 1
xcb_randr_get_crtc_info_possible_end (const xcb_randr_get_crtc_info_reply_t *R  /**< */);
d2807 1
a2807 1
xcb_randr_get_crtc_info_reply (xcb_connection_t                  *c  /**< */,
d2809 1
a2809 1
                               xcb_generic_error_t              **e  /**< */);
d2812 2
a2813 2
xcb_randr_set_crtc_config_sizeof (const void  *_buffer  /**< */,
                                  uint32_t     outputs_len  /**< */);
d2824 10
a2833 10
xcb_randr_set_crtc_config (xcb_connection_t         *c  /**< */,
                           xcb_randr_crtc_t          crtc  /**< */,
                           xcb_timestamp_t           timestamp  /**< */,
                           xcb_timestamp_t           config_timestamp  /**< */,
                           int16_t                   x  /**< */,
                           int16_t                   y  /**< */,
                           xcb_randr_mode_t          mode  /**< */,
                           uint16_t                  rotation  /**< */,
                           uint32_t                  outputs_len  /**< */,
                           const xcb_randr_output_t *outputs  /**< */);
d2847 10
a2856 10
xcb_randr_set_crtc_config_unchecked (xcb_connection_t         *c  /**< */,
                                     xcb_randr_crtc_t          crtc  /**< */,
                                     xcb_timestamp_t           timestamp  /**< */,
                                     xcb_timestamp_t           config_timestamp  /**< */,
                                     int16_t                   x  /**< */,
                                     int16_t                   y  /**< */,
                                     xcb_randr_mode_t          mode  /**< */,
                                     uint16_t                  rotation  /**< */,
                                     uint32_t                  outputs_len  /**< */,
                                     const xcb_randr_output_t *outputs  /**< */);
d2873 1
a2873 1
xcb_randr_set_crtc_config_reply (xcb_connection_t                    *c  /**< */,
d2875 1
a2875 1
                                 xcb_generic_error_t                **e  /**< */);
d2886 2
a2887 2
xcb_randr_get_crtc_gamma_size (xcb_connection_t *c  /**< */,
                               xcb_randr_crtc_t  crtc  /**< */);
d2901 2
a2902 2
xcb_randr_get_crtc_gamma_size_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_randr_crtc_t  crtc  /**< */);
d2919 1
a2919 1
xcb_randr_get_crtc_gamma_size_reply (xcb_connection_t                        *c  /**< */,
d2921 1
a2921 1
                                     xcb_generic_error_t                    **e  /**< */);
d2924 1
a2924 1
xcb_randr_get_crtc_gamma_sizeof (const void  *_buffer  /**< */);
d2935 2
a2936 2
xcb_randr_get_crtc_gamma (xcb_connection_t *c  /**< */,
                          xcb_randr_crtc_t  crtc  /**< */);
d2950 2
a2951 2
xcb_randr_get_crtc_gamma_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_randr_crtc_t  crtc  /**< */);
d2954 1
a2954 1
xcb_randr_get_crtc_gamma_red (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2957 1
a2957 1
xcb_randr_get_crtc_gamma_red_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2960 1
a2960 1
xcb_randr_get_crtc_gamma_red_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2963 1
a2963 1
xcb_randr_get_crtc_gamma_green (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2966 1
a2966 1
xcb_randr_get_crtc_gamma_green_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2969 1
a2969 1
xcb_randr_get_crtc_gamma_green_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2972 1
a2972 1
xcb_randr_get_crtc_gamma_blue (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2975 1
a2975 1
xcb_randr_get_crtc_gamma_blue_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2978 1
a2978 1
xcb_randr_get_crtc_gamma_blue_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */);
d2995 1
a2995 1
xcb_randr_get_crtc_gamma_reply (xcb_connection_t                   *c  /**< */,
d2997 1
a2997 1
                                xcb_generic_error_t               **e  /**< */);
d3000 1
a3000 1
xcb_randr_set_crtc_gamma_sizeof (const void  *_buffer  /**< */);
d3014 6
a3019 6
xcb_randr_set_crtc_gamma_checked (xcb_connection_t *c  /**< */,
                                  xcb_randr_crtc_t  crtc  /**< */,
                                  uint16_t          size  /**< */,
                                  const uint16_t   *red  /**< */,
                                  const uint16_t   *green  /**< */,
                                  const uint16_t   *blue  /**< */);
d3030 18
a3047 6
xcb_randr_set_crtc_gamma (xcb_connection_t *c  /**< */,
                          xcb_randr_crtc_t  crtc  /**< */,
                          uint16_t          size  /**< */,
                          const uint16_t   *red  /**< */,
                          const uint16_t   *green  /**< */,
                          const uint16_t   *blue  /**< */);
d3050 16
a3065 1
xcb_randr_get_screen_resources_current_sizeof (const void  *_buffer  /**< */);
d3076 2
a3077 2
xcb_randr_get_screen_resources_current (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */);
d3091 2
a3092 2
xcb_randr_get_screen_resources_current_unchecked (xcb_connection_t *c  /**< */,
                                                  xcb_window_t      window  /**< */);
d3095 1
a3095 1
xcb_randr_get_screen_resources_current_crtcs (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3098 1
a3098 1
xcb_randr_get_screen_resources_current_crtcs_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3101 1
a3101 1
xcb_randr_get_screen_resources_current_crtcs_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3104 1
a3104 1
xcb_randr_get_screen_resources_current_outputs (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3107 1
a3107 1
xcb_randr_get_screen_resources_current_outputs_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3110 1
a3110 1
xcb_randr_get_screen_resources_current_outputs_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3113 1
a3113 1
xcb_randr_get_screen_resources_current_modes (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3116 1
a3116 1
xcb_randr_get_screen_resources_current_modes_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3119 1
a3119 1
xcb_randr_get_screen_resources_current_modes_iterator (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3122 1
a3122 1
xcb_randr_get_screen_resources_current_names (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3125 1
a3125 1
xcb_randr_get_screen_resources_current_names_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3128 1
a3128 1
xcb_randr_get_screen_resources_current_names_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */);
d3145 1
a3145 1
xcb_randr_get_screen_resources_current_reply (xcb_connection_t                                 *c  /**< */,
d3147 1
a3147 1
                                              xcb_generic_error_t                             **e  /**< */);
d3150 2
a3151 2
xcb_randr_set_crtc_transform_sizeof (const void  *_buffer  /**< */,
                                     uint32_t     filter_params_len  /**< */);
d3165 7
a3171 7
xcb_randr_set_crtc_transform_checked (xcb_connection_t         *c  /**< */,
                                      xcb_randr_crtc_t          crtc  /**< */,
                                      xcb_render_transform_t    transform  /**< */,
                                      uint16_t                  filter_len  /**< */,
                                      const char               *filter_name  /**< */,
                                      uint32_t                  filter_params_len  /**< */,
                                      const xcb_render_fixed_t *filter_params  /**< */);
d3182 25
a3206 7
xcb_randr_set_crtc_transform (xcb_connection_t         *c  /**< */,
                              xcb_randr_crtc_t          crtc  /**< */,
                              xcb_render_transform_t    transform  /**< */,
                              uint16_t                  filter_len  /**< */,
                              const char               *filter_name  /**< */,
                              uint32_t                  filter_params_len  /**< */,
                              const xcb_render_fixed_t *filter_params  /**< */);
d3209 1
a3209 1
xcb_randr_get_crtc_transform_sizeof (const void  *_buffer  /**< */);
d3220 2
a3221 2
xcb_randr_get_crtc_transform (xcb_connection_t *c  /**< */,
                              xcb_randr_crtc_t  crtc  /**< */);
d3235 2
a3236 2
xcb_randr_get_crtc_transform_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_randr_crtc_t  crtc  /**< */);
d3239 1
a3239 1
xcb_randr_get_crtc_transform_pending_filter_name (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3242 1
a3242 1
xcb_randr_get_crtc_transform_pending_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3245 1
a3245 1
xcb_randr_get_crtc_transform_pending_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3248 1
a3248 1
xcb_randr_get_crtc_transform_pending_params (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3251 1
a3251 1
xcb_randr_get_crtc_transform_pending_params_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3254 1
a3254 1
xcb_randr_get_crtc_transform_pending_params_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3257 1
a3257 1
xcb_randr_get_crtc_transform_current_filter_name (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3260 1
a3260 1
xcb_randr_get_crtc_transform_current_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3263 1
a3263 1
xcb_randr_get_crtc_transform_current_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3266 1
a3266 1
xcb_randr_get_crtc_transform_current_params (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3269 1
a3269 1
xcb_randr_get_crtc_transform_current_params_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3272 1
a3272 1
xcb_randr_get_crtc_transform_current_params_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */);
d3289 1
a3289 1
xcb_randr_get_crtc_transform_reply (xcb_connection_t                       *c  /**< */,
d3291 1
a3291 1
                                    xcb_generic_error_t                   **e  /**< */);
d3302 2
a3303 2
xcb_randr_get_panning (xcb_connection_t *c  /**< */,
                       xcb_randr_crtc_t  crtc  /**< */);
d3317 2
a3318 2
xcb_randr_get_panning_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_randr_crtc_t  crtc  /**< */);
d3335 1
a3335 1
xcb_randr_get_panning_reply (xcb_connection_t                *c  /**< */,
d3337 1
a3337 1
                             xcb_generic_error_t            **e  /**< */);
d3348 15
a3362 15
xcb_randr_set_panning (xcb_connection_t *c  /**< */,
                       xcb_randr_crtc_t  crtc  /**< */,
                       xcb_timestamp_t   timestamp  /**< */,
                       uint16_t          left  /**< */,
                       uint16_t          top  /**< */,
                       uint16_t          width  /**< */,
                       uint16_t          height  /**< */,
                       uint16_t          track_left  /**< */,
                       uint16_t          track_top  /**< */,
                       uint16_t          track_width  /**< */,
                       uint16_t          track_height  /**< */,
                       int16_t           border_left  /**< */,
                       int16_t           border_top  /**< */,
                       int16_t           border_right  /**< */,
                       int16_t           border_bottom  /**< */);
d3376 15
a3390 15
xcb_randr_set_panning_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_randr_crtc_t  crtc  /**< */,
                                 xcb_timestamp_t   timestamp  /**< */,
                                 uint16_t          left  /**< */,
                                 uint16_t          top  /**< */,
                                 uint16_t          width  /**< */,
                                 uint16_t          height  /**< */,
                                 uint16_t          track_left  /**< */,
                                 uint16_t          track_top  /**< */,
                                 uint16_t          track_width  /**< */,
                                 uint16_t          track_height  /**< */,
                                 int16_t           border_left  /**< */,
                                 int16_t           border_top  /**< */,
                                 int16_t           border_right  /**< */,
                                 int16_t           border_bottom  /**< */);
d3407 1
a3407 1
xcb_randr_set_panning_reply (xcb_connection_t                *c  /**< */,
d3409 1
a3409 1
                             xcb_generic_error_t            **e  /**< */);
d3423 3
a3425 3
xcb_randr_set_output_primary_checked (xcb_connection_t   *c  /**< */,
                                      xcb_window_t        window  /**< */,
                                      xcb_randr_output_t  output  /**< */);
d3436 3
a3438 3
xcb_randr_set_output_primary (xcb_connection_t   *c  /**< */,
                              xcb_window_t        window  /**< */,
                              xcb_randr_output_t  output  /**< */);
d3449 2
a3450 2
xcb_randr_get_output_primary (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */);
d3464 2
a3465 2
xcb_randr_get_output_primary_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */);
d3482 1
a3482 1
xcb_randr_get_output_primary_reply (xcb_connection_t                       *c  /**< */,
d3484 1
a3484 1
                                    xcb_generic_error_t                   **e  /**< */);
d3487 1
a3487 1
xcb_randr_get_providers_sizeof (const void  *_buffer  /**< */);
d3498 2
a3499 2
xcb_randr_get_providers (xcb_connection_t *c  /**< */,
                         xcb_window_t      window  /**< */);
d3513 2
a3514 2
xcb_randr_get_providers_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */);
d3517 1
a3517 1
xcb_randr_get_providers_providers (const xcb_randr_get_providers_reply_t *R  /**< */);
d3520 1
a3520 1
xcb_randr_get_providers_providers_length (const xcb_randr_get_providers_reply_t *R  /**< */);
d3523 1
a3523 1
xcb_randr_get_providers_providers_end (const xcb_randr_get_providers_reply_t *R  /**< */);
d3540 1
a3540 1
xcb_randr_get_providers_reply (xcb_connection_t                  *c  /**< */,
d3542 1
a3542 1
                               xcb_generic_error_t              **e  /**< */);
d3545 1
a3545 1
xcb_randr_get_provider_info_sizeof (const void  *_buffer  /**< */);
d3556 3
a3558 3
xcb_randr_get_provider_info (xcb_connection_t     *c  /**< */,
                             xcb_randr_provider_t  provider  /**< */,
                             xcb_timestamp_t       config_timestamp  /**< */);
d3572 3
a3574 3
xcb_randr_get_provider_info_unchecked (xcb_connection_t     *c  /**< */,
                                       xcb_randr_provider_t  provider  /**< */,
                                       xcb_timestamp_t       config_timestamp  /**< */);
d3577 1
a3577 1
xcb_randr_get_provider_info_crtcs (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3580 1
a3580 1
xcb_randr_get_provider_info_crtcs_length (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3583 1
a3583 1
xcb_randr_get_provider_info_crtcs_end (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3586 1
a3586 1
xcb_randr_get_provider_info_outputs (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3589 1
a3589 1
xcb_randr_get_provider_info_outputs_length (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3592 1
a3592 1
xcb_randr_get_provider_info_outputs_end (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3595 1
a3595 1
xcb_randr_get_provider_info_associated_providers (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3598 1
a3598 1
xcb_randr_get_provider_info_associated_providers_length (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3601 1
a3601 1
xcb_randr_get_provider_info_associated_providers_end (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3604 1
a3604 1
xcb_randr_get_provider_info_associated_capability (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3607 1
a3607 1
xcb_randr_get_provider_info_associated_capability_length (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3610 1
a3610 1
xcb_randr_get_provider_info_associated_capability_end (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3613 1
a3613 1
xcb_randr_get_provider_info_name (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3616 1
a3616 1
xcb_randr_get_provider_info_name_length (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3619 1
a3619 1
xcb_randr_get_provider_info_name_end (const xcb_randr_get_provider_info_reply_t *R  /**< */);
d3636 1
a3636 1
xcb_randr_get_provider_info_reply (xcb_connection_t                      *c  /**< */,
d3638 1
a3638 1
                                   xcb_generic_error_t                  **e  /**< */);
d3652 4
a3655 4
xcb_randr_set_provider_offload_sink_checked (xcb_connection_t     *c  /**< */,
                                             xcb_randr_provider_t  provider  /**< */,
                                             xcb_randr_provider_t  sink_provider  /**< */,
                                             xcb_timestamp_t       config_timestamp  /**< */);
d3666 4
a3669 4
xcb_randr_set_provider_offload_sink (xcb_connection_t     *c  /**< */,
                                     xcb_randr_provider_t  provider  /**< */,
                                     xcb_randr_provider_t  sink_provider  /**< */,
                                     xcb_timestamp_t       config_timestamp  /**< */);
d3683 4
a3686 4
xcb_randr_set_provider_output_source_checked (xcb_connection_t     *c  /**< */,
                                              xcb_randr_provider_t  provider  /**< */,
                                              xcb_randr_provider_t  source_provider  /**< */,
                                              xcb_timestamp_t       config_timestamp  /**< */);
d3697 4
a3700 4
xcb_randr_set_provider_output_source (xcb_connection_t     *c  /**< */,
                                      xcb_randr_provider_t  provider  /**< */,
                                      xcb_randr_provider_t  source_provider  /**< */,
                                      xcb_timestamp_t       config_timestamp  /**< */);
d3703 1
a3703 1
xcb_randr_list_provider_properties_sizeof (const void  *_buffer  /**< */);
d3714 2
a3715 2
xcb_randr_list_provider_properties (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */);
d3729 2
a3730 2
xcb_randr_list_provider_properties_unchecked (xcb_connection_t     *c  /**< */,
                                              xcb_randr_provider_t  provider  /**< */);
d3733 1
a3733 1
xcb_randr_list_provider_properties_atoms (const xcb_randr_list_provider_properties_reply_t *R  /**< */);
d3736 1
a3736 1
xcb_randr_list_provider_properties_atoms_length (const xcb_randr_list_provider_properties_reply_t *R  /**< */);
d3739 1
a3739 1
xcb_randr_list_provider_properties_atoms_end (const xcb_randr_list_provider_properties_reply_t *R  /**< */);
d3756 1
a3756 1
xcb_randr_list_provider_properties_reply (xcb_connection_t                             *c  /**< */,
d3758 1
a3758 1
                                          xcb_generic_error_t                         **e  /**< */);
d3761 1
a3761 1
xcb_randr_query_provider_property_sizeof (const void  *_buffer  /**< */);
d3772 3
a3774 3
xcb_randr_query_provider_property (xcb_connection_t     *c  /**< */,
                                   xcb_randr_provider_t  provider  /**< */,
                                   xcb_atom_t            property  /**< */);
d3788 3
a3790 3
xcb_randr_query_provider_property_unchecked (xcb_connection_t     *c  /**< */,
                                             xcb_randr_provider_t  provider  /**< */,
                                             xcb_atom_t            property  /**< */);
d3793 1
a3793 1
xcb_randr_query_provider_property_valid_values (const xcb_randr_query_provider_property_reply_t *R  /**< */);
d3796 1
a3796 1
xcb_randr_query_provider_property_valid_values_length (const xcb_randr_query_provider_property_reply_t *R  /**< */);
d3799 1
a3799 1
xcb_randr_query_provider_property_valid_values_end (const xcb_randr_query_provider_property_reply_t *R  /**< */);
d3816 1
a3816 1
xcb_randr_query_provider_property_reply (xcb_connection_t                            *c  /**< */,
d3818 1
a3818 1
                                         xcb_generic_error_t                        **e  /**< */);
d3821 2
a3822 2
xcb_randr_configure_provider_property_sizeof (const void  *_buffer  /**< */,
                                              uint32_t     values_len  /**< */);
d3836 7
a3842 7
xcb_randr_configure_provider_property_checked (xcb_connection_t     *c  /**< */,
                                               xcb_randr_provider_t  provider  /**< */,
                                               xcb_atom_t            property  /**< */,
                                               uint8_t               pending  /**< */,
                                               uint8_t               range  /**< */,
                                               uint32_t              values_len  /**< */,
                                               const int32_t        *values  /**< */);
d3853 16
a3868 7
xcb_randr_configure_provider_property (xcb_connection_t     *c  /**< */,
                                       xcb_randr_provider_t  provider  /**< */,
                                       xcb_atom_t            property  /**< */,
                                       uint8_t               pending  /**< */,
                                       uint8_t               range  /**< */,
                                       uint32_t              values_len  /**< */,
                                       const int32_t        *values  /**< */);
d3871 1
a3871 1
xcb_randr_change_provider_property_sizeof (const void  *_buffer  /**< */);
d3885 8
a3892 8
xcb_randr_change_provider_property_checked (xcb_connection_t     *c  /**< */,
                                            xcb_randr_provider_t  provider  /**< */,
                                            xcb_atom_t            property  /**< */,
                                            xcb_atom_t            type  /**< */,
                                            uint8_t               format  /**< */,
                                            uint8_t               mode  /**< */,
                                            uint32_t              num_items  /**< */,
                                            const void           *data  /**< */);
d3903 17
a3919 8
xcb_randr_change_provider_property (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */,
                                    xcb_atom_t            property  /**< */,
                                    xcb_atom_t            type  /**< */,
                                    uint8_t               format  /**< */,
                                    uint8_t               mode  /**< */,
                                    uint32_t              num_items  /**< */,
                                    const void           *data  /**< */);
d3933 3
a3935 3
xcb_randr_delete_provider_property_checked (xcb_connection_t     *c  /**< */,
                                            xcb_randr_provider_t  provider  /**< */,
                                            xcb_atom_t            property  /**< */);
d3946 3
a3948 3
xcb_randr_delete_provider_property (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */,
                                    xcb_atom_t            property  /**< */);
d3951 1
a3951 1
xcb_randr_get_provider_property_sizeof (const void  *_buffer  /**< */);
d3962 8
a3969 8
xcb_randr_get_provider_property (xcb_connection_t     *c  /**< */,
                                 xcb_randr_provider_t  provider  /**< */,
                                 xcb_atom_t            property  /**< */,
                                 xcb_atom_t            type  /**< */,
                                 uint32_t              long_offset  /**< */,
                                 uint32_t              long_length  /**< */,
                                 uint8_t               _delete  /**< */,
                                 uint8_t               pending  /**< */);
d3983 8
a3990 8
xcb_randr_get_provider_property_unchecked (xcb_connection_t     *c  /**< */,
                                           xcb_randr_provider_t  provider  /**< */,
                                           xcb_atom_t            property  /**< */,
                                           xcb_atom_t            type  /**< */,
                                           uint32_t              long_offset  /**< */,
                                           uint32_t              long_length  /**< */,
                                           uint8_t               _delete  /**< */,
                                           uint8_t               pending  /**< */);
d3993 1
a3993 1
xcb_randr_get_provider_property_data (const xcb_randr_get_provider_property_reply_t *R  /**< */);
d3996 1
a3996 1
xcb_randr_get_provider_property_data_length (const xcb_randr_get_provider_property_reply_t *R  /**< */);
d3999 1
a3999 1
xcb_randr_get_provider_property_data_end (const xcb_randr_get_provider_property_reply_t *R  /**< */);
d4016 1
a4016 1
xcb_randr_get_provider_property_reply (xcb_connection_t                          *c  /**< */,
d4018 1
a4018 1
                                       xcb_generic_error_t                      **e  /**< */);
d4029 1
a4029 1
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i  /**< */);
d4041 1
a4041 1
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i  /**< */);
d4052 1
a4052 1
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i  /**< */);
d4064 1
a4064 1
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i  /**< */);
d4075 1
a4075 1
xcb_randr_output_property_next (xcb_randr_output_property_iterator_t *i  /**< */);
d4087 1
a4087 1
xcb_randr_output_property_end (xcb_randr_output_property_iterator_t i  /**< */);
d4098 1
a4098 1
xcb_randr_provider_change_next (xcb_randr_provider_change_iterator_t *i  /**< */);
d4110 1
a4110 1
xcb_randr_provider_change_end (xcb_randr_provider_change_iterator_t i  /**< */);
d4121 1
a4121 1
xcb_randr_provider_property_next (xcb_randr_provider_property_iterator_t *i  /**< */);
d4133 1
a4133 1
xcb_randr_provider_property_end (xcb_randr_provider_property_iterator_t i  /**< */);
d4144 1
a4144 1
xcb_randr_resource_change_next (xcb_randr_resource_change_iterator_t *i  /**< */);
d4156 1
a4156 1
xcb_randr_resource_change_end (xcb_randr_resource_change_iterator_t i  /**< */);
d4167 1
a4167 1
xcb_randr_notify_data_next (xcb_randr_notify_data_iterator_t *i  /**< */);
d4179 157
a4335 1
xcb_randr_notify_data_end (xcb_randr_notify_data_iterator_t i  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d25 1
a25 1
  
a1580 10

/*****************************************************************************
 **
 ** void xcb_randr_mode_next
 ** 
 ** @@param xcb_randr_mode_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1592 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_mode_end
 ** 
 ** @@param xcb_randr_mode_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1603 10

/*****************************************************************************
 **
 ** void xcb_randr_crtc_next
 ** 
 ** @@param xcb_randr_crtc_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1615 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_crtc_end
 ** 
 ** @@param xcb_randr_crtc_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1626 10

/*****************************************************************************
 **
 ** void xcb_randr_output_next
 ** 
 ** @@param xcb_randr_output_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1638 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_end
 ** 
 ** @@param xcb_randr_output_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1649 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_next
 ** 
 ** @@param xcb_randr_provider_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1661 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_end
 ** 
 ** @@param xcb_randr_provider_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1672 10

/*****************************************************************************
 **
 ** void xcb_randr_screen_size_next
 ** 
 ** @@param xcb_randr_screen_size_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1684 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_screen_size_end
 ** 
 ** @@param xcb_randr_screen_size_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1690 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_refresh_rates_rates
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a1693 10

/*****************************************************************************
 **
 ** int xcb_randr_refresh_rates_rates_length
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1696 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_refresh_rates_rates_end
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1707 10

/*****************************************************************************
 **
 ** void xcb_randr_refresh_rates_next
 ** 
 ** @@param xcb_randr_refresh_rates_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1719 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_refresh_rates_end
 ** 
 ** @@param xcb_randr_refresh_rates_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d1729 1
a1729 1
 * 
a1730 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_cookie_t xcb_randr_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_randr_query_version_cookie_t
 **
 *****************************************************************************/
 
d1742 1
a1742 1
 * 
a1746 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_cookie_t xcb_randr_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_randr_query_version_cookie_t
 **
 *****************************************************************************/
 
d1759 1
a1759 1
 * 
a1765 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_reply_t * xcb_randr_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_query_version_reply_t *
 **
 *****************************************************************************/
 
d1777 1
a1777 1
 * 
a1778 16

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_cookie_t xcb_randr_set_screen_config
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   timestamp
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@param uint16_t          sizeID
 ** @@param uint16_t          rotation
 ** @@param uint16_t          rate
 ** @@returns xcb_randr_set_screen_config_cookie_t
 **
 *****************************************************************************/
 
d1794 1
a1794 1
 * 
a1798 16

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_cookie_t xcb_randr_set_screen_config_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   timestamp
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@param uint16_t          sizeID
 ** @@param uint16_t          rotation
 ** @@param uint16_t          rate
 ** @@returns xcb_randr_set_screen_config_cookie_t
 **
 *****************************************************************************/
 
d1815 1
a1815 1
 * 
a1821 12

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_reply_t * xcb_randr_set_screen_config_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_randr_set_screen_config_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_randr_set_screen_config_reply_t *
 **
 *****************************************************************************/
 
d1833 1
a1833 1
 * 
a1837 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_select_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1849 1
a1849 1
 * 
a1850 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1865 1
a1865 1
 * 
a1866 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_cookie_t xcb_randr_get_screen_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_info_cookie_t
 **
 *****************************************************************************/
 
d1877 1
a1877 1
 * 
a1881 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_cookie_t xcb_randr_get_screen_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_info_cookie_t
 **
 *****************************************************************************/
 
a1885 10

/*****************************************************************************
 **
 ** xcb_randr_screen_size_t * xcb_randr_get_screen_info_sizes
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_screen_size_t *
 **
 *****************************************************************************/
 
a1888 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_info_sizes_length
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1891 10

/*****************************************************************************
 **
 ** xcb_randr_screen_size_iterator_t xcb_randr_get_screen_info_sizes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_screen_size_iterator_t
 **
 *****************************************************************************/
 
a1894 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_info_rates_length
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1897 10

/*****************************************************************************
 **
 ** xcb_randr_refresh_rates_iterator_t xcb_randr_get_screen_info_rates_iterator
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_refresh_rates_iterator_t
 **
 *****************************************************************************/
 
d1908 1
a1908 1
 * 
a1914 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_reply_t * xcb_randr_get_screen_info_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_get_screen_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_get_screen_info_reply_t *
 **
 *****************************************************************************/
 
d1926 1
a1926 1
 * 
a1927 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_cookie_t xcb_randr_get_screen_size_range
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_size_range_cookie_t
 **
 *****************************************************************************/
 
d1938 1
a1938 1
 * 
a1942 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_cookie_t xcb_randr_get_screen_size_range_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_size_range_cookie_t
 **
 *****************************************************************************/
 
d1954 1
a1954 1
 * 
a1960 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_reply_t * xcb_randr_get_screen_size_range_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_get_screen_size_range_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_get_screen_size_range_reply_t *
 **
 *****************************************************************************/
 
d1972 1
a1972 1
 * 
a1976 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_screen_size_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          mm_width
 ** @@param uint32_t          mm_height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1991 1
a1991 1
 * 
a1992 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_screen_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          mm_width
 ** @@param uint32_t          mm_height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a2008 10

/*****************************************************************************
 **
 ** void xcb_randr_mode_info_next
 ** 
 ** @@param xcb_randr_mode_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2020 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_mode_info_end
 ** 
 ** @@param xcb_randr_mode_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2033 1
a2033 1
 * 
a2034 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_cookie_t xcb_randr_get_screen_resources
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_cookie_t
 **
 *****************************************************************************/
 
d2045 1
a2045 1
 * 
a2049 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_cookie_t xcb_randr_get_screen_resources_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_cookie_t
 **
 *****************************************************************************/
 
a2053 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_screen_resources_crtcs
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a2056 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_crtcs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2059 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_crtcs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2062 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_screen_resources_outputs
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2065 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_outputs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2068 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_outputs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2071 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_t * xcb_randr_get_screen_resources_modes
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_mode_info_t *
 **
 *****************************************************************************/
 
a2074 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_modes_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2077 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_iterator_t xcb_randr_get_screen_resources_modes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_mode_info_iterator_t
 **
 *****************************************************************************/
 
a2080 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_screen_resources_names
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2083 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_names_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2086 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_names_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2097 1
a2097 1
 * 
a2103 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_reply_t * xcb_randr_get_screen_resources_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_randr_get_screen_resources_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_randr_get_screen_resources_reply_t *
 **
 *****************************************************************************/
 
d2118 1
a2118 1
 * 
a2119 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_cookie_t xcb_randr_get_output_info
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_timestamp_t     config_timestamp
 ** @@returns xcb_randr_get_output_info_cookie_t
 **
 *****************************************************************************/
 
d2131 1
a2131 1
 * 
a2135 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_cookie_t xcb_randr_get_output_info_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_timestamp_t     config_timestamp
 ** @@returns xcb_randr_get_output_info_cookie_t
 **
 *****************************************************************************/
 
a2140 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_output_info_crtcs
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a2143 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_crtcs_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2146 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_crtcs_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2149 10

/*****************************************************************************
 **
 ** xcb_randr_mode_t * xcb_randr_get_output_info_modes
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_mode_t *
 **
 *****************************************************************************/
 
a2152 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_modes_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2155 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_modes_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2158 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_output_info_clones
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2161 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_clones_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2164 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_clones_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2167 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_output_info_name
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2170 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_name_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2173 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_name_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2184 1
a2184 1
 * 
a2190 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_reply_t * xcb_randr_get_output_info_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_get_output_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_get_output_info_reply_t *
 **
 *****************************************************************************/
 
d2205 1
a2205 1
 * 
a2206 11

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_cookie_t xcb_randr_list_output_properties
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_randr_list_output_properties_cookie_t
 **
 *****************************************************************************/
 
d2217 1
a2217 1
 * 
a2221 11

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_cookie_t xcb_randr_list_output_properties_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_randr_list_output_properties_cookie_t
 **
 *****************************************************************************/
 
a2225 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_randr_list_output_properties_atoms
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a2228 10

/*****************************************************************************
 **
 ** int xcb_randr_list_output_properties_atoms_length
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2231 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_list_output_properties_atoms_end
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2242 1
a2242 1
 * 
a2248 12

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_reply_t * xcb_randr_list_output_properties_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_randr_list_output_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_randr_list_output_properties_reply_t *
 **
 *****************************************************************************/
 
d2263 1
a2263 1
 * 
a2264 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_cookie_t xcb_randr_query_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_randr_query_output_property_cookie_t
 **
 *****************************************************************************/
 
d2276 1
a2276 1
 * 
a2280 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_cookie_t xcb_randr_query_output_property_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_randr_query_output_property_cookie_t
 **
 *****************************************************************************/
 
a2285 10

/*****************************************************************************
 **
 ** int32_t * xcb_randr_query_output_property_valid_values
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a2288 10

/*****************************************************************************
 **
 ** int xcb_randr_query_output_property_valid_values_length
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2291 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_query_output_property_valid_values_end
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2302 1
a2302 1
 * 
a2308 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_reply_t * xcb_randr_query_output_property_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_query_output_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_query_output_property_reply_t *
 **
 *****************************************************************************/
 
d2324 1
a2324 1
 * 
a2328 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param uint8_t             pending
 ** @@param uint8_t             range
 ** @@param uint32_t            values_len
 ** @@param const int32_t      *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2344 1
a2344 1
 * 
a2345 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param uint8_t             pending
 ** @@param uint8_t             range
 ** @@param uint32_t            values_len
 ** @@param const int32_t      *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2364 1
a2364 1
 * 
a2368 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint8_t             format
 ** @@param uint8_t             mode
 ** @@param uint32_t            num_units
 ** @@param const void         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2385 1
a2385 1
 * 
a2386 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint8_t             format
 ** @@param uint8_t             mode
 ** @@param uint32_t            num_units
 ** @@param const void         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2403 1
a2403 1
 * 
a2407 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2419 1
a2419 1
 * 
a2420 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2435 1
a2435 1
 * 
a2436 17

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_cookie_t xcb_randr_get_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint32_t            long_offset
 ** @@param uint32_t            long_length
 ** @@param uint8_t             _delete
 ** @@param uint8_t             pending
 ** @@returns xcb_randr_get_output_property_cookie_t
 **
 *****************************************************************************/
 
d2453 1
a2453 1
 * 
a2457 17

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_cookie_t xcb_randr_get_output_property_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint32_t            long_offset
 ** @@param uint32_t            long_length
 ** @@param uint8_t             _delete
 ** @@param uint8_t             pending
 ** @@returns xcb_randr_get_output_property_cookie_t
 **
 *****************************************************************************/
 
a2467 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_output_property_data
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2470 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_property_data_length
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2473 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_property_data_end
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2484 1
a2484 1
 * 
a2490 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_reply_t * xcb_randr_get_output_property_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_randr_get_output_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_randr_get_output_property_reply_t *
 **
 *****************************************************************************/
 
d2506 1
a2506 1
 * 
a2507 14

/*****************************************************************************
 **
 ** xcb_randr_create_mode_cookie_t xcb_randr_create_mode
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_randr_mode_info_t  mode_info
 ** @@param uint32_t               name_len
 ** @@param const char            *name
 ** @@returns xcb_randr_create_mode_cookie_t
 **
 *****************************************************************************/
 
d2521 1
a2521 1
 * 
a2525 14

/*****************************************************************************
 **
 ** xcb_randr_create_mode_cookie_t xcb_randr_create_mode_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_randr_mode_info_t  mode_info
 ** @@param uint32_t               name_len
 ** @@param const char            *name
 ** @@returns xcb_randr_create_mode_cookie_t
 **
 *****************************************************************************/
 
d2540 1
a2540 1
 * 
a2546 12

/*****************************************************************************
 **
 ** xcb_randr_create_mode_reply_t * xcb_randr_create_mode_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_create_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_create_mode_reply_t *
 **
 *****************************************************************************/
 
d2558 1
a2558 1
 * 
a2562 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_destroy_mode_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_mode_t  mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2573 1
a2573 1
 * 
a2574 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_destroy_mode
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_mode_t  mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2585 1
a2585 1
 * 
a2589 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_add_output_mode_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2601 1
a2601 1
 * 
a2602 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_add_output_mode
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2614 1
a2614 1
 * 
a2618 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_mode_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2630 1
a2630 1
 * 
a2631 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_mode
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2646 1
a2646 1
 * 
a2647 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_cookie_t xcb_randr_get_crtc_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@returns xcb_randr_get_crtc_info_cookie_t
 **
 *****************************************************************************/
 
d2659 1
a2659 1
 * 
a2663 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_cookie_t xcb_randr_get_crtc_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@returns xcb_randr_get_crtc_info_cookie_t
 **
 *****************************************************************************/
 
a2668 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_crtc_info_outputs
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2671 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_info_outputs_length
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2674 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_info_outputs_end
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2677 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_crtc_info_possible
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2680 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_info_possible_length
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2683 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_info_possible_end
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2694 1
a2694 1
 * 
a2700 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_reply_t * xcb_randr_get_crtc_info_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_get_crtc_info_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_get_crtc_info_reply_t *
 **
 *****************************************************************************/
 
d2716 1
a2716 1
 * 
a2717 19

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_cookie_t xcb_randr_set_crtc_config
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_timestamp_t           timestamp
 ** @@param xcb_timestamp_t           config_timestamp
 ** @@param int16_t                   x
 ** @@param int16_t                   y
 ** @@param xcb_randr_mode_t          mode
 ** @@param uint16_t                  rotation
 ** @@param uint32_t                  outputs_len
 ** @@param const xcb_randr_output_t *outputs
 ** @@returns xcb_randr_set_crtc_config_cookie_t
 **
 *****************************************************************************/
 
d2736 1
a2736 1
 * 
a2740 19

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_cookie_t xcb_randr_set_crtc_config_unchecked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_timestamp_t           timestamp
 ** @@param xcb_timestamp_t           config_timestamp
 ** @@param int16_t                   x
 ** @@param int16_t                   y
 ** @@param xcb_randr_mode_t          mode
 ** @@param uint16_t                  rotation
 ** @@param uint32_t                  outputs_len
 ** @@param const xcb_randr_output_t *outputs
 ** @@returns xcb_randr_set_crtc_config_cookie_t
 **
 *****************************************************************************/
 
d2760 1
a2760 1
 * 
a2766 12

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_reply_t * xcb_randr_set_crtc_config_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_set_crtc_config_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_set_crtc_config_reply_t *
 **
 *****************************************************************************/
 
d2778 1
a2778 1
 * 
a2779 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_cookie_t xcb_randr_get_crtc_gamma_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_size_cookie_t
 **
 *****************************************************************************/
 
d2790 1
a2790 1
 * 
a2794 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_cookie_t xcb_randr_get_crtc_gamma_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_size_cookie_t
 **
 *****************************************************************************/
 
d2806 1
a2806 1
 * 
a2812 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_reply_t * xcb_randr_get_crtc_gamma_size_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_randr_get_crtc_gamma_size_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_randr_get_crtc_gamma_size_reply_t *
 **
 *****************************************************************************/
 
d2827 1
a2827 1
 * 
a2828 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_cookie_t xcb_randr_get_crtc_gamma
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_cookie_t
 **
 *****************************************************************************/
 
d2839 1
a2839 1
 * 
a2843 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_cookie_t xcb_randr_get_crtc_gamma_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_cookie_t
 **
 *****************************************************************************/
 
a2847 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_red
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2850 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_red_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2853 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_red_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2856 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_green
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2859 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_green_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2862 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_green_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2865 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_blue
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2868 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_blue_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2871 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_blue_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2882 1
a2882 1
 * 
a2888 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_reply_t * xcb_randr_get_crtc_gamma_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_randr_get_crtc_gamma_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_randr_get_crtc_gamma_reply_t *
 **
 *****************************************************************************/
 
d2903 1
a2903 1
 * 
a2907 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_gamma_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param uint16_t          size
 ** @@param const uint16_t   *red
 ** @@param const uint16_t   *green
 ** @@param const uint16_t   *blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2922 1
a2922 1
 * 
a2923 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_gamma
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param uint16_t          size
 ** @@param const uint16_t   *red
 ** @@param const uint16_t   *green
 ** @@param const uint16_t   *blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2941 1
a2941 1
 * 
a2942 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_cookie_t xcb_randr_get_screen_resources_current
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_current_cookie_t
 **
 *****************************************************************************/
 
d2953 1
a2953 1
 * 
a2957 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_cookie_t xcb_randr_get_screen_resources_current_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_current_cookie_t
 **
 *****************************************************************************/
 
a2961 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_screen_resources_current_crtcs
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a2964 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_crtcs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2967 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_crtcs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2970 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_screen_resources_current_outputs
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2973 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_outputs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2976 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_outputs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2979 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_t * xcb_randr_get_screen_resources_current_modes
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_mode_info_t *
 **
 *****************************************************************************/
 
a2982 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_modes_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2985 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_iterator_t xcb_randr_get_screen_resources_current_modes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_mode_info_iterator_t
 **
 *****************************************************************************/
 
a2988 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_screen_resources_current_names
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2991 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_names_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2994 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_names_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3005 1
a3005 1
 * 
a3011 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_reply_t * xcb_randr_get_screen_resources_current_reply
 ** 
 ** @@param xcb_connection_t                                 *c
 ** @@param xcb_randr_get_screen_resources_current_cookie_t   cookie
 ** @@param xcb_generic_error_t                             **e
 ** @@returns xcb_randr_get_screen_resources_current_reply_t *
 **
 *****************************************************************************/
 
d3027 1
a3027 1
 * 
a3031 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_transform_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_render_transform_t    transform
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter_name
 ** @@param uint32_t                  filter_params_len
 ** @@param const xcb_render_fixed_t *filter_params
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3047 1
a3047 1
 * 
a3048 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_transform
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_render_transform_t    transform
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter_name
 ** @@param uint32_t                  filter_params_len
 ** @@param const xcb_render_fixed_t *filter_params
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3067 1
a3067 1
 * 
a3068 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_cookie_t xcb_randr_get_crtc_transform
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_transform_cookie_t
 **
 *****************************************************************************/
 
d3079 1
a3079 1
 * 
a3083 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_cookie_t xcb_randr_get_crtc_transform_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_transform_cookie_t
 **
 *****************************************************************************/
 
a3087 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_crtc_transform_pending_filter_name
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3090 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_pending_filter_name_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3093 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_pending_filter_name_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3096 10

/*****************************************************************************
 **
 ** xcb_render_fixed_t * xcb_randr_get_crtc_transform_pending_params
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_render_fixed_t *
 **
 *****************************************************************************/
 
a3099 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_pending_params_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3102 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_pending_params_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3105 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_crtc_transform_current_filter_name
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3108 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_current_filter_name_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3111 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_current_filter_name_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3114 10

/*****************************************************************************
 **
 ** xcb_render_fixed_t * xcb_randr_get_crtc_transform_current_params
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_render_fixed_t *
 **
 *****************************************************************************/
 
a3117 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_current_params_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3120 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_current_params_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3131 1
a3131 1
 * 
a3137 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_reply_t * xcb_randr_get_crtc_transform_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_randr_get_crtc_transform_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_randr_get_crtc_transform_reply_t *
 **
 *****************************************************************************/
 
d3149 1
a3149 1
 * 
a3150 11

/*****************************************************************************
 **
 ** xcb_randr_get_panning_cookie_t xcb_randr_get_panning
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_panning_cookie_t
 **
 *****************************************************************************/
 
d3161 1
a3161 1
 * 
a3165 11

/*****************************************************************************
 **
 ** xcb_randr_get_panning_cookie_t xcb_randr_get_panning_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_panning_cookie_t
 **
 *****************************************************************************/
 
d3177 1
a3177 1
 * 
a3183 12

/*****************************************************************************
 **
 ** xcb_randr_get_panning_reply_t * xcb_randr_get_panning_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_get_panning_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_get_panning_reply_t *
 **
 *****************************************************************************/
 
d3195 1
a3195 1
 * 
a3196 24

/*****************************************************************************
 **
 ** xcb_randr_set_panning_cookie_t xcb_randr_set_panning
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   timestamp
 ** @@param uint16_t          left
 ** @@param uint16_t          top
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          track_left
 ** @@param uint16_t          track_top
 ** @@param uint16_t          track_width
 ** @@param uint16_t          track_height
 ** @@param int16_t           border_left
 ** @@param int16_t           border_top
 ** @@param int16_t           border_right
 ** @@param int16_t           border_bottom
 ** @@returns xcb_randr_set_panning_cookie_t
 **
 *****************************************************************************/
 
d3220 1
a3220 1
 * 
a3224 24

/*****************************************************************************
 **
 ** xcb_randr_set_panning_cookie_t xcb_randr_set_panning_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   timestamp
 ** @@param uint16_t          left
 ** @@param uint16_t          top
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          track_left
 ** @@param uint16_t          track_top
 ** @@param uint16_t          track_width
 ** @@param uint16_t          track_height
 ** @@param int16_t           border_left
 ** @@param int16_t           border_top
 ** @@param int16_t           border_right
 ** @@param int16_t           border_bottom
 ** @@returns xcb_randr_set_panning_cookie_t
 **
 *****************************************************************************/
 
d3249 1
a3249 1
 * 
a3255 12

/*****************************************************************************
 **
 ** xcb_randr_set_panning_reply_t * xcb_randr_set_panning_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_set_panning_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_set_panning_reply_t *
 **
 *****************************************************************************/
 
d3267 1
a3267 1
 * 
a3271 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_output_primary_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_window_t        window
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3283 1
a3283 1
 * 
a3284 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_output_primary
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_window_t        window
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3296 1
a3296 1
 * 
a3297 11

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_cookie_t xcb_randr_get_output_primary
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_output_primary_cookie_t
 **
 *****************************************************************************/
 
d3308 1
a3308 1
 * 
a3312 11

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_cookie_t xcb_randr_get_output_primary_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_output_primary_cookie_t
 **
 *****************************************************************************/
 
d3324 1
a3324 1
 * 
a3330 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_reply_t * xcb_randr_get_output_primary_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_randr_get_output_primary_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_randr_get_output_primary_reply_t *
 **
 *****************************************************************************/
 
d3345 1
a3345 1
 * 
a3346 11

/*****************************************************************************
 **
 ** xcb_randr_get_providers_cookie_t xcb_randr_get_providers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_providers_cookie_t
 **
 *****************************************************************************/
 
d3357 1
a3357 1
 * 
a3361 11

/*****************************************************************************
 **
 ** xcb_randr_get_providers_cookie_t xcb_randr_get_providers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_providers_cookie_t
 **
 *****************************************************************************/
 
a3365 10

/*****************************************************************************
 **
 ** xcb_randr_provider_t * xcb_randr_get_providers_providers
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns xcb_randr_provider_t *
 **
 *****************************************************************************/
 
a3368 10

/*****************************************************************************
 **
 ** int xcb_randr_get_providers_providers_length
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3371 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_providers_providers_end
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3382 1
a3382 1
 * 
a3388 12

/*****************************************************************************
 **
 ** xcb_randr_get_providers_reply_t * xcb_randr_get_providers_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_get_providers_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_get_providers_reply_t *
 **
 *****************************************************************************/
 
d3403 1
a3403 1
 * 
a3404 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_cookie_t xcb_randr_get_provider_info
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_randr_get_provider_info_cookie_t
 **
 *****************************************************************************/
 
d3416 1
a3416 1
 * 
a3420 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_cookie_t xcb_randr_get_provider_info_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_randr_get_provider_info_cookie_t
 **
 *****************************************************************************/
 
a3425 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_provider_info_crtcs
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a3428 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_crtcs_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3431 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_crtcs_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3434 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_provider_info_outputs
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a3437 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_outputs_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3440 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_outputs_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3443 10

/*****************************************************************************
 **
 ** xcb_randr_provider_t * xcb_randr_get_provider_info_associated_providers
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_provider_t *
 **
 *****************************************************************************/
 
a3446 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_associated_providers_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3449 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_associated_providers_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3452 10

/*****************************************************************************
 **
 ** uint32_t * xcb_randr_get_provider_info_associated_capability
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a3455 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_associated_capability_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3458 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_associated_capability_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3461 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_provider_info_name
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3464 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_name_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3467 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_name_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3478 1
a3478 1
 * 
a3484 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_reply_t * xcb_randr_get_provider_info_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_randr_get_provider_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_randr_get_provider_info_reply_t *
 **
 *****************************************************************************/
 
d3496 1
a3496 1
 * 
a3500 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_offload_sink_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  sink_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3513 1
a3513 1
 * 
a3514 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_offload_sink
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  sink_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3527 1
a3527 1
 * 
a3531 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_output_source_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  source_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3544 1
a3544 1
 * 
a3545 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_output_source
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  source_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3561 1
a3561 1
 * 
a3562 11

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_cookie_t xcb_randr_list_provider_properties
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@returns xcb_randr_list_provider_properties_cookie_t
 **
 *****************************************************************************/
 
d3573 1
a3573 1
 * 
a3577 11

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_cookie_t xcb_randr_list_provider_properties_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@returns xcb_randr_list_provider_properties_cookie_t
 **
 *****************************************************************************/
 
a3581 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_randr_list_provider_properties_atoms
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a3584 10

/*****************************************************************************
 **
 ** int xcb_randr_list_provider_properties_atoms_length
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3587 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_list_provider_properties_atoms_end
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3598 1
a3598 1
 * 
a3604 12

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_reply_t * xcb_randr_list_provider_properties_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_randr_list_provider_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_randr_list_provider_properties_reply_t *
 **
 *****************************************************************************/
 
d3619 1
a3619 1
 * 
a3620 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_cookie_t xcb_randr_query_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_randr_query_provider_property_cookie_t
 **
 *****************************************************************************/
 
d3632 1
a3632 1
 * 
a3636 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_cookie_t xcb_randr_query_provider_property_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_randr_query_provider_property_cookie_t
 **
 *****************************************************************************/
 
a3641 10

/*****************************************************************************
 **
 ** int32_t * xcb_randr_query_provider_property_valid_values
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a3644 10

/*****************************************************************************
 **
 ** int xcb_randr_query_provider_property_valid_values_length
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3647 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_query_provider_property_valid_values_end
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3658 1
a3658 1
 * 
a3664 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_reply_t * xcb_randr_query_provider_property_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_randr_query_provider_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_randr_query_provider_property_reply_t *
 **
 *****************************************************************************/
 
d3680 1
a3680 1
 * 
a3684 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param uint8_t               pending
 ** @@param uint8_t               range
 ** @@param uint32_t              values_len
 ** @@param const int32_t        *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3700 1
a3700 1
 * 
a3701 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param uint8_t               pending
 ** @@param uint8_t               range
 ** @@param uint32_t              values_len
 ** @@param const int32_t        *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3720 1
a3720 1
 * 
a3724 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint8_t               format
 ** @@param uint8_t               mode
 ** @@param uint32_t              num_items
 ** @@param const void           *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3741 1
a3741 1
 * 
a3742 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint8_t               format
 ** @@param uint8_t               mode
 ** @@param uint32_t              num_items
 ** @@param const void           *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3759 1
a3759 1
 * 
a3763 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3775 1
a3775 1
 * 
a3776 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3791 1
a3791 1
 * 
a3792 17

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_cookie_t xcb_randr_get_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint32_t              long_offset
 ** @@param uint32_t              long_length
 ** @@param uint8_t               _delete
 ** @@param uint8_t               pending
 ** @@returns xcb_randr_get_provider_property_cookie_t
 **
 *****************************************************************************/
 
d3809 1
a3809 1
 * 
a3813 17

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_cookie_t xcb_randr_get_provider_property_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint32_t              long_offset
 ** @@param uint32_t              long_length
 ** @@param uint8_t               _delete
 ** @@param uint8_t               pending
 ** @@returns xcb_randr_get_provider_property_cookie_t
 **
 *****************************************************************************/
 
a3823 10

/*****************************************************************************
 **
 ** void * xcb_randr_get_provider_property_data
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a3826 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_property_data_length
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3829 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_property_data_end
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3840 1
a3840 1
 * 
a3846 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_reply_t * xcb_randr_get_provider_property_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_get_provider_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_get_provider_property_reply_t *
 **
 *****************************************************************************/
 
a3859 10

/*****************************************************************************
 **
 ** void xcb_randr_crtc_change_next
 ** 
 ** @@param xcb_randr_crtc_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3871 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_crtc_change_end
 ** 
 ** @@param xcb_randr_crtc_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3882 10

/*****************************************************************************
 **
 ** void xcb_randr_output_change_next
 ** 
 ** @@param xcb_randr_output_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3894 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_change_end
 ** 
 ** @@param xcb_randr_output_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3905 10

/*****************************************************************************
 **
 ** void xcb_randr_output_property_next
 ** 
 ** @@param xcb_randr_output_property_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3917 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_property_end
 ** 
 ** @@param xcb_randr_output_property_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3928 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_change_next
 ** 
 ** @@param xcb_randr_provider_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3940 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_change_end
 ** 
 ** @@param xcb_randr_provider_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3951 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_property_next
 ** 
 ** @@param xcb_randr_provider_property_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3963 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_property_end
 ** 
 ** @@param xcb_randr_provider_property_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3974 10

/*****************************************************************************
 **
 ** void xcb_randr_resource_change_next
 ** 
 ** @@param xcb_randr_resource_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3986 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_resource_change_end
 ** 
 ** @@param xcb_randr_resource_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3997 10

/*****************************************************************************
 **
 ** void xcb_randr_notify_data_next
 ** 
 ** @@param xcb_randr_notify_data_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4009 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_notify_data_end
 ** 
 ** @@param xcb_randr_notify_data_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d24 1
a24 1
#define XCB_RANDR_MINOR_VERSION 3
d61 11
d108 12
d250 4
a253 1
    XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY = 8
d445 3
a447 3
    XCB_RANDR_CONNECTION_CONNECTED,
    XCB_RANDR_CONNECTION_DISCONNECTED,
    XCB_RANDR_CONNECTION_UNKNOWN
d920 7
d1114 266
d1405 4
a1408 1
    XCB_RANDR_NOTIFY_OUTPUT_PROPERTY = 2
d1482 58
d1543 6
a1548 3
    xcb_randr_crtc_change_t     cc; /**<  */
    xcb_randr_output_change_t   oc; /**<  */
    xcb_randr_output_property_t op; /**<  */
d1704 43
d5300 3
a5303 2
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_crtc_change_iterator_t
d5305 5
a5309 3
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_crtc_change_t)
d5314 1
a5314 1
 ** void xcb_randr_crtc_change_next
d5316 3
a5318 2
 ** @@param xcb_randr_crtc_change_iterator_t *i
 ** @@returns void
d5322 3
a5324 2
void
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i  /**< */);
a5326 3
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_crtc_change_iterator_t
 * @@return  The iterator pointing to the last element
d5328 8
a5335 3
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
d5340 1
a5340 1
 ** xcb_generic_iterator_t xcb_randr_crtc_change_end
d5342 3
a5344 2
 ** @@param xcb_randr_crtc_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
d5348 3
a5350 2
xcb_generic_iterator_t
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i  /**< */);
a5351 8
/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_randr_output_change_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_randr_output_change_t)
 */
d5355 1
a5355 1
 ** void xcb_randr_output_change_next
d5357 2
a5358 2
 ** @@param xcb_randr_output_change_iterator_t *i
 ** @@returns void
d5362 2
a5363 2
void
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i  /**< */);
a5364 9
/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_randr_output_change_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
d5368 1
a5368 1
 ** xcb_generic_iterator_t xcb_randr_output_change_end
d5370 2
a5371 2
 ** @@param xcb_randr_output_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
d5375 1124
a6498 2
xcb_generic_iterator_t
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i  /**< */);
d6542 129
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d1382 3
d1468 1
a1468 1
 * Delivers a request to the X server
d1493 1
a1493 1
 * Delivers a request to the X server
d1552 1
a1552 1
 * Delivers a request to the X server
d1585 1
a1585 1
 * Delivers a request to the X server
d1652 1
a1652 1
 * Delivers a request to the X server
d1680 1
a1680 1
 * Delivers a request to the X server
d1704 3
d1708 1
a1708 1
 * Delivers a request to the X server
d1731 1
a1731 1
 * Delivers a request to the X server
d1853 1
a1853 1
 * Delivers a request to the X server
d1876 1
a1876 1
 * Delivers a request to the X server
d1933 1
a1933 1
 * Delivers a request to the X server
d1967 1
a1967 1
 * Delivers a request to the X server
d2040 3
d2044 1
a2044 1
 * Delivers a request to the X server
d2067 1
a2067 1
 * Delivers a request to the X server
d2279 3
d2283 1
a2283 1
 * Delivers a request to the X server
d2308 1
a2308 1
 * Delivers a request to the X server
d2522 3
d2526 1
a2526 1
 * Delivers a request to the X server
d2549 1
a2549 1
 * Delivers a request to the X server
d2644 3
d2648 1
a2648 1
 * Delivers a request to the X server
d2673 1
a2673 1
 * Delivers a request to the X server
d2770 4
d2775 1
a2775 1
 * Delivers a request to the X server
d2811 1
a2811 1
 * Delivers a request to the X server
d2843 3
d2847 1
a2847 1
 * Delivers a request to the X server
d2885 1
a2885 1
 * Delivers a request to the X server
d2920 1
a2920 1
 * Delivers a request to the X server
d2948 1
a2948 1
 * Delivers a request to the X server
d2972 3
d2976 1
a2976 1
 * Delivers a request to the X server
d3011 1
a3011 1
 * Delivers a request to the X server
d3118 4
d3123 1
a3123 1
 * Delivers a request to the X server
d3152 1
a3152 1
 * Delivers a request to the X server
d3215 1
a3215 1
 * Delivers a request to the X server
d3241 1
a3241 1
 * Delivers a request to the X server
d3264 1
a3264 1
 * Delivers a request to the X server
d3292 1
a3292 1
 * Delivers a request to the X server
d3317 1
a3317 1
 * Delivers a request to the X server
d3345 1
a3345 1
 * Delivers a request to the X server
d3369 3
d3373 1
a3373 1
 * Delivers a request to the X server
d3398 1
a3398 1
 * Delivers a request to the X server
d3534 4
d3539 1
a3539 1
 * Delivers a request to the X server
d3578 1
a3578 1
 * Delivers a request to the X server
d3651 1
a3651 1
 * Delivers a request to the X server
d3674 1
a3674 1
 * Delivers a request to the X server
d3730 3
d3734 1
a3734 1
 * Delivers a request to the X server
d3757 1
a3757 1
 * Delivers a request to the X server
d3930 3
d3934 1
a3934 1
 * Delivers a request to the X server
d3968 1
a3968 1
 * Delivers a request to the X server
d3998 3
d4002 1
a4002 1
 * Delivers a request to the X server
d4025 1
a4025 1
 * Delivers a request to the X server
d4237 4
d4242 1
a4242 1
 * Delivers a request to the X server
d4278 1
a4278 1
 * Delivers a request to the X server
d4310 3
d4314 1
a4314 1
 * Delivers a request to the X server
d4337 1
a4337 1
 * Delivers a request to the X server
d4550 1
a4550 1
 * Delivers a request to the X server
d4573 1
a4573 1
 * Delivers a request to the X server
d4630 1
a4630 1
 * Delivers a request to the X server
d4679 1
a4679 1
 * Delivers a request to the X server
d4762 1
a4762 1
 * Delivers a request to the X server
d4790 1
a4790 1
 * Delivers a request to the X server
d4815 1
a4815 1
 * Delivers a request to the X server
d4838 1
a4838 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@d17 1
d24 1
a24 1
#define XCB_RANDR_MINOR_VERSION 2
d175 7
d223 6
a228 6
typedef enum xcb_randr_set_config_t {
    XCB_RANDR_SET_CONFIG_SUCCESS = 0,
    XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME = 1,
    XCB_RANDR_SET_CONFIG_INVALID_TIME = 2,
    XCB_RANDR_SET_CONFIG_FAILED = 3
} xcb_randr_set_config_t;
d857 223
a1079 6
typedef enum xcb_randr_notify_mask_t {
    XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE = 1,
    XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE = 2,
    XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE = 4,
    XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY = 8
} xcb_randr_notify_mask_t;
d3952 886
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
