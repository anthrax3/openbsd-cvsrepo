head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xvmc.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_XvMC_API XCB XvMC API
 * @@brief XvMC XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XVMC_H
#define __XVMC_H

#include "xcb.h"
#include "xv.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XVMC_MAJOR_VERSION 1
#define XCB_XVMC_MINOR_VERSION 1

extern xcb_extension_t xcb_xvmc_id;

typedef uint32_t xcb_xvmc_context_t;

/**
 * @@brief xcb_xvmc_context_iterator_t
 **/
typedef struct xcb_xvmc_context_iterator_t {
    xcb_xvmc_context_t *data;
    int                 rem;
    int                 index;
} xcb_xvmc_context_iterator_t;

typedef uint32_t xcb_xvmc_surface_t;

/**
 * @@brief xcb_xvmc_surface_iterator_t
 **/
typedef struct xcb_xvmc_surface_iterator_t {
    xcb_xvmc_surface_t *data;
    int                 rem;
    int                 index;
} xcb_xvmc_surface_iterator_t;

typedef uint32_t xcb_xvmc_subpicture_t;

/**
 * @@brief xcb_xvmc_subpicture_iterator_t
 **/
typedef struct xcb_xvmc_subpicture_iterator_t {
    xcb_xvmc_subpicture_t *data;
    int                    rem;
    int                    index;
} xcb_xvmc_subpicture_iterator_t;

/**
 * @@brief xcb_xvmc_surface_info_t
 **/
typedef struct xcb_xvmc_surface_info_t {
    xcb_xvmc_surface_t id;
    uint16_t           chroma_format;
    uint16_t           pad0;
    uint16_t           max_width;
    uint16_t           max_height;
    uint16_t           subpicture_max_width;
    uint16_t           subpicture_max_height;
    uint32_t           mc_type;
    uint32_t           flags;
} xcb_xvmc_surface_info_t;

/**
 * @@brief xcb_xvmc_surface_info_iterator_t
 **/
typedef struct xcb_xvmc_surface_info_iterator_t {
    xcb_xvmc_surface_info_t *data;
    int                      rem;
    int                      index;
} xcb_xvmc_surface_info_iterator_t;

/**
 * @@brief xcb_xvmc_query_version_cookie_t
 **/
typedef struct xcb_xvmc_query_version_cookie_t {
    unsigned int sequence;
} xcb_xvmc_query_version_cookie_t;

/** Opcode for xcb_xvmc_query_version. */
#define XCB_XVMC_QUERY_VERSION 0

/**
 * @@brief xcb_xvmc_query_version_request_t
 **/
typedef struct xcb_xvmc_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xvmc_query_version_request_t;

/**
 * @@brief xcb_xvmc_query_version_reply_t
 **/
typedef struct xcb_xvmc_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major;
    uint32_t minor;
} xcb_xvmc_query_version_reply_t;

/**
 * @@brief xcb_xvmc_list_surface_types_cookie_t
 **/
typedef struct xcb_xvmc_list_surface_types_cookie_t {
    unsigned int sequence;
} xcb_xvmc_list_surface_types_cookie_t;

/** Opcode for xcb_xvmc_list_surface_types. */
#define XCB_XVMC_LIST_SURFACE_TYPES 1

/**
 * @@brief xcb_xvmc_list_surface_types_request_t
 **/
typedef struct xcb_xvmc_list_surface_types_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_xv_port_t port_id;
} xcb_xvmc_list_surface_types_request_t;

/**
 * @@brief xcb_xvmc_list_surface_types_reply_t
 **/
typedef struct xcb_xvmc_list_surface_types_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num;
    uint8_t  pad1[20];
} xcb_xvmc_list_surface_types_reply_t;

/**
 * @@brief xcb_xvmc_create_context_cookie_t
 **/
typedef struct xcb_xvmc_create_context_cookie_t {
    unsigned int sequence;
} xcb_xvmc_create_context_cookie_t;

/** Opcode for xcb_xvmc_create_context. */
#define XCB_XVMC_CREATE_CONTEXT 2

/**
 * @@brief xcb_xvmc_create_context_request_t
 **/
typedef struct xcb_xvmc_create_context_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_xvmc_context_t context_id;
    xcb_xv_port_t      port_id;
    xcb_xvmc_surface_t surface_id;
    uint16_t           width;
    uint16_t           height;
    uint32_t           flags;
} xcb_xvmc_create_context_request_t;

/**
 * @@brief xcb_xvmc_create_context_reply_t
 **/
typedef struct xcb_xvmc_create_context_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t width_actual;
    uint16_t height_actual;
    uint32_t flags_return;
    uint8_t  pad1[20];
} xcb_xvmc_create_context_reply_t;

/** Opcode for xcb_xvmc_destroy_context. */
#define XCB_XVMC_DESTROY_CONTEXT 3

/**
 * @@brief xcb_xvmc_destroy_context_request_t
 **/
typedef struct xcb_xvmc_destroy_context_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_xvmc_context_t context_id;
} xcb_xvmc_destroy_context_request_t;

/**
 * @@brief xcb_xvmc_create_surface_cookie_t
 **/
typedef struct xcb_xvmc_create_surface_cookie_t {
    unsigned int sequence;
} xcb_xvmc_create_surface_cookie_t;

/** Opcode for xcb_xvmc_create_surface. */
#define XCB_XVMC_CREATE_SURFACE 4

/**
 * @@brief xcb_xvmc_create_surface_request_t
 **/
typedef struct xcb_xvmc_create_surface_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_xvmc_surface_t surface_id;
    xcb_xvmc_context_t context_id;
} xcb_xvmc_create_surface_request_t;

/**
 * @@brief xcb_xvmc_create_surface_reply_t
 **/
typedef struct xcb_xvmc_create_surface_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_xvmc_create_surface_reply_t;

/** Opcode for xcb_xvmc_destroy_surface. */
#define XCB_XVMC_DESTROY_SURFACE 5

/**
 * @@brief xcb_xvmc_destroy_surface_request_t
 **/
typedef struct xcb_xvmc_destroy_surface_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_xvmc_surface_t surface_id;
} xcb_xvmc_destroy_surface_request_t;

/**
 * @@brief xcb_xvmc_create_subpicture_cookie_t
 **/
typedef struct xcb_xvmc_create_subpicture_cookie_t {
    unsigned int sequence;
} xcb_xvmc_create_subpicture_cookie_t;

/** Opcode for xcb_xvmc_create_subpicture. */
#define XCB_XVMC_CREATE_SUBPICTURE 6

/**
 * @@brief xcb_xvmc_create_subpicture_request_t
 **/
typedef struct xcb_xvmc_create_subpicture_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_xvmc_subpicture_t subpicture_id;
    xcb_xvmc_context_t    context;
    uint32_t              xvimage_id;
    uint16_t              width;
    uint16_t              height;
} xcb_xvmc_create_subpicture_request_t;

/**
 * @@brief xcb_xvmc_create_subpicture_reply_t
 **/
typedef struct xcb_xvmc_create_subpicture_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t width_actual;
    uint16_t height_actual;
    uint16_t num_palette_entries;
    uint16_t entry_bytes;
    uint8_t  component_order[4];
    uint8_t  pad1[12];
} xcb_xvmc_create_subpicture_reply_t;

/** Opcode for xcb_xvmc_destroy_subpicture. */
#define XCB_XVMC_DESTROY_SUBPICTURE 7

/**
 * @@brief xcb_xvmc_destroy_subpicture_request_t
 **/
typedef struct xcb_xvmc_destroy_subpicture_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_xvmc_subpicture_t subpicture_id;
} xcb_xvmc_destroy_subpicture_request_t;

/**
 * @@brief xcb_xvmc_list_subpicture_types_cookie_t
 **/
typedef struct xcb_xvmc_list_subpicture_types_cookie_t {
    unsigned int sequence;
} xcb_xvmc_list_subpicture_types_cookie_t;

/** Opcode for xcb_xvmc_list_subpicture_types. */
#define XCB_XVMC_LIST_SUBPICTURE_TYPES 8

/**
 * @@brief xcb_xvmc_list_subpicture_types_request_t
 **/
typedef struct xcb_xvmc_list_subpicture_types_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_xv_port_t      port_id;
    xcb_xvmc_surface_t surface_id;
} xcb_xvmc_list_subpicture_types_request_t;

/**
 * @@brief xcb_xvmc_list_subpicture_types_reply_t
 **/
typedef struct xcb_xvmc_list_subpicture_types_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num;
    uint8_t  pad1[20];
} xcb_xvmc_list_subpicture_types_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xvmc_context_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xvmc_context_t)
 */
void
xcb_xvmc_context_next (xcb_xvmc_context_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xvmc_context_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xvmc_context_end (xcb_xvmc_context_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xvmc_surface_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xvmc_surface_t)
 */
void
xcb_xvmc_surface_next (xcb_xvmc_surface_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xvmc_surface_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xvmc_surface_end (xcb_xvmc_surface_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xvmc_subpicture_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xvmc_subpicture_t)
 */
void
xcb_xvmc_subpicture_next (xcb_xvmc_subpicture_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xvmc_subpicture_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xvmc_subpicture_end (xcb_xvmc_subpicture_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xvmc_surface_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xvmc_surface_info_t)
 */
void
xcb_xvmc_surface_info_next (xcb_xvmc_surface_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xvmc_surface_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xvmc_surface_info_end (xcb_xvmc_surface_info_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_query_version_cookie_t
xcb_xvmc_query_version (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_query_version_cookie_t
xcb_xvmc_query_version_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_query_version_reply_t *
xcb_xvmc_query_version_reply (xcb_connection_t                 *c,
                              xcb_xvmc_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_xvmc_list_surface_types_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_list_surface_types_cookie_t
xcb_xvmc_list_surface_types (xcb_connection_t *c,
                             xcb_xv_port_t     port_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_list_surface_types_cookie_t
xcb_xvmc_list_surface_types_unchecked (xcb_connection_t *c,
                                       xcb_xv_port_t     port_id);

xcb_xvmc_surface_info_t *
xcb_xvmc_list_surface_types_surfaces (const xcb_xvmc_list_surface_types_reply_t *R);

int
xcb_xvmc_list_surface_types_surfaces_length (const xcb_xvmc_list_surface_types_reply_t *R);

xcb_xvmc_surface_info_iterator_t
xcb_xvmc_list_surface_types_surfaces_iterator (const xcb_xvmc_list_surface_types_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_list_surface_types_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_list_surface_types_reply_t *
xcb_xvmc_list_surface_types_reply (xcb_connection_t                      *c,
                                   xcb_xvmc_list_surface_types_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

int
xcb_xvmc_create_context_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_create_context_cookie_t
xcb_xvmc_create_context (xcb_connection_t   *c,
                         xcb_xvmc_context_t  context_id,
                         xcb_xv_port_t       port_id,
                         xcb_xvmc_surface_t  surface_id,
                         uint16_t            width,
                         uint16_t            height,
                         uint32_t            flags);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_create_context_cookie_t
xcb_xvmc_create_context_unchecked (xcb_connection_t   *c,
                                   xcb_xvmc_context_t  context_id,
                                   xcb_xv_port_t       port_id,
                                   xcb_xvmc_surface_t  surface_id,
                                   uint16_t            width,
                                   uint16_t            height,
                                   uint32_t            flags);

uint32_t *
xcb_xvmc_create_context_priv_data (const xcb_xvmc_create_context_reply_t *R);

int
xcb_xvmc_create_context_priv_data_length (const xcb_xvmc_create_context_reply_t *R);

xcb_generic_iterator_t
xcb_xvmc_create_context_priv_data_end (const xcb_xvmc_create_context_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_create_context_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_create_context_reply_t *
xcb_xvmc_create_context_reply (xcb_connection_t                  *c,
                               xcb_xvmc_create_context_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xvmc_destroy_context_checked (xcb_connection_t   *c,
                                  xcb_xvmc_context_t  context_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xvmc_destroy_context (xcb_connection_t   *c,
                          xcb_xvmc_context_t  context_id);

int
xcb_xvmc_create_surface_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_create_surface_cookie_t
xcb_xvmc_create_surface (xcb_connection_t   *c,
                         xcb_xvmc_surface_t  surface_id,
                         xcb_xvmc_context_t  context_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_create_surface_cookie_t
xcb_xvmc_create_surface_unchecked (xcb_connection_t   *c,
                                   xcb_xvmc_surface_t  surface_id,
                                   xcb_xvmc_context_t  context_id);

uint32_t *
xcb_xvmc_create_surface_priv_data (const xcb_xvmc_create_surface_reply_t *R);

int
xcb_xvmc_create_surface_priv_data_length (const xcb_xvmc_create_surface_reply_t *R);

xcb_generic_iterator_t
xcb_xvmc_create_surface_priv_data_end (const xcb_xvmc_create_surface_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_create_surface_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_create_surface_reply_t *
xcb_xvmc_create_surface_reply (xcb_connection_t                  *c,
                               xcb_xvmc_create_surface_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xvmc_destroy_surface_checked (xcb_connection_t   *c,
                                  xcb_xvmc_surface_t  surface_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xvmc_destroy_surface (xcb_connection_t   *c,
                          xcb_xvmc_surface_t  surface_id);

int
xcb_xvmc_create_subpicture_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_create_subpicture_cookie_t
xcb_xvmc_create_subpicture (xcb_connection_t      *c,
                            xcb_xvmc_subpicture_t  subpicture_id,
                            xcb_xvmc_context_t     context,
                            uint32_t               xvimage_id,
                            uint16_t               width,
                            uint16_t               height);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_create_subpicture_cookie_t
xcb_xvmc_create_subpicture_unchecked (xcb_connection_t      *c,
                                      xcb_xvmc_subpicture_t  subpicture_id,
                                      xcb_xvmc_context_t     context,
                                      uint32_t               xvimage_id,
                                      uint16_t               width,
                                      uint16_t               height);

uint32_t *
xcb_xvmc_create_subpicture_priv_data (const xcb_xvmc_create_subpicture_reply_t *R);

int
xcb_xvmc_create_subpicture_priv_data_length (const xcb_xvmc_create_subpicture_reply_t *R);

xcb_generic_iterator_t
xcb_xvmc_create_subpicture_priv_data_end (const xcb_xvmc_create_subpicture_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_create_subpicture_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_create_subpicture_reply_t *
xcb_xvmc_create_subpicture_reply (xcb_connection_t                     *c,
                                  xcb_xvmc_create_subpicture_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xvmc_destroy_subpicture_checked (xcb_connection_t      *c,
                                     xcb_xvmc_subpicture_t  subpicture_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xvmc_destroy_subpicture (xcb_connection_t      *c,
                             xcb_xvmc_subpicture_t  subpicture_id);

int
xcb_xvmc_list_subpicture_types_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xvmc_list_subpicture_types_cookie_t
xcb_xvmc_list_subpicture_types (xcb_connection_t   *c,
                                xcb_xv_port_t       port_id,
                                xcb_xvmc_surface_t  surface_id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xvmc_list_subpicture_types_cookie_t
xcb_xvmc_list_subpicture_types_unchecked (xcb_connection_t   *c,
                                          xcb_xv_port_t       port_id,
                                          xcb_xvmc_surface_t  surface_id);

xcb_xv_image_format_info_t *
xcb_xvmc_list_subpicture_types_types (const xcb_xvmc_list_subpicture_types_reply_t *R);

int
xcb_xvmc_list_subpicture_types_types_length (const xcb_xvmc_list_subpicture_types_reply_t *R);

xcb_xv_image_format_info_iterator_t
xcb_xvmc_list_subpicture_types_types_iterator (const xcb_xvmc_list_subpicture_types_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xvmc_list_subpicture_types_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xvmc_list_subpicture_types_reply_t *
xcb_xvmc_list_subpicture_types_reply (xcb_connection_t                         *c,
                                      xcb_xvmc_list_subpicture_types_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_xvmc_context_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d44 3
a46 3
    xcb_xvmc_surface_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d55 3
a57 3
    xcb_xvmc_subpicture_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d64 9
a72 9
    xcb_xvmc_surface_t id; /**<  */
    uint16_t           chroma_format; /**<  */
    uint16_t           pad0; /**<  */
    uint16_t           max_width; /**<  */
    uint16_t           max_height; /**<  */
    uint16_t           subpicture_max_width; /**<  */
    uint16_t           subpicture_max_height; /**<  */
    uint32_t           mc_type; /**<  */
    uint32_t           flags; /**<  */
d79 3
a81 3
    xcb_xvmc_surface_info_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d88 1
a88 1
    unsigned int sequence; /**<  */
d98 3
a100 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d107 6
a112 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major; /**<  */
    uint32_t minor; /**<  */
d119 1
a119 1
    unsigned int sequence; /**<  */
d129 4
a132 4
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_xv_port_t port_id; /**<  */
d139 6
a144 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num; /**<  */
    uint8_t  pad1[20]; /**<  */
d151 1
a151 1
    unsigned int sequence; /**<  */
d161 9
a169 9
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_xvmc_context_t context_id; /**<  */
    xcb_xv_port_t      port_id; /**<  */
    xcb_xvmc_surface_t surface_id; /**<  */
    uint16_t           width; /**<  */
    uint16_t           height; /**<  */
    uint32_t           flags; /**<  */
d176 8
a183 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t width_actual; /**<  */
    uint16_t height_actual; /**<  */
    uint32_t flags_return; /**<  */
    uint8_t  pad1[20]; /**<  */
d193 4
a196 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_xvmc_context_t context_id; /**<  */
d203 1
a203 1
    unsigned int sequence; /**<  */
d213 5
a217 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_xvmc_surface_t surface_id; /**<  */
    xcb_xvmc_context_t context_id; /**<  */
d224 5
a228 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d238 4
a241 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_xvmc_surface_t surface_id; /**<  */
d248 1
a248 1
    unsigned int sequence; /**<  */
d258 8
a265 8
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_xvmc_subpicture_t subpicture_id; /**<  */
    xcb_xvmc_context_t    context; /**<  */
    uint32_t              xvimage_id; /**<  */
    uint16_t              width; /**<  */
    uint16_t              height; /**<  */
d272 10
a281 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t width_actual; /**<  */
    uint16_t height_actual; /**<  */
    uint16_t num_palette_entries; /**<  */
    uint16_t entry_bytes; /**<  */
    uint8_t  component_order[4]; /**<  */
    uint8_t  pad1[12]; /**<  */
d291 4
a294 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_xvmc_subpicture_t subpicture_id; /**<  */
d301 1
a301 1
    unsigned int sequence; /**<  */
d311 5
a315 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_xv_port_t      port_id; /**<  */
    xcb_xvmc_surface_t surface_id; /**<  */
d322 6
a327 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num; /**<  */
    uint8_t  pad1[20]; /**<  */
d339 1
a339 1
xcb_xvmc_context_next (xcb_xvmc_context_iterator_t *i  /**< */);
d351 1
a351 1
xcb_xvmc_context_end (xcb_xvmc_context_iterator_t i  /**< */);
d362 1
a362 1
xcb_xvmc_surface_next (xcb_xvmc_surface_iterator_t *i  /**< */);
d374 1
a374 1
xcb_xvmc_surface_end (xcb_xvmc_surface_iterator_t i  /**< */);
d385 1
a385 1
xcb_xvmc_subpicture_next (xcb_xvmc_subpicture_iterator_t *i  /**< */);
d397 1
a397 1
xcb_xvmc_subpicture_end (xcb_xvmc_subpicture_iterator_t i  /**< */);
d408 1
a408 1
xcb_xvmc_surface_info_next (xcb_xvmc_surface_info_iterator_t *i  /**< */);
d420 1
a420 1
xcb_xvmc_surface_info_end (xcb_xvmc_surface_info_iterator_t i  /**< */);
d431 1
a431 1
xcb_xvmc_query_version (xcb_connection_t *c  /**< */);
d445 1
a445 1
xcb_xvmc_query_version_unchecked (xcb_connection_t *c  /**< */);
d462 1
a462 1
xcb_xvmc_query_version_reply (xcb_connection_t                 *c  /**< */,
d464 1
a464 1
                              xcb_generic_error_t             **e  /**< */);
d467 1
a467 1
xcb_xvmc_list_surface_types_sizeof (const void  *_buffer  /**< */);
d478 2
a479 2
xcb_xvmc_list_surface_types (xcb_connection_t *c  /**< */,
                             xcb_xv_port_t     port_id  /**< */);
d493 2
a494 2
xcb_xvmc_list_surface_types_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_xv_port_t     port_id  /**< */);
d497 1
a497 1
xcb_xvmc_list_surface_types_surfaces (const xcb_xvmc_list_surface_types_reply_t *R  /**< */);
d500 1
a500 1
xcb_xvmc_list_surface_types_surfaces_length (const xcb_xvmc_list_surface_types_reply_t *R  /**< */);
d503 1
a503 1
xcb_xvmc_list_surface_types_surfaces_iterator (const xcb_xvmc_list_surface_types_reply_t *R  /**< */);
d520 1
a520 1
xcb_xvmc_list_surface_types_reply (xcb_connection_t                      *c  /**< */,
d522 1
a522 1
                                   xcb_generic_error_t                  **e  /**< */);
d525 1
a525 1
xcb_xvmc_create_context_sizeof (const void  *_buffer  /**< */);
d536 7
a542 7
xcb_xvmc_create_context (xcb_connection_t   *c  /**< */,
                         xcb_xvmc_context_t  context_id  /**< */,
                         xcb_xv_port_t       port_id  /**< */,
                         xcb_xvmc_surface_t  surface_id  /**< */,
                         uint16_t            width  /**< */,
                         uint16_t            height  /**< */,
                         uint32_t            flags  /**< */);
d556 7
a562 7
xcb_xvmc_create_context_unchecked (xcb_connection_t   *c  /**< */,
                                   xcb_xvmc_context_t  context_id  /**< */,
                                   xcb_xv_port_t       port_id  /**< */,
                                   xcb_xvmc_surface_t  surface_id  /**< */,
                                   uint16_t            width  /**< */,
                                   uint16_t            height  /**< */,
                                   uint32_t            flags  /**< */);
d565 1
a565 1
xcb_xvmc_create_context_priv_data (const xcb_xvmc_create_context_reply_t *R  /**< */);
d568 1
a568 1
xcb_xvmc_create_context_priv_data_length (const xcb_xvmc_create_context_reply_t *R  /**< */);
d571 1
a571 1
xcb_xvmc_create_context_priv_data_end (const xcb_xvmc_create_context_reply_t *R  /**< */);
d588 1
a588 1
xcb_xvmc_create_context_reply (xcb_connection_t                  *c  /**< */,
d590 1
a590 1
                               xcb_generic_error_t              **e  /**< */);
d604 2
a605 2
xcb_xvmc_destroy_context_checked (xcb_connection_t   *c  /**< */,
                                  xcb_xvmc_context_t  context_id  /**< */);
d616 2
a617 2
xcb_xvmc_destroy_context (xcb_connection_t   *c  /**< */,
                          xcb_xvmc_context_t  context_id  /**< */);
d620 1
a620 1
xcb_xvmc_create_surface_sizeof (const void  *_buffer  /**< */);
d631 3
a633 3
xcb_xvmc_create_surface (xcb_connection_t   *c  /**< */,
                         xcb_xvmc_surface_t  surface_id  /**< */,
                         xcb_xvmc_context_t  context_id  /**< */);
d647 3
a649 3
xcb_xvmc_create_surface_unchecked (xcb_connection_t   *c  /**< */,
                                   xcb_xvmc_surface_t  surface_id  /**< */,
                                   xcb_xvmc_context_t  context_id  /**< */);
d652 1
a652 1
xcb_xvmc_create_surface_priv_data (const xcb_xvmc_create_surface_reply_t *R  /**< */);
d655 1
a655 1
xcb_xvmc_create_surface_priv_data_length (const xcb_xvmc_create_surface_reply_t *R  /**< */);
d658 1
a658 1
xcb_xvmc_create_surface_priv_data_end (const xcb_xvmc_create_surface_reply_t *R  /**< */);
d675 1
a675 1
xcb_xvmc_create_surface_reply (xcb_connection_t                  *c  /**< */,
d677 1
a677 1
                               xcb_generic_error_t              **e  /**< */);
d691 2
a692 2
xcb_xvmc_destroy_surface_checked (xcb_connection_t   *c  /**< */,
                                  xcb_xvmc_surface_t  surface_id  /**< */);
d703 2
a704 2
xcb_xvmc_destroy_surface (xcb_connection_t   *c  /**< */,
                          xcb_xvmc_surface_t  surface_id  /**< */);
d707 1
a707 1
xcb_xvmc_create_subpicture_sizeof (const void  *_buffer  /**< */);
d718 6
a723 6
xcb_xvmc_create_subpicture (xcb_connection_t      *c  /**< */,
                            xcb_xvmc_subpicture_t  subpicture_id  /**< */,
                            xcb_xvmc_context_t     context  /**< */,
                            uint32_t               xvimage_id  /**< */,
                            uint16_t               width  /**< */,
                            uint16_t               height  /**< */);
d737 6
a742 6
xcb_xvmc_create_subpicture_unchecked (xcb_connection_t      *c  /**< */,
                                      xcb_xvmc_subpicture_t  subpicture_id  /**< */,
                                      xcb_xvmc_context_t     context  /**< */,
                                      uint32_t               xvimage_id  /**< */,
                                      uint16_t               width  /**< */,
                                      uint16_t               height  /**< */);
d745 1
a745 1
xcb_xvmc_create_subpicture_priv_data (const xcb_xvmc_create_subpicture_reply_t *R  /**< */);
d748 1
a748 1
xcb_xvmc_create_subpicture_priv_data_length (const xcb_xvmc_create_subpicture_reply_t *R  /**< */);
d751 1
a751 1
xcb_xvmc_create_subpicture_priv_data_end (const xcb_xvmc_create_subpicture_reply_t *R  /**< */);
d768 1
a768 1
xcb_xvmc_create_subpicture_reply (xcb_connection_t                     *c  /**< */,
d770 1
a770 1
                                  xcb_generic_error_t                 **e  /**< */);
d784 2
a785 2
xcb_xvmc_destroy_subpicture_checked (xcb_connection_t      *c  /**< */,
                                     xcb_xvmc_subpicture_t  subpicture_id  /**< */);
d796 2
a797 2
xcb_xvmc_destroy_subpicture (xcb_connection_t      *c  /**< */,
                             xcb_xvmc_subpicture_t  subpicture_id  /**< */);
d800 1
a800 1
xcb_xvmc_list_subpicture_types_sizeof (const void  *_buffer  /**< */);
d811 3
a813 3
xcb_xvmc_list_subpicture_types (xcb_connection_t   *c  /**< */,
                                xcb_xv_port_t       port_id  /**< */,
                                xcb_xvmc_surface_t  surface_id  /**< */);
d827 3
a829 3
xcb_xvmc_list_subpicture_types_unchecked (xcb_connection_t   *c  /**< */,
                                          xcb_xv_port_t       port_id  /**< */,
                                          xcb_xvmc_surface_t  surface_id  /**< */);
d832 1
a832 1
xcb_xvmc_list_subpicture_types_types (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */);
d835 1
a835 1
xcb_xvmc_list_subpicture_types_types_length (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */);
d838 1
a838 1
xcb_xvmc_list_subpicture_types_types_iterator (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */);
d855 1
a855 1
xcb_xvmc_list_subpicture_types_reply (xcb_connection_t                         *c  /**< */,
d857 1
a857 1
                                      xcb_generic_error_t                     **e  /**< */);
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@a15 2
#include "xproto.h"
#include "shm.h"
d24 1
a24 1
  
a337 10

/*****************************************************************************
 **
 ** void xcb_xvmc_context_next
 ** 
 ** @@param xcb_xvmc_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a349 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_context_end
 ** 
 ** @@param xcb_xvmc_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a360 10

/*****************************************************************************
 **
 ** void xcb_xvmc_surface_next
 ** 
 ** @@param xcb_xvmc_surface_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a372 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_surface_end
 ** 
 ** @@param xcb_xvmc_surface_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a383 10

/*****************************************************************************
 **
 ** void xcb_xvmc_subpicture_next
 ** 
 ** @@param xcb_xvmc_subpicture_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a395 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_subpicture_end
 ** 
 ** @@param xcb_xvmc_subpicture_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a406 10

/*****************************************************************************
 **
 ** void xcb_xvmc_surface_info_next
 ** 
 ** @@param xcb_xvmc_surface_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a418 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_surface_info_end
 ** 
 ** @@param xcb_xvmc_surface_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d428 1
a428 1
 * 
a429 10

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_cookie_t xcb_xvmc_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xvmc_query_version_cookie_t
 **
 *****************************************************************************/
 
d439 1
a439 1
 * 
a443 10

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_cookie_t xcb_xvmc_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xvmc_query_version_cookie_t
 **
 *****************************************************************************/
 
d454 1
a454 1
 * 
a460 12

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_reply_t * xcb_xvmc_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xvmc_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xvmc_query_version_reply_t *
 **
 *****************************************************************************/
 
d475 1
a475 1
 * 
a476 11

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_cookie_t xcb_xvmc_list_surface_types
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port_id
 ** @@returns xcb_xvmc_list_surface_types_cookie_t
 **
 *****************************************************************************/
 
d487 1
a487 1
 * 
a491 11

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_cookie_t xcb_xvmc_list_surface_types_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port_id
 ** @@returns xcb_xvmc_list_surface_types_cookie_t
 **
 *****************************************************************************/
 
a495 10

/*****************************************************************************
 **
 ** xcb_xvmc_surface_info_t * xcb_xvmc_list_surface_types_surfaces
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns xcb_xvmc_surface_info_t *
 **
 *****************************************************************************/
 
a498 10

/*****************************************************************************
 **
 ** int xcb_xvmc_list_surface_types_surfaces_length
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a501 10

/*****************************************************************************
 **
 ** xcb_xvmc_surface_info_iterator_t xcb_xvmc_list_surface_types_surfaces_iterator
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns xcb_xvmc_surface_info_iterator_t
 **
 *****************************************************************************/
 
d512 1
a512 1
 * 
a518 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_reply_t * xcb_xvmc_list_surface_types_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xvmc_list_surface_types_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xvmc_list_surface_types_reply_t *
 **
 *****************************************************************************/
 
d533 1
a533 1
 * 
a534 16

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_cookie_t xcb_xvmc_create_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param uint16_t            width
 ** @@param uint16_t            height
 ** @@param uint32_t            flags
 ** @@returns xcb_xvmc_create_context_cookie_t
 **
 *****************************************************************************/
 
d550 1
a550 1
 * 
a554 16

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_cookie_t xcb_xvmc_create_context_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param uint16_t            width
 ** @@param uint16_t            height
 ** @@param uint32_t            flags
 ** @@returns xcb_xvmc_create_context_cookie_t
 **
 *****************************************************************************/
 
a563 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_context_priv_data
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a566 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_context_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a569 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_context_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d580 1
a580 1
 * 
a586 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_reply_t * xcb_xvmc_create_context_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xvmc_create_context_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xvmc_create_context_reply_t *
 **
 *****************************************************************************/
 
d598 1
a598 1
 * 
a602 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_context_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d613 1
a613 1
 * 
a614 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d628 1
a628 1
 * 
a629 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_cookie_t xcb_xvmc_create_surface
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_xvmc_create_surface_cookie_t
 **
 *****************************************************************************/
 
d641 1
a641 1
 * 
a645 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_cookie_t xcb_xvmc_create_surface_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_xvmc_create_surface_cookie_t
 **
 *****************************************************************************/
 
a650 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_surface_priv_data
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a653 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_surface_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a656 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_surface_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d667 1
a667 1
 * 
a673 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_reply_t * xcb_xvmc_create_surface_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xvmc_create_surface_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xvmc_create_surface_reply_t *
 **
 *****************************************************************************/
 
d685 1
a685 1
 * 
a689 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_surface_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d700 1
a700 1
 * 
a701 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_surface
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d715 1
a715 1
 * 
a716 15

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_cookie_t xcb_xvmc_create_subpicture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@param xcb_xvmc_context_t     context
 ** @@param uint32_t               xvimage_id
 ** @@param uint16_t               width
 ** @@param uint16_t               height
 ** @@returns xcb_xvmc_create_subpicture_cookie_t
 **
 *****************************************************************************/
 
d731 1
a731 1
 * 
a735 15

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_cookie_t xcb_xvmc_create_subpicture_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@param xcb_xvmc_context_t     context
 ** @@param uint32_t               xvimage_id
 ** @@param uint16_t               width
 ** @@param uint16_t               height
 ** @@returns xcb_xvmc_create_subpicture_cookie_t
 **
 *****************************************************************************/
 
a743 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_subpicture_priv_data
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a746 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_subpicture_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a749 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_subpicture_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d760 1
a760 1
 * 
a766 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_reply_t * xcb_xvmc_create_subpicture_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xvmc_create_subpicture_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xvmc_create_subpicture_reply_t *
 **
 *****************************************************************************/
 
d778 1
a778 1
 * 
a782 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_subpicture_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d793 1
a793 1
 * 
a794 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_subpicture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d808 1
a808 1
 * 
a809 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_cookie_t xcb_xvmc_list_subpicture_types
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_xvmc_list_subpicture_types_cookie_t
 **
 *****************************************************************************/
 
d821 1
a821 1
 * 
a825 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_cookie_t xcb_xvmc_list_subpicture_types_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_xvmc_list_subpicture_types_cookie_t
 **
 *****************************************************************************/
 
a830 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_t * xcb_xvmc_list_subpicture_types_types
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns xcb_xv_image_format_info_t *
 **
 *****************************************************************************/
 
a833 10

/*****************************************************************************
 **
 ** int xcb_xvmc_list_subpicture_types_types_length
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a836 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_iterator_t xcb_xvmc_list_subpicture_types_types_iterator
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns xcb_xv_image_format_info_iterator_t
 **
 *****************************************************************************/
 
d847 1
a847 1
 * 
a853 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_reply_t * xcb_xvmc_list_subpicture_types_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_xvmc_list_subpicture_types_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_xvmc_list_subpicture_types_reply_t *
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d505 1
a505 1
 * Delivers a request to the X server
d526 1
a526 1
 * Delivers a request to the X server
d580 3
d584 1
a584 1
 * Delivers a request to the X server
d607 1
a607 1
 * Delivers a request to the X server
d702 3
d706 1
a706 1
 * Delivers a request to the X server
d739 1
a739 1
 * Delivers a request to the X server
d845 1
a845 1
 * Delivers a request to the X server
d871 1
a871 1
 * Delivers a request to the X server
d893 3
d897 1
a897 1
 * Delivers a request to the X server
d922 1
a922 1
 * Delivers a request to the X server
d1020 1
a1020 1
 * Delivers a request to the X server
d1046 1
a1046 1
 * Delivers a request to the X server
d1068 3
d1072 1
a1072 1
 * Delivers a request to the X server
d1103 1
a1103 1
 * Delivers a request to the X server
d1207 1
a1207 1
 * Delivers a request to the X server
d1233 1
a1233 1
 * Delivers a request to the X server
d1255 3
d1259 1
a1259 1
 * Delivers a request to the X server
d1284 1
a1284 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
