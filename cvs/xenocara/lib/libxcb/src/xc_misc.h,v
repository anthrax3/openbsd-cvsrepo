head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xc_misc.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_XCMisc_API XCB XCMisc API
 * @@brief XCMisc XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XC_MISC_H
#define __XC_MISC_H

#include "xcb.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XCMISC_MAJOR_VERSION 1
#define XCB_XCMISC_MINOR_VERSION 1

extern xcb_extension_t xcb_xc_misc_id;

/**
 * @@brief xcb_xc_misc_get_version_cookie_t
 **/
typedef struct xcb_xc_misc_get_version_cookie_t {
    unsigned int sequence;
} xcb_xc_misc_get_version_cookie_t;

/** Opcode for xcb_xc_misc_get_version. */
#define XCB_XC_MISC_GET_VERSION 0

/**
 * @@brief xcb_xc_misc_get_version_request_t
 **/
typedef struct xcb_xc_misc_get_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t client_major_version;
    uint16_t client_minor_version;
} xcb_xc_misc_get_version_request_t;

/**
 * @@brief xcb_xc_misc_get_version_reply_t
 **/
typedef struct xcb_xc_misc_get_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t server_major_version;
    uint16_t server_minor_version;
} xcb_xc_misc_get_version_reply_t;

/**
 * @@brief xcb_xc_misc_get_xid_range_cookie_t
 **/
typedef struct xcb_xc_misc_get_xid_range_cookie_t {
    unsigned int sequence;
} xcb_xc_misc_get_xid_range_cookie_t;

/** Opcode for xcb_xc_misc_get_xid_range. */
#define XCB_XC_MISC_GET_XID_RANGE 1

/**
 * @@brief xcb_xc_misc_get_xid_range_request_t
 **/
typedef struct xcb_xc_misc_get_xid_range_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xc_misc_get_xid_range_request_t;

/**
 * @@brief xcb_xc_misc_get_xid_range_reply_t
 **/
typedef struct xcb_xc_misc_get_xid_range_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t start_id;
    uint32_t count;
} xcb_xc_misc_get_xid_range_reply_t;

/**
 * @@brief xcb_xc_misc_get_xid_list_cookie_t
 **/
typedef struct xcb_xc_misc_get_xid_list_cookie_t {
    unsigned int sequence;
} xcb_xc_misc_get_xid_list_cookie_t;

/** Opcode for xcb_xc_misc_get_xid_list. */
#define XCB_XC_MISC_GET_XID_LIST 2

/**
 * @@brief xcb_xc_misc_get_xid_list_request_t
 **/
typedef struct xcb_xc_misc_get_xid_list_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t count;
} xcb_xc_misc_get_xid_list_request_t;

/**
 * @@brief xcb_xc_misc_get_xid_list_reply_t
 **/
typedef struct xcb_xc_misc_get_xid_list_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ids_len;
    uint8_t  pad1[20];
} xcb_xc_misc_get_xid_list_reply_t;

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xc_misc_get_version_cookie_t
xcb_xc_misc_get_version (xcb_connection_t *c,
                         uint16_t          client_major_version,
                         uint16_t          client_minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xc_misc_get_version_cookie_t
xcb_xc_misc_get_version_unchecked (xcb_connection_t *c,
                                   uint16_t          client_major_version,
                                   uint16_t          client_minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xc_misc_get_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xc_misc_get_version_reply_t *
xcb_xc_misc_get_version_reply (xcb_connection_t                  *c,
                               xcb_xc_misc_get_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xc_misc_get_xid_range_cookie_t
xcb_xc_misc_get_xid_range (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xc_misc_get_xid_range_cookie_t
xcb_xc_misc_get_xid_range_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xc_misc_get_xid_range_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xc_misc_get_xid_range_reply_t *
xcb_xc_misc_get_xid_range_reply (xcb_connection_t                    *c,
                                 xcb_xc_misc_get_xid_range_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_xc_misc_get_xid_list_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xc_misc_get_xid_list_cookie_t
xcb_xc_misc_get_xid_list (xcb_connection_t *c,
                          uint32_t          count);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xc_misc_get_xid_list_cookie_t
xcb_xc_misc_get_xid_list_unchecked (xcb_connection_t *c,
                                    uint32_t          count);

uint32_t *
xcb_xc_misc_get_xid_list_ids (const xcb_xc_misc_get_xid_list_reply_t *R);

int
xcb_xc_misc_get_xid_list_ids_length (const xcb_xc_misc_get_xid_list_reply_t *R);

xcb_generic_iterator_t
xcb_xc_misc_get_xid_list_ids_end (const xcb_xc_misc_get_xid_list_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xc_misc_get_xid_list_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xc_misc_get_xid_list_reply_t *
xcb_xc_misc_get_xid_list_reply (xcb_connection_t                   *c,
                                xcb_xc_misc_get_xid_list_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d30 1
a30 1
    unsigned int sequence; /**<  */
d40 5
a44 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t client_major_version; /**<  */
    uint16_t client_minor_version; /**<  */
d51 6
a56 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t server_major_version; /**<  */
    uint16_t server_minor_version; /**<  */
d63 1
a63 1
    unsigned int sequence; /**<  */
d73 3
a75 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d82 6
a87 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t start_id; /**<  */
    uint32_t count; /**<  */
d94 1
a94 1
    unsigned int sequence; /**<  */
d104 4
a107 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t count; /**<  */
d114 6
a119 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ids_len; /**<  */
    uint8_t  pad1[20]; /**<  */
d131 3
a133 3
xcb_xc_misc_get_version (xcb_connection_t *c  /**< */,
                         uint16_t          client_major_version  /**< */,
                         uint16_t          client_minor_version  /**< */);
d147 3
a149 3
xcb_xc_misc_get_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint16_t          client_major_version  /**< */,
                                   uint16_t          client_minor_version  /**< */);
d166 1
a166 1
xcb_xc_misc_get_version_reply (xcb_connection_t                  *c  /**< */,
d168 1
a168 1
                               xcb_generic_error_t              **e  /**< */);
d179 1
a179 1
xcb_xc_misc_get_xid_range (xcb_connection_t *c  /**< */);
d193 1
a193 1
xcb_xc_misc_get_xid_range_unchecked (xcb_connection_t *c  /**< */);
d210 1
a210 1
xcb_xc_misc_get_xid_range_reply (xcb_connection_t                    *c  /**< */,
d212 1
a212 1
                                 xcb_generic_error_t                **e  /**< */);
d215 1
a215 1
xcb_xc_misc_get_xid_list_sizeof (const void  *_buffer  /**< */);
d226 2
a227 2
xcb_xc_misc_get_xid_list (xcb_connection_t *c  /**< */,
                          uint32_t          count  /**< */);
d241 2
a242 2
xcb_xc_misc_get_xid_list_unchecked (xcb_connection_t *c  /**< */,
                                    uint32_t          count  /**< */);
d245 1
a245 1
xcb_xc_misc_get_xid_list_ids (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */);
d248 1
a248 1
xcb_xc_misc_get_xid_list_ids_length (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */);
d251 1
a251 1
xcb_xc_misc_get_xid_list_ids_end (const xcb_xc_misc_get_xid_list_reply_t *R  /**< */);
d268 1
a268 1
xcb_xc_misc_get_xid_list_reply (xcb_connection_t                   *c  /**< */,
d270 1
a270 1
                                xcb_generic_error_t               **e  /**< */);
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
  
d128 1
a128 1
 * 
a129 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_cookie_t xcb_xc_misc_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xc_misc_get_version_cookie_t
 **
 *****************************************************************************/
 
d141 1
a141 1
 * 
a145 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_cookie_t xcb_xc_misc_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xc_misc_get_version_cookie_t
 **
 *****************************************************************************/
 
d158 1
a158 1
 * 
a164 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_version_reply_t * xcb_xc_misc_get_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xc_misc_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xc_misc_get_version_reply_t *
 **
 *****************************************************************************/
 
d176 1
a176 1
 * 
a177 10

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_cookie_t xcb_xc_misc_get_xid_range
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xc_misc_get_xid_range_cookie_t
 **
 *****************************************************************************/
 
d187 1
a187 1
 * 
a191 10

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_cookie_t xcb_xc_misc_get_xid_range_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xc_misc_get_xid_range_cookie_t
 **
 *****************************************************************************/
 
d202 1
a202 1
 * 
a208 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_range_reply_t * xcb_xc_misc_get_xid_range_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xc_misc_get_xid_range_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xc_misc_get_xid_range_reply_t *
 **
 *****************************************************************************/
 
d223 1
a223 1
 * 
a224 11

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_cookie_t xcb_xc_misc_get_xid_list
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          count
 ** @@returns xcb_xc_misc_get_xid_list_cookie_t
 **
 *****************************************************************************/
 
d235 1
a235 1
 * 
a239 11

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_cookie_t xcb_xc_misc_get_xid_list_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          count
 ** @@returns xcb_xc_misc_get_xid_list_cookie_t
 **
 *****************************************************************************/
 
a243 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xc_misc_get_xid_list_ids
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a246 10

/*****************************************************************************
 **
 ** int xcb_xc_misc_get_xid_list_ids_length
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a249 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xc_misc_get_xid_list_ids_end
 ** 
 ** @@param const xcb_xc_misc_get_xid_list_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d260 1
a260 1
 * 
a266 12

/*****************************************************************************
 **
 ** xcb_xc_misc_get_xid_list_reply_t * xcb_xc_misc_get_xid_list_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_xc_misc_get_xid_list_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_xc_misc_get_xid_list_reply_t *
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d123 1
a123 1
 * Delivers a request to the X server
d148 1
a148 1
 * Delivers a request to the X server
d207 1
a207 1
 * Delivers a request to the X server
d228 1
a228 1
 * Delivers a request to the X server
d282 3
d286 1
a286 1
 * Delivers a request to the X server
d309 1
a309 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
