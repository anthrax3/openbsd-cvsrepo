head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xv.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xv.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"
#include "shm.h"

xcb_extension_t xcb_xv_id = { "XVideo", 0 };

void
xcb_xv_port_next (xcb_xv_port_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xv_port_t);
}

xcb_generic_iterator_t
xcb_xv_port_end (xcb_xv_port_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xv_encoding_next (xcb_xv_encoding_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xv_encoding_t);
}

xcb_generic_iterator_t
xcb_xv_encoding_end (xcb_xv_encoding_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xv_rational_next (xcb_xv_rational_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xv_rational_t);
}

xcb_generic_iterator_t
xcb_xv_rational_end (xcb_xv_rational_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xv_format_next (xcb_xv_format_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xv_format_t);
}

xcb_generic_iterator_t
xcb_xv_format_end (xcb_xv_format_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xv_adaptor_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_adaptor_info_t *_aux = (xcb_xv_adaptor_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_adaptor_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_size * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* formats */
    xcb_block_len += _aux->num_formats * sizeof(xcb_xv_format_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xv_format_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_xv_adaptor_info_name (const xcb_xv_adaptor_info_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xv_adaptor_info_name_length (const xcb_xv_adaptor_info_t *R)
{
    return R->name_size;
}

xcb_generic_iterator_t
xcb_xv_adaptor_info_name_end (const xcb_xv_adaptor_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_format_t *
xcb_xv_adaptor_info_formats (const xcb_xv_adaptor_info_t *R)
{
    xcb_generic_iterator_t prev = xcb_xv_adaptor_info_name_end(R);
    return (xcb_xv_format_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_xv_adaptor_info_formats_length (const xcb_xv_adaptor_info_t *R)
{
    return R->num_formats;
}

xcb_xv_format_iterator_t
xcb_xv_adaptor_info_formats_iterator (const xcb_xv_adaptor_info_t *R)
{
    xcb_xv_format_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xv_adaptor_info_name_end(R);
    i.data = (xcb_xv_format_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)));
    i.rem = R->num_formats;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xv_adaptor_info_next (xcb_xv_adaptor_info_iterator_t *i)
{
    xcb_xv_adaptor_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xv_adaptor_info_t *)(((char *)R) + xcb_xv_adaptor_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xv_adaptor_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_xv_adaptor_info_end (xcb_xv_adaptor_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xv_adaptor_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xv_encoding_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_encoding_info_t *_aux = (xcb_xv_encoding_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_encoding_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_size * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_xv_encoding_info_name (const xcb_xv_encoding_info_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xv_encoding_info_name_length (const xcb_xv_encoding_info_t *R)
{
    return R->name_size;
}

xcb_generic_iterator_t
xcb_xv_encoding_info_name_end (const xcb_xv_encoding_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xv_encoding_info_next (xcb_xv_encoding_info_iterator_t *i)
{
    xcb_xv_encoding_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xv_encoding_info_t *)(((char *)R) + xcb_xv_encoding_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xv_encoding_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_xv_encoding_info_end (xcb_xv_encoding_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xv_encoding_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xv_image_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_image_t *_aux = (xcb_xv_image_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_image_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pitches */
    xcb_block_len += _aux->num_planes * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* offsets */
    xcb_block_len += _aux->num_planes * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->data_size * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_xv_image_pitches (const xcb_xv_image_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xv_image_pitches_length (const xcb_xv_image_t *R)
{
    return R->num_planes;
}

xcb_generic_iterator_t
xcb_xv_image_pitches_end (const xcb_xv_image_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_planes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_xv_image_offsets (const xcb_xv_image_t *R)
{
    xcb_generic_iterator_t prev = xcb_xv_image_pitches_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_xv_image_offsets_length (const xcb_xv_image_t *R)
{
    return R->num_planes;
}

xcb_generic_iterator_t
xcb_xv_image_offsets_end (const xcb_xv_image_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xv_image_pitches_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_planes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint8_t *
xcb_xv_image_data (const xcb_xv_image_t *R)
{
    xcb_generic_iterator_t prev = xcb_xv_image_offsets_end(R);
    return (uint8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint8_t, prev.index) + 0);
}

int
xcb_xv_image_data_length (const xcb_xv_image_t *R)
{
    return R->data_size;
}

xcb_generic_iterator_t
xcb_xv_image_data_end (const xcb_xv_image_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xv_image_offsets_end(R);
    i.data = ((uint8_t *) ((char*) prev.data + XCB_TYPE_PAD(uint8_t, prev.index))) + (R->data_size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xv_image_next (xcb_xv_image_iterator_t *i)
{
    xcb_xv_image_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xv_image_t *)(((char *)R) + xcb_xv_image_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xv_image_t *) child.data;
}

xcb_generic_iterator_t
xcb_xv_image_end (xcb_xv_image_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xv_image_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xv_attribute_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_attribute_info_t *_aux = (xcb_xv_attribute_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_attribute_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->size * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_xv_attribute_info_name (const xcb_xv_attribute_info_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xv_attribute_info_name_length (const xcb_xv_attribute_info_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_xv_attribute_info_name_end (const xcb_xv_attribute_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xv_attribute_info_next (xcb_xv_attribute_info_iterator_t *i)
{
    xcb_xv_attribute_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xv_attribute_info_t *)(((char *)R) + xcb_xv_attribute_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xv_attribute_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_xv_attribute_info_end (xcb_xv_attribute_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xv_attribute_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xv_image_format_info_next (xcb_xv_image_format_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xv_image_format_info_t);
}

xcb_generic_iterator_t
xcb_xv_image_format_info_end (xcb_xv_image_format_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_xv_query_extension_cookie_t
xcb_xv_query_extension (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_extension_cookie_t xcb_ret;
    xcb_xv_query_extension_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_extension_cookie_t
xcb_xv_query_extension_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_extension_cookie_t xcb_ret;
    xcb_xv_query_extension_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_extension_reply_t *
xcb_xv_query_extension_reply (xcb_connection_t                 *c,
                              xcb_xv_query_extension_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xv_query_extension_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_query_adaptors_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_query_adaptors_reply_t *_aux = (xcb_xv_query_adaptors_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xv_query_adaptors_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* info */
    for(i=0; i<_aux->num_adaptors; i++) {
        xcb_tmp_len = xcb_xv_adaptor_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xv_adaptor_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xv_query_adaptors_cookie_t
xcb_xv_query_adaptors (xcb_connection_t *c,
                       xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_ADAPTORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_adaptors_cookie_t xcb_ret;
    xcb_xv_query_adaptors_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_adaptors_cookie_t
xcb_xv_query_adaptors_unchecked (xcb_connection_t *c,
                                 xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_ADAPTORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_adaptors_cookie_t xcb_ret;
    xcb_xv_query_adaptors_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xv_query_adaptors_info_length (const xcb_xv_query_adaptors_reply_t *R)
{
    return R->num_adaptors;
}

xcb_xv_adaptor_info_iterator_t
xcb_xv_query_adaptors_info_iterator (const xcb_xv_query_adaptors_reply_t *R)
{
    xcb_xv_adaptor_info_iterator_t i;
    i.data = (xcb_xv_adaptor_info_t *) (R + 1);
    i.rem = R->num_adaptors;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_query_adaptors_reply_t *
xcb_xv_query_adaptors_reply (xcb_connection_t                *c,
                             xcb_xv_query_adaptors_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_xv_query_adaptors_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_query_encodings_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_query_encodings_reply_t *_aux = (xcb_xv_query_encodings_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xv_query_encodings_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* info */
    for(i=0; i<_aux->num_encodings; i++) {
        xcb_tmp_len = xcb_xv_encoding_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xv_encoding_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xv_query_encodings_cookie_t
xcb_xv_query_encodings (xcb_connection_t *c,
                        xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_ENCODINGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_encodings_cookie_t xcb_ret;
    xcb_xv_query_encodings_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_encodings_cookie_t
xcb_xv_query_encodings_unchecked (xcb_connection_t *c,
                                  xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_ENCODINGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_encodings_cookie_t xcb_ret;
    xcb_xv_query_encodings_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xv_query_encodings_info_length (const xcb_xv_query_encodings_reply_t *R)
{
    return R->num_encodings;
}

xcb_xv_encoding_info_iterator_t
xcb_xv_query_encodings_info_iterator (const xcb_xv_query_encodings_reply_t *R)
{
    xcb_xv_encoding_info_iterator_t i;
    i.data = (xcb_xv_encoding_info_t *) (R + 1);
    i.rem = R->num_encodings;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_query_encodings_reply_t *
xcb_xv_query_encodings_reply (xcb_connection_t                 *c,
                              xcb_xv_query_encodings_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xv_query_encodings_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xv_grab_port_cookie_t
xcb_xv_grab_port (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GRAB_PORT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_grab_port_cookie_t xcb_ret;
    xcb_xv_grab_port_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_grab_port_cookie_t
xcb_xv_grab_port_unchecked (xcb_connection_t *c,
                            xcb_xv_port_t     port,
                            xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GRAB_PORT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_grab_port_cookie_t xcb_ret;
    xcb_xv_grab_port_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_grab_port_reply_t *
xcb_xv_grab_port_reply (xcb_connection_t           *c,
                        xcb_xv_grab_port_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_xv_grab_port_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xv_ungrab_port_checked (xcb_connection_t *c,
                            xcb_xv_port_t     port,
                            xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_UNGRAB_PORT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_ungrab_port_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_ungrab_port (xcb_connection_t *c,
                    xcb_xv_port_t     port,
                    xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_UNGRAB_PORT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_ungrab_port_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_put_video_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_put_video (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_put_still_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_STILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_still_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_put_still (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_STILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_still_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_get_video_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_get_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_get_video (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_get_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_get_still_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           vid_x,
                          int16_t           vid_y,
                          uint16_t          vid_w,
                          uint16_t          vid_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_STILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_get_still_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_get_still (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           vid_x,
                  int16_t           vid_y,
                  uint16_t          vid_w,
                  uint16_t          vid_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_STILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_get_still_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.vid_x = vid_x;
    xcb_out.vid_y = vid_y;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_stop_video_checked (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_STOP_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_stop_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_stop_video (xcb_connection_t *c,
                   xcb_xv_port_t     port,
                   xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_STOP_VIDEO,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_stop_video_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_select_video_notify_checked (xcb_connection_t *c,
                                    xcb_drawable_t    drawable,
                                    uint8_t           onoff)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SELECT_VIDEO_NOTIFY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_select_video_notify_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.onoff = onoff;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_select_video_notify (xcb_connection_t *c,
                            xcb_drawable_t    drawable,
                            uint8_t           onoff)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SELECT_VIDEO_NOTIFY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_select_video_notify_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.onoff = onoff;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_select_port_notify_checked (xcb_connection_t *c,
                                   xcb_xv_port_t     port,
                                   uint8_t           onoff)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SELECT_PORT_NOTIFY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_select_port_notify_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.onoff = onoff;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_select_port_notify (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           uint8_t           onoff)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SELECT_PORT_NOTIFY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_select_port_notify_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.onoff = onoff;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_best_size_cookie_t
xcb_xv_query_best_size (xcb_connection_t *c,
                        xcb_xv_port_t     port,
                        uint16_t          vid_w,
                        uint16_t          vid_h,
                        uint16_t          drw_w,
                        uint16_t          drw_h,
                        uint8_t           motion)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_BEST_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_best_size_cookie_t xcb_ret;
    xcb_xv_query_best_size_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.motion = motion;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_best_size_cookie_t
xcb_xv_query_best_size_unchecked (xcb_connection_t *c,
                                  xcb_xv_port_t     port,
                                  uint16_t          vid_w,
                                  uint16_t          vid_h,
                                  uint16_t          drw_w,
                                  uint16_t          drw_h,
                                  uint8_t           motion)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_BEST_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_best_size_cookie_t xcb_ret;
    xcb_xv_query_best_size_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.vid_w = vid_w;
    xcb_out.vid_h = vid_h;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.motion = motion;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_best_size_reply_t *
xcb_xv_query_best_size_reply (xcb_connection_t                 *c,
                              xcb_xv_query_best_size_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xv_query_best_size_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xv_set_port_attribute_checked (xcb_connection_t *c,
                                   xcb_xv_port_t     port,
                                   xcb_atom_t        attribute,
                                   int32_t           value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SET_PORT_ATTRIBUTE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_set_port_attribute_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.attribute = attribute;
    xcb_out.value = value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_set_port_attribute (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_atom_t        attribute,
                           int32_t           value)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SET_PORT_ATTRIBUTE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_set_port_attribute_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.attribute = attribute;
    xcb_out.value = value;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_get_port_attribute_cookie_t
xcb_xv_get_port_attribute (xcb_connection_t *c,
                           xcb_xv_port_t     port,
                           xcb_atom_t        attribute)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_PORT_ATTRIBUTE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_get_port_attribute_cookie_t xcb_ret;
    xcb_xv_get_port_attribute_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.attribute = attribute;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_get_port_attribute_cookie_t
xcb_xv_get_port_attribute_unchecked (xcb_connection_t *c,
                                     xcb_xv_port_t     port,
                                     xcb_atom_t        attribute)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_GET_PORT_ATTRIBUTE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_get_port_attribute_cookie_t xcb_ret;
    xcb_xv_get_port_attribute_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.attribute = attribute;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_get_port_attribute_reply_t *
xcb_xv_get_port_attribute_reply (xcb_connection_t                    *c,
                                 xcb_xv_get_port_attribute_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_xv_get_port_attribute_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_query_port_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_query_port_attributes_reply_t *_aux = (xcb_xv_query_port_attributes_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xv_query_port_attributes_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attributes */
    for(i=0; i<_aux->num_attributes; i++) {
        xcb_tmp_len = xcb_xv_attribute_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xv_attribute_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xv_query_port_attributes_cookie_t
xcb_xv_query_port_attributes (xcb_connection_t *c,
                              xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_PORT_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_port_attributes_cookie_t xcb_ret;
    xcb_xv_query_port_attributes_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_port_attributes_cookie_t
xcb_xv_query_port_attributes_unchecked (xcb_connection_t *c,
                                        xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_PORT_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_port_attributes_cookie_t xcb_ret;
    xcb_xv_query_port_attributes_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xv_query_port_attributes_attributes_length (const xcb_xv_query_port_attributes_reply_t *R)
{
    return R->num_attributes;
}

xcb_xv_attribute_info_iterator_t
xcb_xv_query_port_attributes_attributes_iterator (const xcb_xv_query_port_attributes_reply_t *R)
{
    xcb_xv_attribute_info_iterator_t i;
    i.data = (xcb_xv_attribute_info_t *) (R + 1);
    i.rem = R->num_attributes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_query_port_attributes_reply_t *
xcb_xv_query_port_attributes_reply (xcb_connection_t                       *c,
                                    xcb_xv_query_port_attributes_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_xv_query_port_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_list_image_formats_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_list_image_formats_reply_t *_aux = (xcb_xv_list_image_formats_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_list_image_formats_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* format */
    xcb_block_len += _aux->num_formats * sizeof(xcb_xv_image_format_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xv_image_format_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xv_list_image_formats_cookie_t
xcb_xv_list_image_formats (xcb_connection_t *c,
                           xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_LIST_IMAGE_FORMATS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_list_image_formats_cookie_t xcb_ret;
    xcb_xv_list_image_formats_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_list_image_formats_cookie_t
xcb_xv_list_image_formats_unchecked (xcb_connection_t *c,
                                     xcb_xv_port_t     port)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_LIST_IMAGE_FORMATS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_list_image_formats_cookie_t xcb_ret;
    xcb_xv_list_image_formats_request_t xcb_out;

    xcb_out.port = port;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_image_format_info_t *
xcb_xv_list_image_formats_format (const xcb_xv_list_image_formats_reply_t *R)
{
    return (xcb_xv_image_format_info_t *) (R + 1);
}

int
xcb_xv_list_image_formats_format_length (const xcb_xv_list_image_formats_reply_t *R)
{
    return R->num_formats;
}

xcb_xv_image_format_info_iterator_t
xcb_xv_list_image_formats_format_iterator (const xcb_xv_list_image_formats_reply_t *R)
{
    xcb_xv_image_format_info_iterator_t i;
    i.data = (xcb_xv_image_format_info_t *) (R + 1);
    i.rem = R->num_formats;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_list_image_formats_reply_t *
xcb_xv_list_image_formats_reply (xcb_connection_t                    *c,
                                 xcb_xv_list_image_formats_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_xv_list_image_formats_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_query_image_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xv_query_image_attributes_reply_t *_aux = (xcb_xv_query_image_attributes_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_query_image_attributes_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pitches */
    xcb_block_len += _aux->num_planes * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* offsets */
    xcb_block_len += _aux->num_planes * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xv_query_image_attributes_cookie_t
xcb_xv_query_image_attributes (xcb_connection_t *c,
                               xcb_xv_port_t     port,
                               uint32_t          id,
                               uint16_t          width,
                               uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_IMAGE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_image_attributes_cookie_t xcb_ret;
    xcb_xv_query_image_attributes_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.id = id;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_query_image_attributes_cookie_t
xcb_xv_query_image_attributes_unchecked (xcb_connection_t *c,
                                         xcb_xv_port_t     port,
                                         uint32_t          id,
                                         uint16_t          width,
                                         uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_QUERY_IMAGE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xv_query_image_attributes_cookie_t xcb_ret;
    xcb_xv_query_image_attributes_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.id = id;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xv_query_image_attributes_pitches (const xcb_xv_query_image_attributes_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xv_query_image_attributes_pitches_length (const xcb_xv_query_image_attributes_reply_t *R)
{
    return R->num_planes;
}

xcb_generic_iterator_t
xcb_xv_query_image_attributes_pitches_end (const xcb_xv_query_image_attributes_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->num_planes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_xv_query_image_attributes_offsets (const xcb_xv_query_image_attributes_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_xv_query_image_attributes_pitches_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_xv_query_image_attributes_offsets_length (const xcb_xv_query_image_attributes_reply_t *R)
{
    return R->num_planes;
}

xcb_generic_iterator_t
xcb_xv_query_image_attributes_offsets_end (const xcb_xv_query_image_attributes_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xv_query_image_attributes_pitches_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_planes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xv_query_image_attributes_reply_t *
xcb_xv_query_image_attributes_reply (xcb_connection_t                        *c,
                                     xcb_xv_query_image_attributes_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_xv_query_image_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xv_put_image_sizeof (const void  *_buffer,
                         uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xv_put_image_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xv_put_image_checked (xcb_connection_t *c,
                          xcb_xv_port_t     port,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          uint32_t          id,
                          int16_t           src_x,
                          int16_t           src_y,
                          uint16_t          src_w,
                          uint16_t          src_h,
                          int16_t           drw_x,
                          int16_t           drw_y,
                          uint16_t          drw_w,
                          uint16_t          drw_h,
                          uint16_t          width,
                          uint16_t          height,
                          uint32_t          data_len,
                          const uint8_t    *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_image_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.id = id;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_w = src_w;
    xcb_out.src_h = src_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_put_image (xcb_connection_t *c,
                  xcb_xv_port_t     port,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  uint32_t          id,
                  int16_t           src_x,
                  int16_t           src_y,
                  uint16_t          src_w,
                  uint16_t          src_h,
                  int16_t           drw_x,
                  int16_t           drw_y,
                  uint16_t          drw_w,
                  uint16_t          drw_h,
                  uint16_t          width,
                  uint16_t          height,
                  uint32_t          data_len,
                  const uint8_t    *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_put_image_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.id = id;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_w = src_w;
    xcb_out.src_h = src_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_xv_put_image_data (const xcb_xv_put_image_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_xv_put_image_data_length (const xcb_xv_put_image_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_xv_put_image_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_xv_put_image_data_end (const xcb_xv_put_image_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_xv_put_image_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_xv_shm_put_image_checked (xcb_connection_t *c,
                              xcb_xv_port_t     port,
                              xcb_drawable_t    drawable,
                              xcb_gcontext_t    gc,
                              xcb_shm_seg_t     shmseg,
                              uint32_t          id,
                              uint32_t          offset,
                              int16_t           src_x,
                              int16_t           src_y,
                              uint16_t          src_w,
                              uint16_t          src_h,
                              int16_t           drw_x,
                              int16_t           drw_y,
                              uint16_t          drw_w,
                              uint16_t          drw_h,
                              uint16_t          width,
                              uint16_t          height,
                              uint8_t           send_event)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SHM_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_shm_put_image_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.shmseg = shmseg;
    xcb_out.id = id;
    xcb_out.offset = offset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_w = src_w;
    xcb_out.src_h = src_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.send_event = send_event;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xv_shm_put_image (xcb_connection_t *c,
                      xcb_xv_port_t     port,
                      xcb_drawable_t    drawable,
                      xcb_gcontext_t    gc,
                      xcb_shm_seg_t     shmseg,
                      uint32_t          id,
                      uint32_t          offset,
                      int16_t           src_x,
                      int16_t           src_y,
                      uint16_t          src_w,
                      uint16_t          src_h,
                      int16_t           drw_x,
                      int16_t           drw_y,
                      uint16_t          drw_w,
                      uint16_t          drw_h,
                      uint16_t          width,
                      uint16_t          height,
                      uint8_t           send_event)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xv_id,
        .opcode = XCB_XV_SHM_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xv_shm_put_image_request_t xcb_out;

    xcb_out.port = port;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.shmseg = shmseg;
    xcb_out.id = id;
    xcb_out.offset = offset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_w = src_w;
    xcb_out.src_h = src_h;
    xcb_out.drw_x = drw_x;
    xcb_out.drw_y = drw_y;
    xcb_out.drw_w = drw_w;
    xcb_out.drw_h = drw_h;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.send_event = send_event;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d23 1
a23 1
xcb_xv_port_next (xcb_xv_port_iterator_t *i  /**< */)
d31 1
a31 1
xcb_xv_port_end (xcb_xv_port_iterator_t i  /**< */)
d41 1
a41 1
xcb_xv_encoding_next (xcb_xv_encoding_iterator_t *i  /**< */)
d49 1
a49 1
xcb_xv_encoding_end (xcb_xv_encoding_iterator_t i  /**< */)
d59 1
a59 1
xcb_xv_rational_next (xcb_xv_rational_iterator_t *i  /**< */)
d67 1
a67 1
xcb_xv_rational_end (xcb_xv_rational_iterator_t i  /**< */)
d77 1
a77 1
xcb_xv_format_next (xcb_xv_format_iterator_t *i  /**< */)
d85 1
a85 1
xcb_xv_format_end (xcb_xv_format_iterator_t i  /**< */)
d95 1
a95 1
xcb_xv_adaptor_info_sizeof (const void  *_buffer  /**< */)
d147 1
a147 1
xcb_xv_adaptor_info_name (const xcb_xv_adaptor_info_t *R  /**< */)
d153 1
a153 1
xcb_xv_adaptor_info_name_length (const xcb_xv_adaptor_info_t *R  /**< */)
d159 1
a159 1
xcb_xv_adaptor_info_name_end (const xcb_xv_adaptor_info_t *R  /**< */)
d169 1
a169 1
xcb_xv_adaptor_info_formats (const xcb_xv_adaptor_info_t *R  /**< */)
d176 1
a176 1
xcb_xv_adaptor_info_formats_length (const xcb_xv_adaptor_info_t *R  /**< */)
d182 1
a182 1
xcb_xv_adaptor_info_formats_iterator (const xcb_xv_adaptor_info_t *R  /**< */)
d193 1
a193 1
xcb_xv_adaptor_info_next (xcb_xv_adaptor_info_iterator_t *i  /**< */)
d204 1
a204 1
xcb_xv_adaptor_info_end (xcb_xv_adaptor_info_iterator_t i  /**< */)
d216 1
a216 1
xcb_xv_encoding_info_sizeof (const void  *_buffer  /**< */)
d234 9
d256 1
a256 1
xcb_xv_encoding_info_name (const xcb_xv_encoding_info_t *R  /**< */)
d262 1
a262 1
xcb_xv_encoding_info_name_length (const xcb_xv_encoding_info_t *R  /**< */)
d268 1
a268 1
xcb_xv_encoding_info_name_end (const xcb_xv_encoding_info_t *R  /**< */)
d278 1
a278 1
xcb_xv_encoding_info_next (xcb_xv_encoding_info_iterator_t *i  /**< */)
d289 1
a289 1
xcb_xv_encoding_info_end (xcb_xv_encoding_info_iterator_t i  /**< */)
d301 1
a301 1
xcb_xv_image_sizeof (const void  *_buffer  /**< */)
d356 1
a356 1
xcb_xv_image_pitches (const xcb_xv_image_t *R  /**< */)
d362 1
a362 1
xcb_xv_image_pitches_length (const xcb_xv_image_t *R  /**< */)
d368 1
a368 1
xcb_xv_image_pitches_end (const xcb_xv_image_t *R  /**< */)
d378 1
a378 1
xcb_xv_image_offsets (const xcb_xv_image_t *R  /**< */)
d385 1
a385 1
xcb_xv_image_offsets_length (const xcb_xv_image_t *R  /**< */)
d391 1
a391 1
xcb_xv_image_offsets_end (const xcb_xv_image_t *R  /**< */)
d394 2
a395 2
    xcb_generic_iterator_t child = xcb_xv_image_pitches_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_planes);
d402 1
a402 1
xcb_xv_image_data (const xcb_xv_image_t *R  /**< */)
d409 1
a409 1
xcb_xv_image_data_length (const xcb_xv_image_t *R  /**< */)
d415 1
a415 1
xcb_xv_image_data_end (const xcb_xv_image_t *R  /**< */)
d418 2
a419 2
    xcb_generic_iterator_t child = xcb_xv_image_offsets_end(R);
    i.data = ((uint8_t *) child.data) + (R->data_size);
d426 1
a426 1
xcb_xv_image_next (xcb_xv_image_iterator_t *i  /**< */)
d437 1
a437 1
xcb_xv_image_end (xcb_xv_image_iterator_t i  /**< */)
d449 1
a449 1
xcb_xv_attribute_info_sizeof (const void  *_buffer  /**< */)
d467 9
d489 1
a489 1
xcb_xv_attribute_info_name (const xcb_xv_attribute_info_t *R  /**< */)
d495 1
a495 1
xcb_xv_attribute_info_name_length (const xcb_xv_attribute_info_t *R  /**< */)
d501 1
a501 1
xcb_xv_attribute_info_name_end (const xcb_xv_attribute_info_t *R  /**< */)
d511 1
a511 1
xcb_xv_attribute_info_next (xcb_xv_attribute_info_iterator_t *i  /**< */)
d522 1
a522 1
xcb_xv_attribute_info_end (xcb_xv_attribute_info_iterator_t i  /**< */)
d534 1
a534 1
xcb_xv_image_format_info_next (xcb_xv_image_format_info_iterator_t *i  /**< */)
d542 1
a542 1
xcb_xv_image_format_info_end (xcb_xv_image_format_info_iterator_t i  /**< */)
d552 1
a552 1
xcb_xv_query_extension (xcb_connection_t *c  /**< */)
d555 4
a558 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_EXTENSION,
        /* isvoid */ 0
d576 1
a576 1
xcb_xv_query_extension_unchecked (xcb_connection_t *c  /**< */)
d579 4
a582 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_EXTENSION,
        /* isvoid */ 0
d600 1
a600 1
xcb_xv_query_extension_reply (xcb_connection_t                 *c  /**< */,
d602 1
a602 1
                              xcb_generic_error_t             **e  /**< */)
d608 1
a608 1
xcb_xv_query_adaptors_sizeof (const void  *_buffer  /**< */)
d644 2
a645 2
xcb_xv_query_adaptors (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */)
d648 4
a651 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_ADAPTORS,
        /* isvoid */ 0
d670 2
a671 2
xcb_xv_query_adaptors_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */)
d674 4
a677 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_ADAPTORS,
        /* isvoid */ 0
d696 1
a696 1
xcb_xv_query_adaptors_info_length (const xcb_xv_query_adaptors_reply_t *R  /**< */)
d702 1
a702 1
xcb_xv_query_adaptors_info_iterator (const xcb_xv_query_adaptors_reply_t *R  /**< */)
d712 1
a712 1
xcb_xv_query_adaptors_reply (xcb_connection_t                *c  /**< */,
d714 1
a714 1
                             xcb_generic_error_t            **e  /**< */)
d720 1
a720 1
xcb_xv_query_encodings_sizeof (const void  *_buffer  /**< */)
d756 2
a757 2
xcb_xv_query_encodings (xcb_connection_t *c  /**< */,
                        xcb_xv_port_t     port  /**< */)
d760 4
a763 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_ENCODINGS,
        /* isvoid */ 0
d782 2
a783 2
xcb_xv_query_encodings_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_xv_port_t     port  /**< */)
d786 4
a789 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_ENCODINGS,
        /* isvoid */ 0
d808 1
a808 1
xcb_xv_query_encodings_info_length (const xcb_xv_query_encodings_reply_t *R  /**< */)
d814 1
a814 1
xcb_xv_query_encodings_info_iterator (const xcb_xv_query_encodings_reply_t *R  /**< */)
d824 1
a824 1
xcb_xv_query_encodings_reply (xcb_connection_t                 *c  /**< */,
d826 1
a826 1
                              xcb_generic_error_t             **e  /**< */)
d832 3
a834 3
xcb_xv_grab_port (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_timestamp_t   time  /**< */)
d837 4
a840 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GRAB_PORT,
        /* isvoid */ 0
d860 3
a862 3
xcb_xv_grab_port_unchecked (xcb_connection_t *c  /**< */,
                            xcb_xv_port_t     port  /**< */,
                            xcb_timestamp_t   time  /**< */)
d865 4
a868 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GRAB_PORT,
        /* isvoid */ 0
d888 1
a888 1
xcb_xv_grab_port_reply (xcb_connection_t           *c  /**< */,
d890 1
a890 1
                        xcb_generic_error_t       **e  /**< */)
d896 3
a898 3
xcb_xv_ungrab_port_checked (xcb_connection_t *c  /**< */,
                            xcb_xv_port_t     port  /**< */,
                            xcb_timestamp_t   time  /**< */)
d901 4
a904 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_UNGRAB_PORT,
        /* isvoid */ 1
d924 3
a926 3
xcb_xv_ungrab_port (xcb_connection_t *c  /**< */,
                    xcb_xv_port_t     port  /**< */,
                    xcb_timestamp_t   time  /**< */)
d929 4
a932 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_UNGRAB_PORT,
        /* isvoid */ 1
d952 18
a969 18
xcb_xv_put_video_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_VIDEO,
        /* isvoid */ 1
d998 18
a1015 18
xcb_xv_put_video (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_VIDEO,
        /* isvoid */ 1
d1044 18
a1061 18
xcb_xv_put_still_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_STILL,
        /* isvoid */ 1
d1090 18
a1107 18
xcb_xv_put_still (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_STILL,
        /* isvoid */ 1
d1136 18
a1153 18
xcb_xv_get_video_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_VIDEO,
        /* isvoid */ 1
d1182 18
a1199 18
xcb_xv_get_video (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_VIDEO,
        /* isvoid */ 1
d1228 18
a1245 18
xcb_xv_get_still_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           vid_x  /**< */,
                          int16_t           vid_y  /**< */,
                          uint16_t          vid_w  /**< */,
                          uint16_t          vid_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_STILL,
        /* isvoid */ 1
d1274 18
a1291 18
xcb_xv_get_still (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           vid_x  /**< */,
                  int16_t           vid_y  /**< */,
                  uint16_t          vid_w  /**< */,
                  uint16_t          vid_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_STILL,
        /* isvoid */ 1
d1320 3
a1322 3
xcb_xv_stop_video_checked (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_drawable_t    drawable  /**< */)
d1325 4
a1328 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_STOP_VIDEO,
        /* isvoid */ 1
d1348 3
a1350 3
xcb_xv_stop_video (xcb_connection_t *c  /**< */,
                   xcb_xv_port_t     port  /**< */,
                   xcb_drawable_t    drawable  /**< */)
d1353 4
a1356 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_STOP_VIDEO,
        /* isvoid */ 1
d1376 3
a1378 3
xcb_xv_select_video_notify_checked (xcb_connection_t *c  /**< */,
                                    xcb_drawable_t    drawable  /**< */,
                                    uint8_t           onoff  /**< */)
d1381 4
a1384 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SELECT_VIDEO_NOTIFY,
        /* isvoid */ 1
d1405 3
a1407 3
xcb_xv_select_video_notify (xcb_connection_t *c  /**< */,
                            xcb_drawable_t    drawable  /**< */,
                            uint8_t           onoff  /**< */)
d1410 4
a1413 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SELECT_VIDEO_NOTIFY,
        /* isvoid */ 1
d1434 3
a1436 3
xcb_xv_select_port_notify_checked (xcb_connection_t *c  /**< */,
                                   xcb_xv_port_t     port  /**< */,
                                   uint8_t           onoff  /**< */)
d1439 4
a1442 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SELECT_PORT_NOTIFY,
        /* isvoid */ 1
d1463 3
a1465 3
xcb_xv_select_port_notify (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           uint8_t           onoff  /**< */)
d1468 4
a1471 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SELECT_PORT_NOTIFY,
        /* isvoid */ 1
d1492 7
a1498 7
xcb_xv_query_best_size (xcb_connection_t *c  /**< */,
                        xcb_xv_port_t     port  /**< */,
                        uint16_t          vid_w  /**< */,
                        uint16_t          vid_h  /**< */,
                        uint16_t          drw_w  /**< */,
                        uint16_t          drw_h  /**< */,
                        uint8_t           motion  /**< */)
d1501 4
a1504 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_BEST_SIZE,
        /* isvoid */ 0
d1529 7
a1535 7
xcb_xv_query_best_size_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_xv_port_t     port  /**< */,
                                  uint16_t          vid_w  /**< */,
                                  uint16_t          vid_h  /**< */,
                                  uint16_t          drw_w  /**< */,
                                  uint16_t          drw_h  /**< */,
                                  uint8_t           motion  /**< */)
d1538 4
a1541 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_BEST_SIZE,
        /* isvoid */ 0
d1566 1
a1566 1
xcb_xv_query_best_size_reply (xcb_connection_t                 *c  /**< */,
d1568 1
a1568 1
                              xcb_generic_error_t             **e  /**< */)
d1574 4
a1577 4
xcb_xv_set_port_attribute_checked (xcb_connection_t *c  /**< */,
                                   xcb_xv_port_t     port  /**< */,
                                   xcb_atom_t        attribute  /**< */,
                                   int32_t           value  /**< */)
d1580 4
a1583 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SET_PORT_ATTRIBUTE,
        /* isvoid */ 1
d1604 4
a1607 4
xcb_xv_set_port_attribute (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_atom_t        attribute  /**< */,
                           int32_t           value  /**< */)
d1610 4
a1613 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SET_PORT_ATTRIBUTE,
        /* isvoid */ 1
d1634 3
a1636 3
xcb_xv_get_port_attribute (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */,
                           xcb_atom_t        attribute  /**< */)
d1639 4
a1642 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_PORT_ATTRIBUTE,
        /* isvoid */ 0
d1662 3
a1664 3
xcb_xv_get_port_attribute_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_xv_port_t     port  /**< */,
                                     xcb_atom_t        attribute  /**< */)
d1667 4
a1670 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_GET_PORT_ATTRIBUTE,
        /* isvoid */ 0
d1690 1
a1690 1
xcb_xv_get_port_attribute_reply (xcb_connection_t                    *c  /**< */,
d1692 1
a1692 1
                                 xcb_generic_error_t                **e  /**< */)
d1698 1
a1698 1
xcb_xv_query_port_attributes_sizeof (const void  *_buffer  /**< */)
d1734 2
a1735 2
xcb_xv_query_port_attributes (xcb_connection_t *c  /**< */,
                              xcb_xv_port_t     port  /**< */)
d1738 4
a1741 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_PORT_ATTRIBUTES,
        /* isvoid */ 0
d1760 2
a1761 2
xcb_xv_query_port_attributes_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_xv_port_t     port  /**< */)
d1764 4
a1767 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_PORT_ATTRIBUTES,
        /* isvoid */ 0
d1786 1
a1786 1
xcb_xv_query_port_attributes_attributes_length (const xcb_xv_query_port_attributes_reply_t *R  /**< */)
d1792 1
a1792 1
xcb_xv_query_port_attributes_attributes_iterator (const xcb_xv_query_port_attributes_reply_t *R  /**< */)
d1802 1
a1802 1
xcb_xv_query_port_attributes_reply (xcb_connection_t                       *c  /**< */,
d1804 1
a1804 1
                                    xcb_generic_error_t                   **e  /**< */)
d1810 1
a1810 1
xcb_xv_list_image_formats_sizeof (const void  *_buffer  /**< */)
d1841 2
a1842 2
xcb_xv_list_image_formats (xcb_connection_t *c  /**< */,
                           xcb_xv_port_t     port  /**< */)
d1845 4
a1848 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_LIST_IMAGE_FORMATS,
        /* isvoid */ 0
d1867 2
a1868 2
xcb_xv_list_image_formats_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_xv_port_t     port  /**< */)
d1871 4
a1874 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_LIST_IMAGE_FORMATS,
        /* isvoid */ 0
d1893 1
a1893 1
xcb_xv_list_image_formats_format (const xcb_xv_list_image_formats_reply_t *R  /**< */)
d1899 1
a1899 1
xcb_xv_list_image_formats_format_length (const xcb_xv_list_image_formats_reply_t *R  /**< */)
d1905 1
a1905 1
xcb_xv_list_image_formats_format_iterator (const xcb_xv_list_image_formats_reply_t *R  /**< */)
d1915 1
a1915 1
xcb_xv_list_image_formats_reply (xcb_connection_t                    *c  /**< */,
d1917 1
a1917 1
                                 xcb_generic_error_t                **e  /**< */)
d1923 1
a1923 1
xcb_xv_query_image_attributes_sizeof (const void  *_buffer  /**< */)
d1966 5
a1970 5
xcb_xv_query_image_attributes (xcb_connection_t *c  /**< */,
                               xcb_xv_port_t     port  /**< */,
                               uint32_t          id  /**< */,
                               uint16_t          width  /**< */,
                               uint16_t          height  /**< */)
d1973 4
a1976 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_IMAGE_ATTRIBUTES,
        /* isvoid */ 0
d1998 5
a2002 5
xcb_xv_query_image_attributes_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_xv_port_t     port  /**< */,
                                         uint32_t          id  /**< */,
                                         uint16_t          width  /**< */,
                                         uint16_t          height  /**< */)
d2005 4
a2008 4
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_QUERY_IMAGE_ATTRIBUTES,
        /* isvoid */ 0
d2030 1
a2030 1
xcb_xv_query_image_attributes_pitches (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2036 1
a2036 1
xcb_xv_query_image_attributes_pitches_length (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2042 1
a2042 1
xcb_xv_query_image_attributes_pitches_end (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2052 1
a2052 1
xcb_xv_query_image_attributes_offsets (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2059 1
a2059 1
xcb_xv_query_image_attributes_offsets_length (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2065 1
a2065 1
xcb_xv_query_image_attributes_offsets_end (const xcb_xv_query_image_attributes_reply_t *R  /**< */)
d2068 2
a2069 2
    xcb_generic_iterator_t child = xcb_xv_query_image_attributes_pitches_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_planes);
d2076 1
a2076 1
xcb_xv_query_image_attributes_reply (xcb_connection_t                        *c  /**< */,
d2078 1
a2078 1
                                     xcb_generic_error_t                    **e  /**< */)
d2084 2
a2085 2
xcb_xv_put_image_sizeof (const void  *_buffer  /**< */,
                         uint32_t     data_len  /**< */)
d2115 23
a2137 23
xcb_xv_put_image_checked (xcb_connection_t *c  /**< */,
                          xcb_xv_port_t     port  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          uint32_t          id  /**< */,
                          int16_t           src_x  /**< */,
                          int16_t           src_y  /**< */,
                          uint16_t          src_w  /**< */,
                          uint16_t          src_h  /**< */,
                          int16_t           drw_x  /**< */,
                          int16_t           drw_y  /**< */,
                          uint16_t          drw_w  /**< */,
                          uint16_t          drw_h  /**< */,
                          uint16_t          width  /**< */,
                          uint16_t          height  /**< */,
                          uint32_t          data_len  /**< */,
                          const uint8_t    *data  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_IMAGE,
        /* isvoid */ 1
d2174 23
a2196 23
xcb_xv_put_image (xcb_connection_t *c  /**< */,
                  xcb_xv_port_t     port  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  uint32_t          id  /**< */,
                  int16_t           src_x  /**< */,
                  int16_t           src_y  /**< */,
                  uint16_t          src_w  /**< */,
                  uint16_t          src_h  /**< */,
                  int16_t           drw_x  /**< */,
                  int16_t           drw_y  /**< */,
                  uint16_t          drw_w  /**< */,
                  uint16_t          drw_h  /**< */,
                  uint16_t          width  /**< */,
                  uint16_t          height  /**< */,
                  uint32_t          data_len  /**< */,
                  const uint8_t    *data  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_PUT_IMAGE,
        /* isvoid */ 1
d2232 22
d2255 24
a2278 24
xcb_xv_shm_put_image_checked (xcb_connection_t *c  /**< */,
                              xcb_xv_port_t     port  /**< */,
                              xcb_drawable_t    drawable  /**< */,
                              xcb_gcontext_t    gc  /**< */,
                              xcb_shm_seg_t     shmseg  /**< */,
                              uint32_t          id  /**< */,
                              uint32_t          offset  /**< */,
                              int16_t           src_x  /**< */,
                              int16_t           src_y  /**< */,
                              uint16_t          src_w  /**< */,
                              uint16_t          src_h  /**< */,
                              int16_t           drw_x  /**< */,
                              int16_t           drw_y  /**< */,
                              uint16_t          drw_w  /**< */,
                              uint16_t          drw_h  /**< */,
                              uint16_t          width  /**< */,
                              uint16_t          height  /**< */,
                              uint8_t           send_event  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SHM_PUT_IMAGE,
        /* isvoid */ 1
d2314 24
a2337 24
xcb_xv_shm_put_image (xcb_connection_t *c  /**< */,
                      xcb_xv_port_t     port  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      xcb_gcontext_t    gc  /**< */,
                      xcb_shm_seg_t     shmseg  /**< */,
                      uint32_t          id  /**< */,
                      uint32_t          offset  /**< */,
                      int16_t           src_x  /**< */,
                      int16_t           src_y  /**< */,
                      uint16_t          src_w  /**< */,
                      uint16_t          src_h  /**< */,
                      int16_t           drw_x  /**< */,
                      int16_t           drw_y  /**< */,
                      uint16_t          drw_w  /**< */,
                      uint16_t          drw_h  /**< */,
                      uint16_t          width  /**< */,
                      uint16_t          height  /**< */,
                      uint8_t           send_event  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xv_id,
        /* opcode */ XCB_XV_SHM_PUT_IMAGE,
        /* isvoid */ 1
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a21 10

/*****************************************************************************
 **
 ** void xcb_xv_port_next
 ** 
 ** @@param xcb_xv_port_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a29 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_port_end
 ** 
 ** @@param xcb_xv_port_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a39 10

/*****************************************************************************
 **
 ** void xcb_xv_encoding_next
 ** 
 ** @@param xcb_xv_encoding_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a47 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_end
 ** 
 ** @@param xcb_xv_encoding_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a57 10

/*****************************************************************************
 **
 ** void xcb_xv_rational_next
 ** 
 ** @@param xcb_xv_rational_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a65 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_rational_end
 ** 
 ** @@param xcb_xv_rational_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a75 10

/*****************************************************************************
 **
 ** void xcb_xv_format_next
 ** 
 ** @@param xcb_xv_format_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a83 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_format_end
 ** 
 ** @@param xcb_xv_format_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d113 9
a145 10

/*****************************************************************************
 **
 ** char * xcb_xv_adaptor_info_name
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a151 10

/*****************************************************************************
 **
 ** int xcb_xv_adaptor_info_name_length
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a157 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_adaptor_info_name_end
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a167 10

/*****************************************************************************
 **
 ** xcb_xv_format_t * xcb_xv_adaptor_info_formats
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_xv_format_t *
 **
 *****************************************************************************/
 
d172 1
a172 1
    return (xcb_xv_format_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xv_format_t, prev.index) + 0);
a174 10

/*****************************************************************************
 **
 ** int xcb_xv_adaptor_info_formats_length
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a180 10

/*****************************************************************************
 **
 ** xcb_xv_format_iterator_t xcb_xv_adaptor_info_formats_iterator
 ** 
 ** @@param const xcb_xv_adaptor_info_t *R
 ** @@returns xcb_xv_format_iterator_t
 **
 *****************************************************************************/
 
d186 1
a186 1
    i.data = (xcb_xv_format_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xv_format_t, prev.index));
a191 10

/*****************************************************************************
 **
 ** void xcb_xv_adaptor_info_next
 ** 
 ** @@param xcb_xv_adaptor_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a202 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_adaptor_info_end
 ** 
 ** @@param xcb_xv_adaptor_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a245 10

/*****************************************************************************
 **
 ** char * xcb_xv_encoding_info_name
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a251 10

/*****************************************************************************
 **
 ** int xcb_xv_encoding_info_name_length
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a257 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_info_name_end
 ** 
 ** @@param const xcb_xv_encoding_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a267 10

/*****************************************************************************
 **
 ** void xcb_xv_encoding_info_next
 ** 
 ** @@param xcb_xv_encoding_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a278 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_encoding_info_end
 ** 
 ** @@param xcb_xv_encoding_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a345 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_image_pitches
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a351 10

/*****************************************************************************
 **
 ** int xcb_xv_image_pitches_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a357 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_pitches_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a367 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_image_offsets
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a374 10

/*****************************************************************************
 **
 ** int xcb_xv_image_offsets_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a380 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_offsets_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a391 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xv_image_data
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a398 10

/*****************************************************************************
 **
 ** int xcb_xv_image_data_length
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a404 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_data_end
 ** 
 ** @@param const xcb_xv_image_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a415 10

/*****************************************************************************
 **
 ** void xcb_xv_image_next
 ** 
 ** @@param xcb_xv_image_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a426 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_end
 ** 
 ** @@param xcb_xv_image_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a469 10

/*****************************************************************************
 **
 ** char * xcb_xv_attribute_info_name
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a475 10

/*****************************************************************************
 **
 ** int xcb_xv_attribute_info_name_length
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a481 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_attribute_info_name_end
 ** 
 ** @@param const xcb_xv_attribute_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a491 10

/*****************************************************************************
 **
 ** void xcb_xv_attribute_info_next
 ** 
 ** @@param xcb_xv_attribute_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a502 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_attribute_info_end
 ** 
 ** @@param xcb_xv_attribute_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a514 10

/*****************************************************************************
 **
 ** void xcb_xv_image_format_info_next
 ** 
 ** @@param xcb_xv_image_format_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a522 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_image_format_info_end
 ** 
 ** @@param xcb_xv_image_format_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a532 10

/*****************************************************************************
 **
 ** xcb_xv_query_extension_cookie_t xcb_xv_query_extension
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xv_query_extension_cookie_t
 **
 *****************************************************************************/
 
d542 1
a542 1
    
d546 2
a547 2
    
    
d552 1
a552 1
    
a556 10

/*****************************************************************************
 **
 ** xcb_xv_query_extension_cookie_t xcb_xv_query_extension_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xv_query_extension_cookie_t
 **
 *****************************************************************************/
 
d566 1
a566 1
    
d570 2
a571 2
    
    
d576 1
a576 1
    
a580 12

/*****************************************************************************
 **
 ** xcb_xv_query_extension_reply_t * xcb_xv_query_extension_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_extension_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_extension_reply_t *
 **
 *****************************************************************************/
 
a624 11

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_cookie_t xcb_xv_query_adaptors
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xv_query_adaptors_cookie_t
 **
 *****************************************************************************/
 
d635 1
a635 1
    
d639 1
a639 1
    
d641 1
a641 1
    
d646 1
a646 1
    
a650 11

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_cookie_t xcb_xv_query_adaptors_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xv_query_adaptors_cookie_t
 **
 *****************************************************************************/
 
d661 1
a661 1
    
d665 1
a665 1
    
d667 1
a667 1
    
d672 1
a672 1
    
a676 10

/*****************************************************************************
 **
 ** int xcb_xv_query_adaptors_info_length
 ** 
 ** @@param const xcb_xv_query_adaptors_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a682 10

/*****************************************************************************
 **
 ** xcb_xv_adaptor_info_iterator_t xcb_xv_query_adaptors_info_iterator
 ** 
 ** @@param const xcb_xv_query_adaptors_reply_t *R
 ** @@returns xcb_xv_adaptor_info_iterator_t
 **
 *****************************************************************************/
 
a692 12

/*****************************************************************************
 **
 ** xcb_xv_query_adaptors_reply_t * xcb_xv_query_adaptors_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_xv_query_adaptors_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_xv_query_adaptors_reply_t *
 **
 *****************************************************************************/
 
a736 11

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_cookie_t xcb_xv_query_encodings
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_encodings_cookie_t
 **
 *****************************************************************************/
 
d747 1
a747 1
    
d751 1
a751 1
    
d753 1
a753 1
    
d758 1
a758 1
    
a762 11

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_cookie_t xcb_xv_query_encodings_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_encodings_cookie_t
 **
 *****************************************************************************/
 
d773 1
a773 1
    
d777 1
a777 1
    
d779 1
a779 1
    
d784 1
a784 1
    
a788 10

/*****************************************************************************
 **
 ** int xcb_xv_query_encodings_info_length
 ** 
 ** @@param const xcb_xv_query_encodings_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a794 10

/*****************************************************************************
 **
 ** xcb_xv_encoding_info_iterator_t xcb_xv_query_encodings_info_iterator
 ** 
 ** @@param const xcb_xv_query_encodings_reply_t *R
 ** @@returns xcb_xv_encoding_info_iterator_t
 **
 *****************************************************************************/
 
a804 12

/*****************************************************************************
 **
 ** xcb_xv_query_encodings_reply_t * xcb_xv_query_encodings_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_encodings_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_encodings_reply_t *
 **
 *****************************************************************************/
 
a812 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_cookie_t xcb_xv_grab_port
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_xv_grab_port_cookie_t
 **
 *****************************************************************************/
 
d824 1
a824 1
    
d828 1
a828 1
    
d831 1
a831 1
    
d836 1
a836 1
    
a840 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_cookie_t xcb_xv_grab_port_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_xv_grab_port_cookie_t
 **
 *****************************************************************************/
 
d852 1
a852 1
    
d856 1
a856 1
    
d859 1
a859 1
    
d864 1
a864 1
    
a868 12

/*****************************************************************************
 **
 ** xcb_xv_grab_port_reply_t * xcb_xv_grab_port_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_xv_grab_port_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_xv_grab_port_reply_t *
 **
 *****************************************************************************/
 
a876 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_ungrab_port_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d888 1
a888 1
    
d892 1
a892 1
    
d895 1
a895 1
    
d900 1
a900 1
    
a904 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_ungrab_port
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d916 1
a916 1
    
d920 1
a920 1
    
d923 1
a923 1
    
d928 1
a928 1
    
a932 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d953 1
a953 1
    
d957 1
a957 1
    
d969 1
a969 1
    
d974 1
a974 1
    
a978 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d999 1
a999 1
    
d1003 1
a1003 1
    
d1015 1
a1015 1
    
d1020 1
a1020 1
    
a1024 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_still_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1045 1
a1045 1
    
d1049 1
a1049 1
    
d1061 1
a1061 1
    
d1066 1
a1066 1
    
a1070 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_still
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1091 1
a1091 1
    
d1095 1
a1095 1
    
d1107 1
a1107 1
    
d1112 1
a1112 1
    
a1116 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1137 1
a1137 1
    
d1141 1
a1141 1
    
d1153 1
a1153 1
    
d1158 1
a1158 1
    
a1162 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1183 1
a1183 1
    
d1187 1
a1187 1
    
d1199 1
a1199 1
    
d1204 1
a1204 1
    
a1208 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_still_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1229 1
a1229 1
    
d1233 1
a1233 1
    
d1245 1
a1245 1
    
d1250 1
a1250 1
    
a1254 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_get_still
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           vid_x
 ** @@param int16_t           vid_y
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1275 1
a1275 1
    
d1279 1
a1279 1
    
d1291 1
a1291 1
    
d1296 1
a1296 1
    
a1300 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_stop_video_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1312 1
a1312 1
    
d1316 1
a1316 1
    
d1319 1
a1319 1
    
d1324 1
a1324 1
    
a1328 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_stop_video
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1340 1
a1340 1
    
d1344 1
a1344 1
    
d1347 1
a1347 1
    
d1352 1
a1352 1
    
a1356 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_video_notify_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1368 1
a1368 1
    
d1372 1
a1372 1
    
d1376 1
a1376 1
    
d1381 1
a1381 1
    
a1385 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_video_notify
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1397 1
a1397 1
    
d1401 1
a1401 1
    
d1405 1
a1405 1
    
d1410 1
a1410 1
    
a1414 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_port_notify_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1426 1
a1426 1
    
d1430 1
a1430 1
    
d1434 1
a1434 1
    
d1439 1
a1439 1
    
a1443 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_select_port_notify
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint8_t           onoff
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1455 1
a1455 1
    
d1459 1
a1459 1
    
d1463 1
a1463 1
    
d1468 1
a1468 1
    
a1472 16

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_cookie_t xcb_xv_query_best_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint8_t           motion
 ** @@returns xcb_xv_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d1488 1
a1488 1
    
d1492 1
a1492 1
    
d1500 1
a1500 1
    
d1505 1
a1505 1
    
a1509 16

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_cookie_t xcb_xv_query_best_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint16_t          vid_w
 ** @@param uint16_t          vid_h
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint8_t           motion
 ** @@returns xcb_xv_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d1525 1
a1525 1
    
d1529 1
a1529 1
    
d1537 1
a1537 1
    
d1542 1
a1542 1
    
a1546 12

/*****************************************************************************
 **
 ** xcb_xv_query_best_size_reply_t * xcb_xv_query_best_size_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xv_query_best_size_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xv_query_best_size_reply_t *
 **
 *****************************************************************************/
 
a1554 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_set_port_attribute_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@param int32_t           value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1567 1
a1567 1
    
d1571 1
a1571 1
    
d1575 1
a1575 1
    
d1580 1
a1580 1
    
a1584 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_set_port_attribute
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@param int32_t           value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1597 1
a1597 1
    
d1601 1
a1601 1
    
d1605 1
a1605 1
    
d1610 1
a1610 1
    
a1614 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_cookie_t xcb_xv_get_port_attribute
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@returns xcb_xv_get_port_attribute_cookie_t
 **
 *****************************************************************************/
 
d1626 1
a1626 1
    
d1630 1
a1630 1
    
d1633 1
a1633 1
    
d1638 1
a1638 1
    
a1642 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_cookie_t xcb_xv_get_port_attribute_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_atom_t        attribute
 ** @@returns xcb_xv_get_port_attribute_cookie_t
 **
 *****************************************************************************/
 
d1654 1
a1654 1
    
d1658 1
a1658 1
    
d1661 1
a1661 1
    
d1666 1
a1666 1
    
a1670 12

/*****************************************************************************
 **
 ** xcb_xv_get_port_attribute_reply_t * xcb_xv_get_port_attribute_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xv_get_port_attribute_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xv_get_port_attribute_reply_t *
 **
 *****************************************************************************/
 
a1714 11

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_cookie_t xcb_xv_query_port_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_port_attributes_cookie_t
 **
 *****************************************************************************/
 
d1725 1
a1725 1
    
d1729 1
a1729 1
    
d1731 1
a1731 1
    
d1736 1
a1736 1
    
a1740 11

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_cookie_t xcb_xv_query_port_attributes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_query_port_attributes_cookie_t
 **
 *****************************************************************************/
 
d1751 1
a1751 1
    
d1755 1
a1755 1
    
d1757 1
a1757 1
    
d1762 1
a1762 1
    
a1766 10

/*****************************************************************************
 **
 ** int xcb_xv_query_port_attributes_attributes_length
 ** 
 ** @@param const xcb_xv_query_port_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1772 10

/*****************************************************************************
 **
 ** xcb_xv_attribute_info_iterator_t xcb_xv_query_port_attributes_attributes_iterator
 ** 
 ** @@param const xcb_xv_query_port_attributes_reply_t *R
 ** @@returns xcb_xv_attribute_info_iterator_t
 **
 *****************************************************************************/
 
a1782 12

/*****************************************************************************
 **
 ** xcb_xv_query_port_attributes_reply_t * xcb_xv_query_port_attributes_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_xv_query_port_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_xv_query_port_attributes_reply_t *
 **
 *****************************************************************************/
 
a1821 11

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_cookie_t xcb_xv_list_image_formats
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_list_image_formats_cookie_t
 **
 *****************************************************************************/
 
d1832 1
a1832 1
    
d1836 1
a1836 1
    
d1838 1
a1838 1
    
d1843 1
a1843 1
    
a1847 11

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_cookie_t xcb_xv_list_image_formats_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@returns xcb_xv_list_image_formats_cookie_t
 **
 *****************************************************************************/
 
d1858 1
a1858 1
    
d1862 1
a1862 1
    
d1864 1
a1864 1
    
d1869 1
a1869 1
    
a1873 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_t * xcb_xv_list_image_formats_format
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns xcb_xv_image_format_info_t *
 **
 *****************************************************************************/
 
a1879 10

/*****************************************************************************
 **
 ** int xcb_xv_list_image_formats_format_length
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1885 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_iterator_t xcb_xv_list_image_formats_format_iterator
 ** 
 ** @@param const xcb_xv_list_image_formats_reply_t *R
 ** @@returns xcb_xv_image_format_info_iterator_t
 **
 *****************************************************************************/
 
a1895 12

/*****************************************************************************
 **
 ** xcb_xv_list_image_formats_reply_t * xcb_xv_list_image_formats_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xv_list_image_formats_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xv_list_image_formats_reply_t *
 **
 *****************************************************************************/
 
a1946 14

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_cookie_t xcb_xv_query_image_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint32_t          id
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_xv_query_image_attributes_cookie_t
 **
 *****************************************************************************/
 
d1960 1
a1960 1
    
d1964 1
a1964 1
    
d1969 1
a1969 1
    
d1974 1
a1974 1
    
a1978 14

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_cookie_t xcb_xv_query_image_attributes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param uint32_t          id
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_xv_query_image_attributes_cookie_t
 **
 *****************************************************************************/
 
d1992 1
a1992 1
    
d1996 1
a1996 1
    
d2001 1
a2001 1
    
d2006 1
a2006 1
    
a2010 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_query_image_attributes_pitches
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a2016 10

/*****************************************************************************
 **
 ** int xcb_xv_query_image_attributes_pitches_length
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2022 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_query_image_attributes_pitches_end
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2032 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xv_query_image_attributes_offsets
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a2039 10

/*****************************************************************************
 **
 ** int xcb_xv_query_image_attributes_offsets_length
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2045 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xv_query_image_attributes_offsets_end
 ** 
 ** @@param const xcb_xv_query_image_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2056 12

/*****************************************************************************
 **
 ** xcb_xv_query_image_attributes_reply_t * xcb_xv_query_image_attributes_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_xv_query_image_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_xv_query_image_attributes_reply_t *
 **
 *****************************************************************************/
 
a2095 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          id
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2121 1
a2121 1
    
d2125 1
a2125 1
    
d2140 1
a2140 1
    
d2150 1
a2150 1
    
a2154 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          id
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2180 1
a2180 1
    
d2184 1
a2184 1
    
d2199 1
a2199 1
    
d2209 1
a2209 1
    
a2213 27

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_shm_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          id
 ** @@param uint32_t          offset
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           send_event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2240 1
a2240 1
    
d2244 1
a2244 1
    
d2263 1
a2263 1
    
d2268 1
a2268 1
    
a2272 27

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xv_shm_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          id
 ** @@param uint32_t          offset
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_w
 ** @@param uint16_t          src_h
 ** @@param int16_t           drw_x
 ** @@param int16_t           drw_y
 ** @@param uint16_t          drw_w
 ** @@param uint16_t          drw_h
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           send_event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2299 1
a2299 1
    
d2303 1
a2303 1
    
d2322 1
a2322 1
    
d2327 1
a2327 1
    
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d182 1
a182 1
    unsigned int xcb_align_to;
d187 2
d374 1
a374 1
    unsigned int xcb_align_to;
d379 2
d500 1
a500 1
    unsigned int xcb_align_to;
d505 2
d758 1
a758 1
    unsigned int xcb_align_to;
d763 2
d1010 1
a1010 1
    unsigned int xcb_align_to;
d1017 2
d1176 1
a1176 1
    unsigned int xcb_align_to;
d1183 2
d2614 1
a2614 1
    unsigned int xcb_align_to;
d2621 2
d2780 1
a2780 1
    unsigned int xcb_align_to;
d2785 2
d2957 1
a2957 1
    unsigned int xcb_align_to;
d2962 2
d3218 1
a3218 1
    unsigned int xcb_align_to;
d3223 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d174 41
d335 3
a337 1
    xcb_generic_iterator_t child = xcb_xv_format_end(xcb_xv_adaptor_info_formats_iterator(R));
a339 1
    i->index = child.index;
d364 29
d459 3
a461 1
    xcb_generic_iterator_t child = xcb_xv_encoding_info_name_end(R);
a463 1
    i->index = child.index;
d488 53
d715 3
a717 1
    xcb_generic_iterator_t child = xcb_xv_image_data_end(R);
a719 1
    i->index = child.index;
d744 29
d839 3
a841 1
    xcb_generic_iterator_t child = xcb_xv_attribute_info_name_end(R);
a843 1
    i->index = child.index;
d935 1
d969 1
d994 34
d1060 1
d1097 1
d1158 34
d1224 1
d1261 1
d1357 1
d1397 1
d1457 1
d1497 1
d1564 1
d1631 1
d1698 1
d1765 1
d1832 1
d1899 1
d1966 1
d2033 1
d2073 1
d2113 1
d2154 1
d2195 1
d2236 1
d2277 1
d2330 1
d2383 1
d2446 1
d2489 1
d2529 1
d2569 1
d2594 34
d2660 1
d2697 1
d2758 29
d2819 1
d2856 1
d2933 41
d3015 1
d3061 1
d3192 29
d3296 1
d3301 1
d3381 1
d3386 1
d3472 1
d3558 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
