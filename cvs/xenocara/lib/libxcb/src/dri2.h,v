head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dri2.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_DRI2_API XCB DRI2 API
 * @@brief DRI2 XCB Protocol Implementation.
 * @@{
 **/

#ifndef __DRI2_H
#define __DRI2_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_DRI2_MAJOR_VERSION 1
#define XCB_DRI2_MINOR_VERSION 4

extern xcb_extension_t xcb_dri2_id;

typedef enum xcb_dri2_attachment_t {
    XCB_DRI2_ATTACHMENT_BUFFER_FRONT_LEFT = 0,
    XCB_DRI2_ATTACHMENT_BUFFER_BACK_LEFT = 1,
    XCB_DRI2_ATTACHMENT_BUFFER_FRONT_RIGHT = 2,
    XCB_DRI2_ATTACHMENT_BUFFER_BACK_RIGHT = 3,
    XCB_DRI2_ATTACHMENT_BUFFER_DEPTH = 4,
    XCB_DRI2_ATTACHMENT_BUFFER_STENCIL = 5,
    XCB_DRI2_ATTACHMENT_BUFFER_ACCUM = 6,
    XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_LEFT = 7,
    XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_RIGHT = 8,
    XCB_DRI2_ATTACHMENT_BUFFER_DEPTH_STENCIL = 9,
    XCB_DRI2_ATTACHMENT_BUFFER_HIZ = 10
} xcb_dri2_attachment_t;

typedef enum xcb_dri2_driver_type_t {
    XCB_DRI2_DRIVER_TYPE_DRI = 0,
    XCB_DRI2_DRIVER_TYPE_VDPAU = 1
} xcb_dri2_driver_type_t;

typedef enum xcb_dri2_event_type_t {
    XCB_DRI2_EVENT_TYPE_EXCHANGE_COMPLETE = 1,
    XCB_DRI2_EVENT_TYPE_BLIT_COMPLETE = 2,
    XCB_DRI2_EVENT_TYPE_FLIP_COMPLETE = 3
} xcb_dri2_event_type_t;

/**
 * @@brief xcb_dri2_dri2_buffer_t
 **/
typedef struct xcb_dri2_dri2_buffer_t {
    uint32_t attachment;
    uint32_t name;
    uint32_t pitch;
    uint32_t cpp;
    uint32_t flags;
} xcb_dri2_dri2_buffer_t;

/**
 * @@brief xcb_dri2_dri2_buffer_iterator_t
 **/
typedef struct xcb_dri2_dri2_buffer_iterator_t {
    xcb_dri2_dri2_buffer_t *data;
    int                     rem;
    int                     index;
} xcb_dri2_dri2_buffer_iterator_t;

/**
 * @@brief xcb_dri2_attach_format_t
 **/
typedef struct xcb_dri2_attach_format_t {
    uint32_t attachment;
    uint32_t format;
} xcb_dri2_attach_format_t;

/**
 * @@brief xcb_dri2_attach_format_iterator_t
 **/
typedef struct xcb_dri2_attach_format_iterator_t {
    xcb_dri2_attach_format_t *data;
    int                       rem;
    int                       index;
} xcb_dri2_attach_format_iterator_t;

/**
 * @@brief xcb_dri2_query_version_cookie_t
 **/
typedef struct xcb_dri2_query_version_cookie_t {
    unsigned int sequence;
} xcb_dri2_query_version_cookie_t;

/** Opcode for xcb_dri2_query_version. */
#define XCB_DRI2_QUERY_VERSION 0

/**
 * @@brief xcb_dri2_query_version_request_t
 **/
typedef struct xcb_dri2_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_dri2_query_version_request_t;

/**
 * @@brief xcb_dri2_query_version_reply_t
 **/
typedef struct xcb_dri2_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_dri2_query_version_reply_t;

/**
 * @@brief xcb_dri2_connect_cookie_t
 **/
typedef struct xcb_dri2_connect_cookie_t {
    unsigned int sequence;
} xcb_dri2_connect_cookie_t;

/** Opcode for xcb_dri2_connect. */
#define XCB_DRI2_CONNECT 1

/**
 * @@brief xcb_dri2_connect_request_t
 **/
typedef struct xcb_dri2_connect_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint32_t     driver_type;
} xcb_dri2_connect_request_t;

/**
 * @@brief xcb_dri2_connect_reply_t
 **/
typedef struct xcb_dri2_connect_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t driver_name_length;
    uint32_t device_name_length;
    uint8_t  pad1[16];
} xcb_dri2_connect_reply_t;

/**
 * @@brief xcb_dri2_authenticate_cookie_t
 **/
typedef struct xcb_dri2_authenticate_cookie_t {
    unsigned int sequence;
} xcb_dri2_authenticate_cookie_t;

/** Opcode for xcb_dri2_authenticate. */
#define XCB_DRI2_AUTHENTICATE 2

/**
 * @@brief xcb_dri2_authenticate_request_t
 **/
typedef struct xcb_dri2_authenticate_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint32_t     magic;
} xcb_dri2_authenticate_request_t;

/**
 * @@brief xcb_dri2_authenticate_reply_t
 **/
typedef struct xcb_dri2_authenticate_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t authenticated;
} xcb_dri2_authenticate_reply_t;

/** Opcode for xcb_dri2_create_drawable. */
#define XCB_DRI2_CREATE_DRAWABLE 3

/**
 * @@brief xcb_dri2_create_drawable_request_t
 **/
typedef struct xcb_dri2_create_drawable_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
} xcb_dri2_create_drawable_request_t;

/** Opcode for xcb_dri2_destroy_drawable. */
#define XCB_DRI2_DESTROY_DRAWABLE 4

/**
 * @@brief xcb_dri2_destroy_drawable_request_t
 **/
typedef struct xcb_dri2_destroy_drawable_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
} xcb_dri2_destroy_drawable_request_t;

/**
 * @@brief xcb_dri2_get_buffers_cookie_t
 **/
typedef struct xcb_dri2_get_buffers_cookie_t {
    unsigned int sequence;
} xcb_dri2_get_buffers_cookie_t;

/** Opcode for xcb_dri2_get_buffers. */
#define XCB_DRI2_GET_BUFFERS 5

/**
 * @@brief xcb_dri2_get_buffers_request_t
 **/
typedef struct xcb_dri2_get_buffers_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       count;
} xcb_dri2_get_buffers_request_t;

/**
 * @@brief xcb_dri2_get_buffers_reply_t
 **/
typedef struct xcb_dri2_get_buffers_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t width;
    uint32_t height;
    uint32_t count;
    uint8_t  pad1[12];
} xcb_dri2_get_buffers_reply_t;

/**
 * @@brief xcb_dri2_copy_region_cookie_t
 **/
typedef struct xcb_dri2_copy_region_cookie_t {
    unsigned int sequence;
} xcb_dri2_copy_region_cookie_t;

/** Opcode for xcb_dri2_copy_region. */
#define XCB_DRI2_COPY_REGION 6

/**
 * @@brief xcb_dri2_copy_region_request_t
 **/
typedef struct xcb_dri2_copy_region_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       region;
    uint32_t       dest;
    uint32_t       src;
} xcb_dri2_copy_region_request_t;

/**
 * @@brief xcb_dri2_copy_region_reply_t
 **/
typedef struct xcb_dri2_copy_region_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
} xcb_dri2_copy_region_reply_t;

/**
 * @@brief xcb_dri2_get_buffers_with_format_cookie_t
 **/
typedef struct xcb_dri2_get_buffers_with_format_cookie_t {
    unsigned int sequence;
} xcb_dri2_get_buffers_with_format_cookie_t;

/** Opcode for xcb_dri2_get_buffers_with_format. */
#define XCB_DRI2_GET_BUFFERS_WITH_FORMAT 7

/**
 * @@brief xcb_dri2_get_buffers_with_format_request_t
 **/
typedef struct xcb_dri2_get_buffers_with_format_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       count;
} xcb_dri2_get_buffers_with_format_request_t;

/**
 * @@brief xcb_dri2_get_buffers_with_format_reply_t
 **/
typedef struct xcb_dri2_get_buffers_with_format_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t width;
    uint32_t height;
    uint32_t count;
    uint8_t  pad1[12];
} xcb_dri2_get_buffers_with_format_reply_t;

/**
 * @@brief xcb_dri2_swap_buffers_cookie_t
 **/
typedef struct xcb_dri2_swap_buffers_cookie_t {
    unsigned int sequence;
} xcb_dri2_swap_buffers_cookie_t;

/** Opcode for xcb_dri2_swap_buffers. */
#define XCB_DRI2_SWAP_BUFFERS 8

/**
 * @@brief xcb_dri2_swap_buffers_request_t
 **/
typedef struct xcb_dri2_swap_buffers_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       target_msc_hi;
    uint32_t       target_msc_lo;
    uint32_t       divisor_hi;
    uint32_t       divisor_lo;
    uint32_t       remainder_hi;
    uint32_t       remainder_lo;
} xcb_dri2_swap_buffers_request_t;

/**
 * @@brief xcb_dri2_swap_buffers_reply_t
 **/
typedef struct xcb_dri2_swap_buffers_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t swap_hi;
    uint32_t swap_lo;
} xcb_dri2_swap_buffers_reply_t;

/**
 * @@brief xcb_dri2_get_msc_cookie_t
 **/
typedef struct xcb_dri2_get_msc_cookie_t {
    unsigned int sequence;
} xcb_dri2_get_msc_cookie_t;

/** Opcode for xcb_dri2_get_msc. */
#define XCB_DRI2_GET_MSC 9

/**
 * @@brief xcb_dri2_get_msc_request_t
 **/
typedef struct xcb_dri2_get_msc_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
} xcb_dri2_get_msc_request_t;

/**
 * @@brief xcb_dri2_get_msc_reply_t
 **/
typedef struct xcb_dri2_get_msc_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ust_hi;
    uint32_t ust_lo;
    uint32_t msc_hi;
    uint32_t msc_lo;
    uint32_t sbc_hi;
    uint32_t sbc_lo;
} xcb_dri2_get_msc_reply_t;

/**
 * @@brief xcb_dri2_wait_msc_cookie_t
 **/
typedef struct xcb_dri2_wait_msc_cookie_t {
    unsigned int sequence;
} xcb_dri2_wait_msc_cookie_t;

/** Opcode for xcb_dri2_wait_msc. */
#define XCB_DRI2_WAIT_MSC 10

/**
 * @@brief xcb_dri2_wait_msc_request_t
 **/
typedef struct xcb_dri2_wait_msc_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       target_msc_hi;
    uint32_t       target_msc_lo;
    uint32_t       divisor_hi;
    uint32_t       divisor_lo;
    uint32_t       remainder_hi;
    uint32_t       remainder_lo;
} xcb_dri2_wait_msc_request_t;

/**
 * @@brief xcb_dri2_wait_msc_reply_t
 **/
typedef struct xcb_dri2_wait_msc_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ust_hi;
    uint32_t ust_lo;
    uint32_t msc_hi;
    uint32_t msc_lo;
    uint32_t sbc_hi;
    uint32_t sbc_lo;
} xcb_dri2_wait_msc_reply_t;

/**
 * @@brief xcb_dri2_wait_sbc_cookie_t
 **/
typedef struct xcb_dri2_wait_sbc_cookie_t {
    unsigned int sequence;
} xcb_dri2_wait_sbc_cookie_t;

/** Opcode for xcb_dri2_wait_sbc. */
#define XCB_DRI2_WAIT_SBC 11

/**
 * @@brief xcb_dri2_wait_sbc_request_t
 **/
typedef struct xcb_dri2_wait_sbc_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       target_sbc_hi;
    uint32_t       target_sbc_lo;
} xcb_dri2_wait_sbc_request_t;

/**
 * @@brief xcb_dri2_wait_sbc_reply_t
 **/
typedef struct xcb_dri2_wait_sbc_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ust_hi;
    uint32_t ust_lo;
    uint32_t msc_hi;
    uint32_t msc_lo;
    uint32_t sbc_hi;
    uint32_t sbc_lo;
} xcb_dri2_wait_sbc_reply_t;

/** Opcode for xcb_dri2_swap_interval. */
#define XCB_DRI2_SWAP_INTERVAL 12

/**
 * @@brief xcb_dri2_swap_interval_request_t
 **/
typedef struct xcb_dri2_swap_interval_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       interval;
} xcb_dri2_swap_interval_request_t;

/**
 * @@brief xcb_dri2_get_param_cookie_t
 **/
typedef struct xcb_dri2_get_param_cookie_t {
    unsigned int sequence;
} xcb_dri2_get_param_cookie_t;

/** Opcode for xcb_dri2_get_param. */
#define XCB_DRI2_GET_PARAM 13

/**
 * @@brief xcb_dri2_get_param_request_t
 **/
typedef struct xcb_dri2_get_param_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       param;
} xcb_dri2_get_param_request_t;

/**
 * @@brief xcb_dri2_get_param_reply_t
 **/
typedef struct xcb_dri2_get_param_reply_t {
    uint8_t  response_type;
    uint8_t  is_param_recognized;
    uint16_t sequence;
    uint32_t length;
    uint32_t value_hi;
    uint32_t value_lo;
} xcb_dri2_get_param_reply_t;

/** Opcode for xcb_dri2_buffer_swap_complete. */
#define XCB_DRI2_BUFFER_SWAP_COMPLETE 0

/**
 * @@brief xcb_dri2_buffer_swap_complete_event_t
 **/
typedef struct xcb_dri2_buffer_swap_complete_event_t {
    uint8_t        response_type;
    uint8_t        pad0;
    uint16_t       sequence;
    uint16_t       event_type;
    uint8_t        pad1[2];
    xcb_drawable_t drawable;
    uint32_t       ust_hi;
    uint32_t       ust_lo;
    uint32_t       msc_hi;
    uint32_t       msc_lo;
    uint32_t       sbc;
} xcb_dri2_buffer_swap_complete_event_t;

/** Opcode for xcb_dri2_invalidate_buffers. */
#define XCB_DRI2_INVALIDATE_BUFFERS 1

/**
 * @@brief xcb_dri2_invalidate_buffers_event_t
 **/
typedef struct xcb_dri2_invalidate_buffers_event_t {
    uint8_t        response_type;
    uint8_t        pad0;
    uint16_t       sequence;
    xcb_drawable_t drawable;
} xcb_dri2_invalidate_buffers_event_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_dri2_dri2_buffer_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_dri2_dri2_buffer_t)
 */
void
xcb_dri2_dri2_buffer_next (xcb_dri2_dri2_buffer_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_dri2_dri2_buffer_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_dri2_dri2_buffer_end (xcb_dri2_dri2_buffer_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_dri2_attach_format_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_dri2_attach_format_t)
 */
void
xcb_dri2_attach_format_next (xcb_dri2_attach_format_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_dri2_attach_format_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_dri2_attach_format_end (xcb_dri2_attach_format_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_query_version_cookie_t
xcb_dri2_query_version (xcb_connection_t *c,
                        uint32_t          major_version,
                        uint32_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_query_version_cookie_t
xcb_dri2_query_version_unchecked (xcb_connection_t *c,
                                  uint32_t          major_version,
                                  uint32_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_query_version_reply_t *
xcb_dri2_query_version_reply (xcb_connection_t                 *c,
                              xcb_dri2_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_dri2_connect_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_connect_cookie_t
xcb_dri2_connect (xcb_connection_t *c,
                  xcb_window_t      window,
                  uint32_t          driver_type);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_connect_cookie_t
xcb_dri2_connect_unchecked (xcb_connection_t *c,
                            xcb_window_t      window,
                            uint32_t          driver_type);

char *
xcb_dri2_connect_driver_name (const xcb_dri2_connect_reply_t *R);

int
xcb_dri2_connect_driver_name_length (const xcb_dri2_connect_reply_t *R);

xcb_generic_iterator_t
xcb_dri2_connect_driver_name_end (const xcb_dri2_connect_reply_t *R);

void *
xcb_dri2_connect_alignment_pad (const xcb_dri2_connect_reply_t *R);

int
xcb_dri2_connect_alignment_pad_length (const xcb_dri2_connect_reply_t *R);

xcb_generic_iterator_t
xcb_dri2_connect_alignment_pad_end (const xcb_dri2_connect_reply_t *R);

char *
xcb_dri2_connect_device_name (const xcb_dri2_connect_reply_t *R);

int
xcb_dri2_connect_device_name_length (const xcb_dri2_connect_reply_t *R);

xcb_generic_iterator_t
xcb_dri2_connect_device_name_end (const xcb_dri2_connect_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_connect_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_connect_reply_t *
xcb_dri2_connect_reply (xcb_connection_t           *c,
                        xcb_dri2_connect_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_authenticate_cookie_t
xcb_dri2_authenticate (xcb_connection_t *c,
                       xcb_window_t      window,
                       uint32_t          magic);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_authenticate_cookie_t
xcb_dri2_authenticate_unchecked (xcb_connection_t *c,
                                 xcb_window_t      window,
                                 uint32_t          magic);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_authenticate_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_authenticate_reply_t *
xcb_dri2_authenticate_reply (xcb_connection_t                *c,
                             xcb_dri2_authenticate_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dri2_create_drawable_checked (xcb_connection_t *c,
                                  xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dri2_create_drawable (xcb_connection_t *c,
                          xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dri2_destroy_drawable_checked (xcb_connection_t *c,
                                   xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dri2_destroy_drawable (xcb_connection_t *c,
                           xcb_drawable_t    drawable);

int
xcb_dri2_get_buffers_sizeof (const void  *_buffer,
                             uint32_t     attachments_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_get_buffers_cookie_t
xcb_dri2_get_buffers (xcb_connection_t *c,
                      xcb_drawable_t    drawable,
                      uint32_t          count,
                      uint32_t          attachments_len,
                      const uint32_t   *attachments);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_get_buffers_cookie_t
xcb_dri2_get_buffers_unchecked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          count,
                                uint32_t          attachments_len,
                                const uint32_t   *attachments);

xcb_dri2_dri2_buffer_t *
xcb_dri2_get_buffers_buffers (const xcb_dri2_get_buffers_reply_t *R);

int
xcb_dri2_get_buffers_buffers_length (const xcb_dri2_get_buffers_reply_t *R);

xcb_dri2_dri2_buffer_iterator_t
xcb_dri2_get_buffers_buffers_iterator (const xcb_dri2_get_buffers_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_get_buffers_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_get_buffers_reply_t *
xcb_dri2_get_buffers_reply (xcb_connection_t               *c,
                            xcb_dri2_get_buffers_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_copy_region_cookie_t
xcb_dri2_copy_region (xcb_connection_t *c,
                      xcb_drawable_t    drawable,
                      uint32_t          region,
                      uint32_t          dest,
                      uint32_t          src);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_copy_region_cookie_t
xcb_dri2_copy_region_unchecked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          region,
                                uint32_t          dest,
                                uint32_t          src);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_copy_region_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_copy_region_reply_t *
xcb_dri2_copy_region_reply (xcb_connection_t               *c,
                            xcb_dri2_copy_region_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

int
xcb_dri2_get_buffers_with_format_sizeof (const void  *_buffer,
                                         uint32_t     attachments_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_get_buffers_with_format_cookie_t
xcb_dri2_get_buffers_with_format (xcb_connection_t               *c,
                                  xcb_drawable_t                  drawable,
                                  uint32_t                        count,
                                  uint32_t                        attachments_len,
                                  const xcb_dri2_attach_format_t *attachments);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_get_buffers_with_format_cookie_t
xcb_dri2_get_buffers_with_format_unchecked (xcb_connection_t               *c,
                                            xcb_drawable_t                  drawable,
                                            uint32_t                        count,
                                            uint32_t                        attachments_len,
                                            const xcb_dri2_attach_format_t *attachments);

xcb_dri2_dri2_buffer_t *
xcb_dri2_get_buffers_with_format_buffers (const xcb_dri2_get_buffers_with_format_reply_t *R);

int
xcb_dri2_get_buffers_with_format_buffers_length (const xcb_dri2_get_buffers_with_format_reply_t *R);

xcb_dri2_dri2_buffer_iterator_t
xcb_dri2_get_buffers_with_format_buffers_iterator (const xcb_dri2_get_buffers_with_format_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_get_buffers_with_format_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_get_buffers_with_format_reply_t *
xcb_dri2_get_buffers_with_format_reply (xcb_connection_t                           *c,
                                        xcb_dri2_get_buffers_with_format_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_swap_buffers_cookie_t
xcb_dri2_swap_buffers (xcb_connection_t *c,
                       xcb_drawable_t    drawable,
                       uint32_t          target_msc_hi,
                       uint32_t          target_msc_lo,
                       uint32_t          divisor_hi,
                       uint32_t          divisor_lo,
                       uint32_t          remainder_hi,
                       uint32_t          remainder_lo);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_swap_buffers_cookie_t
xcb_dri2_swap_buffers_unchecked (xcb_connection_t *c,
                                 xcb_drawable_t    drawable,
                                 uint32_t          target_msc_hi,
                                 uint32_t          target_msc_lo,
                                 uint32_t          divisor_hi,
                                 uint32_t          divisor_lo,
                                 uint32_t          remainder_hi,
                                 uint32_t          remainder_lo);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_swap_buffers_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_swap_buffers_reply_t *
xcb_dri2_swap_buffers_reply (xcb_connection_t                *c,
                             xcb_dri2_swap_buffers_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_get_msc_cookie_t
xcb_dri2_get_msc (xcb_connection_t *c,
                  xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_get_msc_cookie_t
xcb_dri2_get_msc_unchecked (xcb_connection_t *c,
                            xcb_drawable_t    drawable);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_get_msc_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_get_msc_reply_t *
xcb_dri2_get_msc_reply (xcb_connection_t           *c,
                        xcb_dri2_get_msc_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_wait_msc_cookie_t
xcb_dri2_wait_msc (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   uint32_t          target_msc_hi,
                   uint32_t          target_msc_lo,
                   uint32_t          divisor_hi,
                   uint32_t          divisor_lo,
                   uint32_t          remainder_hi,
                   uint32_t          remainder_lo);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_wait_msc_cookie_t
xcb_dri2_wait_msc_unchecked (xcb_connection_t *c,
                             xcb_drawable_t    drawable,
                             uint32_t          target_msc_hi,
                             uint32_t          target_msc_lo,
                             uint32_t          divisor_hi,
                             uint32_t          divisor_lo,
                             uint32_t          remainder_hi,
                             uint32_t          remainder_lo);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_wait_msc_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_wait_msc_reply_t *
xcb_dri2_wait_msc_reply (xcb_connection_t            *c,
                         xcb_dri2_wait_msc_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_wait_sbc_cookie_t
xcb_dri2_wait_sbc (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   uint32_t          target_sbc_hi,
                   uint32_t          target_sbc_lo);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_wait_sbc_cookie_t
xcb_dri2_wait_sbc_unchecked (xcb_connection_t *c,
                             xcb_drawable_t    drawable,
                             uint32_t          target_sbc_hi,
                             uint32_t          target_sbc_lo);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_wait_sbc_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_wait_sbc_reply_t *
xcb_dri2_wait_sbc_reply (xcb_connection_t            *c,
                         xcb_dri2_wait_sbc_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dri2_swap_interval_checked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          interval);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dri2_swap_interval (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          interval);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri2_get_param_cookie_t
xcb_dri2_get_param (xcb_connection_t *c,
                    xcb_drawable_t    drawable,
                    uint32_t          param);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri2_get_param_cookie_t
xcb_dri2_get_param_unchecked (xcb_connection_t *c,
                              xcb_drawable_t    drawable,
                              uint32_t          param);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri2_get_param_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri2_get_param_reply_t *
xcb_dri2_get_param_reply (xcb_connection_t             *c,
                          xcb_dri2_get_param_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d56 5
a60 5
    uint32_t attachment; /**<  */
    uint32_t name; /**<  */
    uint32_t pitch; /**<  */
    uint32_t cpp; /**<  */
    uint32_t flags; /**<  */
d67 3
a69 3
    xcb_dri2_dri2_buffer_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d76 2
a77 2
    uint32_t attachment; /**<  */
    uint32_t format; /**<  */
d84 3
a86 3
    xcb_dri2_attach_format_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d93 1
a93 1
    unsigned int sequence; /**<  */
d103 5
a107 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d114 6
a119 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d126 1
a126 1
    unsigned int sequence; /**<  */
d136 5
a140 5
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint32_t     driver_type; /**<  */
d147 7
a153 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t driver_name_length; /**<  */
    uint32_t device_name_length; /**<  */
    uint8_t  pad1[16]; /**<  */
d160 1
a160 1
    unsigned int sequence; /**<  */
d170 5
a174 5
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint32_t     magic; /**<  */
d181 5
a185 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t authenticated; /**<  */
d195 4
a198 4
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
d208 4
a211 4
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
d218 1
a218 1
    unsigned int sequence; /**<  */
d228 5
a232 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       count; /**<  */
d239 8
a246 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t width; /**<  */
    uint32_t height; /**<  */
    uint32_t count; /**<  */
    uint8_t  pad1[12]; /**<  */
d253 1
a253 1
    unsigned int sequence; /**<  */
d263 7
a269 7
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       region; /**<  */
    uint32_t       dest; /**<  */
    uint32_t       src; /**<  */
d276 4
a279 4
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
d286 1
a286 1
    unsigned int sequence; /**<  */
d296 5
a300 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       count; /**<  */
d307 8
a314 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t width; /**<  */
    uint32_t height; /**<  */
    uint32_t count; /**<  */
    uint8_t  pad1[12]; /**<  */
d321 1
a321 1
    unsigned int sequence; /**<  */
d331 10
a340 10
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       target_msc_hi; /**<  */
    uint32_t       target_msc_lo; /**<  */
    uint32_t       divisor_hi; /**<  */
    uint32_t       divisor_lo; /**<  */
    uint32_t       remainder_hi; /**<  */
    uint32_t       remainder_lo; /**<  */
d347 6
a352 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t swap_hi; /**<  */
    uint32_t swap_lo; /**<  */
d359 1
a359 1
    unsigned int sequence; /**<  */
d369 4
a372 4
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
d379 10
a388 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ust_hi; /**<  */
    uint32_t ust_lo; /**<  */
    uint32_t msc_hi; /**<  */
    uint32_t msc_lo; /**<  */
    uint32_t sbc_hi; /**<  */
    uint32_t sbc_lo; /**<  */
d395 1
a395 1
    unsigned int sequence; /**<  */
d405 10
a414 10
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       target_msc_hi; /**<  */
    uint32_t       target_msc_lo; /**<  */
    uint32_t       divisor_hi; /**<  */
    uint32_t       divisor_lo; /**<  */
    uint32_t       remainder_hi; /**<  */
    uint32_t       remainder_lo; /**<  */
d421 10
a430 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ust_hi; /**<  */
    uint32_t ust_lo; /**<  */
    uint32_t msc_hi; /**<  */
    uint32_t msc_lo; /**<  */
    uint32_t sbc_hi; /**<  */
    uint32_t sbc_lo; /**<  */
d437 1
a437 1
    unsigned int sequence; /**<  */
d447 6
a452 6
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       target_sbc_hi; /**<  */
    uint32_t       target_sbc_lo; /**<  */
d459 10
a468 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ust_hi; /**<  */
    uint32_t ust_lo; /**<  */
    uint32_t msc_hi; /**<  */
    uint32_t msc_lo; /**<  */
    uint32_t sbc_hi; /**<  */
    uint32_t sbc_lo; /**<  */
d478 5
a482 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       interval; /**<  */
d489 1
a489 1
    unsigned int sequence; /**<  */
d499 5
a503 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       param; /**<  */
d510 6
a515 6
    uint8_t  response_type; /**<  */
    uint8_t  is_param_recognized; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t value_hi; /**<  */
    uint32_t value_lo; /**<  */
d525 11
a535 11
    uint8_t        response_type; /**<  */
    uint8_t        pad0; /**<  */
    uint16_t       sequence; /**<  */
    uint16_t       event_type; /**<  */
    uint8_t        pad1[2]; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       ust_hi; /**<  */
    uint32_t       ust_lo; /**<  */
    uint32_t       msc_hi; /**<  */
    uint32_t       msc_lo; /**<  */
    uint32_t       sbc; /**<  */
d545 4
a548 4
    uint8_t        response_type; /**<  */
    uint8_t        pad0; /**<  */
    uint16_t       sequence; /**<  */
    xcb_drawable_t drawable; /**<  */
d560 1
a560 1
xcb_dri2_dri2_buffer_next (xcb_dri2_dri2_buffer_iterator_t *i  /**< */);
d572 1
a572 1
xcb_dri2_dri2_buffer_end (xcb_dri2_dri2_buffer_iterator_t i  /**< */);
d583 1
a583 1
xcb_dri2_attach_format_next (xcb_dri2_attach_format_iterator_t *i  /**< */);
d595 1
a595 1
xcb_dri2_attach_format_end (xcb_dri2_attach_format_iterator_t i  /**< */);
d606 3
a608 3
xcb_dri2_query_version (xcb_connection_t *c  /**< */,
                        uint32_t          major_version  /**< */,
                        uint32_t          minor_version  /**< */);
d622 3
a624 3
xcb_dri2_query_version_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          major_version  /**< */,
                                  uint32_t          minor_version  /**< */);
d641 1
a641 1
xcb_dri2_query_version_reply (xcb_connection_t                 *c  /**< */,
d643 1
a643 1
                              xcb_generic_error_t             **e  /**< */);
d646 1
a646 1
xcb_dri2_connect_sizeof (const void  *_buffer  /**< */);
d657 3
a659 3
xcb_dri2_connect (xcb_connection_t *c  /**< */,
                  xcb_window_t      window  /**< */,
                  uint32_t          driver_type  /**< */);
d673 3
a675 3
xcb_dri2_connect_unchecked (xcb_connection_t *c  /**< */,
                            xcb_window_t      window  /**< */,
                            uint32_t          driver_type  /**< */);
d678 1
a678 1
xcb_dri2_connect_driver_name (const xcb_dri2_connect_reply_t *R  /**< */);
d681 1
a681 1
xcb_dri2_connect_driver_name_length (const xcb_dri2_connect_reply_t *R  /**< */);
d684 1
a684 1
xcb_dri2_connect_driver_name_end (const xcb_dri2_connect_reply_t *R  /**< */);
d687 1
a687 1
xcb_dri2_connect_alignment_pad (const xcb_dri2_connect_reply_t *R  /**< */);
d690 1
a690 1
xcb_dri2_connect_alignment_pad_length (const xcb_dri2_connect_reply_t *R  /**< */);
d693 1
a693 1
xcb_dri2_connect_alignment_pad_end (const xcb_dri2_connect_reply_t *R  /**< */);
d696 1
a696 1
xcb_dri2_connect_device_name (const xcb_dri2_connect_reply_t *R  /**< */);
d699 1
a699 1
xcb_dri2_connect_device_name_length (const xcb_dri2_connect_reply_t *R  /**< */);
d702 1
a702 1
xcb_dri2_connect_device_name_end (const xcb_dri2_connect_reply_t *R  /**< */);
d719 1
a719 1
xcb_dri2_connect_reply (xcb_connection_t           *c  /**< */,
d721 1
a721 1
                        xcb_generic_error_t       **e  /**< */);
d732 3
a734 3
xcb_dri2_authenticate (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */,
                       uint32_t          magic  /**< */);
d748 3
a750 3
xcb_dri2_authenticate_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */,
                                 uint32_t          magic  /**< */);
d767 1
a767 1
xcb_dri2_authenticate_reply (xcb_connection_t                *c  /**< */,
d769 1
a769 1
                             xcb_generic_error_t            **e  /**< */);
d783 2
a784 2
xcb_dri2_create_drawable_checked (xcb_connection_t *c  /**< */,
                                  xcb_drawable_t    drawable  /**< */);
d795 2
a796 2
xcb_dri2_create_drawable (xcb_connection_t *c  /**< */,
                          xcb_drawable_t    drawable  /**< */);
d810 2
a811 2
xcb_dri2_destroy_drawable_checked (xcb_connection_t *c  /**< */,
                                   xcb_drawable_t    drawable  /**< */);
d822 2
a823 2
xcb_dri2_destroy_drawable (xcb_connection_t *c  /**< */,
                           xcb_drawable_t    drawable  /**< */);
d826 2
a827 2
xcb_dri2_get_buffers_sizeof (const void  *_buffer  /**< */,
                             uint32_t     attachments_len  /**< */);
d838 5
a842 5
xcb_dri2_get_buffers (xcb_connection_t *c  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      uint32_t          count  /**< */,
                      uint32_t          attachments_len  /**< */,
                      const uint32_t   *attachments  /**< */);
d856 5
a860 5
xcb_dri2_get_buffers_unchecked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          count  /**< */,
                                uint32_t          attachments_len  /**< */,
                                const uint32_t   *attachments  /**< */);
d863 1
a863 1
xcb_dri2_get_buffers_buffers (const xcb_dri2_get_buffers_reply_t *R  /**< */);
d866 1
a866 1
xcb_dri2_get_buffers_buffers_length (const xcb_dri2_get_buffers_reply_t *R  /**< */);
d869 1
a869 1
xcb_dri2_get_buffers_buffers_iterator (const xcb_dri2_get_buffers_reply_t *R  /**< */);
d886 1
a886 1
xcb_dri2_get_buffers_reply (xcb_connection_t               *c  /**< */,
d888 1
a888 1
                            xcb_generic_error_t           **e  /**< */);
d899 5
a903 5
xcb_dri2_copy_region (xcb_connection_t *c  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      uint32_t          region  /**< */,
                      uint32_t          dest  /**< */,
                      uint32_t          src  /**< */);
d917 5
a921 5
xcb_dri2_copy_region_unchecked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          region  /**< */,
                                uint32_t          dest  /**< */,
                                uint32_t          src  /**< */);
d938 1
a938 1
xcb_dri2_copy_region_reply (xcb_connection_t               *c  /**< */,
d940 1
a940 1
                            xcb_generic_error_t           **e  /**< */);
d943 2
a944 2
xcb_dri2_get_buffers_with_format_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     attachments_len  /**< */);
d955 5
a959 5
xcb_dri2_get_buffers_with_format (xcb_connection_t               *c  /**< */,
                                  xcb_drawable_t                  drawable  /**< */,
                                  uint32_t                        count  /**< */,
                                  uint32_t                        attachments_len  /**< */,
                                  const xcb_dri2_attach_format_t *attachments  /**< */);
d973 5
a977 5
xcb_dri2_get_buffers_with_format_unchecked (xcb_connection_t               *c  /**< */,
                                            xcb_drawable_t                  drawable  /**< */,
                                            uint32_t                        count  /**< */,
                                            uint32_t                        attachments_len  /**< */,
                                            const xcb_dri2_attach_format_t *attachments  /**< */);
d980 1
a980 1
xcb_dri2_get_buffers_with_format_buffers (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */);
d983 1
a983 1
xcb_dri2_get_buffers_with_format_buffers_length (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */);
d986 1
a986 1
xcb_dri2_get_buffers_with_format_buffers_iterator (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */);
d1003 1
a1003 1
xcb_dri2_get_buffers_with_format_reply (xcb_connection_t                           *c  /**< */,
d1005 1
a1005 1
                                        xcb_generic_error_t                       **e  /**< */);
d1016 8
a1023 8
xcb_dri2_swap_buffers (xcb_connection_t *c  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       uint32_t          target_msc_hi  /**< */,
                       uint32_t          target_msc_lo  /**< */,
                       uint32_t          divisor_hi  /**< */,
                       uint32_t          divisor_lo  /**< */,
                       uint32_t          remainder_hi  /**< */,
                       uint32_t          remainder_lo  /**< */);
d1037 8
a1044 8
xcb_dri2_swap_buffers_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_drawable_t    drawable  /**< */,
                                 uint32_t          target_msc_hi  /**< */,
                                 uint32_t          target_msc_lo  /**< */,
                                 uint32_t          divisor_hi  /**< */,
                                 uint32_t          divisor_lo  /**< */,
                                 uint32_t          remainder_hi  /**< */,
                                 uint32_t          remainder_lo  /**< */);
d1061 1
a1061 1
xcb_dri2_swap_buffers_reply (xcb_connection_t                *c  /**< */,
d1063 1
a1063 1
                             xcb_generic_error_t            **e  /**< */);
d1074 2
a1075 2
xcb_dri2_get_msc (xcb_connection_t *c  /**< */,
                  xcb_drawable_t    drawable  /**< */);
d1089 2
a1090 2
xcb_dri2_get_msc_unchecked (xcb_connection_t *c  /**< */,
                            xcb_drawable_t    drawable  /**< */);
d1107 1
a1107 1
xcb_dri2_get_msc_reply (xcb_connection_t           *c  /**< */,
d1109 1
a1109 1
                        xcb_generic_error_t       **e  /**< */);
d1120 8
a1127 8
xcb_dri2_wait_msc (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   uint32_t          target_msc_hi  /**< */,
                   uint32_t          target_msc_lo  /**< */,
                   uint32_t          divisor_hi  /**< */,
                   uint32_t          divisor_lo  /**< */,
                   uint32_t          remainder_hi  /**< */,
                   uint32_t          remainder_lo  /**< */);
d1141 8
a1148 8
xcb_dri2_wait_msc_unchecked (xcb_connection_t *c  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          target_msc_hi  /**< */,
                             uint32_t          target_msc_lo  /**< */,
                             uint32_t          divisor_hi  /**< */,
                             uint32_t          divisor_lo  /**< */,
                             uint32_t          remainder_hi  /**< */,
                             uint32_t          remainder_lo  /**< */);
d1165 1
a1165 1
xcb_dri2_wait_msc_reply (xcb_connection_t            *c  /**< */,
d1167 1
a1167 1
                         xcb_generic_error_t        **e  /**< */);
d1178 4
a1181 4
xcb_dri2_wait_sbc (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   uint32_t          target_sbc_hi  /**< */,
                   uint32_t          target_sbc_lo  /**< */);
d1195 4
a1198 4
xcb_dri2_wait_sbc_unchecked (xcb_connection_t *c  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          target_sbc_hi  /**< */,
                             uint32_t          target_sbc_lo  /**< */);
d1215 1
a1215 1
xcb_dri2_wait_sbc_reply (xcb_connection_t            *c  /**< */,
d1217 1
a1217 1
                         xcb_generic_error_t        **e  /**< */);
d1231 3
a1233 3
xcb_dri2_swap_interval_checked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          interval  /**< */);
d1244 3
a1246 3
xcb_dri2_swap_interval (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          interval  /**< */);
d1257 3
a1259 3
xcb_dri2_get_param (xcb_connection_t *c  /**< */,
                    xcb_drawable_t    drawable  /**< */,
                    uint32_t          param  /**< */);
d1273 3
a1275 3
xcb_dri2_get_param_unchecked (xcb_connection_t *c  /**< */,
                              xcb_drawable_t    drawable  /**< */,
                              uint32_t          param  /**< */);
d1292 1
a1292 1
xcb_dri2_get_param_reply (xcb_connection_t             *c  /**< */,
d1294 1
a1294 1
                          xcb_generic_error_t         **e  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a558 10

/*****************************************************************************
 **
 ** void xcb_dri2_dri2_buffer_next
 ** 
 ** @@param xcb_dri2_dri2_buffer_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a570 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_dri2_buffer_end
 ** 
 ** @@param xcb_dri2_dri2_buffer_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a581 10

/*****************************************************************************
 **
 ** void xcb_dri2_attach_format_next
 ** 
 ** @@param xcb_dri2_attach_format_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a593 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_attach_format_end
 ** 
 ** @@param xcb_dri2_attach_format_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d603 1
a603 1
 * 
a604 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_cookie_t xcb_dri2_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri2_query_version_cookie_t
 **
 *****************************************************************************/
 
d616 1
a616 1
 * 
a620 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_cookie_t xcb_dri2_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri2_query_version_cookie_t
 **
 *****************************************************************************/
 
d633 1
a633 1
 * 
a639 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_reply_t * xcb_dri2_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri2_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri2_query_version_reply_t *
 **
 *****************************************************************************/
 
d654 1
a654 1
 * 
a655 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_cookie_t xcb_dri2_connect
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          driver_type
 ** @@returns xcb_dri2_connect_cookie_t
 **
 *****************************************************************************/
 
d667 1
a667 1
 * 
a671 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_cookie_t xcb_dri2_connect_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          driver_type
 ** @@returns xcb_dri2_connect_cookie_t
 **
 *****************************************************************************/
 
a676 10

/*****************************************************************************
 **
 ** char * xcb_dri2_connect_driver_name
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a679 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_driver_name_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a682 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_driver_name_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a685 10

/*****************************************************************************
 **
 ** void * xcb_dri2_connect_alignment_pad
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a688 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_alignment_pad_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a691 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_alignment_pad_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a694 10

/*****************************************************************************
 **
 ** char * xcb_dri2_connect_device_name
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a697 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_device_name_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a700 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_device_name_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d711 1
a711 1
 * 
a717 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_reply_t * xcb_dri2_connect_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dri2_connect_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dri2_connect_reply_t *
 **
 *****************************************************************************/
 
d729 1
a729 1
 * 
a730 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_cookie_t xcb_dri2_authenticate
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          magic
 ** @@returns xcb_dri2_authenticate_cookie_t
 **
 *****************************************************************************/
 
d742 1
a742 1
 * 
a746 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_cookie_t xcb_dri2_authenticate_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          magic
 ** @@returns xcb_dri2_authenticate_cookie_t
 **
 *****************************************************************************/
 
d759 1
a759 1
 * 
a765 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_reply_t * xcb_dri2_authenticate_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri2_authenticate_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dri2_authenticate_reply_t *
 **
 *****************************************************************************/
 
d777 1
a777 1
 * 
a781 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_create_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d792 1
a792 1
 * 
a793 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_create_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d804 1
a804 1
 * 
a808 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_destroy_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d819 1
a819 1
 * 
a820 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_destroy_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d835 1
a835 1
 * 
a836 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_cookie_t xcb_dri2_get_buffers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          count
 ** @@param uint32_t          attachments_len
 ** @@param const uint32_t   *attachments
 ** @@returns xcb_dri2_get_buffers_cookie_t
 **
 *****************************************************************************/
 
d850 1
a850 1
 * 
a854 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_cookie_t xcb_dri2_get_buffers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          count
 ** @@param uint32_t          attachments_len
 ** @@param const uint32_t   *attachments
 ** @@returns xcb_dri2_get_buffers_cookie_t
 **
 *****************************************************************************/
 
a861 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_t * xcb_dri2_get_buffers_buffers
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_t *
 **
 *****************************************************************************/
 
a864 10

/*****************************************************************************
 **
 ** int xcb_dri2_get_buffers_buffers_length
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a867 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_iterator_t xcb_dri2_get_buffers_buffers_iterator
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_iterator_t
 **
 *****************************************************************************/
 
d878 1
a878 1
 * 
a884 12

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_reply_t * xcb_dri2_get_buffers_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dri2_get_buffers_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dri2_get_buffers_reply_t *
 **
 *****************************************************************************/
 
d896 1
a896 1
 * 
a897 14

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_cookie_t xcb_dri2_copy_region
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          region
 ** @@param uint32_t          dest
 ** @@param uint32_t          src
 ** @@returns xcb_dri2_copy_region_cookie_t
 **
 *****************************************************************************/
 
d911 1
a911 1
 * 
a915 14

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_cookie_t xcb_dri2_copy_region_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          region
 ** @@param uint32_t          dest
 ** @@param uint32_t          src
 ** @@returns xcb_dri2_copy_region_cookie_t
 **
 *****************************************************************************/
 
d930 1
a930 1
 * 
a936 12

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_reply_t * xcb_dri2_copy_region_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dri2_copy_region_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dri2_copy_region_reply_t *
 **
 *****************************************************************************/
 
d952 1
a952 1
 * 
a953 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_cookie_t xcb_dri2_get_buffers_with_format
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_drawable_t                  drawable
 ** @@param uint32_t                        count
 ** @@param uint32_t                        attachments_len
 ** @@param const xcb_dri2_attach_format_t *attachments
 ** @@returns xcb_dri2_get_buffers_with_format_cookie_t
 **
 *****************************************************************************/
 
d967 1
a967 1
 * 
a971 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_cookie_t xcb_dri2_get_buffers_with_format_unchecked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_drawable_t                  drawable
 ** @@param uint32_t                        count
 ** @@param uint32_t                        attachments_len
 ** @@param const xcb_dri2_attach_format_t *attachments
 ** @@returns xcb_dri2_get_buffers_with_format_cookie_t
 **
 *****************************************************************************/
 
a978 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_t * xcb_dri2_get_buffers_with_format_buffers
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_t *
 **
 *****************************************************************************/
 
a981 10

/*****************************************************************************
 **
 ** int xcb_dri2_get_buffers_with_format_buffers_length
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a984 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_iterator_t xcb_dri2_get_buffers_with_format_buffers_iterator
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_iterator_t
 **
 *****************************************************************************/
 
d995 1
a995 1
 * 
a1001 12

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_reply_t * xcb_dri2_get_buffers_with_format_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_dri2_get_buffers_with_format_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_dri2_get_buffers_with_format_reply_t *
 **
 *****************************************************************************/
 
d1013 1
a1013 1
 * 
a1014 17

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_cookie_t xcb_dri2_swap_buffers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_swap_buffers_cookie_t
 **
 *****************************************************************************/
 
d1031 1
a1031 1
 * 
a1035 17

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_cookie_t xcb_dri2_swap_buffers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_swap_buffers_cookie_t
 **
 *****************************************************************************/
 
d1053 1
a1053 1
 * 
a1059 12

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_reply_t * xcb_dri2_swap_buffers_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri2_swap_buffers_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dri2_swap_buffers_reply_t *
 **
 *****************************************************************************/
 
d1071 1
a1071 1
 * 
a1072 11

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_cookie_t xcb_dri2_get_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_dri2_get_msc_cookie_t
 **
 *****************************************************************************/
 
d1083 1
a1083 1
 * 
a1087 11

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_cookie_t xcb_dri2_get_msc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_dri2_get_msc_cookie_t
 **
 *****************************************************************************/
 
d1099 1
a1099 1
 * 
a1105 12

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_reply_t * xcb_dri2_get_msc_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dri2_get_msc_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dri2_get_msc_reply_t *
 **
 *****************************************************************************/
 
d1117 1
a1117 1
 * 
a1118 17

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_cookie_t xcb_dri2_wait_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_wait_msc_cookie_t
 **
 *****************************************************************************/
 
d1135 1
a1135 1
 * 
a1139 17

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_cookie_t xcb_dri2_wait_msc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_wait_msc_cookie_t
 **
 *****************************************************************************/
 
d1157 1
a1157 1
 * 
a1163 12

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_reply_t * xcb_dri2_wait_msc_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_dri2_wait_msc_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_dri2_wait_msc_reply_t *
 **
 *****************************************************************************/
 
d1175 1
a1175 1
 * 
a1176 13

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_cookie_t xcb_dri2_wait_sbc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_sbc_hi
 ** @@param uint32_t          target_sbc_lo
 ** @@returns xcb_dri2_wait_sbc_cookie_t
 **
 *****************************************************************************/
 
d1189 1
a1189 1
 * 
a1193 13

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_cookie_t xcb_dri2_wait_sbc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_sbc_hi
 ** @@param uint32_t          target_sbc_lo
 ** @@returns xcb_dri2_wait_sbc_cookie_t
 **
 *****************************************************************************/
 
d1207 1
a1207 1
 * 
a1213 12

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_reply_t * xcb_dri2_wait_sbc_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_dri2_wait_sbc_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_dri2_wait_sbc_reply_t *
 **
 *****************************************************************************/
 
d1225 1
a1225 1
 * 
a1229 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_swap_interval_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          interval
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1241 1
a1241 1
 * 
a1242 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_swap_interval
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          interval
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1254 1
a1254 1
 * 
a1255 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_cookie_t xcb_dri2_get_param
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          param
 ** @@returns xcb_dri2_get_param_cookie_t
 **
 *****************************************************************************/
 
d1267 1
a1267 1
 * 
a1271 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_cookie_t xcb_dri2_get_param_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          param
 ** @@returns xcb_dri2_get_param_cookie_t
 **
 *****************************************************************************/
 
d1284 1
a1284 1
 * 
a1290 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_reply_t * xcb_dri2_get_param_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_dri2_get_param_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_dri2_get_param_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
#define XCB_DRI2_MINOR_VERSION 3
d28 11
a38 11
    XCB_DRI2_ATTACHMENT_BUFFER_FRONT_LEFT,
    XCB_DRI2_ATTACHMENT_BUFFER_BACK_LEFT,
    XCB_DRI2_ATTACHMENT_BUFFER_FRONT_RIGHT,
    XCB_DRI2_ATTACHMENT_BUFFER_BACK_RIGHT,
    XCB_DRI2_ATTACHMENT_BUFFER_DEPTH,
    XCB_DRI2_ATTACHMENT_BUFFER_STENCIL,
    XCB_DRI2_ATTACHMENT_BUFFER_ACCUM,
    XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_LEFT,
    XCB_DRI2_ATTACHMENT_BUFFER_FAKE_FRONT_RIGHT,
    XCB_DRI2_ATTACHMENT_BUFFER_DEPTH_STENCIL,
    XCB_DRI2_ATTACHMENT_BUFFER_HIZ
d42 2
a43 2
    XCB_DRI2_DRIVER_TYPE_DRI,
    XCB_DRI2_DRIVER_TYPE_VDPAU
d485 33
d1897 84
@


1.2
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d605 1
a605 1
 * Delivers a request to the X server
d630 1
a630 1
 * Delivers a request to the X server
d688 3
d692 1
a692 1
 * Delivers a request to the X server
d717 1
a717 1
 * Delivers a request to the X server
d893 1
a893 1
 * Delivers a request to the X server
d918 1
a918 1
 * Delivers a request to the X server
d977 1
a977 1
 * Delivers a request to the X server
d1003 1
a1003 1
 * Delivers a request to the X server
d1026 1
a1026 1
 * Delivers a request to the X server
d1052 1
a1052 1
 * Delivers a request to the X server
d1074 4
d1079 1
a1079 1
 * Delivers a request to the X server
d1108 1
a1108 1
 * Delivers a request to the X server
d1210 1
a1210 1
 * Delivers a request to the X server
d1239 1
a1239 1
 * Delivers a request to the X server
d1301 4
d1306 1
a1306 1
 * Delivers a request to the X server
d1335 1
a1335 1
 * Delivers a request to the X server
d1437 1
a1437 1
 * Delivers a request to the X server
d1472 1
a1472 1
 * Delivers a request to the X server
d1541 1
a1541 1
 * Delivers a request to the X server
d1564 1
a1564 1
 * Delivers a request to the X server
d1621 1
a1621 1
 * Delivers a request to the X server
d1656 1
a1656 1
 * Delivers a request to the X server
d1725 1
a1725 1
 * Delivers a request to the X server
d1752 1
a1752 1
 * Delivers a request to the X server
d1813 1
a1813 1
 * Delivers a request to the X server
d1841 1
a1841 1
 * Delivers a request to the X server
@


1.1
log
@regen for xcb-proto 1.6
@
text
@d23 1
a23 1
#define XCB_DRI2_MINOR_VERSION 1
d37 2
a38 1
    XCB_DRI2_ATTACHMENT_BUFFER_DEPTH_STENCIL
d42 2
a43 1
    XCB_DRI2_DRIVER_TYPE_DRI
d46 6
d318 201
d783 39
d1424 429
@

