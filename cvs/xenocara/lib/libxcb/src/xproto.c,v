head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	mKDGsTNpiR2zRHYQ;

1.6
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	01TEvO4uNHLqFv7N;

1.5
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xproto.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xproto.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

void
xcb_char2b_next (xcb_char2b_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_char2b_t);
}

xcb_generic_iterator_t
xcb_char2b_end (xcb_char2b_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_window_next (xcb_window_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_window_t);
}

xcb_generic_iterator_t
xcb_window_end (xcb_window_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_pixmap_next (xcb_pixmap_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_pixmap_t);
}

xcb_generic_iterator_t
xcb_pixmap_end (xcb_pixmap_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_cursor_next (xcb_cursor_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_cursor_t);
}

xcb_generic_iterator_t
xcb_cursor_end (xcb_cursor_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_font_next (xcb_font_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_font_t);
}

xcb_generic_iterator_t
xcb_font_end (xcb_font_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_gcontext_next (xcb_gcontext_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_gcontext_t);
}

xcb_generic_iterator_t
xcb_gcontext_end (xcb_gcontext_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_colormap_next (xcb_colormap_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_colormap_t);
}

xcb_generic_iterator_t
xcb_colormap_end (xcb_colormap_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_atom_next (xcb_atom_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_atom_t);
}

xcb_generic_iterator_t
xcb_atom_end (xcb_atom_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_drawable_next (xcb_drawable_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_drawable_t);
}

xcb_generic_iterator_t
xcb_drawable_end (xcb_drawable_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_fontable_next (xcb_fontable_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_fontable_t);
}

xcb_generic_iterator_t
xcb_fontable_end (xcb_fontable_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_bool32_next (xcb_bool32_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_bool32_t);
}

xcb_generic_iterator_t
xcb_bool32_end (xcb_bool32_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_visualid_next (xcb_visualid_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_visualid_t);
}

xcb_generic_iterator_t
xcb_visualid_end (xcb_visualid_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_timestamp_next (xcb_timestamp_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_timestamp_t);
}

xcb_generic_iterator_t
xcb_timestamp_end (xcb_timestamp_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_keysym_next (xcb_keysym_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_keysym_t);
}

xcb_generic_iterator_t
xcb_keysym_end (xcb_keysym_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_keycode_next (xcb_keycode_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_keycode_t);
}

xcb_generic_iterator_t
xcb_keycode_end (xcb_keycode_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_keycode32_next (xcb_keycode32_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_keycode32_t);
}

xcb_generic_iterator_t
xcb_keycode32_end (xcb_keycode32_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_button_next (xcb_button_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_button_t);
}

xcb_generic_iterator_t
xcb_button_end (xcb_button_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_point_next (xcb_point_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_point_t);
}

xcb_generic_iterator_t
xcb_point_end (xcb_point_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_rectangle_next (xcb_rectangle_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_rectangle_t);
}

xcb_generic_iterator_t
xcb_rectangle_end (xcb_rectangle_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_arc_next (xcb_arc_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_arc_t);
}

xcb_generic_iterator_t
xcb_arc_end (xcb_arc_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_format_next (xcb_format_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_format_t);
}

xcb_generic_iterator_t
xcb_format_end (xcb_format_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_visualtype_next (xcb_visualtype_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_visualtype_t);
}

xcb_generic_iterator_t
xcb_visualtype_end (xcb_visualtype_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_depth_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_depth_t *_aux = (xcb_depth_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_depth_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* visuals */
    xcb_block_len += _aux->visuals_len * sizeof(xcb_visualtype_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_visualtype_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_visualtype_t *
xcb_depth_visuals (const xcb_depth_t *R)
{
    return (xcb_visualtype_t *) (R + 1);
}

int
xcb_depth_visuals_length (const xcb_depth_t *R)
{
    return R->visuals_len;
}

xcb_visualtype_iterator_t
xcb_depth_visuals_iterator (const xcb_depth_t *R)
{
    xcb_visualtype_iterator_t i;
    i.data = (xcb_visualtype_t *) (R + 1);
    i.rem = R->visuals_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_depth_next (xcb_depth_iterator_t *i)
{
    xcb_depth_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_depth_t *)(((char *)R) + xcb_depth_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_depth_t *) child.data;
}

xcb_generic_iterator_t
xcb_depth_end (xcb_depth_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_depth_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_screen_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_screen_t *_aux = (xcb_screen_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_screen_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* allowed_depths */
    for(i=0; i<_aux->allowed_depths_len; i++) {
        xcb_tmp_len = xcb_depth_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_depth_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int
xcb_screen_allowed_depths_length (const xcb_screen_t *R)
{
    return R->allowed_depths_len;
}

xcb_depth_iterator_t
xcb_screen_allowed_depths_iterator (const xcb_screen_t *R)
{
    xcb_depth_iterator_t i;
    i.data = (xcb_depth_t *) (R + 1);
    i.rem = R->allowed_depths_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_screen_next (xcb_screen_iterator_t *i)
{
    xcb_screen_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_screen_t *)(((char *)R) + xcb_screen_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_screen_t *) child.data;
}

xcb_generic_iterator_t
xcb_screen_end (xcb_screen_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_screen_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_setup_request_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_setup_request_t *_aux = (xcb_setup_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_setup_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* authorization_protocol_name */
    xcb_block_len += _aux->authorization_protocol_name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* authorization_protocol_data */
    xcb_block_len += _aux->authorization_protocol_data_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_setup_request_authorization_protocol_name (const xcb_setup_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_setup_request_authorization_protocol_name_length (const xcb_setup_request_t *R)
{
    return R->authorization_protocol_name_len;
}

xcb_generic_iterator_t
xcb_setup_request_authorization_protocol_name_end (const xcb_setup_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->authorization_protocol_name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_setup_request_authorization_protocol_data (const xcb_setup_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_setup_request_authorization_protocol_name_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_setup_request_authorization_protocol_data_length (const xcb_setup_request_t *R)
{
    return R->authorization_protocol_data_len;
}

xcb_generic_iterator_t
xcb_setup_request_authorization_protocol_data_end (const xcb_setup_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_setup_request_authorization_protocol_name_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->authorization_protocol_data_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_setup_request_next (xcb_setup_request_iterator_t *i)
{
    xcb_setup_request_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_setup_request_t *)(((char *)R) + xcb_setup_request_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_setup_request_t *) child.data;
}

xcb_generic_iterator_t
xcb_setup_request_end (xcb_setup_request_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_setup_request_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_setup_failed_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_setup_failed_t *_aux = (xcb_setup_failed_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_setup_failed_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* reason */
    xcb_block_len += _aux->reason_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_setup_failed_reason (const xcb_setup_failed_t *R)
{
    return (char *) (R + 1);
}

int
xcb_setup_failed_reason_length (const xcb_setup_failed_t *R)
{
    return R->reason_len;
}

xcb_generic_iterator_t
xcb_setup_failed_reason_end (const xcb_setup_failed_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->reason_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_setup_failed_next (xcb_setup_failed_iterator_t *i)
{
    xcb_setup_failed_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_setup_failed_t *)(((char *)R) + xcb_setup_failed_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_setup_failed_t *) child.data;
}

xcb_generic_iterator_t
xcb_setup_failed_end (xcb_setup_failed_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_setup_failed_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_setup_authenticate_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_setup_authenticate_t *_aux = (xcb_setup_authenticate_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_setup_authenticate_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* reason */
    xcb_block_len += (_aux->length * 4) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_setup_authenticate_reason (const xcb_setup_authenticate_t *R)
{
    return (char *) (R + 1);
}

int
xcb_setup_authenticate_reason_length (const xcb_setup_authenticate_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_setup_authenticate_reason_end (const xcb_setup_authenticate_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_setup_authenticate_next (xcb_setup_authenticate_iterator_t *i)
{
    xcb_setup_authenticate_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_setup_authenticate_t *)(((char *)R) + xcb_setup_authenticate_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_setup_authenticate_t *) child.data;
}

xcb_generic_iterator_t
xcb_setup_authenticate_end (xcb_setup_authenticate_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_setup_authenticate_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_setup_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_setup_t *_aux = (xcb_setup_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_setup_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* vendor */
    xcb_block_len += _aux->vendor_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* pixmap_formats */
    xcb_block_len += _aux->pixmap_formats_len * sizeof(xcb_format_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_format_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* roots */
    for(i=0; i<_aux->roots_len; i++) {
        xcb_tmp_len = xcb_screen_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_screen_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_setup_vendor (const xcb_setup_t *R)
{
    return (char *) (R + 1);
}

int
xcb_setup_vendor_length (const xcb_setup_t *R)
{
    return R->vendor_len;
}

xcb_generic_iterator_t
xcb_setup_vendor_end (const xcb_setup_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->vendor_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_format_t *
xcb_setup_pixmap_formats (const xcb_setup_t *R)
{
    xcb_generic_iterator_t prev = xcb_setup_vendor_end(R);
    return (xcb_format_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_setup_pixmap_formats_length (const xcb_setup_t *R)
{
    return R->pixmap_formats_len;
}

xcb_format_iterator_t
xcb_setup_pixmap_formats_iterator (const xcb_setup_t *R)
{
    xcb_format_iterator_t i;
    xcb_generic_iterator_t prev = xcb_setup_vendor_end(R);
    i.data = (xcb_format_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)));
    i.rem = R->pixmap_formats_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_setup_roots_length (const xcb_setup_t *R)
{
    return R->roots_len;
}

xcb_screen_iterator_t
xcb_setup_roots_iterator (const xcb_setup_t *R)
{
    xcb_screen_iterator_t i;
    xcb_generic_iterator_t prev = xcb_format_end(xcb_setup_pixmap_formats_iterator(R));
    i.data = (xcb_screen_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_screen_t, prev.index));
    i.rem = R->roots_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_setup_next (xcb_setup_iterator_t *i)
{
    xcb_setup_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_setup_t *)(((char *)R) + xcb_setup_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_setup_t *) child.data;
}

xcb_generic_iterator_t
xcb_setup_end (xcb_setup_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_setup_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_client_message_data_next (xcb_client_message_data_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_client_message_data_t);
}

xcb_generic_iterator_t
xcb_client_message_data_end (xcb_client_message_data_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_create_window_value_list_serialize (void                                 **_buffer,
                                        uint32_t                               value_mask,
                                        const xcb_create_window_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[16];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_CW_BACK_PIXMAP) {
        /* xcb_create_window_value_list_t.background_pixmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background_pixmap;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BACK_PIXEL) {
        /* xcb_create_window_value_list_t.background_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXMAP) {
        /* xcb_create_window_value_list_t.border_pixmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->border_pixmap;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXEL) {
        /* xcb_create_window_value_list_t.border_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->border_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BIT_GRAVITY) {
        /* xcb_create_window_value_list_t.bit_gravity */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bit_gravity;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_WIN_GRAVITY) {
        /* xcb_create_window_value_list_t.win_gravity */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->win_gravity;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_STORE) {
        /* xcb_create_window_value_list_t.backing_store */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_store;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PLANES) {
        /* xcb_create_window_value_list_t.backing_planes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_planes;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PIXEL) {
        /* xcb_create_window_value_list_t.backing_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_OVERRIDE_REDIRECT) {
        /* xcb_create_window_value_list_t.override_redirect */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->override_redirect;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_SAVE_UNDER) {
        /* xcb_create_window_value_list_t.save_under */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->save_under;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_EVENT_MASK) {
        /* xcb_create_window_value_list_t.event_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->event_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_DONT_PROPAGATE) {
        /* xcb_create_window_value_list_t.do_not_propogate_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->do_not_propogate_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_COLORMAP) {
        /* xcb_create_window_value_list_t.colormap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->colormap;
        xcb_block_len += sizeof(xcb_colormap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_colormap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_colormap_t);
    }
    if(value_mask & XCB_CW_CURSOR) {
        /* xcb_create_window_value_list_t.cursor */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->cursor;
        xcb_block_len += sizeof(xcb_cursor_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_cursor_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_cursor_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_create_window_value_list_unpack (const void                      *_buffer,
                                     uint32_t                         value_mask,
                                     xcb_create_window_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_CW_BACK_PIXMAP) {
        /* xcb_create_window_value_list_t.background_pixmap */
        _aux->background_pixmap = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BACK_PIXEL) {
        /* xcb_create_window_value_list_t.background_pixel */
        _aux->background_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXMAP) {
        /* xcb_create_window_value_list_t.border_pixmap */
        _aux->border_pixmap = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXEL) {
        /* xcb_create_window_value_list_t.border_pixel */
        _aux->border_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BIT_GRAVITY) {
        /* xcb_create_window_value_list_t.bit_gravity */
        _aux->bit_gravity = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_WIN_GRAVITY) {
        /* xcb_create_window_value_list_t.win_gravity */
        _aux->win_gravity = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_STORE) {
        /* xcb_create_window_value_list_t.backing_store */
        _aux->backing_store = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PLANES) {
        /* xcb_create_window_value_list_t.backing_planes */
        _aux->backing_planes = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PIXEL) {
        /* xcb_create_window_value_list_t.backing_pixel */
        _aux->backing_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_OVERRIDE_REDIRECT) {
        /* xcb_create_window_value_list_t.override_redirect */
        _aux->override_redirect = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_SAVE_UNDER) {
        /* xcb_create_window_value_list_t.save_under */
        _aux->save_under = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_EVENT_MASK) {
        /* xcb_create_window_value_list_t.event_mask */
        _aux->event_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_DONT_PROPAGATE) {
        /* xcb_create_window_value_list_t.do_not_propogate_mask */
        _aux->do_not_propogate_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_COLORMAP) {
        /* xcb_create_window_value_list_t.colormap */
        _aux->colormap = *(xcb_colormap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_colormap_t);
        xcb_tmp += sizeof(xcb_colormap_t);
        xcb_align_to = ALIGNOF(xcb_colormap_t);
    }
    if(value_mask & XCB_CW_CURSOR) {
        /* xcb_create_window_value_list_t.cursor */
        _aux->cursor = *(xcb_cursor_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_cursor_t);
        xcb_tmp += sizeof(xcb_cursor_t);
        xcb_align_to = ALIGNOF(xcb_cursor_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_create_window_value_list_sizeof (const void  *_buffer,
                                     uint32_t     value_mask)
{
    xcb_create_window_value_list_t _aux;
    return xcb_create_window_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_create_window_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_create_window_request_t *_aux = (xcb_create_window_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_create_window_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_create_window_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_create_window_checked (xcb_connection_t *c,
                           uint8_t           depth,
                           xcb_window_t      wid,
                           xcb_window_t      parent,
                           int16_t           x,
                           int16_t           y,
                           uint16_t          width,
                           uint16_t          height,
                           uint16_t          border_width,
                           uint16_t          _class,
                           xcb_visualid_t    visual,
                           uint32_t          value_mask,
                           const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_window_request_t xcb_out;

    xcb_out.depth = depth;
    xcb_out.wid = wid;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.border_width = border_width;
    xcb_out._class = _class;
    xcb_out.visual = visual;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_window_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_create_window_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_window (xcb_connection_t *c,
                   uint8_t           depth,
                   xcb_window_t      wid,
                   xcb_window_t      parent,
                   int16_t           x,
                   int16_t           y,
                   uint16_t          width,
                   uint16_t          height,
                   uint16_t          border_width,
                   uint16_t          _class,
                   xcb_visualid_t    visual,
                   uint32_t          value_mask,
                   const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_window_request_t xcb_out;

    xcb_out.depth = depth;
    xcb_out.wid = wid;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.border_width = border_width;
    xcb_out._class = _class;
    xcb_out.visual = visual;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_window_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_create_window_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_window_aux_checked (xcb_connection_t                     *c,
                               uint8_t                               depth,
                               xcb_window_t                          wid,
                               xcb_window_t                          parent,
                               int16_t                               x,
                               int16_t                               y,
                               uint16_t                              width,
                               uint16_t                              height,
                               uint16_t                              border_width,
                               uint16_t                              _class,
                               xcb_visualid_t                        visual,
                               uint32_t                              value_mask,
                               const xcb_create_window_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_window_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.depth = depth;
    xcb_out.wid = wid;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.border_width = border_width;
    xcb_out._class = _class;
    xcb_out.visual = visual;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_window_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_create_window_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_window_aux (xcb_connection_t                     *c,
                       uint8_t                               depth,
                       xcb_window_t                          wid,
                       xcb_window_t                          parent,
                       int16_t                               x,
                       int16_t                               y,
                       uint16_t                              width,
                       uint16_t                              height,
                       uint16_t                              border_width,
                       uint16_t                              _class,
                       xcb_visualid_t                        visual,
                       uint32_t                              value_mask,
                       const xcb_create_window_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_window_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.depth = depth;
    xcb_out.wid = wid;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.border_width = border_width;
    xcb_out._class = _class;
    xcb_out.visual = visual;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_window_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_create_window_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_create_window_value_list (const xcb_create_window_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_change_window_attributes_value_list_serialize (void                                            **_buffer,
                                                   uint32_t                                          value_mask,
                                                   const xcb_change_window_attributes_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[16];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_CW_BACK_PIXMAP) {
        /* xcb_change_window_attributes_value_list_t.background_pixmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background_pixmap;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BACK_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.background_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXMAP) {
        /* xcb_change_window_attributes_value_list_t.border_pixmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->border_pixmap;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.border_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->border_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BIT_GRAVITY) {
        /* xcb_change_window_attributes_value_list_t.bit_gravity */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bit_gravity;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_WIN_GRAVITY) {
        /* xcb_change_window_attributes_value_list_t.win_gravity */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->win_gravity;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_STORE) {
        /* xcb_change_window_attributes_value_list_t.backing_store */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_store;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PLANES) {
        /* xcb_change_window_attributes_value_list_t.backing_planes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_planes;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.backing_pixel */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->backing_pixel;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_OVERRIDE_REDIRECT) {
        /* xcb_change_window_attributes_value_list_t.override_redirect */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->override_redirect;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_SAVE_UNDER) {
        /* xcb_change_window_attributes_value_list_t.save_under */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->save_under;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_EVENT_MASK) {
        /* xcb_change_window_attributes_value_list_t.event_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->event_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_DONT_PROPAGATE) {
        /* xcb_change_window_attributes_value_list_t.do_not_propogate_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->do_not_propogate_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_COLORMAP) {
        /* xcb_change_window_attributes_value_list_t.colormap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->colormap;
        xcb_block_len += sizeof(xcb_colormap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_colormap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_colormap_t);
    }
    if(value_mask & XCB_CW_CURSOR) {
        /* xcb_change_window_attributes_value_list_t.cursor */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->cursor;
        xcb_block_len += sizeof(xcb_cursor_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_cursor_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_cursor_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_change_window_attributes_value_list_unpack (const void                                 *_buffer,
                                                uint32_t                                    value_mask,
                                                xcb_change_window_attributes_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_CW_BACK_PIXMAP) {
        /* xcb_change_window_attributes_value_list_t.background_pixmap */
        _aux->background_pixmap = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BACK_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.background_pixel */
        _aux->background_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXMAP) {
        /* xcb_change_window_attributes_value_list_t.border_pixmap */
        _aux->border_pixmap = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_CW_BORDER_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.border_pixel */
        _aux->border_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BIT_GRAVITY) {
        /* xcb_change_window_attributes_value_list_t.bit_gravity */
        _aux->bit_gravity = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_WIN_GRAVITY) {
        /* xcb_change_window_attributes_value_list_t.win_gravity */
        _aux->win_gravity = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_STORE) {
        /* xcb_change_window_attributes_value_list_t.backing_store */
        _aux->backing_store = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PLANES) {
        /* xcb_change_window_attributes_value_list_t.backing_planes */
        _aux->backing_planes = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_BACKING_PIXEL) {
        /* xcb_change_window_attributes_value_list_t.backing_pixel */
        _aux->backing_pixel = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_OVERRIDE_REDIRECT) {
        /* xcb_change_window_attributes_value_list_t.override_redirect */
        _aux->override_redirect = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_SAVE_UNDER) {
        /* xcb_change_window_attributes_value_list_t.save_under */
        _aux->save_under = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_CW_EVENT_MASK) {
        /* xcb_change_window_attributes_value_list_t.event_mask */
        _aux->event_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_DONT_PROPAGATE) {
        /* xcb_change_window_attributes_value_list_t.do_not_propogate_mask */
        _aux->do_not_propogate_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CW_COLORMAP) {
        /* xcb_change_window_attributes_value_list_t.colormap */
        _aux->colormap = *(xcb_colormap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_colormap_t);
        xcb_tmp += sizeof(xcb_colormap_t);
        xcb_align_to = ALIGNOF(xcb_colormap_t);
    }
    if(value_mask & XCB_CW_CURSOR) {
        /* xcb_change_window_attributes_value_list_t.cursor */
        _aux->cursor = *(xcb_cursor_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_cursor_t);
        xcb_tmp += sizeof(xcb_cursor_t);
        xcb_align_to = ALIGNOF(xcb_cursor_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_change_window_attributes_value_list_sizeof (const void  *_buffer,
                                                uint32_t     value_mask)
{
    xcb_change_window_attributes_value_list_t _aux;
    return xcb_change_window_attributes_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_change_window_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_window_attributes_request_t *_aux = (xcb_change_window_attributes_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_window_attributes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_change_window_attributes_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_window_attributes_checked (xcb_connection_t *c,
                                      xcb_window_t      window,
                                      uint32_t          value_mask,
                                      const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_WINDOW_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_window_attributes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_window_attributes_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_window_attributes_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_window_attributes (xcb_connection_t *c,
                              xcb_window_t      window,
                              uint32_t          value_mask,
                              const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_WINDOW_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_window_attributes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_window_attributes_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_window_attributes_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_window_attributes_aux_checked (xcb_connection_t                                *c,
                                          xcb_window_t                                     window,
                                          uint32_t                                         value_mask,
                                          const xcb_change_window_attributes_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_WINDOW_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_window_attributes_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_window_attributes_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_window_attributes_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_window_attributes_aux (xcb_connection_t                                *c,
                                  xcb_window_t                                     window,
                                  uint32_t                                         value_mask,
                                  const xcb_change_window_attributes_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_WINDOW_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_window_attributes_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_window_attributes_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_window_attributes_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_change_window_attributes_value_list (const xcb_change_window_attributes_request_t *R)
{
    return (void *) (R + 1);
}

xcb_get_window_attributes_cookie_t
xcb_get_window_attributes (xcb_connection_t *c,
                           xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_WINDOW_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_window_attributes_cookie_t xcb_ret;
    xcb_get_window_attributes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_window_attributes_cookie_t
xcb_get_window_attributes_unchecked (xcb_connection_t *c,
                                     xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_WINDOW_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_window_attributes_cookie_t xcb_ret;
    xcb_get_window_attributes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_window_attributes_reply_t *
xcb_get_window_attributes_reply (xcb_connection_t                    *c,
                                 xcb_get_window_attributes_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_get_window_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_destroy_window_checked (xcb_connection_t *c,
                            xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DESTROY_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_destroy_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_destroy_window (xcb_connection_t *c,
                    xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DESTROY_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_destroy_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_destroy_subwindows_checked (xcb_connection_t *c,
                                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DESTROY_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_destroy_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_destroy_subwindows (xcb_connection_t *c,
                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DESTROY_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_destroy_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_save_set_checked (xcb_connection_t *c,
                             uint8_t           mode,
                             xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_SAVE_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_save_set_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_save_set (xcb_connection_t *c,
                     uint8_t           mode,
                     xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_SAVE_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_save_set_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_reparent_window_checked (xcb_connection_t *c,
                             xcb_window_t      window,
                             xcb_window_t      parent,
                             int16_t           x,
                             int16_t           y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_REPARENT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_reparent_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_reparent_window (xcb_connection_t *c,
                     xcb_window_t      window,
                     xcb_window_t      parent,
                     int16_t           x,
                     int16_t           y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_REPARENT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_reparent_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.parent = parent;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_map_window_checked (xcb_connection_t *c,
                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_MAP_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_map_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_map_window (xcb_connection_t *c,
                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_MAP_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_map_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_map_subwindows_checked (xcb_connection_t *c,
                            xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_MAP_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_map_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_map_subwindows (xcb_connection_t *c,
                    xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_MAP_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_map_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_unmap_window_checked (xcb_connection_t *c,
                          xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNMAP_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_unmap_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_unmap_window (xcb_connection_t *c,
                  xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNMAP_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_unmap_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_unmap_subwindows_checked (xcb_connection_t *c,
                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNMAP_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_unmap_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_unmap_subwindows (xcb_connection_t *c,
                      xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNMAP_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_unmap_subwindows_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_configure_window_value_list_serialize (void                                    **_buffer,
                                           uint16_t                                  value_mask,
                                           const xcb_configure_window_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[8];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_CONFIG_WINDOW_X) {
        /* xcb_configure_window_value_list_t.x */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->x;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_Y) {
        /* xcb_configure_window_value_list_t.y */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->y;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_WIDTH) {
        /* xcb_configure_window_value_list_t.width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->width;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_HEIGHT) {
        /* xcb_configure_window_value_list_t.height */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->height;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_BORDER_WIDTH) {
        /* xcb_configure_window_value_list_t.border_width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->border_width;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_SIBLING) {
        /* xcb_configure_window_value_list_t.sibling */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->sibling;
        xcb_block_len += sizeof(xcb_window_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_window_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_window_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_STACK_MODE) {
        /* xcb_configure_window_value_list_t.stack_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->stack_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_configure_window_value_list_unpack (const void                         *_buffer,
                                        uint16_t                            value_mask,
                                        xcb_configure_window_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_CONFIG_WINDOW_X) {
        /* xcb_configure_window_value_list_t.x */
        _aux->x = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_Y) {
        /* xcb_configure_window_value_list_t.y */
        _aux->y = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_WIDTH) {
        /* xcb_configure_window_value_list_t.width */
        _aux->width = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_HEIGHT) {
        /* xcb_configure_window_value_list_t.height */
        _aux->height = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_BORDER_WIDTH) {
        /* xcb_configure_window_value_list_t.border_width */
        _aux->border_width = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_SIBLING) {
        /* xcb_configure_window_value_list_t.sibling */
        _aux->sibling = *(xcb_window_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_window_t);
        xcb_tmp += sizeof(xcb_window_t);
        xcb_align_to = ALIGNOF(xcb_window_t);
    }
    if(value_mask & XCB_CONFIG_WINDOW_STACK_MODE) {
        /* xcb_configure_window_value_list_t.stack_mode */
        _aux->stack_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_configure_window_value_list_sizeof (const void  *_buffer,
                                        uint16_t     value_mask)
{
    xcb_configure_window_value_list_t _aux;
    return xcb_configure_window_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_configure_window_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_configure_window_request_t *_aux = (xcb_configure_window_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_configure_window_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_configure_window_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_configure_window_checked (xcb_connection_t *c,
                              xcb_window_t      window,
                              uint16_t          value_mask,
                              const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CONFIGURE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_configure_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_configure_window_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_configure_window_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_configure_window (xcb_connection_t *c,
                      xcb_window_t      window,
                      uint16_t          value_mask,
                      const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CONFIGURE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_configure_window_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_configure_window_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_configure_window_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_configure_window_aux_checked (xcb_connection_t                        *c,
                                  xcb_window_t                             window,
                                  uint16_t                                 value_mask,
                                  const xcb_configure_window_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CONFIGURE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_configure_window_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_configure_window_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_configure_window_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_configure_window_aux (xcb_connection_t                        *c,
                          xcb_window_t                             window,
                          uint16_t                                 value_mask,
                          const xcb_configure_window_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CONFIGURE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_configure_window_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.value_mask = value_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_configure_window_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_configure_window_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_configure_window_value_list (const xcb_configure_window_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_circulate_window_checked (xcb_connection_t *c,
                              uint8_t           direction,
                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CIRCULATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_circulate_window_request_t xcb_out;

    xcb_out.direction = direction;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_circulate_window (xcb_connection_t *c,
                      uint8_t           direction,
                      xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CIRCULATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_circulate_window_request_t xcb_out;

    xcb_out.direction = direction;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_geometry_cookie_t
xcb_get_geometry (xcb_connection_t *c,
                  xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_GEOMETRY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_geometry_cookie_t xcb_ret;
    xcb_get_geometry_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_geometry_cookie_t
xcb_get_geometry_unchecked (xcb_connection_t *c,
                            xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_GEOMETRY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_geometry_cookie_t xcb_ret;
    xcb_get_geometry_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_geometry_reply_t *
xcb_get_geometry_reply (xcb_connection_t           *c,
                        xcb_get_geometry_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_get_geometry_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_query_tree_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_query_tree_reply_t *_aux = (xcb_query_tree_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_query_tree_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* children */
    xcb_block_len += _aux->children_len * sizeof(xcb_window_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_window_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_query_tree_cookie_t
xcb_query_tree (xcb_connection_t *c,
                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_TREE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_tree_cookie_t xcb_ret;
    xcb_query_tree_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_tree_cookie_t
xcb_query_tree_unchecked (xcb_connection_t *c,
                          xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_TREE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_tree_cookie_t xcb_ret;
    xcb_query_tree_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_window_t *
xcb_query_tree_children (const xcb_query_tree_reply_t *R)
{
    return (xcb_window_t *) (R + 1);
}

int
xcb_query_tree_children_length (const xcb_query_tree_reply_t *R)
{
    return R->children_len;
}

xcb_generic_iterator_t
xcb_query_tree_children_end (const xcb_query_tree_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_window_t *) (R + 1)) + (R->children_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_query_tree_reply_t *
xcb_query_tree_reply (xcb_connection_t         *c,
                      xcb_query_tree_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_query_tree_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_intern_atom_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_intern_atom_request_t *_aux = (xcb_intern_atom_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_intern_atom_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_intern_atom_cookie_t
xcb_intern_atom (xcb_connection_t *c,
                 uint8_t           only_if_exists,
                 uint16_t          name_len,
                 const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_INTERN_ATOM,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_intern_atom_cookie_t xcb_ret;
    xcb_intern_atom_request_t xcb_out;

    xcb_out.only_if_exists = only_if_exists;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_intern_atom_cookie_t
xcb_intern_atom_unchecked (xcb_connection_t *c,
                           uint8_t           only_if_exists,
                           uint16_t          name_len,
                           const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_INTERN_ATOM,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_intern_atom_cookie_t xcb_ret;
    xcb_intern_atom_request_t xcb_out;

    xcb_out.only_if_exists = only_if_exists;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_intern_atom_reply_t *
xcb_intern_atom_reply (xcb_connection_t          *c,
                       xcb_intern_atom_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e)
{
    return (xcb_intern_atom_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_get_atom_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_atom_name_reply_t *_aux = (xcb_get_atom_name_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_atom_name_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_atom_name_cookie_t
xcb_get_atom_name (xcb_connection_t *c,
                   xcb_atom_t        atom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_ATOM_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_atom_name_cookie_t xcb_ret;
    xcb_get_atom_name_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.atom = atom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_atom_name_cookie_t
xcb_get_atom_name_unchecked (xcb_connection_t *c,
                             xcb_atom_t        atom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_ATOM_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_atom_name_cookie_t xcb_ret;
    xcb_get_atom_name_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.atom = atom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_get_atom_name_name (const xcb_get_atom_name_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_get_atom_name_name_length (const xcb_get_atom_name_reply_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_get_atom_name_name_end (const xcb_get_atom_name_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_atom_name_reply_t *
xcb_get_atom_name_reply (xcb_connection_t            *c,
                         xcb_get_atom_name_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_get_atom_name_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_change_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_property_request_t *_aux = (xcb_change_property_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += ((_aux->data_len * _aux->format) / 8) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_property_checked (xcb_connection_t *c,
                             uint8_t           mode,
                             xcb_window_t      window,
                             xcb_atom_t        property,
                             xcb_atom_t        type,
                             uint8_t           format,
                             uint32_t          data_len,
                             const void       *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_property_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.window = window;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.data_len = data_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = ((data_len * format) / 8) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_property (xcb_connection_t *c,
                     uint8_t           mode,
                     xcb_window_t      window,
                     xcb_atom_t        property,
                     xcb_atom_t        type,
                     uint8_t           format,
                     uint32_t          data_len,
                     const void       *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_property_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.window = window;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.data_len = data_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = ((data_len * format) / 8) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_change_property_data (const xcb_change_property_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_change_property_data_length (const xcb_change_property_request_t *R)
{
    return ((R->data_len * R->format) / 8);
}

xcb_generic_iterator_t
xcb_change_property_data_end (const xcb_change_property_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (((R->data_len * R->format) / 8));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_delete_property_checked (xcb_connection_t *c,
                             xcb_window_t      window,
                             xcb_atom_t        property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DELETE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_delete_property_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_delete_property (xcb_connection_t *c,
                     xcb_window_t      window,
                     xcb_atom_t        property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_DELETE_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_delete_property_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_get_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_property_reply_t *_aux = (xcb_get_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value */
    xcb_block_len += (_aux->value_len * (_aux->format / 8)) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_property_cookie_t
xcb_get_property (xcb_connection_t *c,
                  uint8_t           _delete,
                  xcb_window_t      window,
                  xcb_atom_t        property,
                  xcb_atom_t        type,
                  uint32_t          long_offset,
                  uint32_t          long_length)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_property_cookie_t xcb_ret;
    xcb_get_property_request_t xcb_out;

    xcb_out._delete = _delete;
    xcb_out.window = window;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_property_cookie_t
xcb_get_property_unchecked (xcb_connection_t *c,
                            uint8_t           _delete,
                            xcb_window_t      window,
                            xcb_atom_t        property,
                            xcb_atom_t        type,
                            uint32_t          long_offset,
                            uint32_t          long_length)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_property_cookie_t xcb_ret;
    xcb_get_property_request_t xcb_out;

    xcb_out._delete = _delete;
    xcb_out.window = window;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_get_property_value (const xcb_get_property_reply_t *R)
{
    return (void *) (R + 1);
}

int
xcb_get_property_value_length (const xcb_get_property_reply_t *R)
{
    return (R->value_len * (R->format / 8));
}

xcb_generic_iterator_t
xcb_get_property_value_end (const xcb_get_property_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + ((R->value_len * (R->format / 8)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_property_reply_t *
xcb_get_property_reply (xcb_connection_t           *c,
                        xcb_get_property_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_get_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_list_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_properties_reply_t *_aux = (xcb_list_properties_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_list_properties_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* atoms */
    xcb_block_len += _aux->atoms_len * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_properties_cookie_t
xcb_list_properties (xcb_connection_t *c,
                     xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_properties_cookie_t xcb_ret;
    xcb_list_properties_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_properties_cookie_t
xcb_list_properties_unchecked (xcb_connection_t *c,
                               xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_properties_cookie_t xcb_ret;
    xcb_list_properties_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_list_properties_atoms (const xcb_list_properties_reply_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_list_properties_atoms_length (const xcb_list_properties_reply_t *R)
{
    return R->atoms_len;
}

xcb_generic_iterator_t
xcb_list_properties_atoms_end (const xcb_list_properties_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->atoms_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_properties_reply_t *
xcb_list_properties_reply (xcb_connection_t              *c,
                           xcb_list_properties_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_list_properties_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_set_selection_owner_checked (xcb_connection_t *c,
                                 xcb_window_t      owner,
                                 xcb_atom_t        selection,
                                 xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_SELECTION_OWNER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_selection_owner_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.owner = owner;
    xcb_out.selection = selection;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_selection_owner (xcb_connection_t *c,
                         xcb_window_t      owner,
                         xcb_atom_t        selection,
                         xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_SELECTION_OWNER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_selection_owner_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.owner = owner;
    xcb_out.selection = selection;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_selection_owner_cookie_t
xcb_get_selection_owner (xcb_connection_t *c,
                         xcb_atom_t        selection)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_SELECTION_OWNER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_selection_owner_cookie_t xcb_ret;
    xcb_get_selection_owner_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.selection = selection;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_selection_owner_cookie_t
xcb_get_selection_owner_unchecked (xcb_connection_t *c,
                                   xcb_atom_t        selection)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_SELECTION_OWNER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_selection_owner_cookie_t xcb_ret;
    xcb_get_selection_owner_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.selection = selection;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_selection_owner_reply_t *
xcb_get_selection_owner_reply (xcb_connection_t                  *c,
                               xcb_get_selection_owner_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_get_selection_owner_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_convert_selection_checked (xcb_connection_t *c,
                               xcb_window_t      requestor,
                               xcb_atom_t        selection,
                               xcb_atom_t        target,
                               xcb_atom_t        property,
                               xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CONVERT_SELECTION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_convert_selection_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.requestor = requestor;
    xcb_out.selection = selection;
    xcb_out.target = target;
    xcb_out.property = property;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_convert_selection (xcb_connection_t *c,
                       xcb_window_t      requestor,
                       xcb_atom_t        selection,
                       xcb_atom_t        target,
                       xcb_atom_t        property,
                       xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CONVERT_SELECTION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_convert_selection_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.requestor = requestor;
    xcb_out.selection = selection;
    xcb_out.target = target;
    xcb_out.property = property;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_send_event_checked (xcb_connection_t *c,
                        uint8_t           propagate,
                        xcb_window_t      destination,
                        uint32_t          event_mask,
                        const char       *event)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SEND_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_send_event_request_t xcb_out;

    xcb_out.propagate = propagate;
    xcb_out.destination = destination;
    xcb_out.event_mask = event_mask;
    memcpy(xcb_out.event, event, 32);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_send_event (xcb_connection_t *c,
                uint8_t           propagate,
                xcb_window_t      destination,
                uint32_t          event_mask,
                const char       *event)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SEND_EVENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_send_event_request_t xcb_out;

    xcb_out.propagate = propagate;
    xcb_out.destination = destination;
    xcb_out.event_mask = event_mask;
    memcpy(xcb_out.event, event, 32);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_pointer_cookie_t
xcb_grab_pointer (xcb_connection_t *c,
                  uint8_t           owner_events,
                  xcb_window_t      grab_window,
                  uint16_t          event_mask,
                  uint8_t           pointer_mode,
                  uint8_t           keyboard_mode,
                  xcb_window_t      confine_to,
                  xcb_cursor_t      cursor,
                  xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_grab_pointer_cookie_t xcb_ret;
    xcb_grab_pointer_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.event_mask = event_mask;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    xcb_out.confine_to = confine_to;
    xcb_out.cursor = cursor;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_pointer_cookie_t
xcb_grab_pointer_unchecked (xcb_connection_t *c,
                            uint8_t           owner_events,
                            xcb_window_t      grab_window,
                            uint16_t          event_mask,
                            uint8_t           pointer_mode,
                            uint8_t           keyboard_mode,
                            xcb_window_t      confine_to,
                            xcb_cursor_t      cursor,
                            xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_grab_pointer_cookie_t xcb_ret;
    xcb_grab_pointer_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.event_mask = event_mask;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    xcb_out.confine_to = confine_to;
    xcb_out.cursor = cursor;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_pointer_reply_t *
xcb_grab_pointer_reply (xcb_connection_t           *c,
                        xcb_grab_pointer_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_grab_pointer_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_ungrab_pointer_checked (xcb_connection_t *c,
                            xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_pointer (xcb_connection_t *c,
                    xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_button_checked (xcb_connection_t *c,
                         uint8_t           owner_events,
                         xcb_window_t      grab_window,
                         uint16_t          event_mask,
                         uint8_t           pointer_mode,
                         uint8_t           keyboard_mode,
                         xcb_window_t      confine_to,
                         xcb_cursor_t      cursor,
                         uint8_t           button,
                         uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_button_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.event_mask = event_mask;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    xcb_out.confine_to = confine_to;
    xcb_out.cursor = cursor;
    xcb_out.button = button;
    xcb_out.pad0 = 0;
    xcb_out.modifiers = modifiers;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_button (xcb_connection_t *c,
                 uint8_t           owner_events,
                 xcb_window_t      grab_window,
                 uint16_t          event_mask,
                 uint8_t           pointer_mode,
                 uint8_t           keyboard_mode,
                 xcb_window_t      confine_to,
                 xcb_cursor_t      cursor,
                 uint8_t           button,
                 uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_button_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.event_mask = event_mask;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    xcb_out.confine_to = confine_to;
    xcb_out.cursor = cursor;
    xcb_out.button = button;
    xcb_out.pad0 = 0;
    xcb_out.modifiers = modifiers;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_button_checked (xcb_connection_t *c,
                           uint8_t           button,
                           xcb_window_t      grab_window,
                           uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_button_request_t xcb_out;

    xcb_out.button = button;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_button (xcb_connection_t *c,
                   uint8_t           button,
                   xcb_window_t      grab_window,
                   uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_BUTTON,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_button_request_t xcb_out;

    xcb_out.button = button;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_active_pointer_grab_checked (xcb_connection_t *c,
                                        xcb_cursor_t      cursor,
                                        xcb_timestamp_t   time,
                                        uint16_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_ACTIVE_POINTER_GRAB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_active_pointer_grab_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;
    xcb_out.time = time;
    xcb_out.event_mask = event_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_active_pointer_grab (xcb_connection_t *c,
                                xcb_cursor_t      cursor,
                                xcb_timestamp_t   time,
                                uint16_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_ACTIVE_POINTER_GRAB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_active_pointer_grab_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;
    xcb_out.time = time;
    xcb_out.event_mask = event_mask;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_keyboard_cookie_t
xcb_grab_keyboard (xcb_connection_t *c,
                   uint8_t           owner_events,
                   xcb_window_t      grab_window,
                   xcb_timestamp_t   time,
                   uint8_t           pointer_mode,
                   uint8_t           keyboard_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_KEYBOARD,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_grab_keyboard_cookie_t xcb_ret;
    xcb_grab_keyboard_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_keyboard_cookie_t
xcb_grab_keyboard_unchecked (xcb_connection_t *c,
                             uint8_t           owner_events,
                             xcb_window_t      grab_window,
                             xcb_timestamp_t   time,
                             uint8_t           pointer_mode,
                             uint8_t           keyboard_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_KEYBOARD,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_grab_keyboard_cookie_t xcb_ret;
    xcb_grab_keyboard_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.time = time;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_grab_keyboard_reply_t *
xcb_grab_keyboard_reply (xcb_connection_t            *c,
                         xcb_grab_keyboard_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_grab_keyboard_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_ungrab_keyboard_checked (xcb_connection_t *c,
                             xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_KEYBOARD,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_keyboard_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_keyboard (xcb_connection_t *c,
                     xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_KEYBOARD,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_keyboard_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_key_checked (xcb_connection_t *c,
                      uint8_t           owner_events,
                      xcb_window_t      grab_window,
                      uint16_t          modifiers,
                      xcb_keycode_t     key,
                      uint8_t           pointer_mode,
                      uint8_t           keyboard_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_key_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.key = key;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_key (xcb_connection_t *c,
              uint8_t           owner_events,
              xcb_window_t      grab_window,
              uint16_t          modifiers,
              xcb_keycode_t     key,
              uint8_t           pointer_mode,
              uint8_t           keyboard_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_key_request_t xcb_out;

    xcb_out.owner_events = owner_events;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    xcb_out.key = key;
    xcb_out.pointer_mode = pointer_mode;
    xcb_out.keyboard_mode = keyboard_mode;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_key_checked (xcb_connection_t *c,
                        xcb_keycode_t     key,
                        xcb_window_t      grab_window,
                        uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_key_request_t xcb_out;

    xcb_out.key = key;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_key (xcb_connection_t *c,
                xcb_keycode_t     key,
                xcb_window_t      grab_window,
                uint16_t          modifiers)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_KEY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_key_request_t xcb_out;

    xcb_out.key = key;
    xcb_out.grab_window = grab_window;
    xcb_out.modifiers = modifiers;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_allow_events_checked (xcb_connection_t *c,
                          uint8_t           mode,
                          xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOW_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_allow_events_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_allow_events (xcb_connection_t *c,
                  uint8_t           mode,
                  xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOW_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_allow_events_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_server_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_SERVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_server_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_grab_server (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GRAB_SERVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_grab_server_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_server_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_SERVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_server_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_ungrab_server (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNGRAB_SERVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_ungrab_server_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_pointer_cookie_t
xcb_query_pointer (xcb_connection_t *c,
                   xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_pointer_cookie_t xcb_ret;
    xcb_query_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_pointer_cookie_t
xcb_query_pointer_unchecked (xcb_connection_t *c,
                             xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_POINTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_pointer_cookie_t xcb_ret;
    xcb_query_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_pointer_reply_t *
xcb_query_pointer_reply (xcb_connection_t            *c,
                         xcb_query_pointer_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_query_pointer_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_timecoord_next (xcb_timecoord_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_timecoord_t);
}

xcb_generic_iterator_t
xcb_timecoord_end (xcb_timecoord_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_get_motion_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_motion_events_reply_t *_aux = (xcb_get_motion_events_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_motion_events_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* events */
    xcb_block_len += _aux->events_len * sizeof(xcb_timecoord_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_timecoord_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_motion_events_cookie_t
xcb_get_motion_events (xcb_connection_t *c,
                       xcb_window_t      window,
                       xcb_timestamp_t   start,
                       xcb_timestamp_t   stop)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_MOTION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_motion_events_cookie_t xcb_ret;
    xcb_get_motion_events_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.start = start;
    xcb_out.stop = stop;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_motion_events_cookie_t
xcb_get_motion_events_unchecked (xcb_connection_t *c,
                                 xcb_window_t      window,
                                 xcb_timestamp_t   start,
                                 xcb_timestamp_t   stop)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_MOTION_EVENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_motion_events_cookie_t xcb_ret;
    xcb_get_motion_events_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.start = start;
    xcb_out.stop = stop;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_timecoord_t *
xcb_get_motion_events_events (const xcb_get_motion_events_reply_t *R)
{
    return (xcb_timecoord_t *) (R + 1);
}

int
xcb_get_motion_events_events_length (const xcb_get_motion_events_reply_t *R)
{
    return R->events_len;
}

xcb_timecoord_iterator_t
xcb_get_motion_events_events_iterator (const xcb_get_motion_events_reply_t *R)
{
    xcb_timecoord_iterator_t i;
    i.data = (xcb_timecoord_t *) (R + 1);
    i.rem = R->events_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_motion_events_reply_t *
xcb_get_motion_events_reply (xcb_connection_t                *c,
                             xcb_get_motion_events_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_get_motion_events_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_translate_coordinates_cookie_t
xcb_translate_coordinates (xcb_connection_t *c,
                           xcb_window_t      src_window,
                           xcb_window_t      dst_window,
                           int16_t           src_x,
                           int16_t           src_y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_TRANSLATE_COORDINATES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_translate_coordinates_cookie_t xcb_ret;
    xcb_translate_coordinates_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_window = src_window;
    xcb_out.dst_window = dst_window;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_translate_coordinates_cookie_t
xcb_translate_coordinates_unchecked (xcb_connection_t *c,
                                     xcb_window_t      src_window,
                                     xcb_window_t      dst_window,
                                     int16_t           src_x,
                                     int16_t           src_y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_TRANSLATE_COORDINATES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_translate_coordinates_cookie_t xcb_ret;
    xcb_translate_coordinates_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_window = src_window;
    xcb_out.dst_window = dst_window;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_translate_coordinates_reply_t *
xcb_translate_coordinates_reply (xcb_connection_t                    *c,
                                 xcb_translate_coordinates_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_translate_coordinates_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_warp_pointer_checked (xcb_connection_t *c,
                          xcb_window_t      src_window,
                          xcb_window_t      dst_window,
                          int16_t           src_x,
                          int16_t           src_y,
                          uint16_t          src_width,
                          uint16_t          src_height,
                          int16_t           dst_x,
                          int16_t           dst_y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_WARP_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_warp_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_window = src_window;
    xcb_out.dst_window = dst_window;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_width = src_width;
    xcb_out.src_height = src_height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_warp_pointer (xcb_connection_t *c,
                  xcb_window_t      src_window,
                  xcb_window_t      dst_window,
                  int16_t           src_x,
                  int16_t           src_y,
                  uint16_t          src_width,
                  uint16_t          src_height,
                  int16_t           dst_x,
                  int16_t           dst_y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_WARP_POINTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_warp_pointer_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_window = src_window;
    xcb_out.dst_window = dst_window;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.src_width = src_width;
    xcb_out.src_height = src_height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_input_focus_checked (xcb_connection_t *c,
                             uint8_t           revert_to,
                             xcb_window_t      focus,
                             xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_INPUT_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_input_focus_request_t xcb_out;

    xcb_out.revert_to = revert_to;
    xcb_out.focus = focus;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_input_focus (xcb_connection_t *c,
                     uint8_t           revert_to,
                     xcb_window_t      focus,
                     xcb_timestamp_t   time)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_INPUT_FOCUS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_input_focus_request_t xcb_out;

    xcb_out.revert_to = revert_to;
    xcb_out.focus = focus;
    xcb_out.time = time;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_input_focus_cookie_t
xcb_get_input_focus (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_INPUT_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_input_focus_cookie_t xcb_ret;
    xcb_get_input_focus_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_input_focus_cookie_t
xcb_get_input_focus_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_INPUT_FOCUS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_input_focus_cookie_t xcb_ret;
    xcb_get_input_focus_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_input_focus_reply_t *
xcb_get_input_focus_reply (xcb_connection_t              *c,
                           xcb_get_input_focus_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_get_input_focus_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_query_keymap_cookie_t
xcb_query_keymap (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_KEYMAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_keymap_cookie_t xcb_ret;
    xcb_query_keymap_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_keymap_cookie_t
xcb_query_keymap_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_KEYMAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_keymap_cookie_t xcb_ret;
    xcb_query_keymap_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_keymap_reply_t *
xcb_query_keymap_reply (xcb_connection_t           *c,
                        xcb_query_keymap_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_query_keymap_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_open_font_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_open_font_request_t *_aux = (xcb_open_font_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_open_font_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_open_font_checked (xcb_connection_t *c,
                       xcb_font_t        fid,
                       uint16_t          name_len,
                       const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_OPEN_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_open_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.fid = fid;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_open_font (xcb_connection_t *c,
               xcb_font_t        fid,
               uint16_t          name_len,
               const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_OPEN_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_open_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.fid = fid;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_open_font_name (const xcb_open_font_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_open_font_name_length (const xcb_open_font_request_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_open_font_name_end (const xcb_open_font_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_close_font_checked (xcb_connection_t *c,
                        xcb_font_t        font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CLOSE_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_close_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_close_font (xcb_connection_t *c,
                xcb_font_t        font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CLOSE_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_close_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_fontprop_next (xcb_fontprop_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_fontprop_t);
}

xcb_generic_iterator_t
xcb_fontprop_end (xcb_fontprop_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_charinfo_next (xcb_charinfo_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_charinfo_t);
}

xcb_generic_iterator_t
xcb_charinfo_end (xcb_charinfo_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_query_font_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_query_font_reply_t *_aux = (xcb_query_font_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_query_font_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* properties */
    xcb_block_len += _aux->properties_len * sizeof(xcb_fontprop_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_fontprop_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* char_infos */
    xcb_block_len += _aux->char_infos_len * sizeof(xcb_charinfo_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_charinfo_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_query_font_cookie_t
xcb_query_font (xcb_connection_t *c,
                xcb_fontable_t    font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_FONT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_font_cookie_t xcb_ret;
    xcb_query_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_font_cookie_t
xcb_query_font_unchecked (xcb_connection_t *c,
                          xcb_fontable_t    font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_FONT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_font_cookie_t xcb_ret;
    xcb_query_font_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_fontprop_t *
xcb_query_font_properties (const xcb_query_font_reply_t *R)
{
    return (xcb_fontprop_t *) (R + 1);
}

int
xcb_query_font_properties_length (const xcb_query_font_reply_t *R)
{
    return R->properties_len;
}

xcb_fontprop_iterator_t
xcb_query_font_properties_iterator (const xcb_query_font_reply_t *R)
{
    xcb_fontprop_iterator_t i;
    i.data = (xcb_fontprop_t *) (R + 1);
    i.rem = R->properties_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_charinfo_t *
xcb_query_font_char_infos (const xcb_query_font_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_fontprop_end(xcb_query_font_properties_iterator(R));
    return (xcb_charinfo_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_charinfo_t, prev.index) + 0);
}

int
xcb_query_font_char_infos_length (const xcb_query_font_reply_t *R)
{
    return R->char_infos_len;
}

xcb_charinfo_iterator_t
xcb_query_font_char_infos_iterator (const xcb_query_font_reply_t *R)
{
    xcb_charinfo_iterator_t i;
    xcb_generic_iterator_t prev = xcb_fontprop_end(xcb_query_font_properties_iterator(R));
    i.data = (xcb_charinfo_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_charinfo_t, prev.index));
    i.rem = R->char_infos_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_query_font_reply_t *
xcb_query_font_reply (xcb_connection_t         *c,
                      xcb_query_font_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_query_font_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_query_text_extents_sizeof (const void  *_buffer,
                               uint32_t     string_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_query_text_extents_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += string_len * sizeof(xcb_char2b_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_char2b_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_query_text_extents_cookie_t
xcb_query_text_extents (xcb_connection_t   *c,
                        xcb_fontable_t      font,
                        uint32_t            string_len,
                        const xcb_char2b_t *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_TEXT_EXTENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_text_extents_cookie_t xcb_ret;
    xcb_query_text_extents_request_t xcb_out;

    xcb_out.odd_length = (string_len & 1);
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_char2b_t string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(xcb_char2b_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_text_extents_cookie_t
xcb_query_text_extents_unchecked (xcb_connection_t   *c,
                                  xcb_fontable_t      font,
                                  uint32_t            string_len,
                                  const xcb_char2b_t *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_TEXT_EXTENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_text_extents_cookie_t xcb_ret;
    xcb_query_text_extents_request_t xcb_out;

    xcb_out.odd_length = (string_len & 1);
    xcb_out.font = font;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_char2b_t string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(xcb_char2b_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_text_extents_reply_t *
xcb_query_text_extents_reply (xcb_connection_t                 *c,
                              xcb_query_text_extents_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_query_text_extents_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_str_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_str_t *_aux = (xcb_str_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_str_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_str_name (const xcb_str_t *R)
{
    return (char *) (R + 1);
}

int
xcb_str_name_length (const xcb_str_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_str_name_end (const xcb_str_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_str_next (xcb_str_iterator_t *i)
{
    xcb_str_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_str_t *)(((char *)R) + xcb_str_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_str_t *) child.data;
}

xcb_generic_iterator_t
xcb_str_end (xcb_str_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_str_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_list_fonts_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_fonts_request_t *_aux = (xcb_list_fonts_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_list_fonts_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pattern */
    xcb_block_len += _aux->pattern_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_fonts_cookie_t
xcb_list_fonts (xcb_connection_t *c,
                uint16_t          max_names,
                uint16_t          pattern_len,
                const char       *pattern)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LIST_FONTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_list_fonts_cookie_t xcb_ret;
    xcb_list_fonts_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.max_names = max_names;
    xcb_out.pattern_len = pattern_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char pattern */
    xcb_parts[4].iov_base = (char *) pattern;
    xcb_parts[4].iov_len = pattern_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_fonts_cookie_t
xcb_list_fonts_unchecked (xcb_connection_t *c,
                          uint16_t          max_names,
                          uint16_t          pattern_len,
                          const char       *pattern)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LIST_FONTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_list_fonts_cookie_t xcb_ret;
    xcb_list_fonts_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.max_names = max_names;
    xcb_out.pattern_len = pattern_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char pattern */
    xcb_parts[4].iov_base = (char *) pattern;
    xcb_parts[4].iov_len = pattern_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_list_fonts_names_length (const xcb_list_fonts_reply_t *R)
{
    return R->names_len;
}

xcb_str_iterator_t
xcb_list_fonts_names_iterator (const xcb_list_fonts_reply_t *R)
{
    xcb_str_iterator_t i;
    i.data = (xcb_str_t *) (R + 1);
    i.rem = R->names_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_fonts_reply_t *
xcb_list_fonts_reply (xcb_connection_t         *c,
                      xcb_list_fonts_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_list_fonts_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_list_fonts_with_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_fonts_with_info_request_t *_aux = (xcb_list_fonts_with_info_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_list_fonts_with_info_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pattern */
    xcb_block_len += _aux->pattern_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_fonts_with_info_cookie_t
xcb_list_fonts_with_info (xcb_connection_t *c,
                          uint16_t          max_names,
                          uint16_t          pattern_len,
                          const char       *pattern)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LIST_FONTS_WITH_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_list_fonts_with_info_cookie_t xcb_ret;
    xcb_list_fonts_with_info_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.max_names = max_names;
    xcb_out.pattern_len = pattern_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char pattern */
    xcb_parts[4].iov_base = (char *) pattern;
    xcb_parts[4].iov_len = pattern_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_fonts_with_info_cookie_t
xcb_list_fonts_with_info_unchecked (xcb_connection_t *c,
                                    uint16_t          max_names,
                                    uint16_t          pattern_len,
                                    const char       *pattern)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LIST_FONTS_WITH_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_list_fonts_with_info_cookie_t xcb_ret;
    xcb_list_fonts_with_info_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.max_names = max_names;
    xcb_out.pattern_len = pattern_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char pattern */
    xcb_parts[4].iov_base = (char *) pattern;
    xcb_parts[4].iov_len = pattern_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_fontprop_t *
xcb_list_fonts_with_info_properties (const xcb_list_fonts_with_info_reply_t *R)
{
    return (xcb_fontprop_t *) (R + 1);
}

int
xcb_list_fonts_with_info_properties_length (const xcb_list_fonts_with_info_reply_t *R)
{
    return R->properties_len;
}

xcb_fontprop_iterator_t
xcb_list_fonts_with_info_properties_iterator (const xcb_list_fonts_with_info_reply_t *R)
{
    xcb_fontprop_iterator_t i;
    i.data = (xcb_fontprop_t *) (R + 1);
    i.rem = R->properties_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_list_fonts_with_info_name (const xcb_list_fonts_with_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_fontprop_end(xcb_list_fonts_with_info_properties_iterator(R));
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_list_fonts_with_info_name_length (const xcb_list_fonts_with_info_reply_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_list_fonts_with_info_name_end (const xcb_list_fonts_with_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_fontprop_end(xcb_list_fonts_with_info_properties_iterator(R));
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_fonts_with_info_reply_t *
xcb_list_fonts_with_info_reply (xcb_connection_t                   *c,
                                xcb_list_fonts_with_info_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_list_fonts_with_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_set_font_path_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_set_font_path_request_t *_aux = (xcb_set_font_path_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_set_font_path_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* font */
    for(i=0; i<_aux->font_qty; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_str_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_set_font_path_checked (xcb_connection_t *c,
                           uint16_t          font_qty,
                           const xcb_str_t  *font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_FONT_PATH,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_font_path_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.pad0 = 0;
    xcb_out.font_qty = font_qty;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_str_t font */
    xcb_parts[4].iov_base = (char *) font;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)font;
    for(i=0; i<font_qty; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_font_path (xcb_connection_t *c,
                   uint16_t          font_qty,
                   const xcb_str_t  *font)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_FONT_PATH,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_font_path_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.pad0 = 0;
    xcb_out.font_qty = font_qty;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_str_t font */
    xcb_parts[4].iov_base = (char *) font;
    xcb_parts[4].iov_len = 0;
    xcb_tmp = (char *)font;
    for(i=0; i<font_qty; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_parts[4].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_set_font_path_font_length (const xcb_set_font_path_request_t *R)
{
    return R->font_qty;
}

xcb_str_iterator_t
xcb_set_font_path_font_iterator (const xcb_set_font_path_request_t *R)
{
    xcb_str_iterator_t i;
    i.data = (xcb_str_t *) (R + 1);
    i.rem = R->font_qty;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_get_font_path_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_font_path_reply_t *_aux = (xcb_get_font_path_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_get_font_path_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* path */
    for(i=0; i<_aux->path_len; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_str_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_font_path_cookie_t
xcb_get_font_path (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_FONT_PATH,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_font_path_cookie_t xcb_ret;
    xcb_get_font_path_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_font_path_cookie_t
xcb_get_font_path_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_FONT_PATH,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_font_path_cookie_t xcb_ret;
    xcb_get_font_path_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_get_font_path_path_length (const xcb_get_font_path_reply_t *R)
{
    return R->path_len;
}

xcb_str_iterator_t
xcb_get_font_path_path_iterator (const xcb_get_font_path_reply_t *R)
{
    xcb_str_iterator_t i;
    i.data = (xcb_str_t *) (R + 1);
    i.rem = R->path_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_font_path_reply_t *
xcb_get_font_path_reply (xcb_connection_t            *c,
                         xcb_get_font_path_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_get_font_path_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_create_pixmap_checked (xcb_connection_t *c,
                           uint8_t           depth,
                           xcb_pixmap_t      pid,
                           xcb_drawable_t    drawable,
                           uint16_t          width,
                           uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_pixmap_request_t xcb_out;

    xcb_out.depth = depth;
    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_pixmap (xcb_connection_t *c,
                   uint8_t           depth,
                   xcb_pixmap_t      pid,
                   xcb_drawable_t    drawable,
                   uint16_t          width,
                   uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_pixmap_request_t xcb_out;

    xcb_out.depth = depth;
    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_pixmap_checked (xcb_connection_t *c,
                         xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_pixmap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_pixmap (xcb_connection_t *c,
                 xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_pixmap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_create_gc_value_list_serialize (void                             **_buffer,
                                    uint32_t                           value_mask,
                                    const xcb_create_gc_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[24];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_GC_FUNCTION) {
        /* xcb_create_gc_value_list_t.function */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->function;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_PLANE_MASK) {
        /* xcb_create_gc_value_list_t.plane_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->plane_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FOREGROUND) {
        /* xcb_create_gc_value_list_t.foreground */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->foreground;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_BACKGROUND) {
        /* xcb_create_gc_value_list_t.background */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_WIDTH) {
        /* xcb_create_gc_value_list_t.line_width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->line_width;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_STYLE) {
        /* xcb_create_gc_value_list_t.line_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->line_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_CAP_STYLE) {
        /* xcb_create_gc_value_list_t.cap_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->cap_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_JOIN_STYLE) {
        /* xcb_create_gc_value_list_t.join_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->join_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_STYLE) {
        /* xcb_create_gc_value_list_t.fill_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->fill_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_RULE) {
        /* xcb_create_gc_value_list_t.fill_rule */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->fill_rule;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_TILE) {
        /* xcb_create_gc_value_list_t.tile */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_STIPPLE) {
        /* xcb_create_gc_value_list_t.stipple */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->stipple;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_X) {
        /* xcb_create_gc_value_list_t.tile_stipple_x_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile_stipple_x_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_Y) {
        /* xcb_create_gc_value_list_t.tile_stipple_y_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile_stipple_y_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_FONT) {
        /* xcb_create_gc_value_list_t.font */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->font;
        xcb_block_len += sizeof(xcb_font_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_font_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_font_t);
    }
    if(value_mask & XCB_GC_SUBWINDOW_MODE) {
        /* xcb_create_gc_value_list_t.subwindow_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->subwindow_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_GRAPHICS_EXPOSURES) {
        /* xcb_create_gc_value_list_t.graphics_exposures */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->graphics_exposures;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_X) {
        /* xcb_create_gc_value_list_t.clip_x_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_x_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_Y) {
        /* xcb_create_gc_value_list_t.clip_y_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_y_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_MASK) {
        /* xcb_create_gc_value_list_t.clip_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_mask;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_DASH_OFFSET) {
        /* xcb_create_gc_value_list_t.dash_offset */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dash_offset;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_DASH_LIST) {
        /* xcb_create_gc_value_list_t.dashes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dashes;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_ARC_MODE) {
        /* xcb_create_gc_value_list_t.arc_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->arc_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_create_gc_value_list_unpack (const void                  *_buffer,
                                 uint32_t                     value_mask,
                                 xcb_create_gc_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_GC_FUNCTION) {
        /* xcb_create_gc_value_list_t.function */
        _aux->function = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_PLANE_MASK) {
        /* xcb_create_gc_value_list_t.plane_mask */
        _aux->plane_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FOREGROUND) {
        /* xcb_create_gc_value_list_t.foreground */
        _aux->foreground = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_BACKGROUND) {
        /* xcb_create_gc_value_list_t.background */
        _aux->background = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_WIDTH) {
        /* xcb_create_gc_value_list_t.line_width */
        _aux->line_width = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_STYLE) {
        /* xcb_create_gc_value_list_t.line_style */
        _aux->line_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_CAP_STYLE) {
        /* xcb_create_gc_value_list_t.cap_style */
        _aux->cap_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_JOIN_STYLE) {
        /* xcb_create_gc_value_list_t.join_style */
        _aux->join_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_STYLE) {
        /* xcb_create_gc_value_list_t.fill_style */
        _aux->fill_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_RULE) {
        /* xcb_create_gc_value_list_t.fill_rule */
        _aux->fill_rule = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_TILE) {
        /* xcb_create_gc_value_list_t.tile */
        _aux->tile = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_STIPPLE) {
        /* xcb_create_gc_value_list_t.stipple */
        _aux->stipple = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_X) {
        /* xcb_create_gc_value_list_t.tile_stipple_x_origin */
        _aux->tile_stipple_x_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_Y) {
        /* xcb_create_gc_value_list_t.tile_stipple_y_origin */
        _aux->tile_stipple_y_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_FONT) {
        /* xcb_create_gc_value_list_t.font */
        _aux->font = *(xcb_font_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_font_t);
        xcb_tmp += sizeof(xcb_font_t);
        xcb_align_to = ALIGNOF(xcb_font_t);
    }
    if(value_mask & XCB_GC_SUBWINDOW_MODE) {
        /* xcb_create_gc_value_list_t.subwindow_mode */
        _aux->subwindow_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_GRAPHICS_EXPOSURES) {
        /* xcb_create_gc_value_list_t.graphics_exposures */
        _aux->graphics_exposures = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_X) {
        /* xcb_create_gc_value_list_t.clip_x_origin */
        _aux->clip_x_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_Y) {
        /* xcb_create_gc_value_list_t.clip_y_origin */
        _aux->clip_y_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_MASK) {
        /* xcb_create_gc_value_list_t.clip_mask */
        _aux->clip_mask = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_DASH_OFFSET) {
        /* xcb_create_gc_value_list_t.dash_offset */
        _aux->dash_offset = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_DASH_LIST) {
        /* xcb_create_gc_value_list_t.dashes */
        _aux->dashes = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_ARC_MODE) {
        /* xcb_create_gc_value_list_t.arc_mode */
        _aux->arc_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_create_gc_value_list_sizeof (const void  *_buffer,
                                 uint32_t     value_mask)
{
    xcb_create_gc_value_list_t _aux;
    return xcb_create_gc_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_create_gc_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_create_gc_request_t *_aux = (xcb_create_gc_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_create_gc_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_create_gc_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_create_gc_checked (xcb_connection_t *c,
                       xcb_gcontext_t    cid,
                       xcb_drawable_t    drawable,
                       uint32_t          value_mask,
                       const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_gc_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_create_gc_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_gc (xcb_connection_t *c,
               xcb_gcontext_t    cid,
               xcb_drawable_t    drawable,
               uint32_t          value_mask,
               const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_gc_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_create_gc_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_gc_aux_checked (xcb_connection_t                 *c,
                           xcb_gcontext_t                    cid,
                           xcb_drawable_t                    drawable,
                           uint32_t                          value_mask,
                           const xcb_create_gc_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_gc_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_gc_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_create_gc_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_gc_aux (xcb_connection_t                 *c,
                   xcb_gcontext_t                    cid,
                   xcb_drawable_t                    drawable,
                   uint32_t                          value_mask,
                   const xcb_create_gc_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CREATE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_create_gc_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_create_gc_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_create_gc_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_create_gc_value_list (const xcb_create_gc_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_change_gc_value_list_serialize (void                             **_buffer,
                                    uint32_t                           value_mask,
                                    const xcb_change_gc_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[24];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_GC_FUNCTION) {
        /* xcb_change_gc_value_list_t.function */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->function;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_PLANE_MASK) {
        /* xcb_change_gc_value_list_t.plane_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->plane_mask;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FOREGROUND) {
        /* xcb_change_gc_value_list_t.foreground */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->foreground;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_BACKGROUND) {
        /* xcb_change_gc_value_list_t.background */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->background;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_WIDTH) {
        /* xcb_change_gc_value_list_t.line_width */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->line_width;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_STYLE) {
        /* xcb_change_gc_value_list_t.line_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->line_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_CAP_STYLE) {
        /* xcb_change_gc_value_list_t.cap_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->cap_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_JOIN_STYLE) {
        /* xcb_change_gc_value_list_t.join_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->join_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_STYLE) {
        /* xcb_change_gc_value_list_t.fill_style */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->fill_style;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_RULE) {
        /* xcb_change_gc_value_list_t.fill_rule */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->fill_rule;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_TILE) {
        /* xcb_change_gc_value_list_t.tile */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_STIPPLE) {
        /* xcb_change_gc_value_list_t.stipple */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->stipple;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_X) {
        /* xcb_change_gc_value_list_t.tile_stipple_x_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile_stipple_x_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_Y) {
        /* xcb_change_gc_value_list_t.tile_stipple_y_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->tile_stipple_y_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_FONT) {
        /* xcb_change_gc_value_list_t.font */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->font;
        xcb_block_len += sizeof(xcb_font_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_font_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_font_t);
    }
    if(value_mask & XCB_GC_SUBWINDOW_MODE) {
        /* xcb_change_gc_value_list_t.subwindow_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->subwindow_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_GRAPHICS_EXPOSURES) {
        /* xcb_change_gc_value_list_t.graphics_exposures */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->graphics_exposures;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_bool32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_X) {
        /* xcb_change_gc_value_list_t.clip_x_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_x_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_Y) {
        /* xcb_change_gc_value_list_t.clip_y_origin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_y_origin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_MASK) {
        /* xcb_change_gc_value_list_t.clip_mask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clip_mask;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_DASH_OFFSET) {
        /* xcb_change_gc_value_list_t.dash_offset */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dash_offset;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_DASH_LIST) {
        /* xcb_change_gc_value_list_t.dashes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dashes;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_ARC_MODE) {
        /* xcb_change_gc_value_list_t.arc_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->arc_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_change_gc_value_list_unpack (const void                  *_buffer,
                                 uint32_t                     value_mask,
                                 xcb_change_gc_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_GC_FUNCTION) {
        /* xcb_change_gc_value_list_t.function */
        _aux->function = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_PLANE_MASK) {
        /* xcb_change_gc_value_list_t.plane_mask */
        _aux->plane_mask = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FOREGROUND) {
        /* xcb_change_gc_value_list_t.foreground */
        _aux->foreground = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_BACKGROUND) {
        /* xcb_change_gc_value_list_t.background */
        _aux->background = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_WIDTH) {
        /* xcb_change_gc_value_list_t.line_width */
        _aux->line_width = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_LINE_STYLE) {
        /* xcb_change_gc_value_list_t.line_style */
        _aux->line_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_CAP_STYLE) {
        /* xcb_change_gc_value_list_t.cap_style */
        _aux->cap_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_JOIN_STYLE) {
        /* xcb_change_gc_value_list_t.join_style */
        _aux->join_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_STYLE) {
        /* xcb_change_gc_value_list_t.fill_style */
        _aux->fill_style = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_FILL_RULE) {
        /* xcb_change_gc_value_list_t.fill_rule */
        _aux->fill_rule = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_TILE) {
        /* xcb_change_gc_value_list_t.tile */
        _aux->tile = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_STIPPLE) {
        /* xcb_change_gc_value_list_t.stipple */
        _aux->stipple = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_X) {
        /* xcb_change_gc_value_list_t.tile_stipple_x_origin */
        _aux->tile_stipple_x_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_TILE_STIPPLE_ORIGIN_Y) {
        /* xcb_change_gc_value_list_t.tile_stipple_y_origin */
        _aux->tile_stipple_y_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_FONT) {
        /* xcb_change_gc_value_list_t.font */
        _aux->font = *(xcb_font_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_font_t);
        xcb_tmp += sizeof(xcb_font_t);
        xcb_align_to = ALIGNOF(xcb_font_t);
    }
    if(value_mask & XCB_GC_SUBWINDOW_MODE) {
        /* xcb_change_gc_value_list_t.subwindow_mode */
        _aux->subwindow_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_GRAPHICS_EXPOSURES) {
        /* xcb_change_gc_value_list_t.graphics_exposures */
        _aux->graphics_exposures = *(xcb_bool32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_bool32_t);
        xcb_tmp += sizeof(xcb_bool32_t);
        xcb_align_to = ALIGNOF(xcb_bool32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_X) {
        /* xcb_change_gc_value_list_t.clip_x_origin */
        _aux->clip_x_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_ORIGIN_Y) {
        /* xcb_change_gc_value_list_t.clip_y_origin */
        _aux->clip_y_origin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_GC_CLIP_MASK) {
        /* xcb_change_gc_value_list_t.clip_mask */
        _aux->clip_mask = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_GC_DASH_OFFSET) {
        /* xcb_change_gc_value_list_t.dash_offset */
        _aux->dash_offset = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_DASH_LIST) {
        /* xcb_change_gc_value_list_t.dashes */
        _aux->dashes = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_GC_ARC_MODE) {
        /* xcb_change_gc_value_list_t.arc_mode */
        _aux->arc_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_change_gc_value_list_sizeof (const void  *_buffer,
                                 uint32_t     value_mask)
{
    xcb_change_gc_value_list_t _aux;
    return xcb_change_gc_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_change_gc_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_gc_request_t *_aux = (xcb_change_gc_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_gc_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_change_gc_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_gc_checked (xcb_connection_t *c,
                       xcb_gcontext_t    gc,
                       uint32_t          value_mask,
                       const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_gc_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_gc_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_gc (xcb_connection_t *c,
               xcb_gcontext_t    gc,
               uint32_t          value_mask,
               const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_gc_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_gc_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_gc_aux_checked (xcb_connection_t                 *c,
                           xcb_gcontext_t                    gc,
                           uint32_t                          value_mask,
                           const xcb_change_gc_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_gc_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_gc_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_gc_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_gc_aux (xcb_connection_t                 *c,
                   xcb_gcontext_t                    gc,
                   uint32_t                          value_mask,
                   const xcb_change_gc_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_gc_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_gc_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_gc_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_change_gc_value_list (const xcb_change_gc_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_copy_gc_checked (xcb_connection_t *c,
                     xcb_gcontext_t    src_gc,
                     xcb_gcontext_t    dst_gc,
                     uint32_t          value_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_gc = src_gc;
    xcb_out.dst_gc = dst_gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_gc (xcb_connection_t *c,
             xcb_gcontext_t    src_gc,
             xcb_gcontext_t    dst_gc,
             uint32_t          value_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_gc = src_gc;
    xcb_out.dst_gc = dst_gc;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_set_dashes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_set_dashes_request_t *_aux = (xcb_set_dashes_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_set_dashes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* dashes */
    xcb_block_len += _aux->dashes_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_set_dashes_checked (xcb_connection_t *c,
                        xcb_gcontext_t    gc,
                        uint16_t          dash_offset,
                        uint16_t          dashes_len,
                        const uint8_t    *dashes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_DASHES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_dashes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.dash_offset = dash_offset;
    xcb_out.dashes_len = dashes_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t dashes */
    xcb_parts[4].iov_base = (char *) dashes;
    xcb_parts[4].iov_len = dashes_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_dashes (xcb_connection_t *c,
                xcb_gcontext_t    gc,
                uint16_t          dash_offset,
                uint16_t          dashes_len,
                const uint8_t    *dashes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_DASHES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_dashes_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;
    xcb_out.dash_offset = dash_offset;
    xcb_out.dashes_len = dashes_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t dashes */
    xcb_parts[4].iov_base = (char *) dashes;
    xcb_parts[4].iov_len = dashes_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_set_dashes_dashes (const xcb_set_dashes_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_set_dashes_dashes_length (const xcb_set_dashes_request_t *R)
{
    return R->dashes_len;
}

xcb_generic_iterator_t
xcb_set_dashes_dashes_end (const xcb_set_dashes_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->dashes_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_set_clip_rectangles_sizeof (const void  *_buffer,
                                uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_set_clip_rectangles_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_set_clip_rectangles_checked (xcb_connection_t      *c,
                                 uint8_t                ordering,
                                 xcb_gcontext_t         gc,
                                 int16_t                clip_x_origin,
                                 int16_t                clip_y_origin,
                                 uint32_t               rectangles_len,
                                 const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_CLIP_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_clip_rectangles_request_t xcb_out;

    xcb_out.ordering = ordering;
    xcb_out.gc = gc;
    xcb_out.clip_x_origin = clip_x_origin;
    xcb_out.clip_y_origin = clip_y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_clip_rectangles (xcb_connection_t      *c,
                         uint8_t                ordering,
                         xcb_gcontext_t         gc,
                         int16_t                clip_x_origin,
                         int16_t                clip_y_origin,
                         uint32_t               rectangles_len,
                         const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_CLIP_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_set_clip_rectangles_request_t xcb_out;

    xcb_out.ordering = ordering;
    xcb_out.gc = gc;
    xcb_out.clip_x_origin = clip_x_origin;
    xcb_out.clip_y_origin = clip_y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_set_clip_rectangles_rectangles (const xcb_set_clip_rectangles_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_set_clip_rectangles_rectangles_length (const xcb_set_clip_rectangles_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_set_clip_rectangles_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_set_clip_rectangles_rectangles_iterator (const xcb_set_clip_rectangles_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_set_clip_rectangles_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_free_gc_checked (xcb_connection_t *c,
                     xcb_gcontext_t    gc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_gc (xcb_connection_t *c,
             xcb_gcontext_t    gc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_gc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_clear_area_checked (xcb_connection_t *c,
                        uint8_t           exposures,
                        xcb_window_t      window,
                        int16_t           x,
                        int16_t           y,
                        uint16_t          width,
                        uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CLEAR_AREA,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_clear_area_request_t xcb_out;

    xcb_out.exposures = exposures;
    xcb_out.window = window;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_clear_area (xcb_connection_t *c,
                uint8_t           exposures,
                xcb_window_t      window,
                int16_t           x,
                int16_t           y,
                uint16_t          width,
                uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CLEAR_AREA,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_clear_area_request_t xcb_out;

    xcb_out.exposures = exposures;
    xcb_out.window = window;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_area_checked (xcb_connection_t *c,
                       xcb_drawable_t    src_drawable,
                       xcb_drawable_t    dst_drawable,
                       xcb_gcontext_t    gc,
                       int16_t           src_x,
                       int16_t           src_y,
                       int16_t           dst_x,
                       int16_t           dst_y,
                       uint16_t          width,
                       uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_AREA,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_area_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_drawable = src_drawable;
    xcb_out.dst_drawable = dst_drawable;
    xcb_out.gc = gc;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_area (xcb_connection_t *c,
               xcb_drawable_t    src_drawable,
               xcb_drawable_t    dst_drawable,
               xcb_gcontext_t    gc,
               int16_t           src_x,
               int16_t           src_y,
               int16_t           dst_x,
               int16_t           dst_y,
               uint16_t          width,
               uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_AREA,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_area_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_drawable = src_drawable;
    xcb_out.dst_drawable = dst_drawable;
    xcb_out.gc = gc;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_plane_checked (xcb_connection_t *c,
                        xcb_drawable_t    src_drawable,
                        xcb_drawable_t    dst_drawable,
                        xcb_gcontext_t    gc,
                        int16_t           src_x,
                        int16_t           src_y,
                        int16_t           dst_x,
                        int16_t           dst_y,
                        uint16_t          width,
                        uint16_t          height,
                        uint32_t          bit_plane)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_PLANE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_plane_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_drawable = src_drawable;
    xcb_out.dst_drawable = dst_drawable;
    xcb_out.gc = gc;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.bit_plane = bit_plane;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_plane (xcb_connection_t *c,
                xcb_drawable_t    src_drawable,
                xcb_drawable_t    dst_drawable,
                xcb_gcontext_t    gc,
                int16_t           src_x,
                int16_t           src_y,
                int16_t           dst_x,
                int16_t           dst_y,
                uint16_t          width,
                uint16_t          height,
                uint32_t          bit_plane)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_PLANE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_plane_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.src_drawable = src_drawable;
    xcb_out.dst_drawable = dst_drawable;
    xcb_out.gc = gc;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.bit_plane = bit_plane;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_poly_point_sizeof (const void  *_buffer,
                       uint32_t     points_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_point_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += points_len * sizeof(xcb_point_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_point_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_point_checked (xcb_connection_t  *c,
                        uint8_t            coordinate_mode,
                        xcb_drawable_t     drawable,
                        xcb_gcontext_t     gc,
                        uint32_t           points_len,
                        const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_POINT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_point_request_t xcb_out;

    xcb_out.coordinate_mode = coordinate_mode;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_point (xcb_connection_t  *c,
                uint8_t            coordinate_mode,
                xcb_drawable_t     drawable,
                xcb_gcontext_t     gc,
                uint32_t           points_len,
                const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_POINT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_point_request_t xcb_out;

    xcb_out.coordinate_mode = coordinate_mode;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_point_t *
xcb_poly_point_points (const xcb_poly_point_request_t *R)
{
    return (xcb_point_t *) (R + 1);
}

int
xcb_poly_point_points_length (const xcb_poly_point_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_point_request_t))/sizeof(xcb_point_t));
}

xcb_point_iterator_t
xcb_poly_point_points_iterator (const xcb_poly_point_request_t *R)
{
    xcb_point_iterator_t i;
    i.data = (xcb_point_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_point_request_t))/sizeof(xcb_point_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_line_sizeof (const void  *_buffer,
                      uint32_t     points_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_line_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += points_len * sizeof(xcb_point_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_point_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_line_checked (xcb_connection_t  *c,
                       uint8_t            coordinate_mode,
                       xcb_drawable_t     drawable,
                       xcb_gcontext_t     gc,
                       uint32_t           points_len,
                       const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_LINE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_line_request_t xcb_out;

    xcb_out.coordinate_mode = coordinate_mode;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_line (xcb_connection_t  *c,
               uint8_t            coordinate_mode,
               xcb_drawable_t     drawable,
               xcb_gcontext_t     gc,
               uint32_t           points_len,
               const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_LINE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_line_request_t xcb_out;

    xcb_out.coordinate_mode = coordinate_mode;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_point_t *
xcb_poly_line_points (const xcb_poly_line_request_t *R)
{
    return (xcb_point_t *) (R + 1);
}

int
xcb_poly_line_points_length (const xcb_poly_line_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_line_request_t))/sizeof(xcb_point_t));
}

xcb_point_iterator_t
xcb_poly_line_points_iterator (const xcb_poly_line_request_t *R)
{
    xcb_point_iterator_t i;
    i.data = (xcb_point_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_line_request_t))/sizeof(xcb_point_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_segment_next (xcb_segment_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_segment_t);
}

xcb_generic_iterator_t
xcb_segment_end (xcb_segment_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_poly_segment_sizeof (const void  *_buffer,
                         uint32_t     segments_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_segment_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* segments */
    xcb_block_len += segments_len * sizeof(xcb_segment_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_segment_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_segment_checked (xcb_connection_t    *c,
                          xcb_drawable_t       drawable,
                          xcb_gcontext_t       gc,
                          uint32_t             segments_len,
                          const xcb_segment_t *segments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_SEGMENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_segment_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_segment_t segments */
    xcb_parts[4].iov_base = (char *) segments;
    xcb_parts[4].iov_len = segments_len * sizeof(xcb_segment_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_segment (xcb_connection_t    *c,
                  xcb_drawable_t       drawable,
                  xcb_gcontext_t       gc,
                  uint32_t             segments_len,
                  const xcb_segment_t *segments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_SEGMENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_segment_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_segment_t segments */
    xcb_parts[4].iov_base = (char *) segments;
    xcb_parts[4].iov_len = segments_len * sizeof(xcb_segment_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_segment_t *
xcb_poly_segment_segments (const xcb_poly_segment_request_t *R)
{
    return (xcb_segment_t *) (R + 1);
}

int
xcb_poly_segment_segments_length (const xcb_poly_segment_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_segment_request_t))/sizeof(xcb_segment_t));
}

xcb_segment_iterator_t
xcb_poly_segment_segments_iterator (const xcb_poly_segment_request_t *R)
{
    xcb_segment_iterator_t i;
    i.data = (xcb_segment_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_segment_request_t))/sizeof(xcb_segment_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_rectangle_sizeof (const void  *_buffer,
                           uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_rectangle_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_rectangle_checked (xcb_connection_t      *c,
                            xcb_drawable_t         drawable,
                            xcb_gcontext_t         gc,
                            uint32_t               rectangles_len,
                            const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_RECTANGLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_rectangle_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_rectangle (xcb_connection_t      *c,
                    xcb_drawable_t         drawable,
                    xcb_gcontext_t         gc,
                    uint32_t               rectangles_len,
                    const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_RECTANGLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_rectangle_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_poly_rectangle_rectangles (const xcb_poly_rectangle_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_poly_rectangle_rectangles_length (const xcb_poly_rectangle_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_rectangle_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_poly_rectangle_rectangles_iterator (const xcb_poly_rectangle_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_rectangle_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_arc_sizeof (const void  *_buffer,
                     uint32_t     arcs_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_arc_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* arcs */
    xcb_block_len += arcs_len * sizeof(xcb_arc_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_arc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_arc_checked (xcb_connection_t *c,
                      xcb_drawable_t    drawable,
                      xcb_gcontext_t    gc,
                      uint32_t          arcs_len,
                      const xcb_arc_t  *arcs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_ARC,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_arc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_arc_t arcs */
    xcb_parts[4].iov_base = (char *) arcs;
    xcb_parts[4].iov_len = arcs_len * sizeof(xcb_arc_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_arc (xcb_connection_t *c,
              xcb_drawable_t    drawable,
              xcb_gcontext_t    gc,
              uint32_t          arcs_len,
              const xcb_arc_t  *arcs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_ARC,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_arc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_arc_t arcs */
    xcb_parts[4].iov_base = (char *) arcs;
    xcb_parts[4].iov_len = arcs_len * sizeof(xcb_arc_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_arc_t *
xcb_poly_arc_arcs (const xcb_poly_arc_request_t *R)
{
    return (xcb_arc_t *) (R + 1);
}

int
xcb_poly_arc_arcs_length (const xcb_poly_arc_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_arc_request_t))/sizeof(xcb_arc_t));
}

xcb_arc_iterator_t
xcb_poly_arc_arcs_iterator (const xcb_poly_arc_request_t *R)
{
    xcb_arc_iterator_t i;
    i.data = (xcb_arc_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_arc_request_t))/sizeof(xcb_arc_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_fill_poly_sizeof (const void  *_buffer,
                      uint32_t     points_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_fill_poly_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += points_len * sizeof(xcb_point_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_point_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_fill_poly_checked (xcb_connection_t  *c,
                       xcb_drawable_t     drawable,
                       xcb_gcontext_t     gc,
                       uint8_t            shape,
                       uint8_t            coordinate_mode,
                       uint32_t           points_len,
                       const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_FILL_POLY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_fill_poly_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.shape = shape;
    xcb_out.coordinate_mode = coordinate_mode;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_fill_poly (xcb_connection_t  *c,
               xcb_drawable_t     drawable,
               xcb_gcontext_t     gc,
               uint8_t            shape,
               uint8_t            coordinate_mode,
               uint32_t           points_len,
               const xcb_point_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_FILL_POLY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_fill_poly_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.shape = shape;
    xcb_out.coordinate_mode = coordinate_mode;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_point_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_point_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_point_t *
xcb_fill_poly_points (const xcb_fill_poly_request_t *R)
{
    return (xcb_point_t *) (R + 1);
}

int
xcb_fill_poly_points_length (const xcb_fill_poly_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_fill_poly_request_t))/sizeof(xcb_point_t));
}

xcb_point_iterator_t
xcb_fill_poly_points_iterator (const xcb_fill_poly_request_t *R)
{
    xcb_point_iterator_t i;
    i.data = (xcb_point_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_fill_poly_request_t))/sizeof(xcb_point_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_fill_rectangle_sizeof (const void  *_buffer,
                                uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_fill_rectangle_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_fill_rectangle_checked (xcb_connection_t      *c,
                                 xcb_drawable_t         drawable,
                                 xcb_gcontext_t         gc,
                                 uint32_t               rectangles_len,
                                 const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_FILL_RECTANGLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_fill_rectangle_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_fill_rectangle (xcb_connection_t      *c,
                         xcb_drawable_t         drawable,
                         xcb_gcontext_t         gc,
                         uint32_t               rectangles_len,
                         const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_FILL_RECTANGLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_fill_rectangle_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_poly_fill_rectangle_rectangles (const xcb_poly_fill_rectangle_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_poly_fill_rectangle_rectangles_length (const xcb_poly_fill_rectangle_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_fill_rectangle_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_poly_fill_rectangle_rectangles_iterator (const xcb_poly_fill_rectangle_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_fill_rectangle_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_fill_arc_sizeof (const void  *_buffer,
                          uint32_t     arcs_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_fill_arc_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* arcs */
    xcb_block_len += arcs_len * sizeof(xcb_arc_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_arc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_fill_arc_checked (xcb_connection_t *c,
                           xcb_drawable_t    drawable,
                           xcb_gcontext_t    gc,
                           uint32_t          arcs_len,
                           const xcb_arc_t  *arcs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_FILL_ARC,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_fill_arc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_arc_t arcs */
    xcb_parts[4].iov_base = (char *) arcs;
    xcb_parts[4].iov_len = arcs_len * sizeof(xcb_arc_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_fill_arc (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   xcb_gcontext_t    gc,
                   uint32_t          arcs_len,
                   const xcb_arc_t  *arcs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_FILL_ARC,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_fill_arc_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_arc_t arcs */
    xcb_parts[4].iov_base = (char *) arcs;
    xcb_parts[4].iov_len = arcs_len * sizeof(xcb_arc_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_arc_t *
xcb_poly_fill_arc_arcs (const xcb_poly_fill_arc_request_t *R)
{
    return (xcb_arc_t *) (R + 1);
}

int
xcb_poly_fill_arc_arcs_length (const xcb_poly_fill_arc_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_fill_arc_request_t))/sizeof(xcb_arc_t));
}

xcb_arc_iterator_t
xcb_poly_fill_arc_arcs_iterator (const xcb_poly_fill_arc_request_t *R)
{
    xcb_arc_iterator_t i;
    i.data = (xcb_arc_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_poly_fill_arc_request_t))/sizeof(xcb_arc_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_put_image_sizeof (const void  *_buffer,
                      uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_put_image_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_put_image_checked (xcb_connection_t *c,
                       uint8_t           format,
                       xcb_drawable_t    drawable,
                       xcb_gcontext_t    gc,
                       uint16_t          width,
                       uint16_t          height,
                       int16_t           dst_x,
                       int16_t           dst_y,
                       uint8_t           left_pad,
                       uint8_t           depth,
                       uint32_t          data_len,
                       const uint8_t    *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_put_image_request_t xcb_out;

    xcb_out.format = format;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.left_pad = left_pad;
    xcb_out.depth = depth;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_put_image (xcb_connection_t *c,
               uint8_t           format,
               xcb_drawable_t    drawable,
               xcb_gcontext_t    gc,
               uint16_t          width,
               uint16_t          height,
               int16_t           dst_x,
               int16_t           dst_y,
               uint8_t           left_pad,
               uint8_t           depth,
               uint32_t          data_len,
               const uint8_t    *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_PUT_IMAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_put_image_request_t xcb_out;

    xcb_out.format = format;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.left_pad = left_pad;
    xcb_out.depth = depth;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_put_image_data (const xcb_put_image_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_put_image_data_length (const xcb_put_image_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_put_image_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_put_image_data_end (const xcb_put_image_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_put_image_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_get_image_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_image_reply_t *_aux = (xcb_get_image_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_image_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_image_cookie_t
xcb_get_image (xcb_connection_t *c,
               uint8_t           format,
               xcb_drawable_t    drawable,
               int16_t           x,
               int16_t           y,
               uint16_t          width,
               uint16_t          height,
               uint32_t          plane_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_image_cookie_t xcb_ret;
    xcb_get_image_request_t xcb_out;

    xcb_out.format = format;
    xcb_out.drawable = drawable;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.plane_mask = plane_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_image_cookie_t
xcb_get_image_unchecked (xcb_connection_t *c,
                         uint8_t           format,
                         xcb_drawable_t    drawable,
                         int16_t           x,
                         int16_t           y,
                         uint16_t          width,
                         uint16_t          height,
                         uint32_t          plane_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_image_cookie_t xcb_ret;
    xcb_get_image_request_t xcb_out;

    xcb_out.format = format;
    xcb_out.drawable = drawable;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.plane_mask = plane_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_get_image_data (const xcb_get_image_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_get_image_data_length (const xcb_get_image_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_get_image_data_end (const xcb_get_image_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_image_reply_t *
xcb_get_image_reply (xcb_connection_t        *c,
                     xcb_get_image_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e)
{
    return (xcb_get_image_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_poly_text_8_sizeof (const void  *_buffer,
                        uint32_t     items_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_text_8_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += items_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_text_8_checked (xcb_connection_t *c,
                         xcb_drawable_t    drawable,
                         xcb_gcontext_t    gc,
                         int16_t           x,
                         int16_t           y,
                         uint32_t          items_len,
                         const uint8_t    *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_TEXT_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_text_8_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_text_8 (xcb_connection_t *c,
                 xcb_drawable_t    drawable,
                 xcb_gcontext_t    gc,
                 int16_t           x,
                 int16_t           y,
                 uint32_t          items_len,
                 const uint8_t    *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_TEXT_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_text_8_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_poly_text_8_items (const xcb_poly_text_8_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_poly_text_8_items_length (const xcb_poly_text_8_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_text_8_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_poly_text_8_items_end (const xcb_poly_text_8_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_poly_text_8_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_poly_text_16_sizeof (const void  *_buffer,
                         uint32_t     items_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_poly_text_16_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += items_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_poly_text_16_checked (xcb_connection_t *c,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           x,
                          int16_t           y,
                          uint32_t          items_len,
                          const uint8_t    *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_TEXT_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_text_16_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_poly_text_16 (xcb_connection_t *c,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           x,
                  int16_t           y,
                  uint32_t          items_len,
                  const uint8_t    *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_POLY_TEXT_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_poly_text_16_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_poly_text_16_items (const xcb_poly_text_16_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_poly_text_16_items_length (const xcb_poly_text_16_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_poly_text_16_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_poly_text_16_items_end (const xcb_poly_text_16_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_poly_text_16_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_image_text_8_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_image_text_8_request_t *_aux = (xcb_image_text_8_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_image_text_8_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->string_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_image_text_8_checked (xcb_connection_t *c,
                          uint8_t           string_len,
                          xcb_drawable_t    drawable,
                          xcb_gcontext_t    gc,
                          int16_t           x,
                          int16_t           y,
                          const char       *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_IMAGE_TEXT_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_image_text_8_request_t xcb_out;

    xcb_out.string_len = string_len;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_image_text_8 (xcb_connection_t *c,
                  uint8_t           string_len,
                  xcb_drawable_t    drawable,
                  xcb_gcontext_t    gc,
                  int16_t           x,
                  int16_t           y,
                  const char       *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_IMAGE_TEXT_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_image_text_8_request_t xcb_out;

    xcb_out.string_len = string_len;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_image_text_8_string (const xcb_image_text_8_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_image_text_8_string_length (const xcb_image_text_8_request_t *R)
{
    return R->string_len;
}

xcb_generic_iterator_t
xcb_image_text_8_string_end (const xcb_image_text_8_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->string_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_image_text_16_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_image_text_16_request_t *_aux = (xcb_image_text_16_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_image_text_16_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->string_len * sizeof(xcb_char2b_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_char2b_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_image_text_16_checked (xcb_connection_t   *c,
                           uint8_t             string_len,
                           xcb_drawable_t      drawable,
                           xcb_gcontext_t      gc,
                           int16_t             x,
                           int16_t             y,
                           const xcb_char2b_t *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_IMAGE_TEXT_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_image_text_16_request_t xcb_out;

    xcb_out.string_len = string_len;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_char2b_t string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(xcb_char2b_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_image_text_16 (xcb_connection_t   *c,
                   uint8_t             string_len,
                   xcb_drawable_t      drawable,
                   xcb_gcontext_t      gc,
                   int16_t             x,
                   int16_t             y,
                   const xcb_char2b_t *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_IMAGE_TEXT_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_image_text_16_request_t xcb_out;

    xcb_out.string_len = string_len;
    xcb_out.drawable = drawable;
    xcb_out.gc = gc;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_char2b_t string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(xcb_char2b_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_char2b_t *
xcb_image_text_16_string (const xcb_image_text_16_request_t *R)
{
    return (xcb_char2b_t *) (R + 1);
}

int
xcb_image_text_16_string_length (const xcb_image_text_16_request_t *R)
{
    return R->string_len;
}

xcb_char2b_iterator_t
xcb_image_text_16_string_iterator (const xcb_image_text_16_request_t *R)
{
    xcb_char2b_iterator_t i;
    i.data = (xcb_char2b_t *) (R + 1);
    i.rem = R->string_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_create_colormap_checked (xcb_connection_t *c,
                             uint8_t           alloc,
                             xcb_colormap_t    mid,
                             xcb_window_t      window,
                             xcb_visualid_t    visual)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_colormap_request_t xcb_out;

    xcb_out.alloc = alloc;
    xcb_out.mid = mid;
    xcb_out.window = window;
    xcb_out.visual = visual;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_colormap (xcb_connection_t *c,
                     uint8_t           alloc,
                     xcb_colormap_t    mid,
                     xcb_window_t      window,
                     xcb_visualid_t    visual)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_colormap_request_t xcb_out;

    xcb_out.alloc = alloc;
    xcb_out.mid = mid;
    xcb_out.window = window;
    xcb_out.visual = visual;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_colormap_checked (xcb_connection_t *c,
                           xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_colormap (xcb_connection_t *c,
                   xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_colormap_and_free_checked (xcb_connection_t *c,
                                    xcb_colormap_t    mid,
                                    xcb_colormap_t    src_cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_COLORMAP_AND_FREE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_colormap_and_free_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.mid = mid;
    xcb_out.src_cmap = src_cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_copy_colormap_and_free (xcb_connection_t *c,
                            xcb_colormap_t    mid,
                            xcb_colormap_t    src_cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_COPY_COLORMAP_AND_FREE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_copy_colormap_and_free_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.mid = mid;
    xcb_out.src_cmap = src_cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_install_colormap_checked (xcb_connection_t *c,
                              xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_INSTALL_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_install_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_install_colormap (xcb_connection_t *c,
                      xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_INSTALL_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_install_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_uninstall_colormap_checked (xcb_connection_t *c,
                                xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNINSTALL_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_uninstall_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_uninstall_colormap (xcb_connection_t *c,
                        xcb_colormap_t    cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_UNINSTALL_COLORMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_uninstall_colormap_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_list_installed_colormaps_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_installed_colormaps_reply_t *_aux = (xcb_list_installed_colormaps_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_list_installed_colormaps_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* cmaps */
    xcb_block_len += _aux->cmaps_len * sizeof(xcb_colormap_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_colormap_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_installed_colormaps_cookie_t
xcb_list_installed_colormaps (xcb_connection_t *c,
                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_INSTALLED_COLORMAPS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_installed_colormaps_cookie_t xcb_ret;
    xcb_list_installed_colormaps_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_installed_colormaps_cookie_t
xcb_list_installed_colormaps_unchecked (xcb_connection_t *c,
                                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_INSTALLED_COLORMAPS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_installed_colormaps_cookie_t xcb_ret;
    xcb_list_installed_colormaps_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_colormap_t *
xcb_list_installed_colormaps_cmaps (const xcb_list_installed_colormaps_reply_t *R)
{
    return (xcb_colormap_t *) (R + 1);
}

int
xcb_list_installed_colormaps_cmaps_length (const xcb_list_installed_colormaps_reply_t *R)
{
    return R->cmaps_len;
}

xcb_generic_iterator_t
xcb_list_installed_colormaps_cmaps_end (const xcb_list_installed_colormaps_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_colormap_t *) (R + 1)) + (R->cmaps_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_installed_colormaps_reply_t *
xcb_list_installed_colormaps_reply (xcb_connection_t                       *c,
                                    xcb_list_installed_colormaps_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_list_installed_colormaps_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_alloc_color_cookie_t
xcb_alloc_color (xcb_connection_t *c,
                 xcb_colormap_t    cmap,
                 uint16_t          red,
                 uint16_t          green,
                 uint16_t          blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_cookie_t xcb_ret;
    xcb_alloc_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.red = red;
    xcb_out.green = green;
    xcb_out.blue = blue;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_color_cookie_t
xcb_alloc_color_unchecked (xcb_connection_t *c,
                           xcb_colormap_t    cmap,
                           uint16_t          red,
                           uint16_t          green,
                           uint16_t          blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_cookie_t xcb_ret;
    xcb_alloc_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.red = red;
    xcb_out.green = green;
    xcb_out.blue = blue;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_color_reply_t *
xcb_alloc_color_reply (xcb_connection_t          *c,
                       xcb_alloc_color_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e)
{
    return (xcb_alloc_color_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_alloc_named_color_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_alloc_named_color_request_t *_aux = (xcb_alloc_named_color_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_alloc_named_color_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_alloc_named_color_cookie_t
xcb_alloc_named_color (xcb_connection_t *c,
                       xcb_colormap_t    cmap,
                       uint16_t          name_len,
                       const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_ALLOC_NAMED_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_alloc_named_color_cookie_t xcb_ret;
    xcb_alloc_named_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_named_color_cookie_t
xcb_alloc_named_color_unchecked (xcb_connection_t *c,
                                 xcb_colormap_t    cmap,
                                 uint16_t          name_len,
                                 const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_ALLOC_NAMED_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_alloc_named_color_cookie_t xcb_ret;
    xcb_alloc_named_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_named_color_reply_t *
xcb_alloc_named_color_reply (xcb_connection_t                *c,
                             xcb_alloc_named_color_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_alloc_named_color_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_alloc_color_cells_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_alloc_color_cells_reply_t *_aux = (xcb_alloc_color_cells_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_alloc_color_cells_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pixels */
    xcb_block_len += _aux->pixels_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* masks */
    xcb_block_len += _aux->masks_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_alloc_color_cells_cookie_t
xcb_alloc_color_cells (xcb_connection_t *c,
                       uint8_t           contiguous,
                       xcb_colormap_t    cmap,
                       uint16_t          colors,
                       uint16_t          planes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR_CELLS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_cells_cookie_t xcb_ret;
    xcb_alloc_color_cells_request_t xcb_out;

    xcb_out.contiguous = contiguous;
    xcb_out.cmap = cmap;
    xcb_out.colors = colors;
    xcb_out.planes = planes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_color_cells_cookie_t
xcb_alloc_color_cells_unchecked (xcb_connection_t *c,
                                 uint8_t           contiguous,
                                 xcb_colormap_t    cmap,
                                 uint16_t          colors,
                                 uint16_t          planes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR_CELLS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_cells_cookie_t xcb_ret;
    xcb_alloc_color_cells_request_t xcb_out;

    xcb_out.contiguous = contiguous;
    xcb_out.cmap = cmap;
    xcb_out.colors = colors;
    xcb_out.planes = planes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_alloc_color_cells_pixels (const xcb_alloc_color_cells_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_alloc_color_cells_pixels_length (const xcb_alloc_color_cells_reply_t *R)
{
    return R->pixels_len;
}

xcb_generic_iterator_t
xcb_alloc_color_cells_pixels_end (const xcb_alloc_color_cells_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->pixels_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_alloc_color_cells_masks (const xcb_alloc_color_cells_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_alloc_color_cells_pixels_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_alloc_color_cells_masks_length (const xcb_alloc_color_cells_reply_t *R)
{
    return R->masks_len;
}

xcb_generic_iterator_t
xcb_alloc_color_cells_masks_end (const xcb_alloc_color_cells_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_alloc_color_cells_pixels_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->masks_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_alloc_color_cells_reply_t *
xcb_alloc_color_cells_reply (xcb_connection_t                *c,
                             xcb_alloc_color_cells_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_alloc_color_cells_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_alloc_color_planes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_alloc_color_planes_reply_t *_aux = (xcb_alloc_color_planes_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_alloc_color_planes_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pixels */
    xcb_block_len += _aux->pixels_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_alloc_color_planes_cookie_t
xcb_alloc_color_planes (xcb_connection_t *c,
                        uint8_t           contiguous,
                        xcb_colormap_t    cmap,
                        uint16_t          colors,
                        uint16_t          reds,
                        uint16_t          greens,
                        uint16_t          blues)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR_PLANES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_planes_cookie_t xcb_ret;
    xcb_alloc_color_planes_request_t xcb_out;

    xcb_out.contiguous = contiguous;
    xcb_out.cmap = cmap;
    xcb_out.colors = colors;
    xcb_out.reds = reds;
    xcb_out.greens = greens;
    xcb_out.blues = blues;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_alloc_color_planes_cookie_t
xcb_alloc_color_planes_unchecked (xcb_connection_t *c,
                                  uint8_t           contiguous,
                                  xcb_colormap_t    cmap,
                                  uint16_t          colors,
                                  uint16_t          reds,
                                  uint16_t          greens,
                                  uint16_t          blues)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_ALLOC_COLOR_PLANES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_alloc_color_planes_cookie_t xcb_ret;
    xcb_alloc_color_planes_request_t xcb_out;

    xcb_out.contiguous = contiguous;
    xcb_out.cmap = cmap;
    xcb_out.colors = colors;
    xcb_out.reds = reds;
    xcb_out.greens = greens;
    xcb_out.blues = blues;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_alloc_color_planes_pixels (const xcb_alloc_color_planes_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_alloc_color_planes_pixels_length (const xcb_alloc_color_planes_reply_t *R)
{
    return R->pixels_len;
}

xcb_generic_iterator_t
xcb_alloc_color_planes_pixels_end (const xcb_alloc_color_planes_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->pixels_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_alloc_color_planes_reply_t *
xcb_alloc_color_planes_reply (xcb_connection_t                 *c,
                              xcb_alloc_color_planes_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_alloc_color_planes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_free_colors_sizeof (const void  *_buffer,
                        uint32_t     pixels_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_free_colors_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pixels */
    xcb_block_len += pixels_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_free_colors_checked (xcb_connection_t *c,
                         xcb_colormap_t    cmap,
                         uint32_t          plane_mask,
                         uint32_t          pixels_len,
                         const uint32_t   *pixels)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_FREE_COLORS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_free_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.plane_mask = plane_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t pixels */
    xcb_parts[4].iov_base = (char *) pixels;
    xcb_parts[4].iov_len = pixels_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_colors (xcb_connection_t *c,
                 xcb_colormap_t    cmap,
                 uint32_t          plane_mask,
                 uint32_t          pixels_len,
                 const uint32_t   *pixels)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_FREE_COLORS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_free_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.plane_mask = plane_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t pixels */
    xcb_parts[4].iov_base = (char *) pixels;
    xcb_parts[4].iov_len = pixels_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_free_colors_pixels (const xcb_free_colors_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_free_colors_pixels_length (const xcb_free_colors_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_free_colors_request_t))/sizeof(uint32_t));
}

xcb_generic_iterator_t
xcb_free_colors_pixels_end (const xcb_free_colors_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_free_colors_request_t))/sizeof(uint32_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_coloritem_next (xcb_coloritem_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_coloritem_t);
}

xcb_generic_iterator_t
xcb_coloritem_end (xcb_coloritem_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_store_colors_sizeof (const void  *_buffer,
                         uint32_t     items_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_store_colors_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* items */
    xcb_block_len += items_len * sizeof(xcb_coloritem_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_coloritem_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_store_colors_checked (xcb_connection_t      *c,
                          xcb_colormap_t         cmap,
                          uint32_t               items_len,
                          const xcb_coloritem_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_STORE_COLORS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_store_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_coloritem_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(xcb_coloritem_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_store_colors (xcb_connection_t      *c,
                  xcb_colormap_t         cmap,
                  uint32_t               items_len,
                  const xcb_coloritem_t *items)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_STORE_COLORS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_store_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_coloritem_t items */
    xcb_parts[4].iov_base = (char *) items;
    xcb_parts[4].iov_len = items_len * sizeof(xcb_coloritem_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_coloritem_t *
xcb_store_colors_items (const xcb_store_colors_request_t *R)
{
    return (xcb_coloritem_t *) (R + 1);
}

int
xcb_store_colors_items_length (const xcb_store_colors_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_store_colors_request_t))/sizeof(xcb_coloritem_t));
}

xcb_coloritem_iterator_t
xcb_store_colors_items_iterator (const xcb_store_colors_request_t *R)
{
    xcb_coloritem_iterator_t i;
    i.data = (xcb_coloritem_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_store_colors_request_t))/sizeof(xcb_coloritem_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_store_named_color_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_store_named_color_request_t *_aux = (xcb_store_named_color_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_store_named_color_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_store_named_color_checked (xcb_connection_t *c,
                               uint8_t           flags,
                               xcb_colormap_t    cmap,
                               uint32_t          pixel,
                               uint16_t          name_len,
                               const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_STORE_NAMED_COLOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_store_named_color_request_t xcb_out;

    xcb_out.flags = flags;
    xcb_out.cmap = cmap;
    xcb_out.pixel = pixel;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_store_named_color (xcb_connection_t *c,
                       uint8_t           flags,
                       xcb_colormap_t    cmap,
                       uint32_t          pixel,
                       uint16_t          name_len,
                       const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_STORE_NAMED_COLOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_store_named_color_request_t xcb_out;

    xcb_out.flags = flags;
    xcb_out.cmap = cmap;
    xcb_out.pixel = pixel;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_store_named_color_name (const xcb_store_named_color_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_store_named_color_name_length (const xcb_store_named_color_request_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_store_named_color_name_end (const xcb_store_named_color_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_rgb_next (xcb_rgb_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_rgb_t);
}

xcb_generic_iterator_t
xcb_rgb_end (xcb_rgb_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_query_colors_sizeof (const void  *_buffer,
                         uint32_t     pixels_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_query_colors_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pixels */
    xcb_block_len += pixels_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_query_colors_cookie_t
xcb_query_colors (xcb_connection_t *c,
                  xcb_colormap_t    cmap,
                  uint32_t          pixels_len,
                  const uint32_t   *pixels)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_COLORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_colors_cookie_t xcb_ret;
    xcb_query_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t pixels */
    xcb_parts[4].iov_base = (char *) pixels;
    xcb_parts[4].iov_len = pixels_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_colors_cookie_t
xcb_query_colors_unchecked (xcb_connection_t *c,
                            xcb_colormap_t    cmap,
                            uint32_t          pixels_len,
                            const uint32_t   *pixels)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_COLORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_colors_cookie_t xcb_ret;
    xcb_query_colors_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t pixels */
    xcb_parts[4].iov_base = (char *) pixels;
    xcb_parts[4].iov_len = pixels_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rgb_t *
xcb_query_colors_colors (const xcb_query_colors_reply_t *R)
{
    return (xcb_rgb_t *) (R + 1);
}

int
xcb_query_colors_colors_length (const xcb_query_colors_reply_t *R)
{
    return R->colors_len;
}

xcb_rgb_iterator_t
xcb_query_colors_colors_iterator (const xcb_query_colors_reply_t *R)
{
    xcb_rgb_iterator_t i;
    i.data = (xcb_rgb_t *) (R + 1);
    i.rem = R->colors_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_query_colors_reply_t *
xcb_query_colors_reply (xcb_connection_t           *c,
                        xcb_query_colors_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_query_colors_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_lookup_color_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_lookup_color_request_t *_aux = (xcb_lookup_color_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_lookup_color_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_lookup_color_cookie_t
xcb_lookup_color (xcb_connection_t *c,
                  xcb_colormap_t    cmap,
                  uint16_t          name_len,
                  const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LOOKUP_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_lookup_color_cookie_t xcb_ret;
    xcb_lookup_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_lookup_color_cookie_t
xcb_lookup_color_unchecked (xcb_connection_t *c,
                            xcb_colormap_t    cmap,
                            uint16_t          name_len,
                            const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_LOOKUP_COLOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_lookup_color_cookie_t xcb_ret;
    xcb_lookup_color_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cmap = cmap;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_lookup_color_reply_t *
xcb_lookup_color_reply (xcb_connection_t           *c,
                        xcb_lookup_color_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_lookup_color_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_create_cursor_checked (xcb_connection_t *c,
                           xcb_cursor_t      cid,
                           xcb_pixmap_t      source,
                           xcb_pixmap_t      mask,
                           uint16_t          fore_red,
                           uint16_t          fore_green,
                           uint16_t          fore_blue,
                           uint16_t          back_red,
                           uint16_t          back_green,
                           uint16_t          back_blue,
                           uint16_t          x,
                           uint16_t          y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.source = source;
    xcb_out.mask = mask;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_cursor (xcb_connection_t *c,
                   xcb_cursor_t      cid,
                   xcb_pixmap_t      source,
                   xcb_pixmap_t      mask,
                   uint16_t          fore_red,
                   uint16_t          fore_green,
                   uint16_t          fore_blue,
                   uint16_t          back_red,
                   uint16_t          back_green,
                   uint16_t          back_blue,
                   uint16_t          x,
                   uint16_t          y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.source = source;
    xcb_out.mask = mask;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_glyph_cursor_checked (xcb_connection_t *c,
                                 xcb_cursor_t      cid,
                                 xcb_font_t        source_font,
                                 xcb_font_t        mask_font,
                                 uint16_t          source_char,
                                 uint16_t          mask_char,
                                 uint16_t          fore_red,
                                 uint16_t          fore_green,
                                 uint16_t          fore_blue,
                                 uint16_t          back_red,
                                 uint16_t          back_green,
                                 uint16_t          back_blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_GLYPH_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_glyph_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.source_font = source_font;
    xcb_out.mask_font = mask_font;
    xcb_out.source_char = source_char;
    xcb_out.mask_char = mask_char;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_create_glyph_cursor (xcb_connection_t *c,
                         xcb_cursor_t      cid,
                         xcb_font_t        source_font,
                         xcb_font_t        mask_font,
                         uint16_t          source_char,
                         uint16_t          mask_char,
                         uint16_t          fore_red,
                         uint16_t          fore_green,
                         uint16_t          fore_blue,
                         uint16_t          back_red,
                         uint16_t          back_green,
                         uint16_t          back_blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CREATE_GLYPH_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_create_glyph_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cid = cid;
    xcb_out.source_font = source_font;
    xcb_out.mask_font = mask_font;
    xcb_out.source_char = source_char;
    xcb_out.mask_char = mask_char;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_cursor_checked (xcb_connection_t *c,
                         xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_free_cursor (xcb_connection_t *c,
                 xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FREE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_free_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_recolor_cursor_checked (xcb_connection_t *c,
                            xcb_cursor_t      cursor,
                            uint16_t          fore_red,
                            uint16_t          fore_green,
                            uint16_t          fore_blue,
                            uint16_t          back_red,
                            uint16_t          back_green,
                            uint16_t          back_blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_RECOLOR_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_recolor_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_recolor_cursor (xcb_connection_t *c,
                    xcb_cursor_t      cursor,
                    uint16_t          fore_red,
                    uint16_t          fore_green,
                    uint16_t          fore_blue,
                    uint16_t          back_red,
                    uint16_t          back_green,
                    uint16_t          back_blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_RECOLOR_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_recolor_cursor_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.cursor = cursor;
    xcb_out.fore_red = fore_red;
    xcb_out.fore_green = fore_green;
    xcb_out.fore_blue = fore_blue;
    xcb_out.back_red = back_red;
    xcb_out.back_green = back_green;
    xcb_out.back_blue = back_blue;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_best_size_cookie_t
xcb_query_best_size (xcb_connection_t *c,
                     uint8_t           _class,
                     xcb_drawable_t    drawable,
                     uint16_t          width,
                     uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_BEST_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_best_size_cookie_t xcb_ret;
    xcb_query_best_size_request_t xcb_out;

    xcb_out._class = _class;
    xcb_out.drawable = drawable;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_best_size_cookie_t
xcb_query_best_size_unchecked (xcb_connection_t *c,
                               uint8_t           _class,
                               xcb_drawable_t    drawable,
                               uint16_t          width,
                               uint16_t          height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_QUERY_BEST_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_query_best_size_cookie_t xcb_ret;
    xcb_query_best_size_request_t xcb_out;

    xcb_out._class = _class;
    xcb_out.drawable = drawable;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_best_size_reply_t *
xcb_query_best_size_reply (xcb_connection_t              *c,
                           xcb_query_best_size_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_query_best_size_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_query_extension_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_query_extension_request_t *_aux = (xcb_query_extension_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_query_extension_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_query_extension_cookie_t
xcb_query_extension (xcb_connection_t *c,
                     uint16_t          name_len,
                     const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_extension_cookie_t xcb_ret;
    xcb_query_extension_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_extension_cookie_t
xcb_query_extension_unchecked (xcb_connection_t *c,
                               uint16_t          name_len,
                               const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_QUERY_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_query_extension_cookie_t xcb_ret;
    xcb_query_extension_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.name_len = name_len;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_query_extension_reply_t *
xcb_query_extension_reply (xcb_connection_t              *c,
                           xcb_query_extension_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_query_extension_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_list_extensions_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_extensions_reply_t *_aux = (xcb_list_extensions_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_list_extensions_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* names */
    for(i=0; i<_aux->names_len; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_str_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_extensions_cookie_t
xcb_list_extensions (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_EXTENSIONS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_extensions_cookie_t xcb_ret;
    xcb_list_extensions_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_extensions_cookie_t
xcb_list_extensions_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_EXTENSIONS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_extensions_cookie_t xcb_ret;
    xcb_list_extensions_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_list_extensions_names_length (const xcb_list_extensions_reply_t *R)
{
    return R->names_len;
}

xcb_str_iterator_t
xcb_list_extensions_names_iterator (const xcb_list_extensions_reply_t *R)
{
    xcb_str_iterator_t i;
    i.data = (xcb_str_t *) (R + 1);
    i.rem = R->names_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_extensions_reply_t *
xcb_list_extensions_reply (xcb_connection_t              *c,
                           xcb_list_extensions_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_list_extensions_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_change_keyboard_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_keyboard_mapping_request_t *_aux = (xcb_change_keyboard_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_keyboard_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += (_aux->keycode_count * _aux->keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_keyboard_mapping_checked (xcb_connection_t   *c,
                                     uint8_t             keycode_count,
                                     xcb_keycode_t       first_keycode,
                                     uint8_t             keysyms_per_keycode,
                                     const xcb_keysym_t *keysyms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_MAPPING,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_mapping_request_t xcb_out;

    xcb_out.keycode_count = keycode_count;
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_keyboard_mapping (xcb_connection_t   *c,
                             uint8_t             keycode_count,
                             xcb_keycode_t       first_keycode,
                             uint8_t             keysyms_per_keycode,
                             const xcb_keysym_t *keysyms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_MAPPING,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_mapping_request_t xcb_out;

    xcb_out.keycode_count = keycode_count;
    xcb_out.first_keycode = first_keycode;
    xcb_out.keysyms_per_keycode = keysyms_per_keycode;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keysym_t keysyms */
    xcb_parts[4].iov_base = (char *) keysyms;
    xcb_parts[4].iov_len = (keycode_count * keysyms_per_keycode) * sizeof(xcb_keysym_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_keysym_t *
xcb_change_keyboard_mapping_keysyms (const xcb_change_keyboard_mapping_request_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_change_keyboard_mapping_keysyms_length (const xcb_change_keyboard_mapping_request_t *R)
{
    return (R->keycode_count * R->keysyms_per_keycode);
}

xcb_generic_iterator_t
xcb_change_keyboard_mapping_keysyms_end (const xcb_change_keyboard_mapping_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + ((R->keycode_count * R->keysyms_per_keycode));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_get_keyboard_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_keyboard_mapping_reply_t *_aux = (xcb_get_keyboard_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_keyboard_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keysyms */
    xcb_block_len += _aux->length * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_keyboard_mapping_cookie_t
xcb_get_keyboard_mapping (xcb_connection_t *c,
                          xcb_keycode_t     first_keycode,
                          uint8_t           count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_KEYBOARD_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_keyboard_mapping_cookie_t xcb_ret;
    xcb_get_keyboard_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_keyboard_mapping_cookie_t
xcb_get_keyboard_mapping_unchecked (xcb_connection_t *c,
                                    xcb_keycode_t     first_keycode,
                                    uint8_t           count)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_KEYBOARD_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_keyboard_mapping_cookie_t xcb_ret;
    xcb_get_keyboard_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.first_keycode = first_keycode;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_keysym_t *
xcb_get_keyboard_mapping_keysyms (const xcb_get_keyboard_mapping_reply_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_get_keyboard_mapping_keysyms_length (const xcb_get_keyboard_mapping_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_get_keyboard_mapping_keysyms_end (const xcb_get_keyboard_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_keyboard_mapping_reply_t *
xcb_get_keyboard_mapping_reply (xcb_connection_t                   *c,
                                xcb_get_keyboard_mapping_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_get_keyboard_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_change_keyboard_control_value_list_serialize (void                                           **_buffer,
                                                  uint32_t                                         value_mask,
                                                  const xcb_change_keyboard_control_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[9];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_KB_KEY_CLICK_PERCENT) {
        /* xcb_change_keyboard_control_value_list_t.key_click_percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_click_percent;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_PERCENT) {
        /* xcb_change_keyboard_control_value_list_t.bell_percent */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell_percent;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_PITCH) {
        /* xcb_change_keyboard_control_value_list_t.bell_pitch */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell_pitch;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_DURATION) {
        /* xcb_change_keyboard_control_value_list_t.bell_duration */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bell_duration;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_LED) {
        /* xcb_change_keyboard_control_value_list_t.led */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_KB_LED_MODE) {
        /* xcb_change_keyboard_control_value_list_t.led_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->led_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_KB_KEY) {
        /* xcb_change_keyboard_control_value_list_t.key */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key;
        xcb_block_len += sizeof(xcb_keycode32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode32_t);
    }
    if(value_mask & XCB_KB_AUTO_REPEAT_MODE) {
        /* xcb_change_keyboard_control_value_list_t.auto_repeat_mode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->auto_repeat_mode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_change_keyboard_control_value_list_unpack (const void                                *_buffer,
                                               uint32_t                                   value_mask,
                                               xcb_change_keyboard_control_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_KB_KEY_CLICK_PERCENT) {
        /* xcb_change_keyboard_control_value_list_t.key_click_percent */
        _aux->key_click_percent = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_PERCENT) {
        /* xcb_change_keyboard_control_value_list_t.bell_percent */
        _aux->bell_percent = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_PITCH) {
        /* xcb_change_keyboard_control_value_list_t.bell_pitch */
        _aux->bell_pitch = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_BELL_DURATION) {
        /* xcb_change_keyboard_control_value_list_t.bell_duration */
        _aux->bell_duration = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_KB_LED) {
        /* xcb_change_keyboard_control_value_list_t.led */
        _aux->led = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_KB_LED_MODE) {
        /* xcb_change_keyboard_control_value_list_t.led_mode */
        _aux->led_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_KB_KEY) {
        /* xcb_change_keyboard_control_value_list_t.key */
        _aux->key = *(xcb_keycode32_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode32_t);
        xcb_tmp += sizeof(xcb_keycode32_t);
        xcb_align_to = ALIGNOF(xcb_keycode32_t);
    }
    if(value_mask & XCB_KB_AUTO_REPEAT_MODE) {
        /* xcb_change_keyboard_control_value_list_t.auto_repeat_mode */
        _aux->auto_repeat_mode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_change_keyboard_control_value_list_sizeof (const void  *_buffer,
                                               uint32_t     value_mask)
{
    xcb_change_keyboard_control_value_list_t _aux;
    return xcb_change_keyboard_control_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_change_keyboard_control_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_keyboard_control_request_t *_aux = (xcb_change_keyboard_control_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_keyboard_control_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_change_keyboard_control_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_keyboard_control_checked (xcb_connection_t *c,
                                     uint32_t          value_mask,
                                     const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_control_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_keyboard_control_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_keyboard_control_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_keyboard_control (xcb_connection_t *c,
                             uint32_t          value_mask,
                             const void       *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_control_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_keyboard_control_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_change_keyboard_control_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_keyboard_control_aux_checked (xcb_connection_t                               *c,
                                         uint32_t                                        value_mask,
                                         const xcb_change_keyboard_control_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_control_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_keyboard_control_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_keyboard_control_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_keyboard_control_aux (xcb_connection_t                               *c,
                                 uint32_t                                        value_mask,
                                 const xcb_change_keyboard_control_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = 0,
        .opcode = XCB_CHANGE_KEYBOARD_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_change_keyboard_control_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pad0 = 0;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_change_keyboard_control_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_change_keyboard_control_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_change_keyboard_control_value_list (const xcb_change_keyboard_control_request_t *R)
{
    return (void *) (R + 1);
}

xcb_get_keyboard_control_cookie_t
xcb_get_keyboard_control (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_KEYBOARD_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_keyboard_control_cookie_t xcb_ret;
    xcb_get_keyboard_control_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_keyboard_control_cookie_t
xcb_get_keyboard_control_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_KEYBOARD_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_keyboard_control_cookie_t xcb_ret;
    xcb_get_keyboard_control_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_keyboard_control_reply_t *
xcb_get_keyboard_control_reply (xcb_connection_t                   *c,
                                xcb_get_keyboard_control_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_get_keyboard_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_bell_checked (xcb_connection_t *c,
                  int8_t            percent)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_bell_request_t xcb_out;

    xcb_out.percent = percent;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_bell (xcb_connection_t *c,
          int8_t            percent)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_bell_request_t xcb_out;

    xcb_out.percent = percent;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_pointer_control_checked (xcb_connection_t *c,
                                    int16_t           acceleration_numerator,
                                    int16_t           acceleration_denominator,
                                    int16_t           threshold,
                                    uint8_t           do_acceleration,
                                    uint8_t           do_threshold)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_POINTER_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_pointer_control_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.acceleration_numerator = acceleration_numerator;
    xcb_out.acceleration_denominator = acceleration_denominator;
    xcb_out.threshold = threshold;
    xcb_out.do_acceleration = do_acceleration;
    xcb_out.do_threshold = do_threshold;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_pointer_control (xcb_connection_t *c,
                            int16_t           acceleration_numerator,
                            int16_t           acceleration_denominator,
                            int16_t           threshold,
                            uint8_t           do_acceleration,
                            uint8_t           do_threshold)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_CHANGE_POINTER_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_change_pointer_control_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.acceleration_numerator = acceleration_numerator;
    xcb_out.acceleration_denominator = acceleration_denominator;
    xcb_out.threshold = threshold;
    xcb_out.do_acceleration = do_acceleration;
    xcb_out.do_threshold = do_threshold;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_pointer_control_cookie_t
xcb_get_pointer_control (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_POINTER_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_pointer_control_cookie_t xcb_ret;
    xcb_get_pointer_control_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_pointer_control_cookie_t
xcb_get_pointer_control_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_POINTER_CONTROL,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_pointer_control_cookie_t xcb_ret;
    xcb_get_pointer_control_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_pointer_control_reply_t *
xcb_get_pointer_control_reply (xcb_connection_t                  *c,
                               xcb_get_pointer_control_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_get_pointer_control_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_set_screen_saver_checked (xcb_connection_t *c,
                              int16_t           timeout,
                              int16_t           interval,
                              uint8_t           prefer_blanking,
                              uint8_t           allow_exposures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_SCREEN_SAVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_screen_saver_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.timeout = timeout;
    xcb_out.interval = interval;
    xcb_out.prefer_blanking = prefer_blanking;
    xcb_out.allow_exposures = allow_exposures;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_screen_saver (xcb_connection_t *c,
                      int16_t           timeout,
                      int16_t           interval,
                      uint8_t           prefer_blanking,
                      uint8_t           allow_exposures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_SCREEN_SAVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_screen_saver_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.timeout = timeout;
    xcb_out.interval = interval;
    xcb_out.prefer_blanking = prefer_blanking;
    xcb_out.allow_exposures = allow_exposures;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_screen_saver_cookie_t
xcb_get_screen_saver (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_SCREEN_SAVER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_screen_saver_cookie_t xcb_ret;
    xcb_get_screen_saver_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_screen_saver_cookie_t
xcb_get_screen_saver_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_SCREEN_SAVER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_screen_saver_cookie_t xcb_ret;
    xcb_get_screen_saver_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_screen_saver_reply_t *
xcb_get_screen_saver_reply (xcb_connection_t               *c,
                            xcb_get_screen_saver_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_get_screen_saver_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_change_hosts_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_hosts_request_t *_aux = (xcb_change_hosts_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_hosts_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* address */
    xcb_block_len += _aux->address_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_change_hosts_checked (xcb_connection_t *c,
                          uint8_t           mode,
                          uint8_t           family,
                          uint16_t          address_len,
                          const uint8_t    *address)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_HOSTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_hosts_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.family = family;
    xcb_out.pad0 = 0;
    xcb_out.address_len = address_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t address */
    xcb_parts[4].iov_base = (char *) address;
    xcb_parts[4].iov_len = address_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_change_hosts (xcb_connection_t *c,
                  uint8_t           mode,
                  uint8_t           family,
                  uint16_t          address_len,
                  const uint8_t    *address)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_CHANGE_HOSTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_change_hosts_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.family = family;
    xcb_out.pad0 = 0;
    xcb_out.address_len = address_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t address */
    xcb_parts[4].iov_base = (char *) address;
    xcb_parts[4].iov_len = address_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_change_hosts_address (const xcb_change_hosts_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_change_hosts_address_length (const xcb_change_hosts_request_t *R)
{
    return R->address_len;
}

xcb_generic_iterator_t
xcb_change_hosts_address_end (const xcb_change_hosts_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->address_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_host_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_host_t *_aux = (xcb_host_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_host_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* address */
    xcb_block_len += _aux->address_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint8_t *
xcb_host_address (const xcb_host_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_host_address_length (const xcb_host_t *R)
{
    return R->address_len;
}

xcb_generic_iterator_t
xcb_host_address_end (const xcb_host_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->address_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_host_next (xcb_host_iterator_t *i)
{
    xcb_host_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_host_t *)(((char *)R) + xcb_host_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_host_t *) child.data;
}

xcb_generic_iterator_t
xcb_host_end (xcb_host_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_host_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_list_hosts_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_list_hosts_reply_t *_aux = (xcb_list_hosts_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_list_hosts_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* hosts */
    for(i=0; i<_aux->hosts_len; i++) {
        xcb_tmp_len = xcb_host_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_host_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_list_hosts_cookie_t
xcb_list_hosts (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_HOSTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_hosts_cookie_t xcb_ret;
    xcb_list_hosts_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_list_hosts_cookie_t
xcb_list_hosts_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_LIST_HOSTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_list_hosts_cookie_t xcb_ret;
    xcb_list_hosts_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_list_hosts_hosts_length (const xcb_list_hosts_reply_t *R)
{
    return R->hosts_len;
}

xcb_host_iterator_t
xcb_list_hosts_hosts_iterator (const xcb_list_hosts_reply_t *R)
{
    xcb_host_iterator_t i;
    i.data = (xcb_host_t *) (R + 1);
    i.rem = R->hosts_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_list_hosts_reply_t *
xcb_list_hosts_reply (xcb_connection_t         *c,
                      xcb_list_hosts_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_list_hosts_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_set_access_control_checked (xcb_connection_t *c,
                                uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_ACCESS_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_access_control_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_access_control (xcb_connection_t *c,
                        uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_ACCESS_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_access_control_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_close_down_mode_checked (xcb_connection_t *c,
                                 uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_CLOSE_DOWN_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_close_down_mode_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_set_close_down_mode (xcb_connection_t *c,
                         uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_SET_CLOSE_DOWN_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_set_close_down_mode_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_kill_client_checked (xcb_connection_t *c,
                         uint32_t          resource)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_KILL_CLIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_kill_client_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.resource = resource;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_kill_client (xcb_connection_t *c,
                 uint32_t          resource)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_KILL_CLIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_kill_client_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.resource = resource;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_rotate_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_rotate_properties_request_t *_aux = (xcb_rotate_properties_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_rotate_properties_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* atoms */
    xcb_block_len += _aux->atoms_len * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_rotate_properties_checked (xcb_connection_t *c,
                               xcb_window_t      window,
                               uint16_t          atoms_len,
                               int16_t           delta,
                               const xcb_atom_t *atoms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_ROTATE_PROPERTIES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_rotate_properties_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.atoms_len = atoms_len;
    xcb_out.delta = delta;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_atom_t atoms */
    xcb_parts[4].iov_base = (char *) atoms;
    xcb_parts[4].iov_len = atoms_len * sizeof(xcb_atom_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_rotate_properties (xcb_connection_t *c,
                       xcb_window_t      window,
                       uint16_t          atoms_len,
                       int16_t           delta,
                       const xcb_atom_t *atoms)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_ROTATE_PROPERTIES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_rotate_properties_request_t xcb_out;

    xcb_out.pad0 = 0;
    xcb_out.window = window;
    xcb_out.atoms_len = atoms_len;
    xcb_out.delta = delta;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_atom_t atoms */
    xcb_parts[4].iov_base = (char *) atoms;
    xcb_parts[4].iov_len = atoms_len * sizeof(xcb_atom_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_rotate_properties_atoms (const xcb_rotate_properties_request_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_rotate_properties_atoms_length (const xcb_rotate_properties_request_t *R)
{
    return R->atoms_len;
}

xcb_generic_iterator_t
xcb_rotate_properties_atoms_end (const xcb_rotate_properties_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->atoms_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_force_screen_saver_checked (xcb_connection_t *c,
                                uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FORCE_SCREEN_SAVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_force_screen_saver_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_force_screen_saver (xcb_connection_t *c,
                        uint8_t           mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_FORCE_SCREEN_SAVER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_force_screen_saver_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_set_pointer_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_set_pointer_mapping_request_t *_aux = (xcb_set_pointer_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_set_pointer_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += _aux->map_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_set_pointer_mapping_cookie_t
xcb_set_pointer_mapping (xcb_connection_t *c,
                         uint8_t           map_len,
                         const uint8_t    *map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_POINTER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_set_pointer_mapping_cookie_t xcb_ret;
    xcb_set_pointer_mapping_request_t xcb_out;

    xcb_out.map_len = map_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_set_pointer_mapping_cookie_t
xcb_set_pointer_mapping_unchecked (xcb_connection_t *c,
                                   uint8_t           map_len,
                                   const uint8_t    *map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_POINTER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_set_pointer_mapping_cookie_t xcb_ret;
    xcb_set_pointer_mapping_request_t xcb_out;

    xcb_out.map_len = map_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t map */
    xcb_parts[4].iov_base = (char *) map;
    xcb_parts[4].iov_len = map_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_set_pointer_mapping_reply_t *
xcb_set_pointer_mapping_reply (xcb_connection_t                  *c,
                               xcb_set_pointer_mapping_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_set_pointer_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_get_pointer_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_pointer_mapping_reply_t *_aux = (xcb_get_pointer_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_pointer_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += _aux->map_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_pointer_mapping_cookie_t
xcb_get_pointer_mapping (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_POINTER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_pointer_mapping_cookie_t xcb_ret;
    xcb_get_pointer_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_pointer_mapping_cookie_t
xcb_get_pointer_mapping_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_POINTER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_pointer_mapping_cookie_t xcb_ret;
    xcb_get_pointer_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_get_pointer_mapping_map (const xcb_get_pointer_mapping_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_get_pointer_mapping_map_length (const xcb_get_pointer_mapping_reply_t *R)
{
    return R->map_len;
}

xcb_generic_iterator_t
xcb_get_pointer_mapping_map_end (const xcb_get_pointer_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->map_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_pointer_mapping_reply_t *
xcb_get_pointer_mapping_reply (xcb_connection_t                  *c,
                               xcb_get_pointer_mapping_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_get_pointer_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_set_modifier_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_set_modifier_mapping_request_t *_aux = (xcb_set_modifier_mapping_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_set_modifier_mapping_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keycodes */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(xcb_keycode_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keycode_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_set_modifier_mapping_cookie_t
xcb_set_modifier_mapping (xcb_connection_t    *c,
                          uint8_t              keycodes_per_modifier,
                          const xcb_keycode_t *keycodes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_set_modifier_mapping_cookie_t xcb_ret;
    xcb_set_modifier_mapping_request_t xcb_out;

    xcb_out.keycodes_per_modifier = keycodes_per_modifier;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keycode_t keycodes */
    xcb_parts[4].iov_base = (char *) keycodes;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_set_modifier_mapping_cookie_t
xcb_set_modifier_mapping_unchecked (xcb_connection_t    *c,
                                    uint8_t              keycodes_per_modifier,
                                    const xcb_keycode_t *keycodes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = 0,
        .opcode = XCB_SET_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_set_modifier_mapping_cookie_t xcb_ret;
    xcb_set_modifier_mapping_request_t xcb_out;

    xcb_out.keycodes_per_modifier = keycodes_per_modifier;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_keycode_t keycodes */
    xcb_parts[4].iov_base = (char *) keycodes;
    xcb_parts[4].iov_len = (keycodes_per_modifier * 8) * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_set_modifier_mapping_reply_t *
xcb_set_modifier_mapping_reply (xcb_connection_t                   *c,
                                xcb_set_modifier_mapping_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_set_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_get_modifier_mapping_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_get_modifier_mapping_reply_t *_aux = (xcb_get_modifier_mapping_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_get_modifier_mapping_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keycodes */
    xcb_block_len += (_aux->keycodes_per_modifier * 8) * sizeof(xcb_keycode_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keycode_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_get_modifier_mapping_cookie_t
xcb_get_modifier_mapping (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_modifier_mapping_cookie_t xcb_ret;
    xcb_get_modifier_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_get_modifier_mapping_cookie_t
xcb_get_modifier_mapping_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_GET_MODIFIER_MAPPING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_get_modifier_mapping_cookie_t xcb_ret;
    xcb_get_modifier_mapping_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_keycode_t *
xcb_get_modifier_mapping_keycodes (const xcb_get_modifier_mapping_reply_t *R)
{
    return (xcb_keycode_t *) (R + 1);
}

int
xcb_get_modifier_mapping_keycodes_length (const xcb_get_modifier_mapping_reply_t *R)
{
    return (R->keycodes_per_modifier * 8);
}

xcb_generic_iterator_t
xcb_get_modifier_mapping_keycodes_end (const xcb_get_modifier_mapping_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keycode_t *) (R + 1)) + ((R->keycodes_per_modifier * 8));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_get_modifier_mapping_reply_t *
xcb_get_modifier_mapping_reply (xcb_connection_t                   *c,
                                xcb_get_modifier_mapping_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_get_modifier_mapping_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_no_operation_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_NO_OPERATION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_no_operation_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_no_operation (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = 0,
        .opcode = XCB_NO_OPERATION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_no_operation_request_t xcb_out;

    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.6
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d19 1
a19 1
xcb_char2b_next (xcb_char2b_iterator_t *i  /**< */)
d27 1
a27 1
xcb_char2b_end (xcb_char2b_iterator_t i  /**< */)
d37 1
a37 1
xcb_window_next (xcb_window_iterator_t *i  /**< */)
d45 1
a45 1
xcb_window_end (xcb_window_iterator_t i  /**< */)
d55 1
a55 1
xcb_pixmap_next (xcb_pixmap_iterator_t *i  /**< */)
d63 1
a63 1
xcb_pixmap_end (xcb_pixmap_iterator_t i  /**< */)
d73 1
a73 1
xcb_cursor_next (xcb_cursor_iterator_t *i  /**< */)
d81 1
a81 1
xcb_cursor_end (xcb_cursor_iterator_t i  /**< */)
d91 1
a91 1
xcb_font_next (xcb_font_iterator_t *i  /**< */)
d99 1
a99 1
xcb_font_end (xcb_font_iterator_t i  /**< */)
d109 1
a109 1
xcb_gcontext_next (xcb_gcontext_iterator_t *i  /**< */)
d117 1
a117 1
xcb_gcontext_end (xcb_gcontext_iterator_t i  /**< */)
d127 1
a127 1
xcb_colormap_next (xcb_colormap_iterator_t *i  /**< */)
d135 1
a135 1
xcb_colormap_end (xcb_colormap_iterator_t i  /**< */)
d145 1
a145 1
xcb_atom_next (xcb_atom_iterator_t *i  /**< */)
d153 1
a153 1
xcb_atom_end (xcb_atom_iterator_t i  /**< */)
d163 1
a163 1
xcb_drawable_next (xcb_drawable_iterator_t *i  /**< */)
d171 1
a171 1
xcb_drawable_end (xcb_drawable_iterator_t i  /**< */)
d181 1
a181 1
xcb_fontable_next (xcb_fontable_iterator_t *i  /**< */)
d189 1
a189 1
xcb_fontable_end (xcb_fontable_iterator_t i  /**< */)
d199 19
a217 1
xcb_visualid_next (xcb_visualid_iterator_t *i  /**< */)
d225 1
a225 1
xcb_visualid_end (xcb_visualid_iterator_t i  /**< */)
d235 1
a235 1
xcb_timestamp_next (xcb_timestamp_iterator_t *i  /**< */)
d243 1
a243 1
xcb_timestamp_end (xcb_timestamp_iterator_t i  /**< */)
d253 1
a253 1
xcb_keysym_next (xcb_keysym_iterator_t *i  /**< */)
d261 1
a261 1
xcb_keysym_end (xcb_keysym_iterator_t i  /**< */)
d271 1
a271 1
xcb_keycode_next (xcb_keycode_iterator_t *i  /**< */)
d279 19
a297 1
xcb_keycode_end (xcb_keycode_iterator_t i  /**< */)
d307 1
a307 1
xcb_button_next (xcb_button_iterator_t *i  /**< */)
d315 1
a315 1
xcb_button_end (xcb_button_iterator_t i  /**< */)
d325 1
a325 1
xcb_point_next (xcb_point_iterator_t *i  /**< */)
d333 1
a333 1
xcb_point_end (xcb_point_iterator_t i  /**< */)
d343 1
a343 1
xcb_rectangle_next (xcb_rectangle_iterator_t *i  /**< */)
d351 1
a351 1
xcb_rectangle_end (xcb_rectangle_iterator_t i  /**< */)
d361 1
a361 1
xcb_arc_next (xcb_arc_iterator_t *i  /**< */)
d369 1
a369 1
xcb_arc_end (xcb_arc_iterator_t i  /**< */)
d379 1
a379 1
xcb_format_next (xcb_format_iterator_t *i  /**< */)
d387 1
a387 1
xcb_format_end (xcb_format_iterator_t i  /**< */)
d397 1
a397 1
xcb_visualtype_next (xcb_visualtype_iterator_t *i  /**< */)
d405 1
a405 1
xcb_visualtype_end (xcb_visualtype_iterator_t i  /**< */)
d415 1
a415 1
xcb_depth_sizeof (const void  *_buffer  /**< */)
d446 1
a446 1
xcb_depth_visuals (const xcb_depth_t *R  /**< */)
d452 1
a452 1
xcb_depth_visuals_length (const xcb_depth_t *R  /**< */)
d458 1
a458 1
xcb_depth_visuals_iterator (const xcb_depth_t *R  /**< */)
d468 1
a468 1
xcb_depth_next (xcb_depth_iterator_t *i  /**< */)
d479 1
a479 1
xcb_depth_end (xcb_depth_iterator_t i  /**< */)
d491 1
a491 1
xcb_screen_sizeof (const void  *_buffer  /**< */)
d527 1
a527 1
xcb_screen_allowed_depths_length (const xcb_screen_t *R  /**< */)
d533 1
a533 1
xcb_screen_allowed_depths_iterator (const xcb_screen_t *R  /**< */)
d543 1
a543 1
xcb_screen_next (xcb_screen_iterator_t *i  /**< */)
d554 1
a554 1
xcb_screen_end (xcb_screen_iterator_t i  /**< */)
d566 1
a566 1
xcb_setup_request_sizeof (const void  *_buffer  /**< */)
d609 1
a609 1
xcb_setup_request_authorization_protocol_name (const xcb_setup_request_t *R  /**< */)
d615 1
a615 1
xcb_setup_request_authorization_protocol_name_length (const xcb_setup_request_t *R  /**< */)
d621 1
a621 1
xcb_setup_request_authorization_protocol_name_end (const xcb_setup_request_t *R  /**< */)
d631 1
a631 1
xcb_setup_request_authorization_protocol_data (const xcb_setup_request_t *R  /**< */)
d638 1
a638 1
xcb_setup_request_authorization_protocol_data_length (const xcb_setup_request_t *R  /**< */)
d644 1
a644 1
xcb_setup_request_authorization_protocol_data_end (const xcb_setup_request_t *R  /**< */)
d647 2
a648 2
    xcb_generic_iterator_t child = xcb_setup_request_authorization_protocol_name_end(R);
    i.data = ((char *) child.data) + (R->authorization_protocol_data_len);
d655 1
a655 1
xcb_setup_request_next (xcb_setup_request_iterator_t *i  /**< */)
d666 1
a666 1
xcb_setup_request_end (xcb_setup_request_iterator_t i  /**< */)
d678 1
a678 1
xcb_setup_failed_sizeof (const void  *_buffer  /**< */)
d709 1
a709 1
xcb_setup_failed_reason (const xcb_setup_failed_t *R  /**< */)
d715 1
a715 1
xcb_setup_failed_reason_length (const xcb_setup_failed_t *R  /**< */)
d721 1
a721 1
xcb_setup_failed_reason_end (const xcb_setup_failed_t *R  /**< */)
d731 1
a731 1
xcb_setup_failed_next (xcb_setup_failed_iterator_t *i  /**< */)
d742 1
a742 1
xcb_setup_failed_end (xcb_setup_failed_iterator_t i  /**< */)
d754 1
a754 1
xcb_setup_authenticate_sizeof (const void  *_buffer  /**< */)
d785 1
a785 1
xcb_setup_authenticate_reason (const xcb_setup_authenticate_t *R  /**< */)
d791 1
a791 1
xcb_setup_authenticate_reason_length (const xcb_setup_authenticate_t *R  /**< */)
d797 1
a797 1
xcb_setup_authenticate_reason_end (const xcb_setup_authenticate_t *R  /**< */)
d807 1
a807 1
xcb_setup_authenticate_next (xcb_setup_authenticate_iterator_t *i  /**< */)
d818 1
a818 1
xcb_setup_authenticate_end (xcb_setup_authenticate_iterator_t i  /**< */)
d830 1
a830 1
xcb_setup_sizeof (const void  *_buffer  /**< */)
d850 9
d899 1
a899 1
xcb_setup_vendor (const xcb_setup_t *R  /**< */)
d905 1
a905 1
xcb_setup_vendor_length (const xcb_setup_t *R  /**< */)
d911 1
a911 1
xcb_setup_vendor_end (const xcb_setup_t *R  /**< */)
d921 1
a921 1
xcb_setup_pixmap_formats (const xcb_setup_t *R  /**< */)
d924 1
a924 1
    return (xcb_format_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_format_t, prev.index) + 0);
d928 1
a928 1
xcb_setup_pixmap_formats_length (const xcb_setup_t *R  /**< */)
d934 1
a934 1
xcb_setup_pixmap_formats_iterator (const xcb_setup_t *R  /**< */)
d938 1
a938 1
    i.data = (xcb_format_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_format_t, prev.index));
d945 1
a945 1
xcb_setup_roots_length (const xcb_setup_t *R  /**< */)
d951 1
a951 1
xcb_setup_roots_iterator (const xcb_setup_t *R  /**< */)
d962 1
a962 1
xcb_setup_next (xcb_setup_iterator_t *i  /**< */)
d973 1
a973 1
xcb_setup_end (xcb_setup_iterator_t i  /**< */)
d985 1
a985 1
xcb_client_message_data_next (xcb_client_message_data_iterator_t *i  /**< */)
d993 1
a993 1
xcb_client_message_data_end (xcb_client_message_data_iterator_t i  /**< */)
d1003 307
a1309 1
xcb_create_window_sizeof (const void  *_buffer  /**< */)
d1324 1
a1324 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d1326 1
a1326 1
    xcb_align_to = ALIGNOF(uint32_t);
d1340 19
a1358 19
xcb_create_window_checked (xcb_connection_t *c  /**< */,
                           uint8_t           depth  /**< */,
                           xcb_window_t      wid  /**< */,
                           xcb_window_t      parent  /**< */,
                           int16_t           x  /**< */,
                           int16_t           y  /**< */,
                           uint16_t          width  /**< */,
                           uint16_t          height  /**< */,
                           uint16_t          border_width  /**< */,
                           uint16_t          _class  /**< */,
                           xcb_visualid_t    visual  /**< */,
                           uint32_t          value_mask  /**< */,
                           const uint32_t   *value_list  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_WINDOW,
        /* isvoid */ 1
d1361 1
a1361 1
    struct iovec xcb_parts[6];
d1381 1
a1381 1
    /* uint32_t value_list */
d1383 2
a1384 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1391 13
a1403 13
xcb_create_window (xcb_connection_t *c  /**< */,
                   uint8_t           depth  /**< */,
                   xcb_window_t      wid  /**< */,
                   xcb_window_t      parent  /**< */,
                   int16_t           x  /**< */,
                   int16_t           y  /**< */,
                   uint16_t          width  /**< */,
                   uint16_t          height  /**< */,
                   uint16_t          border_width  /**< */,
                   uint16_t          _class  /**< */,
                   xcb_visualid_t    visual  /**< */,
                   uint32_t          value_mask  /**< */,
                   const uint32_t   *value_list  /**< */)
d1406 4
a1409 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_WINDOW,
        /* isvoid */ 1
d1412 1
a1412 1
    struct iovec xcb_parts[6];
d1432 1
a1432 1
    /* uint32_t value_list */
d1434 107
a1540 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1543 1
d1547 6
d1554 307
a1860 1
xcb_change_window_attributes_sizeof (const void  *_buffer  /**< */)
d1875 1
a1875 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d1877 1
a1877 1
    xcb_align_to = ALIGNOF(uint32_t);
d1891 4
a1894 4
xcb_change_window_attributes_checked (xcb_connection_t *c  /**< */,
                                      xcb_window_t      window  /**< */,
                                      uint32_t          value_mask  /**< */,
                                      const uint32_t   *value_list  /**< */)
d1897 4
a1900 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_WINDOW_ATTRIBUTES,
        /* isvoid */ 1
d1903 1
a1903 1
    struct iovec xcb_parts[6];
d1915 1
a1915 1
    /* uint32_t value_list */
d1917 2
a1918 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1925 4
a1928 4
xcb_change_window_attributes (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */,
                              uint32_t          value_mask  /**< */,
                              const uint32_t   *value_list  /**< */)
d1931 4
a1934 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_WINDOW_ATTRIBUTES,
        /* isvoid */ 1
d1937 1
a1937 1
    struct iovec xcb_parts[6];
d1949 1
a1949 1
    /* uint32_t value_list */
d1951 73
a2023 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d2026 1
d2030 6
d2037 2
a2038 2
xcb_get_window_attributes (xcb_connection_t *c  /**< */,
                           xcb_window_t      window  /**< */)
d2041 4
a2044 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_WINDOW_ATTRIBUTES,
        /* isvoid */ 0
d2064 2
a2065 2
xcb_get_window_attributes_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      window  /**< */)
d2068 4
a2071 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_WINDOW_ATTRIBUTES,
        /* isvoid */ 0
d2091 1
a2091 1
xcb_get_window_attributes_reply (xcb_connection_t                    *c  /**< */,
d2093 1
a2093 1
                                 xcb_generic_error_t                **e  /**< */)
d2099 2
a2100 2
xcb_destroy_window_checked (xcb_connection_t *c  /**< */,
                            xcb_window_t      window  /**< */)
d2103 4
a2106 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DESTROY_WINDOW,
        /* isvoid */ 1
d2126 2
a2127 2
xcb_destroy_window (xcb_connection_t *c  /**< */,
                    xcb_window_t      window  /**< */)
d2130 4
a2133 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DESTROY_WINDOW,
        /* isvoid */ 1
d2153 2
a2154 2
xcb_destroy_subwindows_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */)
d2157 4
a2160 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DESTROY_SUBWINDOWS,
        /* isvoid */ 1
d2180 2
a2181 2
xcb_destroy_subwindows (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */)
d2184 4
a2187 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DESTROY_SUBWINDOWS,
        /* isvoid */ 1
d2207 3
a2209 3
xcb_change_save_set_checked (xcb_connection_t *c  /**< */,
                             uint8_t           mode  /**< */,
                             xcb_window_t      window  /**< */)
d2212 4
a2215 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_SAVE_SET,
        /* isvoid */ 1
d2235 3
a2237 3
xcb_change_save_set (xcb_connection_t *c  /**< */,
                     uint8_t           mode  /**< */,
                     xcb_window_t      window  /**< */)
d2240 4
a2243 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_SAVE_SET,
        /* isvoid */ 1
d2263 5
a2267 5
xcb_reparent_window_checked (xcb_connection_t *c  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_window_t      parent  /**< */,
                             int16_t           x  /**< */,
                             int16_t           y  /**< */)
d2270 4
a2273 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_REPARENT_WINDOW,
        /* isvoid */ 1
d2296 5
a2300 5
xcb_reparent_window (xcb_connection_t *c  /**< */,
                     xcb_window_t      window  /**< */,
                     xcb_window_t      parent  /**< */,
                     int16_t           x  /**< */,
                     int16_t           y  /**< */)
d2303 4
a2306 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_REPARENT_WINDOW,
        /* isvoid */ 1
d2329 2
a2330 2
xcb_map_window_checked (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */)
d2333 4
a2336 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_MAP_WINDOW,
        /* isvoid */ 1
d2356 2
a2357 2
xcb_map_window (xcb_connection_t *c  /**< */,
                xcb_window_t      window  /**< */)
d2360 4
a2363 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_MAP_WINDOW,
        /* isvoid */ 1
d2383 2
a2384 2
xcb_map_subwindows_checked (xcb_connection_t *c  /**< */,
                            xcb_window_t      window  /**< */)
d2387 4
a2390 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_MAP_SUBWINDOWS,
        /* isvoid */ 1
d2410 2
a2411 2
xcb_map_subwindows (xcb_connection_t *c  /**< */,
                    xcb_window_t      window  /**< */)
d2414 4
a2417 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_MAP_SUBWINDOWS,
        /* isvoid */ 1
d2437 2
a2438 2
xcb_unmap_window_checked (xcb_connection_t *c  /**< */,
                          xcb_window_t      window  /**< */)
d2441 4
a2444 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNMAP_WINDOW,
        /* isvoid */ 1
d2464 2
a2465 2
xcb_unmap_window (xcb_connection_t *c  /**< */,
                  xcb_window_t      window  /**< */)
d2468 4
a2471 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNMAP_WINDOW,
        /* isvoid */ 1
d2491 2
a2492 2
xcb_unmap_subwindows_checked (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */)
d2495 4
a2498 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNMAP_SUBWINDOWS,
        /* isvoid */ 1
d2518 2
a2519 2
xcb_unmap_subwindows (xcb_connection_t *c  /**< */,
                      xcb_window_t      window  /**< */)
d2522 4
a2525 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNMAP_SUBWINDOWS,
        /* isvoid */ 1
d2545 187
a2731 1
xcb_configure_window_sizeof (const void  *_buffer  /**< */)
d2746 1
a2746 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d2748 1
a2748 1
    xcb_align_to = ALIGNOF(uint32_t);
d2762 4
a2765 4
xcb_configure_window_checked (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */,
                              uint16_t          value_mask  /**< */,
                              const uint32_t   *value_list  /**< */)
d2768 4
a2771 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CONFIGURE_WINDOW,
        /* isvoid */ 1
d2774 1
a2774 1
    struct iovec xcb_parts[6];
d2787 1
a2787 1
    /* uint32_t value_list */
d2789 2
a2790 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d2797 4
a2800 4
xcb_configure_window (xcb_connection_t *c  /**< */,
                      xcb_window_t      window  /**< */,
                      uint16_t          value_mask  /**< */,
                      const uint32_t   *value_list  /**< */)
d2803 4
a2806 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CONFIGURE_WINDOW,
        /* isvoid */ 1
d2809 1
a2809 1
    struct iovec xcb_parts[6];
d2822 1
a2822 1
    /* uint32_t value_list */
d2824 75
a2898 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d2901 1
d2905 6
d2912 3
a2914 3
xcb_circulate_window_checked (xcb_connection_t *c  /**< */,
                              uint8_t           direction  /**< */,
                              xcb_window_t      window  /**< */)
d2917 4
a2920 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CIRCULATE_WINDOW,
        /* isvoid */ 1
d2940 3
a2942 3
xcb_circulate_window (xcb_connection_t *c  /**< */,
                      uint8_t           direction  /**< */,
                      xcb_window_t      window  /**< */)
d2945 4
a2948 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CIRCULATE_WINDOW,
        /* isvoid */ 1
d2968 2
a2969 2
xcb_get_geometry (xcb_connection_t *c  /**< */,
                  xcb_drawable_t    drawable  /**< */)
d2972 4
a2975 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_GEOMETRY,
        /* isvoid */ 0
d2995 2
a2996 2
xcb_get_geometry_unchecked (xcb_connection_t *c  /**< */,
                            xcb_drawable_t    drawable  /**< */)
d2999 4
a3002 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_GEOMETRY,
        /* isvoid */ 0
d3022 1
a3022 1
xcb_get_geometry_reply (xcb_connection_t           *c  /**< */,
d3024 1
a3024 1
                        xcb_generic_error_t       **e  /**< */)
d3030 1
a3030 1
xcb_query_tree_sizeof (const void  *_buffer  /**< */)
d3061 2
a3062 2
xcb_query_tree (xcb_connection_t *c  /**< */,
                xcb_window_t      window  /**< */)
d3065 4
a3068 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_TREE,
        /* isvoid */ 0
d3088 2
a3089 2
xcb_query_tree_unchecked (xcb_connection_t *c  /**< */,
                          xcb_window_t      window  /**< */)
d3092 4
a3095 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_TREE,
        /* isvoid */ 0
d3115 1
a3115 1
xcb_query_tree_children (const xcb_query_tree_reply_t *R  /**< */)
d3121 1
a3121 1
xcb_query_tree_children_length (const xcb_query_tree_reply_t *R  /**< */)
d3127 1
a3127 1
xcb_query_tree_children_end (const xcb_query_tree_reply_t *R  /**< */)
d3137 1
a3137 1
xcb_query_tree_reply (xcb_connection_t         *c  /**< */,
d3139 1
a3139 1
                      xcb_generic_error_t     **e  /**< */)
d3145 1
a3145 1
xcb_intern_atom_sizeof (const void  *_buffer  /**< */)
d3176 4
a3179 4
xcb_intern_atom (xcb_connection_t *c  /**< */,
                 uint8_t           only_if_exists  /**< */,
                 uint16_t          name_len  /**< */,
                 const char       *name  /**< */)
d3182 4
a3185 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_INTERN_ATOM,
        /* isvoid */ 0
d3211 4
a3214 4
xcb_intern_atom_unchecked (xcb_connection_t *c  /**< */,
                           uint8_t           only_if_exists  /**< */,
                           uint16_t          name_len  /**< */,
                           const char       *name  /**< */)
d3217 4
a3220 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_INTERN_ATOM,
        /* isvoid */ 0
d3246 1
a3246 1
xcb_intern_atom_reply (xcb_connection_t          *c  /**< */,
d3248 1
a3248 1
                       xcb_generic_error_t      **e  /**< */)
d3254 1
a3254 1
xcb_get_atom_name_sizeof (const void  *_buffer  /**< */)
d3285 2
a3286 2
xcb_get_atom_name (xcb_connection_t *c  /**< */,
                   xcb_atom_t        atom  /**< */)
d3289 4
a3292 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_ATOM_NAME,
        /* isvoid */ 0
d3312 2
a3313 2
xcb_get_atom_name_unchecked (xcb_connection_t *c  /**< */,
                             xcb_atom_t        atom  /**< */)
d3316 4
a3319 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_ATOM_NAME,
        /* isvoid */ 0
d3339 1
a3339 1
xcb_get_atom_name_name (const xcb_get_atom_name_reply_t *R  /**< */)
d3345 1
a3345 1
xcb_get_atom_name_name_length (const xcb_get_atom_name_reply_t *R  /**< */)
d3351 1
a3351 1
xcb_get_atom_name_name_end (const xcb_get_atom_name_reply_t *R  /**< */)
d3361 1
a3361 1
xcb_get_atom_name_reply (xcb_connection_t            *c  /**< */,
d3363 1
a3363 1
                         xcb_generic_error_t        **e  /**< */)
d3369 1
a3369 1
xcb_change_property_sizeof (const void  *_buffer  /**< */)
d3400 8
a3407 8
xcb_change_property_checked (xcb_connection_t *c  /**< */,
                             uint8_t           mode  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_atom_t        property  /**< */,
                             xcb_atom_t        type  /**< */,
                             uint8_t           format  /**< */,
                             uint32_t          data_len  /**< */,
                             const void       *data  /**< */)
d3410 4
a3413 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_PROPERTY,
        /* isvoid */ 1
d3443 8
a3450 8
xcb_change_property (xcb_connection_t *c  /**< */,
                     uint8_t           mode  /**< */,
                     xcb_window_t      window  /**< */,
                     xcb_atom_t        property  /**< */,
                     xcb_atom_t        type  /**< */,
                     uint8_t           format  /**< */,
                     uint32_t          data_len  /**< */,
                     const void       *data  /**< */)
d3453 4
a3456 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_PROPERTY,
        /* isvoid */ 1
d3485 22
d3508 3
a3510 3
xcb_delete_property_checked (xcb_connection_t *c  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_atom_t        property  /**< */)
d3513 4
a3516 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DELETE_PROPERTY,
        /* isvoid */ 1
d3537 3
a3539 3
xcb_delete_property (xcb_connection_t *c  /**< */,
                     xcb_window_t      window  /**< */,
                     xcb_atom_t        property  /**< */)
d3542 4
a3545 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_DELETE_PROPERTY,
        /* isvoid */ 1
d3566 1
a3566 1
xcb_get_property_sizeof (const void  *_buffer  /**< */)
d3597 7
a3603 7
xcb_get_property (xcb_connection_t *c  /**< */,
                  uint8_t           _delete  /**< */,
                  xcb_window_t      window  /**< */,
                  xcb_atom_t        property  /**< */,
                  xcb_atom_t        type  /**< */,
                  uint32_t          long_offset  /**< */,
                  uint32_t          long_length  /**< */)
d3606 4
a3609 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_PROPERTY,
        /* isvoid */ 0
d3633 7
a3639 7
xcb_get_property_unchecked (xcb_connection_t *c  /**< */,
                            uint8_t           _delete  /**< */,
                            xcb_window_t      window  /**< */,
                            xcb_atom_t        property  /**< */,
                            xcb_atom_t        type  /**< */,
                            uint32_t          long_offset  /**< */,
                            uint32_t          long_length  /**< */)
d3642 4
a3645 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_PROPERTY,
        /* isvoid */ 0
d3669 1
a3669 1
xcb_get_property_value (const xcb_get_property_reply_t *R  /**< */)
d3675 1
a3675 1
xcb_get_property_value_length (const xcb_get_property_reply_t *R  /**< */)
d3681 1
a3681 1
xcb_get_property_value_end (const xcb_get_property_reply_t *R  /**< */)
d3691 1
a3691 1
xcb_get_property_reply (xcb_connection_t           *c  /**< */,
d3693 1
a3693 1
                        xcb_generic_error_t       **e  /**< */)
d3699 1
a3699 1
xcb_list_properties_sizeof (const void  *_buffer  /**< */)
d3730 2
a3731 2
xcb_list_properties (xcb_connection_t *c  /**< */,
                     xcb_window_t      window  /**< */)
d3734 4
a3737 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_PROPERTIES,
        /* isvoid */ 0
d3757 2
a3758 2
xcb_list_properties_unchecked (xcb_connection_t *c  /**< */,
                               xcb_window_t      window  /**< */)
d3761 4
a3764 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_PROPERTIES,
        /* isvoid */ 0
d3784 1
a3784 1
xcb_list_properties_atoms (const xcb_list_properties_reply_t *R  /**< */)
d3790 1
a3790 1
xcb_list_properties_atoms_length (const xcb_list_properties_reply_t *R  /**< */)
d3796 1
a3796 1
xcb_list_properties_atoms_end (const xcb_list_properties_reply_t *R  /**< */)
d3806 1
a3806 1
xcb_list_properties_reply (xcb_connection_t              *c  /**< */,
d3808 1
a3808 1
                           xcb_generic_error_t          **e  /**< */)
d3814 4
a3817 4
xcb_set_selection_owner_checked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      owner  /**< */,
                                 xcb_atom_t        selection  /**< */,
                                 xcb_timestamp_t   time  /**< */)
d3820 4
a3823 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_SELECTION_OWNER,
        /* isvoid */ 1
d3845 4
a3848 4
xcb_set_selection_owner (xcb_connection_t *c  /**< */,
                         xcb_window_t      owner  /**< */,
                         xcb_atom_t        selection  /**< */,
                         xcb_timestamp_t   time  /**< */)
d3851 4
a3854 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_SELECTION_OWNER,
        /* isvoid */ 1
d3876 2
a3877 2
xcb_get_selection_owner (xcb_connection_t *c  /**< */,
                         xcb_atom_t        selection  /**< */)
d3880 4
a3883 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_SELECTION_OWNER,
        /* isvoid */ 0
d3903 2
a3904 2
xcb_get_selection_owner_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_atom_t        selection  /**< */)
d3907 4
a3910 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_SELECTION_OWNER,
        /* isvoid */ 0
d3930 1
a3930 1
xcb_get_selection_owner_reply (xcb_connection_t                  *c  /**< */,
d3932 1
a3932 1
                               xcb_generic_error_t              **e  /**< */)
d3938 6
a3943 6
xcb_convert_selection_checked (xcb_connection_t *c  /**< */,
                               xcb_window_t      requestor  /**< */,
                               xcb_atom_t        selection  /**< */,
                               xcb_atom_t        target  /**< */,
                               xcb_atom_t        property  /**< */,
                               xcb_timestamp_t   time  /**< */)
d3946 4
a3949 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CONVERT_SELECTION,
        /* isvoid */ 1
d3973 6
a3978 6
xcb_convert_selection (xcb_connection_t *c  /**< */,
                       xcb_window_t      requestor  /**< */,
                       xcb_atom_t        selection  /**< */,
                       xcb_atom_t        target  /**< */,
                       xcb_atom_t        property  /**< */,
                       xcb_timestamp_t   time  /**< */)
d3981 4
a3984 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CONVERT_SELECTION,
        /* isvoid */ 1
d4008 5
a4012 5
xcb_send_event_checked (xcb_connection_t *c  /**< */,
                        uint8_t           propagate  /**< */,
                        xcb_window_t      destination  /**< */,
                        uint32_t          event_mask  /**< */,
                        const char       *event  /**< */)
d4015 4
a4018 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SEND_EVENT,
        /* isvoid */ 1
d4040 5
a4044 5
xcb_send_event (xcb_connection_t *c  /**< */,
                uint8_t           propagate  /**< */,
                xcb_window_t      destination  /**< */,
                uint32_t          event_mask  /**< */,
                const char       *event  /**< */)
d4047 4
a4050 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SEND_EVENT,
        /* isvoid */ 1
d4072 9
a4080 9
xcb_grab_pointer (xcb_connection_t *c  /**< */,
                  uint8_t           owner_events  /**< */,
                  xcb_window_t      grab_window  /**< */,
                  uint16_t          event_mask  /**< */,
                  uint8_t           pointer_mode  /**< */,
                  uint8_t           keyboard_mode  /**< */,
                  xcb_window_t      confine_to  /**< */,
                  xcb_cursor_t      cursor  /**< */,
                  xcb_timestamp_t   time  /**< */)
d4083 4
a4086 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_POINTER,
        /* isvoid */ 0
d4112 9
a4120 9
xcb_grab_pointer_unchecked (xcb_connection_t *c  /**< */,
                            uint8_t           owner_events  /**< */,
                            xcb_window_t      grab_window  /**< */,
                            uint16_t          event_mask  /**< */,
                            uint8_t           pointer_mode  /**< */,
                            uint8_t           keyboard_mode  /**< */,
                            xcb_window_t      confine_to  /**< */,
                            xcb_cursor_t      cursor  /**< */,
                            xcb_timestamp_t   time  /**< */)
d4123 4
a4126 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_POINTER,
        /* isvoid */ 0
d4152 1
a4152 1
xcb_grab_pointer_reply (xcb_connection_t           *c  /**< */,
d4154 1
a4154 1
                        xcb_generic_error_t       **e  /**< */)
d4160 2
a4161 2
xcb_ungrab_pointer_checked (xcb_connection_t *c  /**< */,
                            xcb_timestamp_t   time  /**< */)
d4164 4
a4167 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_POINTER,
        /* isvoid */ 1
d4187 2
a4188 2
xcb_ungrab_pointer (xcb_connection_t *c  /**< */,
                    xcb_timestamp_t   time  /**< */)
d4191 4
a4194 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_POINTER,
        /* isvoid */ 1
d4214 16
a4229 16
xcb_grab_button_checked (xcb_connection_t *c  /**< */,
                         uint8_t           owner_events  /**< */,
                         xcb_window_t      grab_window  /**< */,
                         uint16_t          event_mask  /**< */,
                         uint8_t           pointer_mode  /**< */,
                         uint8_t           keyboard_mode  /**< */,
                         xcb_window_t      confine_to  /**< */,
                         xcb_cursor_t      cursor  /**< */,
                         uint8_t           button  /**< */,
                         uint16_t          modifiers  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_BUTTON,
        /* isvoid */ 1
d4257 16
a4272 16
xcb_grab_button (xcb_connection_t *c  /**< */,
                 uint8_t           owner_events  /**< */,
                 xcb_window_t      grab_window  /**< */,
                 uint16_t          event_mask  /**< */,
                 uint8_t           pointer_mode  /**< */,
                 uint8_t           keyboard_mode  /**< */,
                 xcb_window_t      confine_to  /**< */,
                 xcb_cursor_t      cursor  /**< */,
                 uint8_t           button  /**< */,
                 uint16_t          modifiers  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_BUTTON,
        /* isvoid */ 1
d4300 4
a4303 4
xcb_ungrab_button_checked (xcb_connection_t *c  /**< */,
                           uint8_t           button  /**< */,
                           xcb_window_t      grab_window  /**< */,
                           uint16_t          modifiers  /**< */)
d4306 4
a4309 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_BUTTON,
        /* isvoid */ 1
d4331 4
a4334 4
xcb_ungrab_button (xcb_connection_t *c  /**< */,
                   uint8_t           button  /**< */,
                   xcb_window_t      grab_window  /**< */,
                   uint16_t          modifiers  /**< */)
d4337 4
a4340 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_BUTTON,
        /* isvoid */ 1
d4362 4
a4365 4
xcb_change_active_pointer_grab_checked (xcb_connection_t *c  /**< */,
                                        xcb_cursor_t      cursor  /**< */,
                                        xcb_timestamp_t   time  /**< */,
                                        uint16_t          event_mask  /**< */)
d4368 4
a4371 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_ACTIVE_POINTER_GRAB,
        /* isvoid */ 1
d4394 4
a4397 4
xcb_change_active_pointer_grab (xcb_connection_t *c  /**< */,
                                xcb_cursor_t      cursor  /**< */,
                                xcb_timestamp_t   time  /**< */,
                                uint16_t          event_mask  /**< */)
d4400 4
a4403 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_ACTIVE_POINTER_GRAB,
        /* isvoid */ 1
d4426 6
a4431 6
xcb_grab_keyboard (xcb_connection_t *c  /**< */,
                   uint8_t           owner_events  /**< */,
                   xcb_window_t      grab_window  /**< */,
                   xcb_timestamp_t   time  /**< */,
                   uint8_t           pointer_mode  /**< */,
                   uint8_t           keyboard_mode  /**< */)
d4434 4
a4437 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_KEYBOARD,
        /* isvoid */ 0
d4461 6
a4466 6
xcb_grab_keyboard_unchecked (xcb_connection_t *c  /**< */,
                             uint8_t           owner_events  /**< */,
                             xcb_window_t      grab_window  /**< */,
                             xcb_timestamp_t   time  /**< */,
                             uint8_t           pointer_mode  /**< */,
                             uint8_t           keyboard_mode  /**< */)
d4469 4
a4472 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_KEYBOARD,
        /* isvoid */ 0
d4496 1
a4496 1
xcb_grab_keyboard_reply (xcb_connection_t            *c  /**< */,
d4498 1
a4498 1
                         xcb_generic_error_t        **e  /**< */)
d4504 2
a4505 2
xcb_ungrab_keyboard_checked (xcb_connection_t *c  /**< */,
                             xcb_timestamp_t   time  /**< */)
d4508 4
a4511 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_KEYBOARD,
        /* isvoid */ 1
d4531 2
a4532 2
xcb_ungrab_keyboard (xcb_connection_t *c  /**< */,
                     xcb_timestamp_t   time  /**< */)
d4535 4
a4538 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_KEYBOARD,
        /* isvoid */ 1
d4558 7
a4564 7
xcb_grab_key_checked (xcb_connection_t *c  /**< */,
                      uint8_t           owner_events  /**< */,
                      xcb_window_t      grab_window  /**< */,
                      uint16_t          modifiers  /**< */,
                      xcb_keycode_t     key  /**< */,
                      uint8_t           pointer_mode  /**< */,
                      uint8_t           keyboard_mode  /**< */)
d4567 4
a4570 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_KEY,
        /* isvoid */ 1
d4595 7
a4601 7
xcb_grab_key (xcb_connection_t *c  /**< */,
              uint8_t           owner_events  /**< */,
              xcb_window_t      grab_window  /**< */,
              uint16_t          modifiers  /**< */,
              xcb_keycode_t     key  /**< */,
              uint8_t           pointer_mode  /**< */,
              uint8_t           keyboard_mode  /**< */)
d4604 4
a4607 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_KEY,
        /* isvoid */ 1
d4632 4
a4635 4
xcb_ungrab_key_checked (xcb_connection_t *c  /**< */,
                        xcb_keycode_t     key  /**< */,
                        xcb_window_t      grab_window  /**< */,
                        uint16_t          modifiers  /**< */)
d4638 4
a4641 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_KEY,
        /* isvoid */ 1
d4663 4
a4666 4
xcb_ungrab_key (xcb_connection_t *c  /**< */,
                xcb_keycode_t     key  /**< */,
                xcb_window_t      grab_window  /**< */,
                uint16_t          modifiers  /**< */)
d4669 4
a4672 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_KEY,
        /* isvoid */ 1
d4694 3
a4696 3
xcb_allow_events_checked (xcb_connection_t *c  /**< */,
                          uint8_t           mode  /**< */,
                          xcb_timestamp_t   time  /**< */)
d4699 4
a4702 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOW_EVENTS,
        /* isvoid */ 1
d4722 3
a4724 3
xcb_allow_events (xcb_connection_t *c  /**< */,
                  uint8_t           mode  /**< */,
                  xcb_timestamp_t   time  /**< */)
d4727 4
a4730 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOW_EVENTS,
        /* isvoid */ 1
d4750 1
a4750 1
xcb_grab_server_checked (xcb_connection_t *c  /**< */)
d4753 4
a4756 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_SERVER,
        /* isvoid */ 1
d4775 1
a4775 1
xcb_grab_server (xcb_connection_t *c  /**< */)
d4778 4
a4781 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GRAB_SERVER,
        /* isvoid */ 1
d4800 1
a4800 1
xcb_ungrab_server_checked (xcb_connection_t *c  /**< */)
d4803 4
a4806 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_SERVER,
        /* isvoid */ 1
d4825 1
a4825 1
xcb_ungrab_server (xcb_connection_t *c  /**< */)
d4828 4
a4831 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNGRAB_SERVER,
        /* isvoid */ 1
d4850 2
a4851 2
xcb_query_pointer (xcb_connection_t *c  /**< */,
                   xcb_window_t      window  /**< */)
d4854 4
a4857 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_POINTER,
        /* isvoid */ 0
d4877 2
a4878 2
xcb_query_pointer_unchecked (xcb_connection_t *c  /**< */,
                             xcb_window_t      window  /**< */)
d4881 4
a4884 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_POINTER,
        /* isvoid */ 0
d4904 1
a4904 1
xcb_query_pointer_reply (xcb_connection_t            *c  /**< */,
d4906 1
a4906 1
                         xcb_generic_error_t        **e  /**< */)
d4912 1
a4912 1
xcb_timecoord_next (xcb_timecoord_iterator_t *i  /**< */)
d4920 1
a4920 1
xcb_timecoord_end (xcb_timecoord_iterator_t i  /**< */)
d4930 1
a4930 1
xcb_get_motion_events_sizeof (const void  *_buffer  /**< */)
d4961 4
a4964 4
xcb_get_motion_events (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */,
                       xcb_timestamp_t   start  /**< */,
                       xcb_timestamp_t   stop  /**< */)
d4967 4
a4970 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_MOTION_EVENTS,
        /* isvoid */ 0
d4992 4
a4995 4
xcb_get_motion_events_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */,
                                 xcb_timestamp_t   start  /**< */,
                                 xcb_timestamp_t   stop  /**< */)
d4998 4
a5001 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_MOTION_EVENTS,
        /* isvoid */ 0
d5023 1
a5023 1
xcb_get_motion_events_events (const xcb_get_motion_events_reply_t *R  /**< */)
d5029 1
a5029 1
xcb_get_motion_events_events_length (const xcb_get_motion_events_reply_t *R  /**< */)
d5035 1
a5035 1
xcb_get_motion_events_events_iterator (const xcb_get_motion_events_reply_t *R  /**< */)
d5045 1
a5045 1
xcb_get_motion_events_reply (xcb_connection_t                *c  /**< */,
d5047 1
a5047 1
                             xcb_generic_error_t            **e  /**< */)
d5053 5
a5057 5
xcb_translate_coordinates (xcb_connection_t *c  /**< */,
                           xcb_window_t      src_window  /**< */,
                           xcb_window_t      dst_window  /**< */,
                           int16_t           src_x  /**< */,
                           int16_t           src_y  /**< */)
d5060 4
a5063 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_TRANSLATE_COORDINATES,
        /* isvoid */ 0
d5086 5
a5090 5
xcb_translate_coordinates_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      src_window  /**< */,
                                     xcb_window_t      dst_window  /**< */,
                                     int16_t           src_x  /**< */,
                                     int16_t           src_y  /**< */)
d5093 4
a5096 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_TRANSLATE_COORDINATES,
        /* isvoid */ 0
d5119 1
a5119 1
xcb_translate_coordinates_reply (xcb_connection_t                    *c  /**< */,
d5121 1
a5121 1
                                 xcb_generic_error_t                **e  /**< */)
d5127 9
a5135 9
xcb_warp_pointer_checked (xcb_connection_t *c  /**< */,
                          xcb_window_t      src_window  /**< */,
                          xcb_window_t      dst_window  /**< */,
                          int16_t           src_x  /**< */,
                          int16_t           src_y  /**< */,
                          uint16_t          src_width  /**< */,
                          uint16_t          src_height  /**< */,
                          int16_t           dst_x  /**< */,
                          int16_t           dst_y  /**< */)
d5138 4
a5141 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_WARP_POINTER,
        /* isvoid */ 1
d5168 9
a5176 9
xcb_warp_pointer (xcb_connection_t *c  /**< */,
                  xcb_window_t      src_window  /**< */,
                  xcb_window_t      dst_window  /**< */,
                  int16_t           src_x  /**< */,
                  int16_t           src_y  /**< */,
                  uint16_t          src_width  /**< */,
                  uint16_t          src_height  /**< */,
                  int16_t           dst_x  /**< */,
                  int16_t           dst_y  /**< */)
d5179 4
a5182 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_WARP_POINTER,
        /* isvoid */ 1
d5209 4
a5212 4
xcb_set_input_focus_checked (xcb_connection_t *c  /**< */,
                             uint8_t           revert_to  /**< */,
                             xcb_window_t      focus  /**< */,
                             xcb_timestamp_t   time  /**< */)
d5215 4
a5218 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_INPUT_FOCUS,
        /* isvoid */ 1
d5239 4
a5242 4
xcb_set_input_focus (xcb_connection_t *c  /**< */,
                     uint8_t           revert_to  /**< */,
                     xcb_window_t      focus  /**< */,
                     xcb_timestamp_t   time  /**< */)
d5245 4
a5248 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_INPUT_FOCUS,
        /* isvoid */ 1
d5269 1
a5269 1
xcb_get_input_focus (xcb_connection_t *c  /**< */)
d5272 4
a5275 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_INPUT_FOCUS,
        /* isvoid */ 0
d5294 1
a5294 1
xcb_get_input_focus_unchecked (xcb_connection_t *c  /**< */)
d5297 4
a5300 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_INPUT_FOCUS,
        /* isvoid */ 0
d5319 1
a5319 1
xcb_get_input_focus_reply (xcb_connection_t              *c  /**< */,
d5321 1
a5321 1
                           xcb_generic_error_t          **e  /**< */)
d5327 1
a5327 1
xcb_query_keymap (xcb_connection_t *c  /**< */)
d5330 4
a5333 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_KEYMAP,
        /* isvoid */ 0
d5352 1
a5352 1
xcb_query_keymap_unchecked (xcb_connection_t *c  /**< */)
d5355 4
a5358 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_KEYMAP,
        /* isvoid */ 0
d5377 1
a5377 1
xcb_query_keymap_reply (xcb_connection_t           *c  /**< */,
d5379 1
a5379 1
                        xcb_generic_error_t       **e  /**< */)
d5385 1
a5385 1
xcb_open_font_sizeof (const void  *_buffer  /**< */)
d5416 4
a5419 4
xcb_open_font_checked (xcb_connection_t *c  /**< */,
                       xcb_font_t        fid  /**< */,
                       uint16_t          name_len  /**< */,
                       const char       *name  /**< */)
d5422 4
a5425 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_OPEN_FONT,
        /* isvoid */ 1
d5452 4
a5455 4
xcb_open_font (xcb_connection_t *c  /**< */,
               xcb_font_t        fid  /**< */,
               uint16_t          name_len  /**< */,
               const char       *name  /**< */)
d5458 4
a5461 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_OPEN_FONT,
        /* isvoid */ 1
d5487 22
d5510 2
a5511 2
xcb_close_font_checked (xcb_connection_t *c  /**< */,
                        xcb_font_t        font  /**< */)
d5514 4
a5517 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CLOSE_FONT,
        /* isvoid */ 1
d5537 2
a5538 2
xcb_close_font (xcb_connection_t *c  /**< */,
                xcb_font_t        font  /**< */)
d5541 4
a5544 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CLOSE_FONT,
        /* isvoid */ 1
d5564 1
a5564 1
xcb_fontprop_next (xcb_fontprop_iterator_t *i  /**< */)
d5572 1
a5572 1
xcb_fontprop_end (xcb_fontprop_iterator_t i  /**< */)
d5582 1
a5582 1
xcb_charinfo_next (xcb_charinfo_iterator_t *i  /**< */)
d5590 1
a5590 1
xcb_charinfo_end (xcb_charinfo_iterator_t i  /**< */)
d5600 1
a5600 1
xcb_query_font_sizeof (const void  *_buffer  /**< */)
d5643 2
a5644 2
xcb_query_font (xcb_connection_t *c  /**< */,
                xcb_fontable_t    font  /**< */)
d5647 4
a5650 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_FONT,
        /* isvoid */ 0
d5670 2
a5671 2
xcb_query_font_unchecked (xcb_connection_t *c  /**< */,
                          xcb_fontable_t    font  /**< */)
d5674 4
a5677 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_FONT,
        /* isvoid */ 0
d5697 1
a5697 1
xcb_query_font_properties (const xcb_query_font_reply_t *R  /**< */)
d5703 1
a5703 1
xcb_query_font_properties_length (const xcb_query_font_reply_t *R  /**< */)
d5709 1
a5709 1
xcb_query_font_properties_iterator (const xcb_query_font_reply_t *R  /**< */)
d5719 1
a5719 1
xcb_query_font_char_infos (const xcb_query_font_reply_t *R  /**< */)
d5726 1
a5726 1
xcb_query_font_char_infos_length (const xcb_query_font_reply_t *R  /**< */)
d5732 1
a5732 1
xcb_query_font_char_infos_iterator (const xcb_query_font_reply_t *R  /**< */)
d5743 1
a5743 1
xcb_query_font_reply (xcb_connection_t         *c  /**< */,
d5745 1
a5745 1
                      xcb_generic_error_t     **e  /**< */)
d5751 2
a5752 2
xcb_query_text_extents_sizeof (const void  *_buffer  /**< */,
                               uint32_t     string_len  /**< */)
d5782 4
a5785 4
xcb_query_text_extents (xcb_connection_t   *c  /**< */,
                        xcb_fontable_t      font  /**< */,
                        uint32_t            string_len  /**< */,
                        const xcb_char2b_t *string  /**< */)
d5788 4
a5791 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_TEXT_EXTENTS,
        /* isvoid */ 0
d5816 4
a5819 4
xcb_query_text_extents_unchecked (xcb_connection_t   *c  /**< */,
                                  xcb_fontable_t      font  /**< */,
                                  uint32_t            string_len  /**< */,
                                  const xcb_char2b_t *string  /**< */)
d5822 4
a5825 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_TEXT_EXTENTS,
        /* isvoid */ 0
d5850 1
a5850 1
xcb_query_text_extents_reply (xcb_connection_t                 *c  /**< */,
d5852 1
a5852 1
                              xcb_generic_error_t             **e  /**< */)
d5858 1
a5858 1
xcb_str_sizeof (const void  *_buffer  /**< */)
d5889 1
a5889 1
xcb_str_name (const xcb_str_t *R  /**< */)
d5895 1
a5895 1
xcb_str_name_length (const xcb_str_t *R  /**< */)
d5901 1
a5901 1
xcb_str_name_end (const xcb_str_t *R  /**< */)
d5911 1
a5911 1
xcb_str_next (xcb_str_iterator_t *i  /**< */)
d5922 1
a5922 1
xcb_str_end (xcb_str_iterator_t i  /**< */)
d5934 1
a5934 1
xcb_list_fonts_sizeof (const void  *_buffer  /**< */)
d5965 4
a5968 4
xcb_list_fonts (xcb_connection_t *c  /**< */,
                uint16_t          max_names  /**< */,
                uint16_t          pattern_len  /**< */,
                const char       *pattern  /**< */)
d5971 4
a5974 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LIST_FONTS,
        /* isvoid */ 0
d6000 4
a6003 4
xcb_list_fonts_unchecked (xcb_connection_t *c  /**< */,
                          uint16_t          max_names  /**< */,
                          uint16_t          pattern_len  /**< */,
                          const char       *pattern  /**< */)
d6006 4
a6009 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LIST_FONTS,
        /* isvoid */ 0
d6035 1
a6035 1
xcb_list_fonts_names_length (const xcb_list_fonts_reply_t *R  /**< */)
d6041 1
a6041 1
xcb_list_fonts_names_iterator (const xcb_list_fonts_reply_t *R  /**< */)
d6051 1
a6051 1
xcb_list_fonts_reply (xcb_connection_t         *c  /**< */,
d6053 1
a6053 1
                      xcb_generic_error_t     **e  /**< */)
d6059 1
a6059 1
xcb_list_fonts_with_info_sizeof (const void  *_buffer  /**< */)
d6090 4
a6093 4
xcb_list_fonts_with_info (xcb_connection_t *c  /**< */,
                          uint16_t          max_names  /**< */,
                          uint16_t          pattern_len  /**< */,
                          const char       *pattern  /**< */)
d6096 4
a6099 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LIST_FONTS_WITH_INFO,
        /* isvoid */ 0
d6125 4
a6128 4
xcb_list_fonts_with_info_unchecked (xcb_connection_t *c  /**< */,
                                    uint16_t          max_names  /**< */,
                                    uint16_t          pattern_len  /**< */,
                                    const char       *pattern  /**< */)
d6131 4
a6134 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LIST_FONTS_WITH_INFO,
        /* isvoid */ 0
d6160 1
a6160 1
xcb_list_fonts_with_info_properties (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6166 1
a6166 1
xcb_list_fonts_with_info_properties_length (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6172 1
a6172 1
xcb_list_fonts_with_info_properties_iterator (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6182 1
a6182 1
xcb_list_fonts_with_info_name (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6189 1
a6189 1
xcb_list_fonts_with_info_name_length (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6195 1
a6195 1
xcb_list_fonts_with_info_name_end (const xcb_list_fonts_with_info_reply_t *R  /**< */)
d6198 2
a6199 2
    xcb_generic_iterator_t child = xcb_fontprop_end(xcb_list_fonts_with_info_properties_iterator(R));
    i.data = ((char *) child.data) + (R->name_len);
d6206 1
a6206 1
xcb_list_fonts_with_info_reply (xcb_connection_t                   *c  /**< */,
d6208 1
a6208 1
                                xcb_generic_error_t               **e  /**< */)
d6214 1
a6214 1
xcb_set_font_path_sizeof (const void  *_buffer  /**< */)
d6250 3
a6252 3
xcb_set_font_path_checked (xcb_connection_t *c  /**< */,
                           uint16_t          font_qty  /**< */,
                           const xcb_str_t  *font  /**< */)
d6255 4
a6258 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_FONT_PATH,
        /* isvoid */ 1
d6293 3
a6295 3
xcb_set_font_path (xcb_connection_t *c  /**< */,
                   uint16_t          font_qty  /**< */,
                   const xcb_str_t  *font  /**< */)
d6298 4
a6301 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_FONT_PATH,
        /* isvoid */ 1
d6336 17
a6352 1
xcb_get_font_path_sizeof (const void  *_buffer  /**< */)
d6388 1
a6388 1
xcb_get_font_path (xcb_connection_t *c  /**< */)
d6391 4
a6394 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_FONT_PATH,
        /* isvoid */ 0
d6413 1
a6413 1
xcb_get_font_path_unchecked (xcb_connection_t *c  /**< */)
d6416 4
a6419 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_FONT_PATH,
        /* isvoid */ 0
d6438 1
a6438 1
xcb_get_font_path_path_length (const xcb_get_font_path_reply_t *R  /**< */)
d6444 1
a6444 1
xcb_get_font_path_path_iterator (const xcb_get_font_path_reply_t *R  /**< */)
d6454 1
a6454 1
xcb_get_font_path_reply (xcb_connection_t            *c  /**< */,
d6456 1
a6456 1
                         xcb_generic_error_t        **e  /**< */)
d6462 6
a6467 6
xcb_create_pixmap_checked (xcb_connection_t *c  /**< */,
                           uint8_t           depth  /**< */,
                           xcb_pixmap_t      pid  /**< */,
                           xcb_drawable_t    drawable  /**< */,
                           uint16_t          width  /**< */,
                           uint16_t          height  /**< */)
d6470 4
a6473 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_PIXMAP,
        /* isvoid */ 1
d6496 6
a6501 6
xcb_create_pixmap (xcb_connection_t *c  /**< */,
                   uint8_t           depth  /**< */,
                   xcb_pixmap_t      pid  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   uint16_t          width  /**< */,
                   uint16_t          height  /**< */)
d6504 4
a6507 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_PIXMAP,
        /* isvoid */ 1
d6530 2
a6531 2
xcb_free_pixmap_checked (xcb_connection_t *c  /**< */,
                         xcb_pixmap_t      pixmap  /**< */)
d6534 4
a6537 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_PIXMAP,
        /* isvoid */ 1
d6557 2
a6558 2
xcb_free_pixmap (xcb_connection_t *c  /**< */,
                 xcb_pixmap_t      pixmap  /**< */)
d6561 4
a6564 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_PIXMAP,
        /* isvoid */ 1
d6584 427
a7010 1
xcb_create_gc_sizeof (const void  *_buffer  /**< */)
d7025 612
a7636 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d7638 1
a7638 1
    xcb_align_to = ALIGNOF(uint32_t);
d7652 4
a7655 5
xcb_create_gc_checked (xcb_connection_t *c  /**< */,
                       xcb_gcontext_t    cid  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       uint32_t          value_mask  /**< */,
                       const uint32_t   *value_list  /**< */)
d7658 4
a7661 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_GC,
        /* isvoid */ 1
d7664 1
a7664 1
    struct iovec xcb_parts[6];
d7666 1
a7666 1
    xcb_create_gc_request_t xcb_out;
d7669 1
a7669 2
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
d7676 1
a7676 1
    /* uint32_t value_list */
d7678 2
a7679 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d7686 4
a7689 5
xcb_create_gc (xcb_connection_t *c  /**< */,
               xcb_gcontext_t    cid  /**< */,
               xcb_drawable_t    drawable  /**< */,
               uint32_t          value_mask  /**< */,
               const uint32_t   *value_list  /**< */)
d7692 4
a7695 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_GC,
        /* isvoid */ 1
d7698 1
a7698 1
    struct iovec xcb_parts[6];
d7700 1
a7700 1
    xcb_create_gc_request_t xcb_out;
d7703 1
a7703 2
    xcb_out.cid = cid;
    xcb_out.drawable = drawable;
d7710 1
a7710 1
    /* uint32_t value_list */
d7712 2
a7713 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
a7718 31
int
xcb_change_gc_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_change_gc_request_t *_aux = (xcb_change_gc_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_change_gc_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

d7720 4
a7723 4
xcb_change_gc_checked (xcb_connection_t *c  /**< */,
                       xcb_gcontext_t    gc  /**< */,
                       uint32_t          value_mask  /**< */,
                       const uint32_t   *value_list  /**< */)
d7726 4
a7729 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_GC,
        /* isvoid */ 1
d7732 1
a7732 1
    struct iovec xcb_parts[6];
d7735 1
d7745 4
a7748 5
    /* uint32_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d7751 1
d7756 4
a7759 4
xcb_change_gc (xcb_connection_t *c  /**< */,
               xcb_gcontext_t    gc  /**< */,
               uint32_t          value_mask  /**< */,
               const uint32_t   *value_list  /**< */)
d7762 4
a7765 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_GC,
        /* isvoid */ 1
d7768 1
a7768 1
    struct iovec xcb_parts[6];
d7771 1
d7781 4
a7784 5
    /* uint32_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d7787 1
d7791 6
d7798 4
a7801 4
xcb_copy_gc_checked (xcb_connection_t *c  /**< */,
                     xcb_gcontext_t    src_gc  /**< */,
                     xcb_gcontext_t    dst_gc  /**< */,
                     uint32_t          value_mask  /**< */)
d7804 4
a7807 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_GC,
        /* isvoid */ 1
d7829 4
a7832 4
xcb_copy_gc (xcb_connection_t *c  /**< */,
             xcb_gcontext_t    src_gc  /**< */,
             xcb_gcontext_t    dst_gc  /**< */,
             uint32_t          value_mask  /**< */)
d7835 4
a7838 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_GC,
        /* isvoid */ 1
d7860 1
a7860 1
xcb_set_dashes_sizeof (const void  *_buffer  /**< */)
d7891 5
a7895 5
xcb_set_dashes_checked (xcb_connection_t *c  /**< */,
                        xcb_gcontext_t    gc  /**< */,
                        uint16_t          dash_offset  /**< */,
                        uint16_t          dashes_len  /**< */,
                        const uint8_t    *dashes  /**< */)
d7898 4
a7901 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_DASHES,
        /* isvoid */ 1
d7928 5
a7932 5
xcb_set_dashes (xcb_connection_t *c  /**< */,
                xcb_gcontext_t    gc  /**< */,
                uint16_t          dash_offset  /**< */,
                uint16_t          dashes_len  /**< */,
                const uint8_t    *dashes  /**< */)
d7935 4
a7938 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_DASHES,
        /* isvoid */ 1
d7964 22
d7987 2
a7988 2
xcb_set_clip_rectangles_sizeof (const void  *_buffer  /**< */,
                                uint32_t     rectangles_len  /**< */)
d8018 7
a8024 7
xcb_set_clip_rectangles_checked (xcb_connection_t      *c  /**< */,
                                 uint8_t                ordering  /**< */,
                                 xcb_gcontext_t         gc  /**< */,
                                 int16_t                clip_x_origin  /**< */,
                                 int16_t                clip_y_origin  /**< */,
                                 uint32_t               rectangles_len  /**< */,
                                 const xcb_rectangle_t *rectangles  /**< */)
d8027 4
a8030 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_CLIP_RECTANGLES,
        /* isvoid */ 1
d8057 7
a8063 7
xcb_set_clip_rectangles (xcb_connection_t      *c  /**< */,
                         uint8_t                ordering  /**< */,
                         xcb_gcontext_t         gc  /**< */,
                         int16_t                clip_x_origin  /**< */,
                         int16_t                clip_y_origin  /**< */,
                         uint32_t               rectangles_len  /**< */,
                         const xcb_rectangle_t *rectangles  /**< */)
d8066 4
a8069 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_CLIP_RECTANGLES,
        /* isvoid */ 1
d8095 22
d8118 2
a8119 2
xcb_free_gc_checked (xcb_connection_t *c  /**< */,
                     xcb_gcontext_t    gc  /**< */)
d8122 4
a8125 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_GC,
        /* isvoid */ 1
d8145 2
a8146 2
xcb_free_gc (xcb_connection_t *c  /**< */,
             xcb_gcontext_t    gc  /**< */)
d8149 4
a8152 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_GC,
        /* isvoid */ 1
d8172 7
a8178 7
xcb_clear_area_checked (xcb_connection_t *c  /**< */,
                        uint8_t           exposures  /**< */,
                        xcb_window_t      window  /**< */,
                        int16_t           x  /**< */,
                        int16_t           y  /**< */,
                        uint16_t          width  /**< */,
                        uint16_t          height  /**< */)
d8181 4
a8184 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CLEAR_AREA,
        /* isvoid */ 1
d8208 7
a8214 7
xcb_clear_area (xcb_connection_t *c  /**< */,
                uint8_t           exposures  /**< */,
                xcb_window_t      window  /**< */,
                int16_t           x  /**< */,
                int16_t           y  /**< */,
                uint16_t          width  /**< */,
                uint16_t          height  /**< */)
d8217 4
a8220 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CLEAR_AREA,
        /* isvoid */ 1
d8244 16
a8259 16
xcb_copy_area_checked (xcb_connection_t *c  /**< */,
                       xcb_drawable_t    src_drawable  /**< */,
                       xcb_drawable_t    dst_drawable  /**< */,
                       xcb_gcontext_t    gc  /**< */,
                       int16_t           src_x  /**< */,
                       int16_t           src_y  /**< */,
                       int16_t           dst_x  /**< */,
                       int16_t           dst_y  /**< */,
                       uint16_t          width  /**< */,
                       uint16_t          height  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_AREA,
        /* isvoid */ 1
d8287 16
a8302 16
xcb_copy_area (xcb_connection_t *c  /**< */,
               xcb_drawable_t    src_drawable  /**< */,
               xcb_drawable_t    dst_drawable  /**< */,
               xcb_gcontext_t    gc  /**< */,
               int16_t           src_x  /**< */,
               int16_t           src_y  /**< */,
               int16_t           dst_x  /**< */,
               int16_t           dst_y  /**< */,
               uint16_t          width  /**< */,
               uint16_t          height  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_AREA,
        /* isvoid */ 1
d8330 17
a8346 17
xcb_copy_plane_checked (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    src_drawable  /**< */,
                        xcb_drawable_t    dst_drawable  /**< */,
                        xcb_gcontext_t    gc  /**< */,
                        int16_t           src_x  /**< */,
                        int16_t           src_y  /**< */,
                        int16_t           dst_x  /**< */,
                        int16_t           dst_y  /**< */,
                        uint16_t          width  /**< */,
                        uint16_t          height  /**< */,
                        uint32_t          bit_plane  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_PLANE,
        /* isvoid */ 1
d8375 17
a8391 17
xcb_copy_plane (xcb_connection_t *c  /**< */,
                xcb_drawable_t    src_drawable  /**< */,
                xcb_drawable_t    dst_drawable  /**< */,
                xcb_gcontext_t    gc  /**< */,
                int16_t           src_x  /**< */,
                int16_t           src_y  /**< */,
                int16_t           dst_x  /**< */,
                int16_t           dst_y  /**< */,
                uint16_t          width  /**< */,
                uint16_t          height  /**< */,
                uint32_t          bit_plane  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_PLANE,
        /* isvoid */ 1
d8420 2
a8421 2
xcb_poly_point_sizeof (const void  *_buffer  /**< */,
                       uint32_t     points_len  /**< */)
d8451 6
a8456 6
xcb_poly_point_checked (xcb_connection_t  *c  /**< */,
                        uint8_t            coordinate_mode  /**< */,
                        xcb_drawable_t     drawable  /**< */,
                        xcb_gcontext_t     gc  /**< */,
                        uint32_t           points_len  /**< */,
                        const xcb_point_t *points  /**< */)
d8459 4
a8462 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_POINT,
        /* isvoid */ 1
d8488 6
a8493 6
xcb_poly_point (xcb_connection_t  *c  /**< */,
                uint8_t            coordinate_mode  /**< */,
                xcb_drawable_t     drawable  /**< */,
                xcb_gcontext_t     gc  /**< */,
                uint32_t           points_len  /**< */,
                const xcb_point_t *points  /**< */)
d8496 4
a8499 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_POINT,
        /* isvoid */ 1
d8524 22
d8547 2
a8548 2
xcb_poly_line_sizeof (const void  *_buffer  /**< */,
                      uint32_t     points_len  /**< */)
d8578 6
a8583 6
xcb_poly_line_checked (xcb_connection_t  *c  /**< */,
                       uint8_t            coordinate_mode  /**< */,
                       xcb_drawable_t     drawable  /**< */,
                       xcb_gcontext_t     gc  /**< */,
                       uint32_t           points_len  /**< */,
                       const xcb_point_t *points  /**< */)
d8586 4
a8589 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_LINE,
        /* isvoid */ 1
d8615 6
a8620 6
xcb_poly_line (xcb_connection_t  *c  /**< */,
               uint8_t            coordinate_mode  /**< */,
               xcb_drawable_t     drawable  /**< */,
               xcb_gcontext_t     gc  /**< */,
               uint32_t           points_len  /**< */,
               const xcb_point_t *points  /**< */)
d8623 4
a8626 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_LINE,
        /* isvoid */ 1
d8651 22
d8674 1
a8674 1
xcb_segment_next (xcb_segment_iterator_t *i  /**< */)
d8682 1
a8682 1
xcb_segment_end (xcb_segment_iterator_t i  /**< */)
d8692 2
a8693 2
xcb_poly_segment_sizeof (const void  *_buffer  /**< */,
                         uint32_t     segments_len  /**< */)
d8723 5
a8727 5
xcb_poly_segment_checked (xcb_connection_t    *c  /**< */,
                          xcb_drawable_t       drawable  /**< */,
                          xcb_gcontext_t       gc  /**< */,
                          uint32_t             segments_len  /**< */,
                          const xcb_segment_t *segments  /**< */)
d8730 4
a8733 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_SEGMENT,
        /* isvoid */ 1
d8759 5
a8763 5
xcb_poly_segment (xcb_connection_t    *c  /**< */,
                  xcb_drawable_t       drawable  /**< */,
                  xcb_gcontext_t       gc  /**< */,
                  uint32_t             segments_len  /**< */,
                  const xcb_segment_t *segments  /**< */)
d8766 4
a8769 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_SEGMENT,
        /* isvoid */ 1
d8794 22
d8817 2
a8818 2
xcb_poly_rectangle_sizeof (const void  *_buffer  /**< */,
                           uint32_t     rectangles_len  /**< */)
d8848 5
a8852 5
xcb_poly_rectangle_checked (xcb_connection_t      *c  /**< */,
                            xcb_drawable_t         drawable  /**< */,
                            xcb_gcontext_t         gc  /**< */,
                            uint32_t               rectangles_len  /**< */,
                            const xcb_rectangle_t *rectangles  /**< */)
d8855 4
a8858 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_RECTANGLE,
        /* isvoid */ 1
d8884 5
a8888 5
xcb_poly_rectangle (xcb_connection_t      *c  /**< */,
                    xcb_drawable_t         drawable  /**< */,
                    xcb_gcontext_t         gc  /**< */,
                    uint32_t               rectangles_len  /**< */,
                    const xcb_rectangle_t *rectangles  /**< */)
d8891 4
a8894 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_RECTANGLE,
        /* isvoid */ 1
d8919 6
d8926 18
a8943 2
xcb_poly_arc_sizeof (const void  *_buffer  /**< */,
                     uint32_t     arcs_len  /**< */)
d8973 5
a8977 5
xcb_poly_arc_checked (xcb_connection_t *c  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      xcb_gcontext_t    gc  /**< */,
                      uint32_t          arcs_len  /**< */,
                      const xcb_arc_t  *arcs  /**< */)
d8980 4
a8983 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_ARC,
        /* isvoid */ 1
d9009 5
a9013 5
xcb_poly_arc (xcb_connection_t *c  /**< */,
              xcb_drawable_t    drawable  /**< */,
              xcb_gcontext_t    gc  /**< */,
              uint32_t          arcs_len  /**< */,
              const xcb_arc_t  *arcs  /**< */)
d9016 4
a9019 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_ARC,
        /* isvoid */ 1
d9044 22
d9067 2
a9068 2
xcb_fill_poly_sizeof (const void  *_buffer  /**< */,
                      uint32_t     points_len  /**< */)
d9098 7
a9104 7
xcb_fill_poly_checked (xcb_connection_t  *c  /**< */,
                       xcb_drawable_t     drawable  /**< */,
                       xcb_gcontext_t     gc  /**< */,
                       uint8_t            shape  /**< */,
                       uint8_t            coordinate_mode  /**< */,
                       uint32_t           points_len  /**< */,
                       const xcb_point_t *points  /**< */)
d9107 4
a9110 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_FILL_POLY,
        /* isvoid */ 1
d9139 7
a9145 7
xcb_fill_poly (xcb_connection_t  *c  /**< */,
               xcb_drawable_t     drawable  /**< */,
               xcb_gcontext_t     gc  /**< */,
               uint8_t            shape  /**< */,
               uint8_t            coordinate_mode  /**< */,
               uint32_t           points_len  /**< */,
               const xcb_point_t *points  /**< */)
d9148 4
a9151 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_FILL_POLY,
        /* isvoid */ 1
d9179 22
d9202 2
a9203 2
xcb_poly_fill_rectangle_sizeof (const void  *_buffer  /**< */,
                                uint32_t     rectangles_len  /**< */)
d9233 5
a9237 5
xcb_poly_fill_rectangle_checked (xcb_connection_t      *c  /**< */,
                                 xcb_drawable_t         drawable  /**< */,
                                 xcb_gcontext_t         gc  /**< */,
                                 uint32_t               rectangles_len  /**< */,
                                 const xcb_rectangle_t *rectangles  /**< */)
d9240 4
a9243 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_FILL_RECTANGLE,
        /* isvoid */ 1
d9269 5
a9273 5
xcb_poly_fill_rectangle (xcb_connection_t      *c  /**< */,
                         xcb_drawable_t         drawable  /**< */,
                         xcb_gcontext_t         gc  /**< */,
                         uint32_t               rectangles_len  /**< */,
                         const xcb_rectangle_t *rectangles  /**< */)
d9276 4
a9279 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_FILL_RECTANGLE,
        /* isvoid */ 1
d9304 22
d9327 2
a9328 2
xcb_poly_fill_arc_sizeof (const void  *_buffer  /**< */,
                          uint32_t     arcs_len  /**< */)
d9358 5
a9362 5
xcb_poly_fill_arc_checked (xcb_connection_t *c  /**< */,
                           xcb_drawable_t    drawable  /**< */,
                           xcb_gcontext_t    gc  /**< */,
                           uint32_t          arcs_len  /**< */,
                           const xcb_arc_t  *arcs  /**< */)
d9365 4
a9368 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_FILL_ARC,
        /* isvoid */ 1
d9394 5
a9398 5
xcb_poly_fill_arc (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   xcb_gcontext_t    gc  /**< */,
                   uint32_t          arcs_len  /**< */,
                   const xcb_arc_t  *arcs  /**< */)
d9401 4
a9404 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_FILL_ARC,
        /* isvoid */ 1
d9429 6
d9436 18
a9453 2
xcb_put_image_sizeof (const void  *_buffer  /**< */,
                      uint32_t     data_len  /**< */)
d9483 18
a9500 18
xcb_put_image_checked (xcb_connection_t *c  /**< */,
                       uint8_t           format  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       xcb_gcontext_t    gc  /**< */,
                       uint16_t          width  /**< */,
                       uint16_t          height  /**< */,
                       int16_t           dst_x  /**< */,
                       int16_t           dst_y  /**< */,
                       uint8_t           left_pad  /**< */,
                       uint8_t           depth  /**< */,
                       uint32_t          data_len  /**< */,
                       const uint8_t    *data  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_PUT_IMAGE,
        /* isvoid */ 1
d9533 18
a9550 18
xcb_put_image (xcb_connection_t *c  /**< */,
               uint8_t           format  /**< */,
               xcb_drawable_t    drawable  /**< */,
               xcb_gcontext_t    gc  /**< */,
               uint16_t          width  /**< */,
               uint16_t          height  /**< */,
               int16_t           dst_x  /**< */,
               int16_t           dst_y  /**< */,
               uint8_t           left_pad  /**< */,
               uint8_t           depth  /**< */,
               uint32_t          data_len  /**< */,
               const uint8_t    *data  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_PUT_IMAGE,
        /* isvoid */ 1
d9582 22
d9605 1
a9605 1
xcb_get_image_sizeof (const void  *_buffer  /**< */)
d9636 8
a9643 8
xcb_get_image (xcb_connection_t *c  /**< */,
               uint8_t           format  /**< */,
               xcb_drawable_t    drawable  /**< */,
               int16_t           x  /**< */,
               int16_t           y  /**< */,
               uint16_t          width  /**< */,
               uint16_t          height  /**< */,
               uint32_t          plane_mask  /**< */)
d9646 4
a9649 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_IMAGE,
        /* isvoid */ 0
d9674 8
a9681 8
xcb_get_image_unchecked (xcb_connection_t *c  /**< */,
                         uint8_t           format  /**< */,
                         xcb_drawable_t    drawable  /**< */,
                         int16_t           x  /**< */,
                         int16_t           y  /**< */,
                         uint16_t          width  /**< */,
                         uint16_t          height  /**< */,
                         uint32_t          plane_mask  /**< */)
d9684 4
a9687 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_IMAGE,
        /* isvoid */ 0
d9712 1
a9712 1
xcb_get_image_data (const xcb_get_image_reply_t *R  /**< */)
d9718 1
a9718 1
xcb_get_image_data_length (const xcb_get_image_reply_t *R  /**< */)
d9724 1
a9724 1
xcb_get_image_data_end (const xcb_get_image_reply_t *R  /**< */)
d9734 1
a9734 1
xcb_get_image_reply (xcb_connection_t        *c  /**< */,
d9736 1
a9736 1
                     xcb_generic_error_t    **e  /**< */)
d9742 2
a9743 2
xcb_poly_text_8_sizeof (const void  *_buffer  /**< */,
                        uint32_t     items_len  /**< */)
d9773 7
a9779 7
xcb_poly_text_8_checked (xcb_connection_t *c  /**< */,
                         xcb_drawable_t    drawable  /**< */,
                         xcb_gcontext_t    gc  /**< */,
                         int16_t           x  /**< */,
                         int16_t           y  /**< */,
                         uint32_t          items_len  /**< */,
                         const uint8_t    *items  /**< */)
d9782 4
a9785 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_TEXT_8,
        /* isvoid */ 1
d9813 7
a9819 7
xcb_poly_text_8 (xcb_connection_t *c  /**< */,
                 xcb_drawable_t    drawable  /**< */,
                 xcb_gcontext_t    gc  /**< */,
                 int16_t           x  /**< */,
                 int16_t           y  /**< */,
                 uint32_t          items_len  /**< */,
                 const uint8_t    *items  /**< */)
d9822 4
a9825 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_TEXT_8,
        /* isvoid */ 1
d9852 22
d9875 2
a9876 2
xcb_poly_text_16_sizeof (const void  *_buffer  /**< */,
                         uint32_t     items_len  /**< */)
d9906 7
a9912 7
xcb_poly_text_16_checked (xcb_connection_t *c  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           x  /**< */,
                          int16_t           y  /**< */,
                          uint32_t          items_len  /**< */,
                          const uint8_t    *items  /**< */)
d9915 4
a9918 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_TEXT_16,
        /* isvoid */ 1
d9946 7
a9952 7
xcb_poly_text_16 (xcb_connection_t *c  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           x  /**< */,
                  int16_t           y  /**< */,
                  uint32_t          items_len  /**< */,
                  const uint8_t    *items  /**< */)
d9955 4
a9958 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_POLY_TEXT_16,
        /* isvoid */ 1
d9985 6
d9992 17
a10008 1
xcb_image_text_8_sizeof (const void  *_buffer  /**< */)
d10039 7
a10045 7
xcb_image_text_8_checked (xcb_connection_t *c  /**< */,
                          uint8_t           string_len  /**< */,
                          xcb_drawable_t    drawable  /**< */,
                          xcb_gcontext_t    gc  /**< */,
                          int16_t           x  /**< */,
                          int16_t           y  /**< */,
                          const char       *string  /**< */)
d10048 4
a10051 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_IMAGE_TEXT_8,
        /* isvoid */ 1
d10079 7
a10085 7
xcb_image_text_8 (xcb_connection_t *c  /**< */,
                  uint8_t           string_len  /**< */,
                  xcb_drawable_t    drawable  /**< */,
                  xcb_gcontext_t    gc  /**< */,
                  int16_t           x  /**< */,
                  int16_t           y  /**< */,
                  const char       *string  /**< */)
d10088 4
a10091 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_IMAGE_TEXT_8,
        /* isvoid */ 1
d10106 23
a10128 7
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = string_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d10130 8
a10137 2
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d10141 1
a10141 1
xcb_image_text_16_sizeof (const void  *_buffer  /**< */)
d10172 7
a10178 7
xcb_image_text_16_checked (xcb_connection_t   *c  /**< */,
                           uint8_t             string_len  /**< */,
                           xcb_drawable_t      drawable  /**< */,
                           xcb_gcontext_t      gc  /**< */,
                           int16_t             x  /**< */,
                           int16_t             y  /**< */,
                           const xcb_char2b_t *string  /**< */)
d10181 4
a10184 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_IMAGE_TEXT_16,
        /* isvoid */ 1
d10212 7
a10218 7
xcb_image_text_16 (xcb_connection_t   *c  /**< */,
                   uint8_t             string_len  /**< */,
                   xcb_drawable_t      drawable  /**< */,
                   xcb_gcontext_t      gc  /**< */,
                   int16_t             x  /**< */,
                   int16_t             y  /**< */,
                   const xcb_char2b_t *string  /**< */)
d10221 4
a10224 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_IMAGE_TEXT_16,
        /* isvoid */ 1
d10251 22
d10274 5
a10278 5
xcb_create_colormap_checked (xcb_connection_t *c  /**< */,
                             uint8_t           alloc  /**< */,
                             xcb_colormap_t    mid  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_visualid_t    visual  /**< */)
d10281 4
a10284 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_COLORMAP,
        /* isvoid */ 1
d10306 5
a10310 5
xcb_create_colormap (xcb_connection_t *c  /**< */,
                     uint8_t           alloc  /**< */,
                     xcb_colormap_t    mid  /**< */,
                     xcb_window_t      window  /**< */,
                     xcb_visualid_t    visual  /**< */)
d10313 4
a10316 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_COLORMAP,
        /* isvoid */ 1
d10338 2
a10339 2
xcb_free_colormap_checked (xcb_connection_t *c  /**< */,
                           xcb_colormap_t    cmap  /**< */)
d10342 4
a10345 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_COLORMAP,
        /* isvoid */ 1
d10365 2
a10366 2
xcb_free_colormap (xcb_connection_t *c  /**< */,
                   xcb_colormap_t    cmap  /**< */)
d10369 4
a10372 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_COLORMAP,
        /* isvoid */ 1
d10392 3
a10394 3
xcb_copy_colormap_and_free_checked (xcb_connection_t *c  /**< */,
                                    xcb_colormap_t    mid  /**< */,
                                    xcb_colormap_t    src_cmap  /**< */)
d10397 4
a10400 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_COLORMAP_AND_FREE,
        /* isvoid */ 1
d10421 3
a10423 3
xcb_copy_colormap_and_free (xcb_connection_t *c  /**< */,
                            xcb_colormap_t    mid  /**< */,
                            xcb_colormap_t    src_cmap  /**< */)
d10426 4
a10429 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_COPY_COLORMAP_AND_FREE,
        /* isvoid */ 1
d10450 2
a10451 2
xcb_install_colormap_checked (xcb_connection_t *c  /**< */,
                              xcb_colormap_t    cmap  /**< */)
d10454 4
a10457 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_INSTALL_COLORMAP,
        /* isvoid */ 1
d10477 2
a10478 2
xcb_install_colormap (xcb_connection_t *c  /**< */,
                      xcb_colormap_t    cmap  /**< */)
d10481 4
a10484 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_INSTALL_COLORMAP,
        /* isvoid */ 1
d10504 2
a10505 2
xcb_uninstall_colormap_checked (xcb_connection_t *c  /**< */,
                                xcb_colormap_t    cmap  /**< */)
d10508 4
a10511 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNINSTALL_COLORMAP,
        /* isvoid */ 1
d10531 2
a10532 2
xcb_uninstall_colormap (xcb_connection_t *c  /**< */,
                        xcb_colormap_t    cmap  /**< */)
d10535 4
a10538 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_UNINSTALL_COLORMAP,
        /* isvoid */ 1
d10558 1
a10558 1
xcb_list_installed_colormaps_sizeof (const void  *_buffer  /**< */)
d10589 2
a10590 2
xcb_list_installed_colormaps (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */)
d10593 4
a10596 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_INSTALLED_COLORMAPS,
        /* isvoid */ 0
d10616 2
a10617 2
xcb_list_installed_colormaps_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */)
d10620 4
a10623 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_INSTALLED_COLORMAPS,
        /* isvoid */ 0
d10643 1
a10643 1
xcb_list_installed_colormaps_cmaps (const xcb_list_installed_colormaps_reply_t *R  /**< */)
d10649 1
a10649 1
xcb_list_installed_colormaps_cmaps_length (const xcb_list_installed_colormaps_reply_t *R  /**< */)
d10655 1
a10655 1
xcb_list_installed_colormaps_cmaps_end (const xcb_list_installed_colormaps_reply_t *R  /**< */)
d10665 1
a10665 1
xcb_list_installed_colormaps_reply (xcb_connection_t                       *c  /**< */,
d10667 1
a10667 1
                                    xcb_generic_error_t                   **e  /**< */)
d10673 5
a10677 5
xcb_alloc_color (xcb_connection_t *c  /**< */,
                 xcb_colormap_t    cmap  /**< */,
                 uint16_t          red  /**< */,
                 uint16_t          green  /**< */,
                 uint16_t          blue  /**< */)
d10680 4
a10683 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR,
        /* isvoid */ 0
d10707 5
a10711 5
xcb_alloc_color_unchecked (xcb_connection_t *c  /**< */,
                           xcb_colormap_t    cmap  /**< */,
                           uint16_t          red  /**< */,
                           uint16_t          green  /**< */,
                           uint16_t          blue  /**< */)
d10714 4
a10717 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR,
        /* isvoid */ 0
d10741 1
a10741 1
xcb_alloc_color_reply (xcb_connection_t          *c  /**< */,
d10743 1
a10743 1
                       xcb_generic_error_t      **e  /**< */)
d10749 1
a10749 1
xcb_alloc_named_color_sizeof (const void  *_buffer  /**< */)
d10780 4
a10783 4
xcb_alloc_named_color (xcb_connection_t *c  /**< */,
                       xcb_colormap_t    cmap  /**< */,
                       uint16_t          name_len  /**< */,
                       const char       *name  /**< */)
d10786 4
a10789 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_NAMED_COLOR,
        /* isvoid */ 0
d10816 4
a10819 4
xcb_alloc_named_color_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_colormap_t    cmap  /**< */,
                                 uint16_t          name_len  /**< */,
                                 const char       *name  /**< */)
d10822 4
a10825 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_NAMED_COLOR,
        /* isvoid */ 0
d10852 1
a10852 1
xcb_alloc_named_color_reply (xcb_connection_t                *c  /**< */,
d10854 1
a10854 1
                             xcb_generic_error_t            **e  /**< */)
d10860 1
a10860 1
xcb_alloc_color_cells_sizeof (const void  *_buffer  /**< */)
d10903 5
a10907 5
xcb_alloc_color_cells (xcb_connection_t *c  /**< */,
                       uint8_t           contiguous  /**< */,
                       xcb_colormap_t    cmap  /**< */,
                       uint16_t          colors  /**< */,
                       uint16_t          planes  /**< */)
d10910 4
a10913 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR_CELLS,
        /* isvoid */ 0
d10935 5
a10939 5
xcb_alloc_color_cells_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           contiguous  /**< */,
                                 xcb_colormap_t    cmap  /**< */,
                                 uint16_t          colors  /**< */,
                                 uint16_t          planes  /**< */)
d10942 4
a10945 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR_CELLS,
        /* isvoid */ 0
d10967 1
a10967 1
xcb_alloc_color_cells_pixels (const xcb_alloc_color_cells_reply_t *R  /**< */)
d10973 1
a10973 1
xcb_alloc_color_cells_pixels_length (const xcb_alloc_color_cells_reply_t *R  /**< */)
d10979 1
a10979 1
xcb_alloc_color_cells_pixels_end (const xcb_alloc_color_cells_reply_t *R  /**< */)
d10989 1
a10989 1
xcb_alloc_color_cells_masks (const xcb_alloc_color_cells_reply_t *R  /**< */)
d10996 1
a10996 1
xcb_alloc_color_cells_masks_length (const xcb_alloc_color_cells_reply_t *R  /**< */)
d11002 1
a11002 1
xcb_alloc_color_cells_masks_end (const xcb_alloc_color_cells_reply_t *R  /**< */)
d11005 2
a11006 2
    xcb_generic_iterator_t child = xcb_alloc_color_cells_pixels_end(R);
    i.data = ((uint32_t *) child.data) + (R->masks_len);
d11013 1
a11013 1
xcb_alloc_color_cells_reply (xcb_connection_t                *c  /**< */,
d11015 1
a11015 1
                             xcb_generic_error_t            **e  /**< */)
d11021 1
a11021 1
xcb_alloc_color_planes_sizeof (const void  *_buffer  /**< */)
d11052 7
a11058 7
xcb_alloc_color_planes (xcb_connection_t *c  /**< */,
                        uint8_t           contiguous  /**< */,
                        xcb_colormap_t    cmap  /**< */,
                        uint16_t          colors  /**< */,
                        uint16_t          reds  /**< */,
                        uint16_t          greens  /**< */,
                        uint16_t          blues  /**< */)
d11061 4
a11064 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR_PLANES,
        /* isvoid */ 0
d11088 7
a11094 7
xcb_alloc_color_planes_unchecked (xcb_connection_t *c  /**< */,
                                  uint8_t           contiguous  /**< */,
                                  xcb_colormap_t    cmap  /**< */,
                                  uint16_t          colors  /**< */,
                                  uint16_t          reds  /**< */,
                                  uint16_t          greens  /**< */,
                                  uint16_t          blues  /**< */)
d11097 4
a11100 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_ALLOC_COLOR_PLANES,
        /* isvoid */ 0
d11124 1
a11124 1
xcb_alloc_color_planes_pixels (const xcb_alloc_color_planes_reply_t *R  /**< */)
d11130 1
a11130 1
xcb_alloc_color_planes_pixels_length (const xcb_alloc_color_planes_reply_t *R  /**< */)
d11136 1
a11136 1
xcb_alloc_color_planes_pixels_end (const xcb_alloc_color_planes_reply_t *R  /**< */)
d11146 1
a11146 1
xcb_alloc_color_planes_reply (xcb_connection_t                 *c  /**< */,
d11148 1
a11148 1
                              xcb_generic_error_t             **e  /**< */)
d11154 2
a11155 2
xcb_free_colors_sizeof (const void  *_buffer  /**< */,
                        uint32_t     pixels_len  /**< */)
d11185 5
a11189 5
xcb_free_colors_checked (xcb_connection_t *c  /**< */,
                         xcb_colormap_t    cmap  /**< */,
                         uint32_t          plane_mask  /**< */,
                         uint32_t          pixels_len  /**< */,
                         const uint32_t   *pixels  /**< */)
d11192 4
a11195 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_FREE_COLORS,
        /* isvoid */ 1
d11221 5
a11225 5
xcb_free_colors (xcb_connection_t *c  /**< */,
                 xcb_colormap_t    cmap  /**< */,
                 uint32_t          plane_mask  /**< */,
                 uint32_t          pixels_len  /**< */,
                 const uint32_t   *pixels  /**< */)
d11228 4
a11231 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_FREE_COLORS,
        /* isvoid */ 1
d11256 22
d11279 1
a11279 1
xcb_coloritem_next (xcb_coloritem_iterator_t *i  /**< */)
d11287 1
a11287 1
xcb_coloritem_end (xcb_coloritem_iterator_t i  /**< */)
d11297 2
a11298 2
xcb_store_colors_sizeof (const void  *_buffer  /**< */,
                         uint32_t     items_len  /**< */)
d11328 4
a11331 4
xcb_store_colors_checked (xcb_connection_t      *c  /**< */,
                          xcb_colormap_t         cmap  /**< */,
                          uint32_t               items_len  /**< */,
                          const xcb_coloritem_t *items  /**< */)
d11334 4
a11337 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_STORE_COLORS,
        /* isvoid */ 1
d11362 4
a11365 4
xcb_store_colors (xcb_connection_t      *c  /**< */,
                  xcb_colormap_t         cmap  /**< */,
                  uint32_t               items_len  /**< */,
                  const xcb_coloritem_t *items  /**< */)
d11368 4
a11371 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_STORE_COLORS,
        /* isvoid */ 1
d11395 6
d11402 17
a11418 1
xcb_store_named_color_sizeof (const void  *_buffer  /**< */)
d11449 6
a11454 6
xcb_store_named_color_checked (xcb_connection_t *c  /**< */,
                               uint8_t           flags  /**< */,
                               xcb_colormap_t    cmap  /**< */,
                               uint32_t          pixel  /**< */,
                               uint16_t          name_len  /**< */,
                               const char       *name  /**< */)
d11457 4
a11460 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_STORE_NAMED_COLOR,
        /* isvoid */ 1
d11488 6
a11493 6
xcb_store_named_color (xcb_connection_t *c  /**< */,
                       uint8_t           flags  /**< */,
                       xcb_colormap_t    cmap  /**< */,
                       uint32_t          pixel  /**< */,
                       uint16_t          name_len  /**< */,
                       const char       *name  /**< */)
d11496 4
a11499 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_STORE_NAMED_COLOR,
        /* isvoid */ 1
d11526 22
d11549 1
a11549 1
xcb_rgb_next (xcb_rgb_iterator_t *i  /**< */)
d11557 1
a11557 1
xcb_rgb_end (xcb_rgb_iterator_t i  /**< */)
d11567 2
a11568 2
xcb_query_colors_sizeof (const void  *_buffer  /**< */,
                         uint32_t     pixels_len  /**< */)
d11598 4
a11601 4
xcb_query_colors (xcb_connection_t *c  /**< */,
                  xcb_colormap_t    cmap  /**< */,
                  uint32_t          pixels_len  /**< */,
                  const uint32_t   *pixels  /**< */)
d11604 4
a11607 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_COLORS,
        /* isvoid */ 0
d11632 4
a11635 4
xcb_query_colors_unchecked (xcb_connection_t *c  /**< */,
                            xcb_colormap_t    cmap  /**< */,
                            uint32_t          pixels_len  /**< */,
                            const uint32_t   *pixels  /**< */)
d11638 4
a11641 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_COLORS,
        /* isvoid */ 0
d11666 1
a11666 1
xcb_query_colors_colors (const xcb_query_colors_reply_t *R  /**< */)
d11672 1
a11672 1
xcb_query_colors_colors_length (const xcb_query_colors_reply_t *R  /**< */)
d11678 1
a11678 1
xcb_query_colors_colors_iterator (const xcb_query_colors_reply_t *R  /**< */)
d11688 1
a11688 1
xcb_query_colors_reply (xcb_connection_t           *c  /**< */,
d11690 1
a11690 1
                        xcb_generic_error_t       **e  /**< */)
d11696 1
a11696 1
xcb_lookup_color_sizeof (const void  *_buffer  /**< */)
d11727 4
a11730 4
xcb_lookup_color (xcb_connection_t *c  /**< */,
                  xcb_colormap_t    cmap  /**< */,
                  uint16_t          name_len  /**< */,
                  const char       *name  /**< */)
d11733 4
a11736 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LOOKUP_COLOR,
        /* isvoid */ 0
d11763 4
a11766 4
xcb_lookup_color_unchecked (xcb_connection_t *c  /**< */,
                            xcb_colormap_t    cmap  /**< */,
                            uint16_t          name_len  /**< */,
                            const char       *name  /**< */)
d11769 4
a11772 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_LOOKUP_COLOR,
        /* isvoid */ 0
d11799 1
a11799 1
xcb_lookup_color_reply (xcb_connection_t           *c  /**< */,
d11801 1
a11801 1
                        xcb_generic_error_t       **e  /**< */)
d11807 18
a11824 18
xcb_create_cursor_checked (xcb_connection_t *c  /**< */,
                           xcb_cursor_t      cid  /**< */,
                           xcb_pixmap_t      source  /**< */,
                           xcb_pixmap_t      mask  /**< */,
                           uint16_t          fore_red  /**< */,
                           uint16_t          fore_green  /**< */,
                           uint16_t          fore_blue  /**< */,
                           uint16_t          back_red  /**< */,
                           uint16_t          back_green  /**< */,
                           uint16_t          back_blue  /**< */,
                           uint16_t          x  /**< */,
                           uint16_t          y  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_CURSOR,
        /* isvoid */ 1
d11854 18
a11871 18
xcb_create_cursor (xcb_connection_t *c  /**< */,
                   xcb_cursor_t      cid  /**< */,
                   xcb_pixmap_t      source  /**< */,
                   xcb_pixmap_t      mask  /**< */,
                   uint16_t          fore_red  /**< */,
                   uint16_t          fore_green  /**< */,
                   uint16_t          fore_blue  /**< */,
                   uint16_t          back_red  /**< */,
                   uint16_t          back_green  /**< */,
                   uint16_t          back_blue  /**< */,
                   uint16_t          x  /**< */,
                   uint16_t          y  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_CURSOR,
        /* isvoid */ 1
d11901 18
a11918 18
xcb_create_glyph_cursor_checked (xcb_connection_t *c  /**< */,
                                 xcb_cursor_t      cid  /**< */,
                                 xcb_font_t        source_font  /**< */,
                                 xcb_font_t        mask_font  /**< */,
                                 uint16_t          source_char  /**< */,
                                 uint16_t          mask_char  /**< */,
                                 uint16_t          fore_red  /**< */,
                                 uint16_t          fore_green  /**< */,
                                 uint16_t          fore_blue  /**< */,
                                 uint16_t          back_red  /**< */,
                                 uint16_t          back_green  /**< */,
                                 uint16_t          back_blue  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_GLYPH_CURSOR,
        /* isvoid */ 1
d11948 18
a11965 18
xcb_create_glyph_cursor (xcb_connection_t *c  /**< */,
                         xcb_cursor_t      cid  /**< */,
                         xcb_font_t        source_font  /**< */,
                         xcb_font_t        mask_font  /**< */,
                         uint16_t          source_char  /**< */,
                         uint16_t          mask_char  /**< */,
                         uint16_t          fore_red  /**< */,
                         uint16_t          fore_green  /**< */,
                         uint16_t          fore_blue  /**< */,
                         uint16_t          back_red  /**< */,
                         uint16_t          back_green  /**< */,
                         uint16_t          back_blue  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CREATE_GLYPH_CURSOR,
        /* isvoid */ 1
d11995 2
a11996 2
xcb_free_cursor_checked (xcb_connection_t *c  /**< */,
                         xcb_cursor_t      cursor  /**< */)
d11999 4
a12002 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_CURSOR,
        /* isvoid */ 1
d12022 2
a12023 2
xcb_free_cursor (xcb_connection_t *c  /**< */,
                 xcb_cursor_t      cursor  /**< */)
d12026 4
a12029 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FREE_CURSOR,
        /* isvoid */ 1
d12049 8
a12056 8
xcb_recolor_cursor_checked (xcb_connection_t *c  /**< */,
                            xcb_cursor_t      cursor  /**< */,
                            uint16_t          fore_red  /**< */,
                            uint16_t          fore_green  /**< */,
                            uint16_t          fore_blue  /**< */,
                            uint16_t          back_red  /**< */,
                            uint16_t          back_green  /**< */,
                            uint16_t          back_blue  /**< */)
d12059 4
a12062 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_RECOLOR_CURSOR,
        /* isvoid */ 1
d12088 8
a12095 8
xcb_recolor_cursor (xcb_connection_t *c  /**< */,
                    xcb_cursor_t      cursor  /**< */,
                    uint16_t          fore_red  /**< */,
                    uint16_t          fore_green  /**< */,
                    uint16_t          fore_blue  /**< */,
                    uint16_t          back_red  /**< */,
                    uint16_t          back_green  /**< */,
                    uint16_t          back_blue  /**< */)
d12098 4
a12101 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_RECOLOR_CURSOR,
        /* isvoid */ 1
d12127 5
a12131 5
xcb_query_best_size (xcb_connection_t *c  /**< */,
                     uint8_t           _class  /**< */,
                     xcb_drawable_t    drawable  /**< */,
                     uint16_t          width  /**< */,
                     uint16_t          height  /**< */)
d12134 4
a12137 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_BEST_SIZE,
        /* isvoid */ 0
d12159 5
a12163 5
xcb_query_best_size_unchecked (xcb_connection_t *c  /**< */,
                               uint8_t           _class  /**< */,
                               xcb_drawable_t    drawable  /**< */,
                               uint16_t          width  /**< */,
                               uint16_t          height  /**< */)
d12166 4
a12169 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_BEST_SIZE,
        /* isvoid */ 0
d12191 1
a12191 1
xcb_query_best_size_reply (xcb_connection_t              *c  /**< */,
d12193 1
a12193 1
                           xcb_generic_error_t          **e  /**< */)
d12199 1
a12199 1
xcb_query_extension_sizeof (const void  *_buffer  /**< */)
d12230 3
a12232 3
xcb_query_extension (xcb_connection_t *c  /**< */,
                     uint16_t          name_len  /**< */,
                     const char       *name  /**< */)
d12235 4
a12238 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_EXTENSION,
        /* isvoid */ 0
d12264 3
a12266 3
xcb_query_extension_unchecked (xcb_connection_t *c  /**< */,
                               uint16_t          name_len  /**< */,
                               const char       *name  /**< */)
d12269 4
a12272 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_QUERY_EXTENSION,
        /* isvoid */ 0
d12298 1
a12298 1
xcb_query_extension_reply (xcb_connection_t              *c  /**< */,
d12300 1
a12300 1
                           xcb_generic_error_t          **e  /**< */)
d12306 1
a12306 1
xcb_list_extensions_sizeof (const void  *_buffer  /**< */)
d12342 1
a12342 1
xcb_list_extensions (xcb_connection_t *c  /**< */)
d12345 4
a12348 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_EXTENSIONS,
        /* isvoid */ 0
d12367 1
a12367 1
xcb_list_extensions_unchecked (xcb_connection_t *c  /**< */)
d12370 4
a12373 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_EXTENSIONS,
        /* isvoid */ 0
d12392 1
a12392 1
xcb_list_extensions_names_length (const xcb_list_extensions_reply_t *R  /**< */)
d12398 1
a12398 1
xcb_list_extensions_names_iterator (const xcb_list_extensions_reply_t *R  /**< */)
d12408 1
a12408 1
xcb_list_extensions_reply (xcb_connection_t              *c  /**< */,
d12410 1
a12410 1
                           xcb_generic_error_t          **e  /**< */)
d12416 1
a12416 1
xcb_change_keyboard_mapping_sizeof (const void  *_buffer  /**< */)
d12447 5
a12451 5
xcb_change_keyboard_mapping_checked (xcb_connection_t   *c  /**< */,
                                     uint8_t             keycode_count  /**< */,
                                     xcb_keycode_t       first_keycode  /**< */,
                                     uint8_t             keysyms_per_keycode  /**< */,
                                     const xcb_keysym_t *keysyms  /**< */)
d12454 4
a12457 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_KEYBOARD_MAPPING,
        /* isvoid */ 1
d12484 5
a12488 5
xcb_change_keyboard_mapping (xcb_connection_t   *c  /**< */,
                             uint8_t             keycode_count  /**< */,
                             xcb_keycode_t       first_keycode  /**< */,
                             uint8_t             keysyms_per_keycode  /**< */,
                             const xcb_keysym_t *keysyms  /**< */)
d12491 4
a12494 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_KEYBOARD_MAPPING,
        /* isvoid */ 1
d12520 22
d12543 1
a12543 1
xcb_get_keyboard_mapping_sizeof (const void  *_buffer  /**< */)
d12574 3
a12576 3
xcb_get_keyboard_mapping (xcb_connection_t *c  /**< */,
                          xcb_keycode_t     first_keycode  /**< */,
                          uint8_t           count  /**< */)
d12579 4
a12582 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_KEYBOARD_MAPPING,
        /* isvoid */ 0
d12603 3
a12605 3
xcb_get_keyboard_mapping_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_keycode_t     first_keycode  /**< */,
                                    uint8_t           count  /**< */)
d12608 4
a12611 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_KEYBOARD_MAPPING,
        /* isvoid */ 0
d12632 1
a12632 1
xcb_get_keyboard_mapping_keysyms (const xcb_get_keyboard_mapping_reply_t *R  /**< */)
d12638 1
a12638 1
xcb_get_keyboard_mapping_keysyms_length (const xcb_get_keyboard_mapping_reply_t *R  /**< */)
d12644 1
a12644 1
xcb_get_keyboard_mapping_keysyms_end (const xcb_get_keyboard_mapping_reply_t *R  /**< */)
d12654 1
a12654 1
xcb_get_keyboard_mapping_reply (xcb_connection_t                   *c  /**< */,
d12656 1
a12656 1
                                xcb_generic_error_t               **e  /**< */)
d12662 202
a12863 1
xcb_change_keyboard_control_sizeof (const void  *_buffer  /**< */)
d12878 1
a12878 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d12880 1
a12880 1
    xcb_align_to = ALIGNOF(uint32_t);
d12894 3
a12896 3
xcb_change_keyboard_control_checked (xcb_connection_t *c  /**< */,
                                     uint32_t          value_mask  /**< */,
                                     const uint32_t   *value_list  /**< */)
d12899 4
a12902 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_KEYBOARD_CONTROL,
        /* isvoid */ 1
d12905 1
a12905 1
    struct iovec xcb_parts[6];
d12916 1
a12916 1
    /* uint32_t value_list */
d12918 2
a12919 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d12926 3
a12928 3
xcb_change_keyboard_control (xcb_connection_t *c  /**< */,
                             uint32_t          value_mask  /**< */,
                             const uint32_t   *value_list  /**< */)
d12931 4
a12934 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_KEYBOARD_CONTROL,
        /* isvoid */ 1
d12937 1
a12937 1
    struct iovec xcb_parts[6];
d12948 1
a12948 1
    /* uint32_t value_list */
d12950 69
a13018 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d13021 1
d13025 6
d13032 1
a13032 1
xcb_get_keyboard_control (xcb_connection_t *c  /**< */)
d13035 4
a13038 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_KEYBOARD_CONTROL,
        /* isvoid */ 0
d13057 1
a13057 1
xcb_get_keyboard_control_unchecked (xcb_connection_t *c  /**< */)
d13060 4
a13063 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_KEYBOARD_CONTROL,
        /* isvoid */ 0
d13082 1
a13082 1
xcb_get_keyboard_control_reply (xcb_connection_t                   *c  /**< */,
d13084 1
a13084 1
                                xcb_generic_error_t               **e  /**< */)
d13090 2
a13091 2
xcb_bell_checked (xcb_connection_t *c  /**< */,
                  int8_t            percent  /**< */)
d13094 4
a13097 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_BELL,
        /* isvoid */ 1
d13116 2
a13117 2
xcb_bell (xcb_connection_t *c  /**< */,
          int8_t            percent  /**< */)
d13120 4
a13123 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_BELL,
        /* isvoid */ 1
d13142 6
a13147 6
xcb_change_pointer_control_checked (xcb_connection_t *c  /**< */,
                                    int16_t           acceleration_numerator  /**< */,
                                    int16_t           acceleration_denominator  /**< */,
                                    int16_t           threshold  /**< */,
                                    uint8_t           do_acceleration  /**< */,
                                    uint8_t           do_threshold  /**< */)
d13150 4
a13153 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_POINTER_CONTROL,
        /* isvoid */ 1
d13177 6
a13182 6
xcb_change_pointer_control (xcb_connection_t *c  /**< */,
                            int16_t           acceleration_numerator  /**< */,
                            int16_t           acceleration_denominator  /**< */,
                            int16_t           threshold  /**< */,
                            uint8_t           do_acceleration  /**< */,
                            uint8_t           do_threshold  /**< */)
d13185 4
a13188 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_POINTER_CONTROL,
        /* isvoid */ 1
d13212 1
a13212 1
xcb_get_pointer_control (xcb_connection_t *c  /**< */)
d13215 4
a13218 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_POINTER_CONTROL,
        /* isvoid */ 0
d13237 1
a13237 1
xcb_get_pointer_control_unchecked (xcb_connection_t *c  /**< */)
d13240 4
a13243 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_POINTER_CONTROL,
        /* isvoid */ 0
d13262 1
a13262 1
xcb_get_pointer_control_reply (xcb_connection_t                  *c  /**< */,
d13264 1
a13264 1
                               xcb_generic_error_t              **e  /**< */)
d13270 5
a13274 5
xcb_set_screen_saver_checked (xcb_connection_t *c  /**< */,
                              int16_t           timeout  /**< */,
                              int16_t           interval  /**< */,
                              uint8_t           prefer_blanking  /**< */,
                              uint8_t           allow_exposures  /**< */)
d13277 4
a13280 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_SCREEN_SAVER,
        /* isvoid */ 1
d13303 5
a13307 5
xcb_set_screen_saver (xcb_connection_t *c  /**< */,
                      int16_t           timeout  /**< */,
                      int16_t           interval  /**< */,
                      uint8_t           prefer_blanking  /**< */,
                      uint8_t           allow_exposures  /**< */)
d13310 4
a13313 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_SCREEN_SAVER,
        /* isvoid */ 1
d13336 1
a13336 1
xcb_get_screen_saver (xcb_connection_t *c  /**< */)
d13339 4
a13342 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_SCREEN_SAVER,
        /* isvoid */ 0
d13361 1
a13361 1
xcb_get_screen_saver_unchecked (xcb_connection_t *c  /**< */)
d13364 4
a13367 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_SCREEN_SAVER,
        /* isvoid */ 0
d13386 1
a13386 1
xcb_get_screen_saver_reply (xcb_connection_t               *c  /**< */,
d13388 1
a13388 1
                            xcb_generic_error_t           **e  /**< */)
d13394 1
a13394 1
xcb_change_hosts_sizeof (const void  *_buffer  /**< */)
d13425 5
a13429 5
xcb_change_hosts_checked (xcb_connection_t *c  /**< */,
                          uint8_t           mode  /**< */,
                          uint8_t           family  /**< */,
                          uint16_t          address_len  /**< */,
                          const uint8_t    *address  /**< */)
d13432 4
a13435 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_HOSTS,
        /* isvoid */ 1
d13462 5
a13466 5
xcb_change_hosts (xcb_connection_t *c  /**< */,
                  uint8_t           mode  /**< */,
                  uint8_t           family  /**< */,
                  uint16_t          address_len  /**< */,
                  const uint8_t    *address  /**< */)
d13469 4
a13472 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_CHANGE_HOSTS,
        /* isvoid */ 1
d13498 22
d13521 1
a13521 1
xcb_host_sizeof (const void  *_buffer  /**< */)
d13539 9
d13561 1
a13561 1
xcb_host_address (const xcb_host_t *R  /**< */)
d13567 1
a13567 1
xcb_host_address_length (const xcb_host_t *R  /**< */)
d13573 1
a13573 1
xcb_host_address_end (const xcb_host_t *R  /**< */)
d13583 1
a13583 1
xcb_host_next (xcb_host_iterator_t *i  /**< */)
d13594 1
a13594 1
xcb_host_end (xcb_host_iterator_t i  /**< */)
d13606 1
a13606 1
xcb_list_hosts_sizeof (const void  *_buffer  /**< */)
d13642 1
a13642 1
xcb_list_hosts (xcb_connection_t *c  /**< */)
d13645 4
a13648 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_HOSTS,
        /* isvoid */ 0
d13667 1
a13667 1
xcb_list_hosts_unchecked (xcb_connection_t *c  /**< */)
d13670 4
a13673 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_LIST_HOSTS,
        /* isvoid */ 0
d13692 1
a13692 1
xcb_list_hosts_hosts_length (const xcb_list_hosts_reply_t *R  /**< */)
d13698 1
a13698 1
xcb_list_hosts_hosts_iterator (const xcb_list_hosts_reply_t *R  /**< */)
d13708 1
a13708 1
xcb_list_hosts_reply (xcb_connection_t         *c  /**< */,
d13710 1
a13710 1
                      xcb_generic_error_t     **e  /**< */)
d13716 2
a13717 2
xcb_set_access_control_checked (xcb_connection_t *c  /**< */,
                                uint8_t           mode  /**< */)
d13720 4
a13723 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_ACCESS_CONTROL,
        /* isvoid */ 1
d13742 2
a13743 2
xcb_set_access_control (xcb_connection_t *c  /**< */,
                        uint8_t           mode  /**< */)
d13746 4
a13749 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_ACCESS_CONTROL,
        /* isvoid */ 1
d13768 2
a13769 2
xcb_set_close_down_mode_checked (xcb_connection_t *c  /**< */,
                                 uint8_t           mode  /**< */)
d13772 4
a13775 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_CLOSE_DOWN_MODE,
        /* isvoid */ 1
d13794 2
a13795 2
xcb_set_close_down_mode (xcb_connection_t *c  /**< */,
                         uint8_t           mode  /**< */)
d13798 4
a13801 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_SET_CLOSE_DOWN_MODE,
        /* isvoid */ 1
d13820 2
a13821 2
xcb_kill_client_checked (xcb_connection_t *c  /**< */,
                         uint32_t          resource  /**< */)
d13824 4
a13827 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_KILL_CLIENT,
        /* isvoid */ 1
d13847 2
a13848 2
xcb_kill_client (xcb_connection_t *c  /**< */,
                 uint32_t          resource  /**< */)
d13851 4
a13854 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_KILL_CLIENT,
        /* isvoid */ 1
d13874 1
a13874 1
xcb_rotate_properties_sizeof (const void  *_buffer  /**< */)
d13905 5
a13909 5
xcb_rotate_properties_checked (xcb_connection_t *c  /**< */,
                               xcb_window_t      window  /**< */,
                               uint16_t          atoms_len  /**< */,
                               int16_t           delta  /**< */,
                               const xcb_atom_t *atoms  /**< */)
d13912 4
a13915 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_ROTATE_PROPERTIES,
        /* isvoid */ 1
d13942 5
a13946 5
xcb_rotate_properties (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */,
                       uint16_t          atoms_len  /**< */,
                       int16_t           delta  /**< */,
                       const xcb_atom_t *atoms  /**< */)
d13949 4
a13952 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_ROTATE_PROPERTIES,
        /* isvoid */ 1
d13978 22
d14001 2
a14002 2
xcb_force_screen_saver_checked (xcb_connection_t *c  /**< */,
                                uint8_t           mode  /**< */)
d14005 4
a14008 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FORCE_SCREEN_SAVER,
        /* isvoid */ 1
d14027 2
a14028 2
xcb_force_screen_saver (xcb_connection_t *c  /**< */,
                        uint8_t           mode  /**< */)
d14031 4
a14034 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_FORCE_SCREEN_SAVER,
        /* isvoid */ 1
d14053 1
a14053 1
xcb_set_pointer_mapping_sizeof (const void  *_buffer  /**< */)
d14084 3
a14086 3
xcb_set_pointer_mapping (xcb_connection_t *c  /**< */,
                         uint8_t           map_len  /**< */,
                         const uint8_t    *map  /**< */)
d14089 4
a14092 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_POINTER_MAPPING,
        /* isvoid */ 0
d14116 3
a14118 3
xcb_set_pointer_mapping_unchecked (xcb_connection_t *c  /**< */,
                                   uint8_t           map_len  /**< */,
                                   const uint8_t    *map  /**< */)
d14121 4
a14124 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_POINTER_MAPPING,
        /* isvoid */ 0
d14148 1
a14148 1
xcb_set_pointer_mapping_reply (xcb_connection_t                  *c  /**< */,
d14150 1
a14150 1
                               xcb_generic_error_t              **e  /**< */)
d14156 1
a14156 1
xcb_get_pointer_mapping_sizeof (const void  *_buffer  /**< */)
d14187 1
a14187 1
xcb_get_pointer_mapping (xcb_connection_t *c  /**< */)
d14190 4
a14193 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_POINTER_MAPPING,
        /* isvoid */ 0
d14212 1
a14212 1
xcb_get_pointer_mapping_unchecked (xcb_connection_t *c  /**< */)
d14215 4
a14218 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_POINTER_MAPPING,
        /* isvoid */ 0
d14237 1
a14237 1
xcb_get_pointer_mapping_map (const xcb_get_pointer_mapping_reply_t *R  /**< */)
d14243 1
a14243 1
xcb_get_pointer_mapping_map_length (const xcb_get_pointer_mapping_reply_t *R  /**< */)
d14249 1
a14249 1
xcb_get_pointer_mapping_map_end (const xcb_get_pointer_mapping_reply_t *R  /**< */)
d14259 1
a14259 1
xcb_get_pointer_mapping_reply (xcb_connection_t                  *c  /**< */,
d14261 1
a14261 1
                               xcb_generic_error_t              **e  /**< */)
d14267 1
a14267 1
xcb_set_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d14298 3
a14300 3
xcb_set_modifier_mapping (xcb_connection_t    *c  /**< */,
                          uint8_t              keycodes_per_modifier  /**< */,
                          const xcb_keycode_t *keycodes  /**< */)
d14303 4
a14306 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_MODIFIER_MAPPING,
        /* isvoid */ 0
d14330 3
a14332 3
xcb_set_modifier_mapping_unchecked (xcb_connection_t    *c  /**< */,
                                    uint8_t              keycodes_per_modifier  /**< */,
                                    const xcb_keycode_t *keycodes  /**< */)
d14335 4
a14338 4
        /* count */ 4,
        /* ext */ 0,
        /* opcode */ XCB_SET_MODIFIER_MAPPING,
        /* isvoid */ 0
d14362 1
a14362 1
xcb_set_modifier_mapping_reply (xcb_connection_t                   *c  /**< */,
d14364 1
a14364 1
                                xcb_generic_error_t               **e  /**< */)
d14370 1
a14370 1
xcb_get_modifier_mapping_sizeof (const void  *_buffer  /**< */)
d14401 1
a14401 1
xcb_get_modifier_mapping (xcb_connection_t *c  /**< */)
d14404 4
a14407 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_MODIFIER_MAPPING,
        /* isvoid */ 0
d14426 1
a14426 1
xcb_get_modifier_mapping_unchecked (xcb_connection_t *c  /**< */)
d14429 4
a14432 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_GET_MODIFIER_MAPPING,
        /* isvoid */ 0
d14451 1
a14451 1
xcb_get_modifier_mapping_keycodes (const xcb_get_modifier_mapping_reply_t *R  /**< */)
d14457 1
a14457 1
xcb_get_modifier_mapping_keycodes_length (const xcb_get_modifier_mapping_reply_t *R  /**< */)
d14463 1
a14463 1
xcb_get_modifier_mapping_keycodes_end (const xcb_get_modifier_mapping_reply_t *R  /**< */)
d14473 1
a14473 1
xcb_get_modifier_mapping_reply (xcb_connection_t                   *c  /**< */,
d14475 1
a14475 1
                                xcb_generic_error_t               **e  /**< */)
d14481 1
a14481 1
xcb_no_operation_checked (xcb_connection_t *c  /**< */)
d14484 4
a14487 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_NO_OPERATION,
        /* isvoid */ 1
d14506 1
a14506 1
xcb_no_operation (xcb_connection_t *c  /**< */)
d14509 4
a14512 4
        /* count */ 2,
        /* ext */ 0,
        /* opcode */ XCB_NO_OPERATION,
        /* isvoid */ 1
@


1.5
log
@Update build system and generated files for libxcb 1.10.
@
text
@a17 10

/*****************************************************************************
 **
 ** void xcb_char2b_next
 ** 
 ** @@param xcb_char2b_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a25 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_char2b_end
 ** 
 ** @@param xcb_char2b_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a35 10

/*****************************************************************************
 **
 ** void xcb_window_next
 ** 
 ** @@param xcb_window_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a43 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_window_end
 ** 
 ** @@param xcb_window_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a53 10

/*****************************************************************************
 **
 ** void xcb_pixmap_next
 ** 
 ** @@param xcb_pixmap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a61 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_pixmap_end
 ** 
 ** @@param xcb_pixmap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a71 10

/*****************************************************************************
 **
 ** void xcb_cursor_next
 ** 
 ** @@param xcb_cursor_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a79 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_cursor_end
 ** 
 ** @@param xcb_cursor_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a89 10

/*****************************************************************************
 **
 ** void xcb_font_next
 ** 
 ** @@param xcb_font_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a97 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_font_end
 ** 
 ** @@param xcb_font_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a107 10

/*****************************************************************************
 **
 ** void xcb_gcontext_next
 ** 
 ** @@param xcb_gcontext_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a115 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_gcontext_end
 ** 
 ** @@param xcb_gcontext_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a125 10

/*****************************************************************************
 **
 ** void xcb_colormap_next
 ** 
 ** @@param xcb_colormap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a133 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_colormap_end
 ** 
 ** @@param xcb_colormap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a143 10

/*****************************************************************************
 **
 ** void xcb_atom_next
 ** 
 ** @@param xcb_atom_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a151 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_atom_end
 ** 
 ** @@param xcb_atom_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a161 10

/*****************************************************************************
 **
 ** void xcb_drawable_next
 ** 
 ** @@param xcb_drawable_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a169 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_drawable_end
 ** 
 ** @@param xcb_drawable_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a179 10

/*****************************************************************************
 **
 ** void xcb_fontable_next
 ** 
 ** @@param xcb_fontable_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a187 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_fontable_end
 ** 
 ** @@param xcb_fontable_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a197 10

/*****************************************************************************
 **
 ** void xcb_visualid_next
 ** 
 ** @@param xcb_visualid_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a205 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_visualid_end
 ** 
 ** @@param xcb_visualid_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a215 10

/*****************************************************************************
 **
 ** void xcb_timestamp_next
 ** 
 ** @@param xcb_timestamp_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a223 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_timestamp_end
 ** 
 ** @@param xcb_timestamp_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a233 10

/*****************************************************************************
 **
 ** void xcb_keysym_next
 ** 
 ** @@param xcb_keysym_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a241 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_keysym_end
 ** 
 ** @@param xcb_keysym_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a251 10

/*****************************************************************************
 **
 ** void xcb_keycode_next
 ** 
 ** @@param xcb_keycode_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a259 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_keycode_end
 ** 
 ** @@param xcb_keycode_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a269 10

/*****************************************************************************
 **
 ** void xcb_button_next
 ** 
 ** @@param xcb_button_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a277 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_button_end
 ** 
 ** @@param xcb_button_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a287 10

/*****************************************************************************
 **
 ** void xcb_point_next
 ** 
 ** @@param xcb_point_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a295 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_point_end
 ** 
 ** @@param xcb_point_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a305 10

/*****************************************************************************
 **
 ** void xcb_rectangle_next
 ** 
 ** @@param xcb_rectangle_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a313 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_rectangle_end
 ** 
 ** @@param xcb_rectangle_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a323 10

/*****************************************************************************
 **
 ** void xcb_arc_next
 ** 
 ** @@param xcb_arc_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a331 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_arc_end
 ** 
 ** @@param xcb_arc_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a341 10

/*****************************************************************************
 **
 ** void xcb_format_next
 ** 
 ** @@param xcb_format_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a349 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_format_end
 ** 
 ** @@param xcb_format_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a359 10

/*****************************************************************************
 **
 ** void xcb_visualtype_next
 ** 
 ** @@param xcb_visualtype_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a367 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_visualtype_end
 ** 
 ** @@param xcb_visualtype_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a408 10

/*****************************************************************************
 **
 ** xcb_visualtype_t * xcb_depth_visuals
 ** 
 ** @@param const xcb_depth_t *R
 ** @@returns xcb_visualtype_t *
 **
 *****************************************************************************/
 
a414 10

/*****************************************************************************
 **
 ** int xcb_depth_visuals_length
 ** 
 ** @@param const xcb_depth_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a420 10

/*****************************************************************************
 **
 ** xcb_visualtype_iterator_t xcb_depth_visuals_iterator
 ** 
 ** @@param const xcb_depth_t *R
 ** @@returns xcb_visualtype_iterator_t
 **
 *****************************************************************************/
 
a430 10

/*****************************************************************************
 **
 ** void xcb_depth_next
 ** 
 ** @@param xcb_depth_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a441 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_depth_end
 ** 
 ** @@param xcb_depth_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a489 10

/*****************************************************************************
 **
 ** int xcb_screen_allowed_depths_length
 ** 
 ** @@param const xcb_screen_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a495 10

/*****************************************************************************
 **
 ** xcb_depth_iterator_t xcb_screen_allowed_depths_iterator
 ** 
 ** @@param const xcb_screen_t *R
 ** @@returns xcb_depth_iterator_t
 **
 *****************************************************************************/
 
a505 10

/*****************************************************************************
 **
 ** void xcb_screen_next
 ** 
 ** @@param xcb_screen_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a516 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_screen_end
 ** 
 ** @@param xcb_screen_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a571 10

/*****************************************************************************
 **
 ** char * xcb_setup_request_authorization_protocol_name
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a577 10

/*****************************************************************************
 **
 ** int xcb_setup_request_authorization_protocol_name_length
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a583 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_request_authorization_protocol_name_end
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a593 10

/*****************************************************************************
 **
 ** char * xcb_setup_request_authorization_protocol_data
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a600 10

/*****************************************************************************
 **
 ** int xcb_setup_request_authorization_protocol_data_length
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a606 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_request_authorization_protocol_data_end
 ** 
 ** @@param const xcb_setup_request_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a617 10

/*****************************************************************************
 **
 ** void xcb_setup_request_next
 ** 
 ** @@param xcb_setup_request_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a628 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_request_end
 ** 
 ** @@param xcb_setup_request_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a671 10

/*****************************************************************************
 **
 ** char * xcb_setup_failed_reason
 ** 
 ** @@param const xcb_setup_failed_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a677 10

/*****************************************************************************
 **
 ** int xcb_setup_failed_reason_length
 ** 
 ** @@param const xcb_setup_failed_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a683 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_failed_reason_end
 ** 
 ** @@param const xcb_setup_failed_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a693 10

/*****************************************************************************
 **
 ** void xcb_setup_failed_next
 ** 
 ** @@param xcb_setup_failed_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a704 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_failed_end
 ** 
 ** @@param xcb_setup_failed_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a747 10

/*****************************************************************************
 **
 ** char * xcb_setup_authenticate_reason
 ** 
 ** @@param const xcb_setup_authenticate_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a753 10

/*****************************************************************************
 **
 ** int xcb_setup_authenticate_reason_length
 ** 
 ** @@param const xcb_setup_authenticate_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a759 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_authenticate_reason_end
 ** 
 ** @@param const xcb_setup_authenticate_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a769 10

/*****************************************************************************
 **
 ** void xcb_setup_authenticate_next
 ** 
 ** @@param xcb_setup_authenticate_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a780 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_authenticate_end
 ** 
 ** @@param xcb_setup_authenticate_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a852 10

/*****************************************************************************
 **
 ** char * xcb_setup_vendor
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a858 10

/*****************************************************************************
 **
 ** int xcb_setup_vendor_length
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a864 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_vendor_end
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a874 10

/*****************************************************************************
 **
 ** xcb_format_t * xcb_setup_pixmap_formats
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns xcb_format_t *
 **
 *****************************************************************************/
 
a881 10

/*****************************************************************************
 **
 ** int xcb_setup_pixmap_formats_length
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a887 10

/*****************************************************************************
 **
 ** xcb_format_iterator_t xcb_setup_pixmap_formats_iterator
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns xcb_format_iterator_t
 **
 *****************************************************************************/
 
a898 10

/*****************************************************************************
 **
 ** int xcb_setup_roots_length
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a904 10

/*****************************************************************************
 **
 ** xcb_screen_iterator_t xcb_setup_roots_iterator
 ** 
 ** @@param const xcb_setup_t *R
 ** @@returns xcb_screen_iterator_t
 **
 *****************************************************************************/
 
a915 10

/*****************************************************************************
 **
 ** void xcb_setup_next
 ** 
 ** @@param xcb_setup_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a926 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_setup_end
 ** 
 ** @@param xcb_setup_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a938 10

/*****************************************************************************
 **
 ** void xcb_client_message_data_next
 ** 
 ** @@param xcb_client_message_data_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a946 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_client_message_data_end
 ** 
 ** @@param xcb_client_message_data_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a987 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           depth
 ** @@param xcb_window_t      wid
 ** @@param xcb_window_t      parent
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          border_width
 ** @@param uint16_t          _class
 ** @@param xcb_visualid_t    visual
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1009 1
a1009 1
    
d1013 1
a1013 1
    
d1025 1
a1025 1
    
d1035 1
a1035 1
    
a1039 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           depth
 ** @@param xcb_window_t      wid
 ** @@param xcb_window_t      parent
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          border_width
 ** @@param uint16_t          _class
 ** @@param xcb_visualid_t    visual
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1061 1
a1061 1
    
d1065 1
a1065 1
    
d1077 1
a1077 1
    
d1087 1
a1087 1
    
a1122 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_window_attributes_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1135 1
a1135 1
    
d1139 1
a1139 1
    
d1143 1
a1143 1
    
d1153 1
a1153 1
    
a1157 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_window_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1170 1
a1170 1
    
d1174 1
a1174 1
    
d1178 1
a1178 1
    
d1188 1
a1188 1
    
a1192 11

/*****************************************************************************
 **
 ** xcb_get_window_attributes_cookie_t xcb_get_window_attributes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_get_window_attributes_cookie_t
 **
 *****************************************************************************/
 
d1203 1
a1203 1
    
d1207 1
a1207 1
    
d1210 1
a1210 1
    
d1215 1
a1215 1
    
a1219 11

/*****************************************************************************
 **
 ** xcb_get_window_attributes_cookie_t xcb_get_window_attributes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_get_window_attributes_cookie_t
 **
 *****************************************************************************/
 
d1230 1
a1230 1
    
d1234 1
a1234 1
    
d1237 1
a1237 1
    
d1242 1
a1242 1
    
a1246 12

/*****************************************************************************
 **
 ** xcb_get_window_attributes_reply_t * xcb_get_window_attributes_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_get_window_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_get_window_attributes_reply_t *
 **
 *****************************************************************************/
 
a1254 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_destroy_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1265 1
a1265 1
    
d1269 1
a1269 1
    
d1272 1
a1272 1
    
d1277 1
a1277 1
    
a1281 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_destroy_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1292 1
a1292 1
    
d1296 1
a1296 1
    
d1299 1
a1299 1
    
d1304 1
a1304 1
    
a1308 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_destroy_subwindows_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1319 1
a1319 1
    
d1323 1
a1323 1
    
d1326 1
a1326 1
    
d1331 1
a1331 1
    
a1335 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_destroy_subwindows
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1346 1
a1346 1
    
d1350 1
a1350 1
    
d1353 1
a1353 1
    
d1358 1
a1358 1
    
a1362 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_save_set_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1374 1
a1374 1
    
d1378 1
a1378 1
    
d1381 1
a1381 1
    
d1386 1
a1386 1
    
a1390 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_save_set
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1402 1
a1402 1
    
d1406 1
a1406 1
    
d1409 1
a1409 1
    
d1414 1
a1414 1
    
a1418 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_reparent_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_window_t      parent
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1432 1
a1432 1
    
d1436 1
a1436 1
    
d1442 1
a1442 1
    
d1447 1
a1447 1
    
a1451 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_reparent_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_window_t      parent
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1465 1
a1465 1
    
d1469 1
a1469 1
    
d1475 1
a1475 1
    
d1480 1
a1480 1
    
a1484 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_map_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1495 1
a1495 1
    
d1499 1
a1499 1
    
d1502 1
a1502 1
    
d1507 1
a1507 1
    
a1511 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_map_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1522 1
a1522 1
    
d1526 1
a1526 1
    
d1529 1
a1529 1
    
d1534 1
a1534 1
    
a1538 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_map_subwindows_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1549 1
a1549 1
    
d1553 1
a1553 1
    
d1556 1
a1556 1
    
d1561 1
a1561 1
    
a1565 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_map_subwindows
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1576 1
a1576 1
    
d1580 1
a1580 1
    
d1583 1
a1583 1
    
d1588 1
a1588 1
    
a1592 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_unmap_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1603 1
a1603 1
    
d1607 1
a1607 1
    
d1610 1
a1610 1
    
d1615 1
a1615 1
    
a1619 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_unmap_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1630 1
a1630 1
    
d1634 1
a1634 1
    
d1637 1
a1637 1
    
d1642 1
a1642 1
    
a1646 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_unmap_subwindows_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1657 1
a1657 1
    
d1661 1
a1661 1
    
d1664 1
a1664 1
    
d1669 1
a1669 1
    
a1673 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_unmap_subwindows
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1684 1
a1684 1
    
d1688 1
a1688 1
    
d1691 1
a1691 1
    
d1696 1
a1696 1
    
a1731 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_configure_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1744 1
a1744 1
    
d1748 1
a1748 1
    
d1753 1
a1753 1
    
d1763 1
a1763 1
    
a1767 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_configure_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1780 1
a1780 1
    
d1784 1
a1784 1
    
d1789 1
a1789 1
    
d1799 1
a1799 1
    
a1803 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_circulate_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           direction
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1815 1
a1815 1
    
d1819 1
a1819 1
    
d1822 1
a1822 1
    
d1827 1
a1827 1
    
a1831 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_circulate_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           direction
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1843 1
a1843 1
    
d1847 1
a1847 1
    
d1850 1
a1850 1
    
d1855 1
a1855 1
    
a1859 11

/*****************************************************************************
 **
 ** xcb_get_geometry_cookie_t xcb_get_geometry
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_get_geometry_cookie_t
 **
 *****************************************************************************/
 
d1870 1
a1870 1
    
d1874 1
a1874 1
    
d1877 1
a1877 1
    
d1882 1
a1882 1
    
a1886 11

/*****************************************************************************
 **
 ** xcb_get_geometry_cookie_t xcb_get_geometry_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_get_geometry_cookie_t
 **
 *****************************************************************************/
 
d1897 1
a1897 1
    
d1901 1
a1901 1
    
d1904 1
a1904 1
    
d1909 1
a1909 1
    
a1913 12

/*****************************************************************************
 **
 ** xcb_get_geometry_reply_t * xcb_get_geometry_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_get_geometry_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_get_geometry_reply_t *
 **
 *****************************************************************************/
 
a1952 11

/*****************************************************************************
 **
 ** xcb_query_tree_cookie_t xcb_query_tree
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_query_tree_cookie_t
 **
 *****************************************************************************/
 
d1963 1
a1963 1
    
d1967 1
a1967 1
    
d1970 1
a1970 1
    
d1975 1
a1975 1
    
a1979 11

/*****************************************************************************
 **
 ** xcb_query_tree_cookie_t xcb_query_tree_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_query_tree_cookie_t
 **
 *****************************************************************************/
 
d1990 1
a1990 1
    
d1994 1
a1994 1
    
d1997 1
a1997 1
    
d2002 1
a2002 1
    
a2006 10

/*****************************************************************************
 **
 ** xcb_window_t * xcb_query_tree_children
 ** 
 ** @@param const xcb_query_tree_reply_t *R
 ** @@returns xcb_window_t *
 **
 *****************************************************************************/
 
a2012 10

/*****************************************************************************
 **
 ** int xcb_query_tree_children_length
 ** 
 ** @@param const xcb_query_tree_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2018 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_query_tree_children_end
 ** 
 ** @@param const xcb_query_tree_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2028 12

/*****************************************************************************
 **
 ** xcb_query_tree_reply_t * xcb_query_tree_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_query_tree_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_query_tree_reply_t *
 **
 *****************************************************************************/
 
a2067 13

/*****************************************************************************
 **
 ** xcb_intern_atom_cookie_t xcb_intern_atom
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           only_if_exists
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_intern_atom_cookie_t
 **
 *****************************************************************************/
 
d2080 1
a2080 1
    
d2084 1
a2084 1
    
d2088 1
a2088 1
    
d2098 1
a2098 1
    
a2102 13

/*****************************************************************************
 **
 ** xcb_intern_atom_cookie_t xcb_intern_atom_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           only_if_exists
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_intern_atom_cookie_t
 **
 *****************************************************************************/
 
d2115 1
a2115 1
    
d2119 1
a2119 1
    
d2123 1
a2123 1
    
d2133 1
a2133 1
    
a2137 12

/*****************************************************************************
 **
 ** xcb_intern_atom_reply_t * xcb_intern_atom_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_intern_atom_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_intern_atom_reply_t *
 **
 *****************************************************************************/
 
a2176 11

/*****************************************************************************
 **
 ** xcb_get_atom_name_cookie_t xcb_get_atom_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        atom
 ** @@returns xcb_get_atom_name_cookie_t
 **
 *****************************************************************************/
 
d2187 1
a2187 1
    
d2191 1
a2191 1
    
d2194 1
a2194 1
    
d2199 1
a2199 1
    
a2203 11

/*****************************************************************************
 **
 ** xcb_get_atom_name_cookie_t xcb_get_atom_name_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        atom
 ** @@returns xcb_get_atom_name_cookie_t
 **
 *****************************************************************************/
 
d2214 1
a2214 1
    
d2218 1
a2218 1
    
d2221 1
a2221 1
    
d2226 1
a2226 1
    
a2230 10

/*****************************************************************************
 **
 ** char * xcb_get_atom_name_name
 ** 
 ** @@param const xcb_get_atom_name_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a2236 10

/*****************************************************************************
 **
 ** int xcb_get_atom_name_name_length
 ** 
 ** @@param const xcb_get_atom_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2242 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_atom_name_name_end
 ** 
 ** @@param const xcb_get_atom_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2252 12

/*****************************************************************************
 **
 ** xcb_get_atom_name_reply_t * xcb_get_atom_name_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_get_atom_name_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_get_atom_name_reply_t *
 **
 *****************************************************************************/
 
a2291 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           format
 ** @@param uint32_t          data_len
 ** @@param const void       *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2308 1
a2308 1
    
d2312 1
a2312 1
    
d2320 1
a2320 1
    
d2330 1
a2330 1
    
a2334 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint8_t           format
 ** @@param uint32_t          data_len
 ** @@param const void       *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2351 1
a2351 1
    
d2355 1
a2355 1
    
d2363 1
a2363 1
    
d2373 1
a2373 1
    
a2377 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_delete_property_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2389 1
a2389 1
    
d2393 1
a2393 1
    
d2397 1
a2397 1
    
d2402 1
a2402 1
    
a2406 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_delete_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2418 1
a2418 1
    
d2422 1
a2422 1
    
d2426 1
a2426 1
    
d2431 1
a2431 1
    
a2466 16

/*****************************************************************************
 **
 ** xcb_get_property_cookie_t xcb_get_property
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           _delete
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          long_offset
 ** @@param uint32_t          long_length
 ** @@returns xcb_get_property_cookie_t
 **
 *****************************************************************************/
 
d2482 1
a2482 1
    
d2486 1
a2486 1
    
d2493 1
a2493 1
    
d2498 1
a2498 1
    
a2502 16

/*****************************************************************************
 **
 ** xcb_get_property_cookie_t xcb_get_property_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           _delete
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        property
 ** @@param xcb_atom_t        type
 ** @@param uint32_t          long_offset
 ** @@param uint32_t          long_length
 ** @@returns xcb_get_property_cookie_t
 **
 *****************************************************************************/
 
d2518 1
a2518 1
    
d2522 1
a2522 1
    
d2529 1
a2529 1
    
d2534 1
a2534 1
    
a2538 10

/*****************************************************************************
 **
 ** void * xcb_get_property_value
 ** 
 ** @@param const xcb_get_property_reply_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a2544 10

/*****************************************************************************
 **
 ** int xcb_get_property_value_length
 ** 
 ** @@param const xcb_get_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2550 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_property_value_end
 ** 
 ** @@param const xcb_get_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2560 12

/*****************************************************************************
 **
 ** xcb_get_property_reply_t * xcb_get_property_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_get_property_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_get_property_reply_t *
 **
 *****************************************************************************/
 
a2599 11

/*****************************************************************************
 **
 ** xcb_list_properties_cookie_t xcb_list_properties
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_list_properties_cookie_t
 **
 *****************************************************************************/
 
d2610 1
a2610 1
    
d2614 1
a2614 1
    
d2617 1
a2617 1
    
d2622 1
a2622 1
    
a2626 11

/*****************************************************************************
 **
 ** xcb_list_properties_cookie_t xcb_list_properties_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_list_properties_cookie_t
 **
 *****************************************************************************/
 
d2637 1
a2637 1
    
d2641 1
a2641 1
    
d2644 1
a2644 1
    
d2649 1
a2649 1
    
a2653 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_list_properties_atoms
 ** 
 ** @@param const xcb_list_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a2659 10

/*****************************************************************************
 **
 ** int xcb_list_properties_atoms_length
 ** 
 ** @@param const xcb_list_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2665 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_list_properties_atoms_end
 ** 
 ** @@param const xcb_list_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2675 12

/*****************************************************************************
 **
 ** xcb_list_properties_reply_t * xcb_list_properties_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_list_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_list_properties_reply_t *
 **
 *****************************************************************************/
 
a2683 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_selection_owner_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      owner
 ** @@param xcb_atom_t        selection
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2696 1
a2696 1
    
d2700 1
a2700 1
    
d2705 1
a2705 1
    
d2710 1
a2710 1
    
a2714 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_selection_owner
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      owner
 ** @@param xcb_atom_t        selection
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2727 1
a2727 1
    
d2731 1
a2731 1
    
d2736 1
a2736 1
    
d2741 1
a2741 1
    
a2745 11

/*****************************************************************************
 **
 ** xcb_get_selection_owner_cookie_t xcb_get_selection_owner
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        selection
 ** @@returns xcb_get_selection_owner_cookie_t
 **
 *****************************************************************************/
 
d2756 1
a2756 1
    
d2760 1
a2760 1
    
d2763 1
a2763 1
    
d2768 1
a2768 1
    
a2772 11

/*****************************************************************************
 **
 ** xcb_get_selection_owner_cookie_t xcb_get_selection_owner_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_atom_t        selection
 ** @@returns xcb_get_selection_owner_cookie_t
 **
 *****************************************************************************/
 
d2783 1
a2783 1
    
d2787 1
a2787 1
    
d2790 1
a2790 1
    
d2795 1
a2795 1
    
a2799 12

/*****************************************************************************
 **
 ** xcb_get_selection_owner_reply_t * xcb_get_selection_owner_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_get_selection_owner_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_get_selection_owner_reply_t *
 **
 *****************************************************************************/
 
a2807 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_convert_selection_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      requestor
 ** @@param xcb_atom_t        selection
 ** @@param xcb_atom_t        target
 ** @@param xcb_atom_t        property
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2822 1
a2822 1
    
d2826 1
a2826 1
    
d2833 1
a2833 1
    
d2838 1
a2838 1
    
a2842 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_convert_selection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      requestor
 ** @@param xcb_atom_t        selection
 ** @@param xcb_atom_t        target
 ** @@param xcb_atom_t        property
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2857 1
a2857 1
    
d2861 1
a2861 1
    
d2868 1
a2868 1
    
d2873 1
a2873 1
    
a2877 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_send_event_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           propagate
 ** @@param xcb_window_t      destination
 ** @@param uint32_t          event_mask
 ** @@param const char       *event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2891 1
a2891 1
    
d2895 1
a2895 1
    
d2900 1
a2900 1
    
d2905 1
a2905 1
    
a2909 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_send_event
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           propagate
 ** @@param xcb_window_t      destination
 ** @@param uint32_t          event_mask
 ** @@param const char       *event
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2923 1
a2923 1
    
d2927 1
a2927 1
    
d2932 1
a2932 1
    
d2937 1
a2937 1
    
a2941 18

/*****************************************************************************
 **
 ** xcb_grab_pointer_cookie_t xcb_grab_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          event_mask
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@param xcb_window_t      confine_to
 ** @@param xcb_cursor_t      cursor
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_grab_pointer_cookie_t
 **
 *****************************************************************************/
 
d2959 1
a2959 1
    
d2963 1
a2963 1
    
d2972 1
a2972 1
    
d2977 1
a2977 1
    
a2981 18

/*****************************************************************************
 **
 ** xcb_grab_pointer_cookie_t xcb_grab_pointer_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          event_mask
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@param xcb_window_t      confine_to
 ** @@param xcb_cursor_t      cursor
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_grab_pointer_cookie_t
 **
 *****************************************************************************/
 
d2999 1
a2999 1
    
d3003 1
a3003 1
    
d3012 1
a3012 1
    
d3017 1
a3017 1
    
a3021 12

/*****************************************************************************
 **
 ** xcb_grab_pointer_reply_t * xcb_grab_pointer_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_grab_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_grab_pointer_reply_t *
 **
 *****************************************************************************/
 
a3029 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_pointer_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3040 1
a3040 1
    
d3044 1
a3044 1
    
d3047 1
a3047 1
    
d3052 1
a3052 1
    
a3056 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3067 1
a3067 1
    
d3071 1
a3071 1
    
d3074 1
a3074 1
    
d3079 1
a3079 1
    
a3083 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_button_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          event_mask
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@param xcb_window_t      confine_to
 ** @@param xcb_cursor_t      cursor
 ** @@param uint8_t           button
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3102 1
a3102 1
    
d3106 1
a3106 1
    
d3117 1
a3117 1
    
d3122 1
a3122 1
    
a3126 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_button
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          event_mask
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@param xcb_window_t      confine_to
 ** @@param xcb_cursor_t      cursor
 ** @@param uint8_t           button
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3145 1
a3145 1
    
d3149 1
a3149 1
    
d3160 1
a3160 1
    
d3165 1
a3165 1
    
a3169 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_button_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           button
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3182 1
a3182 1
    
d3186 1
a3186 1
    
d3191 1
a3191 1
    
d3196 1
a3196 1
    
a3200 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_button
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           button
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3213 1
a3213 1
    
d3217 1
a3217 1
    
d3222 1
a3222 1
    
d3227 1
a3227 1
    
a3231 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_active_pointer_grab_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param xcb_timestamp_t   time
 ** @@param uint16_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3244 1
a3244 1
    
d3248 1
a3248 1
    
d3254 1
a3254 1
    
d3259 1
a3259 1
    
a3263 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_active_pointer_grab
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param xcb_timestamp_t   time
 ** @@param uint16_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3276 1
a3276 1
    
d3280 1
a3280 1
    
d3286 1
a3286 1
    
d3291 1
a3291 1
    
a3295 15

/*****************************************************************************
 **
 ** xcb_grab_keyboard_cookie_t xcb_grab_keyboard
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@returns xcb_grab_keyboard_cookie_t
 **
 *****************************************************************************/
 
d3310 1
a3310 1
    
d3314 1
a3314 1
    
d3321 1
a3321 1
    
d3326 1
a3326 1
    
a3330 15

/*****************************************************************************
 **
 ** xcb_grab_keyboard_cookie_t xcb_grab_keyboard_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param xcb_timestamp_t   time
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@returns xcb_grab_keyboard_cookie_t
 **
 *****************************************************************************/
 
d3345 1
a3345 1
    
d3349 1
a3349 1
    
d3356 1
a3356 1
    
d3361 1
a3361 1
    
a3365 12

/*****************************************************************************
 **
 ** xcb_grab_keyboard_reply_t * xcb_grab_keyboard_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_grab_keyboard_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_grab_keyboard_reply_t *
 **
 *****************************************************************************/
 
a3373 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_keyboard_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3384 1
a3384 1
    
d3388 1
a3388 1
    
d3391 1
a3391 1
    
d3396 1
a3396 1
    
a3400 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_keyboard
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3411 1
a3411 1
    
d3415 1
a3415 1
    
d3418 1
a3418 1
    
d3423 1
a3423 1
    
a3427 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_key_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param xcb_keycode_t     key
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3443 1
a3443 1
    
d3447 1
a3447 1
    
d3455 1
a3455 1
    
d3460 1
a3460 1
    
a3464 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_key
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           owner_events
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@param xcb_keycode_t     key
 ** @@param uint8_t           pointer_mode
 ** @@param uint8_t           keyboard_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3480 1
a3480 1
    
d3484 1
a3484 1
    
d3492 1
a3492 1
    
d3497 1
a3497 1
    
a3501 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_key_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_keycode_t     key
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3514 1
a3514 1
    
d3518 1
a3518 1
    
d3523 1
a3523 1
    
d3528 1
a3528 1
    
a3532 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_key
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_keycode_t     key
 ** @@param xcb_window_t      grab_window
 ** @@param uint16_t          modifiers
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3545 1
a3545 1
    
d3549 1
a3549 1
    
d3554 1
a3554 1
    
d3559 1
a3559 1
    
a3563 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_allow_events_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3575 1
a3575 1
    
d3579 1
a3579 1
    
d3582 1
a3582 1
    
d3587 1
a3587 1
    
a3591 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_allow_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3603 1
a3603 1
    
d3607 1
a3607 1
    
d3610 1
a3610 1
    
d3615 1
a3615 1
    
a3619 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_server_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3629 1
a3629 1
    
d3633 1
a3633 1
    
d3635 1
a3635 1
    
d3640 1
a3640 1
    
a3644 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_grab_server
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3654 1
a3654 1
    
d3658 1
a3658 1
    
d3660 1
a3660 1
    
d3665 1
a3665 1
    
a3669 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_server_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3679 1
a3679 1
    
d3683 1
a3683 1
    
d3685 1
a3685 1
    
d3690 1
a3690 1
    
a3694 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_ungrab_server
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3704 1
a3704 1
    
d3708 1
a3708 1
    
d3710 1
a3710 1
    
d3715 1
a3715 1
    
a3719 11

/*****************************************************************************
 **
 ** xcb_query_pointer_cookie_t xcb_query_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_query_pointer_cookie_t
 **
 *****************************************************************************/
 
d3730 1
a3730 1
    
d3734 1
a3734 1
    
d3737 1
a3737 1
    
d3742 1
a3742 1
    
a3746 11

/*****************************************************************************
 **
 ** xcb_query_pointer_cookie_t xcb_query_pointer_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_query_pointer_cookie_t
 **
 *****************************************************************************/
 
d3757 1
a3757 1
    
d3761 1
a3761 1
    
d3764 1
a3764 1
    
d3769 1
a3769 1
    
a3773 12

/*****************************************************************************
 **
 ** xcb_query_pointer_reply_t * xcb_query_pointer_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_query_pointer_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_query_pointer_reply_t *
 **
 *****************************************************************************/
 
a3781 10

/*****************************************************************************
 **
 ** void xcb_timecoord_next
 ** 
 ** @@param xcb_timecoord_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3789 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_timecoord_end
 ** 
 ** @@param xcb_timecoord_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3830 13

/*****************************************************************************
 **
 ** xcb_get_motion_events_cookie_t xcb_get_motion_events
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@returns xcb_get_motion_events_cookie_t
 **
 *****************************************************************************/
 
d3843 1
a3843 1
    
d3847 1
a3847 1
    
d3852 1
a3852 1
    
d3857 1
a3857 1
    
a3861 13

/*****************************************************************************
 **
 ** xcb_get_motion_events_cookie_t xcb_get_motion_events_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   start
 ** @@param xcb_timestamp_t   stop
 ** @@returns xcb_get_motion_events_cookie_t
 **
 *****************************************************************************/
 
d3874 1
a3874 1
    
d3878 1
a3878 1
    
d3883 1
a3883 1
    
d3888 1
a3888 1
    
a3892 10

/*****************************************************************************
 **
 ** xcb_timecoord_t * xcb_get_motion_events_events
 ** 
 ** @@param const xcb_get_motion_events_reply_t *R
 ** @@returns xcb_timecoord_t *
 **
 *****************************************************************************/
 
a3898 10

/*****************************************************************************
 **
 ** int xcb_get_motion_events_events_length
 ** 
 ** @@param const xcb_get_motion_events_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3904 10

/*****************************************************************************
 **
 ** xcb_timecoord_iterator_t xcb_get_motion_events_events_iterator
 ** 
 ** @@param const xcb_get_motion_events_reply_t *R
 ** @@returns xcb_timecoord_iterator_t
 **
 *****************************************************************************/
 
a3914 12

/*****************************************************************************
 **
 ** xcb_get_motion_events_reply_t * xcb_get_motion_events_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_get_motion_events_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_get_motion_events_reply_t *
 **
 *****************************************************************************/
 
a3922 14

/*****************************************************************************
 **
 ** xcb_translate_coordinates_cookie_t xcb_translate_coordinates
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      src_window
 ** @@param xcb_window_t      dst_window
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@returns xcb_translate_coordinates_cookie_t
 **
 *****************************************************************************/
 
d3936 1
a3936 1
    
d3940 1
a3940 1
    
d3946 1
a3946 1
    
d3951 1
a3951 1
    
a3955 14

/*****************************************************************************
 **
 ** xcb_translate_coordinates_cookie_t xcb_translate_coordinates_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      src_window
 ** @@param xcb_window_t      dst_window
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@returns xcb_translate_coordinates_cookie_t
 **
 *****************************************************************************/
 
d3969 1
a3969 1
    
d3973 1
a3973 1
    
d3979 1
a3979 1
    
d3984 1
a3984 1
    
a3988 12

/*****************************************************************************
 **
 ** xcb_translate_coordinates_reply_t * xcb_translate_coordinates_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_translate_coordinates_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_translate_coordinates_reply_t *
 **
 *****************************************************************************/
 
a3996 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_warp_pointer_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      src_window
 ** @@param xcb_window_t      dst_window
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_width
 ** @@param uint16_t          src_height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4014 1
a4014 1
    
d4018 1
a4018 1
    
d4028 1
a4028 1
    
d4033 1
a4033 1
    
a4037 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_warp_pointer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      src_window
 ** @@param xcb_window_t      dst_window
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param uint16_t          src_width
 ** @@param uint16_t          src_height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4055 1
a4055 1
    
d4059 1
a4059 1
    
d4069 1
a4069 1
    
d4074 1
a4074 1
    
a4078 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_input_focus_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           revert_to
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4091 1
a4091 1
    
d4095 1
a4095 1
    
d4099 1
a4099 1
    
d4104 1
a4104 1
    
a4108 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_input_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           revert_to
 ** @@param xcb_window_t      focus
 ** @@param xcb_timestamp_t   time
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4121 1
a4121 1
    
d4125 1
a4125 1
    
d4129 1
a4129 1
    
d4134 1
a4134 1
    
a4138 10

/*****************************************************************************
 **
 ** xcb_get_input_focus_cookie_t xcb_get_input_focus
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_input_focus_cookie_t
 **
 *****************************************************************************/
 
d4148 1
a4148 1
    
d4152 1
a4152 1
    
d4154 1
a4154 1
    
d4159 1
a4159 1
    
a4163 10

/*****************************************************************************
 **
 ** xcb_get_input_focus_cookie_t xcb_get_input_focus_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_input_focus_cookie_t
 **
 *****************************************************************************/
 
d4173 1
a4173 1
    
d4177 1
a4177 1
    
d4179 1
a4179 1
    
d4184 1
a4184 1
    
a4188 12

/*****************************************************************************
 **
 ** xcb_get_input_focus_reply_t * xcb_get_input_focus_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_get_input_focus_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_get_input_focus_reply_t *
 **
 *****************************************************************************/
 
a4196 10

/*****************************************************************************
 **
 ** xcb_query_keymap_cookie_t xcb_query_keymap
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_query_keymap_cookie_t
 **
 *****************************************************************************/
 
d4206 1
a4206 1
    
d4210 1
a4210 1
    
d4212 1
a4212 1
    
d4217 1
a4217 1
    
a4221 10

/*****************************************************************************
 **
 ** xcb_query_keymap_cookie_t xcb_query_keymap_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_query_keymap_cookie_t
 **
 *****************************************************************************/
 
d4231 1
a4231 1
    
d4235 1
a4235 1
    
d4237 1
a4237 1
    
d4242 1
a4242 1
    
a4246 12

/*****************************************************************************
 **
 ** xcb_query_keymap_reply_t * xcb_query_keymap_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_query_keymap_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_query_keymap_reply_t *
 **
 *****************************************************************************/
 
a4285 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_open_font_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_font_t        fid
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4298 1
a4298 1
    
d4302 1
a4302 1
    
d4307 1
a4307 1
    
d4317 1
a4317 1
    
a4321 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_open_font
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_font_t        fid
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4334 1
a4334 1
    
d4338 1
a4338 1
    
d4343 1
a4343 1
    
d4353 1
a4353 1
    
a4357 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_close_font_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_font_t        font
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4368 1
a4368 1
    
d4372 1
a4372 1
    
d4375 1
a4375 1
    
d4380 1
a4380 1
    
a4384 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_close_font
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_font_t        font
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4395 1
a4395 1
    
d4399 1
a4399 1
    
d4402 1
a4402 1
    
d4407 1
a4407 1
    
a4411 10

/*****************************************************************************
 **
 ** void xcb_fontprop_next
 ** 
 ** @@param xcb_fontprop_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4419 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_fontprop_end
 ** 
 ** @@param xcb_fontprop_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4429 10

/*****************************************************************************
 **
 ** void xcb_charinfo_next
 ** 
 ** @@param xcb_charinfo_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4437 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_charinfo_end
 ** 
 ** @@param xcb_charinfo_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4490 11

/*****************************************************************************
 **
 ** xcb_query_font_cookie_t xcb_query_font
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_fontable_t    font
 ** @@returns xcb_query_font_cookie_t
 **
 *****************************************************************************/
 
d4501 1
a4501 1
    
d4505 1
a4505 1
    
d4508 1
a4508 1
    
d4513 1
a4513 1
    
a4517 11

/*****************************************************************************
 **
 ** xcb_query_font_cookie_t xcb_query_font_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_fontable_t    font
 ** @@returns xcb_query_font_cookie_t
 **
 *****************************************************************************/
 
d4528 1
a4528 1
    
d4532 1
a4532 1
    
d4535 1
a4535 1
    
d4540 1
a4540 1
    
a4544 10

/*****************************************************************************
 **
 ** xcb_fontprop_t * xcb_query_font_properties
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns xcb_fontprop_t *
 **
 *****************************************************************************/
 
a4550 10

/*****************************************************************************
 **
 ** int xcb_query_font_properties_length
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4556 10

/*****************************************************************************
 **
 ** xcb_fontprop_iterator_t xcb_query_font_properties_iterator
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns xcb_fontprop_iterator_t
 **
 *****************************************************************************/
 
a4566 10

/*****************************************************************************
 **
 ** xcb_charinfo_t * xcb_query_font_char_infos
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns xcb_charinfo_t *
 **
 *****************************************************************************/
 
a4573 10

/*****************************************************************************
 **
 ** int xcb_query_font_char_infos_length
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4579 10

/*****************************************************************************
 **
 ** xcb_charinfo_iterator_t xcb_query_font_char_infos_iterator
 ** 
 ** @@param const xcb_query_font_reply_t *R
 ** @@returns xcb_charinfo_iterator_t
 **
 *****************************************************************************/
 
a4590 12

/*****************************************************************************
 **
 ** xcb_query_font_reply_t * xcb_query_font_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_query_font_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_query_font_reply_t *
 **
 *****************************************************************************/
 
a4629 13

/*****************************************************************************
 **
 ** xcb_query_text_extents_cookie_t xcb_query_text_extents
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_fontable_t      font
 ** @@param uint32_t            string_len
 ** @@param const xcb_char2b_t *string
 ** @@returns xcb_query_text_extents_cookie_t
 **
 *****************************************************************************/
 
d4642 1
a4642 1
    
d4646 1
a4646 1
    
d4649 1
a4649 1
    
d4659 1
a4659 1
    
a4663 13

/*****************************************************************************
 **
 ** xcb_query_text_extents_cookie_t xcb_query_text_extents_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_fontable_t      font
 ** @@param uint32_t            string_len
 ** @@param const xcb_char2b_t *string
 ** @@returns xcb_query_text_extents_cookie_t
 **
 *****************************************************************************/
 
d4676 1
a4676 1
    
d4680 1
a4680 1
    
d4683 1
a4683 1
    
d4693 1
a4693 1
    
a4697 12

/*****************************************************************************
 **
 ** xcb_query_text_extents_reply_t * xcb_query_text_extents_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_query_text_extents_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_query_text_extents_reply_t *
 **
 *****************************************************************************/
 
a4736 10

/*****************************************************************************
 **
 ** char * xcb_str_name
 ** 
 ** @@param const xcb_str_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a4742 10

/*****************************************************************************
 **
 ** int xcb_str_name_length
 ** 
 ** @@param const xcb_str_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4748 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_str_name_end
 ** 
 ** @@param const xcb_str_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4758 10

/*****************************************************************************
 **
 ** void xcb_str_next
 ** 
 ** @@param xcb_str_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4769 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_str_end
 ** 
 ** @@param xcb_str_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4812 13

/*****************************************************************************
 **
 ** xcb_list_fonts_cookie_t xcb_list_fonts
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          max_names
 ** @@param uint16_t          pattern_len
 ** @@param const char       *pattern
 ** @@returns xcb_list_fonts_cookie_t
 **
 *****************************************************************************/
 
d4825 1
a4825 1
    
d4829 1
a4829 1
    
d4833 1
a4833 1
    
d4843 1
a4843 1
    
a4847 13

/*****************************************************************************
 **
 ** xcb_list_fonts_cookie_t xcb_list_fonts_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          max_names
 ** @@param uint16_t          pattern_len
 ** @@param const char       *pattern
 ** @@returns xcb_list_fonts_cookie_t
 **
 *****************************************************************************/
 
d4860 1
a4860 1
    
d4864 1
a4864 1
    
d4868 1
a4868 1
    
d4878 1
a4878 1
    
a4882 10

/*****************************************************************************
 **
 ** int xcb_list_fonts_names_length
 ** 
 ** @@param const xcb_list_fonts_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4888 10

/*****************************************************************************
 **
 ** xcb_str_iterator_t xcb_list_fonts_names_iterator
 ** 
 ** @@param const xcb_list_fonts_reply_t *R
 ** @@returns xcb_str_iterator_t
 **
 *****************************************************************************/
 
a4898 12

/*****************************************************************************
 **
 ** xcb_list_fonts_reply_t * xcb_list_fonts_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_list_fonts_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_list_fonts_reply_t *
 **
 *****************************************************************************/
 
a4937 13

/*****************************************************************************
 **
 ** xcb_list_fonts_with_info_cookie_t xcb_list_fonts_with_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          max_names
 ** @@param uint16_t          pattern_len
 ** @@param const char       *pattern
 ** @@returns xcb_list_fonts_with_info_cookie_t
 **
 *****************************************************************************/
 
d4950 1
a4950 1
    
d4954 1
a4954 1
    
d4958 1
a4958 1
    
d4968 1
a4968 1
    
a4972 13

/*****************************************************************************
 **
 ** xcb_list_fonts_with_info_cookie_t xcb_list_fonts_with_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          max_names
 ** @@param uint16_t          pattern_len
 ** @@param const char       *pattern
 ** @@returns xcb_list_fonts_with_info_cookie_t
 **
 *****************************************************************************/
 
d4985 1
a4985 1
    
d4989 1
a4989 1
    
d4993 1
a4993 1
    
d5003 1
a5003 1
    
a5007 10

/*****************************************************************************
 **
 ** xcb_fontprop_t * xcb_list_fonts_with_info_properties
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns xcb_fontprop_t *
 **
 *****************************************************************************/
 
a5013 10

/*****************************************************************************
 **
 ** int xcb_list_fonts_with_info_properties_length
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5019 10

/*****************************************************************************
 **
 ** xcb_fontprop_iterator_t xcb_list_fonts_with_info_properties_iterator
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns xcb_fontprop_iterator_t
 **
 *****************************************************************************/
 
a5029 10

/*****************************************************************************
 **
 ** char * xcb_list_fonts_with_info_name
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a5036 10

/*****************************************************************************
 **
 ** int xcb_list_fonts_with_info_name_length
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5042 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_list_fonts_with_info_name_end
 ** 
 ** @@param const xcb_list_fonts_with_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5053 12

/*****************************************************************************
 **
 ** xcb_list_fonts_with_info_reply_t * xcb_list_fonts_with_info_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_list_fonts_with_info_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_list_fonts_with_info_reply_t *
 **
 *****************************************************************************/
 
a5097 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_font_path_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          font_qty
 ** @@param const xcb_str_t  *font
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5109 1
a5109 1
    
d5116 1
a5116 1
    
d5120 1
a5120 1
    
d5136 1
a5136 1
    
a5140 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_font_path
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          font_qty
 ** @@param const xcb_str_t  *font
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5152 1
a5152 1
    
d5159 1
a5159 1
    
d5163 1
a5163 1
    
d5179 1
a5179 1
    
a5219 10

/*****************************************************************************
 **
 ** xcb_get_font_path_cookie_t xcb_get_font_path
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_font_path_cookie_t
 **
 *****************************************************************************/
 
d5229 1
a5229 1
    
d5233 1
a5233 1
    
d5235 1
a5235 1
    
d5240 1
a5240 1
    
a5244 10

/*****************************************************************************
 **
 ** xcb_get_font_path_cookie_t xcb_get_font_path_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_font_path_cookie_t
 **
 *****************************************************************************/
 
d5254 1
a5254 1
    
d5258 1
a5258 1
    
d5260 1
a5260 1
    
d5265 1
a5265 1
    
a5269 10

/*****************************************************************************
 **
 ** int xcb_get_font_path_path_length
 ** 
 ** @@param const xcb_get_font_path_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5275 10

/*****************************************************************************
 **
 ** xcb_str_iterator_t xcb_get_font_path_path_iterator
 ** 
 ** @@param const xcb_get_font_path_reply_t *R
 ** @@returns xcb_str_iterator_t
 **
 *****************************************************************************/
 
a5285 12

/*****************************************************************************
 **
 ** xcb_get_font_path_reply_t * xcb_get_font_path_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_get_font_path_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_get_font_path_reply_t *
 **
 *****************************************************************************/
 
a5293 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           depth
 ** @@param xcb_pixmap_t      pid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5308 1
a5308 1
    
d5312 1
a5312 1
    
d5318 1
a5318 1
    
d5323 1
a5323 1
    
a5327 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           depth
 ** @@param xcb_pixmap_t      pid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5342 1
a5342 1
    
d5346 1
a5346 1
    
d5352 1
a5352 1
    
d5357 1
a5357 1
    
a5361 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5372 1
a5372 1
    
d5376 1
a5376 1
    
d5379 1
a5379 1
    
d5384 1
a5384 1
    
a5388 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5399 1
a5399 1
    
d5403 1
a5403 1
    
d5406 1
a5406 1
    
d5411 1
a5411 1
    
a5446 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_gc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    cid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5460 1
a5460 1
    
d5464 1
a5464 1
    
d5469 1
a5469 1
    
d5479 1
a5479 1
    
a5483 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_gc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    cid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5497 1
a5497 1
    
d5501 1
a5501 1
    
d5506 1
a5506 1
    
d5516 1
a5516 1
    
a5551 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_gc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5564 1
a5564 1
    
d5568 1
a5568 1
    
d5572 1
a5572 1
    
d5582 1
a5582 1
    
a5586 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_gc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5599 1
a5599 1
    
d5603 1
a5603 1
    
d5607 1
a5607 1
    
d5617 1
a5617 1
    
a5621 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_gc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    src_gc
 ** @@param xcb_gcontext_t    dst_gc
 ** @@param uint32_t          value_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5634 1
a5634 1
    
d5638 1
a5638 1
    
d5643 1
a5643 1
    
d5648 1
a5648 1
    
a5652 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_gc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    src_gc
 ** @@param xcb_gcontext_t    dst_gc
 ** @@param uint32_t          value_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5665 1
a5665 1
    
d5669 1
a5669 1
    
d5674 1
a5674 1
    
d5679 1
a5679 1
    
a5714 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_dashes_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          dash_offset
 ** @@param uint16_t          dashes_len
 ** @@param const uint8_t    *dashes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5728 1
a5728 1
    
d5732 1
a5732 1
    
d5737 1
a5737 1
    
d5747 1
a5747 1
    
a5751 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_dashes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          dash_offset
 ** @@param uint16_t          dashes_len
 ** @@param const uint8_t    *dashes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5765 1
a5765 1
    
d5769 1
a5769 1
    
d5774 1
a5774 1
    
d5784 1
a5784 1
    
a5819 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_clip_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                ordering
 ** @@param xcb_gcontext_t         gc
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5835 1
a5835 1
    
d5839 1
a5839 1
    
d5844 1
a5844 1
    
d5854 1
a5854 1
    
a5858 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_clip_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                ordering
 ** @@param xcb_gcontext_t         gc
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5874 1
a5874 1
    
d5878 1
a5878 1
    
d5883 1
a5883 1
    
d5893 1
a5893 1
    
a5897 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_gc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5908 1
a5908 1
    
d5912 1
a5912 1
    
d5915 1
a5915 1
    
d5920 1
a5920 1
    
a5924 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_gc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_gcontext_t    gc
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5935 1
a5935 1
    
d5939 1
a5939 1
    
d5942 1
a5942 1
    
d5947 1
a5947 1
    
a5951 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_clear_area_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           exposures
 ** @@param xcb_window_t      window
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5967 1
a5967 1
    
d5971 1
a5971 1
    
d5978 1
a5978 1
    
d5983 1
a5983 1
    
a5987 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_clear_area
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           exposures
 ** @@param xcb_window_t      window
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6003 1
a6003 1
    
d6007 1
a6007 1
    
d6014 1
a6014 1
    
d6019 1
a6019 1
    
a6023 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_area_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    src_drawable
 ** @@param xcb_drawable_t    dst_drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6042 1
a6042 1
    
d6046 1
a6046 1
    
d6057 1
a6057 1
    
d6062 1
a6062 1
    
a6066 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_area
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    src_drawable
 ** @@param xcb_drawable_t    dst_drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6085 1
a6085 1
    
d6089 1
a6089 1
    
d6100 1
a6100 1
    
d6105 1
a6105 1
    
a6109 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_plane_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    src_drawable
 ** @@param xcb_drawable_t    dst_drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          bit_plane
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6129 1
a6129 1
    
d6133 1
a6133 1
    
d6145 1
a6145 1
    
d6150 1
a6150 1
    
a6154 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_plane
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    src_drawable
 ** @@param xcb_drawable_t    dst_drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           src_x
 ** @@param int16_t           src_y
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          bit_plane
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6174 1
a6174 1
    
d6178 1
a6178 1
    
d6190 1
a6190 1
    
d6195 1
a6195 1
    
a6230 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_point_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param uint8_t            coordinate_mode
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6245 1
a6245 1
    
d6249 1
a6249 1
    
d6253 1
a6253 1
    
d6263 1
a6263 1
    
a6267 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_point
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param uint8_t            coordinate_mode
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6282 1
a6282 1
    
d6286 1
a6286 1
    
d6290 1
a6290 1
    
d6300 1
a6300 1
    
a6335 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_line_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param uint8_t            coordinate_mode
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6350 1
a6350 1
    
d6354 1
a6354 1
    
d6358 1
a6358 1
    
d6368 1
a6368 1
    
a6372 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_line
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param uint8_t            coordinate_mode
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6387 1
a6387 1
    
d6391 1
a6391 1
    
d6395 1
a6395 1
    
d6405 1
a6405 1
    
a6409 10

/*****************************************************************************
 **
 ** void xcb_segment_next
 ** 
 ** @@param xcb_segment_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a6417 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_segment_end
 ** 
 ** @@param xcb_segment_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6458 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_segment_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_drawable_t       drawable
 ** @@param xcb_gcontext_t       gc
 ** @@param uint32_t             segments_len
 ** @@param const xcb_segment_t *segments
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6472 1
a6472 1
    
d6476 1
a6476 1
    
d6480 1
a6480 1
    
d6490 1
a6490 1
    
a6494 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_segment
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_drawable_t       drawable
 ** @@param xcb_gcontext_t       gc
 ** @@param uint32_t             segments_len
 ** @@param const xcb_segment_t *segments
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6508 1
a6508 1
    
d6512 1
a6512 1
    
d6516 1
a6516 1
    
d6526 1
a6526 1
    
a6561 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_rectangle_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_drawable_t         drawable
 ** @@param xcb_gcontext_t         gc
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6575 1
a6575 1
    
d6579 1
a6579 1
    
d6583 1
a6583 1
    
d6593 1
a6593 1
    
a6597 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_rectangle
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_drawable_t         drawable
 ** @@param xcb_gcontext_t         gc
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6611 1
a6611 1
    
d6615 1
a6615 1
    
d6619 1
a6619 1
    
d6629 1
a6629 1
    
a6664 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_arc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          arcs_len
 ** @@param const xcb_arc_t  *arcs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6678 1
a6678 1
    
d6682 1
a6682 1
    
d6686 1
a6686 1
    
d6696 1
a6696 1
    
a6700 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_arc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          arcs_len
 ** @@param const xcb_arc_t  *arcs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6714 1
a6714 1
    
d6718 1
a6718 1
    
d6722 1
a6722 1
    
d6732 1
a6732 1
    
a6767 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_fill_poly_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint8_t            shape
 ** @@param uint8_t            coordinate_mode
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6783 1
a6783 1
    
d6787 1
a6787 1
    
d6794 1
a6794 1
    
d6804 1
a6804 1
    
a6808 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_fill_poly
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_drawable_t     drawable
 ** @@param xcb_gcontext_t     gc
 ** @@param uint8_t            shape
 ** @@param uint8_t            coordinate_mode
 ** @@param uint32_t           points_len
 ** @@param const xcb_point_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6824 1
a6824 1
    
d6828 1
a6828 1
    
d6835 1
a6835 1
    
d6845 1
a6845 1
    
a6880 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_fill_rectangle_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_drawable_t         drawable
 ** @@param xcb_gcontext_t         gc
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6894 1
a6894 1
    
d6898 1
a6898 1
    
d6902 1
a6902 1
    
d6912 1
a6912 1
    
a6916 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_fill_rectangle
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_drawable_t         drawable
 ** @@param xcb_gcontext_t         gc
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6930 1
a6930 1
    
d6934 1
a6934 1
    
d6938 1
a6938 1
    
d6948 1
a6948 1
    
a6983 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_fill_arc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          arcs_len
 ** @@param const xcb_arc_t  *arcs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6997 1
a6997 1
    
d7001 1
a7001 1
    
d7005 1
a7005 1
    
d7015 1
a7015 1
    
a7019 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_fill_arc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint32_t          arcs_len
 ** @@param const xcb_arc_t  *arcs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7033 1
a7033 1
    
d7037 1
a7037 1
    
d7041 1
a7041 1
    
d7051 1
a7051 1
    
a7086 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           format
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint8_t           left_pad
 ** @@param uint8_t           depth
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7107 1
a7107 1
    
d7111 1
a7111 1
    
d7122 1
a7122 1
    
d7132 1
a7132 1
    
a7136 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           format
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint8_t           left_pad
 ** @@param uint8_t           depth
 ** @@param uint32_t          data_len
 ** @@param const uint8_t    *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7157 1
a7157 1
    
d7161 1
a7161 1
    
d7172 1
a7172 1
    
d7182 1
a7182 1
    
a7217 17

/*****************************************************************************
 **
 ** xcb_get_image_cookie_t xcb_get_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           format
 ** @@param xcb_drawable_t    drawable
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          plane_mask
 ** @@returns xcb_get_image_cookie_t
 **
 *****************************************************************************/
 
d7234 1
a7234 1
    
d7238 1
a7238 1
    
d7246 1
a7246 1
    
d7251 1
a7251 1
    
a7255 17

/*****************************************************************************
 **
 ** xcb_get_image_cookie_t xcb_get_image_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           format
 ** @@param xcb_drawable_t    drawable
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          plane_mask
 ** @@returns xcb_get_image_cookie_t
 **
 *****************************************************************************/
 
d7272 1
a7272 1
    
d7276 1
a7276 1
    
d7284 1
a7284 1
    
d7289 1
a7289 1
    
a7293 10

/*****************************************************************************
 **
 ** uint8_t * xcb_get_image_data
 ** 
 ** @@param const xcb_get_image_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7299 10

/*****************************************************************************
 **
 ** int xcb_get_image_data_length
 ** 
 ** @@param const xcb_get_image_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7305 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_image_data_end
 ** 
 ** @@param const xcb_get_image_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7315 12

/*****************************************************************************
 **
 ** xcb_get_image_reply_t * xcb_get_image_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_get_image_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_get_image_reply_t *
 **
 *****************************************************************************/
 
a7354 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_text_8_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint32_t          items_len
 ** @@param const uint8_t    *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7370 1
a7370 1
    
d7374 1
a7374 1
    
d7380 1
a7380 1
    
d7390 1
a7390 1
    
a7394 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_text_8
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint32_t          items_len
 ** @@param const uint8_t    *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7410 1
a7410 1
    
d7414 1
a7414 1
    
d7420 1
a7420 1
    
d7430 1
a7430 1
    
a7465 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_text_16_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint32_t          items_len
 ** @@param const uint8_t    *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7481 1
a7481 1
    
d7485 1
a7485 1
    
d7491 1
a7491 1
    
d7501 1
a7501 1
    
a7505 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_poly_text_16
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint32_t          items_len
 ** @@param const uint8_t    *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7521 1
a7521 1
    
d7525 1
a7525 1
    
d7531 1
a7531 1
    
d7541 1
a7541 1
    
a7576 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_image_text_8_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           string_len
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7592 1
a7592 1
    
d7596 1
a7596 1
    
d7602 1
a7602 1
    
d7612 1
a7612 1
    
a7616 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_image_text_8
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           string_len
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7632 1
a7632 1
    
d7636 1
a7636 1
    
d7642 1
a7642 1
    
d7652 1
a7652 1
    
a7687 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_image_text_16_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint8_t             string_len
 ** @@param xcb_drawable_t      drawable
 ** @@param xcb_gcontext_t      gc
 ** @@param int16_t             x
 ** @@param int16_t             y
 ** @@param const xcb_char2b_t *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7703 1
a7703 1
    
d7707 1
a7707 1
    
d7713 1
a7713 1
    
d7723 1
a7723 1
    
a7727 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_image_text_16
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint8_t             string_len
 ** @@param xcb_drawable_t      drawable
 ** @@param xcb_gcontext_t      gc
 ** @@param int16_t             x
 ** @@param int16_t             y
 ** @@param const xcb_char2b_t *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7743 1
a7743 1
    
d7747 1
a7747 1
    
d7753 1
a7753 1
    
d7763 1
a7763 1
    
a7767 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_colormap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           alloc
 ** @@param xcb_colormap_t    mid
 ** @@param xcb_window_t      window
 ** @@param xcb_visualid_t    visual
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7781 1
a7781 1
    
d7785 1
a7785 1
    
d7790 1
a7790 1
    
d7795 1
a7795 1
    
a7799 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_colormap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           alloc
 ** @@param xcb_colormap_t    mid
 ** @@param xcb_window_t      window
 ** @@param xcb_visualid_t    visual
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7813 1
a7813 1
    
d7817 1
a7817 1
    
d7822 1
a7822 1
    
d7827 1
a7827 1
    
a7831 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_colormap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7842 1
a7842 1
    
d7846 1
a7846 1
    
d7849 1
a7849 1
    
d7854 1
a7854 1
    
a7858 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_colormap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7869 1
a7869 1
    
d7873 1
a7873 1
    
d7876 1
a7876 1
    
d7881 1
a7881 1
    
a7885 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_colormap_and_free_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    mid
 ** @@param xcb_colormap_t    src_cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7897 1
a7897 1
    
d7901 1
a7901 1
    
d7905 1
a7905 1
    
d7910 1
a7910 1
    
a7914 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_copy_colormap_and_free
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    mid
 ** @@param xcb_colormap_t    src_cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7926 1
a7926 1
    
d7930 1
a7930 1
    
d7934 1
a7934 1
    
d7939 1
a7939 1
    
a7943 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_install_colormap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7954 1
a7954 1
    
d7958 1
a7958 1
    
d7961 1
a7961 1
    
d7966 1
a7966 1
    
a7970 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_install_colormap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7981 1
a7981 1
    
d7985 1
a7985 1
    
d7988 1
a7988 1
    
d7993 1
a7993 1
    
a7997 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_uninstall_colormap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8008 1
a8008 1
    
d8012 1
a8012 1
    
d8015 1
a8015 1
    
d8020 1
a8020 1
    
a8024 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_uninstall_colormap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8035 1
a8035 1
    
d8039 1
a8039 1
    
d8042 1
a8042 1
    
d8047 1
a8047 1
    
a8082 11

/*****************************************************************************
 **
 ** xcb_list_installed_colormaps_cookie_t xcb_list_installed_colormaps
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_list_installed_colormaps_cookie_t
 **
 *****************************************************************************/
 
d8093 1
a8093 1
    
d8097 1
a8097 1
    
d8100 1
a8100 1
    
d8105 1
a8105 1
    
a8109 11

/*****************************************************************************
 **
 ** xcb_list_installed_colormaps_cookie_t xcb_list_installed_colormaps_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_list_installed_colormaps_cookie_t
 **
 *****************************************************************************/
 
d8120 1
a8120 1
    
d8124 1
a8124 1
    
d8127 1
a8127 1
    
d8132 1
a8132 1
    
a8136 10

/*****************************************************************************
 **
 ** xcb_colormap_t * xcb_list_installed_colormaps_cmaps
 ** 
 ** @@param const xcb_list_installed_colormaps_reply_t *R
 ** @@returns xcb_colormap_t *
 **
 *****************************************************************************/
 
a8142 10

/*****************************************************************************
 **
 ** int xcb_list_installed_colormaps_cmaps_length
 ** 
 ** @@param const xcb_list_installed_colormaps_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8148 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_list_installed_colormaps_cmaps_end
 ** 
 ** @@param const xcb_list_installed_colormaps_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8158 12

/*****************************************************************************
 **
 ** xcb_list_installed_colormaps_reply_t * xcb_list_installed_colormaps_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_list_installed_colormaps_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_list_installed_colormaps_reply_t *
 **
 *****************************************************************************/
 
a8166 14

/*****************************************************************************
 **
 ** xcb_alloc_color_cookie_t xcb_alloc_color
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          red
 ** @@param uint16_t          green
 ** @@param uint16_t          blue
 ** @@returns xcb_alloc_color_cookie_t
 **
 *****************************************************************************/
 
d8180 1
a8180 1
    
d8184 1
a8184 1
    
d8191 1
a8191 1
    
d8196 1
a8196 1
    
a8200 14

/*****************************************************************************
 **
 ** xcb_alloc_color_cookie_t xcb_alloc_color_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          red
 ** @@param uint16_t          green
 ** @@param uint16_t          blue
 ** @@returns xcb_alloc_color_cookie_t
 **
 *****************************************************************************/
 
d8214 1
a8214 1
    
d8218 1
a8218 1
    
d8225 1
a8225 1
    
d8230 1
a8230 1
    
a8234 12

/*****************************************************************************
 **
 ** xcb_alloc_color_reply_t * xcb_alloc_color_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_alloc_color_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_alloc_color_reply_t *
 **
 *****************************************************************************/
 
a8273 13

/*****************************************************************************
 **
 ** xcb_alloc_named_color_cookie_t xcb_alloc_named_color
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_alloc_named_color_cookie_t
 **
 *****************************************************************************/
 
d8286 1
a8286 1
    
d8290 1
a8290 1
    
d8295 1
a8295 1
    
d8305 1
a8305 1
    
a8309 13

/*****************************************************************************
 **
 ** xcb_alloc_named_color_cookie_t xcb_alloc_named_color_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_alloc_named_color_cookie_t
 **
 *****************************************************************************/
 
d8322 1
a8322 1
    
d8326 1
a8326 1
    
d8331 1
a8331 1
    
d8341 1
a8341 1
    
a8345 12

/*****************************************************************************
 **
 ** xcb_alloc_named_color_reply_t * xcb_alloc_named_color_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_alloc_named_color_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_alloc_named_color_reply_t *
 **
 *****************************************************************************/
 
a8396 14

/*****************************************************************************
 **
 ** xcb_alloc_color_cells_cookie_t xcb_alloc_color_cells
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           contiguous
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          colors
 ** @@param uint16_t          planes
 ** @@returns xcb_alloc_color_cells_cookie_t
 **
 *****************************************************************************/
 
d8410 1
a8410 1
    
d8414 1
a8414 1
    
d8419 1
a8419 1
    
d8424 1
a8424 1
    
a8428 14

/*****************************************************************************
 **
 ** xcb_alloc_color_cells_cookie_t xcb_alloc_color_cells_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           contiguous
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          colors
 ** @@param uint16_t          planes
 ** @@returns xcb_alloc_color_cells_cookie_t
 **
 *****************************************************************************/
 
d8442 1
a8442 1
    
d8446 1
a8446 1
    
d8451 1
a8451 1
    
d8456 1
a8456 1
    
a8460 10

/*****************************************************************************
 **
 ** uint32_t * xcb_alloc_color_cells_pixels
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8466 10

/*****************************************************************************
 **
 ** int xcb_alloc_color_cells_pixels_length
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8472 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_alloc_color_cells_pixels_end
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8482 10

/*****************************************************************************
 **
 ** uint32_t * xcb_alloc_color_cells_masks
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8489 10

/*****************************************************************************
 **
 ** int xcb_alloc_color_cells_masks_length
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8495 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_alloc_color_cells_masks_end
 ** 
 ** @@param const xcb_alloc_color_cells_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8506 12

/*****************************************************************************
 **
 ** xcb_alloc_color_cells_reply_t * xcb_alloc_color_cells_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_alloc_color_cells_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_alloc_color_cells_reply_t *
 **
 *****************************************************************************/
 
a8545 16

/*****************************************************************************
 **
 ** xcb_alloc_color_planes_cookie_t xcb_alloc_color_planes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           contiguous
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          colors
 ** @@param uint16_t          reds
 ** @@param uint16_t          greens
 ** @@param uint16_t          blues
 ** @@returns xcb_alloc_color_planes_cookie_t
 **
 *****************************************************************************/
 
d8561 1
a8561 1
    
d8565 1
a8565 1
    
d8572 1
a8572 1
    
d8577 1
a8577 1
    
a8581 16

/*****************************************************************************
 **
 ** xcb_alloc_color_planes_cookie_t xcb_alloc_color_planes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           contiguous
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          colors
 ** @@param uint16_t          reds
 ** @@param uint16_t          greens
 ** @@param uint16_t          blues
 ** @@returns xcb_alloc_color_planes_cookie_t
 **
 *****************************************************************************/
 
d8597 1
a8597 1
    
d8601 1
a8601 1
    
d8608 1
a8608 1
    
d8613 1
a8613 1
    
a8617 10

/*****************************************************************************
 **
 ** uint32_t * xcb_alloc_color_planes_pixels
 ** 
 ** @@param const xcb_alloc_color_planes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8623 10

/*****************************************************************************
 **
 ** int xcb_alloc_color_planes_pixels_length
 ** 
 ** @@param const xcb_alloc_color_planes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8629 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_alloc_color_planes_pixels_end
 ** 
 ** @@param const xcb_alloc_color_planes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8639 12

/*****************************************************************************
 **
 ** xcb_alloc_color_planes_reply_t * xcb_alloc_color_planes_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_alloc_color_planes_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_alloc_color_planes_reply_t *
 **
 *****************************************************************************/
 
a8678 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_colors_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          plane_mask
 ** @@param uint32_t          pixels_len
 ** @@param const uint32_t   *pixels
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8692 1
a8692 1
    
d8696 1
a8696 1
    
d8700 1
a8700 1
    
d8710 1
a8710 1
    
a8714 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_colors
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          plane_mask
 ** @@param uint32_t          pixels_len
 ** @@param const uint32_t   *pixels
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8728 1
a8728 1
    
d8732 1
a8732 1
    
d8736 1
a8736 1
    
d8746 1
a8746 1
    
a8750 10

/*****************************************************************************
 **
 ** void xcb_coloritem_next
 ** 
 ** @@param xcb_coloritem_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a8758 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_coloritem_end
 ** 
 ** @@param xcb_coloritem_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8799 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_store_colors_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_colormap_t         cmap
 ** @@param uint32_t               items_len
 ** @@param const xcb_coloritem_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8812 1
a8812 1
    
d8816 1
a8816 1
    
d8819 1
a8819 1
    
d8829 1
a8829 1
    
a8833 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_store_colors
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_colormap_t         cmap
 ** @@param uint32_t               items_len
 ** @@param const xcb_coloritem_t *items
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8846 1
a8846 1
    
d8850 1
a8850 1
    
d8853 1
a8853 1
    
d8863 1
a8863 1
    
a8898 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_store_named_color_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           flags
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          pixel
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8913 1
a8913 1
    
d8917 1
a8917 1
    
d8923 1
a8923 1
    
d8933 1
a8933 1
    
a8937 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_store_named_color
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           flags
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          pixel
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8952 1
a8952 1
    
d8956 1
a8956 1
    
d8962 1
a8962 1
    
d8972 1
a8972 1
    
a8976 10

/*****************************************************************************
 **
 ** void xcb_rgb_next
 ** 
 ** @@param xcb_rgb_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a8984 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_rgb_end
 ** 
 ** @@param xcb_rgb_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9025 13

/*****************************************************************************
 **
 ** xcb_query_colors_cookie_t xcb_query_colors
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          pixels_len
 ** @@param const uint32_t   *pixels
 ** @@returns xcb_query_colors_cookie_t
 **
 *****************************************************************************/
 
d9038 1
a9038 1
    
d9042 1
a9042 1
    
d9045 1
a9045 1
    
d9055 1
a9055 1
    
a9059 13

/*****************************************************************************
 **
 ** xcb_query_colors_cookie_t xcb_query_colors_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint32_t          pixels_len
 ** @@param const uint32_t   *pixels
 ** @@returns xcb_query_colors_cookie_t
 **
 *****************************************************************************/
 
d9072 1
a9072 1
    
d9076 1
a9076 1
    
d9079 1
a9079 1
    
d9089 1
a9089 1
    
a9093 10

/*****************************************************************************
 **
 ** xcb_rgb_t * xcb_query_colors_colors
 ** 
 ** @@param const xcb_query_colors_reply_t *R
 ** @@returns xcb_rgb_t *
 **
 *****************************************************************************/
 
a9099 10

/*****************************************************************************
 **
 ** int xcb_query_colors_colors_length
 ** 
 ** @@param const xcb_query_colors_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9105 10

/*****************************************************************************
 **
 ** xcb_rgb_iterator_t xcb_query_colors_colors_iterator
 ** 
 ** @@param const xcb_query_colors_reply_t *R
 ** @@returns xcb_rgb_iterator_t
 **
 *****************************************************************************/
 
a9115 12

/*****************************************************************************
 **
 ** xcb_query_colors_reply_t * xcb_query_colors_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_query_colors_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_query_colors_reply_t *
 **
 *****************************************************************************/
 
a9154 13

/*****************************************************************************
 **
 ** xcb_lookup_color_cookie_t xcb_lookup_color
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_lookup_color_cookie_t
 **
 *****************************************************************************/
 
d9167 1
a9167 1
    
d9171 1
a9171 1
    
d9176 1
a9176 1
    
d9186 1
a9186 1
    
a9190 13

/*****************************************************************************
 **
 ** xcb_lookup_color_cookie_t xcb_lookup_color_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_colormap_t    cmap
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_lookup_color_cookie_t
 **
 *****************************************************************************/
 
d9203 1
a9203 1
    
d9207 1
a9207 1
    
d9212 1
a9212 1
    
d9222 1
a9222 1
    
a9226 12

/*****************************************************************************
 **
 ** xcb_lookup_color_reply_t * xcb_lookup_color_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_lookup_color_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_lookup_color_reply_t *
 **
 *****************************************************************************/
 
a9234 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cid
 ** @@param xcb_pixmap_t      source
 ** @@param xcb_pixmap_t      mask
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@param uint16_t          x
 ** @@param uint16_t          y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9255 1
a9255 1
    
d9259 1
a9259 1
    
d9272 1
a9272 1
    
d9277 1
a9277 1
    
a9281 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cid
 ** @@param xcb_pixmap_t      source
 ** @@param xcb_pixmap_t      mask
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@param uint16_t          x
 ** @@param uint16_t          y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9302 1
a9302 1
    
d9306 1
a9306 1
    
d9319 1
a9319 1
    
d9324 1
a9324 1
    
a9328 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_glyph_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cid
 ** @@param xcb_font_t        source_font
 ** @@param xcb_font_t        mask_font
 ** @@param uint16_t          source_char
 ** @@param uint16_t          mask_char
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9349 1
a9349 1
    
d9353 1
a9353 1
    
d9366 1
a9366 1
    
d9371 1
a9371 1
    
a9375 21

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_create_glyph_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cid
 ** @@param xcb_font_t        source_font
 ** @@param xcb_font_t        mask_font
 ** @@param uint16_t          source_char
 ** @@param uint16_t          mask_char
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9396 1
a9396 1
    
d9400 1
a9400 1
    
d9413 1
a9413 1
    
d9418 1
a9418 1
    
a9422 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9433 1
a9433 1
    
d9437 1
a9437 1
    
d9440 1
a9440 1
    
d9445 1
a9445 1
    
a9449 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_free_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9460 1
a9460 1
    
d9464 1
a9464 1
    
d9467 1
a9467 1
    
d9472 1
a9472 1
    
a9476 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_recolor_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9493 1
a9493 1
    
d9497 1
a9497 1
    
d9506 1
a9506 1
    
d9511 1
a9511 1
    
a9515 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_recolor_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param uint16_t          fore_red
 ** @@param uint16_t          fore_green
 ** @@param uint16_t          fore_blue
 ** @@param uint16_t          back_red
 ** @@param uint16_t          back_green
 ** @@param uint16_t          back_blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9532 1
a9532 1
    
d9536 1
a9536 1
    
d9545 1
a9545 1
    
d9550 1
a9550 1
    
a9554 14

/*****************************************************************************
 **
 ** xcb_query_best_size_cookie_t xcb_query_best_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           _class
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d9568 1
a9568 1
    
d9572 1
a9572 1
    
d9577 1
a9577 1
    
d9582 1
a9582 1
    
a9586 14

/*****************************************************************************
 **
 ** xcb_query_best_size_cookie_t xcb_query_best_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           _class
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@returns xcb_query_best_size_cookie_t
 **
 *****************************************************************************/
 
d9600 1
a9600 1
    
d9604 1
a9604 1
    
d9609 1
a9609 1
    
d9614 1
a9614 1
    
a9618 12

/*****************************************************************************
 **
 ** xcb_query_best_size_reply_t * xcb_query_best_size_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_query_best_size_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_query_best_size_reply_t *
 **
 *****************************************************************************/
 
a9657 12

/*****************************************************************************
 **
 ** xcb_query_extension_cookie_t xcb_query_extension
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_query_extension_cookie_t
 **
 *****************************************************************************/
 
d9669 1
a9669 1
    
d9673 1
a9673 1
    
d9677 1
a9677 1
    
d9687 1
a9687 1
    
a9691 12

/*****************************************************************************
 **
 ** xcb_query_extension_cookie_t xcb_query_extension_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          name_len
 ** @@param const char       *name
 ** @@returns xcb_query_extension_cookie_t
 **
 *****************************************************************************/
 
d9703 1
a9703 1
    
d9707 1
a9707 1
    
d9711 1
a9711 1
    
d9721 1
a9721 1
    
a9725 12

/*****************************************************************************
 **
 ** xcb_query_extension_reply_t * xcb_query_extension_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_query_extension_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_query_extension_reply_t *
 **
 *****************************************************************************/
 
a9769 10

/*****************************************************************************
 **
 ** xcb_list_extensions_cookie_t xcb_list_extensions
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_list_extensions_cookie_t
 **
 *****************************************************************************/
 
d9779 1
a9779 1
    
d9783 1
a9783 1
    
d9785 1
a9785 1
    
d9790 1
a9790 1
    
a9794 10

/*****************************************************************************
 **
 ** xcb_list_extensions_cookie_t xcb_list_extensions_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_list_extensions_cookie_t
 **
 *****************************************************************************/
 
d9804 1
a9804 1
    
d9808 1
a9808 1
    
d9810 1
a9810 1
    
d9815 1
a9815 1
    
a9819 10

/*****************************************************************************
 **
 ** int xcb_list_extensions_names_length
 ** 
 ** @@param const xcb_list_extensions_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9825 10

/*****************************************************************************
 **
 ** xcb_str_iterator_t xcb_list_extensions_names_iterator
 ** 
 ** @@param const xcb_list_extensions_reply_t *R
 ** @@returns xcb_str_iterator_t
 **
 *****************************************************************************/
 
a9835 12

/*****************************************************************************
 **
 ** xcb_list_extensions_reply_t * xcb_list_extensions_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_list_extensions_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_list_extensions_reply_t *
 **
 *****************************************************************************/
 
a9874 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_keyboard_mapping_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint8_t             keycode_count
 ** @@param xcb_keycode_t       first_keycode
 ** @@param uint8_t             keysyms_per_keycode
 ** @@param const xcb_keysym_t *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9888 1
a9888 1
    
d9892 1
a9892 1
    
d9897 1
a9897 1
    
d9907 1
a9907 1
    
a9911 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_keyboard_mapping
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint8_t             keycode_count
 ** @@param xcb_keycode_t       first_keycode
 ** @@param uint8_t             keysyms_per_keycode
 ** @@param const xcb_keysym_t *keysyms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9925 1
a9925 1
    
d9929 1
a9929 1
    
d9934 1
a9934 1
    
d9944 1
a9944 1
    
a9979 12

/*****************************************************************************
 **
 ** xcb_get_keyboard_mapping_cookie_t xcb_get_keyboard_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_keycode_t     first_keycode
 ** @@param uint8_t           count
 ** @@returns xcb_get_keyboard_mapping_cookie_t
 **
 *****************************************************************************/
 
d9991 1
a9991 1
    
d9995 1
a9995 1
    
d9999 1
a9999 1
    
d10004 1
a10004 1
    
a10008 12

/*****************************************************************************
 **
 ** xcb_get_keyboard_mapping_cookie_t xcb_get_keyboard_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_keycode_t     first_keycode
 ** @@param uint8_t           count
 ** @@returns xcb_get_keyboard_mapping_cookie_t
 **
 *****************************************************************************/
 
d10020 1
a10020 1
    
d10024 1
a10024 1
    
d10028 1
a10028 1
    
d10033 1
a10033 1
    
a10037 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_get_keyboard_mapping_keysyms
 ** 
 ** @@param const xcb_get_keyboard_mapping_reply_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a10043 10

/*****************************************************************************
 **
 ** int xcb_get_keyboard_mapping_keysyms_length
 ** 
 ** @@param const xcb_get_keyboard_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10049 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_keyboard_mapping_keysyms_end
 ** 
 ** @@param const xcb_get_keyboard_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10059 12

/*****************************************************************************
 **
 ** xcb_get_keyboard_mapping_reply_t * xcb_get_keyboard_mapping_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_get_keyboard_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_get_keyboard_mapping_reply_t *
 **
 *****************************************************************************/
 
a10098 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_keyboard_control_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10110 1
a10110 1
    
d10114 1
a10114 1
    
d10117 1
a10117 1
    
d10127 1
a10127 1
    
a10131 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_keyboard_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          value_mask
 ** @@param const uint32_t   *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10143 1
a10143 1
    
d10147 1
a10147 1
    
d10150 1
a10150 1
    
d10160 1
a10160 1
    
a10164 10

/*****************************************************************************
 **
 ** xcb_get_keyboard_control_cookie_t xcb_get_keyboard_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_keyboard_control_cookie_t
 **
 *****************************************************************************/
 
d10174 1
a10174 1
    
d10178 1
a10178 1
    
d10180 1
a10180 1
    
d10185 1
a10185 1
    
a10189 10

/*****************************************************************************
 **
 ** xcb_get_keyboard_control_cookie_t xcb_get_keyboard_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_keyboard_control_cookie_t
 **
 *****************************************************************************/
 
d10199 1
a10199 1
    
d10203 1
a10203 1
    
d10205 1
a10205 1
    
d10210 1
a10210 1
    
a10214 12

/*****************************************************************************
 **
 ** xcb_get_keyboard_control_reply_t * xcb_get_keyboard_control_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_get_keyboard_control_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_get_keyboard_control_reply_t *
 **
 *****************************************************************************/
 
a10222 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_bell_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10233 1
a10233 1
    
d10237 1
a10237 1
    
d10239 1
a10239 1
    
d10244 1
a10244 1
    
a10248 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_bell
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int8_t            percent
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10259 1
a10259 1
    
d10263 1
a10263 1
    
d10265 1
a10265 1
    
d10270 1
a10270 1
    
a10274 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_pointer_control_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int16_t           acceleration_numerator
 ** @@param int16_t           acceleration_denominator
 ** @@param int16_t           threshold
 ** @@param uint8_t           do_acceleration
 ** @@param uint8_t           do_threshold
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10289 1
a10289 1
    
d10293 1
a10293 1
    
d10300 1
a10300 1
    
d10305 1
a10305 1
    
a10309 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_pointer_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int16_t           acceleration_numerator
 ** @@param int16_t           acceleration_denominator
 ** @@param int16_t           threshold
 ** @@param uint8_t           do_acceleration
 ** @@param uint8_t           do_threshold
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10324 1
a10324 1
    
d10328 1
a10328 1
    
d10335 1
a10335 1
    
d10340 1
a10340 1
    
a10344 10

/*****************************************************************************
 **
 ** xcb_get_pointer_control_cookie_t xcb_get_pointer_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_pointer_control_cookie_t
 **
 *****************************************************************************/
 
d10354 1
a10354 1
    
d10358 1
a10358 1
    
d10360 1
a10360 1
    
d10365 1
a10365 1
    
a10369 10

/*****************************************************************************
 **
 ** xcb_get_pointer_control_cookie_t xcb_get_pointer_control_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_pointer_control_cookie_t
 **
 *****************************************************************************/
 
d10379 1
a10379 1
    
d10383 1
a10383 1
    
d10385 1
a10385 1
    
d10390 1
a10390 1
    
a10394 12

/*****************************************************************************
 **
 ** xcb_get_pointer_control_reply_t * xcb_get_pointer_control_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_get_pointer_control_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_get_pointer_control_reply_t *
 **
 *****************************************************************************/
 
a10402 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_screen_saver_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int16_t           timeout
 ** @@param int16_t           interval
 ** @@param uint8_t           prefer_blanking
 ** @@param uint8_t           allow_exposures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10416 1
a10416 1
    
d10420 1
a10420 1
    
d10426 1
a10426 1
    
d10431 1
a10431 1
    
a10435 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_screen_saver
 ** 
 ** @@param xcb_connection_t *c
 ** @@param int16_t           timeout
 ** @@param int16_t           interval
 ** @@param uint8_t           prefer_blanking
 ** @@param uint8_t           allow_exposures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10449 1
a10449 1
    
d10453 1
a10453 1
    
d10459 1
a10459 1
    
d10464 1
a10464 1
    
a10468 10

/*****************************************************************************
 **
 ** xcb_get_screen_saver_cookie_t xcb_get_screen_saver
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_screen_saver_cookie_t
 **
 *****************************************************************************/
 
d10478 1
a10478 1
    
d10482 1
a10482 1
    
d10484 1
a10484 1
    
d10489 1
a10489 1
    
a10493 10

/*****************************************************************************
 **
 ** xcb_get_screen_saver_cookie_t xcb_get_screen_saver_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_screen_saver_cookie_t
 **
 *****************************************************************************/
 
d10503 1
a10503 1
    
d10507 1
a10507 1
    
d10509 1
a10509 1
    
d10514 1
a10514 1
    
a10518 12

/*****************************************************************************
 **
 ** xcb_get_screen_saver_reply_t * xcb_get_screen_saver_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_get_screen_saver_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_get_screen_saver_reply_t *
 **
 *****************************************************************************/
 
a10557 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_hosts_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param uint8_t           family
 ** @@param uint16_t          address_len
 ** @@param const uint8_t    *address
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10571 1
a10571 1
    
d10575 1
a10575 1
    
d10580 1
a10580 1
    
d10590 1
a10590 1
    
a10594 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_change_hosts
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param uint8_t           family
 ** @@param uint16_t          address_len
 ** @@param const uint8_t    *address
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10608 1
a10608 1
    
d10612 1
a10612 1
    
d10617 1
a10617 1
    
d10627 1
a10627 1
    
a10662 10

/*****************************************************************************
 **
 ** uint8_t * xcb_host_address
 ** 
 ** @@param const xcb_host_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a10668 10

/*****************************************************************************
 **
 ** int xcb_host_address_length
 ** 
 ** @@param const xcb_host_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10674 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_host_address_end
 ** 
 ** @@param const xcb_host_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10684 10

/*****************************************************************************
 **
 ** void xcb_host_next
 ** 
 ** @@param xcb_host_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a10695 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_host_end
 ** 
 ** @@param xcb_host_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10743 10

/*****************************************************************************
 **
 ** xcb_list_hosts_cookie_t xcb_list_hosts
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_list_hosts_cookie_t
 **
 *****************************************************************************/
 
d10753 1
a10753 1
    
d10757 1
a10757 1
    
d10759 1
a10759 1
    
d10764 1
a10764 1
    
a10768 10

/*****************************************************************************
 **
 ** xcb_list_hosts_cookie_t xcb_list_hosts_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_list_hosts_cookie_t
 **
 *****************************************************************************/
 
d10778 1
a10778 1
    
d10782 1
a10782 1
    
d10784 1
a10784 1
    
d10789 1
a10789 1
    
a10793 10

/*****************************************************************************
 **
 ** int xcb_list_hosts_hosts_length
 ** 
 ** @@param const xcb_list_hosts_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10799 10

/*****************************************************************************
 **
 ** xcb_host_iterator_t xcb_list_hosts_hosts_iterator
 ** 
 ** @@param const xcb_list_hosts_reply_t *R
 ** @@returns xcb_host_iterator_t
 **
 *****************************************************************************/
 
a10809 12

/*****************************************************************************
 **
 ** xcb_list_hosts_reply_t * xcb_list_hosts_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_list_hosts_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_list_hosts_reply_t *
 **
 *****************************************************************************/
 
a10817 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_access_control_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10828 1
a10828 1
    
d10832 1
a10832 1
    
d10834 1
a10834 1
    
d10839 1
a10839 1
    
a10843 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_access_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10854 1
a10854 1
    
d10858 1
a10858 1
    
d10860 1
a10860 1
    
d10865 1
a10865 1
    
a10869 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_close_down_mode_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10880 1
a10880 1
    
d10884 1
a10884 1
    
d10886 1
a10886 1
    
d10891 1
a10891 1
    
a10895 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_set_close_down_mode
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10906 1
a10906 1
    
d10910 1
a10910 1
    
d10912 1
a10912 1
    
d10917 1
a10917 1
    
a10921 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_kill_client_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          resource
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10932 1
a10932 1
    
d10936 1
a10936 1
    
d10939 1
a10939 1
    
d10944 1
a10944 1
    
a10948 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_kill_client
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          resource
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10959 1
a10959 1
    
d10963 1
a10963 1
    
d10966 1
a10966 1
    
d10971 1
a10971 1
    
a11006 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_rotate_properties_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          atoms_len
 ** @@param int16_t           delta
 ** @@param const xcb_atom_t *atoms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11020 1
a11020 1
    
d11024 1
a11024 1
    
d11029 1
a11029 1
    
d11039 1
a11039 1
    
a11043 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_rotate_properties
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          atoms_len
 ** @@param int16_t           delta
 ** @@param const xcb_atom_t *atoms
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11057 1
a11057 1
    
d11061 1
a11061 1
    
d11066 1
a11066 1
    
d11076 1
a11076 1
    
a11080 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_force_screen_saver_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11091 1
a11091 1
    
d11095 1
a11095 1
    
d11097 1
a11097 1
    
d11102 1
a11102 1
    
a11106 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_force_screen_saver
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11117 1
a11117 1
    
d11121 1
a11121 1
    
d11123 1
a11123 1
    
d11128 1
a11128 1
    
a11163 12

/*****************************************************************************
 **
 ** xcb_set_pointer_mapping_cookie_t xcb_set_pointer_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           map_len
 ** @@param const uint8_t    *map
 ** @@returns xcb_set_pointer_mapping_cookie_t
 **
 *****************************************************************************/
 
d11175 1
a11175 1
    
d11179 1
a11179 1
    
d11181 1
a11181 1
    
d11191 1
a11191 1
    
a11195 12

/*****************************************************************************
 **
 ** xcb_set_pointer_mapping_cookie_t xcb_set_pointer_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           map_len
 ** @@param const uint8_t    *map
 ** @@returns xcb_set_pointer_mapping_cookie_t
 **
 *****************************************************************************/
 
d11207 1
a11207 1
    
d11211 1
a11211 1
    
d11213 1
a11213 1
    
d11223 1
a11223 1
    
a11227 12

/*****************************************************************************
 **
 ** xcb_set_pointer_mapping_reply_t * xcb_set_pointer_mapping_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_set_pointer_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_set_pointer_mapping_reply_t *
 **
 *****************************************************************************/
 
a11266 10

/*****************************************************************************
 **
 ** xcb_get_pointer_mapping_cookie_t xcb_get_pointer_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_pointer_mapping_cookie_t
 **
 *****************************************************************************/
 
d11276 1
a11276 1
    
d11280 1
a11280 1
    
d11282 1
a11282 1
    
d11287 1
a11287 1
    
a11291 10

/*****************************************************************************
 **
 ** xcb_get_pointer_mapping_cookie_t xcb_get_pointer_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_pointer_mapping_cookie_t
 **
 *****************************************************************************/
 
d11301 1
a11301 1
    
d11305 1
a11305 1
    
d11307 1
a11307 1
    
d11312 1
a11312 1
    
a11316 10

/*****************************************************************************
 **
 ** uint8_t * xcb_get_pointer_mapping_map
 ** 
 ** @@param const xcb_get_pointer_mapping_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a11322 10

/*****************************************************************************
 **
 ** int xcb_get_pointer_mapping_map_length
 ** 
 ** @@param const xcb_get_pointer_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a11328 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_pointer_mapping_map_end
 ** 
 ** @@param const xcb_get_pointer_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a11338 12

/*****************************************************************************
 **
 ** xcb_get_pointer_mapping_reply_t * xcb_get_pointer_mapping_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_get_pointer_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_get_pointer_mapping_reply_t *
 **
 *****************************************************************************/
 
a11377 12

/*****************************************************************************
 **
 ** xcb_set_modifier_mapping_cookie_t xcb_set_modifier_mapping
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param uint8_t              keycodes_per_modifier
 ** @@param const xcb_keycode_t *keycodes
 ** @@returns xcb_set_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d11389 1
a11389 1
    
d11393 1
a11393 1
    
d11395 1
a11395 1
    
d11405 1
a11405 1
    
a11409 12

/*****************************************************************************
 **
 ** xcb_set_modifier_mapping_cookie_t xcb_set_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param uint8_t              keycodes_per_modifier
 ** @@param const xcb_keycode_t *keycodes
 ** @@returns xcb_set_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d11421 1
a11421 1
    
d11425 1
a11425 1
    
d11427 1
a11427 1
    
d11437 1
a11437 1
    
a11441 12

/*****************************************************************************
 **
 ** xcb_set_modifier_mapping_reply_t * xcb_set_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_set_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_set_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
a11480 10

/*****************************************************************************
 **
 ** xcb_get_modifier_mapping_cookie_t xcb_get_modifier_mapping
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d11490 1
a11490 1
    
d11494 1
a11494 1
    
d11496 1
a11496 1
    
d11501 1
a11501 1
    
a11505 10

/*****************************************************************************
 **
 ** xcb_get_modifier_mapping_cookie_t xcb_get_modifier_mapping_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_get_modifier_mapping_cookie_t
 **
 *****************************************************************************/
 
d11515 1
a11515 1
    
d11519 1
a11519 1
    
d11521 1
a11521 1
    
d11526 1
a11526 1
    
a11530 10

/*****************************************************************************
 **
 ** xcb_keycode_t * xcb_get_modifier_mapping_keycodes
 ** 
 ** @@param const xcb_get_modifier_mapping_reply_t *R
 ** @@returns xcb_keycode_t *
 **
 *****************************************************************************/
 
a11536 10

/*****************************************************************************
 **
 ** int xcb_get_modifier_mapping_keycodes_length
 ** 
 ** @@param const xcb_get_modifier_mapping_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a11542 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_get_modifier_mapping_keycodes_end
 ** 
 ** @@param const xcb_get_modifier_mapping_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a11552 12

/*****************************************************************************
 **
 ** xcb_get_modifier_mapping_reply_t * xcb_get_modifier_mapping_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_get_modifier_mapping_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_get_modifier_mapping_reply_t *
 **
 *****************************************************************************/
 
a11560 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_no_operation_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11570 1
a11570 1
    
d11574 1
a11574 1
    
d11576 1
a11576 1
    
d11581 1
a11581 1
    
a11585 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_no_operation
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d11595 1
a11595 1
    
d11599 1
a11599 1
    
d11601 1
a11601 1
    
d11606 1
a11606 1
    
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d786 1
a786 1
    unsigned int xcb_align_to;
d791 2
d912 1
a912 1
    unsigned int xcb_align_to;
d919 2
d1027 1
a1027 1
    unsigned int xcb_align_to;
d1032 2
d1219 1
a1219 1
    unsigned int xcb_align_to;
d1224 2
d1345 1
a1345 1
    unsigned int xcb_align_to;
d1350 2
d1471 1
a1471 1
    unsigned int xcb_align_to;
d1478 2
d1755 1
a1755 1
    unsigned int xcb_align_to;
d1760 2
d1934 1
a1934 1
    unsigned int xcb_align_to;
d1939 2
d2787 1
a2787 1
    unsigned int xcb_align_to;
d2792 2
d3092 1
a3092 1
    unsigned int xcb_align_to;
d3097 2
d3271 1
a3271 1
    unsigned int xcb_align_to;
d3276 2
d3418 1
a3418 1
    unsigned int xcb_align_to;
d3423 2
d3597 1
a3597 1
    unsigned int xcb_align_to;
d3602 2
d3830 1
a3830 1
    unsigned int xcb_align_to;
d3835 2
d4037 1
a4037 1
    unsigned int xcb_align_to;
d4042 2
d5850 1
a5850 1
    unsigned int xcb_align_to;
d5855 2
d6539 1
a6539 1
    unsigned int xcb_align_to;
d6544 2
d6820 1
a6820 1
    unsigned int xcb_align_to;
d6825 2
d7065 1
a7065 1
    unsigned int xcb_align_to;
d7070 2
d7210 1
a7210 1
    unsigned int xcb_align_to;
d7215 2
d7336 1
a7336 1
    unsigned int xcb_align_to;
d7341 2
d7519 1
a7519 1
    unsigned int xcb_align_to;
d7524 2
d7772 1
a7772 1
    unsigned int xcb_align_to;
d7779 2
d7918 1
a7918 1
    unsigned int xcb_align_to;
d7925 2
d8254 1
a8254 1
    unsigned int xcb_align_to;
d8259 2
d8387 1
a8387 1
    unsigned int xcb_align_to;
d8392 2
d8602 1
a8602 1
    unsigned int xcb_align_to;
d8607 2
d8735 1
a8735 1
    unsigned int xcb_align_to;
d8740 2
d9310 1
a9310 1
    unsigned int xcb_align_to;
d9315 2
d9445 1
a9445 1
    unsigned int xcb_align_to;
d9450 2
d9618 1
a9618 1
    unsigned int xcb_align_to;
d9623 2
d9749 1
a9749 1
    unsigned int xcb_align_to;
d9754 2
d9880 1
a9880 1
    unsigned int xcb_align_to;
d9885 2
d10011 1
a10011 1
    unsigned int xcb_align_to;
d10016 2
d10156 1
a10156 1
    unsigned int xcb_align_to;
d10161 2
d10287 1
a10287 1
    unsigned int xcb_align_to;
d10292 2
d10418 1
a10418 1
    unsigned int xcb_align_to;
d10423 2
d10591 1
a10591 1
    unsigned int xcb_align_to;
d10596 2
d10804 1
a10804 1
    unsigned int xcb_align_to;
d10809 2
d10947 1
a10947 1
    unsigned int xcb_align_to;
d10952 2
d11090 1
a11090 1
    unsigned int xcb_align_to;
d11095 2
d11233 1
a11233 1
    unsigned int xcb_align_to;
d11238 2
d11778 1
a11778 1
    unsigned int xcb_align_to;
d11783 2
d12073 1
a12073 1
    unsigned int xcb_align_to;
d12078 2
d12222 1
a12222 1
    unsigned int xcb_align_to;
d12227 2
d12483 1
a12483 1
    unsigned int xcb_align_to;
d12488 2
d12690 1
a12690 1
    unsigned int xcb_align_to;
d12695 2
d12859 1
a12859 1
    unsigned int xcb_align_to;
d12864 2
d12984 1
a12984 1
    unsigned int xcb_align_to;
d12989 2
d13161 1
a13161 1
    unsigned int xcb_align_to;
d13166 2
d13358 1
a13358 1
    unsigned int xcb_align_to;
d13363 2
d14079 1
a14079 1
    unsigned int xcb_align_to;
d14084 2
d14222 1
a14222 1
    unsigned int xcb_align_to;
d14229 2
d14384 1
a14384 1
    unsigned int xcb_align_to;
d14389 2
d14517 1
a14517 1
    unsigned int xcb_align_to;
d14522 2
d14702 1
a14702 1
    unsigned int xcb_align_to;
d14707 2
d15361 1
a15361 1
    unsigned int xcb_align_to;
d15366 2
d15494 1
a15494 1
    unsigned int xcb_align_to;
d15499 2
d15620 1
a15620 1
    unsigned int xcb_align_to;
d15627 2
d16006 1
a16006 1
    unsigned int xcb_align_to;
d16011 2
d16213 1
a16213 1
    unsigned int xcb_align_to;
d16218 2
d16352 1
a16352 1
    unsigned int xcb_align_to;
d16357 2
d16525 1
a16525 1
    unsigned int xcb_align_to;
d16530 2
d16664 1
a16664 1
    unsigned int xcb_align_to;
d16669 2
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d16 2
d778 29
d873 3
a875 1
    xcb_generic_iterator_t child = xcb_visualtype_end(xcb_depth_visuals_iterator(R));
a877 1
    i->index = child.index;
d902 34
d986 3
a988 1
    xcb_generic_iterator_t child = xcb_depth_end(xcb_screen_allowed_depths_iterator(R));
a990 1
    i->index = child.index;
d1015 41
d1176 3
a1178 1
    xcb_generic_iterator_t child = xcb_setup_request_authorization_protocol_data_end(R);
a1180 1
    i->index = child.index;
d1205 29
d1300 3
a1302 1
    xcb_generic_iterator_t child = xcb_setup_failed_reason_end(R);
a1304 1
    i->index = child.index;
d1329 29
d1424 3
a1426 1
    xcb_generic_iterator_t child = xcb_setup_authenticate_reason_end(R);
a1428 1
    i->index = child.index;
d1453 58
d1668 3
a1670 1
    xcb_generic_iterator_t child = xcb_screen_end(xcb_setup_roots_iterator(R));
a1672 1
    i->index = child.index;
d1735 29
d1828 1
d1833 1
d1902 1
d1907 1
d1912 29
d1979 1
d1984 1
d2027 1
d2032 1
d2070 1
d2108 1
d2166 1
d2204 1
d2242 1
d2280 1
d2320 1
d2360 1
d2407 1
d2454 1
d2492 1
d2530 1
d2568 1
d2606 1
d2644 1
d2682 1
d2720 1
d2758 1
d2763 29
d2831 1
d2836 1
d2880 1
d2885 1
d2925 1
d2965 1
d3003 1
d3041 1
d3066 29
d3128 1
d3166 1
d3243 29
d3310 1
d3315 1
d3358 1
d3363 1
d3388 29
d3450 1
d3488 1
d3565 29
d3644 1
d3649 1
d3704 1
d3709 1
d3750 1
d3791 1
d3796 29
d3872 1
d3924 1
d4001 29
d4063 1
d4101 1
d4217 1
d4261 1
d4299 1
d4337 1
d4407 1
d4457 1
d4503 1
d4549 1
d4607 1
d4665 1
d4723 1
d4761 1
d4823 1
d4885 1
d4929 1
d4973 1
d5018 1
d5063 1
d5113 1
d5163 1
d5221 1
d5259 1
d5312 1
d5365 1
d5409 1
d5453 1
d5493 1
d5533 1
d5568 1
d5603 1
d5638 1
d5673 1
d5711 1
d5749 1
d5812 29
d5880 1
d5924 1
d6043 1
d6090 1
d6169 1
d6228 1
d6271 1
d6314 1
d6349 1
d6384 1
d6439 1
d6474 1
d6499 29
d6567 1
d6572 1
d6616 1
d6621 1
d6659 1
d6697 1
d6778 41
d6852 1
d6890 1
d7021 29
d7087 1
d7092 1
d7134 1
d7139 1
d7164 29
d7259 3
a7261 1
    xcb_generic_iterator_t child = xcb_str_name_end(R);
a7263 1
    i->index = child.index;
d7288 29
d7355 1
d7360 1
d7403 1
d7408 1
d7469 29
d7536 1
d7541 1
d7584 1
d7589 1
d7720 34
d7781 3
d7793 1
d7795 7
a7801 1
    xcb_parts[4].iov_len = font_qty * sizeof(xcb_str_t);
d7804 1
d7836 3
d7848 1
d7850 7
a7856 1
    xcb_parts[4].iov_len = font_qty * sizeof(xcb_str_t);
d7859 1
d7864 34
d7928 1
d7963 1
d8068 1
d8117 1
d8155 1
d8193 1
d8198 29
d8268 1
d8273 1
d8319 1
d8324 1
d8329 29
d8396 1
d8401 1
d8444 1
d8449 1
d8493 1
d8537 1
d8542 29
d8612 1
d8617 1
d8663 1
d8668 1
d8673 29
d8747 1
d8752 1
d8802 1
d8807 1
d8845 1
d8883 1
d8935 1
d8987 1
d9049 1
d9111 1
d9176 1
d9241 1
d9246 29
d9317 1
d9322 1
d9369 1
d9374 1
d9379 29
d9450 1
d9455 1
d9502 1
d9507 1
d9550 29
d9619 1
d9624 1
d9669 1
d9674 1
d9679 29
d9748 1
d9753 1
d9798 1
d9803 1
d9808 29
d9877 1
d9882 1
d9927 1
d9932 1
d9937 29
d10013 1
d10018 1
d10070 1
d10075 1
d10080 29
d10149 1
d10154 1
d10199 1
d10204 1
d10209 29
d10278 1
d10283 1
d10328 1
d10333 1
d10338 29
d10428 1
d10433 1
d10499 1
d10504 1
d10509 29
d10588 1
d10643 1
d10720 29
d10795 1
d10800 1
d10851 1
d10856 1
d10861 29
d10936 1
d10941 1
d10992 1
d10997 1
d11002 29
d11077 1
d11082 1
d11133 1
d11138 1
d11143 29
d11218 1
d11223 1
d11274 1
d11279 1
d11325 1
d11371 1
d11409 1
d11447 1
d11488 1
d11529 1
d11567 1
d11605 1
d11643 1
d11681 1
d11686 29
d11748 1
d11786 1
d11906 1
d11954 1
d11979 29
d12047 1
d12052 1
d12096 1
d12101 1
d12126 41
d12208 1
d12254 1
d12385 29
d12461 1
d12513 1
d12590 29
d12659 1
d12664 1
d12709 1
d12714 1
d12757 29
d12823 1
d12828 1
d12870 1
d12875 1
d12880 29
d12953 1
d12958 1
d13007 1
d13012 1
d13055 29
d13121 1
d13126 1
d13168 1
d13173 1
d13250 29
d13318 1
d13323 1
d13367 1
d13372 1
d13460 1
d13528 1
d13596 1
d13664 1
d13702 1
d13740 1
d13796 1
d13852 1
d13898 1
d13944 1
d13969 29
d14034 1
d14039 1
d14080 1
d14085 1
d14110 34
d14174 1
d14209 1
d14270 29
d14340 1
d14345 1
d14391 1
d14396 1
d14401 29
d14466 1
d14507 1
d14584 29
d14648 1
d14653 1
d14693 1
d14698 1
d14733 1
d14768 1
d14825 1
d14862 1
d14912 1
d14962 1
d14997 1
d15032 1
d15099 1
d15146 1
d15181 1
d15216 1
d15241 29
d15311 1
d15316 1
d15362 1
d15367 1
d15372 29
d15467 3
a15469 1
    xcb_generic_iterator_t child = xcb_host_address_end(R);
a15471 1
    i->index = child.index;
d15496 34
d15560 1
d15595 1
d15688 1
d15725 1
d15762 1
d15799 1
d15837 1
d15875 1
d15880 29
d15950 1
d15955 1
d16001 1
d16006 1
d16043 1
d16080 1
d16085 29
d16148 1
d16153 1
d16192 1
d16197 1
d16222 29
d16281 1
d16316 1
d16393 29
d16456 1
d16461 1
d16500 1
d16505 1
d16530 29
d16589 1
d16624 1
d16731 1
d16766 1
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d6899 1
a6899 2
 ** @@param uint32_t          path_len
 ** @@param const char       *path
d6907 1
a6907 2
                           uint32_t          path_len  /**< */,
                           const char       *path  /**< */)
d6922 1
d6928 2
a6929 2
    xcb_parts[4].iov_base = (char *) path;
    xcb_parts[4].iov_len = path_len * sizeof(char);
d6943 1
a6943 2
 ** @@param uint32_t          path_len
 ** @@param const char       *path
d6951 1
a6951 2
                   uint32_t          path_len  /**< */,
                   const char       *path  /**< */)
d6966 1
d6972 2
a6973 2
    xcb_parts[4].iov_base = (char *) path;
    xcb_parts[4].iov_len = path_len * sizeof(char);
d12385 1
d12434 1
d13221 1
a13221 1
 ** @@param const char       *address
d13231 1
a13231 1
                          const char       *address  /**< */)
d13254 1
a13254 1
    xcb_parts[4].iov_len = address_len * sizeof(char);
d13270 1
a13270 1
 ** @@param const char       *address
d13280 1
a13280 1
                  const char       *address  /**< */)
d13303 1
a13303 1
    xcb_parts[4].iov_len = address_len * sizeof(char);
@


1.1
log
@Initial revision
@
text
@d3443 1
a3443 1
    return R->value_len;
d3460 1
a3460 1
    i.data = ((char *) (R + 1)) + (R->value_len);
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
