head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from record.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Record_API XCB Record API
 * @@brief Record XCB Protocol Implementation.
 * @@{
 **/

#ifndef __RECORD_H
#define __RECORD_H

#include "xcb.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_RECORD_MAJOR_VERSION 1
#define XCB_RECORD_MINOR_VERSION 13

extern xcb_extension_t xcb_record_id;

typedef uint32_t xcb_record_context_t;

/**
 * @@brief xcb_record_context_iterator_t
 **/
typedef struct xcb_record_context_iterator_t {
    xcb_record_context_t *data;
    int                   rem;
    int                   index;
} xcb_record_context_iterator_t;

/**
 * @@brief xcb_record_range_8_t
 **/
typedef struct xcb_record_range_8_t {
    uint8_t first;
    uint8_t last;
} xcb_record_range_8_t;

/**
 * @@brief xcb_record_range_8_iterator_t
 **/
typedef struct xcb_record_range_8_iterator_t {
    xcb_record_range_8_t *data;
    int                   rem;
    int                   index;
} xcb_record_range_8_iterator_t;

/**
 * @@brief xcb_record_range_16_t
 **/
typedef struct xcb_record_range_16_t {
    uint16_t first;
    uint16_t last;
} xcb_record_range_16_t;

/**
 * @@brief xcb_record_range_16_iterator_t
 **/
typedef struct xcb_record_range_16_iterator_t {
    xcb_record_range_16_t *data;
    int                    rem;
    int                    index;
} xcb_record_range_16_iterator_t;

/**
 * @@brief xcb_record_ext_range_t
 **/
typedef struct xcb_record_ext_range_t {
    xcb_record_range_8_t  major;
    xcb_record_range_16_t minor;
} xcb_record_ext_range_t;

/**
 * @@brief xcb_record_ext_range_iterator_t
 **/
typedef struct xcb_record_ext_range_iterator_t {
    xcb_record_ext_range_t *data;
    int                     rem;
    int                     index;
} xcb_record_ext_range_iterator_t;

/**
 * @@brief xcb_record_range_t
 **/
typedef struct xcb_record_range_t {
    xcb_record_range_8_t   core_requests;
    xcb_record_range_8_t   core_replies;
    xcb_record_ext_range_t ext_requests;
    xcb_record_ext_range_t ext_replies;
    xcb_record_range_8_t   delivered_events;
    xcb_record_range_8_t   device_events;
    xcb_record_range_8_t   errors;
    uint8_t                client_started;
    uint8_t                client_died;
} xcb_record_range_t;

/**
 * @@brief xcb_record_range_iterator_t
 **/
typedef struct xcb_record_range_iterator_t {
    xcb_record_range_t *data;
    int                 rem;
    int                 index;
} xcb_record_range_iterator_t;

typedef uint8_t xcb_record_element_header_t;

/**
 * @@brief xcb_record_element_header_iterator_t
 **/
typedef struct xcb_record_element_header_iterator_t {
    xcb_record_element_header_t *data;
    int                          rem;
    int                          index;
} xcb_record_element_header_iterator_t;

typedef enum xcb_record_h_type_t {
    XCB_RECORD_H_TYPE_FROM_SERVER_TIME = 1,
    XCB_RECORD_H_TYPE_FROM_CLIENT_TIME = 2,
    XCB_RECORD_H_TYPE_FROM_CLIENT_SEQUENCE = 4
} xcb_record_h_type_t;

typedef uint32_t xcb_record_client_spec_t;

/**
 * @@brief xcb_record_client_spec_iterator_t
 **/
typedef struct xcb_record_client_spec_iterator_t {
    xcb_record_client_spec_t *data;
    int                       rem;
    int                       index;
} xcb_record_client_spec_iterator_t;

typedef enum xcb_record_cs_t {
    XCB_RECORD_CS_CURRENT_CLIENTS = 1,
    XCB_RECORD_CS_FUTURE_CLIENTS = 2,
    XCB_RECORD_CS_ALL_CLIENTS = 3
} xcb_record_cs_t;

/**
 * @@brief xcb_record_client_info_t
 **/
typedef struct xcb_record_client_info_t {
    xcb_record_client_spec_t client_resource;
    uint32_t                 num_ranges;
} xcb_record_client_info_t;

/**
 * @@brief xcb_record_client_info_iterator_t
 **/
typedef struct xcb_record_client_info_iterator_t {
    xcb_record_client_info_t *data;
    int                       rem;
    int                       index;
} xcb_record_client_info_iterator_t;

/** Opcode for xcb_record_bad_context. */
#define XCB_RECORD_BAD_CONTEXT 0

/**
 * @@brief xcb_record_bad_context_error_t
 **/
typedef struct xcb_record_bad_context_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
    uint32_t invalid_record;
} xcb_record_bad_context_error_t;

/**
 * @@brief xcb_record_query_version_cookie_t
 **/
typedef struct xcb_record_query_version_cookie_t {
    unsigned int sequence;
} xcb_record_query_version_cookie_t;

/** Opcode for xcb_record_query_version. */
#define XCB_RECORD_QUERY_VERSION 0

/**
 * @@brief xcb_record_query_version_request_t
 **/
typedef struct xcb_record_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t major_version;
    uint16_t minor_version;
} xcb_record_query_version_request_t;

/**
 * @@brief xcb_record_query_version_reply_t
 **/
typedef struct xcb_record_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t major_version;
    uint16_t minor_version;
} xcb_record_query_version_reply_t;

/** Opcode for xcb_record_create_context. */
#define XCB_RECORD_CREATE_CONTEXT 1

/**
 * @@brief xcb_record_create_context_request_t
 **/
typedef struct xcb_record_create_context_request_t {
    uint8_t                     major_opcode;
    uint8_t                     minor_opcode;
    uint16_t                    length;
    xcb_record_context_t        context;
    xcb_record_element_header_t element_header;
    uint8_t                     pad0[3];
    uint32_t                    num_client_specs;
    uint32_t                    num_ranges;
} xcb_record_create_context_request_t;

/** Opcode for xcb_record_register_clients. */
#define XCB_RECORD_REGISTER_CLIENTS 2

/**
 * @@brief xcb_record_register_clients_request_t
 **/
typedef struct xcb_record_register_clients_request_t {
    uint8_t                     major_opcode;
    uint8_t                     minor_opcode;
    uint16_t                    length;
    xcb_record_context_t        context;
    xcb_record_element_header_t element_header;
    uint8_t                     pad0[3];
    uint32_t                    num_client_specs;
    uint32_t                    num_ranges;
} xcb_record_register_clients_request_t;

/** Opcode for xcb_record_unregister_clients. */
#define XCB_RECORD_UNREGISTER_CLIENTS 3

/**
 * @@brief xcb_record_unregister_clients_request_t
 **/
typedef struct xcb_record_unregister_clients_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_record_context_t context;
    uint32_t             num_client_specs;
} xcb_record_unregister_clients_request_t;

/**
 * @@brief xcb_record_get_context_cookie_t
 **/
typedef struct xcb_record_get_context_cookie_t {
    unsigned int sequence;
} xcb_record_get_context_cookie_t;

/** Opcode for xcb_record_get_context. */
#define XCB_RECORD_GET_CONTEXT 4

/**
 * @@brief xcb_record_get_context_request_t
 **/
typedef struct xcb_record_get_context_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_record_context_t context;
} xcb_record_get_context_request_t;

/**
 * @@brief xcb_record_get_context_reply_t
 **/
typedef struct xcb_record_get_context_reply_t {
    uint8_t                     response_type;
    uint8_t                     enabled;
    uint16_t                    sequence;
    uint32_t                    length;
    xcb_record_element_header_t element_header;
    uint8_t                     pad0[3];
    uint32_t                    num_intercepted_clients;
    uint8_t                     pad1[16];
} xcb_record_get_context_reply_t;

/**
 * @@brief xcb_record_enable_context_cookie_t
 **/
typedef struct xcb_record_enable_context_cookie_t {
    unsigned int sequence;
} xcb_record_enable_context_cookie_t;

/** Opcode for xcb_record_enable_context. */
#define XCB_RECORD_ENABLE_CONTEXT 5

/**
 * @@brief xcb_record_enable_context_request_t
 **/
typedef struct xcb_record_enable_context_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_record_context_t context;
} xcb_record_enable_context_request_t;

/**
 * @@brief xcb_record_enable_context_reply_t
 **/
typedef struct xcb_record_enable_context_reply_t {
    uint8_t                     response_type;
    uint8_t                     category;
    uint16_t                    sequence;
    uint32_t                    length;
    xcb_record_element_header_t element_header;
    uint8_t                     client_swapped;
    uint8_t                     pad0[2];
    uint32_t                    xid_base;
    uint32_t                    server_time;
    uint32_t                    rec_sequence_num;
    uint8_t                     pad1[8];
} xcb_record_enable_context_reply_t;

/** Opcode for xcb_record_disable_context. */
#define XCB_RECORD_DISABLE_CONTEXT 6

/**
 * @@brief xcb_record_disable_context_request_t
 **/
typedef struct xcb_record_disable_context_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_record_context_t context;
} xcb_record_disable_context_request_t;

/** Opcode for xcb_record_free_context. */
#define XCB_RECORD_FREE_CONTEXT 7

/**
 * @@brief xcb_record_free_context_request_t
 **/
typedef struct xcb_record_free_context_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_record_context_t context;
} xcb_record_free_context_request_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_context_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_context_t)
 */
void
xcb_record_context_next (xcb_record_context_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_context_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_context_end (xcb_record_context_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_range_8_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_range_8_t)
 */
void
xcb_record_range_8_next (xcb_record_range_8_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_range_8_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_range_8_end (xcb_record_range_8_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_range_16_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_range_16_t)
 */
void
xcb_record_range_16_next (xcb_record_range_16_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_range_16_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_range_16_end (xcb_record_range_16_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_ext_range_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_ext_range_t)
 */
void
xcb_record_ext_range_next (xcb_record_ext_range_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_ext_range_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_ext_range_end (xcb_record_ext_range_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_range_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_range_t)
 */
void
xcb_record_range_next (xcb_record_range_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_range_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_range_end (xcb_record_range_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_element_header_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_element_header_t)
 */
void
xcb_record_element_header_next (xcb_record_element_header_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_element_header_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_element_header_end (xcb_record_element_header_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_client_spec_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_client_spec_t)
 */
void
xcb_record_client_spec_next (xcb_record_client_spec_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_client_spec_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_client_spec_end (xcb_record_client_spec_iterator_t i);

int
xcb_record_client_info_sizeof (const void  *_buffer);

xcb_record_range_t *
xcb_record_client_info_ranges (const xcb_record_client_info_t *R);

int
xcb_record_client_info_ranges_length (const xcb_record_client_info_t *R);

xcb_record_range_iterator_t
xcb_record_client_info_ranges_iterator (const xcb_record_client_info_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_record_client_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_record_client_info_t)
 */
void
xcb_record_client_info_next (xcb_record_client_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_record_client_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_record_client_info_end (xcb_record_client_info_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_record_query_version_cookie_t
xcb_record_query_version (xcb_connection_t *c,
                          uint16_t          major_version,
                          uint16_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_record_query_version_cookie_t
xcb_record_query_version_unchecked (xcb_connection_t *c,
                                    uint16_t          major_version,
                                    uint16_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_record_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_record_query_version_reply_t *
xcb_record_query_version_reply (xcb_connection_t                   *c,
                                xcb_record_query_version_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_record_create_context_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_record_create_context_checked (xcb_connection_t               *c,
                                   xcb_record_context_t            context,
                                   xcb_record_element_header_t     element_header,
                                   uint32_t                        num_client_specs,
                                   uint32_t                        num_ranges,
                                   const xcb_record_client_spec_t *client_specs,
                                   const xcb_record_range_t       *ranges);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_record_create_context (xcb_connection_t               *c,
                           xcb_record_context_t            context,
                           xcb_record_element_header_t     element_header,
                           uint32_t                        num_client_specs,
                           uint32_t                        num_ranges,
                           const xcb_record_client_spec_t *client_specs,
                           const xcb_record_range_t       *ranges);

xcb_record_client_spec_t *
xcb_record_create_context_client_specs (const xcb_record_create_context_request_t *R);

int
xcb_record_create_context_client_specs_length (const xcb_record_create_context_request_t *R);

xcb_generic_iterator_t
xcb_record_create_context_client_specs_end (const xcb_record_create_context_request_t *R);

xcb_record_range_t *
xcb_record_create_context_ranges (const xcb_record_create_context_request_t *R);

int
xcb_record_create_context_ranges_length (const xcb_record_create_context_request_t *R);

xcb_record_range_iterator_t
xcb_record_create_context_ranges_iterator (const xcb_record_create_context_request_t *R);

int
xcb_record_register_clients_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_record_register_clients_checked (xcb_connection_t               *c,
                                     xcb_record_context_t            context,
                                     xcb_record_element_header_t     element_header,
                                     uint32_t                        num_client_specs,
                                     uint32_t                        num_ranges,
                                     const xcb_record_client_spec_t *client_specs,
                                     const xcb_record_range_t       *ranges);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_record_register_clients (xcb_connection_t               *c,
                             xcb_record_context_t            context,
                             xcb_record_element_header_t     element_header,
                             uint32_t                        num_client_specs,
                             uint32_t                        num_ranges,
                             const xcb_record_client_spec_t *client_specs,
                             const xcb_record_range_t       *ranges);

xcb_record_client_spec_t *
xcb_record_register_clients_client_specs (const xcb_record_register_clients_request_t *R);

int
xcb_record_register_clients_client_specs_length (const xcb_record_register_clients_request_t *R);

xcb_generic_iterator_t
xcb_record_register_clients_client_specs_end (const xcb_record_register_clients_request_t *R);

xcb_record_range_t *
xcb_record_register_clients_ranges (const xcb_record_register_clients_request_t *R);

int
xcb_record_register_clients_ranges_length (const xcb_record_register_clients_request_t *R);

xcb_record_range_iterator_t
xcb_record_register_clients_ranges_iterator (const xcb_record_register_clients_request_t *R);

int
xcb_record_unregister_clients_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_record_unregister_clients_checked (xcb_connection_t               *c,
                                       xcb_record_context_t            context,
                                       uint32_t                        num_client_specs,
                                       const xcb_record_client_spec_t *client_specs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_record_unregister_clients (xcb_connection_t               *c,
                               xcb_record_context_t            context,
                               uint32_t                        num_client_specs,
                               const xcb_record_client_spec_t *client_specs);

xcb_record_client_spec_t *
xcb_record_unregister_clients_client_specs (const xcb_record_unregister_clients_request_t *R);

int
xcb_record_unregister_clients_client_specs_length (const xcb_record_unregister_clients_request_t *R);

xcb_generic_iterator_t
xcb_record_unregister_clients_client_specs_end (const xcb_record_unregister_clients_request_t *R);

int
xcb_record_get_context_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_record_get_context_cookie_t
xcb_record_get_context (xcb_connection_t     *c,
                        xcb_record_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_record_get_context_cookie_t
xcb_record_get_context_unchecked (xcb_connection_t     *c,
                                  xcb_record_context_t  context);

int
xcb_record_get_context_intercepted_clients_length (const xcb_record_get_context_reply_t *R);

xcb_record_client_info_iterator_t
xcb_record_get_context_intercepted_clients_iterator (const xcb_record_get_context_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_record_get_context_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_record_get_context_reply_t *
xcb_record_get_context_reply (xcb_connection_t                 *c,
                              xcb_record_get_context_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_record_enable_context_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_record_enable_context_cookie_t
xcb_record_enable_context (xcb_connection_t     *c,
                           xcb_record_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_record_enable_context_cookie_t
xcb_record_enable_context_unchecked (xcb_connection_t     *c,
                                     xcb_record_context_t  context);

uint8_t *
xcb_record_enable_context_data (const xcb_record_enable_context_reply_t *R);

int
xcb_record_enable_context_data_length (const xcb_record_enable_context_reply_t *R);

xcb_generic_iterator_t
xcb_record_enable_context_data_end (const xcb_record_enable_context_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_record_enable_context_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_record_enable_context_reply_t *
xcb_record_enable_context_reply (xcb_connection_t                    *c,
                                 xcb_record_enable_context_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_record_disable_context_checked (xcb_connection_t     *c,
                                    xcb_record_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_record_disable_context (xcb_connection_t     *c,
                            xcb_record_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_record_free_context_checked (xcb_connection_t     *c,
                                 xcb_record_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_record_free_context (xcb_connection_t     *c,
                         xcb_record_context_t  context);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d32 3
a34 3
    xcb_record_context_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d41 2
a42 2
    uint8_t first; /**<  */
    uint8_t last; /**<  */
d49 3
a51 3
    xcb_record_range_8_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d58 2
a59 2
    uint16_t first; /**<  */
    uint16_t last; /**<  */
d66 3
a68 3
    xcb_record_range_16_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d75 2
a76 2
    xcb_record_range_8_t  major; /**<  */
    xcb_record_range_16_t minor; /**<  */
d83 3
a85 3
    xcb_record_ext_range_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d92 9
a100 9
    xcb_record_range_8_t   core_requests; /**<  */
    xcb_record_range_8_t   core_replies; /**<  */
    xcb_record_ext_range_t ext_requests; /**<  */
    xcb_record_ext_range_t ext_replies; /**<  */
    xcb_record_range_8_t   delivered_events; /**<  */
    xcb_record_range_8_t   device_events; /**<  */
    xcb_record_range_8_t   errors; /**<  */
    uint8_t                client_started; /**<  */
    uint8_t                client_died; /**<  */
d107 3
a109 3
    xcb_record_range_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d118 3
a120 3
    xcb_record_element_header_t *data; /**<  */
    int                          rem; /**<  */
    int                          index; /**<  */
d135 3
a137 3
    xcb_record_client_spec_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d150 2
a151 2
    xcb_record_client_spec_t client_resource; /**<  */
    uint32_t                 num_ranges; /**<  */
d158 3
a160 3
    xcb_record_client_info_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d170 4
a173 4
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
    uint32_t invalid_record; /**<  */
d180 1
a180 1
    unsigned int sequence; /**<  */
d190 5
a194 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
d201 6
a206 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
d216 8
a223 8
    uint8_t                     major_opcode; /**<  */
    uint8_t                     minor_opcode; /**<  */
    uint16_t                    length; /**<  */
    xcb_record_context_t        context; /**<  */
    xcb_record_element_header_t element_header; /**<  */
    uint8_t                     pad0[3]; /**<  */
    uint32_t                    num_client_specs; /**<  */
    uint32_t                    num_ranges; /**<  */
d233 8
a240 8
    uint8_t                     major_opcode; /**<  */
    uint8_t                     minor_opcode; /**<  */
    uint16_t                    length; /**<  */
    xcb_record_context_t        context; /**<  */
    xcb_record_element_header_t element_header; /**<  */
    uint8_t                     pad0[3]; /**<  */
    uint32_t                    num_client_specs; /**<  */
    uint32_t                    num_ranges; /**<  */
d250 5
a254 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_record_context_t context; /**<  */
    uint32_t             num_client_specs; /**<  */
d261 1
a261 1
    unsigned int sequence; /**<  */
d271 4
a274 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_record_context_t context; /**<  */
d281 8
a288 8
    uint8_t                     response_type; /**<  */
    uint8_t                     enabled; /**<  */
    uint16_t                    sequence; /**<  */
    uint32_t                    length; /**<  */
    xcb_record_element_header_t element_header; /**<  */
    uint8_t                     pad0[3]; /**<  */
    uint32_t                    num_intercepted_clients; /**<  */
    uint8_t                     pad1[16]; /**<  */
d295 1
a295 1
    unsigned int sequence; /**<  */
d305 4
a308 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_record_context_t context; /**<  */
d315 11
a325 11
    uint8_t                     response_type; /**<  */
    uint8_t                     category; /**<  */
    uint16_t                    sequence; /**<  */
    uint32_t                    length; /**<  */
    xcb_record_element_header_t element_header; /**<  */
    uint8_t                     client_swapped; /**<  */
    uint8_t                     pad0[2]; /**<  */
    uint32_t                    xid_base; /**<  */
    uint32_t                    server_time; /**<  */
    uint32_t                    rec_sequence_num; /**<  */
    uint8_t                     pad1[8]; /**<  */
d335 4
a338 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_record_context_t context; /**<  */
d348 4
a351 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_record_context_t context; /**<  */
d363 1
a363 1
xcb_record_context_next (xcb_record_context_iterator_t *i  /**< */);
d375 1
a375 1
xcb_record_context_end (xcb_record_context_iterator_t i  /**< */);
d386 1
a386 1
xcb_record_range_8_next (xcb_record_range_8_iterator_t *i  /**< */);
d398 1
a398 1
xcb_record_range_8_end (xcb_record_range_8_iterator_t i  /**< */);
d409 1
a409 1
xcb_record_range_16_next (xcb_record_range_16_iterator_t *i  /**< */);
d421 1
a421 1
xcb_record_range_16_end (xcb_record_range_16_iterator_t i  /**< */);
d432 1
a432 1
xcb_record_ext_range_next (xcb_record_ext_range_iterator_t *i  /**< */);
d444 1
a444 1
xcb_record_ext_range_end (xcb_record_ext_range_iterator_t i  /**< */);
d455 1
a455 1
xcb_record_range_next (xcb_record_range_iterator_t *i  /**< */);
d467 1
a467 1
xcb_record_range_end (xcb_record_range_iterator_t i  /**< */);
d478 1
a478 1
xcb_record_element_header_next (xcb_record_element_header_iterator_t *i  /**< */);
d490 1
a490 1
xcb_record_element_header_end (xcb_record_element_header_iterator_t i  /**< */);
d501 1
a501 1
xcb_record_client_spec_next (xcb_record_client_spec_iterator_t *i  /**< */);
d513 1
a513 1
xcb_record_client_spec_end (xcb_record_client_spec_iterator_t i  /**< */);
d516 1
a516 1
xcb_record_client_info_sizeof (const void  *_buffer  /**< */);
d519 1
a519 1
xcb_record_client_info_ranges (const xcb_record_client_info_t *R  /**< */);
d522 1
a522 1
xcb_record_client_info_ranges_length (const xcb_record_client_info_t *R  /**< */);
d525 1
a525 1
xcb_record_client_info_ranges_iterator (const xcb_record_client_info_t *R  /**< */);
d536 1
a536 1
xcb_record_client_info_next (xcb_record_client_info_iterator_t *i  /**< */);
d548 1
a548 1
xcb_record_client_info_end (xcb_record_client_info_iterator_t i  /**< */);
d559 3
a561 3
xcb_record_query_version (xcb_connection_t *c  /**< */,
                          uint16_t          major_version  /**< */,
                          uint16_t          minor_version  /**< */);
d575 3
a577 3
xcb_record_query_version_unchecked (xcb_connection_t *c  /**< */,
                                    uint16_t          major_version  /**< */,
                                    uint16_t          minor_version  /**< */);
d594 1
a594 1
xcb_record_query_version_reply (xcb_connection_t                   *c  /**< */,
d596 1
a596 1
                                xcb_generic_error_t               **e  /**< */);
d599 1
a599 1
xcb_record_create_context_sizeof (const void  *_buffer  /**< */);
d613 7
a619 7
xcb_record_create_context_checked (xcb_connection_t               *c  /**< */,
                                   xcb_record_context_t            context  /**< */,
                                   xcb_record_element_header_t     element_header  /**< */,
                                   uint32_t                        num_client_specs  /**< */,
                                   uint32_t                        num_ranges  /**< */,
                                   const xcb_record_client_spec_t *client_specs  /**< */,
                                   const xcb_record_range_t       *ranges  /**< */);
d630 19
a648 7
xcb_record_create_context (xcb_connection_t               *c  /**< */,
                           xcb_record_context_t            context  /**< */,
                           xcb_record_element_header_t     element_header  /**< */,
                           uint32_t                        num_client_specs  /**< */,
                           uint32_t                        num_ranges  /**< */,
                           const xcb_record_client_spec_t *client_specs  /**< */,
                           const xcb_record_range_t       *ranges  /**< */);
d651 7
a657 1
xcb_record_register_clients_sizeof (const void  *_buffer  /**< */);
d671 7
a677 7
xcb_record_register_clients_checked (xcb_connection_t               *c  /**< */,
                                     xcb_record_context_t            context  /**< */,
                                     xcb_record_element_header_t     element_header  /**< */,
                                     uint32_t                        num_client_specs  /**< */,
                                     uint32_t                        num_ranges  /**< */,
                                     const xcb_record_client_spec_t *client_specs  /**< */,
                                     const xcb_record_range_t       *ranges  /**< */);
d688 10
a697 7
xcb_record_register_clients (xcb_connection_t               *c  /**< */,
                             xcb_record_context_t            context  /**< */,
                             xcb_record_element_header_t     element_header  /**< */,
                             uint32_t                        num_client_specs  /**< */,
                             uint32_t                        num_ranges  /**< */,
                             const xcb_record_client_spec_t *client_specs  /**< */,
                             const xcb_record_range_t       *ranges  /**< */);
d700 16
a715 1
xcb_record_unregister_clients_sizeof (const void  *_buffer  /**< */);
d729 4
a732 4
xcb_record_unregister_clients_checked (xcb_connection_t               *c  /**< */,
                                       xcb_record_context_t            context  /**< */,
                                       uint32_t                        num_client_specs  /**< */,
                                       const xcb_record_client_spec_t *client_specs  /**< */);
d743 13
a755 4
xcb_record_unregister_clients (xcb_connection_t               *c  /**< */,
                               xcb_record_context_t            context  /**< */,
                               uint32_t                        num_client_specs  /**< */,
                               const xcb_record_client_spec_t *client_specs  /**< */);
d758 1
a758 1
xcb_record_get_context_sizeof (const void  *_buffer  /**< */);
d769 2
a770 2
xcb_record_get_context (xcb_connection_t     *c  /**< */,
                        xcb_record_context_t  context  /**< */);
d784 2
a785 2
xcb_record_get_context_unchecked (xcb_connection_t     *c  /**< */,
                                  xcb_record_context_t  context  /**< */);
d788 1
a788 1
xcb_record_get_context_intercepted_clients_length (const xcb_record_get_context_reply_t *R  /**< */);
d791 1
a791 1
xcb_record_get_context_intercepted_clients_iterator (const xcb_record_get_context_reply_t *R  /**< */);
d808 1
a808 1
xcb_record_get_context_reply (xcb_connection_t                 *c  /**< */,
d810 1
a810 1
                              xcb_generic_error_t             **e  /**< */);
d813 1
a813 1
xcb_record_enable_context_sizeof (const void  *_buffer  /**< */);
d824 2
a825 2
xcb_record_enable_context (xcb_connection_t     *c  /**< */,
                           xcb_record_context_t  context  /**< */);
d839 2
a840 2
xcb_record_enable_context_unchecked (xcb_connection_t     *c  /**< */,
                                     xcb_record_context_t  context  /**< */);
d843 1
a843 1
xcb_record_enable_context_data (const xcb_record_enable_context_reply_t *R  /**< */);
d846 1
a846 1
xcb_record_enable_context_data_length (const xcb_record_enable_context_reply_t *R  /**< */);
d849 1
a849 1
xcb_record_enable_context_data_end (const xcb_record_enable_context_reply_t *R  /**< */);
d866 1
a866 1
xcb_record_enable_context_reply (xcb_connection_t                    *c  /**< */,
d868 1
a868 1
                                 xcb_generic_error_t                **e  /**< */);
d882 2
a883 2
xcb_record_disable_context_checked (xcb_connection_t     *c  /**< */,
                                    xcb_record_context_t  context  /**< */);
d894 2
a895 2
xcb_record_disable_context (xcb_connection_t     *c  /**< */,
                            xcb_record_context_t  context  /**< */);
d909 2
a910 2
xcb_record_free_context_checked (xcb_connection_t     *c  /**< */,
                                 xcb_record_context_t  context  /**< */);
d921 2
a922 2
xcb_record_free_context (xcb_connection_t     *c  /**< */,
                         xcb_record_context_t  context  /**< */);
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
  
a361 10

/*****************************************************************************
 **
 ** void xcb_record_context_next
 ** 
 ** @@param xcb_record_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a373 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_context_end
 ** 
 ** @@param xcb_record_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a384 10

/*****************************************************************************
 **
 ** void xcb_record_range_8_next
 ** 
 ** @@param xcb_record_range_8_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a396 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_8_end
 ** 
 ** @@param xcb_record_range_8_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a407 10

/*****************************************************************************
 **
 ** void xcb_record_range_16_next
 ** 
 ** @@param xcb_record_range_16_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a419 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_16_end
 ** 
 ** @@param xcb_record_range_16_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a430 10

/*****************************************************************************
 **
 ** void xcb_record_ext_range_next
 ** 
 ** @@param xcb_record_ext_range_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a442 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_ext_range_end
 ** 
 ** @@param xcb_record_ext_range_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a453 10

/*****************************************************************************
 **
 ** void xcb_record_range_next
 ** 
 ** @@param xcb_record_range_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a465 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_end
 ** 
 ** @@param xcb_record_range_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a476 10

/*****************************************************************************
 **
 ** void xcb_record_element_header_next
 ** 
 ** @@param xcb_record_element_header_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a488 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_element_header_end
 ** 
 ** @@param xcb_record_element_header_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a499 10

/*****************************************************************************
 **
 ** void xcb_record_client_spec_next
 ** 
 ** @@param xcb_record_client_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a511 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_client_spec_end
 ** 
 ** @@param xcb_record_client_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a517 10

/*****************************************************************************
 **
 ** xcb_record_range_t * xcb_record_client_info_ranges
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns xcb_record_range_t *
 **
 *****************************************************************************/
 
a520 10

/*****************************************************************************
 **
 ** int xcb_record_client_info_ranges_length
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a523 10

/*****************************************************************************
 **
 ** xcb_record_range_iterator_t xcb_record_client_info_ranges_iterator
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns xcb_record_range_iterator_t
 **
 *****************************************************************************/
 
a534 10

/*****************************************************************************
 **
 ** void xcb_record_client_info_next
 ** 
 ** @@param xcb_record_client_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a546 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_client_info_end
 ** 
 ** @@param xcb_record_client_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d556 1
a556 1
 * 
a557 12

/*****************************************************************************
 **
 ** xcb_record_query_version_cookie_t xcb_record_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_record_query_version_cookie_t
 **
 *****************************************************************************/
 
d569 1
a569 1
 * 
a573 12

/*****************************************************************************
 **
 ** xcb_record_query_version_cookie_t xcb_record_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_record_query_version_cookie_t
 **
 *****************************************************************************/
 
d586 1
a586 1
 * 
a592 12

/*****************************************************************************
 **
 ** xcb_record_query_version_reply_t * xcb_record_query_version_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_record_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_record_query_version_reply_t *
 **
 *****************************************************************************/
 
d607 1
a607 1
 * 
a611 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_create_context_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d627 1
a627 1
 * 
a628 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_create_context
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d647 1
a647 1
 * 
a651 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_register_clients_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d667 1
a667 1
 * 
a668 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_register_clients
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d687 1
a687 1
 * 
a691 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_unregister_clients_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param uint32_t                        num_client_specs
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d704 1
a704 1
 * 
a705 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_unregister_clients
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param uint32_t                        num_client_specs
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d721 1
a721 1
 * 
a722 11

/*****************************************************************************
 **
 ** xcb_record_get_context_cookie_t xcb_record_get_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_get_context_cookie_t
 **
 *****************************************************************************/
 
d733 1
a733 1
 * 
a737 11

/*****************************************************************************
 **
 ** xcb_record_get_context_cookie_t xcb_record_get_context_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_get_context_cookie_t
 **
 *****************************************************************************/
 
a741 10

/*****************************************************************************
 **
 ** int xcb_record_get_context_intercepted_clients_length
 ** 
 ** @@param const xcb_record_get_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a744 10

/*****************************************************************************
 **
 ** xcb_record_client_info_iterator_t xcb_record_get_context_intercepted_clients_iterator
 ** 
 ** @@param const xcb_record_get_context_reply_t *R
 ** @@returns xcb_record_client_info_iterator_t
 **
 *****************************************************************************/
 
d755 1
a755 1
 * 
a761 12

/*****************************************************************************
 **
 ** xcb_record_get_context_reply_t * xcb_record_get_context_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_record_get_context_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_record_get_context_reply_t *
 **
 *****************************************************************************/
 
d776 1
a776 1
 * 
a777 11

/*****************************************************************************
 **
 ** xcb_record_enable_context_cookie_t xcb_record_enable_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_enable_context_cookie_t
 **
 *****************************************************************************/
 
d788 1
a788 1
 * 
a792 11

/*****************************************************************************
 **
 ** xcb_record_enable_context_cookie_t xcb_record_enable_context_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_enable_context_cookie_t
 **
 *****************************************************************************/
 
a796 10

/*****************************************************************************
 **
 ** uint8_t * xcb_record_enable_context_data
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a799 10

/*****************************************************************************
 **
 ** int xcb_record_enable_context_data_length
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a802 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_enable_context_data_end
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d813 1
a813 1
 * 
a819 12

/*****************************************************************************
 **
 ** xcb_record_enable_context_reply_t * xcb_record_enable_context_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_record_enable_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_record_enable_context_reply_t *
 **
 *****************************************************************************/
 
d831 1
a831 1
 * 
a835 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_disable_context_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d846 1
a846 1
 * 
a847 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_disable_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d858 1
a858 1
 * 
a862 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_free_context_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d873 1
a873 1
 * 
a874 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_free_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d655 3
d741 1
a741 1
 * Delivers a request to the X server
d766 1
a766 1
 * Delivers a request to the X server
d824 3
d828 1
a828 1
 * Delivers a request to the X server
d864 1
a864 1
 * Delivers a request to the X server
d896 3
d900 1
a900 1
 * Delivers a request to the X server
d936 1
a936 1
 * Delivers a request to the X server
d968 3
d972 1
a972 1
 * Delivers a request to the X server
d1002 1
a1002 1
 * Delivers a request to the X server
d1028 3
d1032 1
a1032 1
 * Delivers a request to the X server
d1055 1
a1055 1
 * Delivers a request to the X server
d1137 3
d1141 1
a1141 1
 * Delivers a request to the X server
d1164 1
a1164 1
 * Delivers a request to the X server
d1260 1
a1260 1
 * Delivers a request to the X server
d1286 1
a1286 1
 * Delivers a request to the X server
d1309 1
a1309 1
 * Delivers a request to the X server
d1335 1
a1335 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
