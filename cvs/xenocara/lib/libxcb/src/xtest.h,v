head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	mKDGsTNpiR2zRHYQ;

1.6
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	01TEvO4uNHLqFv7N;

1.5
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xtest.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Test_API XCB Test API
 * @@brief Test XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XTEST_H
#define __XTEST_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_TEST_MAJOR_VERSION 2
#define XCB_TEST_MINOR_VERSION 2

extern xcb_extension_t xcb_test_id;

/**
 * @@brief xcb_test_get_version_cookie_t
 **/
typedef struct xcb_test_get_version_cookie_t {
    unsigned int sequence;
} xcb_test_get_version_cookie_t;

/** Opcode for xcb_test_get_version. */
#define XCB_TEST_GET_VERSION 0

/**
 * @@brief xcb_test_get_version_request_t
 **/
typedef struct xcb_test_get_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  major_version;
    uint8_t  pad0;
    uint16_t minor_version;
} xcb_test_get_version_request_t;

/**
 * @@brief xcb_test_get_version_reply_t
 **/
typedef struct xcb_test_get_version_reply_t {
    uint8_t  response_type;
    uint8_t  major_version;
    uint16_t sequence;
    uint32_t length;
    uint16_t minor_version;
} xcb_test_get_version_reply_t;

typedef enum xcb_test_cursor_t {
    XCB_TEST_CURSOR_NONE = 0,
    XCB_TEST_CURSOR_CURRENT = 1
} xcb_test_cursor_t;

/**
 * @@brief xcb_test_compare_cursor_cookie_t
 **/
typedef struct xcb_test_compare_cursor_cookie_t {
    unsigned int sequence;
} xcb_test_compare_cursor_cookie_t;

/** Opcode for xcb_test_compare_cursor. */
#define XCB_TEST_COMPARE_CURSOR 1

/**
 * @@brief xcb_test_compare_cursor_request_t
 **/
typedef struct xcb_test_compare_cursor_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    xcb_cursor_t cursor;
} xcb_test_compare_cursor_request_t;

/**
 * @@brief xcb_test_compare_cursor_reply_t
 **/
typedef struct xcb_test_compare_cursor_reply_t {
    uint8_t  response_type;
    uint8_t  same;
    uint16_t sequence;
    uint32_t length;
} xcb_test_compare_cursor_reply_t;

/** Opcode for xcb_test_fake_input. */
#define XCB_TEST_FAKE_INPUT 2

/**
 * @@brief xcb_test_fake_input_request_t
 **/
typedef struct xcb_test_fake_input_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    uint8_t      type;
    uint8_t      detail;
    uint8_t      pad0[2];
    uint32_t     time;
    xcb_window_t root;
    uint8_t      pad1[8];
    int16_t      rootX;
    int16_t      rootY;
    uint8_t      pad2[7];
    uint8_t      deviceid;
} xcb_test_fake_input_request_t;

/** Opcode for xcb_test_grab_control. */
#define XCB_TEST_GRAB_CONTROL 3

/**
 * @@brief xcb_test_grab_control_request_t
 **/
typedef struct xcb_test_grab_control_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  impervious;
    uint8_t  pad0[3];
} xcb_test_grab_control_request_t;

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_test_get_version_cookie_t
xcb_test_get_version (xcb_connection_t *c,
                      uint8_t           major_version,
                      uint16_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_test_get_version_cookie_t
xcb_test_get_version_unchecked (xcb_connection_t *c,
                                uint8_t           major_version,
                                uint16_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_test_get_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_test_get_version_reply_t *
xcb_test_get_version_reply (xcb_connection_t               *c,
                            xcb_test_get_version_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_test_compare_cursor_cookie_t
xcb_test_compare_cursor (xcb_connection_t *c,
                         xcb_window_t      window,
                         xcb_cursor_t      cursor);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_test_compare_cursor_cookie_t
xcb_test_compare_cursor_unchecked (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   xcb_cursor_t      cursor);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_test_compare_cursor_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_test_compare_cursor_reply_t *
xcb_test_compare_cursor_reply (xcb_connection_t                  *c,
                               xcb_test_compare_cursor_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_test_fake_input_checked (xcb_connection_t *c,
                             uint8_t           type,
                             uint8_t           detail,
                             uint32_t          time,
                             xcb_window_t      root,
                             int16_t           rootX,
                             int16_t           rootY,
                             uint8_t           deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_test_fake_input (xcb_connection_t *c,
                     uint8_t           type,
                     uint8_t           detail,
                     uint32_t          time,
                     xcb_window_t      root,
                     int16_t           rootX,
                     int16_t           rootY,
                     uint8_t           deviceid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_test_grab_control_checked (xcb_connection_t *c,
                               uint8_t           impervious);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_test_grab_control (xcb_connection_t *c,
                       uint8_t           impervious);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.6
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d31 1
a31 1
    unsigned int sequence; /**<  */
d41 6
a46 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  major_version; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t minor_version; /**<  */
d53 5
a57 5
    uint8_t  response_type; /**<  */
    uint8_t  major_version; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t minor_version; /**<  */
d69 1
a69 1
    unsigned int sequence; /**<  */
d79 5
a83 5
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    xcb_cursor_t cursor; /**<  */
d90 4
a93 4
    uint8_t  response_type; /**<  */
    uint8_t  same; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
d103 13
a115 13
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    uint8_t      type; /**<  */
    uint8_t      detail; /**<  */
    uint8_t      pad0[2]; /**<  */
    uint32_t     time; /**<  */
    xcb_window_t root; /**<  */
    uint8_t      pad1[8]; /**<  */
    int16_t      rootX; /**<  */
    int16_t      rootY; /**<  */
    uint8_t      pad2[7]; /**<  */
    uint8_t      deviceid; /**<  */
d125 5
a129 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  impervious; /**<  */
    uint8_t  pad0[3]; /**<  */
d141 3
a143 3
xcb_test_get_version (xcb_connection_t *c  /**< */,
                      uint8_t           major_version  /**< */,
                      uint16_t          minor_version  /**< */);
d157 3
a159 3
xcb_test_get_version_unchecked (xcb_connection_t *c  /**< */,
                                uint8_t           major_version  /**< */,
                                uint16_t          minor_version  /**< */);
d176 1
a176 1
xcb_test_get_version_reply (xcb_connection_t               *c  /**< */,
d178 1
a178 1
                            xcb_generic_error_t           **e  /**< */);
d189 3
a191 3
xcb_test_compare_cursor (xcb_connection_t *c  /**< */,
                         xcb_window_t      window  /**< */,
                         xcb_cursor_t      cursor  /**< */);
d205 3
a207 3
xcb_test_compare_cursor_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   xcb_cursor_t      cursor  /**< */);
d224 1
a224 1
xcb_test_compare_cursor_reply (xcb_connection_t                  *c  /**< */,
d226 1
a226 1
                               xcb_generic_error_t              **e  /**< */);
d240 8
a247 8
xcb_test_fake_input_checked (xcb_connection_t *c  /**< */,
                             uint8_t           type  /**< */,
                             uint8_t           detail  /**< */,
                             uint32_t          time  /**< */,
                             xcb_window_t      root  /**< */,
                             int16_t           rootX  /**< */,
                             int16_t           rootY  /**< */,
                             uint8_t           deviceid  /**< */);
d258 8
a265 8
xcb_test_fake_input (xcb_connection_t *c  /**< */,
                     uint8_t           type  /**< */,
                     uint8_t           detail  /**< */,
                     uint32_t          time  /**< */,
                     xcb_window_t      root  /**< */,
                     int16_t           rootX  /**< */,
                     int16_t           rootY  /**< */,
                     uint8_t           deviceid  /**< */);
d279 2
a280 2
xcb_test_grab_control_checked (xcb_connection_t *c  /**< */,
                               uint8_t           impervious  /**< */);
d291 2
a292 2
xcb_test_grab_control (xcb_connection_t *c  /**< */,
                       uint8_t           impervious  /**< */);
@


1.5
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
d138 1
a138 1
 * 
a139 12

/*****************************************************************************
 **
 ** xcb_test_get_version_cookie_t xcb_test_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_test_get_version_cookie_t
 **
 *****************************************************************************/
 
d151 1
a151 1
 * 
a155 12

/*****************************************************************************
 **
 ** xcb_test_get_version_cookie_t xcb_test_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_test_get_version_cookie_t
 **
 *****************************************************************************/
 
d168 1
a168 1
 * 
a174 12

/*****************************************************************************
 **
 ** xcb_test_get_version_reply_t * xcb_test_get_version_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_test_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_test_get_version_reply_t *
 **
 *****************************************************************************/
 
d186 1
a186 1
 * 
a187 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_cookie_t xcb_test_compare_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_test_compare_cursor_cookie_t
 **
 *****************************************************************************/
 
d199 1
a199 1
 * 
a203 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_cookie_t xcb_test_compare_cursor_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_test_compare_cursor_cookie_t
 **
 *****************************************************************************/
 
d216 1
a216 1
 * 
a222 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_reply_t * xcb_test_compare_cursor_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_test_compare_cursor_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_test_compare_cursor_reply_t *
 **
 *****************************************************************************/
 
d234 1
a234 1
 * 
a238 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_fake_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           type
 ** @@param uint8_t           detail
 ** @@param uint32_t          time
 ** @@param xcb_window_t      root
 ** @@param int16_t           rootX
 ** @@param int16_t           rootY
 ** @@param uint8_t           deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d255 1
a255 1
 * 
a256 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_fake_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           type
 ** @@param uint8_t           detail
 ** @@param uint32_t          time
 ** @@param xcb_window_t      root
 ** @@param int16_t           rootX
 ** @@param int16_t           rootY
 ** @@param uint8_t           deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d273 1
a273 1
 * 
a277 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_grab_control_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           impervious
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d288 1
a288 1
 * 
a289 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_grab_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           impervious
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
#define XCB_TEST_MINOR_VERSION 1
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d133 1
a133 1
 * Delivers a request to the X server
d158 1
a158 1
 * Delivers a request to the X server
d217 1
a217 1
 * Delivers a request to the X server
d242 1
a242 1
 * Delivers a request to the X server
d301 1
a301 1
 * Delivers a request to the X server
d339 1
a339 1
 * Delivers a request to the X server
d374 1
a374 1
 * Delivers a request to the X server
d400 1
a400 1
 * Delivers a request to the X server
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d112 2
a113 2
    uint16_t     rootX; /**<  */
    uint16_t     rootY; /**<  */
d321 2
a322 2
 ** @@param uint16_t          rootX
 ** @@param uint16_t          rootY
d334 2
a335 2
                             uint16_t          rootX  /**< */,
                             uint16_t          rootY  /**< */,
d356 2
a357 2
 ** @@param uint16_t          rootX
 ** @@param uint16_t          rootY
d369 2
a370 2
                     uint16_t          rootX  /**< */,
                     uint16_t          rootY  /**< */,
@


1.1
log
@Initial revision
@
text
@d110 1
a110 1
    xcb_window_t window; /**<  */
d320 1
a320 1
 ** @@param xcb_window_t      window
d333 1
a333 1
                             xcb_window_t      window  /**< */,
d355 1
a355 1
 ** @@param xcb_window_t      window
d368 1
a368 1
                     xcb_window_t      window  /**< */,
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
