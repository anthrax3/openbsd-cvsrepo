head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	mKDGsTNpiR2zRHYQ;

1.2
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.1;
commitid	01TEvO4uNHLqFv7N;

1.1
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dri3.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "dri3.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_dri3_id = { "DRI3", 0 };

xcb_dri3_query_version_cookie_t
xcb_dri3_query_version (xcb_connection_t *c,
                        uint32_t          major_version,
                        uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_query_version_cookie_t xcb_ret;
    xcb_dri3_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_query_version_cookie_t
xcb_dri3_query_version_unchecked (xcb_connection_t *c,
                                  uint32_t          major_version,
                                  uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_query_version_cookie_t xcb_ret;
    xcb_dri3_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_query_version_reply_t *
xcb_dri3_query_version_reply (xcb_connection_t                 *c,
                              xcb_dri3_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_dri3_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri3_open_cookie_t
xcb_dri3_open (xcb_connection_t *c,
               xcb_drawable_t    drawable,
               uint32_t          provider)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_OPEN,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_open_cookie_t xcb_ret;
    xcb_dri3_open_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.provider = provider;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED|XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_open_cookie_t
xcb_dri3_open_unchecked (xcb_connection_t *c,
                         xcb_drawable_t    drawable,
                         uint32_t          provider)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_OPEN,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_open_cookie_t xcb_ret;
    xcb_dri3_open_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.provider = provider;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_open_reply_t *
xcb_dri3_open_reply (xcb_connection_t        *c,
                     xcb_dri3_open_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e)
{
    return (xcb_dri3_open_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int *
xcb_dri3_open_reply_fds (xcb_connection_t       *c  /**< */,
                         xcb_dri3_open_reply_t  *reply)
{
    return xcb_get_reply_fds(c, reply, sizeof(xcb_dri3_open_reply_t) + 4 * reply->length);
}

xcb_void_cookie_t
xcb_dri3_pixmap_from_buffer_checked (xcb_connection_t *c,
                                     xcb_pixmap_t      pixmap,
                                     xcb_drawable_t    drawable,
                                     uint32_t          size,
                                     uint16_t          width,
                                     uint16_t          height,
                                     uint16_t          stride,
                                     uint8_t           depth,
                                     uint8_t           bpp,
                                     int32_t           pixmap_fd)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_PIXMAP_FROM_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri3_pixmap_from_buffer_request_t xcb_out;
    int fds[1];

    xcb_out.pixmap = pixmap;
    xcb_out.drawable = drawable;
    xcb_out.size = size;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.stride = stride;
    xcb_out.depth = depth;
    xcb_out.bpp = bpp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    fds[0] = pixmap_fd;
    xcb_ret.sequence = xcb_send_request_with_fds(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req, 1, fds);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri3_pixmap_from_buffer (xcb_connection_t *c,
                             xcb_pixmap_t      pixmap,
                             xcb_drawable_t    drawable,
                             uint32_t          size,
                             uint16_t          width,
                             uint16_t          height,
                             uint16_t          stride,
                             uint8_t           depth,
                             uint8_t           bpp,
                             int32_t           pixmap_fd)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_PIXMAP_FROM_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri3_pixmap_from_buffer_request_t xcb_out;
    int fds[1];

    xcb_out.pixmap = pixmap;
    xcb_out.drawable = drawable;
    xcb_out.size = size;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.stride = stride;
    xcb_out.depth = depth;
    xcb_out.bpp = bpp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    fds[0] = pixmap_fd;
    xcb_ret.sequence = xcb_send_request_with_fds(c, 0, xcb_parts + 2, &xcb_req, 1, fds);
    return xcb_ret;
}

xcb_dri3_buffer_from_pixmap_cookie_t
xcb_dri3_buffer_from_pixmap (xcb_connection_t *c,
                             xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_BUFFER_FROM_PIXMAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_buffer_from_pixmap_cookie_t xcb_ret;
    xcb_dri3_buffer_from_pixmap_request_t xcb_out;

    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED|XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_buffer_from_pixmap_cookie_t
xcb_dri3_buffer_from_pixmap_unchecked (xcb_connection_t *c,
                                       xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_BUFFER_FROM_PIXMAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_buffer_from_pixmap_cookie_t xcb_ret;
    xcb_dri3_buffer_from_pixmap_request_t xcb_out;

    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_buffer_from_pixmap_reply_t *
xcb_dri3_buffer_from_pixmap_reply (xcb_connection_t                      *c,
                                   xcb_dri3_buffer_from_pixmap_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_dri3_buffer_from_pixmap_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int *
xcb_dri3_buffer_from_pixmap_reply_fds (xcb_connection_t                     *c  /**< */,
                                       xcb_dri3_buffer_from_pixmap_reply_t  *reply)
{
    return xcb_get_reply_fds(c, reply, sizeof(xcb_dri3_buffer_from_pixmap_reply_t) + 4 * reply->length);
}

xcb_void_cookie_t
xcb_dri3_fence_from_fd_checked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          fence,
                                uint8_t           initially_triggered,
                                int32_t           fence_fd)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_FENCE_FROM_FD,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri3_fence_from_fd_request_t xcb_out;
    int fds[1];

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;
    xcb_out.initially_triggered = initially_triggered;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    fds[0] = fence_fd;
    xcb_ret.sequence = xcb_send_request_with_fds(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req, 1, fds);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri3_fence_from_fd (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          fence,
                        uint8_t           initially_triggered,
                        int32_t           fence_fd)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_FENCE_FROM_FD,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri3_fence_from_fd_request_t xcb_out;
    int fds[1];

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;
    xcb_out.initially_triggered = initially_triggered;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    fds[0] = fence_fd;
    xcb_ret.sequence = xcb_send_request_with_fds(c, 0, xcb_parts + 2, &xcb_req, 1, fds);
    return xcb_ret;
}

xcb_dri3_fd_from_fence_cookie_t
xcb_dri3_fd_from_fence (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_FD_FROM_FENCE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_fd_from_fence_cookie_t xcb_ret;
    xcb_dri3_fd_from_fence_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED|XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_fd_from_fence_cookie_t
xcb_dri3_fd_from_fence_unchecked (xcb_connection_t *c,
                                  xcb_drawable_t    drawable,
                                  uint32_t          fence)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri3_id,
        .opcode = XCB_DRI3_FD_FROM_FENCE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri3_fd_from_fence_cookie_t xcb_ret;
    xcb_dri3_fd_from_fence_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.fence = fence;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_REPLY_FDS, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri3_fd_from_fence_reply_t *
xcb_dri3_fd_from_fence_reply (xcb_connection_t                 *c,
                              xcb_dri3_fd_from_fence_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_dri3_fd_from_fence_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int *
xcb_dri3_fd_from_fence_reply_fds (xcb_connection_t                *c  /**< */,
                                  xcb_dri3_fd_from_fence_reply_t  *reply)
{
    return xcb_get_reply_fds(c, reply, sizeof(xcb_dri3_fd_from_fence_reply_t) + 4 * reply->length);
}

@


1.2
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 3
a24 3
xcb_dri3_query_version (xcb_connection_t *c  /**< */,
                        uint32_t          major_version  /**< */,
                        uint32_t          minor_version  /**< */)
d27 4
a30 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_QUERY_VERSION,
        /* isvoid */ 0
d50 3
a52 3
xcb_dri3_query_version_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          major_version  /**< */,
                                  uint32_t          minor_version  /**< */)
d55 4
a58 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_QUERY_VERSION,
        /* isvoid */ 0
d78 1
a78 1
xcb_dri3_query_version_reply (xcb_connection_t                 *c  /**< */,
d80 1
a80 1
                              xcb_generic_error_t             **e  /**< */)
d86 3
a88 3
xcb_dri3_open (xcb_connection_t *c  /**< */,
               xcb_drawable_t    drawable  /**< */,
               uint32_t          provider  /**< */)
d91 4
a94 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_OPEN,
        /* isvoid */ 0
d114 3
a116 3
xcb_dri3_open_unchecked (xcb_connection_t *c  /**< */,
                         xcb_drawable_t    drawable  /**< */,
                         uint32_t          provider  /**< */)
d119 4
a122 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_OPEN,
        /* isvoid */ 0
d142 1
a142 1
xcb_dri3_open_reply (xcb_connection_t        *c  /**< */,
d144 1
a144 1
                     xcb_generic_error_t    **e  /**< */)
d151 1
a151 1
                         xcb_dri3_open_reply_t  *reply  /**< */)
d157 16
a172 16
xcb_dri3_pixmap_from_buffer_checked (xcb_connection_t *c  /**< */,
                                     xcb_pixmap_t      pixmap  /**< */,
                                     xcb_drawable_t    drawable  /**< */,
                                     uint32_t          size  /**< */,
                                     uint16_t          width  /**< */,
                                     uint16_t          height  /**< */,
                                     uint16_t          stride  /**< */,
                                     uint8_t           depth  /**< */,
                                     uint8_t           bpp  /**< */,
                                     int32_t           pixmap_fd  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_PIXMAP_FROM_BUFFER,
        /* isvoid */ 1
d178 1
d194 2
a195 2
    xcb_send_fd(c, pixmap_fd);
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
d200 16
a215 16
xcb_dri3_pixmap_from_buffer (xcb_connection_t *c  /**< */,
                             xcb_pixmap_t      pixmap  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          size  /**< */,
                             uint16_t          width  /**< */,
                             uint16_t          height  /**< */,
                             uint16_t          stride  /**< */,
                             uint8_t           depth  /**< */,
                             uint8_t           bpp  /**< */,
                             int32_t           pixmap_fd  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_PIXMAP_FROM_BUFFER,
        /* isvoid */ 1
d221 1
d237 2
a238 2
    xcb_send_fd(c, pixmap_fd);
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
d243 2
a244 2
xcb_dri3_buffer_from_pixmap (xcb_connection_t *c  /**< */,
                             xcb_pixmap_t      pixmap  /**< */)
d247 4
a250 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_BUFFER_FROM_PIXMAP,
        /* isvoid */ 0
d269 2
a270 2
xcb_dri3_buffer_from_pixmap_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_pixmap_t      pixmap  /**< */)
d273 4
a276 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_BUFFER_FROM_PIXMAP,
        /* isvoid */ 0
d295 1
a295 1
xcb_dri3_buffer_from_pixmap_reply (xcb_connection_t                      *c  /**< */,
d297 1
a297 1
                                   xcb_generic_error_t                  **e  /**< */)
d304 1
a304 1
                                       xcb_dri3_buffer_from_pixmap_reply_t  *reply  /**< */)
d310 5
a314 5
xcb_dri3_fence_from_fd_checked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          fence  /**< */,
                                uint8_t           initially_triggered  /**< */,
                                int32_t           fence_fd  /**< */)
d317 4
a320 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_FENCE_FROM_FD,
        /* isvoid */ 1
d326 1
d338 2
a339 2
    xcb_send_fd(c, fence_fd);
    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
d344 5
a348 5
xcb_dri3_fence_from_fd (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          fence  /**< */,
                        uint8_t           initially_triggered  /**< */,
                        int32_t           fence_fd  /**< */)
d351 4
a354 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_FENCE_FROM_FD,
        /* isvoid */ 1
d360 1
d372 2
a373 2
    xcb_send_fd(c, fence_fd);
    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
d378 3
a380 3
xcb_dri3_fd_from_fence (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          fence  /**< */)
d383 4
a386 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_FD_FROM_FENCE,
        /* isvoid */ 0
d406 3
a408 3
xcb_dri3_fd_from_fence_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_drawable_t    drawable  /**< */,
                                  uint32_t          fence  /**< */)
d411 4
a414 4
        /* count */ 2,
        /* ext */ &xcb_dri3_id,
        /* opcode */ XCB_DRI3_FD_FROM_FENCE,
        /* isvoid */ 0
d434 1
a434 1
xcb_dri3_fd_from_fence_reply (xcb_connection_t                 *c  /**< */,
d436 1
a436 1
                              xcb_generic_error_t             **e  /**< */)
d443 1
a443 1
                                  xcb_dri3_fd_from_fence_reply_t  *reply  /**< */)
@


1.1
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_cookie_t xcb_dri3_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri3_query_version_cookie_t
 **
 *****************************************************************************/
 
d32 1
a32 1
    
d36 1
a36 1
    
d39 1
a39 1
    
d44 1
a44 1
    
a48 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_cookie_t xcb_dri3_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri3_query_version_cookie_t
 **
 *****************************************************************************/
 
d60 1
a60 1
    
d64 1
a64 1
    
d67 1
a67 1
    
d72 1
a72 1
    
a76 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_reply_t * xcb_dri3_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri3_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri3_query_version_reply_t *
 **
 *****************************************************************************/
 
a84 12

/*****************************************************************************
 **
 ** xcb_dri3_open_cookie_t xcb_dri3_open
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          provider
 ** @@returns xcb_dri3_open_cookie_t
 **
 *****************************************************************************/
 
d96 1
a96 1
    
d100 1
a100 1
    
d103 1
a103 1
    
d108 1
a108 1
    
a112 12

/*****************************************************************************
 **
 ** xcb_dri3_open_cookie_t xcb_dri3_open_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          provider
 ** @@returns xcb_dri3_open_cookie_t
 **
 *****************************************************************************/
 
d124 1
a124 1
    
d128 1
a128 1
    
d131 1
a131 1
    
d136 1
a136 1
    
a140 12

/*****************************************************************************
 **
 ** xcb_dri3_open_reply_t * xcb_dri3_open_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_dri3_open_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_dri3_open_reply_t *
 **
 *****************************************************************************/
 
a148 11

/*****************************************************************************
 **
 ** int * xcb_dri3_open_reply_fds
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_dri3_open_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
a155 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_pixmap_from_buffer_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          size
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          stride
 ** @@param uint8_t           depth
 ** @@param uint8_t           bpp
 ** @@param int32_t           pixmap_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d174 1
a174 1
    
d178 1
a178 1
    
d187 1
a187 1
    
d192 1
a192 1
    
a197 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_pixmap_from_buffer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          size
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          stride
 ** @@param uint8_t           depth
 ** @@param uint8_t           bpp
 ** @@param int32_t           pixmap_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d216 1
a216 1
    
d220 1
a220 1
    
d229 1
a229 1
    
d234 1
a234 1
    
a239 11

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_cookie_t xcb_dri3_buffer_from_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_dri3_buffer_from_pixmap_cookie_t
 **
 *****************************************************************************/
 
d250 1
a250 1
    
d254 1
a254 1
    
d256 1
a256 1
    
d261 1
a261 1
    
a265 11

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_cookie_t xcb_dri3_buffer_from_pixmap_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_dri3_buffer_from_pixmap_cookie_t
 **
 *****************************************************************************/
 
d276 1
a276 1
    
d280 1
a280 1
    
d282 1
a282 1
    
d287 1
a287 1
    
a291 12

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_reply_t * xcb_dri3_buffer_from_pixmap_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_dri3_buffer_from_pixmap_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_dri3_buffer_from_pixmap_reply_t *
 **
 *****************************************************************************/
 
a299 11

/*****************************************************************************
 **
 ** int * xcb_dri3_buffer_from_pixmap_reply_fds
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_dri3_buffer_from_pixmap_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
a306 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_fence_from_fd_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@param uint8_t           initially_triggered
 ** @@param int32_t           fence_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d320 1
a320 1
    
d324 1
a324 1
    
d329 1
a329 1
    
d334 1
a334 1
    
a339 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_fence_from_fd
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@param uint8_t           initially_triggered
 ** @@param int32_t           fence_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d353 1
a353 1
    
d357 1
a357 1
    
d362 1
a362 1
    
d367 1
a367 1
    
a372 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_cookie_t xcb_dri3_fd_from_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@returns xcb_dri3_fd_from_fence_cookie_t
 **
 *****************************************************************************/
 
d384 1
a384 1
    
d388 1
a388 1
    
d391 1
a391 1
    
d396 1
a396 1
    
a400 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_cookie_t xcb_dri3_fd_from_fence_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@returns xcb_dri3_fd_from_fence_cookie_t
 **
 *****************************************************************************/
 
d412 1
a412 1
    
d416 1
a416 1
    
d419 1
a419 1
    
d424 1
a424 1
    
a428 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_reply_t * xcb_dri3_fd_from_fence_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri3_fd_from_fence_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri3_fd_from_fence_reply_t *
 **
 *****************************************************************************/
 
a436 11

/*****************************************************************************
 **
 ** int * xcb_dri3_fd_from_fence_reply_fds
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri3_fd_from_fence_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
@

