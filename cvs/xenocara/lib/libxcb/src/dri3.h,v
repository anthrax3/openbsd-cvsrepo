head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	mKDGsTNpiR2zRHYQ;

1.2
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.1;
commitid	01TEvO4uNHLqFv7N;

1.1
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dri3.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_DRI3_API XCB DRI3 API
 * @@brief DRI3 XCB Protocol Implementation.
 * @@{
 **/

#ifndef __DRI3_H
#define __DRI3_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_DRI3_MAJOR_VERSION 1
#define XCB_DRI3_MINOR_VERSION 0

extern xcb_extension_t xcb_dri3_id;

/**
 * @@brief xcb_dri3_query_version_cookie_t
 **/
typedef struct xcb_dri3_query_version_cookie_t {
    unsigned int sequence;
} xcb_dri3_query_version_cookie_t;

/** Opcode for xcb_dri3_query_version. */
#define XCB_DRI3_QUERY_VERSION 0

/**
 * @@brief xcb_dri3_query_version_request_t
 **/
typedef struct xcb_dri3_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_dri3_query_version_request_t;

/**
 * @@brief xcb_dri3_query_version_reply_t
 **/
typedef struct xcb_dri3_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_dri3_query_version_reply_t;

/**
 * @@brief xcb_dri3_open_cookie_t
 **/
typedef struct xcb_dri3_open_cookie_t {
    unsigned int sequence;
} xcb_dri3_open_cookie_t;

/** Opcode for xcb_dri3_open. */
#define XCB_DRI3_OPEN 1

/**
 * @@brief xcb_dri3_open_request_t
 **/
typedef struct xcb_dri3_open_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       provider;
} xcb_dri3_open_request_t;

/**
 * @@brief xcb_dri3_open_reply_t
 **/
typedef struct xcb_dri3_open_reply_t {
    uint8_t  response_type;
    uint8_t  nfd;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad0[24];
} xcb_dri3_open_reply_t;

/** Opcode for xcb_dri3_pixmap_from_buffer. */
#define XCB_DRI3_PIXMAP_FROM_BUFFER 2

/**
 * @@brief xcb_dri3_pixmap_from_buffer_request_t
 **/
typedef struct xcb_dri3_pixmap_from_buffer_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_pixmap_t   pixmap;
    xcb_drawable_t drawable;
    uint32_t       size;
    uint16_t       width;
    uint16_t       height;
    uint16_t       stride;
    uint8_t        depth;
    uint8_t        bpp;
} xcb_dri3_pixmap_from_buffer_request_t;

/**
 * @@brief xcb_dri3_buffer_from_pixmap_cookie_t
 **/
typedef struct xcb_dri3_buffer_from_pixmap_cookie_t {
    unsigned int sequence;
} xcb_dri3_buffer_from_pixmap_cookie_t;

/** Opcode for xcb_dri3_buffer_from_pixmap. */
#define XCB_DRI3_BUFFER_FROM_PIXMAP 3

/**
 * @@brief xcb_dri3_buffer_from_pixmap_request_t
 **/
typedef struct xcb_dri3_buffer_from_pixmap_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_pixmap_t pixmap;
} xcb_dri3_buffer_from_pixmap_request_t;

/**
 * @@brief xcb_dri3_buffer_from_pixmap_reply_t
 **/
typedef struct xcb_dri3_buffer_from_pixmap_reply_t {
    uint8_t  response_type;
    uint8_t  nfd;
    uint16_t sequence;
    uint32_t length;
    uint32_t size;
    uint16_t width;
    uint16_t height;
    uint16_t stride;
    uint8_t  depth;
    uint8_t  bpp;
    uint8_t  pad0[12];
} xcb_dri3_buffer_from_pixmap_reply_t;

/** Opcode for xcb_dri3_fence_from_fd. */
#define XCB_DRI3_FENCE_FROM_FD 4

/**
 * @@brief xcb_dri3_fence_from_fd_request_t
 **/
typedef struct xcb_dri3_fence_from_fd_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       fence;
    uint8_t        initially_triggered;
    uint8_t        pad0[3];
} xcb_dri3_fence_from_fd_request_t;

/**
 * @@brief xcb_dri3_fd_from_fence_cookie_t
 **/
typedef struct xcb_dri3_fd_from_fence_cookie_t {
    unsigned int sequence;
} xcb_dri3_fd_from_fence_cookie_t;

/** Opcode for xcb_dri3_fd_from_fence. */
#define XCB_DRI3_FD_FROM_FENCE 5

/**
 * @@brief xcb_dri3_fd_from_fence_request_t
 **/
typedef struct xcb_dri3_fd_from_fence_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    uint32_t       fence;
} xcb_dri3_fd_from_fence_request_t;

/**
 * @@brief xcb_dri3_fd_from_fence_reply_t
 **/
typedef struct xcb_dri3_fd_from_fence_reply_t {
    uint8_t  response_type;
    uint8_t  nfd;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad0[24];
} xcb_dri3_fd_from_fence_reply_t;

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri3_query_version_cookie_t
xcb_dri3_query_version (xcb_connection_t *c,
                        uint32_t          major_version,
                        uint32_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri3_query_version_cookie_t
xcb_dri3_query_version_unchecked (xcb_connection_t *c,
                                  uint32_t          major_version,
                                  uint32_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri3_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri3_query_version_reply_t *
xcb_dri3_query_version_reply (xcb_connection_t                 *c,
                              xcb_dri3_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri3_open_cookie_t
xcb_dri3_open (xcb_connection_t *c,
               xcb_drawable_t    drawable,
               uint32_t          provider);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri3_open_cookie_t
xcb_dri3_open_unchecked (xcb_connection_t *c,
                         xcb_drawable_t    drawable,
                         uint32_t          provider);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri3_open_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri3_open_reply_t *
xcb_dri3_open_reply (xcb_connection_t        *c,
                     xcb_dri3_open_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e);

/**
 * Return the reply fds
 * @@param c      The connection
 * @@param reply  The reply
 *
 * Returns the array of reply fds of the request asked by
 *
 * The returned value must be freed by the caller using free().
 */
int *
xcb_dri3_open_reply_fds (xcb_connection_t       *c  /**< */,
                         xcb_dri3_open_reply_t  *reply);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dri3_pixmap_from_buffer_checked (xcb_connection_t *c,
                                     xcb_pixmap_t      pixmap,
                                     xcb_drawable_t    drawable,
                                     uint32_t          size,
                                     uint16_t          width,
                                     uint16_t          height,
                                     uint16_t          stride,
                                     uint8_t           depth,
                                     uint8_t           bpp,
                                     int32_t           pixmap_fd);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dri3_pixmap_from_buffer (xcb_connection_t *c,
                             xcb_pixmap_t      pixmap,
                             xcb_drawable_t    drawable,
                             uint32_t          size,
                             uint16_t          width,
                             uint16_t          height,
                             uint16_t          stride,
                             uint8_t           depth,
                             uint8_t           bpp,
                             int32_t           pixmap_fd);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri3_buffer_from_pixmap_cookie_t
xcb_dri3_buffer_from_pixmap (xcb_connection_t *c,
                             xcb_pixmap_t      pixmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri3_buffer_from_pixmap_cookie_t
xcb_dri3_buffer_from_pixmap_unchecked (xcb_connection_t *c,
                                       xcb_pixmap_t      pixmap);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri3_buffer_from_pixmap_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri3_buffer_from_pixmap_reply_t *
xcb_dri3_buffer_from_pixmap_reply (xcb_connection_t                      *c,
                                   xcb_dri3_buffer_from_pixmap_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 * Return the reply fds
 * @@param c      The connection
 * @@param reply  The reply
 *
 * Returns the array of reply fds of the request asked by
 *
 * The returned value must be freed by the caller using free().
 */
int *
xcb_dri3_buffer_from_pixmap_reply_fds (xcb_connection_t                     *c  /**< */,
                                       xcb_dri3_buffer_from_pixmap_reply_t  *reply);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_dri3_fence_from_fd_checked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          fence,
                                uint8_t           initially_triggered,
                                int32_t           fence_fd);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_dri3_fence_from_fd (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          fence,
                        uint8_t           initially_triggered,
                        int32_t           fence_fd);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_dri3_fd_from_fence_cookie_t
xcb_dri3_fd_from_fence (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_dri3_fd_from_fence_cookie_t
xcb_dri3_fd_from_fence_unchecked (xcb_connection_t *c,
                                  xcb_drawable_t    drawable,
                                  uint32_t          fence);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_dri3_fd_from_fence_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_dri3_fd_from_fence_reply_t *
xcb_dri3_fd_from_fence_reply (xcb_connection_t                 *c,
                              xcb_dri3_fd_from_fence_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 * Return the reply fds
 * @@param c      The connection
 * @@param reply  The reply
 *
 * Returns the array of reply fds of the request asked by
 *
 * The returned value must be freed by the caller using free().
 */
int *
xcb_dri3_fd_from_fence_reply_fds (xcb_connection_t                *c  /**< */,
                                  xcb_dri3_fd_from_fence_reply_t  *reply);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.2
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d31 1
a31 1
    unsigned int sequence; /**<  */
d41 5
a45 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d52 6
a57 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d64 1
a64 1
    unsigned int sequence; /**<  */
d74 5
a78 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       provider; /**<  */
d85 5
a89 5
    uint8_t  response_type; /**<  */
    uint8_t  nfd; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad0[24]; /**<  */
d99 11
a109 11
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_pixmap_t   pixmap; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       size; /**<  */
    uint16_t       width; /**<  */
    uint16_t       height; /**<  */
    uint16_t       stride; /**<  */
    uint8_t        depth; /**<  */
    uint8_t        bpp; /**<  */
d116 1
a116 1
    unsigned int sequence; /**<  */
d126 4
a129 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_pixmap_t pixmap; /**<  */
d136 11
a146 11
    uint8_t  response_type; /**<  */
    uint8_t  nfd; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t size; /**<  */
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    uint16_t stride; /**<  */
    uint8_t  depth; /**<  */
    uint8_t  bpp; /**<  */
    uint8_t  pad0[12]; /**<  */
d156 7
a162 7
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       fence; /**<  */
    uint8_t        initially_triggered; /**<  */
    uint8_t        pad0[3]; /**<  */
d169 1
a169 1
    unsigned int sequence; /**<  */
d179 5
a183 5
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint32_t       fence; /**<  */
d190 5
a194 5
    uint8_t  response_type; /**<  */
    uint8_t  nfd; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad0[24]; /**<  */
d206 3
a208 3
xcb_dri3_query_version (xcb_connection_t *c  /**< */,
                        uint32_t          major_version  /**< */,
                        uint32_t          minor_version  /**< */);
d222 3
a224 3
xcb_dri3_query_version_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          major_version  /**< */,
                                  uint32_t          minor_version  /**< */);
d241 1
a241 1
xcb_dri3_query_version_reply (xcb_connection_t                 *c  /**< */,
d243 1
a243 1
                              xcb_generic_error_t             **e  /**< */);
d254 3
a256 3
xcb_dri3_open (xcb_connection_t *c  /**< */,
               xcb_drawable_t    drawable  /**< */,
               uint32_t          provider  /**< */);
d270 3
a272 3
xcb_dri3_open_unchecked (xcb_connection_t *c  /**< */,
                         xcb_drawable_t    drawable  /**< */,
                         uint32_t          provider  /**< */);
d289 1
a289 1
xcb_dri3_open_reply (xcb_connection_t        *c  /**< */,
d291 1
a291 1
                     xcb_generic_error_t    **e  /**< */);
d304 1
a304 1
                         xcb_dri3_open_reply_t  *reply  /**< */);
d318 10
a327 10
xcb_dri3_pixmap_from_buffer_checked (xcb_connection_t *c  /**< */,
                                     xcb_pixmap_t      pixmap  /**< */,
                                     xcb_drawable_t    drawable  /**< */,
                                     uint32_t          size  /**< */,
                                     uint16_t          width  /**< */,
                                     uint16_t          height  /**< */,
                                     uint16_t          stride  /**< */,
                                     uint8_t           depth  /**< */,
                                     uint8_t           bpp  /**< */,
                                     int32_t           pixmap_fd  /**< */);
d338 10
a347 10
xcb_dri3_pixmap_from_buffer (xcb_connection_t *c  /**< */,
                             xcb_pixmap_t      pixmap  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          size  /**< */,
                             uint16_t          width  /**< */,
                             uint16_t          height  /**< */,
                             uint16_t          stride  /**< */,
                             uint8_t           depth  /**< */,
                             uint8_t           bpp  /**< */,
                             int32_t           pixmap_fd  /**< */);
d358 2
a359 2
xcb_dri3_buffer_from_pixmap (xcb_connection_t *c  /**< */,
                             xcb_pixmap_t      pixmap  /**< */);
d373 2
a374 2
xcb_dri3_buffer_from_pixmap_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_pixmap_t      pixmap  /**< */);
d391 1
a391 1
xcb_dri3_buffer_from_pixmap_reply (xcb_connection_t                      *c  /**< */,
d393 1
a393 1
                                   xcb_generic_error_t                  **e  /**< */);
d406 1
a406 1
                                       xcb_dri3_buffer_from_pixmap_reply_t  *reply  /**< */);
d420 5
a424 5
xcb_dri3_fence_from_fd_checked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          fence  /**< */,
                                uint8_t           initially_triggered  /**< */,
                                int32_t           fence_fd  /**< */);
d435 5
a439 5
xcb_dri3_fence_from_fd (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          fence  /**< */,
                        uint8_t           initially_triggered  /**< */,
                        int32_t           fence_fd  /**< */);
d450 3
a452 3
xcb_dri3_fd_from_fence (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          fence  /**< */);
d466 3
a468 3
xcb_dri3_fd_from_fence_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_drawable_t    drawable  /**< */,
                                  uint32_t          fence  /**< */);
d485 1
a485 1
xcb_dri3_fd_from_fence_reply (xcb_connection_t                 *c  /**< */,
d487 1
a487 1
                              xcb_generic_error_t             **e  /**< */);
d500 1
a500 1
                                  xcb_dri3_fd_from_fence_reply_t  *reply  /**< */);
@


1.1
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
d203 1
a203 1
 * 
a204 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_cookie_t xcb_dri3_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri3_query_version_cookie_t
 **
 *****************************************************************************/
 
d216 1
a216 1
 * 
a220 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_cookie_t xcb_dri3_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri3_query_version_cookie_t
 **
 *****************************************************************************/
 
d233 1
a233 1
 * 
a239 12

/*****************************************************************************
 **
 ** xcb_dri3_query_version_reply_t * xcb_dri3_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri3_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri3_query_version_reply_t *
 **
 *****************************************************************************/
 
d251 1
a251 1
 * 
a252 12

/*****************************************************************************
 **
 ** xcb_dri3_open_cookie_t xcb_dri3_open
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          provider
 ** @@returns xcb_dri3_open_cookie_t
 **
 *****************************************************************************/
 
d264 1
a264 1
 * 
a268 12

/*****************************************************************************
 **
 ** xcb_dri3_open_cookie_t xcb_dri3_open_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          provider
 ** @@returns xcb_dri3_open_cookie_t
 **
 *****************************************************************************/
 
d281 1
a281 1
 * 
a287 12

/*****************************************************************************
 **
 ** xcb_dri3_open_reply_t * xcb_dri3_open_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_dri3_open_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_dri3_open_reply_t *
 **
 *****************************************************************************/
 
d299 1
a299 1
 * 
a301 11

/*****************************************************************************
 **
 ** int * xcb_dri3_open_reply_fds
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_dri3_open_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
d312 1
a312 1
 * 
a316 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_pixmap_from_buffer_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          size
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          stride
 ** @@param uint8_t           depth
 ** @@param uint8_t           bpp
 ** @@param int32_t           pixmap_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d335 1
a335 1
 * 
a336 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_pixmap_from_buffer
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          size
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          stride
 ** @@param uint8_t           depth
 ** @@param uint8_t           bpp
 ** @@param int32_t           pixmap_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d355 1
a355 1
 * 
a356 11

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_cookie_t xcb_dri3_buffer_from_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_dri3_buffer_from_pixmap_cookie_t
 **
 *****************************************************************************/
 
d367 1
a367 1
 * 
a371 11

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_cookie_t xcb_dri3_buffer_from_pixmap_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_dri3_buffer_from_pixmap_cookie_t
 **
 *****************************************************************************/
 
d383 1
a383 1
 * 
a389 12

/*****************************************************************************
 **
 ** xcb_dri3_buffer_from_pixmap_reply_t * xcb_dri3_buffer_from_pixmap_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_dri3_buffer_from_pixmap_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_dri3_buffer_from_pixmap_reply_t *
 **
 *****************************************************************************/
 
d401 1
a401 1
 * 
a403 11

/*****************************************************************************
 **
 ** int * xcb_dri3_buffer_from_pixmap_reply_fds
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_dri3_buffer_from_pixmap_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
d414 1
a414 1
 * 
a418 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_fence_from_fd_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@param uint8_t           initially_triggered
 ** @@param int32_t           fence_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d432 1
a432 1
 * 
a433 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri3_fence_from_fd
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@param uint8_t           initially_triggered
 ** @@param int32_t           fence_fd
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d447 1
a447 1
 * 
a448 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_cookie_t xcb_dri3_fd_from_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@returns xcb_dri3_fd_from_fence_cookie_t
 **
 *****************************************************************************/
 
d460 1
a460 1
 * 
a464 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_cookie_t xcb_dri3_fd_from_fence_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          fence
 ** @@returns xcb_dri3_fd_from_fence_cookie_t
 **
 *****************************************************************************/
 
d477 1
a477 1
 * 
a483 12

/*****************************************************************************
 **
 ** xcb_dri3_fd_from_fence_reply_t * xcb_dri3_fd_from_fence_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri3_fd_from_fence_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri3_fd_from_fence_reply_t *
 **
 *****************************************************************************/
 
d495 1
a495 1
 * 
a497 11

/*****************************************************************************
 **
 ** int * xcb_dri3_fd_from_fence_reply_fds
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri3_fd_from_fence_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
@

