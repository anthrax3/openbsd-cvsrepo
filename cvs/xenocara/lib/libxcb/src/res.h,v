head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from res.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Res_API XCB Res API
 * @@brief Res XCB Protocol Implementation.
 * @@{
 **/

#ifndef __RES_H
#define __RES_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_RES_MAJOR_VERSION 1
#define XCB_RES_MINOR_VERSION 2

extern xcb_extension_t xcb_res_id;

/**
 * @@brief xcb_res_client_t
 **/
typedef struct xcb_res_client_t {
    uint32_t resource_base;
    uint32_t resource_mask;
} xcb_res_client_t;

/**
 * @@brief xcb_res_client_iterator_t
 **/
typedef struct xcb_res_client_iterator_t {
    xcb_res_client_t *data;
    int               rem;
    int               index;
} xcb_res_client_iterator_t;

/**
 * @@brief xcb_res_type_t
 **/
typedef struct xcb_res_type_t {
    xcb_atom_t resource_type;
    uint32_t   count;
} xcb_res_type_t;

/**
 * @@brief xcb_res_type_iterator_t
 **/
typedef struct xcb_res_type_iterator_t {
    xcb_res_type_t *data;
    int             rem;
    int             index;
} xcb_res_type_iterator_t;

typedef enum xcb_res_client_id_mask_t {
    XCB_RES_CLIENT_ID_MASK_CLIENT_XID = 1,
    XCB_RES_CLIENT_ID_MASK_LOCAL_CLIENT_PID = 2
} xcb_res_client_id_mask_t;

/**
 * @@brief xcb_res_client_id_spec_t
 **/
typedef struct xcb_res_client_id_spec_t {
    uint32_t client;
    uint32_t mask;
} xcb_res_client_id_spec_t;

/**
 * @@brief xcb_res_client_id_spec_iterator_t
 **/
typedef struct xcb_res_client_id_spec_iterator_t {
    xcb_res_client_id_spec_t *data;
    int                       rem;
    int                       index;
} xcb_res_client_id_spec_iterator_t;

/**
 * @@brief xcb_res_client_id_value_t
 **/
typedef struct xcb_res_client_id_value_t {
    xcb_res_client_id_spec_t spec;
    uint32_t                 length;
} xcb_res_client_id_value_t;

/**
 * @@brief xcb_res_client_id_value_iterator_t
 **/
typedef struct xcb_res_client_id_value_iterator_t {
    xcb_res_client_id_value_t *data;
    int                        rem;
    int                        index;
} xcb_res_client_id_value_iterator_t;

/**
 * @@brief xcb_res_resource_id_spec_t
 **/
typedef struct xcb_res_resource_id_spec_t {
    uint32_t resource;
    uint32_t type;
} xcb_res_resource_id_spec_t;

/**
 * @@brief xcb_res_resource_id_spec_iterator_t
 **/
typedef struct xcb_res_resource_id_spec_iterator_t {
    xcb_res_resource_id_spec_t *data;
    int                         rem;
    int                         index;
} xcb_res_resource_id_spec_iterator_t;

/**
 * @@brief xcb_res_resource_size_spec_t
 **/
typedef struct xcb_res_resource_size_spec_t {
    xcb_res_resource_id_spec_t spec;
    uint32_t                   bytes;
    uint32_t                   ref_count;
    uint32_t                   use_count;
} xcb_res_resource_size_spec_t;

/**
 * @@brief xcb_res_resource_size_spec_iterator_t
 **/
typedef struct xcb_res_resource_size_spec_iterator_t {
    xcb_res_resource_size_spec_t *data;
    int                           rem;
    int                           index;
} xcb_res_resource_size_spec_iterator_t;

/**
 * @@brief xcb_res_resource_size_value_t
 **/
typedef struct xcb_res_resource_size_value_t {
    xcb_res_resource_size_spec_t size;
    uint32_t                     num_cross_references;
} xcb_res_resource_size_value_t;

/**
 * @@brief xcb_res_resource_size_value_iterator_t
 **/
typedef struct xcb_res_resource_size_value_iterator_t {
    xcb_res_resource_size_value_t *data;
    int                            rem;
    int                            index;
} xcb_res_resource_size_value_iterator_t;

/**
 * @@brief xcb_res_query_version_cookie_t
 **/
typedef struct xcb_res_query_version_cookie_t {
    unsigned int sequence;
} xcb_res_query_version_cookie_t;

/** Opcode for xcb_res_query_version. */
#define XCB_RES_QUERY_VERSION 0

/**
 * @@brief xcb_res_query_version_request_t
 **/
typedef struct xcb_res_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  client_major;
    uint8_t  client_minor;
} xcb_res_query_version_request_t;

/**
 * @@brief xcb_res_query_version_reply_t
 **/
typedef struct xcb_res_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t server_major;
    uint16_t server_minor;
} xcb_res_query_version_reply_t;

/**
 * @@brief xcb_res_query_clients_cookie_t
 **/
typedef struct xcb_res_query_clients_cookie_t {
    unsigned int sequence;
} xcb_res_query_clients_cookie_t;

/** Opcode for xcb_res_query_clients. */
#define XCB_RES_QUERY_CLIENTS 1

/**
 * @@brief xcb_res_query_clients_request_t
 **/
typedef struct xcb_res_query_clients_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_res_query_clients_request_t;

/**
 * @@brief xcb_res_query_clients_reply_t
 **/
typedef struct xcb_res_query_clients_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_clients;
    uint8_t  pad1[20];
} xcb_res_query_clients_reply_t;

/**
 * @@brief xcb_res_query_client_resources_cookie_t
 **/
typedef struct xcb_res_query_client_resources_cookie_t {
    unsigned int sequence;
} xcb_res_query_client_resources_cookie_t;

/** Opcode for xcb_res_query_client_resources. */
#define XCB_RES_QUERY_CLIENT_RESOURCES 2

/**
 * @@brief xcb_res_query_client_resources_request_t
 **/
typedef struct xcb_res_query_client_resources_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t xid;
} xcb_res_query_client_resources_request_t;

/**
 * @@brief xcb_res_query_client_resources_reply_t
 **/
typedef struct xcb_res_query_client_resources_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_types;
    uint8_t  pad1[20];
} xcb_res_query_client_resources_reply_t;

/**
 * @@brief xcb_res_query_client_pixmap_bytes_cookie_t
 **/
typedef struct xcb_res_query_client_pixmap_bytes_cookie_t {
    unsigned int sequence;
} xcb_res_query_client_pixmap_bytes_cookie_t;

/** Opcode for xcb_res_query_client_pixmap_bytes. */
#define XCB_RES_QUERY_CLIENT_PIXMAP_BYTES 3

/**
 * @@brief xcb_res_query_client_pixmap_bytes_request_t
 **/
typedef struct xcb_res_query_client_pixmap_bytes_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t xid;
} xcb_res_query_client_pixmap_bytes_request_t;

/**
 * @@brief xcb_res_query_client_pixmap_bytes_reply_t
 **/
typedef struct xcb_res_query_client_pixmap_bytes_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t bytes;
    uint32_t bytes_overflow;
} xcb_res_query_client_pixmap_bytes_reply_t;

/**
 * @@brief xcb_res_query_client_ids_cookie_t
 **/
typedef struct xcb_res_query_client_ids_cookie_t {
    unsigned int sequence;
} xcb_res_query_client_ids_cookie_t;

/** Opcode for xcb_res_query_client_ids. */
#define XCB_RES_QUERY_CLIENT_IDS 4

/**
 * @@brief xcb_res_query_client_ids_request_t
 **/
typedef struct xcb_res_query_client_ids_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t num_specs;
} xcb_res_query_client_ids_request_t;

/**
 * @@brief xcb_res_query_client_ids_reply_t
 **/
typedef struct xcb_res_query_client_ids_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_ids;
    uint8_t  pad1[20];
} xcb_res_query_client_ids_reply_t;

/**
 * @@brief xcb_res_query_resource_bytes_cookie_t
 **/
typedef struct xcb_res_query_resource_bytes_cookie_t {
    unsigned int sequence;
} xcb_res_query_resource_bytes_cookie_t;

/** Opcode for xcb_res_query_resource_bytes. */
#define XCB_RES_QUERY_RESOURCE_BYTES 5

/**
 * @@brief xcb_res_query_resource_bytes_request_t
 **/
typedef struct xcb_res_query_resource_bytes_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t client;
    uint32_t num_specs;
} xcb_res_query_resource_bytes_request_t;

/**
 * @@brief xcb_res_query_resource_bytes_reply_t
 **/
typedef struct xcb_res_query_resource_bytes_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_sizes;
    uint8_t  pad1[20];
} xcb_res_query_resource_bytes_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_client_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_client_t)
 */
void
xcb_res_client_next (xcb_res_client_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_client_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_client_end (xcb_res_client_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_type_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_type_t)
 */
void
xcb_res_type_next (xcb_res_type_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_type_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_type_end (xcb_res_type_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_client_id_spec_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_client_id_spec_t)
 */
void
xcb_res_client_id_spec_next (xcb_res_client_id_spec_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_client_id_spec_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_client_id_spec_end (xcb_res_client_id_spec_iterator_t i);

int
xcb_res_client_id_value_sizeof (const void  *_buffer);

uint32_t *
xcb_res_client_id_value_value (const xcb_res_client_id_value_t *R);

int
xcb_res_client_id_value_value_length (const xcb_res_client_id_value_t *R);

xcb_generic_iterator_t
xcb_res_client_id_value_value_end (const xcb_res_client_id_value_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_client_id_value_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_client_id_value_t)
 */
void
xcb_res_client_id_value_next (xcb_res_client_id_value_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_client_id_value_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_client_id_value_end (xcb_res_client_id_value_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_resource_id_spec_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_resource_id_spec_t)
 */
void
xcb_res_resource_id_spec_next (xcb_res_resource_id_spec_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_resource_id_spec_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_resource_id_spec_end (xcb_res_resource_id_spec_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_resource_size_spec_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_resource_size_spec_t)
 */
void
xcb_res_resource_size_spec_next (xcb_res_resource_size_spec_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_resource_size_spec_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_resource_size_spec_end (xcb_res_resource_size_spec_iterator_t i);

int
xcb_res_resource_size_value_sizeof (const void  *_buffer);

xcb_res_resource_size_spec_t *
xcb_res_resource_size_value_cross_references (const xcb_res_resource_size_value_t *R);

int
xcb_res_resource_size_value_cross_references_length (const xcb_res_resource_size_value_t *R);

xcb_res_resource_size_spec_iterator_t
xcb_res_resource_size_value_cross_references_iterator (const xcb_res_resource_size_value_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_res_resource_size_value_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_res_resource_size_value_t)
 */
void
xcb_res_resource_size_value_next (xcb_res_resource_size_value_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_res_resource_size_value_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_res_resource_size_value_end (xcb_res_resource_size_value_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_version_cookie_t
xcb_res_query_version (xcb_connection_t *c,
                       uint8_t           client_major,
                       uint8_t           client_minor);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_version_cookie_t
xcb_res_query_version_unchecked (xcb_connection_t *c,
                                 uint8_t           client_major,
                                 uint8_t           client_minor);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_version_reply_t *
xcb_res_query_version_reply (xcb_connection_t                *c,
                             xcb_res_query_version_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_res_query_clients_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_clients_cookie_t
xcb_res_query_clients (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_clients_cookie_t
xcb_res_query_clients_unchecked (xcb_connection_t *c);

xcb_res_client_t *
xcb_res_query_clients_clients (const xcb_res_query_clients_reply_t *R);

int
xcb_res_query_clients_clients_length (const xcb_res_query_clients_reply_t *R);

xcb_res_client_iterator_t
xcb_res_query_clients_clients_iterator (const xcb_res_query_clients_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_clients_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_clients_reply_t *
xcb_res_query_clients_reply (xcb_connection_t                *c,
                             xcb_res_query_clients_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_res_query_client_resources_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_client_resources_cookie_t
xcb_res_query_client_resources (xcb_connection_t *c,
                                uint32_t          xid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_client_resources_cookie_t
xcb_res_query_client_resources_unchecked (xcb_connection_t *c,
                                          uint32_t          xid);

xcb_res_type_t *
xcb_res_query_client_resources_types (const xcb_res_query_client_resources_reply_t *R);

int
xcb_res_query_client_resources_types_length (const xcb_res_query_client_resources_reply_t *R);

xcb_res_type_iterator_t
xcb_res_query_client_resources_types_iterator (const xcb_res_query_client_resources_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_client_resources_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_client_resources_reply_t *
xcb_res_query_client_resources_reply (xcb_connection_t                         *c,
                                      xcb_res_query_client_resources_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_client_pixmap_bytes_cookie_t
xcb_res_query_client_pixmap_bytes (xcb_connection_t *c,
                                   uint32_t          xid);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_client_pixmap_bytes_cookie_t
xcb_res_query_client_pixmap_bytes_unchecked (xcb_connection_t *c,
                                             uint32_t          xid);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_client_pixmap_bytes_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_client_pixmap_bytes_reply_t *
xcb_res_query_client_pixmap_bytes_reply (xcb_connection_t                            *c,
                                         xcb_res_query_client_pixmap_bytes_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

int
xcb_res_query_client_ids_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_client_ids_cookie_t
xcb_res_query_client_ids (xcb_connection_t               *c,
                          uint32_t                        num_specs,
                          const xcb_res_client_id_spec_t *specs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_client_ids_cookie_t
xcb_res_query_client_ids_unchecked (xcb_connection_t               *c,
                                    uint32_t                        num_specs,
                                    const xcb_res_client_id_spec_t *specs);

int
xcb_res_query_client_ids_ids_length (const xcb_res_query_client_ids_reply_t *R);

xcb_res_client_id_value_iterator_t
xcb_res_query_client_ids_ids_iterator (const xcb_res_query_client_ids_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_client_ids_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_client_ids_reply_t *
xcb_res_query_client_ids_reply (xcb_connection_t                   *c,
                                xcb_res_query_client_ids_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_res_query_resource_bytes_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_res_query_resource_bytes_cookie_t
xcb_res_query_resource_bytes (xcb_connection_t                 *c,
                              uint32_t                          client,
                              uint32_t                          num_specs,
                              const xcb_res_resource_id_spec_t *specs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_res_query_resource_bytes_cookie_t
xcb_res_query_resource_bytes_unchecked (xcb_connection_t                 *c,
                                        uint32_t                          client,
                                        uint32_t                          num_specs,
                                        const xcb_res_resource_id_spec_t *specs);

int
xcb_res_query_resource_bytes_sizes_length (const xcb_res_query_resource_bytes_reply_t *R);

xcb_res_resource_size_value_iterator_t
xcb_res_query_resource_bytes_sizes_iterator (const xcb_res_query_resource_bytes_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_res_query_resource_bytes_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_res_query_resource_bytes_reply_t *
xcb_res_query_resource_bytes_reply (xcb_connection_t                       *c,
                                    xcb_res_query_resource_bytes_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d31 2
a32 2
    uint32_t resource_base; /**<  */
    uint32_t resource_mask; /**<  */
d39 3
a41 3
    xcb_res_client_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d48 2
a49 2
    xcb_atom_t resource_type; /**<  */
    uint32_t   count; /**<  */
d56 3
a58 3
    xcb_res_type_t *data; /**<  */
    int             rem; /**<  */
    int             index; /**<  */
d70 2
a71 2
    uint32_t client; /**<  */
    uint32_t mask; /**<  */
d78 3
a80 3
    xcb_res_client_id_spec_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d87 2
a88 2
    xcb_res_client_id_spec_t spec; /**<  */
    uint32_t                 length; /**<  */
d95 3
a97 3
    xcb_res_client_id_value_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d104 2
a105 2
    uint32_t resource; /**<  */
    uint32_t type; /**<  */
d112 3
a114 3
    xcb_res_resource_id_spec_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d121 4
a124 4
    xcb_res_resource_id_spec_t spec; /**<  */
    uint32_t                   bytes; /**<  */
    uint32_t                   ref_count; /**<  */
    uint32_t                   use_count; /**<  */
d131 3
a133 3
    xcb_res_resource_size_spec_t *data; /**<  */
    int                           rem; /**<  */
    int                           index; /**<  */
d140 2
a141 2
    xcb_res_resource_size_spec_t size; /**<  */
    uint32_t                     num_cross_references; /**<  */
d148 3
a150 3
    xcb_res_resource_size_value_t *data; /**<  */
    int                            rem; /**<  */
    int                            index; /**<  */
d157 1
a157 1
    unsigned int sequence; /**<  */
d167 5
a171 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  client_major; /**<  */
    uint8_t  client_minor; /**<  */
d178 6
a183 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t server_major; /**<  */
    uint16_t server_minor; /**<  */
d190 1
a190 1
    unsigned int sequence; /**<  */
d200 3
a202 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d209 6
a214 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_clients; /**<  */
    uint8_t  pad1[20]; /**<  */
d221 1
a221 1
    unsigned int sequence; /**<  */
d231 4
a234 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t xid; /**<  */
d241 6
a246 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_types; /**<  */
    uint8_t  pad1[20]; /**<  */
d253 1
a253 1
    unsigned int sequence; /**<  */
d263 4
a266 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t xid; /**<  */
d273 6
a278 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t bytes; /**<  */
    uint32_t bytes_overflow; /**<  */
d285 1
a285 1
    unsigned int sequence; /**<  */
d295 4
a298 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t num_specs; /**<  */
d305 6
a310 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_ids; /**<  */
    uint8_t  pad1[20]; /**<  */
d317 1
a317 1
    unsigned int sequence; /**<  */
d327 5
a331 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t client; /**<  */
    uint32_t num_specs; /**<  */
d338 6
a343 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_sizes; /**<  */
    uint8_t  pad1[20]; /**<  */
d355 1
a355 1
xcb_res_client_next (xcb_res_client_iterator_t *i  /**< */);
d367 1
a367 1
xcb_res_client_end (xcb_res_client_iterator_t i  /**< */);
d378 1
a378 1
xcb_res_type_next (xcb_res_type_iterator_t *i  /**< */);
d390 1
a390 1
xcb_res_type_end (xcb_res_type_iterator_t i  /**< */);
d401 1
a401 1
xcb_res_client_id_spec_next (xcb_res_client_id_spec_iterator_t *i  /**< */);
d413 1
a413 1
xcb_res_client_id_spec_end (xcb_res_client_id_spec_iterator_t i  /**< */);
d416 1
a416 1
xcb_res_client_id_value_sizeof (const void  *_buffer  /**< */);
d419 1
a419 1
xcb_res_client_id_value_value (const xcb_res_client_id_value_t *R  /**< */);
d422 1
a422 1
xcb_res_client_id_value_value_length (const xcb_res_client_id_value_t *R  /**< */);
d425 1
a425 1
xcb_res_client_id_value_value_end (const xcb_res_client_id_value_t *R  /**< */);
d436 1
a436 1
xcb_res_client_id_value_next (xcb_res_client_id_value_iterator_t *i  /**< */);
d448 1
a448 1
xcb_res_client_id_value_end (xcb_res_client_id_value_iterator_t i  /**< */);
d459 1
a459 1
xcb_res_resource_id_spec_next (xcb_res_resource_id_spec_iterator_t *i  /**< */);
d471 1
a471 1
xcb_res_resource_id_spec_end (xcb_res_resource_id_spec_iterator_t i  /**< */);
d482 1
a482 1
xcb_res_resource_size_spec_next (xcb_res_resource_size_spec_iterator_t *i  /**< */);
d494 1
a494 1
xcb_res_resource_size_spec_end (xcb_res_resource_size_spec_iterator_t i  /**< */);
d497 1
a497 1
xcb_res_resource_size_value_sizeof (const void  *_buffer  /**< */);
d500 1
a500 1
xcb_res_resource_size_value_cross_references (const xcb_res_resource_size_value_t *R  /**< */);
d503 1
a503 1
xcb_res_resource_size_value_cross_references_length (const xcb_res_resource_size_value_t *R  /**< */);
d506 1
a506 1
xcb_res_resource_size_value_cross_references_iterator (const xcb_res_resource_size_value_t *R  /**< */);
d517 1
a517 1
xcb_res_resource_size_value_next (xcb_res_resource_size_value_iterator_t *i  /**< */);
d529 1
a529 1
xcb_res_resource_size_value_end (xcb_res_resource_size_value_iterator_t i  /**< */);
d540 3
a542 3
xcb_res_query_version (xcb_connection_t *c  /**< */,
                       uint8_t           client_major  /**< */,
                       uint8_t           client_minor  /**< */);
d556 3
a558 3
xcb_res_query_version_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           client_major  /**< */,
                                 uint8_t           client_minor  /**< */);
d575 1
a575 1
xcb_res_query_version_reply (xcb_connection_t                *c  /**< */,
d577 1
a577 1
                             xcb_generic_error_t            **e  /**< */);
d580 1
a580 1
xcb_res_query_clients_sizeof (const void  *_buffer  /**< */);
d591 1
a591 1
xcb_res_query_clients (xcb_connection_t *c  /**< */);
d605 1
a605 1
xcb_res_query_clients_unchecked (xcb_connection_t *c  /**< */);
d608 1
a608 1
xcb_res_query_clients_clients (const xcb_res_query_clients_reply_t *R  /**< */);
d611 1
a611 1
xcb_res_query_clients_clients_length (const xcb_res_query_clients_reply_t *R  /**< */);
d614 1
a614 1
xcb_res_query_clients_clients_iterator (const xcb_res_query_clients_reply_t *R  /**< */);
d631 1
a631 1
xcb_res_query_clients_reply (xcb_connection_t                *c  /**< */,
d633 1
a633 1
                             xcb_generic_error_t            **e  /**< */);
d636 1
a636 1
xcb_res_query_client_resources_sizeof (const void  *_buffer  /**< */);
d647 2
a648 2
xcb_res_query_client_resources (xcb_connection_t *c  /**< */,
                                uint32_t          xid  /**< */);
d662 2
a663 2
xcb_res_query_client_resources_unchecked (xcb_connection_t *c  /**< */,
                                          uint32_t          xid  /**< */);
d666 1
a666 1
xcb_res_query_client_resources_types (const xcb_res_query_client_resources_reply_t *R  /**< */);
d669 1
a669 1
xcb_res_query_client_resources_types_length (const xcb_res_query_client_resources_reply_t *R  /**< */);
d672 1
a672 1
xcb_res_query_client_resources_types_iterator (const xcb_res_query_client_resources_reply_t *R  /**< */);
d689 1
a689 1
xcb_res_query_client_resources_reply (xcb_connection_t                         *c  /**< */,
d691 1
a691 1
                                      xcb_generic_error_t                     **e  /**< */);
d702 2
a703 2
xcb_res_query_client_pixmap_bytes (xcb_connection_t *c  /**< */,
                                   uint32_t          xid  /**< */);
d717 2
a718 2
xcb_res_query_client_pixmap_bytes_unchecked (xcb_connection_t *c  /**< */,
                                             uint32_t          xid  /**< */);
d735 1
a735 1
xcb_res_query_client_pixmap_bytes_reply (xcb_connection_t                            *c  /**< */,
d737 1
a737 1
                                         xcb_generic_error_t                        **e  /**< */);
d740 1
a740 1
xcb_res_query_client_ids_sizeof (const void  *_buffer  /**< */);
d751 3
a753 3
xcb_res_query_client_ids (xcb_connection_t               *c  /**< */,
                          uint32_t                        num_specs  /**< */,
                          const xcb_res_client_id_spec_t *specs  /**< */);
d767 3
a769 3
xcb_res_query_client_ids_unchecked (xcb_connection_t               *c  /**< */,
                                    uint32_t                        num_specs  /**< */,
                                    const xcb_res_client_id_spec_t *specs  /**< */);
d772 1
a772 1
xcb_res_query_client_ids_ids_length (const xcb_res_query_client_ids_reply_t *R  /**< */);
d775 1
a775 1
xcb_res_query_client_ids_ids_iterator (const xcb_res_query_client_ids_reply_t *R  /**< */);
d792 1
a792 1
xcb_res_query_client_ids_reply (xcb_connection_t                   *c  /**< */,
d794 1
a794 1
                                xcb_generic_error_t               **e  /**< */);
d797 1
a797 1
xcb_res_query_resource_bytes_sizeof (const void  *_buffer  /**< */);
d808 4
a811 4
xcb_res_query_resource_bytes (xcb_connection_t                 *c  /**< */,
                              uint32_t                          client  /**< */,
                              uint32_t                          num_specs  /**< */,
                              const xcb_res_resource_id_spec_t *specs  /**< */);
d825 4
a828 4
xcb_res_query_resource_bytes_unchecked (xcb_connection_t                 *c  /**< */,
                                        uint32_t                          client  /**< */,
                                        uint32_t                          num_specs  /**< */,
                                        const xcb_res_resource_id_spec_t *specs  /**< */);
d831 1
a831 1
xcb_res_query_resource_bytes_sizes_length (const xcb_res_query_resource_bytes_reply_t *R  /**< */);
d834 1
a834 1
xcb_res_query_resource_bytes_sizes_iterator (const xcb_res_query_resource_bytes_reply_t *R  /**< */);
d851 1
a851 1
xcb_res_query_resource_bytes_reply (xcb_connection_t                       *c  /**< */,
d853 1
a853 1
                                    xcb_generic_error_t                   **e  /**< */);
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a353 10

/*****************************************************************************
 **
 ** void xcb_res_client_next
 ** 
 ** @@param xcb_res_client_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a365 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_end
 ** 
 ** @@param xcb_res_client_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a376 10

/*****************************************************************************
 **
 ** void xcb_res_type_next
 ** 
 ** @@param xcb_res_type_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a388 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_type_end
 ** 
 ** @@param xcb_res_type_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a399 10

/*****************************************************************************
 **
 ** void xcb_res_client_id_spec_next
 ** 
 ** @@param xcb_res_client_id_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a411 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_spec_end
 ** 
 ** @@param xcb_res_client_id_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a417 10

/*****************************************************************************
 **
 ** uint32_t * xcb_res_client_id_value_value
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a420 10

/*****************************************************************************
 **
 ** int xcb_res_client_id_value_value_length
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a423 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_value_value_end
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a434 10

/*****************************************************************************
 **
 ** void xcb_res_client_id_value_next
 ** 
 ** @@param xcb_res_client_id_value_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a446 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_value_end
 ** 
 ** @@param xcb_res_client_id_value_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a457 10

/*****************************************************************************
 **
 ** void xcb_res_resource_id_spec_next
 ** 
 ** @@param xcb_res_resource_id_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a469 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_id_spec_end
 ** 
 ** @@param xcb_res_resource_id_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a480 10

/*****************************************************************************
 **
 ** void xcb_res_resource_size_spec_next
 ** 
 ** @@param xcb_res_resource_size_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a492 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_size_spec_end
 ** 
 ** @@param xcb_res_resource_size_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a498 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_spec_t * xcb_res_resource_size_value_cross_references
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns xcb_res_resource_size_spec_t *
 **
 *****************************************************************************/
 
a501 10

/*****************************************************************************
 **
 ** int xcb_res_resource_size_value_cross_references_length
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a504 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_spec_iterator_t xcb_res_resource_size_value_cross_references_iterator
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns xcb_res_resource_size_spec_iterator_t
 **
 *****************************************************************************/
 
a515 10

/*****************************************************************************
 **
 ** void xcb_res_resource_size_value_next
 ** 
 ** @@param xcb_res_resource_size_value_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a527 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_size_value_end
 ** 
 ** @@param xcb_res_resource_size_value_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d537 1
a537 1
 * 
a538 12

/*****************************************************************************
 **
 ** xcb_res_query_version_cookie_t xcb_res_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           client_major
 ** @@param uint8_t           client_minor
 ** @@returns xcb_res_query_version_cookie_t
 **
 *****************************************************************************/
 
d550 1
a550 1
 * 
a554 12

/*****************************************************************************
 **
 ** xcb_res_query_version_cookie_t xcb_res_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           client_major
 ** @@param uint8_t           client_minor
 ** @@returns xcb_res_query_version_cookie_t
 **
 *****************************************************************************/
 
d567 1
a567 1
 * 
a573 12

/*****************************************************************************
 **
 ** xcb_res_query_version_reply_t * xcb_res_query_version_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_res_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_res_query_version_reply_t *
 **
 *****************************************************************************/
 
d588 1
a588 1
 * 
a589 10

/*****************************************************************************
 **
 ** xcb_res_query_clients_cookie_t xcb_res_query_clients
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_res_query_clients_cookie_t
 **
 *****************************************************************************/
 
d599 1
a599 1
 * 
a603 10

/*****************************************************************************
 **
 ** xcb_res_query_clients_cookie_t xcb_res_query_clients_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_res_query_clients_cookie_t
 **
 *****************************************************************************/
 
a606 10

/*****************************************************************************
 **
 ** xcb_res_client_t * xcb_res_query_clients_clients
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns xcb_res_client_t *
 **
 *****************************************************************************/
 
a609 10

/*****************************************************************************
 **
 ** int xcb_res_query_clients_clients_length
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a612 10

/*****************************************************************************
 **
 ** xcb_res_client_iterator_t xcb_res_query_clients_clients_iterator
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns xcb_res_client_iterator_t
 **
 *****************************************************************************/
 
d623 1
a623 1
 * 
a629 12

/*****************************************************************************
 **
 ** xcb_res_query_clients_reply_t * xcb_res_query_clients_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_res_query_clients_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_res_query_clients_reply_t *
 **
 *****************************************************************************/
 
d644 1
a644 1
 * 
a645 11

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_cookie_t xcb_res_query_client_resources
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_resources_cookie_t
 **
 *****************************************************************************/
 
d656 1
a656 1
 * 
a660 11

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_cookie_t xcb_res_query_client_resources_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_resources_cookie_t
 **
 *****************************************************************************/
 
a664 10

/*****************************************************************************
 **
 ** xcb_res_type_t * xcb_res_query_client_resources_types
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns xcb_res_type_t *
 **
 *****************************************************************************/
 
a667 10

/*****************************************************************************
 **
 ** int xcb_res_query_client_resources_types_length
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a670 10

/*****************************************************************************
 **
 ** xcb_res_type_iterator_t xcb_res_query_client_resources_types_iterator
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns xcb_res_type_iterator_t
 **
 *****************************************************************************/
 
d681 1
a681 1
 * 
a687 12

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_reply_t * xcb_res_query_client_resources_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_res_query_client_resources_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_res_query_client_resources_reply_t *
 **
 *****************************************************************************/
 
d699 1
a699 1
 * 
a700 11

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_cookie_t xcb_res_query_client_pixmap_bytes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_pixmap_bytes_cookie_t
 **
 *****************************************************************************/
 
d711 1
a711 1
 * 
a715 11

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_cookie_t xcb_res_query_client_pixmap_bytes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_pixmap_bytes_cookie_t
 **
 *****************************************************************************/
 
d727 1
a727 1
 * 
a733 12

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_reply_t * xcb_res_query_client_pixmap_bytes_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_res_query_client_pixmap_bytes_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_res_query_client_pixmap_bytes_reply_t *
 **
 *****************************************************************************/
 
d748 1
a748 1
 * 
a749 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_cookie_t xcb_res_query_client_ids
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        num_specs
 ** @@param const xcb_res_client_id_spec_t *specs
 ** @@returns xcb_res_query_client_ids_cookie_t
 **
 *****************************************************************************/
 
d761 1
a761 1
 * 
a765 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_cookie_t xcb_res_query_client_ids_unchecked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        num_specs
 ** @@param const xcb_res_client_id_spec_t *specs
 ** @@returns xcb_res_query_client_ids_cookie_t
 **
 *****************************************************************************/
 
a770 10

/*****************************************************************************
 **
 ** int xcb_res_query_client_ids_ids_length
 ** 
 ** @@param const xcb_res_query_client_ids_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a773 10

/*****************************************************************************
 **
 ** xcb_res_client_id_value_iterator_t xcb_res_query_client_ids_ids_iterator
 ** 
 ** @@param const xcb_res_query_client_ids_reply_t *R
 ** @@returns xcb_res_client_id_value_iterator_t
 **
 *****************************************************************************/
 
d784 1
a784 1
 * 
a790 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_reply_t * xcb_res_query_client_ids_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_res_query_client_ids_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_res_query_client_ids_reply_t *
 **
 *****************************************************************************/
 
d805 1
a805 1
 * 
a806 13

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_cookie_t xcb_res_query_resource_bytes
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param uint32_t                          client
 ** @@param uint32_t                          num_specs
 ** @@param const xcb_res_resource_id_spec_t *specs
 ** @@returns xcb_res_query_resource_bytes_cookie_t
 **
 *****************************************************************************/
 
d819 1
a819 1
 * 
a823 13

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_cookie_t xcb_res_query_resource_bytes_unchecked
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param uint32_t                          client
 ** @@param uint32_t                          num_specs
 ** @@param const xcb_res_resource_id_spec_t *specs
 ** @@returns xcb_res_query_resource_bytes_cookie_t
 **
 *****************************************************************************/
 
a829 10

/*****************************************************************************
 **
 ** int xcb_res_query_resource_bytes_sizes_length
 ** 
 ** @@param const xcb_res_query_resource_bytes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a832 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_value_iterator_t xcb_res_query_resource_bytes_sizes_iterator
 ** 
 ** @@param const xcb_res_query_resource_bytes_reply_t *R
 ** @@returns xcb_res_resource_size_value_iterator_t
 **
 *****************************************************************************/
 
d843 1
a843 1
 * 
a849 12

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_reply_t * xcb_res_query_resource_bytes_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_res_query_resource_bytes_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_res_query_resource_bytes_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
#define XCB_RES_MINOR_VERSION 0
d61 92
d282 65
d433 299
d1134 230
@


1.1
log
@Initial revision
@
text
@d276 1
a276 1
 * Delivers a request to the X server
d301 1
a301 1
 * Delivers a request to the X server
d359 3
d363 1
a363 1
 * Delivers a request to the X server
d384 1
a384 1
 * Delivers a request to the X server
d477 3
d481 1
a481 1
 * Delivers a request to the X server
d504 1
a504 1
 * Delivers a request to the X server
d600 1
a600 1
 * Delivers a request to the X server
d623 1
a623 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
