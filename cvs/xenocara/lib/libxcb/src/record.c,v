head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.39;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from record.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "record.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

xcb_extension_t xcb_record_id = { "RECORD", 0 };

void
xcb_record_context_next (xcb_record_context_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_context_t);
}

xcb_generic_iterator_t
xcb_record_context_end (xcb_record_context_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_range_8_next (xcb_record_range_8_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_range_8_t);
}

xcb_generic_iterator_t
xcb_record_range_8_end (xcb_record_range_8_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_range_16_next (xcb_record_range_16_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_range_16_t);
}

xcb_generic_iterator_t
xcb_record_range_16_end (xcb_record_range_16_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_ext_range_next (xcb_record_ext_range_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_ext_range_t);
}

xcb_generic_iterator_t
xcb_record_ext_range_end (xcb_record_ext_range_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_range_next (xcb_record_range_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_range_t);
}

xcb_generic_iterator_t
xcb_record_range_end (xcb_record_range_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_element_header_next (xcb_record_element_header_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_element_header_t);
}

xcb_generic_iterator_t
xcb_record_element_header_end (xcb_record_element_header_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_record_client_spec_next (xcb_record_client_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_record_client_spec_t);
}

xcb_generic_iterator_t
xcb_record_client_spec_end (xcb_record_client_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_record_client_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_client_info_t *_aux = (xcb_record_client_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_record_client_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* ranges */
    xcb_block_len += _aux->num_ranges * sizeof(xcb_record_range_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_range_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_record_range_t *
xcb_record_client_info_ranges (const xcb_record_client_info_t *R)
{
    return (xcb_record_range_t *) (R + 1);
}

int
xcb_record_client_info_ranges_length (const xcb_record_client_info_t *R)
{
    return R->num_ranges;
}

xcb_record_range_iterator_t
xcb_record_client_info_ranges_iterator (const xcb_record_client_info_t *R)
{
    xcb_record_range_iterator_t i;
    i.data = (xcb_record_range_t *) (R + 1);
    i.rem = R->num_ranges;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_record_client_info_next (xcb_record_client_info_iterator_t *i)
{
    xcb_record_client_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_record_client_info_t *)(((char *)R) + xcb_record_client_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_record_client_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_record_client_info_end (xcb_record_client_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_record_client_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

xcb_record_query_version_cookie_t
xcb_record_query_version (xcb_connection_t *c,
                          uint16_t          major_version,
                          uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_query_version_cookie_t xcb_ret;
    xcb_record_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_query_version_cookie_t
xcb_record_query_version_unchecked (xcb_connection_t *c,
                                    uint16_t          major_version,
                                    uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_query_version_cookie_t xcb_ret;
    xcb_record_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_query_version_reply_t *
xcb_record_query_version_reply (xcb_connection_t                   *c,
                                xcb_record_query_version_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_record_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_record_create_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_create_context_request_t *_aux = (xcb_record_create_context_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_record_create_context_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* client_specs */
    xcb_block_len += _aux->num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_client_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* ranges */
    xcb_block_len += _aux->num_ranges * sizeof(xcb_record_range_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_range_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_record_create_context_checked (xcb_connection_t               *c,
                                   xcb_record_context_t            context,
                                   xcb_record_element_header_t     element_header,
                                   uint32_t                        num_client_specs,
                                   uint32_t                        num_ranges,
                                   const xcb_record_client_spec_t *client_specs,
                                   const xcb_record_range_t       *ranges)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_record_create_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.element_header = element_header;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_client_specs = num_client_specs;
    xcb_out.num_ranges = num_ranges;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_record_range_t ranges */
    xcb_parts[6].iov_base = (char *) ranges;
    xcb_parts[6].iov_len = num_ranges * sizeof(xcb_record_range_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_create_context (xcb_connection_t               *c,
                           xcb_record_context_t            context,
                           xcb_record_element_header_t     element_header,
                           uint32_t                        num_client_specs,
                           uint32_t                        num_ranges,
                           const xcb_record_client_spec_t *client_specs,
                           const xcb_record_range_t       *ranges)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_record_create_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.element_header = element_header;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_client_specs = num_client_specs;
    xcb_out.num_ranges = num_ranges;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_record_range_t ranges */
    xcb_parts[6].iov_base = (char *) ranges;
    xcb_parts[6].iov_len = num_ranges * sizeof(xcb_record_range_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_client_spec_t *
xcb_record_create_context_client_specs (const xcb_record_create_context_request_t *R)
{
    return (xcb_record_client_spec_t *) (R + 1);
}

int
xcb_record_create_context_client_specs_length (const xcb_record_create_context_request_t *R)
{
    return R->num_client_specs;
}

xcb_generic_iterator_t
xcb_record_create_context_client_specs_end (const xcb_record_create_context_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_record_client_spec_t *) (R + 1)) + (R->num_client_specs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_record_range_t *
xcb_record_create_context_ranges (const xcb_record_create_context_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_record_create_context_client_specs_end(R);
    return (xcb_record_range_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_record_range_t, prev.index) + 0);
}

int
xcb_record_create_context_ranges_length (const xcb_record_create_context_request_t *R)
{
    return R->num_ranges;
}

xcb_record_range_iterator_t
xcb_record_create_context_ranges_iterator (const xcb_record_create_context_request_t *R)
{
    xcb_record_range_iterator_t i;
    xcb_generic_iterator_t prev = xcb_record_create_context_client_specs_end(R);
    i.data = (xcb_record_range_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_record_range_t, prev.index));
    i.rem = R->num_ranges;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_record_register_clients_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_register_clients_request_t *_aux = (xcb_record_register_clients_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_record_register_clients_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* client_specs */
    xcb_block_len += _aux->num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_client_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* ranges */
    xcb_block_len += _aux->num_ranges * sizeof(xcb_record_range_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_range_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_record_register_clients_checked (xcb_connection_t               *c,
                                     xcb_record_context_t            context,
                                     xcb_record_element_header_t     element_header,
                                     uint32_t                        num_client_specs,
                                     uint32_t                        num_ranges,
                                     const xcb_record_client_spec_t *client_specs,
                                     const xcb_record_range_t       *ranges)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_REGISTER_CLIENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_record_register_clients_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.element_header = element_header;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_client_specs = num_client_specs;
    xcb_out.num_ranges = num_ranges;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_record_range_t ranges */
    xcb_parts[6].iov_base = (char *) ranges;
    xcb_parts[6].iov_len = num_ranges * sizeof(xcb_record_range_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_register_clients (xcb_connection_t               *c,
                             xcb_record_context_t            context,
                             xcb_record_element_header_t     element_header,
                             uint32_t                        num_client_specs,
                             uint32_t                        num_ranges,
                             const xcb_record_client_spec_t *client_specs,
                             const xcb_record_range_t       *ranges)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_REGISTER_CLIENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_record_register_clients_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.element_header = element_header;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_client_specs = num_client_specs;
    xcb_out.num_ranges = num_ranges;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_record_range_t ranges */
    xcb_parts[6].iov_base = (char *) ranges;
    xcb_parts[6].iov_len = num_ranges * sizeof(xcb_record_range_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_client_spec_t *
xcb_record_register_clients_client_specs (const xcb_record_register_clients_request_t *R)
{
    return (xcb_record_client_spec_t *) (R + 1);
}

int
xcb_record_register_clients_client_specs_length (const xcb_record_register_clients_request_t *R)
{
    return R->num_client_specs;
}

xcb_generic_iterator_t
xcb_record_register_clients_client_specs_end (const xcb_record_register_clients_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_record_client_spec_t *) (R + 1)) + (R->num_client_specs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_record_range_t *
xcb_record_register_clients_ranges (const xcb_record_register_clients_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_record_register_clients_client_specs_end(R);
    return (xcb_record_range_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_record_range_t, prev.index) + 0);
}

int
xcb_record_register_clients_ranges_length (const xcb_record_register_clients_request_t *R)
{
    return R->num_ranges;
}

xcb_record_range_iterator_t
xcb_record_register_clients_ranges_iterator (const xcb_record_register_clients_request_t *R)
{
    xcb_record_range_iterator_t i;
    xcb_generic_iterator_t prev = xcb_record_register_clients_client_specs_end(R);
    i.data = (xcb_record_range_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_record_range_t, prev.index));
    i.rem = R->num_ranges;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_record_unregister_clients_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_unregister_clients_request_t *_aux = (xcb_record_unregister_clients_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_record_unregister_clients_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* client_specs */
    xcb_block_len += _aux->num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_record_client_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_record_unregister_clients_checked (xcb_connection_t               *c,
                                       xcb_record_context_t            context,
                                       uint32_t                        num_client_specs,
                                       const xcb_record_client_spec_t *client_specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_UNREGISTER_CLIENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_record_unregister_clients_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.num_client_specs = num_client_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_unregister_clients (xcb_connection_t               *c,
                               xcb_record_context_t            context,
                               uint32_t                        num_client_specs,
                               const xcb_record_client_spec_t *client_specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_UNREGISTER_CLIENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_record_unregister_clients_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.num_client_specs = num_client_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_record_client_spec_t client_specs */
    xcb_parts[4].iov_base = (char *) client_specs;
    xcb_parts[4].iov_len = num_client_specs * sizeof(xcb_record_client_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_client_spec_t *
xcb_record_unregister_clients_client_specs (const xcb_record_unregister_clients_request_t *R)
{
    return (xcb_record_client_spec_t *) (R + 1);
}

int
xcb_record_unregister_clients_client_specs_length (const xcb_record_unregister_clients_request_t *R)
{
    return R->num_client_specs;
}

xcb_generic_iterator_t
xcb_record_unregister_clients_client_specs_end (const xcb_record_unregister_clients_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_record_client_spec_t *) (R + 1)) + (R->num_client_specs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_record_get_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_get_context_reply_t *_aux = (xcb_record_get_context_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_record_get_context_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* intercepted_clients */
    for(i=0; i<_aux->num_intercepted_clients; i++) {
        xcb_tmp_len = xcb_record_client_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_record_client_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_record_get_context_cookie_t
xcb_record_get_context (xcb_connection_t     *c,
                        xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_GET_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_get_context_cookie_t xcb_ret;
    xcb_record_get_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_get_context_cookie_t
xcb_record_get_context_unchecked (xcb_connection_t     *c,
                                  xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_GET_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_get_context_cookie_t xcb_ret;
    xcb_record_get_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_record_get_context_intercepted_clients_length (const xcb_record_get_context_reply_t *R)
{
    return R->num_intercepted_clients;
}

xcb_record_client_info_iterator_t
xcb_record_get_context_intercepted_clients_iterator (const xcb_record_get_context_reply_t *R)
{
    xcb_record_client_info_iterator_t i;
    i.data = (xcb_record_client_info_t *) (R + 1);
    i.rem = R->num_intercepted_clients;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_record_get_context_reply_t *
xcb_record_get_context_reply (xcb_connection_t                 *c,
                              xcb_record_get_context_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_record_get_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_record_enable_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_record_enable_context_reply_t *_aux = (xcb_record_enable_context_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_record_enable_context_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_record_enable_context_cookie_t
xcb_record_enable_context (xcb_connection_t     *c,
                           xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_ENABLE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_enable_context_cookie_t xcb_ret;
    xcb_record_enable_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_record_enable_context_cookie_t
xcb_record_enable_context_unchecked (xcb_connection_t     *c,
                                     xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_ENABLE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_record_enable_context_cookie_t xcb_ret;
    xcb_record_enable_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_record_enable_context_data (const xcb_record_enable_context_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_record_enable_context_data_length (const xcb_record_enable_context_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_record_enable_context_data_end (const xcb_record_enable_context_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_record_enable_context_reply_t *
xcb_record_enable_context_reply (xcb_connection_t                    *c,
                                 xcb_record_enable_context_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_record_enable_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_record_disable_context_checked (xcb_connection_t     *c,
                                    xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_DISABLE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_record_disable_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_disable_context (xcb_connection_t     *c,
                            xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_DISABLE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_record_disable_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_free_context_checked (xcb_connection_t     *c,
                                 xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_FREE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_record_free_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_record_free_context (xcb_connection_t     *c,
                         xcb_record_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_record_id,
        .opcode = XCB_RECORD_FREE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_record_free_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d21 1
a21 1
xcb_record_context_next (xcb_record_context_iterator_t *i  /**< */)
d29 1
a29 1
xcb_record_context_end (xcb_record_context_iterator_t i  /**< */)
d39 1
a39 1
xcb_record_range_8_next (xcb_record_range_8_iterator_t *i  /**< */)
d47 1
a47 1
xcb_record_range_8_end (xcb_record_range_8_iterator_t i  /**< */)
d57 1
a57 1
xcb_record_range_16_next (xcb_record_range_16_iterator_t *i  /**< */)
d65 1
a65 1
xcb_record_range_16_end (xcb_record_range_16_iterator_t i  /**< */)
d75 1
a75 1
xcb_record_ext_range_next (xcb_record_ext_range_iterator_t *i  /**< */)
d83 1
a83 1
xcb_record_ext_range_end (xcb_record_ext_range_iterator_t i  /**< */)
d93 1
a93 1
xcb_record_range_next (xcb_record_range_iterator_t *i  /**< */)
d101 1
a101 1
xcb_record_range_end (xcb_record_range_iterator_t i  /**< */)
d111 1
a111 1
xcb_record_element_header_next (xcb_record_element_header_iterator_t *i  /**< */)
d119 1
a119 1
xcb_record_element_header_end (xcb_record_element_header_iterator_t i  /**< */)
d129 1
a129 1
xcb_record_client_spec_next (xcb_record_client_spec_iterator_t *i  /**< */)
d137 1
a137 1
xcb_record_client_spec_end (xcb_record_client_spec_iterator_t i  /**< */)
d147 1
a147 1
xcb_record_client_info_sizeof (const void  *_buffer  /**< */)
d178 1
a178 1
xcb_record_client_info_ranges (const xcb_record_client_info_t *R  /**< */)
d184 1
a184 1
xcb_record_client_info_ranges_length (const xcb_record_client_info_t *R  /**< */)
d190 1
a190 1
xcb_record_client_info_ranges_iterator (const xcb_record_client_info_t *R  /**< */)
d200 1
a200 1
xcb_record_client_info_next (xcb_record_client_info_iterator_t *i  /**< */)
d211 1
a211 1
xcb_record_client_info_end (xcb_record_client_info_iterator_t i  /**< */)
d223 3
a225 3
xcb_record_query_version (xcb_connection_t *c  /**< */,
                          uint16_t          major_version  /**< */,
                          uint16_t          minor_version  /**< */)
d228 4
a231 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_QUERY_VERSION,
        /* isvoid */ 0
d251 3
a253 3
xcb_record_query_version_unchecked (xcb_connection_t *c  /**< */,
                                    uint16_t          major_version  /**< */,
                                    uint16_t          minor_version  /**< */)
d256 4
a259 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_QUERY_VERSION,
        /* isvoid */ 0
d279 1
a279 1
xcb_record_query_version_reply (xcb_connection_t                   *c  /**< */,
d281 1
a281 1
                                xcb_generic_error_t               **e  /**< */)
d287 1
a287 1
xcb_record_create_context_sizeof (const void  *_buffer  /**< */)
d330 7
a336 7
xcb_record_create_context_checked (xcb_connection_t               *c  /**< */,
                                   xcb_record_context_t            context  /**< */,
                                   xcb_record_element_header_t     element_header  /**< */,
                                   uint32_t                        num_client_specs  /**< */,
                                   uint32_t                        num_ranges  /**< */,
                                   const xcb_record_client_spec_t *client_specs  /**< */,
                                   const xcb_record_range_t       *ranges  /**< */)
d339 4
a342 4
        /* count */ 6,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_CREATE_CONTEXT,
        /* isvoid */ 1
d375 7
a381 7
xcb_record_create_context (xcb_connection_t               *c  /**< */,
                           xcb_record_context_t            context  /**< */,
                           xcb_record_element_header_t     element_header  /**< */,
                           uint32_t                        num_client_specs  /**< */,
                           uint32_t                        num_ranges  /**< */,
                           const xcb_record_client_spec_t *client_specs  /**< */,
                           const xcb_record_range_t       *ranges  /**< */)
d384 4
a387 4
        /* count */ 6,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_CREATE_CONTEXT,
        /* isvoid */ 1
d419 46
d466 1
a466 1
xcb_record_register_clients_sizeof (const void  *_buffer  /**< */)
d509 7
a515 7
xcb_record_register_clients_checked (xcb_connection_t               *c  /**< */,
                                     xcb_record_context_t            context  /**< */,
                                     xcb_record_element_header_t     element_header  /**< */,
                                     uint32_t                        num_client_specs  /**< */,
                                     uint32_t                        num_ranges  /**< */,
                                     const xcb_record_client_spec_t *client_specs  /**< */,
                                     const xcb_record_range_t       *ranges  /**< */)
d518 4
a521 4
        /* count */ 6,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_REGISTER_CLIENTS,
        /* isvoid */ 1
d554 7
a560 7
xcb_record_register_clients (xcb_connection_t               *c  /**< */,
                             xcb_record_context_t            context  /**< */,
                             xcb_record_element_header_t     element_header  /**< */,
                             uint32_t                        num_client_specs  /**< */,
                             uint32_t                        num_ranges  /**< */,
                             const xcb_record_client_spec_t *client_specs  /**< */,
                             const xcb_record_range_t       *ranges  /**< */)
d563 4
a566 4
        /* count */ 6,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_REGISTER_CLIENTS,
        /* isvoid */ 1
d598 6
d605 41
a645 1
xcb_record_unregister_clients_sizeof (const void  *_buffer  /**< */)
d676 4
a679 4
xcb_record_unregister_clients_checked (xcb_connection_t               *c  /**< */,
                                       xcb_record_context_t            context  /**< */,
                                       uint32_t                        num_client_specs  /**< */,
                                       const xcb_record_client_spec_t *client_specs  /**< */)
d682 4
a685 4
        /* count */ 4,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_UNREGISTER_CLIENTS,
        /* isvoid */ 1
d710 4
a713 4
xcb_record_unregister_clients (xcb_connection_t               *c  /**< */,
                               xcb_record_context_t            context  /**< */,
                               uint32_t                        num_client_specs  /**< */,
                               const xcb_record_client_spec_t *client_specs  /**< */)
d716 4
a719 4
        /* count */ 4,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_UNREGISTER_CLIENTS,
        /* isvoid */ 1
d743 22
d766 1
a766 1
xcb_record_get_context_sizeof (const void  *_buffer  /**< */)
d802 2
a803 2
xcb_record_get_context (xcb_connection_t     *c  /**< */,
                        xcb_record_context_t  context  /**< */)
d806 4
a809 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_GET_CONTEXT,
        /* isvoid */ 0
d828 2
a829 2
xcb_record_get_context_unchecked (xcb_connection_t     *c  /**< */,
                                  xcb_record_context_t  context  /**< */)
d832 4
a835 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_GET_CONTEXT,
        /* isvoid */ 0
d854 1
a854 1
xcb_record_get_context_intercepted_clients_length (const xcb_record_get_context_reply_t *R  /**< */)
d860 1
a860 1
xcb_record_get_context_intercepted_clients_iterator (const xcb_record_get_context_reply_t *R  /**< */)
d870 1
a870 1
xcb_record_get_context_reply (xcb_connection_t                 *c  /**< */,
d872 1
a872 1
                              xcb_generic_error_t             **e  /**< */)
d878 1
a878 1
xcb_record_enable_context_sizeof (const void  *_buffer  /**< */)
d909 2
a910 2
xcb_record_enable_context (xcb_connection_t     *c  /**< */,
                           xcb_record_context_t  context  /**< */)
d913 4
a916 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_ENABLE_CONTEXT,
        /* isvoid */ 0
d935 2
a936 2
xcb_record_enable_context_unchecked (xcb_connection_t     *c  /**< */,
                                     xcb_record_context_t  context  /**< */)
d939 4
a942 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_ENABLE_CONTEXT,
        /* isvoid */ 0
d961 1
a961 1
xcb_record_enable_context_data (const xcb_record_enable_context_reply_t *R  /**< */)
d967 1
a967 1
xcb_record_enable_context_data_length (const xcb_record_enable_context_reply_t *R  /**< */)
d973 1
a973 1
xcb_record_enable_context_data_end (const xcb_record_enable_context_reply_t *R  /**< */)
d983 1
a983 1
xcb_record_enable_context_reply (xcb_connection_t                    *c  /**< */,
d985 1
a985 1
                                 xcb_generic_error_t                **e  /**< */)
d991 2
a992 2
xcb_record_disable_context_checked (xcb_connection_t     *c  /**< */,
                                    xcb_record_context_t  context  /**< */)
d995 4
a998 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_DISABLE_CONTEXT,
        /* isvoid */ 1
d1017 2
a1018 2
xcb_record_disable_context (xcb_connection_t     *c  /**< */,
                            xcb_record_context_t  context  /**< */)
d1021 4
a1024 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_DISABLE_CONTEXT,
        /* isvoid */ 1
d1043 2
a1044 2
xcb_record_free_context_checked (xcb_connection_t     *c  /**< */,
                                 xcb_record_context_t  context  /**< */)
d1047 4
a1050 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_FREE_CONTEXT,
        /* isvoid */ 1
d1069 2
a1070 2
xcb_record_free_context (xcb_connection_t     *c  /**< */,
                         xcb_record_context_t  context  /**< */)
d1073 4
a1076 4
        /* count */ 2,
        /* ext */ &xcb_record_id,
        /* opcode */ XCB_RECORD_FREE_CONTEXT,
        /* isvoid */ 1
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a19 10

/*****************************************************************************
 **
 ** void xcb_record_context_next
 ** 
 ** @@param xcb_record_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a27 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_context_end
 ** 
 ** @@param xcb_record_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a37 10

/*****************************************************************************
 **
 ** void xcb_record_range_8_next
 ** 
 ** @@param xcb_record_range_8_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a45 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_8_end
 ** 
 ** @@param xcb_record_range_8_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a55 10

/*****************************************************************************
 **
 ** void xcb_record_range_16_next
 ** 
 ** @@param xcb_record_range_16_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a63 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_16_end
 ** 
 ** @@param xcb_record_range_16_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a73 10

/*****************************************************************************
 **
 ** void xcb_record_ext_range_next
 ** 
 ** @@param xcb_record_ext_range_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a81 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_ext_range_end
 ** 
 ** @@param xcb_record_ext_range_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a91 10

/*****************************************************************************
 **
 ** void xcb_record_range_next
 ** 
 ** @@param xcb_record_range_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a99 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_range_end
 ** 
 ** @@param xcb_record_range_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a109 10

/*****************************************************************************
 **
 ** void xcb_record_element_header_next
 ** 
 ** @@param xcb_record_element_header_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a117 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_element_header_end
 ** 
 ** @@param xcb_record_element_header_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a127 10

/*****************************************************************************
 **
 ** void xcb_record_client_spec_next
 ** 
 ** @@param xcb_record_client_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a135 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_client_spec_end
 ** 
 ** @@param xcb_record_client_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a176 10

/*****************************************************************************
 **
 ** xcb_record_range_t * xcb_record_client_info_ranges
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns xcb_record_range_t *
 **
 *****************************************************************************/
 
a182 10

/*****************************************************************************
 **
 ** int xcb_record_client_info_ranges_length
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a188 10

/*****************************************************************************
 **
 ** xcb_record_range_iterator_t xcb_record_client_info_ranges_iterator
 ** 
 ** @@param const xcb_record_client_info_t *R
 ** @@returns xcb_record_range_iterator_t
 **
 *****************************************************************************/
 
a198 10

/*****************************************************************************
 **
 ** void xcb_record_client_info_next
 ** 
 ** @@param xcb_record_client_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a209 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_client_info_end
 ** 
 ** @@param xcb_record_client_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a221 12

/*****************************************************************************
 **
 ** xcb_record_query_version_cookie_t xcb_record_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_record_query_version_cookie_t
 **
 *****************************************************************************/
 
d233 1
a233 1
    
d237 1
a237 1
    
d240 1
a240 1
    
d245 1
a245 1
    
a249 12

/*****************************************************************************
 **
 ** xcb_record_query_version_cookie_t xcb_record_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_record_query_version_cookie_t
 **
 *****************************************************************************/
 
d261 1
a261 1
    
d265 1
a265 1
    
d268 1
a268 1
    
d273 1
a273 1
    
a277 12

/*****************************************************************************
 **
 ** xcb_record_query_version_reply_t * xcb_record_query_version_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_record_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_record_query_version_reply_t *
 **
 *****************************************************************************/
 
a328 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_create_context_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d344 1
a344 1
    
d348 1
a348 1
    
d354 1
a354 1
    
d369 1
a369 1
    
a373 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_create_context
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d389 1
a389 1
    
d393 1
a393 1
    
d399 1
a399 1
    
d414 1
a414 1
    
a461 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_register_clients_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d477 1
a477 1
    
d481 1
a481 1
    
d487 1
a487 1
    
d502 1
a502 1
    
a506 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_register_clients
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param xcb_record_element_header_t     element_header
 ** @@param uint32_t                        num_client_specs
 ** @@param uint32_t                        num_ranges
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@param const xcb_record_range_t       *ranges
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d522 1
a522 1
    
d526 1
a526 1
    
d532 1
a532 1
    
d547 1
a547 1
    
a582 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_unregister_clients_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param uint32_t                        num_client_specs
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d595 1
a595 1
    
d599 1
a599 1
    
d602 1
a602 1
    
d612 1
a612 1
    
a616 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_unregister_clients
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_record_context_t            context
 ** @@param uint32_t                        num_client_specs
 ** @@param const xcb_record_client_spec_t *client_specs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d629 1
a629 1
    
d633 1
a633 1
    
d636 1
a636 1
    
d646 1
a646 1
    
a686 11

/*****************************************************************************
 **
 ** xcb_record_get_context_cookie_t xcb_record_get_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_get_context_cookie_t
 **
 *****************************************************************************/
 
d697 1
a697 1
    
d701 1
a701 1
    
d703 1
a703 1
    
d708 1
a708 1
    
a712 11

/*****************************************************************************
 **
 ** xcb_record_get_context_cookie_t xcb_record_get_context_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_get_context_cookie_t
 **
 *****************************************************************************/
 
d723 1
a723 1
    
d727 1
a727 1
    
d729 1
a729 1
    
d734 1
a734 1
    
a738 10

/*****************************************************************************
 **
 ** int xcb_record_get_context_intercepted_clients_length
 ** 
 ** @@param const xcb_record_get_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a744 10

/*****************************************************************************
 **
 ** xcb_record_client_info_iterator_t xcb_record_get_context_intercepted_clients_iterator
 ** 
 ** @@param const xcb_record_get_context_reply_t *R
 ** @@returns xcb_record_client_info_iterator_t
 **
 *****************************************************************************/
 
a754 12

/*****************************************************************************
 **
 ** xcb_record_get_context_reply_t * xcb_record_get_context_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_record_get_context_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_record_get_context_reply_t *
 **
 *****************************************************************************/
 
a793 11

/*****************************************************************************
 **
 ** xcb_record_enable_context_cookie_t xcb_record_enable_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_enable_context_cookie_t
 **
 *****************************************************************************/
 
d804 1
a804 1
    
d808 1
a808 1
    
d810 1
a810 1
    
d815 1
a815 1
    
a819 11

/*****************************************************************************
 **
 ** xcb_record_enable_context_cookie_t xcb_record_enable_context_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_record_enable_context_cookie_t
 **
 *****************************************************************************/
 
d830 1
a830 1
    
d834 1
a834 1
    
d836 1
a836 1
    
d841 1
a841 1
    
a845 10

/*****************************************************************************
 **
 ** uint8_t * xcb_record_enable_context_data
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a851 10

/*****************************************************************************
 **
 ** int xcb_record_enable_context_data_length
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a857 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_record_enable_context_data_end
 ** 
 ** @@param const xcb_record_enable_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a867 12

/*****************************************************************************
 **
 ** xcb_record_enable_context_reply_t * xcb_record_enable_context_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_record_enable_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_record_enable_context_reply_t *
 **
 *****************************************************************************/
 
a875 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_disable_context_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d886 1
a886 1
    
d890 1
a890 1
    
d892 1
a892 1
    
d897 1
a897 1
    
a901 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_disable_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d912 1
a912 1
    
d916 1
a916 1
    
d918 1
a918 1
    
d923 1
a923 1
    
a927 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_free_context_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d938 1
a938 1
    
d942 1
a942 1
    
d944 1
a944 1
    
d949 1
a949 1
    
a953 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_record_free_context
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_record_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d964 1
a964 1
    
d968 1
a968 1
    
d970 1
a970 1
    
d975 1
a975 1
    
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d294 1
a294 1
    unsigned int xcb_align_to;
d299 2
d520 1
a520 1
    unsigned int xcb_align_to;
d525 2
d685 1
a685 1
    unsigned int xcb_align_to;
d690 2
d850 1
a850 1
    unsigned int xcb_align_to;
d855 2
d975 1
a975 1
    unsigned int xcb_align_to;
d982 2
d1141 1
a1141 1
    unsigned int xcb_align_to;
d1146 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d16 2
d286 29
d381 3
a383 1
    xcb_generic_iterator_t child = xcb_record_range_end(xcb_record_client_info_ranges_iterator(R));
a385 1
    i->index = child.index;
d445 1
d485 1
d510 41
d597 1
d602 1
d607 1
d658 1
d663 1
d668 1
d673 41
d760 1
d765 1
d770 1
d821 1
d826 1
d831 1
d836 29
d902 1
d907 1
d949 1
d954 1
d959 34
d1025 1
d1062 1
d1123 29
d1184 1
d1221 1
d1330 1
d1367 1
d1404 1
d1441 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
