head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.45;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from shape.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Shape_API XCB Shape API
 * @@brief Shape XCB Protocol Implementation.
 * @@{
 **/

#ifndef __SHAPE_H
#define __SHAPE_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_SHAPE_MAJOR_VERSION 1
#define XCB_SHAPE_MINOR_VERSION 1

extern xcb_extension_t xcb_shape_id;

typedef uint8_t xcb_shape_op_t;

/**
 * @@brief xcb_shape_op_iterator_t
 **/
typedef struct xcb_shape_op_iterator_t {
    xcb_shape_op_t *data;
    int             rem;
    int             index;
} xcb_shape_op_iterator_t;

typedef uint8_t xcb_shape_kind_t;

/**
 * @@brief xcb_shape_kind_iterator_t
 **/
typedef struct xcb_shape_kind_iterator_t {
    xcb_shape_kind_t *data;
    int               rem;
    int               index;
} xcb_shape_kind_iterator_t;

typedef enum xcb_shape_so_t {
    XCB_SHAPE_SO_SET = 0,
    XCB_SHAPE_SO_UNION = 1,
    XCB_SHAPE_SO_INTERSECT = 2,
    XCB_SHAPE_SO_SUBTRACT = 3,
    XCB_SHAPE_SO_INVERT = 4
} xcb_shape_so_t;

typedef enum xcb_shape_sk_t {
    XCB_SHAPE_SK_BOUNDING = 0,
    XCB_SHAPE_SK_CLIP = 1,
    XCB_SHAPE_SK_INPUT = 2
} xcb_shape_sk_t;

/** Opcode for xcb_shape_notify. */
#define XCB_SHAPE_NOTIFY 0

/**
 * @@brief xcb_shape_notify_event_t
 **/
typedef struct xcb_shape_notify_event_t {
    uint8_t          response_type;
    xcb_shape_kind_t shape_kind;
    uint16_t         sequence;
    xcb_window_t     affected_window;
    int16_t          extents_x;
    int16_t          extents_y;
    uint16_t         extents_width;
    uint16_t         extents_height;
    xcb_timestamp_t  server_time;
    uint8_t          shaped;
    uint8_t          pad0[11];
} xcb_shape_notify_event_t;

/**
 * @@brief xcb_shape_query_version_cookie_t
 **/
typedef struct xcb_shape_query_version_cookie_t {
    unsigned int sequence;
} xcb_shape_query_version_cookie_t;

/** Opcode for xcb_shape_query_version. */
#define XCB_SHAPE_QUERY_VERSION 0

/**
 * @@brief xcb_shape_query_version_request_t
 **/
typedef struct xcb_shape_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_shape_query_version_request_t;

/**
 * @@brief xcb_shape_query_version_reply_t
 **/
typedef struct xcb_shape_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t major_version;
    uint16_t minor_version;
} xcb_shape_query_version_reply_t;

/** Opcode for xcb_shape_rectangles. */
#define XCB_SHAPE_RECTANGLES 1

/**
 * @@brief xcb_shape_rectangles_request_t
 **/
typedef struct xcb_shape_rectangles_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_shape_op_t   operation;
    xcb_shape_kind_t destination_kind;
    uint8_t          ordering;
    uint8_t          pad0;
    xcb_window_t     destination_window;
    int16_t          x_offset;
    int16_t          y_offset;
} xcb_shape_rectangles_request_t;

/** Opcode for xcb_shape_mask. */
#define XCB_SHAPE_MASK 2

/**
 * @@brief xcb_shape_mask_request_t
 **/
typedef struct xcb_shape_mask_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_shape_op_t   operation;
    xcb_shape_kind_t destination_kind;
    uint8_t          pad0[2];
    xcb_window_t     destination_window;
    int16_t          x_offset;
    int16_t          y_offset;
    xcb_pixmap_t     source_bitmap;
} xcb_shape_mask_request_t;

/** Opcode for xcb_shape_combine. */
#define XCB_SHAPE_COMBINE 3

/**
 * @@brief xcb_shape_combine_request_t
 **/
typedef struct xcb_shape_combine_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_shape_op_t   operation;
    xcb_shape_kind_t destination_kind;
    xcb_shape_kind_t source_kind;
    uint8_t          pad0;
    xcb_window_t     destination_window;
    int16_t          x_offset;
    int16_t          y_offset;
    xcb_window_t     source_window;
} xcb_shape_combine_request_t;

/** Opcode for xcb_shape_offset. */
#define XCB_SHAPE_OFFSET 4

/**
 * @@brief xcb_shape_offset_request_t
 **/
typedef struct xcb_shape_offset_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_shape_kind_t destination_kind;
    uint8_t          pad0[3];
    xcb_window_t     destination_window;
    int16_t          x_offset;
    int16_t          y_offset;
} xcb_shape_offset_request_t;

/**
 * @@brief xcb_shape_query_extents_cookie_t
 **/
typedef struct xcb_shape_query_extents_cookie_t {
    unsigned int sequence;
} xcb_shape_query_extents_cookie_t;

/** Opcode for xcb_shape_query_extents. */
#define XCB_SHAPE_QUERY_EXTENTS 5

/**
 * @@brief xcb_shape_query_extents_request_t
 **/
typedef struct xcb_shape_query_extents_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t destination_window;
} xcb_shape_query_extents_request_t;

/**
 * @@brief xcb_shape_query_extents_reply_t
 **/
typedef struct xcb_shape_query_extents_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  bounding_shaped;
    uint8_t  clip_shaped;
    uint8_t  pad1[2];
    int16_t  bounding_shape_extents_x;
    int16_t  bounding_shape_extents_y;
    uint16_t bounding_shape_extents_width;
    uint16_t bounding_shape_extents_height;
    int16_t  clip_shape_extents_x;
    int16_t  clip_shape_extents_y;
    uint16_t clip_shape_extents_width;
    uint16_t clip_shape_extents_height;
} xcb_shape_query_extents_reply_t;

/** Opcode for xcb_shape_select_input. */
#define XCB_SHAPE_SELECT_INPUT 6

/**
 * @@brief xcb_shape_select_input_request_t
 **/
typedef struct xcb_shape_select_input_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t destination_window;
    uint8_t      enable;
    uint8_t      pad0[3];
} xcb_shape_select_input_request_t;

/**
 * @@brief xcb_shape_input_selected_cookie_t
 **/
typedef struct xcb_shape_input_selected_cookie_t {
    unsigned int sequence;
} xcb_shape_input_selected_cookie_t;

/** Opcode for xcb_shape_input_selected. */
#define XCB_SHAPE_INPUT_SELECTED 7

/**
 * @@brief xcb_shape_input_selected_request_t
 **/
typedef struct xcb_shape_input_selected_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t destination_window;
} xcb_shape_input_selected_request_t;

/**
 * @@brief xcb_shape_input_selected_reply_t
 **/
typedef struct xcb_shape_input_selected_reply_t {
    uint8_t  response_type;
    uint8_t  enabled;
    uint16_t sequence;
    uint32_t length;
} xcb_shape_input_selected_reply_t;

/**
 * @@brief xcb_shape_get_rectangles_cookie_t
 **/
typedef struct xcb_shape_get_rectangles_cookie_t {
    unsigned int sequence;
} xcb_shape_get_rectangles_cookie_t;

/** Opcode for xcb_shape_get_rectangles. */
#define XCB_SHAPE_GET_RECTANGLES 8

/**
 * @@brief xcb_shape_get_rectangles_request_t
 **/
typedef struct xcb_shape_get_rectangles_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_window_t     window;
    xcb_shape_kind_t source_kind;
    uint8_t          pad0[3];
} xcb_shape_get_rectangles_request_t;

/**
 * @@brief xcb_shape_get_rectangles_reply_t
 **/
typedef struct xcb_shape_get_rectangles_reply_t {
    uint8_t  response_type;
    uint8_t  ordering;
    uint16_t sequence;
    uint32_t length;
    uint32_t rectangles_len;
    uint8_t  pad0[20];
} xcb_shape_get_rectangles_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_shape_op_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_shape_op_t)
 */
void
xcb_shape_op_next (xcb_shape_op_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_shape_op_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_shape_op_end (xcb_shape_op_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_shape_kind_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_shape_kind_t)
 */
void
xcb_shape_kind_next (xcb_shape_kind_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_shape_kind_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_shape_kind_end (xcb_shape_kind_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shape_query_version_cookie_t
xcb_shape_query_version (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shape_query_version_cookie_t
xcb_shape_query_version_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shape_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shape_query_version_reply_t *
xcb_shape_query_version_reply (xcb_connection_t                  *c,
                               xcb_shape_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_shape_rectangles_sizeof (const void  *_buffer,
                             uint32_t     rectangles_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shape_rectangles_checked (xcb_connection_t      *c,
                              xcb_shape_op_t         operation,
                              xcb_shape_kind_t       destination_kind,
                              uint8_t                ordering,
                              xcb_window_t           destination_window,
                              int16_t                x_offset,
                              int16_t                y_offset,
                              uint32_t               rectangles_len,
                              const xcb_rectangle_t *rectangles);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shape_rectangles (xcb_connection_t      *c,
                      xcb_shape_op_t         operation,
                      xcb_shape_kind_t       destination_kind,
                      uint8_t                ordering,
                      xcb_window_t           destination_window,
                      int16_t                x_offset,
                      int16_t                y_offset,
                      uint32_t               rectangles_len,
                      const xcb_rectangle_t *rectangles);

xcb_rectangle_t *
xcb_shape_rectangles_rectangles (const xcb_shape_rectangles_request_t *R);

int
xcb_shape_rectangles_rectangles_length (const xcb_shape_rectangles_request_t *R);

xcb_rectangle_iterator_t
xcb_shape_rectangles_rectangles_iterator (const xcb_shape_rectangles_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shape_mask_checked (xcb_connection_t *c,
                        xcb_shape_op_t    operation,
                        xcb_shape_kind_t  destination_kind,
                        xcb_window_t      destination_window,
                        int16_t           x_offset,
                        int16_t           y_offset,
                        xcb_pixmap_t      source_bitmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shape_mask (xcb_connection_t *c,
                xcb_shape_op_t    operation,
                xcb_shape_kind_t  destination_kind,
                xcb_window_t      destination_window,
                int16_t           x_offset,
                int16_t           y_offset,
                xcb_pixmap_t      source_bitmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shape_combine_checked (xcb_connection_t *c,
                           xcb_shape_op_t    operation,
                           xcb_shape_kind_t  destination_kind,
                           xcb_shape_kind_t  source_kind,
                           xcb_window_t      destination_window,
                           int16_t           x_offset,
                           int16_t           y_offset,
                           xcb_window_t      source_window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shape_combine (xcb_connection_t *c,
                   xcb_shape_op_t    operation,
                   xcb_shape_kind_t  destination_kind,
                   xcb_shape_kind_t  source_kind,
                   xcb_window_t      destination_window,
                   int16_t           x_offset,
                   int16_t           y_offset,
                   xcb_window_t      source_window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shape_offset_checked (xcb_connection_t *c,
                          xcb_shape_kind_t  destination_kind,
                          xcb_window_t      destination_window,
                          int16_t           x_offset,
                          int16_t           y_offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shape_offset (xcb_connection_t *c,
                  xcb_shape_kind_t  destination_kind,
                  xcb_window_t      destination_window,
                  int16_t           x_offset,
                  int16_t           y_offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shape_query_extents_cookie_t
xcb_shape_query_extents (xcb_connection_t *c,
                         xcb_window_t      destination_window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shape_query_extents_cookie_t
xcb_shape_query_extents_unchecked (xcb_connection_t *c,
                                   xcb_window_t      destination_window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shape_query_extents_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shape_query_extents_reply_t *
xcb_shape_query_extents_reply (xcb_connection_t                  *c,
                               xcb_shape_query_extents_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shape_select_input_checked (xcb_connection_t *c,
                                xcb_window_t      destination_window,
                                uint8_t           enable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shape_select_input (xcb_connection_t *c,
                        xcb_window_t      destination_window,
                        uint8_t           enable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shape_input_selected_cookie_t
xcb_shape_input_selected (xcb_connection_t *c,
                          xcb_window_t      destination_window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shape_input_selected_cookie_t
xcb_shape_input_selected_unchecked (xcb_connection_t *c,
                                    xcb_window_t      destination_window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shape_input_selected_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shape_input_selected_reply_t *
xcb_shape_input_selected_reply (xcb_connection_t                   *c,
                                xcb_shape_input_selected_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_shape_get_rectangles_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shape_get_rectangles_cookie_t
xcb_shape_get_rectangles (xcb_connection_t *c,
                          xcb_window_t      window,
                          xcb_shape_kind_t  source_kind);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shape_get_rectangles_cookie_t
xcb_shape_get_rectangles_unchecked (xcb_connection_t *c,
                                    xcb_window_t      window,
                                    xcb_shape_kind_t  source_kind);

xcb_rectangle_t *
xcb_shape_get_rectangles_rectangles (const xcb_shape_get_rectangles_reply_t *R);

int
xcb_shape_get_rectangles_rectangles_length (const xcb_shape_get_rectangles_reply_t *R);

xcb_rectangle_iterator_t
xcb_shape_get_rectangles_rectangles_iterator (const xcb_shape_get_rectangles_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shape_get_rectangles_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shape_get_rectangles_reply_t *
xcb_shape_get_rectangles_reply (xcb_connection_t                   *c,
                                xcb_shape_get_rectangles_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_shape_op_t *data; /**<  */
    int             rem; /**<  */
    int             index; /**<  */
d44 3
a46 3
    xcb_shape_kind_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d70 11
a80 11
    uint8_t          response_type; /**<  */
    xcb_shape_kind_t shape_kind; /**<  */
    uint16_t         sequence; /**<  */
    xcb_window_t     affected_window; /**<  */
    int16_t          extents_x; /**<  */
    int16_t          extents_y; /**<  */
    uint16_t         extents_width; /**<  */
    uint16_t         extents_height; /**<  */
    xcb_timestamp_t  server_time; /**<  */
    uint8_t          shaped; /**<  */
    uint8_t          pad0[11]; /**<  */
d87 1
a87 1
    unsigned int sequence; /**<  */
d97 3
a99 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d106 6
a111 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
d121 10
a130 10
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_shape_op_t   operation; /**<  */
    xcb_shape_kind_t destination_kind; /**<  */
    uint8_t          ordering; /**<  */
    uint8_t          pad0; /**<  */
    xcb_window_t     destination_window; /**<  */
    int16_t          x_offset; /**<  */
    int16_t          y_offset; /**<  */
d140 10
a149 10
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_shape_op_t   operation; /**<  */
    xcb_shape_kind_t destination_kind; /**<  */
    uint8_t          pad0[2]; /**<  */
    xcb_window_t     destination_window; /**<  */
    int16_t          x_offset; /**<  */
    int16_t          y_offset; /**<  */
    xcb_pixmap_t     source_bitmap; /**<  */
d159 11
a169 11
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_shape_op_t   operation; /**<  */
    xcb_shape_kind_t destination_kind; /**<  */
    xcb_shape_kind_t source_kind; /**<  */
    uint8_t          pad0; /**<  */
    xcb_window_t     destination_window; /**<  */
    int16_t          x_offset; /**<  */
    int16_t          y_offset; /**<  */
    xcb_window_t     source_window; /**<  */
d179 8
a186 8
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_shape_kind_t destination_kind; /**<  */
    uint8_t          pad0[3]; /**<  */
    xcb_window_t     destination_window; /**<  */
    int16_t          x_offset; /**<  */
    int16_t          y_offset; /**<  */
d193 1
a193 1
    unsigned int sequence; /**<  */
d203 4
a206 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t destination_window; /**<  */
d213 15
a227 15
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  bounding_shaped; /**<  */
    uint8_t  clip_shaped; /**<  */
    uint8_t  pad1[2]; /**<  */
    int16_t  bounding_shape_extents_x; /**<  */
    int16_t  bounding_shape_extents_y; /**<  */
    uint16_t bounding_shape_extents_width; /**<  */
    uint16_t bounding_shape_extents_height; /**<  */
    int16_t  clip_shape_extents_x; /**<  */
    int16_t  clip_shape_extents_y; /**<  */
    uint16_t clip_shape_extents_width; /**<  */
    uint16_t clip_shape_extents_height; /**<  */
d237 6
a242 6
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t destination_window; /**<  */
    uint8_t      enable; /**<  */
    uint8_t      pad0[3]; /**<  */
d249 1
a249 1
    unsigned int sequence; /**<  */
d259 4
a262 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t destination_window; /**<  */
d269 4
a272 4
    uint8_t  response_type; /**<  */
    uint8_t  enabled; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
d279 1
a279 1
    unsigned int sequence; /**<  */
d289 6
a294 6
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_window_t     window; /**<  */
    xcb_shape_kind_t source_kind; /**<  */
    uint8_t          pad0[3]; /**<  */
d301 6
a306 6
    uint8_t  response_type; /**<  */
    uint8_t  ordering; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t rectangles_len; /**<  */
    uint8_t  pad0[20]; /**<  */
d318 1
a318 1
xcb_shape_op_next (xcb_shape_op_iterator_t *i  /**< */);
d330 1
a330 1
xcb_shape_op_end (xcb_shape_op_iterator_t i  /**< */);
d341 1
a341 1
xcb_shape_kind_next (xcb_shape_kind_iterator_t *i  /**< */);
d353 1
a353 1
xcb_shape_kind_end (xcb_shape_kind_iterator_t i  /**< */);
d364 1
a364 1
xcb_shape_query_version (xcb_connection_t *c  /**< */);
d378 1
a378 1
xcb_shape_query_version_unchecked (xcb_connection_t *c  /**< */);
d395 1
a395 1
xcb_shape_query_version_reply (xcb_connection_t                  *c  /**< */,
d397 1
a397 1
                               xcb_generic_error_t              **e  /**< */);
d400 2
a401 2
xcb_shape_rectangles_sizeof (const void  *_buffer  /**< */,
                             uint32_t     rectangles_len  /**< */);
d415 9
a423 9
xcb_shape_rectangles_checked (xcb_connection_t      *c  /**< */,
                              xcb_shape_op_t         operation  /**< */,
                              xcb_shape_kind_t       destination_kind  /**< */,
                              uint8_t                ordering  /**< */,
                              xcb_window_t           destination_window  /**< */,
                              int16_t                x_offset  /**< */,
                              int16_t                y_offset  /**< */,
                              uint32_t               rectangles_len  /**< */,
                              const xcb_rectangle_t *rectangles  /**< */);
d434 18
a451 9
xcb_shape_rectangles (xcb_connection_t      *c  /**< */,
                      xcb_shape_op_t         operation  /**< */,
                      xcb_shape_kind_t       destination_kind  /**< */,
                      uint8_t                ordering  /**< */,
                      xcb_window_t           destination_window  /**< */,
                      int16_t                x_offset  /**< */,
                      int16_t                y_offset  /**< */,
                      uint32_t               rectangles_len  /**< */,
                      const xcb_rectangle_t *rectangles  /**< */);
d465 7
a471 7
xcb_shape_mask_checked (xcb_connection_t *c  /**< */,
                        xcb_shape_op_t    operation  /**< */,
                        xcb_shape_kind_t  destination_kind  /**< */,
                        xcb_window_t      destination_window  /**< */,
                        int16_t           x_offset  /**< */,
                        int16_t           y_offset  /**< */,
                        xcb_pixmap_t      source_bitmap  /**< */);
d482 7
a488 7
xcb_shape_mask (xcb_connection_t *c  /**< */,
                xcb_shape_op_t    operation  /**< */,
                xcb_shape_kind_t  destination_kind  /**< */,
                xcb_window_t      destination_window  /**< */,
                int16_t           x_offset  /**< */,
                int16_t           y_offset  /**< */,
                xcb_pixmap_t      source_bitmap  /**< */);
d502 8
a509 8
xcb_shape_combine_checked (xcb_connection_t *c  /**< */,
                           xcb_shape_op_t    operation  /**< */,
                           xcb_shape_kind_t  destination_kind  /**< */,
                           xcb_shape_kind_t  source_kind  /**< */,
                           xcb_window_t      destination_window  /**< */,
                           int16_t           x_offset  /**< */,
                           int16_t           y_offset  /**< */,
                           xcb_window_t      source_window  /**< */);
d520 8
a527 8
xcb_shape_combine (xcb_connection_t *c  /**< */,
                   xcb_shape_op_t    operation  /**< */,
                   xcb_shape_kind_t  destination_kind  /**< */,
                   xcb_shape_kind_t  source_kind  /**< */,
                   xcb_window_t      destination_window  /**< */,
                   int16_t           x_offset  /**< */,
                   int16_t           y_offset  /**< */,
                   xcb_window_t      source_window  /**< */);
d541 5
a545 5
xcb_shape_offset_checked (xcb_connection_t *c  /**< */,
                          xcb_shape_kind_t  destination_kind  /**< */,
                          xcb_window_t      destination_window  /**< */,
                          int16_t           x_offset  /**< */,
                          int16_t           y_offset  /**< */);
d556 5
a560 5
xcb_shape_offset (xcb_connection_t *c  /**< */,
                  xcb_shape_kind_t  destination_kind  /**< */,
                  xcb_window_t      destination_window  /**< */,
                  int16_t           x_offset  /**< */,
                  int16_t           y_offset  /**< */);
d571 2
a572 2
xcb_shape_query_extents (xcb_connection_t *c  /**< */,
                         xcb_window_t      destination_window  /**< */);
d586 2
a587 2
xcb_shape_query_extents_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      destination_window  /**< */);
d604 1
a604 1
xcb_shape_query_extents_reply (xcb_connection_t                  *c  /**< */,
d606 1
a606 1
                               xcb_generic_error_t              **e  /**< */);
d620 3
a622 3
xcb_shape_select_input_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      destination_window  /**< */,
                                uint8_t           enable  /**< */);
d633 3
a635 3
xcb_shape_select_input (xcb_connection_t *c  /**< */,
                        xcb_window_t      destination_window  /**< */,
                        uint8_t           enable  /**< */);
d646 2
a647 2
xcb_shape_input_selected (xcb_connection_t *c  /**< */,
                          xcb_window_t      destination_window  /**< */);
d661 2
a662 2
xcb_shape_input_selected_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      destination_window  /**< */);
d679 1
a679 1
xcb_shape_input_selected_reply (xcb_connection_t                   *c  /**< */,
d681 1
a681 1
                                xcb_generic_error_t               **e  /**< */);
d684 1
a684 1
xcb_shape_get_rectangles_sizeof (const void  *_buffer  /**< */);
d695 3
a697 3
xcb_shape_get_rectangles (xcb_connection_t *c  /**< */,
                          xcb_window_t      window  /**< */,
                          xcb_shape_kind_t  source_kind  /**< */);
d711 3
a713 3
xcb_shape_get_rectangles_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      window  /**< */,
                                    xcb_shape_kind_t  source_kind  /**< */);
d716 1
a716 1
xcb_shape_get_rectangles_rectangles (const xcb_shape_get_rectangles_reply_t *R  /**< */);
d719 1
a719 1
xcb_shape_get_rectangles_rectangles_length (const xcb_shape_get_rectangles_reply_t *R  /**< */);
d722 1
a722 1
xcb_shape_get_rectangles_rectangles_iterator (const xcb_shape_get_rectangles_reply_t *R  /**< */);
d739 1
a739 1
xcb_shape_get_rectangles_reply (xcb_connection_t                   *c  /**< */,
d741 1
a741 1
                                xcb_generic_error_t               **e  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a316 10

/*****************************************************************************
 **
 ** void xcb_shape_op_next
 ** 
 ** @@param xcb_shape_op_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a328 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_shape_op_end
 ** 
 ** @@param xcb_shape_op_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a339 10

/*****************************************************************************
 **
 ** void xcb_shape_kind_next
 ** 
 ** @@param xcb_shape_kind_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a351 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_shape_kind_end
 ** 
 ** @@param xcb_shape_kind_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d361 1
a361 1
 * 
a362 10

/*****************************************************************************
 **
 ** xcb_shape_query_version_cookie_t xcb_shape_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shape_query_version_cookie_t
 **
 *****************************************************************************/
 
d372 1
a372 1
 * 
a376 10

/*****************************************************************************
 **
 ** xcb_shape_query_version_cookie_t xcb_shape_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shape_query_version_cookie_t
 **
 *****************************************************************************/
 
d387 1
a387 1
 * 
a393 12

/*****************************************************************************
 **
 ** xcb_shape_query_version_reply_t * xcb_shape_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_shape_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_shape_query_version_reply_t *
 **
 *****************************************************************************/
 
d409 1
a409 1
 * 
a413 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_shape_op_t         operation
 ** @@param xcb_shape_kind_t       destination_kind
 ** @@param uint8_t                ordering
 ** @@param xcb_window_t           destination_window
 ** @@param int16_t                x_offset
 ** @@param int16_t                y_offset
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d431 1
a431 1
 * 
a432 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_shape_op_t         operation
 ** @@param xcb_shape_kind_t       destination_kind
 ** @@param uint8_t                ordering
 ** @@param xcb_window_t           destination_window
 ** @@param int16_t                x_offset
 ** @@param int16_t                y_offset
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d450 1
a450 1
 * 
a454 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_mask_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_pixmap_t      source_bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d470 1
a470 1
 * 
a471 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_mask
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_pixmap_t      source_bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d487 1
a487 1
 * 
a491 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_combine_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_shape_kind_t  source_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_window_t      source_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d508 1
a508 1
 * 
a509 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_combine
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_shape_kind_t  source_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_window_t      source_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d526 1
a526 1
 * 
a530 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_offset_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d544 1
a544 1
 * 
a545 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_offset
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d559 1
a559 1
 * 
a560 11

/*****************************************************************************
 **
 ** xcb_shape_query_extents_cookie_t xcb_shape_query_extents
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_query_extents_cookie_t
 **
 *****************************************************************************/
 
d571 1
a571 1
 * 
a575 11

/*****************************************************************************
 **
 ** xcb_shape_query_extents_cookie_t xcb_shape_query_extents_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_query_extents_cookie_t
 **
 *****************************************************************************/
 
d587 1
a587 1
 * 
a593 12

/*****************************************************************************
 **
 ** xcb_shape_query_extents_reply_t * xcb_shape_query_extents_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_shape_query_extents_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_shape_query_extents_reply_t *
 **
 *****************************************************************************/
 
d605 1
a605 1
 * 
a609 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_select_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@param uint8_t           enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d621 1
a621 1
 * 
a622 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@param uint8_t           enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d634 1
a634 1
 * 
a635 11

/*****************************************************************************
 **
 ** xcb_shape_input_selected_cookie_t xcb_shape_input_selected
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_input_selected_cookie_t
 **
 *****************************************************************************/
 
d646 1
a646 1
 * 
a650 11

/*****************************************************************************
 **
 ** xcb_shape_input_selected_cookie_t xcb_shape_input_selected_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_input_selected_cookie_t
 **
 *****************************************************************************/
 
d662 1
a662 1
 * 
a668 12

/*****************************************************************************
 **
 ** xcb_shape_input_selected_reply_t * xcb_shape_input_selected_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_shape_input_selected_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_shape_input_selected_reply_t *
 **
 *****************************************************************************/
 
d683 1
a683 1
 * 
a684 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_cookie_t xcb_shape_get_rectangles
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_shape_kind_t  source_kind
 ** @@returns xcb_shape_get_rectangles_cookie_t
 **
 *****************************************************************************/
 
d696 1
a696 1
 * 
a700 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_cookie_t xcb_shape_get_rectangles_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_shape_kind_t  source_kind
 ** @@returns xcb_shape_get_rectangles_cookie_t
 **
 *****************************************************************************/
 
a705 10

/*****************************************************************************
 **
 ** xcb_rectangle_t * xcb_shape_get_rectangles_rectangles
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns xcb_rectangle_t *
 **
 *****************************************************************************/
 
a708 10

/*****************************************************************************
 **
 ** int xcb_shape_get_rectangles_rectangles_length
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a711 10

/*****************************************************************************
 **
 ** xcb_rectangle_iterator_t xcb_shape_get_rectangles_rectangles_iterator
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns xcb_rectangle_iterator_t
 **
 *****************************************************************************/
 
d722 1
a722 1
 * 
a728 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_reply_t * xcb_shape_get_rectangles_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_shape_get_rectangles_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_shape_get_rectangles_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d50 5
a54 5
    XCB_SHAPE_SO_SET,
    XCB_SHAPE_SO_UNION,
    XCB_SHAPE_SO_INTERSECT,
    XCB_SHAPE_SO_SUBTRACT,
    XCB_SHAPE_SO_INVERT
d58 3
a60 3
    XCB_SHAPE_SK_BOUNDING,
    XCB_SHAPE_SK_CLIP,
    XCB_SHAPE_SK_INPUT
@


1.2
log
@regen for xcb-proto 1.6
@
text
@d396 1
a396 1
 * Delivers a request to the X server
d417 1
a417 1
 * Delivers a request to the X server
d471 4
d476 1
a476 1
 * Delivers a request to the X server
d516 1
a516 1
 * Delivers a request to the X server
d553 1
a553 1
 * Delivers a request to the X server
d589 1
a589 1
 * Delivers a request to the X server
d622 1
a622 1
 * Delivers a request to the X server
d660 1
a660 1
 * Delivers a request to the X server
d695 1
a695 1
 * Delivers a request to the X server
d727 1
a727 1
 * Delivers a request to the X server
d756 1
a756 1
 * Delivers a request to the X server
d779 1
a779 1
 * Delivers a request to the X server
d836 1
a836 1
 * Delivers a request to the X server
d864 1
a864 1
 * Delivers a request to the X server
d889 1
a889 1
 * Delivers a request to the X server
d912 1
a912 1
 * Delivers a request to the X server
d968 3
d972 1
a972 1
 * Delivers a request to the X server
d997 1
a997 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@d306 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
