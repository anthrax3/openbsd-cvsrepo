head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	mKDGsTNpiR2zRHYQ;

1.6
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	01TEvO4uNHLqFv7N;

1.5
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.51;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xf86dri.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xf86dri.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

xcb_extension_t xcb_xf86dri_id = { "XFree86-DRI", 0 };

void
xcb_xf86dri_drm_clip_rect_next (xcb_xf86dri_drm_clip_rect_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xf86dri_drm_clip_rect_t);
}

xcb_generic_iterator_t
xcb_xf86dri_drm_clip_rect_end (xcb_xf86dri_drm_clip_rect_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_xf86dri_query_version_cookie_t
xcb_xf86dri_query_version (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_query_version_cookie_t xcb_ret;
    xcb_xf86dri_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_query_version_cookie_t
xcb_xf86dri_query_version_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_query_version_cookie_t xcb_ret;
    xcb_xf86dri_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_query_version_reply_t *
xcb_xf86dri_query_version_reply (xcb_connection_t                    *c,
                                 xcb_xf86dri_query_version_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_xf86dri_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xf86dri_query_direct_rendering_capable_cookie_t
xcb_xf86dri_query_direct_rendering_capable (xcb_connection_t *c,
                                            uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_ret;
    xcb_xf86dri_query_direct_rendering_capable_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_query_direct_rendering_capable_cookie_t
xcb_xf86dri_query_direct_rendering_capable_unchecked (xcb_connection_t *c,
                                                      uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_ret;
    xcb_xf86dri_query_direct_rendering_capable_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_query_direct_rendering_capable_reply_t *
xcb_xf86dri_query_direct_rendering_capable_reply (xcb_connection_t                                     *c,
                                                  xcb_xf86dri_query_direct_rendering_capable_cookie_t   cookie  /**< */,
                                                  xcb_generic_error_t                                 **e)
{
    return (xcb_xf86dri_query_direct_rendering_capable_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xf86dri_open_connection_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xf86dri_open_connection_reply_t *_aux = (xcb_xf86dri_open_connection_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xf86dri_open_connection_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* bus_id */
    xcb_block_len += _aux->bus_id_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xf86dri_open_connection_cookie_t
xcb_xf86dri_open_connection (xcb_connection_t *c,
                             uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_OPEN_CONNECTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_open_connection_cookie_t xcb_ret;
    xcb_xf86dri_open_connection_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_open_connection_cookie_t
xcb_xf86dri_open_connection_unchecked (xcb_connection_t *c,
                                       uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_OPEN_CONNECTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_open_connection_cookie_t xcb_ret;
    xcb_xf86dri_open_connection_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_xf86dri_open_connection_bus_id (const xcb_xf86dri_open_connection_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xf86dri_open_connection_bus_id_length (const xcb_xf86dri_open_connection_reply_t *R)
{
    return R->bus_id_len;
}

xcb_generic_iterator_t
xcb_xf86dri_open_connection_bus_id_end (const xcb_xf86dri_open_connection_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->bus_id_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xf86dri_open_connection_reply_t *
xcb_xf86dri_open_connection_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_open_connection_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xf86dri_open_connection_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xf86dri_close_connection_checked (xcb_connection_t *c,
                                      uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CLOSE_CONNECTION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_close_connection_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xf86dri_close_connection (xcb_connection_t *c,
                              uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CLOSE_CONNECTION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_close_connection_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xf86dri_get_client_driver_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xf86dri_get_client_driver_name_reply_t *_aux = (xcb_xf86dri_get_client_driver_name_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xf86dri_get_client_driver_name_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* client_driver_name */
    xcb_block_len += _aux->client_driver_name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xf86dri_get_client_driver_name_cookie_t
xcb_xf86dri_get_client_driver_name (xcb_connection_t *c,
                                    uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_CLIENT_DRIVER_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_client_driver_name_cookie_t xcb_ret;
    xcb_xf86dri_get_client_driver_name_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_get_client_driver_name_cookie_t
xcb_xf86dri_get_client_driver_name_unchecked (xcb_connection_t *c,
                                              uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_CLIENT_DRIVER_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_client_driver_name_cookie_t xcb_ret;
    xcb_xf86dri_get_client_driver_name_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_xf86dri_get_client_driver_name_client_driver_name (const xcb_xf86dri_get_client_driver_name_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xf86dri_get_client_driver_name_client_driver_name_length (const xcb_xf86dri_get_client_driver_name_reply_t *R)
{
    return R->client_driver_name_len;
}

xcb_generic_iterator_t
xcb_xf86dri_get_client_driver_name_client_driver_name_end (const xcb_xf86dri_get_client_driver_name_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->client_driver_name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xf86dri_get_client_driver_name_reply_t *
xcb_xf86dri_get_client_driver_name_reply (xcb_connection_t                             *c,
                                          xcb_xf86dri_get_client_driver_name_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e)
{
    return (xcb_xf86dri_get_client_driver_name_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xf86dri_create_context_cookie_t
xcb_xf86dri_create_context (xcb_connection_t *c,
                            uint32_t          screen,
                            uint32_t          visual,
                            uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CREATE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_create_context_cookie_t xcb_ret;
    xcb_xf86dri_create_context_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.visual = visual;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_create_context_cookie_t
xcb_xf86dri_create_context_unchecked (xcb_connection_t *c,
                                      uint32_t          screen,
                                      uint32_t          visual,
                                      uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CREATE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_create_context_cookie_t xcb_ret;
    xcb_xf86dri_create_context_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.visual = visual;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_create_context_reply_t *
xcb_xf86dri_create_context_reply (xcb_connection_t                     *c,
                                  xcb_xf86dri_create_context_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_xf86dri_create_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xf86dri_destroy_context_checked (xcb_connection_t *c,
                                     uint32_t          screen,
                                     uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_destroy_context_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xf86dri_destroy_context (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_destroy_context_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_create_drawable_cookie_t
xcb_xf86dri_create_drawable (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CREATE_DRAWABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_create_drawable_cookie_t xcb_ret;
    xcb_xf86dri_create_drawable_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_create_drawable_cookie_t
xcb_xf86dri_create_drawable_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_CREATE_DRAWABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_create_drawable_cookie_t xcb_ret;
    xcb_xf86dri_create_drawable_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_create_drawable_reply_t *
xcb_xf86dri_create_drawable_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_create_drawable_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xf86dri_create_drawable_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xf86dri_destroy_drawable_checked (xcb_connection_t *c,
                                      uint32_t          screen,
                                      uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_DESTROY_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_destroy_drawable_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xf86dri_destroy_drawable (xcb_connection_t *c,
                              uint32_t          screen,
                              uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_DESTROY_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xf86dri_destroy_drawable_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xf86dri_get_drawable_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xf86dri_get_drawable_info_reply_t *_aux = (xcb_xf86dri_get_drawable_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xf86dri_get_drawable_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* clip_rects */
    xcb_block_len += _aux->num_clip_rects * sizeof(xcb_xf86dri_drm_clip_rect_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xf86dri_drm_clip_rect_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* back_clip_rects */
    xcb_block_len += _aux->num_back_clip_rects * sizeof(xcb_xf86dri_drm_clip_rect_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xf86dri_drm_clip_rect_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xf86dri_get_drawable_info_cookie_t
xcb_xf86dri_get_drawable_info (xcb_connection_t *c,
                               uint32_t          screen,
                               uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_DRAWABLE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_drawable_info_cookie_t xcb_ret;
    xcb_xf86dri_get_drawable_info_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_get_drawable_info_cookie_t
xcb_xf86dri_get_drawable_info_unchecked (xcb_connection_t *c,
                                         uint32_t          screen,
                                         uint32_t          drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_DRAWABLE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_drawable_info_cookie_t xcb_ret;
    xcb_xf86dri_get_drawable_info_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_drm_clip_rect_t *
xcb_xf86dri_get_drawable_info_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    return (xcb_xf86dri_drm_clip_rect_t *) (R + 1);
}

int
xcb_xf86dri_get_drawable_info_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    return R->num_clip_rects;
}

xcb_xf86dri_drm_clip_rect_iterator_t
xcb_xf86dri_get_drawable_info_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    xcb_xf86dri_drm_clip_rect_iterator_t i;
    i.data = (xcb_xf86dri_drm_clip_rect_t *) (R + 1);
    i.rem = R->num_clip_rects;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xf86dri_drm_clip_rect_t *
xcb_xf86dri_get_drawable_info_back_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_xf86dri_drm_clip_rect_end(xcb_xf86dri_get_drawable_info_clip_rects_iterator(R));
    return (xcb_xf86dri_drm_clip_rect_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xf86dri_drm_clip_rect_t, prev.index) + 0);
}

int
xcb_xf86dri_get_drawable_info_back_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    return R->num_back_clip_rects;
}

xcb_xf86dri_drm_clip_rect_iterator_t
xcb_xf86dri_get_drawable_info_back_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R)
{
    xcb_xf86dri_drm_clip_rect_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xf86dri_drm_clip_rect_end(xcb_xf86dri_get_drawable_info_clip_rects_iterator(R));
    i.data = (xcb_xf86dri_drm_clip_rect_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xf86dri_drm_clip_rect_t, prev.index));
    i.rem = R->num_back_clip_rects;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xf86dri_get_drawable_info_reply_t *
xcb_xf86dri_get_drawable_info_reply (xcb_connection_t                        *c,
                                     xcb_xf86dri_get_drawable_info_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_xf86dri_get_drawable_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xf86dri_get_device_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xf86dri_get_device_info_reply_t *_aux = (xcb_xf86dri_get_device_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xf86dri_get_device_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* device_private */
    xcb_block_len += _aux->device_private_size * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xf86dri_get_device_info_cookie_t
xcb_xf86dri_get_device_info (xcb_connection_t *c,
                             uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_DEVICE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_device_info_cookie_t xcb_ret;
    xcb_xf86dri_get_device_info_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_get_device_info_cookie_t
xcb_xf86dri_get_device_info_unchecked (xcb_connection_t *c,
                                       uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_GET_DEVICE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_get_device_info_cookie_t xcb_ret;
    xcb_xf86dri_get_device_info_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xf86dri_get_device_info_device_private (const xcb_xf86dri_get_device_info_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xf86dri_get_device_info_device_private_length (const xcb_xf86dri_get_device_info_reply_t *R)
{
    return R->device_private_size;
}

xcb_generic_iterator_t
xcb_xf86dri_get_device_info_device_private_end (const xcb_xf86dri_get_device_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->device_private_size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xf86dri_get_device_info_reply_t *
xcb_xf86dri_get_device_info_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_get_device_info_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xf86dri_get_device_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xf86dri_auth_connection_cookie_t
xcb_xf86dri_auth_connection (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          magic)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_AUTH_CONNECTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_auth_connection_cookie_t xcb_ret;
    xcb_xf86dri_auth_connection_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.magic = magic;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_auth_connection_cookie_t
xcb_xf86dri_auth_connection_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          magic)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xf86dri_id,
        .opcode = XCB_XF86DRI_AUTH_CONNECTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xf86dri_auth_connection_cookie_t xcb_ret;
    xcb_xf86dri_auth_connection_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.magic = magic;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xf86dri_auth_connection_reply_t *
xcb_xf86dri_auth_connection_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_auth_connection_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xf86dri_auth_connection_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.6
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d21 1
a21 1
xcb_xf86dri_drm_clip_rect_next (xcb_xf86dri_drm_clip_rect_iterator_t *i  /**< */)
d29 1
a29 1
xcb_xf86dri_drm_clip_rect_end (xcb_xf86dri_drm_clip_rect_iterator_t i  /**< */)
d39 1
a39 1
xcb_xf86dri_query_version (xcb_connection_t *c  /**< */)
d42 4
a45 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_QUERY_VERSION,
        /* isvoid */ 0
d63 1
a63 1
xcb_xf86dri_query_version_unchecked (xcb_connection_t *c  /**< */)
d66 4
a69 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_QUERY_VERSION,
        /* isvoid */ 0
d87 1
a87 1
xcb_xf86dri_query_version_reply (xcb_connection_t                    *c  /**< */,
d89 1
a89 1
                                 xcb_generic_error_t                **e  /**< */)
d95 2
a96 2
xcb_xf86dri_query_direct_rendering_capable (xcb_connection_t *c  /**< */,
                                            uint32_t          screen  /**< */)
d99 4
a102 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE,
        /* isvoid */ 0
d121 2
a122 2
xcb_xf86dri_query_direct_rendering_capable_unchecked (xcb_connection_t *c  /**< */,
                                                      uint32_t          screen  /**< */)
d125 4
a128 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE,
        /* isvoid */ 0
d147 1
a147 1
xcb_xf86dri_query_direct_rendering_capable_reply (xcb_connection_t                                     *c  /**< */,
d149 1
a149 1
                                                  xcb_generic_error_t                                 **e  /**< */)
d155 1
a155 1
xcb_xf86dri_open_connection_sizeof (const void  *_buffer  /**< */)
d186 2
a187 2
xcb_xf86dri_open_connection (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */)
d190 4
a193 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_OPEN_CONNECTION,
        /* isvoid */ 0
d212 2
a213 2
xcb_xf86dri_open_connection_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */)
d216 4
a219 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_OPEN_CONNECTION,
        /* isvoid */ 0
d238 1
a238 1
xcb_xf86dri_open_connection_bus_id (const xcb_xf86dri_open_connection_reply_t *R  /**< */)
d244 1
a244 1
xcb_xf86dri_open_connection_bus_id_length (const xcb_xf86dri_open_connection_reply_t *R  /**< */)
d250 1
a250 1
xcb_xf86dri_open_connection_bus_id_end (const xcb_xf86dri_open_connection_reply_t *R  /**< */)
d260 1
a260 1
xcb_xf86dri_open_connection_reply (xcb_connection_t                      *c  /**< */,
d262 1
a262 1
                                   xcb_generic_error_t                  **e  /**< */)
d268 2
a269 2
xcb_xf86dri_close_connection_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */)
d272 4
a275 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CLOSE_CONNECTION,
        /* isvoid */ 1
d294 2
a295 2
xcb_xf86dri_close_connection (xcb_connection_t *c  /**< */,
                              uint32_t          screen  /**< */)
d298 4
a301 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CLOSE_CONNECTION,
        /* isvoid */ 1
d320 1
a320 1
xcb_xf86dri_get_client_driver_name_sizeof (const void  *_buffer  /**< */)
d351 2
a352 2
xcb_xf86dri_get_client_driver_name (xcb_connection_t *c  /**< */,
                                    uint32_t          screen  /**< */)
d355 4
a358 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_CLIENT_DRIVER_NAME,
        /* isvoid */ 0
d377 2
a378 2
xcb_xf86dri_get_client_driver_name_unchecked (xcb_connection_t *c  /**< */,
                                              uint32_t          screen  /**< */)
d381 4
a384 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_CLIENT_DRIVER_NAME,
        /* isvoid */ 0
d403 1
a403 1
xcb_xf86dri_get_client_driver_name_client_driver_name (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */)
d409 1
a409 1
xcb_xf86dri_get_client_driver_name_client_driver_name_length (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */)
d415 1
a415 1
xcb_xf86dri_get_client_driver_name_client_driver_name_end (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */)
d425 1
a425 1
xcb_xf86dri_get_client_driver_name_reply (xcb_connection_t                             *c  /**< */,
d427 1
a427 1
                                          xcb_generic_error_t                         **e  /**< */)
d433 4
a436 4
xcb_xf86dri_create_context (xcb_connection_t *c  /**< */,
                            uint32_t          screen  /**< */,
                            uint32_t          visual  /**< */,
                            uint32_t          context  /**< */)
d439 4
a442 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CREATE_CONTEXT,
        /* isvoid */ 0
d463 4
a466 4
xcb_xf86dri_create_context_unchecked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */,
                                      uint32_t          visual  /**< */,
                                      uint32_t          context  /**< */)
d469 4
a472 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CREATE_CONTEXT,
        /* isvoid */ 0
d493 1
a493 1
xcb_xf86dri_create_context_reply (xcb_connection_t                     *c  /**< */,
d495 1
a495 1
                                  xcb_generic_error_t                 **e  /**< */)
d501 3
a503 3
xcb_xf86dri_destroy_context_checked (xcb_connection_t *c  /**< */,
                                     uint32_t          screen  /**< */,
                                     uint32_t          context  /**< */)
d506 4
a509 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_DESTROY_CONTEXT,
        /* isvoid */ 1
d529 3
a531 3
xcb_xf86dri_destroy_context (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          context  /**< */)
d534 4
a537 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_DESTROY_CONTEXT,
        /* isvoid */ 1
d557 3
a559 3
xcb_xf86dri_create_drawable (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          drawable  /**< */)
d562 4
a565 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CREATE_DRAWABLE,
        /* isvoid */ 0
d585 3
a587 3
xcb_xf86dri_create_drawable_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          drawable  /**< */)
d590 4
a593 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_CREATE_DRAWABLE,
        /* isvoid */ 0
d613 1
a613 1
xcb_xf86dri_create_drawable_reply (xcb_connection_t                      *c  /**< */,
d615 1
a615 1
                                   xcb_generic_error_t                  **e  /**< */)
d621 3
a623 3
xcb_xf86dri_destroy_drawable_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */,
                                      uint32_t          drawable  /**< */)
d626 4
a629 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_DESTROY_DRAWABLE,
        /* isvoid */ 1
d649 3
a651 3
xcb_xf86dri_destroy_drawable (xcb_connection_t *c  /**< */,
                              uint32_t          screen  /**< */,
                              uint32_t          drawable  /**< */)
d654 4
a657 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_DESTROY_DRAWABLE,
        /* isvoid */ 1
d677 1
a677 1
xcb_xf86dri_get_drawable_info_sizeof (const void  *_buffer  /**< */)
d720 3
a722 3
xcb_xf86dri_get_drawable_info (xcb_connection_t *c  /**< */,
                               uint32_t          screen  /**< */,
                               uint32_t          drawable  /**< */)
d725 4
a728 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_DRAWABLE_INFO,
        /* isvoid */ 0
d748 3
a750 3
xcb_xf86dri_get_drawable_info_unchecked (xcb_connection_t *c  /**< */,
                                         uint32_t          screen  /**< */,
                                         uint32_t          drawable  /**< */)
d753 4
a756 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_DRAWABLE_INFO,
        /* isvoid */ 0
d776 1
a776 1
xcb_xf86dri_get_drawable_info_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d782 1
a782 1
xcb_xf86dri_get_drawable_info_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d788 1
a788 1
xcb_xf86dri_get_drawable_info_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d798 1
a798 1
xcb_xf86dri_get_drawable_info_back_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d805 1
a805 1
xcb_xf86dri_get_drawable_info_back_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d811 1
a811 1
xcb_xf86dri_get_drawable_info_back_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */)
d822 1
a822 1
xcb_xf86dri_get_drawable_info_reply (xcb_connection_t                        *c  /**< */,
d824 1
a824 1
                                     xcb_generic_error_t                    **e  /**< */)
d830 1
a830 1
xcb_xf86dri_get_device_info_sizeof (const void  *_buffer  /**< */)
d861 2
a862 2
xcb_xf86dri_get_device_info (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */)
d865 4
a868 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_DEVICE_INFO,
        /* isvoid */ 0
d887 2
a888 2
xcb_xf86dri_get_device_info_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */)
d891 4
a894 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_GET_DEVICE_INFO,
        /* isvoid */ 0
d913 1
a913 1
xcb_xf86dri_get_device_info_device_private (const xcb_xf86dri_get_device_info_reply_t *R  /**< */)
d919 1
a919 1
xcb_xf86dri_get_device_info_device_private_length (const xcb_xf86dri_get_device_info_reply_t *R  /**< */)
d925 1
a925 1
xcb_xf86dri_get_device_info_device_private_end (const xcb_xf86dri_get_device_info_reply_t *R  /**< */)
d935 1
a935 1
xcb_xf86dri_get_device_info_reply (xcb_connection_t                      *c  /**< */,
d937 1
a937 1
                                   xcb_generic_error_t                  **e  /**< */)
d943 3
a945 3
xcb_xf86dri_auth_connection (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          magic  /**< */)
d948 4
a951 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_AUTH_CONNECTION,
        /* isvoid */ 0
d971 3
a973 3
xcb_xf86dri_auth_connection_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          magic  /**< */)
d976 4
a979 4
        /* count */ 2,
        /* ext */ &xcb_xf86dri_id,
        /* opcode */ XCB_XF86DRI_AUTH_CONNECTION,
        /* isvoid */ 0
d999 1
a999 1
xcb_xf86dri_auth_connection_reply (xcb_connection_t                      *c  /**< */,
d1001 1
a1001 1
                                   xcb_generic_error_t                  **e  /**< */)
@


1.5
log
@Update build system and generated files for libxcb 1.10.
@
text
@a19 10

/*****************************************************************************
 **
 ** void xcb_xf86dri_drm_clip_rect_next
 ** 
 ** @@param xcb_xf86dri_drm_clip_rect_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a27 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_drm_clip_rect_end
 ** 
 ** @@param xcb_xf86dri_drm_clip_rect_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a37 10

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_cookie_t xcb_xf86dri_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xf86dri_query_version_cookie_t
 **
 *****************************************************************************/
 
d47 1
a47 1
    
d51 2
a52 2
    
    
d57 1
a57 1
    
a61 10

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_cookie_t xcb_xf86dri_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xf86dri_query_version_cookie_t
 **
 *****************************************************************************/
 
d71 1
a71 1
    
d75 2
a76 2
    
    
d81 1
a81 1
    
a85 12

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_reply_t * xcb_xf86dri_query_version_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xf86dri_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xf86dri_query_version_reply_t *
 **
 *****************************************************************************/
 
a93 11

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_xf86dri_query_direct_rendering_capable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_cookie_t
 **
 *****************************************************************************/
 
d104 1
a104 1
    
d108 1
a108 1
    
d110 1
a110 1
    
d115 1
a115 1
    
a119 11

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_xf86dri_query_direct_rendering_capable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_cookie_t
 **
 *****************************************************************************/
 
d130 1
a130 1
    
d134 1
a134 1
    
d136 1
a136 1
    
d141 1
a141 1
    
a145 12

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_reply_t * xcb_xf86dri_query_direct_rendering_capable_reply
 ** 
 ** @@param xcb_connection_t                                     *c
 ** @@param xcb_xf86dri_query_direct_rendering_capable_cookie_t   cookie
 ** @@param xcb_generic_error_t                                 **e
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_reply_t *
 **
 *****************************************************************************/
 
a184 11

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_cookie_t xcb_xf86dri_open_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_open_connection_cookie_t
 **
 *****************************************************************************/
 
d195 1
a195 1
    
d199 1
a199 1
    
d201 1
a201 1
    
d206 1
a206 1
    
a210 11

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_cookie_t xcb_xf86dri_open_connection_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_open_connection_cookie_t
 **
 *****************************************************************************/
 
d221 1
a221 1
    
d225 1
a225 1
    
d227 1
a227 1
    
d232 1
a232 1
    
a236 10

/*****************************************************************************
 **
 ** char * xcb_xf86dri_open_connection_bus_id
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a242 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_open_connection_bus_id_length
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a248 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_open_connection_bus_id_end
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a258 12

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_reply_t * xcb_xf86dri_open_connection_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_open_connection_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_open_connection_reply_t *
 **
 *****************************************************************************/
 
a266 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_close_connection_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d277 1
a277 1
    
d281 1
a281 1
    
d283 1
a283 1
    
d288 1
a288 1
    
a292 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_close_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d303 1
a303 1
    
d307 1
a307 1
    
d309 1
a309 1
    
d314 1
a314 1
    
a349 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_cookie_t xcb_xf86dri_get_client_driver_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_client_driver_name_cookie_t
 **
 *****************************************************************************/
 
d360 1
a360 1
    
d364 1
a364 1
    
d366 1
a366 1
    
d371 1
a371 1
    
a375 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_cookie_t xcb_xf86dri_get_client_driver_name_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_client_driver_name_cookie_t
 **
 *****************************************************************************/
 
d386 1
a386 1
    
d390 1
a390 1
    
d392 1
a392 1
    
d397 1
a397 1
    
a401 10

/*****************************************************************************
 **
 ** char * xcb_xf86dri_get_client_driver_name_client_driver_name
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a407 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_client_driver_name_client_driver_name_length
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a413 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_get_client_driver_name_client_driver_name_end
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a423 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_reply_t * xcb_xf86dri_get_client_driver_name_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_xf86dri_get_client_driver_name_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_xf86dri_get_client_driver_name_reply_t *
 **
 *****************************************************************************/
 
a431 13

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_cookie_t xcb_xf86dri_create_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          visual
 ** @@param uint32_t          context
 ** @@returns xcb_xf86dri_create_context_cookie_t
 **
 *****************************************************************************/
 
d444 1
a444 1
    
d448 1
a448 1
    
d452 1
a452 1
    
d457 1
a457 1
    
a461 13

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_cookie_t xcb_xf86dri_create_context_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          visual
 ** @@param uint32_t          context
 ** @@returns xcb_xf86dri_create_context_cookie_t
 **
 *****************************************************************************/
 
d474 1
a474 1
    
d478 1
a478 1
    
d482 1
a482 1
    
d487 1
a487 1
    
a491 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_reply_t * xcb_xf86dri_create_context_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xf86dri_create_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xf86dri_create_context_reply_t *
 **
 *****************************************************************************/
 
a499 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_context_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d511 1
a511 1
    
d515 1
a515 1
    
d518 1
a518 1
    
d523 1
a523 1
    
a527 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d539 1
a539 1
    
d543 1
a543 1
    
d546 1
a546 1
    
d551 1
a551 1
    
a555 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_cookie_t xcb_xf86dri_create_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_create_drawable_cookie_t
 **
 *****************************************************************************/
 
d567 1
a567 1
    
d571 1
a571 1
    
d574 1
a574 1
    
d579 1
a579 1
    
a583 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_cookie_t xcb_xf86dri_create_drawable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_create_drawable_cookie_t
 **
 *****************************************************************************/
 
d595 1
a595 1
    
d599 1
a599 1
    
d602 1
a602 1
    
d607 1
a607 1
    
a611 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_reply_t * xcb_xf86dri_create_drawable_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_create_drawable_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_create_drawable_reply_t *
 **
 *****************************************************************************/
 
a619 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d631 1
a631 1
    
d635 1
a635 1
    
d638 1
a638 1
    
d643 1
a643 1
    
a647 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d659 1
a659 1
    
d663 1
a663 1
    
d666 1
a666 1
    
d671 1
a671 1
    
a718 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_cookie_t xcb_xf86dri_get_drawable_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_get_drawable_info_cookie_t
 **
 *****************************************************************************/
 
d730 1
a730 1
    
d734 1
a734 1
    
d737 1
a737 1
    
d742 1
a742 1
    
a746 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_cookie_t xcb_xf86dri_get_drawable_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_get_drawable_info_cookie_t
 **
 *****************************************************************************/
 
d758 1
a758 1
    
d762 1
a762 1
    
d765 1
a765 1
    
d770 1
a770 1
    
a774 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_t * xcb_xf86dri_get_drawable_info_clip_rects
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_t *
 **
 *****************************************************************************/
 
a780 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_drawable_info_clip_rects_length
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a786 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_iterator_t xcb_xf86dri_get_drawable_info_clip_rects_iterator
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_iterator_t
 **
 *****************************************************************************/
 
a796 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_t * xcb_xf86dri_get_drawable_info_back_clip_rects
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_t *
 **
 *****************************************************************************/
 
a803 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_drawable_info_back_clip_rects_length
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a809 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_iterator_t xcb_xf86dri_get_drawable_info_back_clip_rects_iterator
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_iterator_t
 **
 *****************************************************************************/
 
a820 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_reply_t * xcb_xf86dri_get_drawable_info_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_xf86dri_get_drawable_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_xf86dri_get_drawable_info_reply_t *
 **
 *****************************************************************************/
 
a859 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_cookie_t xcb_xf86dri_get_device_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_device_info_cookie_t
 **
 *****************************************************************************/
 
d870 1
a870 1
    
d874 1
a874 1
    
d876 1
a876 1
    
d881 1
a881 1
    
a885 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_cookie_t xcb_xf86dri_get_device_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_device_info_cookie_t
 **
 *****************************************************************************/
 
d896 1
a896 1
    
d900 1
a900 1
    
d902 1
a902 1
    
d907 1
a907 1
    
a911 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xf86dri_get_device_info_device_private
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a917 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_device_info_device_private_length
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a923 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_get_device_info_device_private_end
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a933 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_reply_t * xcb_xf86dri_get_device_info_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_get_device_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_get_device_info_reply_t *
 **
 *****************************************************************************/
 
a941 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_cookie_t xcb_xf86dri_auth_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          magic
 ** @@returns xcb_xf86dri_auth_connection_cookie_t
 **
 *****************************************************************************/
 
d953 1
a953 1
    
d957 1
a957 1
    
d960 1
a960 1
    
d965 1
a965 1
    
a969 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_cookie_t xcb_xf86dri_auth_connection_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          magic
 ** @@returns xcb_xf86dri_auth_connection_cookie_t
 **
 *****************************************************************************/
 
d981 1
a981 1
    
d985 1
a985 1
    
d988 1
a988 1
    
d993 1
a993 1
    
a997 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_reply_t * xcb_xf86dri_auth_connection_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_auth_connection_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_auth_connection_reply_t *
 **
 *****************************************************************************/
 
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d248 1
a248 1
    unsigned int xcb_align_to;
d253 2
d499 1
a499 1
    unsigned int xcb_align_to;
d504 2
d1042 1
a1042 1
    unsigned int xcb_align_to;
d1047 2
d1291 1
a1291 1
    unsigned int xcb_align_to;
d1296 2
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d16 2
d87 1
d121 1
d178 1
d215 1
d240 29
d301 1
d338 1
d447 1
d484 1
d489 29
d550 1
d587 1
d702 1
d745 1
d805 1
d845 1
d885 1
d925 1
d985 1
d1025 1
d1030 41
d1106 1
d1146 1
d1277 29
d1338 1
d1375 1
d1487 1
d1527 1
@


1.2
log
@regen for xcb-proto 1.6
@
text
@d1080 54
@


1.1
log
@Initial revision
@
text
@d595 1
a596 1
 ** @@param uint32_t          screen
d604 1
a605 1
                            uint32_t          screen  /**< */,
d619 1
a620 1
    xcb_out.screen = screen;
d637 1
a638 1
 ** @@param uint32_t          screen
d646 1
a647 1
                                      uint32_t          screen  /**< */,
d661 1
a662 1
    xcb_out.screen = screen;
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
