head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from shm.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Shm_API XCB Shm API
 * @@brief Shm XCB Protocol Implementation.
 * @@{
 **/

#ifndef __SHM_H
#define __SHM_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_SHM_MAJOR_VERSION 1
#define XCB_SHM_MINOR_VERSION 2

extern xcb_extension_t xcb_shm_id;

typedef uint32_t xcb_shm_seg_t;

/**
 * @@brief xcb_shm_seg_iterator_t
 **/
typedef struct xcb_shm_seg_iterator_t {
    xcb_shm_seg_t *data;
    int            rem;
    int            index;
} xcb_shm_seg_iterator_t;

/** Opcode for xcb_shm_completion. */
#define XCB_SHM_COMPLETION 0

/**
 * @@brief xcb_shm_completion_event_t
 **/
typedef struct xcb_shm_completion_event_t {
    uint8_t        response_type;
    uint8_t        pad0;
    uint16_t       sequence;
    xcb_drawable_t drawable;
    uint16_t       minor_event;
    uint8_t        major_event;
    uint8_t        pad1;
    xcb_shm_seg_t  shmseg;
    uint32_t       offset;
} xcb_shm_completion_event_t;

/** Opcode for xcb_shm_bad_seg. */
#define XCB_SHM_BAD_SEG 0

typedef xcb_value_error_t xcb_shm_bad_seg_error_t;

/**
 * @@brief xcb_shm_query_version_cookie_t
 **/
typedef struct xcb_shm_query_version_cookie_t {
    unsigned int sequence;
} xcb_shm_query_version_cookie_t;

/** Opcode for xcb_shm_query_version. */
#define XCB_SHM_QUERY_VERSION 0

/**
 * @@brief xcb_shm_query_version_request_t
 **/
typedef struct xcb_shm_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_shm_query_version_request_t;

/**
 * @@brief xcb_shm_query_version_reply_t
 **/
typedef struct xcb_shm_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  shared_pixmaps;
    uint16_t sequence;
    uint32_t length;
    uint16_t major_version;
    uint16_t minor_version;
    uint16_t uid;
    uint16_t gid;
    uint8_t  pixmap_format;
    uint8_t  pad0[15];
} xcb_shm_query_version_reply_t;

/** Opcode for xcb_shm_attach. */
#define XCB_SHM_ATTACH 1

/**
 * @@brief xcb_shm_attach_request_t
 **/
typedef struct xcb_shm_attach_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_shm_seg_t shmseg;
    uint32_t      shmid;
    uint8_t       read_only;
    uint8_t       pad0[3];
} xcb_shm_attach_request_t;

/** Opcode for xcb_shm_detach. */
#define XCB_SHM_DETACH 2

/**
 * @@brief xcb_shm_detach_request_t
 **/
typedef struct xcb_shm_detach_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_shm_seg_t shmseg;
} xcb_shm_detach_request_t;

/** Opcode for xcb_shm_put_image. */
#define XCB_SHM_PUT_IMAGE 3

/**
 * @@brief xcb_shm_put_image_request_t
 **/
typedef struct xcb_shm_put_image_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    xcb_gcontext_t gc;
    uint16_t       total_width;
    uint16_t       total_height;
    uint16_t       src_x;
    uint16_t       src_y;
    uint16_t       src_width;
    uint16_t       src_height;
    int16_t        dst_x;
    int16_t        dst_y;
    uint8_t        depth;
    uint8_t        format;
    uint8_t        send_event;
    uint8_t        pad0;
    xcb_shm_seg_t  shmseg;
    uint32_t       offset;
} xcb_shm_put_image_request_t;

/**
 * @@brief xcb_shm_get_image_cookie_t
 **/
typedef struct xcb_shm_get_image_cookie_t {
    unsigned int sequence;
} xcb_shm_get_image_cookie_t;

/** Opcode for xcb_shm_get_image. */
#define XCB_SHM_GET_IMAGE 4

/**
 * @@brief xcb_shm_get_image_request_t
 **/
typedef struct xcb_shm_get_image_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
    int16_t        x;
    int16_t        y;
    uint16_t       width;
    uint16_t       height;
    uint32_t       plane_mask;
    uint8_t        format;
    uint8_t        pad0[3];
    xcb_shm_seg_t  shmseg;
    uint32_t       offset;
} xcb_shm_get_image_request_t;

/**
 * @@brief xcb_shm_get_image_reply_t
 **/
typedef struct xcb_shm_get_image_reply_t {
    uint8_t        response_type;
    uint8_t        depth;
    uint16_t       sequence;
    uint32_t       length;
    xcb_visualid_t visual;
    uint32_t       size;
} xcb_shm_get_image_reply_t;

/** Opcode for xcb_shm_create_pixmap. */
#define XCB_SHM_CREATE_PIXMAP 5

/**
 * @@brief xcb_shm_create_pixmap_request_t
 **/
typedef struct xcb_shm_create_pixmap_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_pixmap_t   pid;
    xcb_drawable_t drawable;
    uint16_t       width;
    uint16_t       height;
    uint8_t        depth;
    uint8_t        pad0[3];
    xcb_shm_seg_t  shmseg;
    uint32_t       offset;
} xcb_shm_create_pixmap_request_t;

/** Opcode for xcb_shm_attach_fd. */
#define XCB_SHM_ATTACH_FD 6

/**
 * @@brief xcb_shm_attach_fd_request_t
 **/
typedef struct xcb_shm_attach_fd_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_shm_seg_t shmseg;
    uint8_t       read_only;
    uint8_t       pad0[3];
} xcb_shm_attach_fd_request_t;

/**
 * @@brief xcb_shm_create_segment_cookie_t
 **/
typedef struct xcb_shm_create_segment_cookie_t {
    unsigned int sequence;
} xcb_shm_create_segment_cookie_t;

/** Opcode for xcb_shm_create_segment. */
#define XCB_SHM_CREATE_SEGMENT 7

/**
 * @@brief xcb_shm_create_segment_request_t
 **/
typedef struct xcb_shm_create_segment_request_t {
    uint8_t       major_opcode;
    uint8_t       minor_opcode;
    uint16_t      length;
    xcb_shm_seg_t shmseg;
    uint32_t      size;
    uint8_t       read_only;
    uint8_t       pad0[3];
} xcb_shm_create_segment_request_t;

/**
 * @@brief xcb_shm_create_segment_reply_t
 **/
typedef struct xcb_shm_create_segment_reply_t {
    uint8_t  response_type;
    uint8_t  nfd;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad0[24];
} xcb_shm_create_segment_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_shm_seg_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_shm_seg_t)
 */
void
xcb_shm_seg_next (xcb_shm_seg_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_shm_seg_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_shm_seg_end (xcb_shm_seg_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shm_query_version_cookie_t
xcb_shm_query_version (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shm_query_version_cookie_t
xcb_shm_query_version_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shm_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shm_query_version_reply_t *
xcb_shm_query_version_reply (xcb_connection_t                *c,
                             xcb_shm_query_version_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shm_attach_checked (xcb_connection_t *c,
                        xcb_shm_seg_t     shmseg,
                        uint32_t          shmid,
                        uint8_t           read_only);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shm_attach (xcb_connection_t *c,
                xcb_shm_seg_t     shmseg,
                uint32_t          shmid,
                uint8_t           read_only);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shm_detach_checked (xcb_connection_t *c,
                        xcb_shm_seg_t     shmseg);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shm_detach (xcb_connection_t *c,
                xcb_shm_seg_t     shmseg);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shm_put_image_checked (xcb_connection_t *c,
                           xcb_drawable_t    drawable,
                           xcb_gcontext_t    gc,
                           uint16_t          total_width,
                           uint16_t          total_height,
                           uint16_t          src_x,
                           uint16_t          src_y,
                           uint16_t          src_width,
                           uint16_t          src_height,
                           int16_t           dst_x,
                           int16_t           dst_y,
                           uint8_t           depth,
                           uint8_t           format,
                           uint8_t           send_event,
                           xcb_shm_seg_t     shmseg,
                           uint32_t          offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shm_put_image (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   xcb_gcontext_t    gc,
                   uint16_t          total_width,
                   uint16_t          total_height,
                   uint16_t          src_x,
                   uint16_t          src_y,
                   uint16_t          src_width,
                   uint16_t          src_height,
                   int16_t           dst_x,
                   int16_t           dst_y,
                   uint8_t           depth,
                   uint8_t           format,
                   uint8_t           send_event,
                   xcb_shm_seg_t     shmseg,
                   uint32_t          offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shm_get_image_cookie_t
xcb_shm_get_image (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   int16_t           x,
                   int16_t           y,
                   uint16_t          width,
                   uint16_t          height,
                   uint32_t          plane_mask,
                   uint8_t           format,
                   xcb_shm_seg_t     shmseg,
                   uint32_t          offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shm_get_image_cookie_t
xcb_shm_get_image_unchecked (xcb_connection_t *c,
                             xcb_drawable_t    drawable,
                             int16_t           x,
                             int16_t           y,
                             uint16_t          width,
                             uint16_t          height,
                             uint32_t          plane_mask,
                             uint8_t           format,
                             xcb_shm_seg_t     shmseg,
                             uint32_t          offset);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shm_get_image_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shm_get_image_reply_t *
xcb_shm_get_image_reply (xcb_connection_t            *c,
                         xcb_shm_get_image_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shm_create_pixmap_checked (xcb_connection_t *c,
                               xcb_pixmap_t      pid,
                               xcb_drawable_t    drawable,
                               uint16_t          width,
                               uint16_t          height,
                               uint8_t           depth,
                               xcb_shm_seg_t     shmseg,
                               uint32_t          offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shm_create_pixmap (xcb_connection_t *c,
                       xcb_pixmap_t      pid,
                       xcb_drawable_t    drawable,
                       uint16_t          width,
                       uint16_t          height,
                       uint8_t           depth,
                       xcb_shm_seg_t     shmseg,
                       uint32_t          offset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_shm_attach_fd_checked (xcb_connection_t *c,
                           xcb_shm_seg_t     shmseg,
                           int32_t           shm_fd,
                           uint8_t           read_only);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_shm_attach_fd (xcb_connection_t *c,
                   xcb_shm_seg_t     shmseg,
                   int32_t           shm_fd,
                   uint8_t           read_only);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_shm_create_segment_cookie_t
xcb_shm_create_segment (xcb_connection_t *c,
                        xcb_shm_seg_t     shmseg,
                        uint32_t          size,
                        uint8_t           read_only);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_shm_create_segment_cookie_t
xcb_shm_create_segment_unchecked (xcb_connection_t *c,
                                  xcb_shm_seg_t     shmseg,
                                  uint32_t          size,
                                  uint8_t           read_only);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_shm_create_segment_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_shm_create_segment_reply_t *
xcb_shm_create_segment_reply (xcb_connection_t                 *c,
                              xcb_shm_create_segment_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 * Return the reply fds
 * @@param c      The connection
 * @@param reply  The reply
 *
 * Returns the array of reply fds of the request asked by
 *
 * The returned value must be freed by the caller using free().
 */
int *
xcb_shm_create_segment_reply_fds (xcb_connection_t                *c  /**< */,
                                  xcb_shm_create_segment_reply_t  *reply);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_shm_seg_t *data; /**<  */
    int            rem; /**<  */
    int            index; /**<  */
d45 9
a53 9
    uint8_t        response_type; /**<  */
    uint8_t        pad0; /**<  */
    uint16_t       sequence; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint16_t       minor_event; /**<  */
    uint8_t        major_event; /**<  */
    uint8_t        pad1; /**<  */
    xcb_shm_seg_t  shmseg; /**<  */
    uint32_t       offset; /**<  */
d65 1
a65 1
    unsigned int sequence; /**<  */
d75 3
a77 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d84 10
a93 10
    uint8_t  response_type; /**<  */
    uint8_t  shared_pixmaps; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major_version; /**<  */
    uint16_t minor_version; /**<  */
    uint16_t uid; /**<  */
    uint16_t gid; /**<  */
    uint8_t  pixmap_format; /**<  */
    uint8_t  pad0[15]; /**<  */
d103 7
a109 7
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_shm_seg_t shmseg; /**<  */
    uint32_t      shmid; /**<  */
    uint8_t       read_only; /**<  */
    uint8_t       pad0[3]; /**<  */
d119 4
a122 4
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_shm_seg_t shmseg; /**<  */
d132 19
a150 19
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    xcb_gcontext_t gc; /**<  */
    uint16_t       total_width; /**<  */
    uint16_t       total_height; /**<  */
    uint16_t       src_x; /**<  */
    uint16_t       src_y; /**<  */
    uint16_t       src_width; /**<  */
    uint16_t       src_height; /**<  */
    int16_t        dst_x; /**<  */
    int16_t        dst_y; /**<  */
    uint8_t        depth; /**<  */
    uint8_t        format; /**<  */
    uint8_t        send_event; /**<  */
    uint8_t        pad0; /**<  */
    xcb_shm_seg_t  shmseg; /**<  */
    uint32_t       offset; /**<  */
d157 1
a157 1
    unsigned int sequence; /**<  */
d167 13
a179 13
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
    int16_t        x; /**<  */
    int16_t        y; /**<  */
    uint16_t       width; /**<  */
    uint16_t       height; /**<  */
    uint32_t       plane_mask; /**<  */
    uint8_t        format; /**<  */
    uint8_t        pad0[3]; /**<  */
    xcb_shm_seg_t  shmseg; /**<  */
    uint32_t       offset; /**<  */
d186 6
a191 6
    uint8_t        response_type; /**<  */
    uint8_t        depth; /**<  */
    uint16_t       sequence; /**<  */
    uint32_t       length; /**<  */
    xcb_visualid_t visual; /**<  */
    uint32_t       size; /**<  */
d201 11
a211 11
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_pixmap_t   pid; /**<  */
    xcb_drawable_t drawable; /**<  */
    uint16_t       width; /**<  */
    uint16_t       height; /**<  */
    uint8_t        depth; /**<  */
    uint8_t        pad0[3]; /**<  */
    xcb_shm_seg_t  shmseg; /**<  */
    uint32_t       offset; /**<  */
d221 6
a226 6
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_shm_seg_t shmseg; /**<  */
    uint8_t       read_only; /**<  */
    uint8_t       pad0[3]; /**<  */
d233 1
a233 1
    unsigned int sequence; /**<  */
d243 7
a249 7
    uint8_t       major_opcode; /**<  */
    uint8_t       minor_opcode; /**<  */
    uint16_t      length; /**<  */
    xcb_shm_seg_t shmseg; /**<  */
    uint32_t      size; /**<  */
    uint8_t       read_only; /**<  */
    uint8_t       pad0[3]; /**<  */
d256 5
a260 5
    uint8_t  response_type; /**<  */
    uint8_t  nfd; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad0[24]; /**<  */
d272 1
a272 1
xcb_shm_seg_next (xcb_shm_seg_iterator_t *i  /**< */);
d284 1
a284 1
xcb_shm_seg_end (xcb_shm_seg_iterator_t i  /**< */);
d295 1
a295 1
xcb_shm_query_version (xcb_connection_t *c  /**< */);
d309 1
a309 1
xcb_shm_query_version_unchecked (xcb_connection_t *c  /**< */);
d326 1
a326 1
xcb_shm_query_version_reply (xcb_connection_t                *c  /**< */,
d328 1
a328 1
                             xcb_generic_error_t            **e  /**< */);
d342 4
a345 4
xcb_shm_attach_checked (xcb_connection_t *c  /**< */,
                        xcb_shm_seg_t     shmseg  /**< */,
                        uint32_t          shmid  /**< */,
                        uint8_t           read_only  /**< */);
d356 4
a359 4
xcb_shm_attach (xcb_connection_t *c  /**< */,
                xcb_shm_seg_t     shmseg  /**< */,
                uint32_t          shmid  /**< */,
                uint8_t           read_only  /**< */);
d373 2
a374 2
xcb_shm_detach_checked (xcb_connection_t *c  /**< */,
                        xcb_shm_seg_t     shmseg  /**< */);
d385 2
a386 2
xcb_shm_detach (xcb_connection_t *c  /**< */,
                xcb_shm_seg_t     shmseg  /**< */);
d400 16
a415 16
xcb_shm_put_image_checked (xcb_connection_t *c  /**< */,
                           xcb_drawable_t    drawable  /**< */,
                           xcb_gcontext_t    gc  /**< */,
                           uint16_t          total_width  /**< */,
                           uint16_t          total_height  /**< */,
                           uint16_t          src_x  /**< */,
                           uint16_t          src_y  /**< */,
                           uint16_t          src_width  /**< */,
                           uint16_t          src_height  /**< */,
                           int16_t           dst_x  /**< */,
                           int16_t           dst_y  /**< */,
                           uint8_t           depth  /**< */,
                           uint8_t           format  /**< */,
                           uint8_t           send_event  /**< */,
                           xcb_shm_seg_t     shmseg  /**< */,
                           uint32_t          offset  /**< */);
d426 16
a441 16
xcb_shm_put_image (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   xcb_gcontext_t    gc  /**< */,
                   uint16_t          total_width  /**< */,
                   uint16_t          total_height  /**< */,
                   uint16_t          src_x  /**< */,
                   uint16_t          src_y  /**< */,
                   uint16_t          src_width  /**< */,
                   uint16_t          src_height  /**< */,
                   int16_t           dst_x  /**< */,
                   int16_t           dst_y  /**< */,
                   uint8_t           depth  /**< */,
                   uint8_t           format  /**< */,
                   uint8_t           send_event  /**< */,
                   xcb_shm_seg_t     shmseg  /**< */,
                   uint32_t          offset  /**< */);
d452 10
a461 10
xcb_shm_get_image (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   int16_t           x  /**< */,
                   int16_t           y  /**< */,
                   uint16_t          width  /**< */,
                   uint16_t          height  /**< */,
                   uint32_t          plane_mask  /**< */,
                   uint8_t           format  /**< */,
                   xcb_shm_seg_t     shmseg  /**< */,
                   uint32_t          offset  /**< */);
d475 10
a484 10
xcb_shm_get_image_unchecked (xcb_connection_t *c  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             int16_t           x  /**< */,
                             int16_t           y  /**< */,
                             uint16_t          width  /**< */,
                             uint16_t          height  /**< */,
                             uint32_t          plane_mask  /**< */,
                             uint8_t           format  /**< */,
                             xcb_shm_seg_t     shmseg  /**< */,
                             uint32_t          offset  /**< */);
d501 1
a501 1
xcb_shm_get_image_reply (xcb_connection_t            *c  /**< */,
d503 1
a503 1
                         xcb_generic_error_t        **e  /**< */);
d517 8
a524 8
xcb_shm_create_pixmap_checked (xcb_connection_t *c  /**< */,
                               xcb_pixmap_t      pid  /**< */,
                               xcb_drawable_t    drawable  /**< */,
                               uint16_t          width  /**< */,
                               uint16_t          height  /**< */,
                               uint8_t           depth  /**< */,
                               xcb_shm_seg_t     shmseg  /**< */,
                               uint32_t          offset  /**< */);
d535 8
a542 8
xcb_shm_create_pixmap (xcb_connection_t *c  /**< */,
                       xcb_pixmap_t      pid  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       uint16_t          width  /**< */,
                       uint16_t          height  /**< */,
                       uint8_t           depth  /**< */,
                       xcb_shm_seg_t     shmseg  /**< */,
                       uint32_t          offset  /**< */);
d556 4
a559 4
xcb_shm_attach_fd_checked (xcb_connection_t *c  /**< */,
                           xcb_shm_seg_t     shmseg  /**< */,
                           int32_t           shm_fd  /**< */,
                           uint8_t           read_only  /**< */);
d570 4
a573 4
xcb_shm_attach_fd (xcb_connection_t *c  /**< */,
                   xcb_shm_seg_t     shmseg  /**< */,
                   int32_t           shm_fd  /**< */,
                   uint8_t           read_only  /**< */);
d584 4
a587 4
xcb_shm_create_segment (xcb_connection_t *c  /**< */,
                        xcb_shm_seg_t     shmseg  /**< */,
                        uint32_t          size  /**< */,
                        uint8_t           read_only  /**< */);
d601 4
a604 4
xcb_shm_create_segment_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_shm_seg_t     shmseg  /**< */,
                                  uint32_t          size  /**< */,
                                  uint8_t           read_only  /**< */);
d621 1
a621 1
xcb_shm_create_segment_reply (xcb_connection_t                 *c  /**< */,
d623 1
a623 1
                              xcb_generic_error_t             **e  /**< */);
d636 1
a636 1
                                  xcb_shm_create_segment_reply_t  *reply  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a270 10

/*****************************************************************************
 **
 ** void xcb_shm_seg_next
 ** 
 ** @@param xcb_shm_seg_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a282 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_shm_seg_end
 ** 
 ** @@param xcb_shm_seg_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d292 1
a292 1
 * 
a293 10

/*****************************************************************************
 **
 ** xcb_shm_query_version_cookie_t xcb_shm_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shm_query_version_cookie_t
 **
 *****************************************************************************/
 
d303 1
a303 1
 * 
a307 10

/*****************************************************************************
 **
 ** xcb_shm_query_version_cookie_t xcb_shm_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shm_query_version_cookie_t
 **
 *****************************************************************************/
 
d318 1
a318 1
 * 
a324 12

/*****************************************************************************
 **
 ** xcb_shm_query_version_reply_t * xcb_shm_query_version_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_shm_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_shm_query_version_reply_t *
 **
 *****************************************************************************/
 
d336 1
a336 1
 * 
a340 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_attach_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          shmid
 ** @@param uint8_t           read_only
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d353 1
a353 1
 * 
a354 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_attach
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          shmid
 ** @@param uint8_t           read_only
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d367 1
a367 1
 * 
a371 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_detach_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d382 1
a382 1
 * 
a383 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_detach
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d394 1
a394 1
 * 
a398 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_put_image_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          total_width
 ** @@param uint16_t          total_height
 ** @@param uint16_t          src_x
 ** @@param uint16_t          src_y
 ** @@param uint16_t          src_width
 ** @@param uint16_t          src_height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint8_t           depth
 ** @@param uint8_t           format
 ** @@param uint8_t           send_event
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d423 1
a423 1
 * 
a424 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_put_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_gcontext_t    gc
 ** @@param uint16_t          total_width
 ** @@param uint16_t          total_height
 ** @@param uint16_t          src_x
 ** @@param uint16_t          src_y
 ** @@param uint16_t          src_width
 ** @@param uint16_t          src_height
 ** @@param int16_t           dst_x
 ** @@param int16_t           dst_y
 ** @@param uint8_t           depth
 ** @@param uint8_t           format
 ** @@param uint8_t           send_event
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d449 1
a449 1
 * 
a450 19

/*****************************************************************************
 **
 ** xcb_shm_get_image_cookie_t xcb_shm_get_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          plane_mask
 ** @@param uint8_t           format
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_shm_get_image_cookie_t
 **
 *****************************************************************************/
 
d469 1
a469 1
 * 
a473 19

/*****************************************************************************
 **
 ** xcb_shm_get_image_cookie_t xcb_shm_get_image_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param int16_t           x
 ** @@param int16_t           y
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          plane_mask
 ** @@param uint8_t           format
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_shm_get_image_cookie_t
 **
 *****************************************************************************/
 
d493 1
a493 1
 * 
a499 12

/*****************************************************************************
 **
 ** xcb_shm_get_image_reply_t * xcb_shm_get_image_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_shm_get_image_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_shm_get_image_reply_t *
 **
 *****************************************************************************/
 
d511 1
a511 1
 * 
a515 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_create_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           depth
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d532 1
a532 1
 * 
a533 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_create_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_pixmap_t      pid
 ** @@param xcb_drawable_t    drawable
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint8_t           depth
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d550 1
a550 1
 * 
a554 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_attach_fd_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param int32_t           shm_fd
 ** @@param uint8_t           read_only
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d567 1
a567 1
 * 
a568 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shm_attach_fd
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param int32_t           shm_fd
 ** @@param uint8_t           read_only
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d581 1
a581 1
 * 
a582 13

/*****************************************************************************
 **
 ** xcb_shm_create_segment_cookie_t xcb_shm_create_segment
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          size
 ** @@param uint8_t           read_only
 ** @@returns xcb_shm_create_segment_cookie_t
 **
 *****************************************************************************/
 
d595 1
a595 1
 * 
a599 13

/*****************************************************************************
 **
 ** xcb_shm_create_segment_cookie_t xcb_shm_create_segment_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shm_seg_t     shmseg
 ** @@param uint32_t          size
 ** @@param uint8_t           read_only
 ** @@returns xcb_shm_create_segment_cookie_t
 **
 *****************************************************************************/
 
d613 1
a613 1
 * 
a619 12

/*****************************************************************************
 **
 ** xcb_shm_create_segment_reply_t * xcb_shm_create_segment_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_shm_create_segment_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_shm_create_segment_reply_t *
 **
 *****************************************************************************/
 
d631 1
a631 1
 * 
a633 11

/*****************************************************************************
 **
 ** int * xcb_shm_create_segment_reply_fds
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_shm_create_segment_reply_t  *reply
 ** @@returns int *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
#define XCB_SHM_MINOR_VERSION 1
d214 49
d777 169
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d258 1
a258 1
 * Delivers a request to the X server
d279 1
a279 1
 * Delivers a request to the X server
d334 1
a334 1
 * Delivers a request to the X server
d364 1
a364 1
 * Delivers a request to the X server
d391 1
a391 1
 * Delivers a request to the X server
d417 1
a417 1
 * Delivers a request to the X server
d440 1
a440 1
 * Delivers a request to the X server
d494 1
a494 1
 * Delivers a request to the X server
d545 1
a545 1
 * Delivers a request to the X server
d584 1
a584 1
 * Delivers a request to the X server
d657 1
a657 1
 * Delivers a request to the X server
d695 1
a695 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@a48 1
    xcb_shm_seg_t  shmseg; /**<  */
d52 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
