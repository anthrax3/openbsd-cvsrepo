head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	mKDGsTNpiR2zRHYQ;

1.6
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	01TEvO4uNHLqFv7N;

1.5
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from render.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Render_API XCB Render API
 * @@brief Render XCB Protocol Implementation.
 * @@{
 **/

#ifndef __RENDER_H
#define __RENDER_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_RENDER_MAJOR_VERSION 0
#define XCB_RENDER_MINOR_VERSION 11

extern xcb_extension_t xcb_render_id;

typedef enum xcb_render_pict_type_t {
    XCB_RENDER_PICT_TYPE_INDEXED = 0,
    XCB_RENDER_PICT_TYPE_DIRECT = 1
} xcb_render_pict_type_t;

typedef enum xcb_render_picture_enum_t {
    XCB_RENDER_PICTURE_NONE = 0
} xcb_render_picture_enum_t;

typedef enum xcb_render_pict_op_t {
    XCB_RENDER_PICT_OP_CLEAR = 0,
    XCB_RENDER_PICT_OP_SRC = 1,
    XCB_RENDER_PICT_OP_DST = 2,
    XCB_RENDER_PICT_OP_OVER = 3,
    XCB_RENDER_PICT_OP_OVER_REVERSE = 4,
    XCB_RENDER_PICT_OP_IN = 5,
    XCB_RENDER_PICT_OP_IN_REVERSE = 6,
    XCB_RENDER_PICT_OP_OUT = 7,
    XCB_RENDER_PICT_OP_OUT_REVERSE = 8,
    XCB_RENDER_PICT_OP_ATOP = 9,
    XCB_RENDER_PICT_OP_ATOP_REVERSE = 10,
    XCB_RENDER_PICT_OP_XOR = 11,
    XCB_RENDER_PICT_OP_ADD = 12,
    XCB_RENDER_PICT_OP_SATURATE = 13,
    XCB_RENDER_PICT_OP_DISJOINT_CLEAR = 16,
    XCB_RENDER_PICT_OP_DISJOINT_SRC = 17,
    XCB_RENDER_PICT_OP_DISJOINT_DST = 18,
    XCB_RENDER_PICT_OP_DISJOINT_OVER = 19,
    XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE = 20,
    XCB_RENDER_PICT_OP_DISJOINT_IN = 21,
    XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE = 22,
    XCB_RENDER_PICT_OP_DISJOINT_OUT = 23,
    XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE = 24,
    XCB_RENDER_PICT_OP_DISJOINT_ATOP = 25,
    XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE = 26,
    XCB_RENDER_PICT_OP_DISJOINT_XOR = 27,
    XCB_RENDER_PICT_OP_CONJOINT_CLEAR = 32,
    XCB_RENDER_PICT_OP_CONJOINT_SRC = 33,
    XCB_RENDER_PICT_OP_CONJOINT_DST = 34,
    XCB_RENDER_PICT_OP_CONJOINT_OVER = 35,
    XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE = 36,
    XCB_RENDER_PICT_OP_CONJOINT_IN = 37,
    XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE = 38,
    XCB_RENDER_PICT_OP_CONJOINT_OUT = 39,
    XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE = 40,
    XCB_RENDER_PICT_OP_CONJOINT_ATOP = 41,
    XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE = 42,
    XCB_RENDER_PICT_OP_CONJOINT_XOR = 43,
    XCB_RENDER_PICT_OP_MULTIPLY = 48,
    XCB_RENDER_PICT_OP_SCREEN = 49,
    XCB_RENDER_PICT_OP_OVERLAY = 50,
    XCB_RENDER_PICT_OP_DARKEN = 51,
    XCB_RENDER_PICT_OP_LIGHTEN = 52,
    XCB_RENDER_PICT_OP_COLOR_DODGE = 53,
    XCB_RENDER_PICT_OP_COLOR_BURN = 54,
    XCB_RENDER_PICT_OP_HARD_LIGHT = 55,
    XCB_RENDER_PICT_OP_SOFT_LIGHT = 56,
    XCB_RENDER_PICT_OP_DIFFERENCE = 57,
    XCB_RENDER_PICT_OP_EXCLUSION = 58,
    XCB_RENDER_PICT_OP_HSL_HUE = 59,
    XCB_RENDER_PICT_OP_HSL_SATURATION = 60,
    XCB_RENDER_PICT_OP_HSL_COLOR = 61,
    XCB_RENDER_PICT_OP_HSL_LUMINOSITY = 62
} xcb_render_pict_op_t;

typedef enum xcb_render_poly_edge_t {
    XCB_RENDER_POLY_EDGE_SHARP = 0,
    XCB_RENDER_POLY_EDGE_SMOOTH = 1
} xcb_render_poly_edge_t;

typedef enum xcb_render_poly_mode_t {
    XCB_RENDER_POLY_MODE_PRECISE = 0,
    XCB_RENDER_POLY_MODE_IMPRECISE = 1
} xcb_render_poly_mode_t;

typedef enum xcb_render_cp_t {
    XCB_RENDER_CP_REPEAT = 1,
    XCB_RENDER_CP_ALPHA_MAP = 2,
    XCB_RENDER_CP_ALPHA_X_ORIGIN = 4,
    XCB_RENDER_CP_ALPHA_Y_ORIGIN = 8,
    XCB_RENDER_CP_CLIP_X_ORIGIN = 16,
    XCB_RENDER_CP_CLIP_Y_ORIGIN = 32,
    XCB_RENDER_CP_CLIP_MASK = 64,
    XCB_RENDER_CP_GRAPHICS_EXPOSURE = 128,
    XCB_RENDER_CP_SUBWINDOW_MODE = 256,
    XCB_RENDER_CP_POLY_EDGE = 512,
    XCB_RENDER_CP_POLY_MODE = 1024,
    XCB_RENDER_CP_DITHER = 2048,
    XCB_RENDER_CP_COMPONENT_ALPHA = 4096
} xcb_render_cp_t;

typedef enum xcb_render_sub_pixel_t {
    XCB_RENDER_SUB_PIXEL_UNKNOWN = 0,
    XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB = 1,
    XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR = 2,
    XCB_RENDER_SUB_PIXEL_VERTICAL_RGB = 3,
    XCB_RENDER_SUB_PIXEL_VERTICAL_BGR = 4,
    XCB_RENDER_SUB_PIXEL_NONE = 5
} xcb_render_sub_pixel_t;

typedef enum xcb_render_repeat_t {
    XCB_RENDER_REPEAT_NONE = 0,
    XCB_RENDER_REPEAT_NORMAL = 1,
    XCB_RENDER_REPEAT_PAD = 2,
    XCB_RENDER_REPEAT_REFLECT = 3
} xcb_render_repeat_t;

typedef uint32_t xcb_render_glyph_t;

/**
 * @@brief xcb_render_glyph_iterator_t
 **/
typedef struct xcb_render_glyph_iterator_t {
    xcb_render_glyph_t *data;
    int                 rem;
    int                 index;
} xcb_render_glyph_iterator_t;

typedef uint32_t xcb_render_glyphset_t;

/**
 * @@brief xcb_render_glyphset_iterator_t
 **/
typedef struct xcb_render_glyphset_iterator_t {
    xcb_render_glyphset_t *data;
    int                    rem;
    int                    index;
} xcb_render_glyphset_iterator_t;

typedef uint32_t xcb_render_picture_t;

/**
 * @@brief xcb_render_picture_iterator_t
 **/
typedef struct xcb_render_picture_iterator_t {
    xcb_render_picture_t *data;
    int                   rem;
    int                   index;
} xcb_render_picture_iterator_t;

typedef uint32_t xcb_render_pictformat_t;

/**
 * @@brief xcb_render_pictformat_iterator_t
 **/
typedef struct xcb_render_pictformat_iterator_t {
    xcb_render_pictformat_t *data;
    int                      rem;
    int                      index;
} xcb_render_pictformat_iterator_t;

typedef int32_t xcb_render_fixed_t;

/**
 * @@brief xcb_render_fixed_iterator_t
 **/
typedef struct xcb_render_fixed_iterator_t {
    xcb_render_fixed_t *data;
    int                 rem;
    int                 index;
} xcb_render_fixed_iterator_t;

/** Opcode for xcb_render_pict_format. */
#define XCB_RENDER_PICT_FORMAT 0

/**
 * @@brief xcb_render_pict_format_error_t
 **/
typedef struct xcb_render_pict_format_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_render_pict_format_error_t;

/** Opcode for xcb_render_picture. */
#define XCB_RENDER_PICTURE 1

/**
 * @@brief xcb_render_picture_error_t
 **/
typedef struct xcb_render_picture_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_render_picture_error_t;

/** Opcode for xcb_render_pict_op. */
#define XCB_RENDER_PICT_OP 2

/**
 * @@brief xcb_render_pict_op_error_t
 **/
typedef struct xcb_render_pict_op_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_render_pict_op_error_t;

/** Opcode for xcb_render_glyph_set. */
#define XCB_RENDER_GLYPH_SET 3

/**
 * @@brief xcb_render_glyph_set_error_t
 **/
typedef struct xcb_render_glyph_set_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_render_glyph_set_error_t;

/** Opcode for xcb_render_glyph. */
#define XCB_RENDER_GLYPH 4

/**
 * @@brief xcb_render_glyph_error_t
 **/
typedef struct xcb_render_glyph_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
} xcb_render_glyph_error_t;

/**
 * @@brief xcb_render_directformat_t
 **/
typedef struct xcb_render_directformat_t {
    uint16_t red_shift;
    uint16_t red_mask;
    uint16_t green_shift;
    uint16_t green_mask;
    uint16_t blue_shift;
    uint16_t blue_mask;
    uint16_t alpha_shift;
    uint16_t alpha_mask;
} xcb_render_directformat_t;

/**
 * @@brief xcb_render_directformat_iterator_t
 **/
typedef struct xcb_render_directformat_iterator_t {
    xcb_render_directformat_t *data;
    int                        rem;
    int                        index;
} xcb_render_directformat_iterator_t;

/**
 * @@brief xcb_render_pictforminfo_t
 **/
typedef struct xcb_render_pictforminfo_t {
    xcb_render_pictformat_t   id;
    uint8_t                   type;
    uint8_t                   depth;
    uint8_t                   pad0[2];
    xcb_render_directformat_t direct;
    xcb_colormap_t            colormap;
} xcb_render_pictforminfo_t;

/**
 * @@brief xcb_render_pictforminfo_iterator_t
 **/
typedef struct xcb_render_pictforminfo_iterator_t {
    xcb_render_pictforminfo_t *data;
    int                        rem;
    int                        index;
} xcb_render_pictforminfo_iterator_t;

/**
 * @@brief xcb_render_pictvisual_t
 **/
typedef struct xcb_render_pictvisual_t {
    xcb_visualid_t          visual;
    xcb_render_pictformat_t format;
} xcb_render_pictvisual_t;

/**
 * @@brief xcb_render_pictvisual_iterator_t
 **/
typedef struct xcb_render_pictvisual_iterator_t {
    xcb_render_pictvisual_t *data;
    int                      rem;
    int                      index;
} xcb_render_pictvisual_iterator_t;

/**
 * @@brief xcb_render_pictdepth_t
 **/
typedef struct xcb_render_pictdepth_t {
    uint8_t  depth;
    uint8_t  pad0;
    uint16_t num_visuals;
    uint8_t  pad1[4];
} xcb_render_pictdepth_t;

/**
 * @@brief xcb_render_pictdepth_iterator_t
 **/
typedef struct xcb_render_pictdepth_iterator_t {
    xcb_render_pictdepth_t *data;
    int                     rem;
    int                     index;
} xcb_render_pictdepth_iterator_t;

/**
 * @@brief xcb_render_pictscreen_t
 **/
typedef struct xcb_render_pictscreen_t {
    uint32_t                num_depths;
    xcb_render_pictformat_t fallback;
} xcb_render_pictscreen_t;

/**
 * @@brief xcb_render_pictscreen_iterator_t
 **/
typedef struct xcb_render_pictscreen_iterator_t {
    xcb_render_pictscreen_t *data;
    int                      rem;
    int                      index;
} xcb_render_pictscreen_iterator_t;

/**
 * @@brief xcb_render_indexvalue_t
 **/
typedef struct xcb_render_indexvalue_t {
    uint32_t pixel;
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint16_t alpha;
} xcb_render_indexvalue_t;

/**
 * @@brief xcb_render_indexvalue_iterator_t
 **/
typedef struct xcb_render_indexvalue_iterator_t {
    xcb_render_indexvalue_t *data;
    int                      rem;
    int                      index;
} xcb_render_indexvalue_iterator_t;

/**
 * @@brief xcb_render_color_t
 **/
typedef struct xcb_render_color_t {
    uint16_t red;
    uint16_t green;
    uint16_t blue;
    uint16_t alpha;
} xcb_render_color_t;

/**
 * @@brief xcb_render_color_iterator_t
 **/
typedef struct xcb_render_color_iterator_t {
    xcb_render_color_t *data;
    int                 rem;
    int                 index;
} xcb_render_color_iterator_t;

/**
 * @@brief xcb_render_pointfix_t
 **/
typedef struct xcb_render_pointfix_t {
    xcb_render_fixed_t x;
    xcb_render_fixed_t y;
} xcb_render_pointfix_t;

/**
 * @@brief xcb_render_pointfix_iterator_t
 **/
typedef struct xcb_render_pointfix_iterator_t {
    xcb_render_pointfix_t *data;
    int                    rem;
    int                    index;
} xcb_render_pointfix_iterator_t;

/**
 * @@brief xcb_render_linefix_t
 **/
typedef struct xcb_render_linefix_t {
    xcb_render_pointfix_t p1;
    xcb_render_pointfix_t p2;
} xcb_render_linefix_t;

/**
 * @@brief xcb_render_linefix_iterator_t
 **/
typedef struct xcb_render_linefix_iterator_t {
    xcb_render_linefix_t *data;
    int                   rem;
    int                   index;
} xcb_render_linefix_iterator_t;

/**
 * @@brief xcb_render_triangle_t
 **/
typedef struct xcb_render_triangle_t {
    xcb_render_pointfix_t p1;
    xcb_render_pointfix_t p2;
    xcb_render_pointfix_t p3;
} xcb_render_triangle_t;

/**
 * @@brief xcb_render_triangle_iterator_t
 **/
typedef struct xcb_render_triangle_iterator_t {
    xcb_render_triangle_t *data;
    int                    rem;
    int                    index;
} xcb_render_triangle_iterator_t;

/**
 * @@brief xcb_render_trapezoid_t
 **/
typedef struct xcb_render_trapezoid_t {
    xcb_render_fixed_t   top;
    xcb_render_fixed_t   bottom;
    xcb_render_linefix_t left;
    xcb_render_linefix_t right;
} xcb_render_trapezoid_t;

/**
 * @@brief xcb_render_trapezoid_iterator_t
 **/
typedef struct xcb_render_trapezoid_iterator_t {
    xcb_render_trapezoid_t *data;
    int                     rem;
    int                     index;
} xcb_render_trapezoid_iterator_t;

/**
 * @@brief xcb_render_glyphinfo_t
 **/
typedef struct xcb_render_glyphinfo_t {
    uint16_t width;
    uint16_t height;
    int16_t  x;
    int16_t  y;
    int16_t  x_off;
    int16_t  y_off;
} xcb_render_glyphinfo_t;

/**
 * @@brief xcb_render_glyphinfo_iterator_t
 **/
typedef struct xcb_render_glyphinfo_iterator_t {
    xcb_render_glyphinfo_t *data;
    int                     rem;
    int                     index;
} xcb_render_glyphinfo_iterator_t;

/**
 * @@brief xcb_render_query_version_cookie_t
 **/
typedef struct xcb_render_query_version_cookie_t {
    unsigned int sequence;
} xcb_render_query_version_cookie_t;

/** Opcode for xcb_render_query_version. */
#define XCB_RENDER_QUERY_VERSION 0

/**
 * @@brief xcb_render_query_version_request_t
 **/
typedef struct xcb_render_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t client_major_version;
    uint32_t client_minor_version;
} xcb_render_query_version_request_t;

/**
 * @@brief xcb_render_query_version_reply_t
 **/
typedef struct xcb_render_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint8_t  pad1[16];
} xcb_render_query_version_reply_t;

/**
 * @@brief xcb_render_query_pict_formats_cookie_t
 **/
typedef struct xcb_render_query_pict_formats_cookie_t {
    unsigned int sequence;
} xcb_render_query_pict_formats_cookie_t;

/** Opcode for xcb_render_query_pict_formats. */
#define XCB_RENDER_QUERY_PICT_FORMATS 1

/**
 * @@brief xcb_render_query_pict_formats_request_t
 **/
typedef struct xcb_render_query_pict_formats_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_render_query_pict_formats_request_t;

/**
 * @@brief xcb_render_query_pict_formats_reply_t
 **/
typedef struct xcb_render_query_pict_formats_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_formats;
    uint32_t num_screens;
    uint32_t num_depths;
    uint32_t num_visuals;
    uint32_t num_subpixel;
    uint8_t  pad1[4];
} xcb_render_query_pict_formats_reply_t;

/**
 * @@brief xcb_render_query_pict_index_values_cookie_t
 **/
typedef struct xcb_render_query_pict_index_values_cookie_t {
    unsigned int sequence;
} xcb_render_query_pict_index_values_cookie_t;

/** Opcode for xcb_render_query_pict_index_values. */
#define XCB_RENDER_QUERY_PICT_INDEX_VALUES 2

/**
 * @@brief xcb_render_query_pict_index_values_request_t
 **/
typedef struct xcb_render_query_pict_index_values_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    xcb_render_pictformat_t format;
} xcb_render_query_pict_index_values_request_t;

/**
 * @@brief xcb_render_query_pict_index_values_reply_t
 **/
typedef struct xcb_render_query_pict_index_values_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_values;
    uint8_t  pad1[20];
} xcb_render_query_pict_index_values_reply_t;

/**
 * @@brief xcb_render_create_picture_value_list_t
 **/
typedef struct xcb_render_create_picture_value_list_t {
    uint32_t             repeat;
    xcb_render_picture_t alphamap;
    int32_t              alphaxorigin;
    int32_t              alphayorigin;
    int32_t              clipxorigin;
    int32_t              clipyorigin;
    xcb_pixmap_t         clipmask;
    uint32_t             graphicsexposure;
    uint32_t             subwindowmode;
    uint32_t             polyedge;
    uint32_t             polymode;
    xcb_atom_t           dither;
    uint32_t             componentalpha;
} xcb_render_create_picture_value_list_t;

/** Opcode for xcb_render_create_picture. */
#define XCB_RENDER_CREATE_PICTURE 4

/**
 * @@brief xcb_render_create_picture_request_t
 **/
typedef struct xcb_render_create_picture_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    xcb_render_picture_t    pid;
    xcb_drawable_t          drawable;
    xcb_render_pictformat_t format;
    uint32_t                value_mask;
} xcb_render_create_picture_request_t;

/**
 * @@brief xcb_render_change_picture_value_list_t
 **/
typedef struct xcb_render_change_picture_value_list_t {
    uint32_t             repeat;
    xcb_render_picture_t alphamap;
    int32_t              alphaxorigin;
    int32_t              alphayorigin;
    int32_t              clipxorigin;
    int32_t              clipyorigin;
    xcb_pixmap_t         clipmask;
    uint32_t             graphicsexposure;
    uint32_t             subwindowmode;
    uint32_t             polyedge;
    uint32_t             polymode;
    xcb_atom_t           dither;
    uint32_t             componentalpha;
} xcb_render_change_picture_value_list_t;

/** Opcode for xcb_render_change_picture. */
#define XCB_RENDER_CHANGE_PICTURE 5

/**
 * @@brief xcb_render_change_picture_request_t
 **/
typedef struct xcb_render_change_picture_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
    uint32_t             value_mask;
} xcb_render_change_picture_request_t;

/** Opcode for xcb_render_set_picture_clip_rectangles. */
#define XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES 6

/**
 * @@brief xcb_render_set_picture_clip_rectangles_request_t
 **/
typedef struct xcb_render_set_picture_clip_rectangles_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
    int16_t              clip_x_origin;
    int16_t              clip_y_origin;
} xcb_render_set_picture_clip_rectangles_request_t;

/** Opcode for xcb_render_free_picture. */
#define XCB_RENDER_FREE_PICTURE 7

/**
 * @@brief xcb_render_free_picture_request_t
 **/
typedef struct xcb_render_free_picture_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
} xcb_render_free_picture_request_t;

/** Opcode for xcb_render_composite. */
#define XCB_RENDER_COMPOSITE 8

/**
 * @@brief xcb_render_composite_request_t
 **/
typedef struct xcb_render_composite_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    uint8_t              op;
    uint8_t              pad0[3];
    xcb_render_picture_t src;
    xcb_render_picture_t mask;
    xcb_render_picture_t dst;
    int16_t              src_x;
    int16_t              src_y;
    int16_t              mask_x;
    int16_t              mask_y;
    int16_t              dst_x;
    int16_t              dst_y;
    uint16_t             width;
    uint16_t             height;
} xcb_render_composite_request_t;

/** Opcode for xcb_render_trapezoids. */
#define XCB_RENDER_TRAPEZOIDS 10

/**
 * @@brief xcb_render_trapezoids_request_t
 **/
typedef struct xcb_render_trapezoids_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_trapezoids_request_t;

/** Opcode for xcb_render_triangles. */
#define XCB_RENDER_TRIANGLES 11

/**
 * @@brief xcb_render_triangles_request_t
 **/
typedef struct xcb_render_triangles_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_triangles_request_t;

/** Opcode for xcb_render_tri_strip. */
#define XCB_RENDER_TRI_STRIP 12

/**
 * @@brief xcb_render_tri_strip_request_t
 **/
typedef struct xcb_render_tri_strip_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_tri_strip_request_t;

/** Opcode for xcb_render_tri_fan. */
#define XCB_RENDER_TRI_FAN 13

/**
 * @@brief xcb_render_tri_fan_request_t
 **/
typedef struct xcb_render_tri_fan_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_tri_fan_request_t;

/** Opcode for xcb_render_create_glyph_set. */
#define XCB_RENDER_CREATE_GLYPH_SET 17

/**
 * @@brief xcb_render_create_glyph_set_request_t
 **/
typedef struct xcb_render_create_glyph_set_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    xcb_render_glyphset_t   gsid;
    xcb_render_pictformat_t format;
} xcb_render_create_glyph_set_request_t;

/** Opcode for xcb_render_reference_glyph_set. */
#define XCB_RENDER_REFERENCE_GLYPH_SET 18

/**
 * @@brief xcb_render_reference_glyph_set_request_t
 **/
typedef struct xcb_render_reference_glyph_set_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_glyphset_t gsid;
    xcb_render_glyphset_t existing;
} xcb_render_reference_glyph_set_request_t;

/** Opcode for xcb_render_free_glyph_set. */
#define XCB_RENDER_FREE_GLYPH_SET 19

/**
 * @@brief xcb_render_free_glyph_set_request_t
 **/
typedef struct xcb_render_free_glyph_set_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_glyphset_t glyphset;
} xcb_render_free_glyph_set_request_t;

/** Opcode for xcb_render_add_glyphs. */
#define XCB_RENDER_ADD_GLYPHS 20

/**
 * @@brief xcb_render_add_glyphs_request_t
 **/
typedef struct xcb_render_add_glyphs_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_glyphset_t glyphset;
    uint32_t              glyphs_len;
} xcb_render_add_glyphs_request_t;

/** Opcode for xcb_render_free_glyphs. */
#define XCB_RENDER_FREE_GLYPHS 22

/**
 * @@brief xcb_render_free_glyphs_request_t
 **/
typedef struct xcb_render_free_glyphs_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_glyphset_t glyphset;
} xcb_render_free_glyphs_request_t;

/** Opcode for xcb_render_composite_glyphs_8. */
#define XCB_RENDER_COMPOSITE_GLYPHS_8 23

/**
 * @@brief xcb_render_composite_glyphs_8_request_t
 **/
typedef struct xcb_render_composite_glyphs_8_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    xcb_render_glyphset_t   glyphset;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_composite_glyphs_8_request_t;

/** Opcode for xcb_render_composite_glyphs_16. */
#define XCB_RENDER_COMPOSITE_GLYPHS_16 24

/**
 * @@brief xcb_render_composite_glyphs_16_request_t
 **/
typedef struct xcb_render_composite_glyphs_16_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    xcb_render_glyphset_t   glyphset;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_composite_glyphs_16_request_t;

/** Opcode for xcb_render_composite_glyphs_32. */
#define XCB_RENDER_COMPOSITE_GLYPHS_32 25

/**
 * @@brief xcb_render_composite_glyphs_32_request_t
 **/
typedef struct xcb_render_composite_glyphs_32_request_t {
    uint8_t                 major_opcode;
    uint8_t                 minor_opcode;
    uint16_t                length;
    uint8_t                 op;
    uint8_t                 pad0[3];
    xcb_render_picture_t    src;
    xcb_render_picture_t    dst;
    xcb_render_pictformat_t mask_format;
    xcb_render_glyphset_t   glyphset;
    int16_t                 src_x;
    int16_t                 src_y;
} xcb_render_composite_glyphs_32_request_t;

/** Opcode for xcb_render_fill_rectangles. */
#define XCB_RENDER_FILL_RECTANGLES 26

/**
 * @@brief xcb_render_fill_rectangles_request_t
 **/
typedef struct xcb_render_fill_rectangles_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    uint8_t              op;
    uint8_t              pad0[3];
    xcb_render_picture_t dst;
    xcb_render_color_t   color;
} xcb_render_fill_rectangles_request_t;

/** Opcode for xcb_render_create_cursor. */
#define XCB_RENDER_CREATE_CURSOR 27

/**
 * @@brief xcb_render_create_cursor_request_t
 **/
typedef struct xcb_render_create_cursor_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_cursor_t         cid;
    xcb_render_picture_t source;
    uint16_t             x;
    uint16_t             y;
} xcb_render_create_cursor_request_t;

/**
 * @@brief xcb_render_transform_t
 **/
typedef struct xcb_render_transform_t {
    xcb_render_fixed_t matrix11;
    xcb_render_fixed_t matrix12;
    xcb_render_fixed_t matrix13;
    xcb_render_fixed_t matrix21;
    xcb_render_fixed_t matrix22;
    xcb_render_fixed_t matrix23;
    xcb_render_fixed_t matrix31;
    xcb_render_fixed_t matrix32;
    xcb_render_fixed_t matrix33;
} xcb_render_transform_t;

/**
 * @@brief xcb_render_transform_iterator_t
 **/
typedef struct xcb_render_transform_iterator_t {
    xcb_render_transform_t *data;
    int                     rem;
    int                     index;
} xcb_render_transform_iterator_t;

/** Opcode for xcb_render_set_picture_transform. */
#define XCB_RENDER_SET_PICTURE_TRANSFORM 28

/**
 * @@brief xcb_render_set_picture_transform_request_t
 **/
typedef struct xcb_render_set_picture_transform_request_t {
    uint8_t                major_opcode;
    uint8_t                minor_opcode;
    uint16_t               length;
    xcb_render_picture_t   picture;
    xcb_render_transform_t transform;
} xcb_render_set_picture_transform_request_t;

/**
 * @@brief xcb_render_query_filters_cookie_t
 **/
typedef struct xcb_render_query_filters_cookie_t {
    unsigned int sequence;
} xcb_render_query_filters_cookie_t;

/** Opcode for xcb_render_query_filters. */
#define XCB_RENDER_QUERY_FILTERS 29

/**
 * @@brief xcb_render_query_filters_request_t
 **/
typedef struct xcb_render_query_filters_request_t {
    uint8_t        major_opcode;
    uint8_t        minor_opcode;
    uint16_t       length;
    xcb_drawable_t drawable;
} xcb_render_query_filters_request_t;

/**
 * @@brief xcb_render_query_filters_reply_t
 **/
typedef struct xcb_render_query_filters_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_aliases;
    uint32_t num_filters;
    uint8_t  pad1[16];
} xcb_render_query_filters_reply_t;

/** Opcode for xcb_render_set_picture_filter. */
#define XCB_RENDER_SET_PICTURE_FILTER 30

/**
 * @@brief xcb_render_set_picture_filter_request_t
 **/
typedef struct xcb_render_set_picture_filter_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
    uint16_t             filter_len;
    uint8_t              pad0[2];
} xcb_render_set_picture_filter_request_t;

/**
 * @@brief xcb_render_animcursorelt_t
 **/
typedef struct xcb_render_animcursorelt_t {
    xcb_cursor_t cursor;
    uint32_t     delay;
} xcb_render_animcursorelt_t;

/**
 * @@brief xcb_render_animcursorelt_iterator_t
 **/
typedef struct xcb_render_animcursorelt_iterator_t {
    xcb_render_animcursorelt_t *data;
    int                         rem;
    int                         index;
} xcb_render_animcursorelt_iterator_t;

/** Opcode for xcb_render_create_anim_cursor. */
#define XCB_RENDER_CREATE_ANIM_CURSOR 31

/**
 * @@brief xcb_render_create_anim_cursor_request_t
 **/
typedef struct xcb_render_create_anim_cursor_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_cursor_t cid;
} xcb_render_create_anim_cursor_request_t;

/**
 * @@brief xcb_render_spanfix_t
 **/
typedef struct xcb_render_spanfix_t {
    xcb_render_fixed_t l;
    xcb_render_fixed_t r;
    xcb_render_fixed_t y;
} xcb_render_spanfix_t;

/**
 * @@brief xcb_render_spanfix_iterator_t
 **/
typedef struct xcb_render_spanfix_iterator_t {
    xcb_render_spanfix_t *data;
    int                   rem;
    int                   index;
} xcb_render_spanfix_iterator_t;

/**
 * @@brief xcb_render_trap_t
 **/
typedef struct xcb_render_trap_t {
    xcb_render_spanfix_t top;
    xcb_render_spanfix_t bot;
} xcb_render_trap_t;

/**
 * @@brief xcb_render_trap_iterator_t
 **/
typedef struct xcb_render_trap_iterator_t {
    xcb_render_trap_t *data;
    int                rem;
    int                index;
} xcb_render_trap_iterator_t;

/** Opcode for xcb_render_add_traps. */
#define XCB_RENDER_ADD_TRAPS 32

/**
 * @@brief xcb_render_add_traps_request_t
 **/
typedef struct xcb_render_add_traps_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
    int16_t              x_off;
    int16_t              y_off;
} xcb_render_add_traps_request_t;

/** Opcode for xcb_render_create_solid_fill. */
#define XCB_RENDER_CREATE_SOLID_FILL 33

/**
 * @@brief xcb_render_create_solid_fill_request_t
 **/
typedef struct xcb_render_create_solid_fill_request_t {
    uint8_t              major_opcode;
    uint8_t              minor_opcode;
    uint16_t             length;
    xcb_render_picture_t picture;
    xcb_render_color_t   color;
} xcb_render_create_solid_fill_request_t;

/** Opcode for xcb_render_create_linear_gradient. */
#define XCB_RENDER_CREATE_LINEAR_GRADIENT 34

/**
 * @@brief xcb_render_create_linear_gradient_request_t
 **/
typedef struct xcb_render_create_linear_gradient_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_picture_t  picture;
    xcb_render_pointfix_t p1;
    xcb_render_pointfix_t p2;
    uint32_t              num_stops;
} xcb_render_create_linear_gradient_request_t;

/** Opcode for xcb_render_create_radial_gradient. */
#define XCB_RENDER_CREATE_RADIAL_GRADIENT 35

/**
 * @@brief xcb_render_create_radial_gradient_request_t
 **/
typedef struct xcb_render_create_radial_gradient_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_picture_t  picture;
    xcb_render_pointfix_t inner;
    xcb_render_pointfix_t outer;
    xcb_render_fixed_t    inner_radius;
    xcb_render_fixed_t    outer_radius;
    uint32_t              num_stops;
} xcb_render_create_radial_gradient_request_t;

/** Opcode for xcb_render_create_conical_gradient. */
#define XCB_RENDER_CREATE_CONICAL_GRADIENT 36

/**
 * @@brief xcb_render_create_conical_gradient_request_t
 **/
typedef struct xcb_render_create_conical_gradient_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_render_picture_t  picture;
    xcb_render_pointfix_t center;
    xcb_render_fixed_t    angle;
    uint32_t              num_stops;
} xcb_render_create_conical_gradient_request_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_glyph_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_glyph_t)
 */
void
xcb_render_glyph_next (xcb_render_glyph_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_glyph_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_glyph_end (xcb_render_glyph_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_glyphset_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_glyphset_t)
 */
void
xcb_render_glyphset_next (xcb_render_glyphset_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_glyphset_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_glyphset_end (xcb_render_glyphset_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_picture_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_picture_t)
 */
void
xcb_render_picture_next (xcb_render_picture_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_picture_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_picture_end (xcb_render_picture_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pictformat_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pictformat_t)
 */
void
xcb_render_pictformat_next (xcb_render_pictformat_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pictformat_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pictformat_end (xcb_render_pictformat_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_fixed_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_fixed_t)
 */
void
xcb_render_fixed_next (xcb_render_fixed_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_fixed_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_fixed_end (xcb_render_fixed_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_directformat_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_directformat_t)
 */
void
xcb_render_directformat_next (xcb_render_directformat_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_directformat_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_directformat_end (xcb_render_directformat_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pictforminfo_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pictforminfo_t)
 */
void
xcb_render_pictforminfo_next (xcb_render_pictforminfo_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pictforminfo_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pictforminfo_end (xcb_render_pictforminfo_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pictvisual_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pictvisual_t)
 */
void
xcb_render_pictvisual_next (xcb_render_pictvisual_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pictvisual_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pictvisual_end (xcb_render_pictvisual_iterator_t i);

int
xcb_render_pictdepth_sizeof (const void  *_buffer);

xcb_render_pictvisual_t *
xcb_render_pictdepth_visuals (const xcb_render_pictdepth_t *R);

int
xcb_render_pictdepth_visuals_length (const xcb_render_pictdepth_t *R);

xcb_render_pictvisual_iterator_t
xcb_render_pictdepth_visuals_iterator (const xcb_render_pictdepth_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pictdepth_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pictdepth_t)
 */
void
xcb_render_pictdepth_next (xcb_render_pictdepth_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pictdepth_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pictdepth_end (xcb_render_pictdepth_iterator_t i);

int
xcb_render_pictscreen_sizeof (const void  *_buffer);

int
xcb_render_pictscreen_depths_length (const xcb_render_pictscreen_t *R);

xcb_render_pictdepth_iterator_t
xcb_render_pictscreen_depths_iterator (const xcb_render_pictscreen_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pictscreen_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pictscreen_t)
 */
void
xcb_render_pictscreen_next (xcb_render_pictscreen_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pictscreen_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pictscreen_end (xcb_render_pictscreen_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_indexvalue_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_indexvalue_t)
 */
void
xcb_render_indexvalue_next (xcb_render_indexvalue_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_indexvalue_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_indexvalue_end (xcb_render_indexvalue_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_color_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_color_t)
 */
void
xcb_render_color_next (xcb_render_color_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_color_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_color_end (xcb_render_color_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_pointfix_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_pointfix_t)
 */
void
xcb_render_pointfix_next (xcb_render_pointfix_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_pointfix_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_pointfix_end (xcb_render_pointfix_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_linefix_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_linefix_t)
 */
void
xcb_render_linefix_next (xcb_render_linefix_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_linefix_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_linefix_end (xcb_render_linefix_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_triangle_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_triangle_t)
 */
void
xcb_render_triangle_next (xcb_render_triangle_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_triangle_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_triangle_end (xcb_render_triangle_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_trapezoid_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_trapezoid_t)
 */
void
xcb_render_trapezoid_next (xcb_render_trapezoid_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_trapezoid_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_trapezoid_end (xcb_render_trapezoid_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_glyphinfo_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_glyphinfo_t)
 */
void
xcb_render_glyphinfo_next (xcb_render_glyphinfo_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_glyphinfo_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_glyphinfo_end (xcb_render_glyphinfo_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_render_query_version_cookie_t
xcb_render_query_version (xcb_connection_t *c,
                          uint32_t          client_major_version,
                          uint32_t          client_minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_render_query_version_cookie_t
xcb_render_query_version_unchecked (xcb_connection_t *c,
                                    uint32_t          client_major_version,
                                    uint32_t          client_minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_render_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_render_query_version_reply_t *
xcb_render_query_version_reply (xcb_connection_t                   *c,
                                xcb_render_query_version_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_render_query_pict_formats_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_render_query_pict_formats_cookie_t
xcb_render_query_pict_formats (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_render_query_pict_formats_cookie_t
xcb_render_query_pict_formats_unchecked (xcb_connection_t *c);

xcb_render_pictforminfo_t *
xcb_render_query_pict_formats_formats (const xcb_render_query_pict_formats_reply_t *R);

int
xcb_render_query_pict_formats_formats_length (const xcb_render_query_pict_formats_reply_t *R);

xcb_render_pictforminfo_iterator_t
xcb_render_query_pict_formats_formats_iterator (const xcb_render_query_pict_formats_reply_t *R);

int
xcb_render_query_pict_formats_screens_length (const xcb_render_query_pict_formats_reply_t *R);

xcb_render_pictscreen_iterator_t
xcb_render_query_pict_formats_screens_iterator (const xcb_render_query_pict_formats_reply_t *R);

uint32_t *
xcb_render_query_pict_formats_subpixels (const xcb_render_query_pict_formats_reply_t *R);

int
xcb_render_query_pict_formats_subpixels_length (const xcb_render_query_pict_formats_reply_t *R);

xcb_generic_iterator_t
xcb_render_query_pict_formats_subpixels_end (const xcb_render_query_pict_formats_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_render_query_pict_formats_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_render_query_pict_formats_reply_t *
xcb_render_query_pict_formats_reply (xcb_connection_t                        *c,
                                     xcb_render_query_pict_formats_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_render_query_pict_index_values_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_render_query_pict_index_values_cookie_t
xcb_render_query_pict_index_values (xcb_connection_t        *c,
                                    xcb_render_pictformat_t  format);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_render_query_pict_index_values_cookie_t
xcb_render_query_pict_index_values_unchecked (xcb_connection_t        *c,
                                              xcb_render_pictformat_t  format);

xcb_render_indexvalue_t *
xcb_render_query_pict_index_values_values (const xcb_render_query_pict_index_values_reply_t *R);

int
xcb_render_query_pict_index_values_values_length (const xcb_render_query_pict_index_values_reply_t *R);

xcb_render_indexvalue_iterator_t
xcb_render_query_pict_index_values_values_iterator (const xcb_render_query_pict_index_values_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_render_query_pict_index_values_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_render_query_pict_index_values_reply_t *
xcb_render_query_pict_index_values_reply (xcb_connection_t                             *c,
                                          xcb_render_query_pict_index_values_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e);

int
xcb_render_create_picture_value_list_serialize (void                                         **_buffer,
                                                uint32_t                                       value_mask,
                                                const xcb_render_create_picture_value_list_t  *_aux);

int
xcb_render_create_picture_value_list_unpack (const void                              *_buffer,
                                             uint32_t                                 value_mask,
                                             xcb_render_create_picture_value_list_t  *_aux);

int
xcb_render_create_picture_value_list_sizeof (const void  *_buffer,
                                             uint32_t     value_mask);

int
xcb_render_create_picture_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_picture_checked (xcb_connection_t        *c,
                                   xcb_render_picture_t     pid,
                                   xcb_drawable_t           drawable,
                                   xcb_render_pictformat_t  format,
                                   uint32_t                 value_mask,
                                   const void              *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_picture (xcb_connection_t        *c,
                           xcb_render_picture_t     pid,
                           xcb_drawable_t           drawable,
                           xcb_render_pictformat_t  format,
                           uint32_t                 value_mask,
                           const void              *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_picture_aux_checked (xcb_connection_t                             *c,
                                       xcb_render_picture_t                          pid,
                                       xcb_drawable_t                                drawable,
                                       xcb_render_pictformat_t                       format,
                                       uint32_t                                      value_mask,
                                       const xcb_render_create_picture_value_list_t *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_picture_aux (xcb_connection_t                             *c,
                               xcb_render_picture_t                          pid,
                               xcb_drawable_t                                drawable,
                               xcb_render_pictformat_t                       format,
                               uint32_t                                      value_mask,
                               const xcb_render_create_picture_value_list_t *value_list);

void *
xcb_render_create_picture_value_list (const xcb_render_create_picture_request_t *R);

int
xcb_render_change_picture_value_list_serialize (void                                         **_buffer,
                                                uint32_t                                       value_mask,
                                                const xcb_render_change_picture_value_list_t  *_aux);

int
xcb_render_change_picture_value_list_unpack (const void                              *_buffer,
                                             uint32_t                                 value_mask,
                                             xcb_render_change_picture_value_list_t  *_aux);

int
xcb_render_change_picture_value_list_sizeof (const void  *_buffer,
                                             uint32_t     value_mask);

int
xcb_render_change_picture_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_change_picture_checked (xcb_connection_t     *c,
                                   xcb_render_picture_t  picture,
                                   uint32_t              value_mask,
                                   const void           *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_change_picture (xcb_connection_t     *c,
                           xcb_render_picture_t  picture,
                           uint32_t              value_mask,
                           const void           *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_change_picture_aux_checked (xcb_connection_t                             *c,
                                       xcb_render_picture_t                          picture,
                                       uint32_t                                      value_mask,
                                       const xcb_render_change_picture_value_list_t *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_change_picture_aux (xcb_connection_t                             *c,
                               xcb_render_picture_t                          picture,
                               uint32_t                                      value_mask,
                               const xcb_render_change_picture_value_list_t *value_list);

void *
xcb_render_change_picture_value_list (const xcb_render_change_picture_request_t *R);

int
xcb_render_set_picture_clip_rectangles_sizeof (const void  *_buffer,
                                               uint32_t     rectangles_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_set_picture_clip_rectangles_checked (xcb_connection_t      *c,
                                                xcb_render_picture_t   picture,
                                                int16_t                clip_x_origin,
                                                int16_t                clip_y_origin,
                                                uint32_t               rectangles_len,
                                                const xcb_rectangle_t *rectangles);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_set_picture_clip_rectangles (xcb_connection_t      *c,
                                        xcb_render_picture_t   picture,
                                        int16_t                clip_x_origin,
                                        int16_t                clip_y_origin,
                                        uint32_t               rectangles_len,
                                        const xcb_rectangle_t *rectangles);

xcb_rectangle_t *
xcb_render_set_picture_clip_rectangles_rectangles (const xcb_render_set_picture_clip_rectangles_request_t *R);

int
xcb_render_set_picture_clip_rectangles_rectangles_length (const xcb_render_set_picture_clip_rectangles_request_t *R);

xcb_rectangle_iterator_t
xcb_render_set_picture_clip_rectangles_rectangles_iterator (const xcb_render_set_picture_clip_rectangles_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_free_picture_checked (xcb_connection_t     *c,
                                 xcb_render_picture_t  picture);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_free_picture (xcb_connection_t     *c,
                         xcb_render_picture_t  picture);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_composite_checked (xcb_connection_t     *c,
                              uint8_t               op,
                              xcb_render_picture_t  src,
                              xcb_render_picture_t  mask,
                              xcb_render_picture_t  dst,
                              int16_t               src_x,
                              int16_t               src_y,
                              int16_t               mask_x,
                              int16_t               mask_y,
                              int16_t               dst_x,
                              int16_t               dst_y,
                              uint16_t              width,
                              uint16_t              height);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_composite (xcb_connection_t     *c,
                      uint8_t               op,
                      xcb_render_picture_t  src,
                      xcb_render_picture_t  mask,
                      xcb_render_picture_t  dst,
                      int16_t               src_x,
                      int16_t               src_y,
                      int16_t               mask_x,
                      int16_t               mask_y,
                      int16_t               dst_x,
                      int16_t               dst_y,
                      uint16_t              width,
                      uint16_t              height);

int
xcb_render_trapezoids_sizeof (const void  *_buffer,
                              uint32_t     traps_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_trapezoids_checked (xcb_connection_t             *c,
                               uint8_t                       op,
                               xcb_render_picture_t          src,
                               xcb_render_picture_t          dst,
                               xcb_render_pictformat_t       mask_format,
                               int16_t                       src_x,
                               int16_t                       src_y,
                               uint32_t                      traps_len,
                               const xcb_render_trapezoid_t *traps);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_trapezoids (xcb_connection_t             *c,
                       uint8_t                       op,
                       xcb_render_picture_t          src,
                       xcb_render_picture_t          dst,
                       xcb_render_pictformat_t       mask_format,
                       int16_t                       src_x,
                       int16_t                       src_y,
                       uint32_t                      traps_len,
                       const xcb_render_trapezoid_t *traps);

xcb_render_trapezoid_t *
xcb_render_trapezoids_traps (const xcb_render_trapezoids_request_t *R);

int
xcb_render_trapezoids_traps_length (const xcb_render_trapezoids_request_t *R);

xcb_render_trapezoid_iterator_t
xcb_render_trapezoids_traps_iterator (const xcb_render_trapezoids_request_t *R);

int
xcb_render_triangles_sizeof (const void  *_buffer,
                             uint32_t     triangles_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_triangles_checked (xcb_connection_t            *c,
                              uint8_t                      op,
                              xcb_render_picture_t         src,
                              xcb_render_picture_t         dst,
                              xcb_render_pictformat_t      mask_format,
                              int16_t                      src_x,
                              int16_t                      src_y,
                              uint32_t                     triangles_len,
                              const xcb_render_triangle_t *triangles);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_triangles (xcb_connection_t            *c,
                      uint8_t                      op,
                      xcb_render_picture_t         src,
                      xcb_render_picture_t         dst,
                      xcb_render_pictformat_t      mask_format,
                      int16_t                      src_x,
                      int16_t                      src_y,
                      uint32_t                     triangles_len,
                      const xcb_render_triangle_t *triangles);

xcb_render_triangle_t *
xcb_render_triangles_triangles (const xcb_render_triangles_request_t *R);

int
xcb_render_triangles_triangles_length (const xcb_render_triangles_request_t *R);

xcb_render_triangle_iterator_t
xcb_render_triangles_triangles_iterator (const xcb_render_triangles_request_t *R);

int
xcb_render_tri_strip_sizeof (const void  *_buffer,
                             uint32_t     points_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_tri_strip_checked (xcb_connection_t            *c,
                              uint8_t                      op,
                              xcb_render_picture_t         src,
                              xcb_render_picture_t         dst,
                              xcb_render_pictformat_t      mask_format,
                              int16_t                      src_x,
                              int16_t                      src_y,
                              uint32_t                     points_len,
                              const xcb_render_pointfix_t *points);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_tri_strip (xcb_connection_t            *c,
                      uint8_t                      op,
                      xcb_render_picture_t         src,
                      xcb_render_picture_t         dst,
                      xcb_render_pictformat_t      mask_format,
                      int16_t                      src_x,
                      int16_t                      src_y,
                      uint32_t                     points_len,
                      const xcb_render_pointfix_t *points);

xcb_render_pointfix_t *
xcb_render_tri_strip_points (const xcb_render_tri_strip_request_t *R);

int
xcb_render_tri_strip_points_length (const xcb_render_tri_strip_request_t *R);

xcb_render_pointfix_iterator_t
xcb_render_tri_strip_points_iterator (const xcb_render_tri_strip_request_t *R);

int
xcb_render_tri_fan_sizeof (const void  *_buffer,
                           uint32_t     points_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_tri_fan_checked (xcb_connection_t            *c,
                            uint8_t                      op,
                            xcb_render_picture_t         src,
                            xcb_render_picture_t         dst,
                            xcb_render_pictformat_t      mask_format,
                            int16_t                      src_x,
                            int16_t                      src_y,
                            uint32_t                     points_len,
                            const xcb_render_pointfix_t *points);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_tri_fan (xcb_connection_t            *c,
                    uint8_t                      op,
                    xcb_render_picture_t         src,
                    xcb_render_picture_t         dst,
                    xcb_render_pictformat_t      mask_format,
                    int16_t                      src_x,
                    int16_t                      src_y,
                    uint32_t                     points_len,
                    const xcb_render_pointfix_t *points);

xcb_render_pointfix_t *
xcb_render_tri_fan_points (const xcb_render_tri_fan_request_t *R);

int
xcb_render_tri_fan_points_length (const xcb_render_tri_fan_request_t *R);

xcb_render_pointfix_iterator_t
xcb_render_tri_fan_points_iterator (const xcb_render_tri_fan_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_glyph_set_checked (xcb_connection_t        *c,
                                     xcb_render_glyphset_t    gsid,
                                     xcb_render_pictformat_t  format);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_glyph_set (xcb_connection_t        *c,
                             xcb_render_glyphset_t    gsid,
                             xcb_render_pictformat_t  format);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_reference_glyph_set_checked (xcb_connection_t      *c,
                                        xcb_render_glyphset_t  gsid,
                                        xcb_render_glyphset_t  existing);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_reference_glyph_set (xcb_connection_t      *c,
                                xcb_render_glyphset_t  gsid,
                                xcb_render_glyphset_t  existing);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_free_glyph_set_checked (xcb_connection_t      *c,
                                   xcb_render_glyphset_t  glyphset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_free_glyph_set (xcb_connection_t      *c,
                           xcb_render_glyphset_t  glyphset);

int
xcb_render_add_glyphs_sizeof (const void  *_buffer,
                              uint32_t     data_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_add_glyphs_checked (xcb_connection_t             *c,
                               xcb_render_glyphset_t         glyphset,
                               uint32_t                      glyphs_len,
                               const uint32_t               *glyphids,
                               const xcb_render_glyphinfo_t *glyphs,
                               uint32_t                      data_len,
                               const uint8_t                *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_add_glyphs (xcb_connection_t             *c,
                       xcb_render_glyphset_t         glyphset,
                       uint32_t                      glyphs_len,
                       const uint32_t               *glyphids,
                       const xcb_render_glyphinfo_t *glyphs,
                       uint32_t                      data_len,
                       const uint8_t                *data);

uint32_t *
xcb_render_add_glyphs_glyphids (const xcb_render_add_glyphs_request_t *R);

int
xcb_render_add_glyphs_glyphids_length (const xcb_render_add_glyphs_request_t *R);

xcb_generic_iterator_t
xcb_render_add_glyphs_glyphids_end (const xcb_render_add_glyphs_request_t *R);

xcb_render_glyphinfo_t *
xcb_render_add_glyphs_glyphs (const xcb_render_add_glyphs_request_t *R);

int
xcb_render_add_glyphs_glyphs_length (const xcb_render_add_glyphs_request_t *R);

xcb_render_glyphinfo_iterator_t
xcb_render_add_glyphs_glyphs_iterator (const xcb_render_add_glyphs_request_t *R);

uint8_t *
xcb_render_add_glyphs_data (const xcb_render_add_glyphs_request_t *R);

int
xcb_render_add_glyphs_data_length (const xcb_render_add_glyphs_request_t *R);

xcb_generic_iterator_t
xcb_render_add_glyphs_data_end (const xcb_render_add_glyphs_request_t *R);

int
xcb_render_free_glyphs_sizeof (const void  *_buffer,
                               uint32_t     glyphs_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_free_glyphs_checked (xcb_connection_t         *c,
                                xcb_render_glyphset_t     glyphset,
                                uint32_t                  glyphs_len,
                                const xcb_render_glyph_t *glyphs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_free_glyphs (xcb_connection_t         *c,
                        xcb_render_glyphset_t     glyphset,
                        uint32_t                  glyphs_len,
                        const xcb_render_glyph_t *glyphs);

xcb_render_glyph_t *
xcb_render_free_glyphs_glyphs (const xcb_render_free_glyphs_request_t *R);

int
xcb_render_free_glyphs_glyphs_length (const xcb_render_free_glyphs_request_t *R);

xcb_generic_iterator_t
xcb_render_free_glyphs_glyphs_end (const xcb_render_free_glyphs_request_t *R);

int
xcb_render_composite_glyphs_8_sizeof (const void  *_buffer,
                                      uint32_t     glyphcmds_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_8_checked (xcb_connection_t        *c,
                                       uint8_t                  op,
                                       xcb_render_picture_t     src,
                                       xcb_render_picture_t     dst,
                                       xcb_render_pictformat_t  mask_format,
                                       xcb_render_glyphset_t    glyphset,
                                       int16_t                  src_x,
                                       int16_t                  src_y,
                                       uint32_t                 glyphcmds_len,
                                       const uint8_t           *glyphcmds);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_8 (xcb_connection_t        *c,
                               uint8_t                  op,
                               xcb_render_picture_t     src,
                               xcb_render_picture_t     dst,
                               xcb_render_pictformat_t  mask_format,
                               xcb_render_glyphset_t    glyphset,
                               int16_t                  src_x,
                               int16_t                  src_y,
                               uint32_t                 glyphcmds_len,
                               const uint8_t           *glyphcmds);

uint8_t *
xcb_render_composite_glyphs_8_glyphcmds (const xcb_render_composite_glyphs_8_request_t *R);

int
xcb_render_composite_glyphs_8_glyphcmds_length (const xcb_render_composite_glyphs_8_request_t *R);

xcb_generic_iterator_t
xcb_render_composite_glyphs_8_glyphcmds_end (const xcb_render_composite_glyphs_8_request_t *R);

int
xcb_render_composite_glyphs_16_sizeof (const void  *_buffer,
                                       uint32_t     glyphcmds_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_16_checked (xcb_connection_t        *c,
                                        uint8_t                  op,
                                        xcb_render_picture_t     src,
                                        xcb_render_picture_t     dst,
                                        xcb_render_pictformat_t  mask_format,
                                        xcb_render_glyphset_t    glyphset,
                                        int16_t                  src_x,
                                        int16_t                  src_y,
                                        uint32_t                 glyphcmds_len,
                                        const uint8_t           *glyphcmds);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_16 (xcb_connection_t        *c,
                                uint8_t                  op,
                                xcb_render_picture_t     src,
                                xcb_render_picture_t     dst,
                                xcb_render_pictformat_t  mask_format,
                                xcb_render_glyphset_t    glyphset,
                                int16_t                  src_x,
                                int16_t                  src_y,
                                uint32_t                 glyphcmds_len,
                                const uint8_t           *glyphcmds);

uint8_t *
xcb_render_composite_glyphs_16_glyphcmds (const xcb_render_composite_glyphs_16_request_t *R);

int
xcb_render_composite_glyphs_16_glyphcmds_length (const xcb_render_composite_glyphs_16_request_t *R);

xcb_generic_iterator_t
xcb_render_composite_glyphs_16_glyphcmds_end (const xcb_render_composite_glyphs_16_request_t *R);

int
xcb_render_composite_glyphs_32_sizeof (const void  *_buffer,
                                       uint32_t     glyphcmds_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_32_checked (xcb_connection_t        *c,
                                        uint8_t                  op,
                                        xcb_render_picture_t     src,
                                        xcb_render_picture_t     dst,
                                        xcb_render_pictformat_t  mask_format,
                                        xcb_render_glyphset_t    glyphset,
                                        int16_t                  src_x,
                                        int16_t                  src_y,
                                        uint32_t                 glyphcmds_len,
                                        const uint8_t           *glyphcmds);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_composite_glyphs_32 (xcb_connection_t        *c,
                                uint8_t                  op,
                                xcb_render_picture_t     src,
                                xcb_render_picture_t     dst,
                                xcb_render_pictformat_t  mask_format,
                                xcb_render_glyphset_t    glyphset,
                                int16_t                  src_x,
                                int16_t                  src_y,
                                uint32_t                 glyphcmds_len,
                                const uint8_t           *glyphcmds);

uint8_t *
xcb_render_composite_glyphs_32_glyphcmds (const xcb_render_composite_glyphs_32_request_t *R);

int
xcb_render_composite_glyphs_32_glyphcmds_length (const xcb_render_composite_glyphs_32_request_t *R);

xcb_generic_iterator_t
xcb_render_composite_glyphs_32_glyphcmds_end (const xcb_render_composite_glyphs_32_request_t *R);

int
xcb_render_fill_rectangles_sizeof (const void  *_buffer,
                                   uint32_t     rects_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_fill_rectangles_checked (xcb_connection_t      *c,
                                    uint8_t                op,
                                    xcb_render_picture_t   dst,
                                    xcb_render_color_t     color,
                                    uint32_t               rects_len,
                                    const xcb_rectangle_t *rects);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_fill_rectangles (xcb_connection_t      *c,
                            uint8_t                op,
                            xcb_render_picture_t   dst,
                            xcb_render_color_t     color,
                            uint32_t               rects_len,
                            const xcb_rectangle_t *rects);

xcb_rectangle_t *
xcb_render_fill_rectangles_rects (const xcb_render_fill_rectangles_request_t *R);

int
xcb_render_fill_rectangles_rects_length (const xcb_render_fill_rectangles_request_t *R);

xcb_rectangle_iterator_t
xcb_render_fill_rectangles_rects_iterator (const xcb_render_fill_rectangles_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_cursor_checked (xcb_connection_t     *c,
                                  xcb_cursor_t          cid,
                                  xcb_render_picture_t  source,
                                  uint16_t              x,
                                  uint16_t              y);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_cursor (xcb_connection_t     *c,
                          xcb_cursor_t          cid,
                          xcb_render_picture_t  source,
                          uint16_t              x,
                          uint16_t              y);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_transform_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_transform_t)
 */
void
xcb_render_transform_next (xcb_render_transform_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_transform_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_transform_end (xcb_render_transform_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_set_picture_transform_checked (xcb_connection_t       *c,
                                          xcb_render_picture_t    picture,
                                          xcb_render_transform_t  transform);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_set_picture_transform (xcb_connection_t       *c,
                                  xcb_render_picture_t    picture,
                                  xcb_render_transform_t  transform);

int
xcb_render_query_filters_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_render_query_filters_cookie_t
xcb_render_query_filters (xcb_connection_t *c,
                          xcb_drawable_t    drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_render_query_filters_cookie_t
xcb_render_query_filters_unchecked (xcb_connection_t *c,
                                    xcb_drawable_t    drawable);

uint16_t *
xcb_render_query_filters_aliases (const xcb_render_query_filters_reply_t *R);

int
xcb_render_query_filters_aliases_length (const xcb_render_query_filters_reply_t *R);

xcb_generic_iterator_t
xcb_render_query_filters_aliases_end (const xcb_render_query_filters_reply_t *R);

int
xcb_render_query_filters_filters_length (const xcb_render_query_filters_reply_t *R);

xcb_str_iterator_t
xcb_render_query_filters_filters_iterator (const xcb_render_query_filters_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_render_query_filters_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_render_query_filters_reply_t *
xcb_render_query_filters_reply (xcb_connection_t                   *c,
                                xcb_render_query_filters_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_render_set_picture_filter_sizeof (const void  *_buffer,
                                      uint32_t     values_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_set_picture_filter_checked (xcb_connection_t         *c,
                                       xcb_render_picture_t      picture,
                                       uint16_t                  filter_len,
                                       const char               *filter,
                                       uint32_t                  values_len,
                                       const xcb_render_fixed_t *values);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_set_picture_filter (xcb_connection_t         *c,
                               xcb_render_picture_t      picture,
                               uint16_t                  filter_len,
                               const char               *filter,
                               uint32_t                  values_len,
                               const xcb_render_fixed_t *values);

char *
xcb_render_set_picture_filter_filter (const xcb_render_set_picture_filter_request_t *R);

int
xcb_render_set_picture_filter_filter_length (const xcb_render_set_picture_filter_request_t *R);

xcb_generic_iterator_t
xcb_render_set_picture_filter_filter_end (const xcb_render_set_picture_filter_request_t *R);

xcb_render_fixed_t *
xcb_render_set_picture_filter_values (const xcb_render_set_picture_filter_request_t *R);

int
xcb_render_set_picture_filter_values_length (const xcb_render_set_picture_filter_request_t *R);

xcb_generic_iterator_t
xcb_render_set_picture_filter_values_end (const xcb_render_set_picture_filter_request_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_animcursorelt_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_animcursorelt_t)
 */
void
xcb_render_animcursorelt_next (xcb_render_animcursorelt_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_animcursorelt_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_animcursorelt_end (xcb_render_animcursorelt_iterator_t i);

int
xcb_render_create_anim_cursor_sizeof (const void  *_buffer,
                                      uint32_t     cursors_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_anim_cursor_checked (xcb_connection_t                 *c,
                                       xcb_cursor_t                      cid,
                                       uint32_t                          cursors_len,
                                       const xcb_render_animcursorelt_t *cursors);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_anim_cursor (xcb_connection_t                 *c,
                               xcb_cursor_t                      cid,
                               uint32_t                          cursors_len,
                               const xcb_render_animcursorelt_t *cursors);

xcb_render_animcursorelt_t *
xcb_render_create_anim_cursor_cursors (const xcb_render_create_anim_cursor_request_t *R);

int
xcb_render_create_anim_cursor_cursors_length (const xcb_render_create_anim_cursor_request_t *R);

xcb_render_animcursorelt_iterator_t
xcb_render_create_anim_cursor_cursors_iterator (const xcb_render_create_anim_cursor_request_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_spanfix_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_spanfix_t)
 */
void
xcb_render_spanfix_next (xcb_render_spanfix_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_spanfix_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_spanfix_end (xcb_render_spanfix_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_render_trap_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_render_trap_t)
 */
void
xcb_render_trap_next (xcb_render_trap_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_render_trap_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_render_trap_end (xcb_render_trap_iterator_t i);

int
xcb_render_add_traps_sizeof (const void  *_buffer,
                             uint32_t     traps_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_add_traps_checked (xcb_connection_t        *c,
                              xcb_render_picture_t     picture,
                              int16_t                  x_off,
                              int16_t                  y_off,
                              uint32_t                 traps_len,
                              const xcb_render_trap_t *traps);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_add_traps (xcb_connection_t        *c,
                      xcb_render_picture_t     picture,
                      int16_t                  x_off,
                      int16_t                  y_off,
                      uint32_t                 traps_len,
                      const xcb_render_trap_t *traps);

xcb_render_trap_t *
xcb_render_add_traps_traps (const xcb_render_add_traps_request_t *R);

int
xcb_render_add_traps_traps_length (const xcb_render_add_traps_request_t *R);

xcb_render_trap_iterator_t
xcb_render_add_traps_traps_iterator (const xcb_render_add_traps_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_solid_fill_checked (xcb_connection_t     *c,
                                      xcb_render_picture_t  picture,
                                      xcb_render_color_t    color);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_solid_fill (xcb_connection_t     *c,
                              xcb_render_picture_t  picture,
                              xcb_render_color_t    color);

int
xcb_render_create_linear_gradient_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_linear_gradient_checked (xcb_connection_t         *c,
                                           xcb_render_picture_t      picture,
                                           xcb_render_pointfix_t     p1,
                                           xcb_render_pointfix_t     p2,
                                           uint32_t                  num_stops,
                                           const xcb_render_fixed_t *stops,
                                           const xcb_render_color_t *colors);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_linear_gradient (xcb_connection_t         *c,
                                   xcb_render_picture_t      picture,
                                   xcb_render_pointfix_t     p1,
                                   xcb_render_pointfix_t     p2,
                                   uint32_t                  num_stops,
                                   const xcb_render_fixed_t *stops,
                                   const xcb_render_color_t *colors);

xcb_render_fixed_t *
xcb_render_create_linear_gradient_stops (const xcb_render_create_linear_gradient_request_t *R);

int
xcb_render_create_linear_gradient_stops_length (const xcb_render_create_linear_gradient_request_t *R);

xcb_generic_iterator_t
xcb_render_create_linear_gradient_stops_end (const xcb_render_create_linear_gradient_request_t *R);

xcb_render_color_t *
xcb_render_create_linear_gradient_colors (const xcb_render_create_linear_gradient_request_t *R);

int
xcb_render_create_linear_gradient_colors_length (const xcb_render_create_linear_gradient_request_t *R);

xcb_render_color_iterator_t
xcb_render_create_linear_gradient_colors_iterator (const xcb_render_create_linear_gradient_request_t *R);

int
xcb_render_create_radial_gradient_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_radial_gradient_checked (xcb_connection_t         *c,
                                           xcb_render_picture_t      picture,
                                           xcb_render_pointfix_t     inner,
                                           xcb_render_pointfix_t     outer,
                                           xcb_render_fixed_t        inner_radius,
                                           xcb_render_fixed_t        outer_radius,
                                           uint32_t                  num_stops,
                                           const xcb_render_fixed_t *stops,
                                           const xcb_render_color_t *colors);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_radial_gradient (xcb_connection_t         *c,
                                   xcb_render_picture_t      picture,
                                   xcb_render_pointfix_t     inner,
                                   xcb_render_pointfix_t     outer,
                                   xcb_render_fixed_t        inner_radius,
                                   xcb_render_fixed_t        outer_radius,
                                   uint32_t                  num_stops,
                                   const xcb_render_fixed_t *stops,
                                   const xcb_render_color_t *colors);

xcb_render_fixed_t *
xcb_render_create_radial_gradient_stops (const xcb_render_create_radial_gradient_request_t *R);

int
xcb_render_create_radial_gradient_stops_length (const xcb_render_create_radial_gradient_request_t *R);

xcb_generic_iterator_t
xcb_render_create_radial_gradient_stops_end (const xcb_render_create_radial_gradient_request_t *R);

xcb_render_color_t *
xcb_render_create_radial_gradient_colors (const xcb_render_create_radial_gradient_request_t *R);

int
xcb_render_create_radial_gradient_colors_length (const xcb_render_create_radial_gradient_request_t *R);

xcb_render_color_iterator_t
xcb_render_create_radial_gradient_colors_iterator (const xcb_render_create_radial_gradient_request_t *R);

int
xcb_render_create_conical_gradient_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_render_create_conical_gradient_checked (xcb_connection_t         *c,
                                            xcb_render_picture_t      picture,
                                            xcb_render_pointfix_t     center,
                                            xcb_render_fixed_t        angle,
                                            uint32_t                  num_stops,
                                            const xcb_render_fixed_t *stops,
                                            const xcb_render_color_t *colors);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_render_create_conical_gradient (xcb_connection_t         *c,
                                    xcb_render_picture_t      picture,
                                    xcb_render_pointfix_t     center,
                                    xcb_render_fixed_t        angle,
                                    uint32_t                  num_stops,
                                    const xcb_render_fixed_t *stops,
                                    const xcb_render_color_t *colors);

xcb_render_fixed_t *
xcb_render_create_conical_gradient_stops (const xcb_render_create_conical_gradient_request_t *R);

int
xcb_render_create_conical_gradient_stops_length (const xcb_render_create_conical_gradient_request_t *R);

xcb_generic_iterator_t
xcb_render_create_conical_gradient_stops_end (const xcb_render_create_conical_gradient_request_t *R);

xcb_render_color_t *
xcb_render_create_conical_gradient_colors (const xcb_render_create_conical_gradient_request_t *R);

int
xcb_render_create_conical_gradient_colors_length (const xcb_render_create_conical_gradient_request_t *R);

xcb_render_color_iterator_t
xcb_render_create_conical_gradient_colors_iterator (const xcb_render_create_conical_gradient_request_t *R);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.6
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d140 3
a142 3
    xcb_render_glyph_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d151 3
a153 3
    xcb_render_glyphset_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d162 3
a164 3
    xcb_render_picture_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d173 3
a175 3
    xcb_render_pictformat_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d184 3
a186 3
    xcb_render_fixed_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d196 3
a198 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d208 3
a210 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d220 3
a222 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d232 3
a234 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d244 3
a246 3
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
d253 8
a260 8
    uint16_t red_shift; /**<  */
    uint16_t red_mask; /**<  */
    uint16_t green_shift; /**<  */
    uint16_t green_mask; /**<  */
    uint16_t blue_shift; /**<  */
    uint16_t blue_mask; /**<  */
    uint16_t alpha_shift; /**<  */
    uint16_t alpha_mask; /**<  */
d267 3
a269 3
    xcb_render_directformat_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d276 6
a281 6
    xcb_render_pictformat_t   id; /**<  */
    uint8_t                   type; /**<  */
    uint8_t                   depth; /**<  */
    uint8_t                   pad0[2]; /**<  */
    xcb_render_directformat_t direct; /**<  */
    xcb_colormap_t            colormap; /**<  */
d288 3
a290 3
    xcb_render_pictforminfo_t *data; /**<  */
    int                        rem; /**<  */
    int                        index; /**<  */
d297 2
a298 2
    xcb_visualid_t          visual; /**<  */
    xcb_render_pictformat_t format; /**<  */
d305 3
a307 3
    xcb_render_pictvisual_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d314 4
a317 4
    uint8_t  depth; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t num_visuals; /**<  */
    uint8_t  pad1[4]; /**<  */
d324 3
a326 3
    xcb_render_pictdepth_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d333 2
a334 2
    uint32_t                num_depths; /**<  */
    xcb_render_pictformat_t fallback; /**<  */
d341 3
a343 3
    xcb_render_pictscreen_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d350 5
a354 5
    uint32_t pixel; /**<  */
    uint16_t red; /**<  */
    uint16_t green; /**<  */
    uint16_t blue; /**<  */
    uint16_t alpha; /**<  */
d361 3
a363 3
    xcb_render_indexvalue_t *data; /**<  */
    int                      rem; /**<  */
    int                      index; /**<  */
d370 4
a373 4
    uint16_t red; /**<  */
    uint16_t green; /**<  */
    uint16_t blue; /**<  */
    uint16_t alpha; /**<  */
d380 3
a382 3
    xcb_render_color_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d389 2
a390 2
    xcb_render_fixed_t x; /**<  */
    xcb_render_fixed_t y; /**<  */
d397 3
a399 3
    xcb_render_pointfix_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d406 2
a407 2
    xcb_render_pointfix_t p1; /**<  */
    xcb_render_pointfix_t p2; /**<  */
d414 3
a416 3
    xcb_render_linefix_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d423 3
a425 3
    xcb_render_pointfix_t p1; /**<  */
    xcb_render_pointfix_t p2; /**<  */
    xcb_render_pointfix_t p3; /**<  */
d432 3
a434 3
    xcb_render_triangle_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d441 4
a444 4
    xcb_render_fixed_t   top; /**<  */
    xcb_render_fixed_t   bottom; /**<  */
    xcb_render_linefix_t left; /**<  */
    xcb_render_linefix_t right; /**<  */
d451 3
a453 3
    xcb_render_trapezoid_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d460 6
a465 6
    uint16_t width; /**<  */
    uint16_t height; /**<  */
    int16_t  x; /**<  */
    int16_t  y; /**<  */
    int16_t  x_off; /**<  */
    int16_t  y_off; /**<  */
d472 3
a474 3
    xcb_render_glyphinfo_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d481 1
a481 1
    unsigned int sequence; /**<  */
d491 5
a495 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t client_major_version; /**<  */
    uint32_t client_minor_version; /**<  */
d502 7
a508 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint8_t  pad1[16]; /**<  */
d515 1
a515 1
    unsigned int sequence; /**<  */
d525 3
a527 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d534 10
a543 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_formats; /**<  */
    uint32_t num_screens; /**<  */
    uint32_t num_depths; /**<  */
    uint32_t num_visuals; /**<  */
    uint32_t num_subpixel; /**<  */
    uint8_t  pad1[4]; /**<  */
d550 1
a550 1
    unsigned int sequence; /**<  */
d560 4
a563 4
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    xcb_render_pictformat_t format; /**<  */
d570 6
a575 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_values; /**<  */
    uint8_t  pad1[20]; /**<  */
d578 19
d604 7
a610 7
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    xcb_render_picture_t    pid; /**<  */
    xcb_drawable_t          drawable; /**<  */
    xcb_render_pictformat_t format; /**<  */
    uint32_t                value_mask; /**<  */
d613 19
d639 5
a643 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
    uint32_t             value_mask; /**<  */
d653 6
a658 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
    int16_t              clip_x_origin; /**<  */
    int16_t              clip_y_origin; /**<  */
d668 4
a671 4
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
d681 16
a696 16
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    uint8_t              op; /**<  */
    uint8_t              pad0[3]; /**<  */
    xcb_render_picture_t src; /**<  */
    xcb_render_picture_t mask; /**<  */
    xcb_render_picture_t dst; /**<  */
    int16_t              src_x; /**<  */
    int16_t              src_y; /**<  */
    int16_t              mask_x; /**<  */
    int16_t              mask_y; /**<  */
    int16_t              dst_x; /**<  */
    int16_t              dst_y; /**<  */
    uint16_t             width; /**<  */
    uint16_t             height; /**<  */
d706 10
a715 10
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d725 10
a734 10
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d744 10
a753 10
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d763 10
a772 10
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d782 5
a786 5
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    xcb_render_glyphset_t   gsid; /**<  */
    xcb_render_pictformat_t format; /**<  */
d796 5
a800 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_glyphset_t gsid; /**<  */
    xcb_render_glyphset_t existing; /**<  */
d810 4
a813 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_glyphset_t glyphset; /**<  */
d823 5
a827 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_glyphset_t glyphset; /**<  */
    uint32_t              glyphs_len; /**<  */
d837 4
a840 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_glyphset_t glyphset; /**<  */
d850 11
a860 11
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    xcb_render_glyphset_t   glyphset; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d870 11
a880 11
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    xcb_render_glyphset_t   glyphset; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d890 11
a900 11
    uint8_t                 major_opcode; /**<  */
    uint8_t                 minor_opcode; /**<  */
    uint16_t                length; /**<  */
    uint8_t                 op; /**<  */
    uint8_t                 pad0[3]; /**<  */
    xcb_render_picture_t    src; /**<  */
    xcb_render_picture_t    dst; /**<  */
    xcb_render_pictformat_t mask_format; /**<  */
    xcb_render_glyphset_t   glyphset; /**<  */
    int16_t                 src_x; /**<  */
    int16_t                 src_y; /**<  */
d910 7
a916 7
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    uint8_t              op; /**<  */
    uint8_t              pad0[3]; /**<  */
    xcb_render_picture_t dst; /**<  */
    xcb_render_color_t   color; /**<  */
d926 7
a932 7
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_cursor_t         cid; /**<  */
    xcb_render_picture_t source; /**<  */
    uint16_t             x; /**<  */
    uint16_t             y; /**<  */
d939 9
a947 9
    xcb_render_fixed_t matrix11; /**<  */
    xcb_render_fixed_t matrix12; /**<  */
    xcb_render_fixed_t matrix13; /**<  */
    xcb_render_fixed_t matrix21; /**<  */
    xcb_render_fixed_t matrix22; /**<  */
    xcb_render_fixed_t matrix23; /**<  */
    xcb_render_fixed_t matrix31; /**<  */
    xcb_render_fixed_t matrix32; /**<  */
    xcb_render_fixed_t matrix33; /**<  */
d954 3
a956 3
    xcb_render_transform_t *data; /**<  */
    int                     rem; /**<  */
    int                     index; /**<  */
d966 5
a970 5
    uint8_t                major_opcode; /**<  */
    uint8_t                minor_opcode; /**<  */
    uint16_t               length; /**<  */
    xcb_render_picture_t   picture; /**<  */
    xcb_render_transform_t transform; /**<  */
d977 1
a977 1
    unsigned int sequence; /**<  */
d987 4
a990 4
    uint8_t        major_opcode; /**<  */
    uint8_t        minor_opcode; /**<  */
    uint16_t       length; /**<  */
    xcb_drawable_t drawable; /**<  */
d997 7
a1003 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_aliases; /**<  */
    uint32_t num_filters; /**<  */
    uint8_t  pad1[16]; /**<  */
d1013 6
a1018 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
    uint16_t             filter_len; /**<  */
    uint8_t              pad0[2]; /**<  */
d1025 2
a1026 2
    xcb_cursor_t cursor; /**<  */
    uint32_t     delay; /**<  */
d1033 3
a1035 3
    xcb_render_animcursorelt_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d1045 4
a1048 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_cursor_t cid; /**<  */
d1055 3
a1057 3
    xcb_render_fixed_t l; /**<  */
    xcb_render_fixed_t r; /**<  */
    xcb_render_fixed_t y; /**<  */
d1064 3
a1066 3
    xcb_render_spanfix_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d1073 2
a1074 2
    xcb_render_spanfix_t top; /**<  */
    xcb_render_spanfix_t bot; /**<  */
d1081 3
a1083 3
    xcb_render_trap_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d1093 6
a1098 6
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
    int16_t              x_off; /**<  */
    int16_t              y_off; /**<  */
d1108 5
a1112 5
    uint8_t              major_opcode; /**<  */
    uint8_t              minor_opcode; /**<  */
    uint16_t             length; /**<  */
    xcb_render_picture_t picture; /**<  */
    xcb_render_color_t   color; /**<  */
d1122 7
a1128 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_picture_t  picture; /**<  */
    xcb_render_pointfix_t p1; /**<  */
    xcb_render_pointfix_t p2; /**<  */
    uint32_t              num_stops; /**<  */
d1138 9
a1146 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_picture_t  picture; /**<  */
    xcb_render_pointfix_t inner; /**<  */
    xcb_render_pointfix_t outer; /**<  */
    xcb_render_fixed_t    inner_radius; /**<  */
    xcb_render_fixed_t    outer_radius; /**<  */
    uint32_t              num_stops; /**<  */
d1156 7
a1162 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_render_picture_t  picture; /**<  */
    xcb_render_pointfix_t center; /**<  */
    xcb_render_fixed_t    angle; /**<  */
    uint32_t              num_stops; /**<  */
d1174 1
a1174 1
xcb_render_glyph_next (xcb_render_glyph_iterator_t *i  /**< */);
d1186 1
a1186 1
xcb_render_glyph_end (xcb_render_glyph_iterator_t i  /**< */);
d1197 1
a1197 1
xcb_render_glyphset_next (xcb_render_glyphset_iterator_t *i  /**< */);
d1209 1
a1209 1
xcb_render_glyphset_end (xcb_render_glyphset_iterator_t i  /**< */);
d1220 1
a1220 1
xcb_render_picture_next (xcb_render_picture_iterator_t *i  /**< */);
d1232 1
a1232 1
xcb_render_picture_end (xcb_render_picture_iterator_t i  /**< */);
d1243 1
a1243 1
xcb_render_pictformat_next (xcb_render_pictformat_iterator_t *i  /**< */);
d1255 1
a1255 1
xcb_render_pictformat_end (xcb_render_pictformat_iterator_t i  /**< */);
d1266 1
a1266 1
xcb_render_fixed_next (xcb_render_fixed_iterator_t *i  /**< */);
d1278 1
a1278 1
xcb_render_fixed_end (xcb_render_fixed_iterator_t i  /**< */);
d1289 1
a1289 1
xcb_render_directformat_next (xcb_render_directformat_iterator_t *i  /**< */);
d1301 1
a1301 1
xcb_render_directformat_end (xcb_render_directformat_iterator_t i  /**< */);
d1312 1
a1312 1
xcb_render_pictforminfo_next (xcb_render_pictforminfo_iterator_t *i  /**< */);
d1324 1
a1324 1
xcb_render_pictforminfo_end (xcb_render_pictforminfo_iterator_t i  /**< */);
d1335 1
a1335 1
xcb_render_pictvisual_next (xcb_render_pictvisual_iterator_t *i  /**< */);
d1347 1
a1347 1
xcb_render_pictvisual_end (xcb_render_pictvisual_iterator_t i  /**< */);
d1350 1
a1350 1
xcb_render_pictdepth_sizeof (const void  *_buffer  /**< */);
d1353 1
a1353 1
xcb_render_pictdepth_visuals (const xcb_render_pictdepth_t *R  /**< */);
d1356 1
a1356 1
xcb_render_pictdepth_visuals_length (const xcb_render_pictdepth_t *R  /**< */);
d1359 1
a1359 1
xcb_render_pictdepth_visuals_iterator (const xcb_render_pictdepth_t *R  /**< */);
d1370 1
a1370 1
xcb_render_pictdepth_next (xcb_render_pictdepth_iterator_t *i  /**< */);
d1382 1
a1382 1
xcb_render_pictdepth_end (xcb_render_pictdepth_iterator_t i  /**< */);
d1385 1
a1385 1
xcb_render_pictscreen_sizeof (const void  *_buffer  /**< */);
d1388 1
a1388 1
xcb_render_pictscreen_depths_length (const xcb_render_pictscreen_t *R  /**< */);
d1391 1
a1391 1
xcb_render_pictscreen_depths_iterator (const xcb_render_pictscreen_t *R  /**< */);
d1402 1
a1402 1
xcb_render_pictscreen_next (xcb_render_pictscreen_iterator_t *i  /**< */);
d1414 1
a1414 1
xcb_render_pictscreen_end (xcb_render_pictscreen_iterator_t i  /**< */);
d1425 1
a1425 1
xcb_render_indexvalue_next (xcb_render_indexvalue_iterator_t *i  /**< */);
d1437 1
a1437 1
xcb_render_indexvalue_end (xcb_render_indexvalue_iterator_t i  /**< */);
d1448 1
a1448 1
xcb_render_color_next (xcb_render_color_iterator_t *i  /**< */);
d1460 1
a1460 1
xcb_render_color_end (xcb_render_color_iterator_t i  /**< */);
d1471 1
a1471 1
xcb_render_pointfix_next (xcb_render_pointfix_iterator_t *i  /**< */);
d1483 1
a1483 1
xcb_render_pointfix_end (xcb_render_pointfix_iterator_t i  /**< */);
d1494 1
a1494 1
xcb_render_linefix_next (xcb_render_linefix_iterator_t *i  /**< */);
d1506 1
a1506 1
xcb_render_linefix_end (xcb_render_linefix_iterator_t i  /**< */);
d1517 1
a1517 1
xcb_render_triangle_next (xcb_render_triangle_iterator_t *i  /**< */);
d1529 1
a1529 1
xcb_render_triangle_end (xcb_render_triangle_iterator_t i  /**< */);
d1540 1
a1540 1
xcb_render_trapezoid_next (xcb_render_trapezoid_iterator_t *i  /**< */);
d1552 1
a1552 1
xcb_render_trapezoid_end (xcb_render_trapezoid_iterator_t i  /**< */);
d1563 1
a1563 1
xcb_render_glyphinfo_next (xcb_render_glyphinfo_iterator_t *i  /**< */);
d1575 1
a1575 1
xcb_render_glyphinfo_end (xcb_render_glyphinfo_iterator_t i  /**< */);
d1586 3
a1588 3
xcb_render_query_version (xcb_connection_t *c  /**< */,
                          uint32_t          client_major_version  /**< */,
                          uint32_t          client_minor_version  /**< */);
d1602 3
a1604 3
xcb_render_query_version_unchecked (xcb_connection_t *c  /**< */,
                                    uint32_t          client_major_version  /**< */,
                                    uint32_t          client_minor_version  /**< */);
d1621 1
a1621 1
xcb_render_query_version_reply (xcb_connection_t                   *c  /**< */,
d1623 1
a1623 1
                                xcb_generic_error_t               **e  /**< */);
d1626 1
a1626 1
xcb_render_query_pict_formats_sizeof (const void  *_buffer  /**< */);
d1637 1
a1637 1
xcb_render_query_pict_formats (xcb_connection_t *c  /**< */);
d1651 1
a1651 1
xcb_render_query_pict_formats_unchecked (xcb_connection_t *c  /**< */);
d1654 1
a1654 1
xcb_render_query_pict_formats_formats (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1657 1
a1657 1
xcb_render_query_pict_formats_formats_length (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1660 1
a1660 1
xcb_render_query_pict_formats_formats_iterator (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1663 1
a1663 1
xcb_render_query_pict_formats_screens_length (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1666 1
a1666 1
xcb_render_query_pict_formats_screens_iterator (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1669 1
a1669 1
xcb_render_query_pict_formats_subpixels (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1672 1
a1672 1
xcb_render_query_pict_formats_subpixels_length (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1675 1
a1675 1
xcb_render_query_pict_formats_subpixels_end (const xcb_render_query_pict_formats_reply_t *R  /**< */);
d1692 1
a1692 1
xcb_render_query_pict_formats_reply (xcb_connection_t                        *c  /**< */,
d1694 1
a1694 1
                                     xcb_generic_error_t                    **e  /**< */);
d1697 1
a1697 1
xcb_render_query_pict_index_values_sizeof (const void  *_buffer  /**< */);
d1708 2
a1709 2
xcb_render_query_pict_index_values (xcb_connection_t        *c  /**< */,
                                    xcb_render_pictformat_t  format  /**< */);
d1723 2
a1724 2
xcb_render_query_pict_index_values_unchecked (xcb_connection_t        *c  /**< */,
                                              xcb_render_pictformat_t  format  /**< */);
d1727 1
a1727 1
xcb_render_query_pict_index_values_values (const xcb_render_query_pict_index_values_reply_t *R  /**< */);
d1730 1
a1730 1
xcb_render_query_pict_index_values_values_length (const xcb_render_query_pict_index_values_reply_t *R  /**< */);
d1733 1
a1733 1
xcb_render_query_pict_index_values_values_iterator (const xcb_render_query_pict_index_values_reply_t *R  /**< */);
d1750 1
a1750 1
xcb_render_query_pict_index_values_reply (xcb_connection_t                             *c  /**< */,
d1752 15
a1766 1
                                          xcb_generic_error_t                         **e  /**< */);
d1769 1
a1769 1
xcb_render_create_picture_sizeof (const void  *_buffer  /**< */);
d1783 6
a1788 6
xcb_render_create_picture_checked (xcb_connection_t        *c  /**< */,
                                   xcb_render_picture_t     pid  /**< */,
                                   xcb_drawable_t           drawable  /**< */,
                                   xcb_render_pictformat_t  format  /**< */,
                                   uint32_t                 value_mask  /**< */,
                                   const uint32_t          *value_list  /**< */);
d1799 49
a1847 6
xcb_render_create_picture (xcb_connection_t        *c  /**< */,
                           xcb_render_picture_t     pid  /**< */,
                           xcb_drawable_t           drawable  /**< */,
                           xcb_render_pictformat_t  format  /**< */,
                           uint32_t                 value_mask  /**< */,
                           const uint32_t          *value_list  /**< */);
d1850 10
a1859 1
xcb_render_change_picture_sizeof (const void  *_buffer  /**< */);
d1873 4
a1876 4
xcb_render_change_picture_checked (xcb_connection_t     *c  /**< */,
                                   xcb_render_picture_t  picture  /**< */,
                                   uint32_t              value_mask  /**< */,
                                   const uint32_t       *value_list  /**< */);
d1887 38
a1924 4
xcb_render_change_picture (xcb_connection_t     *c  /**< */,
                           xcb_render_picture_t  picture  /**< */,
                           uint32_t              value_mask  /**< */,
                           const uint32_t       *value_list  /**< */);
d1927 2
a1928 2
xcb_render_set_picture_clip_rectangles_sizeof (const void  *_buffer  /**< */,
                                               uint32_t     rectangles_len  /**< */);
d1942 6
a1947 6
xcb_render_set_picture_clip_rectangles_checked (xcb_connection_t      *c  /**< */,
                                                xcb_render_picture_t   picture  /**< */,
                                                int16_t                clip_x_origin  /**< */,
                                                int16_t                clip_y_origin  /**< */,
                                                uint32_t               rectangles_len  /**< */,
                                                const xcb_rectangle_t *rectangles  /**< */);
d1958 15
a1972 6
xcb_render_set_picture_clip_rectangles (xcb_connection_t      *c  /**< */,
                                        xcb_render_picture_t   picture  /**< */,
                                        int16_t                clip_x_origin  /**< */,
                                        int16_t                clip_y_origin  /**< */,
                                        uint32_t               rectangles_len  /**< */,
                                        const xcb_rectangle_t *rectangles  /**< */);
d1986 2
a1987 2
xcb_render_free_picture_checked (xcb_connection_t     *c  /**< */,
                                 xcb_render_picture_t  picture  /**< */);
d1998 2
a1999 2
xcb_render_free_picture (xcb_connection_t     *c  /**< */,
                         xcb_render_picture_t  picture  /**< */);
d2013 13
a2025 13
xcb_render_composite_checked (xcb_connection_t     *c  /**< */,
                              uint8_t               op  /**< */,
                              xcb_render_picture_t  src  /**< */,
                              xcb_render_picture_t  mask  /**< */,
                              xcb_render_picture_t  dst  /**< */,
                              int16_t               src_x  /**< */,
                              int16_t               src_y  /**< */,
                              int16_t               mask_x  /**< */,
                              int16_t               mask_y  /**< */,
                              int16_t               dst_x  /**< */,
                              int16_t               dst_y  /**< */,
                              uint16_t              width  /**< */,
                              uint16_t              height  /**< */);
d2036 13
a2048 13
xcb_render_composite (xcb_connection_t     *c  /**< */,
                      uint8_t               op  /**< */,
                      xcb_render_picture_t  src  /**< */,
                      xcb_render_picture_t  mask  /**< */,
                      xcb_render_picture_t  dst  /**< */,
                      int16_t               src_x  /**< */,
                      int16_t               src_y  /**< */,
                      int16_t               mask_x  /**< */,
                      int16_t               mask_y  /**< */,
                      int16_t               dst_x  /**< */,
                      int16_t               dst_y  /**< */,
                      uint16_t              width  /**< */,
                      uint16_t              height  /**< */);
d2051 2
a2052 2
xcb_render_trapezoids_sizeof (const void  *_buffer  /**< */,
                              uint32_t     traps_len  /**< */);
d2066 9
a2074 9
xcb_render_trapezoids_checked (xcb_connection_t             *c  /**< */,
                               uint8_t                       op  /**< */,
                               xcb_render_picture_t          src  /**< */,
                               xcb_render_picture_t          dst  /**< */,
                               xcb_render_pictformat_t       mask_format  /**< */,
                               int16_t                       src_x  /**< */,
                               int16_t                       src_y  /**< */,
                               uint32_t                      traps_len  /**< */,
                               const xcb_render_trapezoid_t *traps  /**< */);
d2085 12
a2096 9
xcb_render_trapezoids (xcb_connection_t             *c  /**< */,
                       uint8_t                       op  /**< */,
                       xcb_render_picture_t          src  /**< */,
                       xcb_render_picture_t          dst  /**< */,
                       xcb_render_pictformat_t       mask_format  /**< */,
                       int16_t                       src_x  /**< */,
                       int16_t                       src_y  /**< */,
                       uint32_t                      traps_len  /**< */,
                       const xcb_render_trapezoid_t *traps  /**< */);
d2099 8
a2106 2
xcb_render_triangles_sizeof (const void  *_buffer  /**< */,
                             uint32_t     triangles_len  /**< */);
d2120 9
a2128 9
xcb_render_triangles_checked (xcb_connection_t            *c  /**< */,
                              uint8_t                      op  /**< */,
                              xcb_render_picture_t         src  /**< */,
                              xcb_render_picture_t         dst  /**< */,
                              xcb_render_pictformat_t      mask_format  /**< */,
                              int16_t                      src_x  /**< */,
                              int16_t                      src_y  /**< */,
                              uint32_t                     triangles_len  /**< */,
                              const xcb_render_triangle_t *triangles  /**< */);
d2139 12
a2150 9
xcb_render_triangles (xcb_connection_t            *c  /**< */,
                      uint8_t                      op  /**< */,
                      xcb_render_picture_t         src  /**< */,
                      xcb_render_picture_t         dst  /**< */,
                      xcb_render_pictformat_t      mask_format  /**< */,
                      int16_t                      src_x  /**< */,
                      int16_t                      src_y  /**< */,
                      uint32_t                     triangles_len  /**< */,
                      const xcb_render_triangle_t *triangles  /**< */);
d2153 8
a2160 2
xcb_render_tri_strip_sizeof (const void  *_buffer  /**< */,
                             uint32_t     points_len  /**< */);
d2174 9
a2182 9
xcb_render_tri_strip_checked (xcb_connection_t            *c  /**< */,
                              uint8_t                      op  /**< */,
                              xcb_render_picture_t         src  /**< */,
                              xcb_render_picture_t         dst  /**< */,
                              xcb_render_pictformat_t      mask_format  /**< */,
                              int16_t                      src_x  /**< */,
                              int16_t                      src_y  /**< */,
                              uint32_t                     points_len  /**< */,
                              const xcb_render_pointfix_t *points  /**< */);
d2193 18
a2210 9
xcb_render_tri_strip (xcb_connection_t            *c  /**< */,
                      uint8_t                      op  /**< */,
                      xcb_render_picture_t         src  /**< */,
                      xcb_render_picture_t         dst  /**< */,
                      xcb_render_pictformat_t      mask_format  /**< */,
                      int16_t                      src_x  /**< */,
                      int16_t                      src_y  /**< */,
                      uint32_t                     points_len  /**< */,
                      const xcb_render_pointfix_t *points  /**< */);
d2213 2
a2214 2
xcb_render_tri_fan_sizeof (const void  *_buffer  /**< */,
                           uint32_t     points_len  /**< */);
d2228 9
a2236 9
xcb_render_tri_fan_checked (xcb_connection_t            *c  /**< */,
                            uint8_t                      op  /**< */,
                            xcb_render_picture_t         src  /**< */,
                            xcb_render_picture_t         dst  /**< */,
                            xcb_render_pictformat_t      mask_format  /**< */,
                            int16_t                      src_x  /**< */,
                            int16_t                      src_y  /**< */,
                            uint32_t                     points_len  /**< */,
                            const xcb_render_pointfix_t *points  /**< */);
d2247 18
a2264 9
xcb_render_tri_fan (xcb_connection_t            *c  /**< */,
                    uint8_t                      op  /**< */,
                    xcb_render_picture_t         src  /**< */,
                    xcb_render_picture_t         dst  /**< */,
                    xcb_render_pictformat_t      mask_format  /**< */,
                    int16_t                      src_x  /**< */,
                    int16_t                      src_y  /**< */,
                    uint32_t                     points_len  /**< */,
                    const xcb_render_pointfix_t *points  /**< */);
d2278 3
a2280 3
xcb_render_create_glyph_set_checked (xcb_connection_t        *c  /**< */,
                                     xcb_render_glyphset_t    gsid  /**< */,
                                     xcb_render_pictformat_t  format  /**< */);
d2291 3
a2293 3
xcb_render_create_glyph_set (xcb_connection_t        *c  /**< */,
                             xcb_render_glyphset_t    gsid  /**< */,
                             xcb_render_pictformat_t  format  /**< */);
d2307 3
a2309 3
xcb_render_reference_glyph_set_checked (xcb_connection_t      *c  /**< */,
                                        xcb_render_glyphset_t  gsid  /**< */,
                                        xcb_render_glyphset_t  existing  /**< */);
d2320 3
a2322 3
xcb_render_reference_glyph_set (xcb_connection_t      *c  /**< */,
                                xcb_render_glyphset_t  gsid  /**< */,
                                xcb_render_glyphset_t  existing  /**< */);
d2336 2
a2337 2
xcb_render_free_glyph_set_checked (xcb_connection_t      *c  /**< */,
                                   xcb_render_glyphset_t  glyphset  /**< */);
d2348 2
a2349 2
xcb_render_free_glyph_set (xcb_connection_t      *c  /**< */,
                           xcb_render_glyphset_t  glyphset  /**< */);
d2352 2
a2353 2
xcb_render_add_glyphs_sizeof (const void  *_buffer  /**< */,
                              uint32_t     data_len  /**< */);
d2367 7
a2373 7
xcb_render_add_glyphs_checked (xcb_connection_t             *c  /**< */,
                               xcb_render_glyphset_t         glyphset  /**< */,
                               uint32_t                      glyphs_len  /**< */,
                               const uint32_t               *glyphids  /**< */,
                               const xcb_render_glyphinfo_t *glyphs  /**< */,
                               uint32_t                      data_len  /**< */,
                               const uint8_t                *data  /**< */);
d2384 34
a2417 7
xcb_render_add_glyphs (xcb_connection_t             *c  /**< */,
                       xcb_render_glyphset_t         glyphset  /**< */,
                       uint32_t                      glyphs_len  /**< */,
                       const uint32_t               *glyphids  /**< */,
                       const xcb_render_glyphinfo_t *glyphs  /**< */,
                       uint32_t                      data_len  /**< */,
                       const uint8_t                *data  /**< */);
d2420 2
a2421 2
xcb_render_free_glyphs_sizeof (const void  *_buffer  /**< */,
                               uint32_t     glyphs_len  /**< */);
d2435 4
a2438 4
xcb_render_free_glyphs_checked (xcb_connection_t         *c  /**< */,
                                xcb_render_glyphset_t     glyphset  /**< */,
                                uint32_t                  glyphs_len  /**< */,
                                const xcb_render_glyph_t *glyphs  /**< */);
d2449 7
a2455 4
xcb_render_free_glyphs (xcb_connection_t         *c  /**< */,
                        xcb_render_glyphset_t     glyphset  /**< */,
                        uint32_t                  glyphs_len  /**< */,
                        const xcb_render_glyph_t *glyphs  /**< */);
d2458 8
a2465 2
xcb_render_composite_glyphs_8_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     glyphcmds_len  /**< */);
d2479 10
a2488 10
xcb_render_composite_glyphs_8_checked (xcb_connection_t        *c  /**< */,
                                       uint8_t                  op  /**< */,
                                       xcb_render_picture_t     src  /**< */,
                                       xcb_render_picture_t     dst  /**< */,
                                       xcb_render_pictformat_t  mask_format  /**< */,
                                       xcb_render_glyphset_t    glyphset  /**< */,
                                       int16_t                  src_x  /**< */,
                                       int16_t                  src_y  /**< */,
                                       uint32_t                 glyphcmds_len  /**< */,
                                       const uint8_t           *glyphcmds  /**< */);
d2499 13
a2511 10
xcb_render_composite_glyphs_8 (xcb_connection_t        *c  /**< */,
                               uint8_t                  op  /**< */,
                               xcb_render_picture_t     src  /**< */,
                               xcb_render_picture_t     dst  /**< */,
                               xcb_render_pictformat_t  mask_format  /**< */,
                               xcb_render_glyphset_t    glyphset  /**< */,
                               int16_t                  src_x  /**< */,
                               int16_t                  src_y  /**< */,
                               uint32_t                 glyphcmds_len  /**< */,
                               const uint8_t           *glyphcmds  /**< */);
d2514 8
a2521 2
xcb_render_composite_glyphs_16_sizeof (const void  *_buffer  /**< */,
                                       uint32_t     glyphcmds_len  /**< */);
d2535 10
a2544 10
xcb_render_composite_glyphs_16_checked (xcb_connection_t        *c  /**< */,
                                        uint8_t                  op  /**< */,
                                        xcb_render_picture_t     src  /**< */,
                                        xcb_render_picture_t     dst  /**< */,
                                        xcb_render_pictformat_t  mask_format  /**< */,
                                        xcb_render_glyphset_t    glyphset  /**< */,
                                        int16_t                  src_x  /**< */,
                                        int16_t                  src_y  /**< */,
                                        uint32_t                 glyphcmds_len  /**< */,
                                        const uint8_t           *glyphcmds  /**< */);
d2555 13
a2567 10
xcb_render_composite_glyphs_16 (xcb_connection_t        *c  /**< */,
                                uint8_t                  op  /**< */,
                                xcb_render_picture_t     src  /**< */,
                                xcb_render_picture_t     dst  /**< */,
                                xcb_render_pictformat_t  mask_format  /**< */,
                                xcb_render_glyphset_t    glyphset  /**< */,
                                int16_t                  src_x  /**< */,
                                int16_t                  src_y  /**< */,
                                uint32_t                 glyphcmds_len  /**< */,
                                const uint8_t           *glyphcmds  /**< */);
d2570 8
a2577 2
xcb_render_composite_glyphs_32_sizeof (const void  *_buffer  /**< */,
                                       uint32_t     glyphcmds_len  /**< */);
d2591 10
a2600 10
xcb_render_composite_glyphs_32_checked (xcb_connection_t        *c  /**< */,
                                        uint8_t                  op  /**< */,
                                        xcb_render_picture_t     src  /**< */,
                                        xcb_render_picture_t     dst  /**< */,
                                        xcb_render_pictformat_t  mask_format  /**< */,
                                        xcb_render_glyphset_t    glyphset  /**< */,
                                        int16_t                  src_x  /**< */,
                                        int16_t                  src_y  /**< */,
                                        uint32_t                 glyphcmds_len  /**< */,
                                        const uint8_t           *glyphcmds  /**< */);
d2611 13
a2623 10
xcb_render_composite_glyphs_32 (xcb_connection_t        *c  /**< */,
                                uint8_t                  op  /**< */,
                                xcb_render_picture_t     src  /**< */,
                                xcb_render_picture_t     dst  /**< */,
                                xcb_render_pictformat_t  mask_format  /**< */,
                                xcb_render_glyphset_t    glyphset  /**< */,
                                int16_t                  src_x  /**< */,
                                int16_t                  src_y  /**< */,
                                uint32_t                 glyphcmds_len  /**< */,
                                const uint8_t           *glyphcmds  /**< */);
d2626 8
a2633 2
xcb_render_fill_rectangles_sizeof (const void  *_buffer  /**< */,
                                   uint32_t     rects_len  /**< */);
d2647 6
a2652 6
xcb_render_fill_rectangles_checked (xcb_connection_t      *c  /**< */,
                                    uint8_t                op  /**< */,
                                    xcb_render_picture_t   dst  /**< */,
                                    xcb_render_color_t     color  /**< */,
                                    uint32_t               rects_len  /**< */,
                                    const xcb_rectangle_t *rects  /**< */);
d2663 15
a2677 6
xcb_render_fill_rectangles (xcb_connection_t      *c  /**< */,
                            uint8_t                op  /**< */,
                            xcb_render_picture_t   dst  /**< */,
                            xcb_render_color_t     color  /**< */,
                            uint32_t               rects_len  /**< */,
                            const xcb_rectangle_t *rects  /**< */);
d2691 5
a2695 5
xcb_render_create_cursor_checked (xcb_connection_t     *c  /**< */,
                                  xcb_cursor_t          cid  /**< */,
                                  xcb_render_picture_t  source  /**< */,
                                  uint16_t              x  /**< */,
                                  uint16_t              y  /**< */);
d2706 5
a2710 5
xcb_render_create_cursor (xcb_connection_t     *c  /**< */,
                          xcb_cursor_t          cid  /**< */,
                          xcb_render_picture_t  source  /**< */,
                          uint16_t              x  /**< */,
                          uint16_t              y  /**< */);
d2721 1
a2721 1
xcb_render_transform_next (xcb_render_transform_iterator_t *i  /**< */);
d2733 1
a2733 1
xcb_render_transform_end (xcb_render_transform_iterator_t i  /**< */);
d2747 3
a2749 3
xcb_render_set_picture_transform_checked (xcb_connection_t       *c  /**< */,
                                          xcb_render_picture_t    picture  /**< */,
                                          xcb_render_transform_t  transform  /**< */);
d2760 3
a2762 3
xcb_render_set_picture_transform (xcb_connection_t       *c  /**< */,
                                  xcb_render_picture_t    picture  /**< */,
                                  xcb_render_transform_t  transform  /**< */);
d2765 1
a2765 1
xcb_render_query_filters_sizeof (const void  *_buffer  /**< */);
d2776 2
a2777 2
xcb_render_query_filters (xcb_connection_t *c  /**< */,
                          xcb_drawable_t    drawable  /**< */);
d2791 2
a2792 2
xcb_render_query_filters_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_drawable_t    drawable  /**< */);
d2795 1
a2795 1
xcb_render_query_filters_aliases (const xcb_render_query_filters_reply_t *R  /**< */);
d2798 1
a2798 1
xcb_render_query_filters_aliases_length (const xcb_render_query_filters_reply_t *R  /**< */);
d2801 1
a2801 1
xcb_render_query_filters_aliases_end (const xcb_render_query_filters_reply_t *R  /**< */);
d2804 1
a2804 1
xcb_render_query_filters_filters_length (const xcb_render_query_filters_reply_t *R  /**< */);
d2807 1
a2807 1
xcb_render_query_filters_filters_iterator (const xcb_render_query_filters_reply_t *R  /**< */);
d2824 1
a2824 1
xcb_render_query_filters_reply (xcb_connection_t                   *c  /**< */,
d2826 1
a2826 1
                                xcb_generic_error_t               **e  /**< */);
d2829 2
a2830 2
xcb_render_set_picture_filter_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     values_len  /**< */);
d2844 6
a2849 6
xcb_render_set_picture_filter_checked (xcb_connection_t         *c  /**< */,
                                       xcb_render_picture_t      picture  /**< */,
                                       uint16_t                  filter_len  /**< */,
                                       const char               *filter  /**< */,
                                       uint32_t                  values_len  /**< */,
                                       const xcb_render_fixed_t *values  /**< */);
d2860 24
a2883 6
xcb_render_set_picture_filter (xcb_connection_t         *c  /**< */,
                               xcb_render_picture_t      picture  /**< */,
                               uint16_t                  filter_len  /**< */,
                               const char               *filter  /**< */,
                               uint32_t                  values_len  /**< */,
                               const xcb_render_fixed_t *values  /**< */);
d2894 1
a2894 1
xcb_render_animcursorelt_next (xcb_render_animcursorelt_iterator_t *i  /**< */);
d2906 1
a2906 1
xcb_render_animcursorelt_end (xcb_render_animcursorelt_iterator_t i  /**< */);
d2909 2
a2910 2
xcb_render_create_anim_cursor_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     cursors_len  /**< */);
d2924 4
a2927 4
xcb_render_create_anim_cursor_checked (xcb_connection_t                 *c  /**< */,
                                       xcb_cursor_t                      cid  /**< */,
                                       uint32_t                          cursors_len  /**< */,
                                       const xcb_render_animcursorelt_t *cursors  /**< */);
d2938 13
a2950 4
xcb_render_create_anim_cursor (xcb_connection_t                 *c  /**< */,
                               xcb_cursor_t                      cid  /**< */,
                               uint32_t                          cursors_len  /**< */,
                               const xcb_render_animcursorelt_t *cursors  /**< */);
d2961 1
a2961 1
xcb_render_spanfix_next (xcb_render_spanfix_iterator_t *i  /**< */);
d2973 1
a2973 1
xcb_render_spanfix_end (xcb_render_spanfix_iterator_t i  /**< */);
d2984 1
a2984 1
xcb_render_trap_next (xcb_render_trap_iterator_t *i  /**< */);
d2996 1
a2996 1
xcb_render_trap_end (xcb_render_trap_iterator_t i  /**< */);
d2999 2
a3000 2
xcb_render_add_traps_sizeof (const void  *_buffer  /**< */,
                             uint32_t     traps_len  /**< */);
d3014 6
a3019 6
xcb_render_add_traps_checked (xcb_connection_t        *c  /**< */,
                              xcb_render_picture_t     picture  /**< */,
                              int16_t                  x_off  /**< */,
                              int16_t                  y_off  /**< */,
                              uint32_t                 traps_len  /**< */,
                              const xcb_render_trap_t *traps  /**< */);
d3030 15
a3044 6
xcb_render_add_traps (xcb_connection_t        *c  /**< */,
                      xcb_render_picture_t     picture  /**< */,
                      int16_t                  x_off  /**< */,
                      int16_t                  y_off  /**< */,
                      uint32_t                 traps_len  /**< */,
                      const xcb_render_trap_t *traps  /**< */);
d3058 3
a3060 3
xcb_render_create_solid_fill_checked (xcb_connection_t     *c  /**< */,
                                      xcb_render_picture_t  picture  /**< */,
                                      xcb_render_color_t    color  /**< */);
d3071 3
a3073 3
xcb_render_create_solid_fill (xcb_connection_t     *c  /**< */,
                              xcb_render_picture_t  picture  /**< */,
                              xcb_render_color_t    color  /**< */);
d3076 1
a3076 1
xcb_render_create_linear_gradient_sizeof (const void  *_buffer  /**< */);
d3090 7
a3096 7
xcb_render_create_linear_gradient_checked (xcb_connection_t         *c  /**< */,
                                           xcb_render_picture_t      picture  /**< */,
                                           xcb_render_pointfix_t     p1  /**< */,
                                           xcb_render_pointfix_t     p2  /**< */,
                                           uint32_t                  num_stops  /**< */,
                                           const xcb_render_fixed_t *stops  /**< */,
                                           const xcb_render_color_t *colors  /**< */);
d3107 19
a3125 7
xcb_render_create_linear_gradient (xcb_connection_t         *c  /**< */,
                                   xcb_render_picture_t      picture  /**< */,
                                   xcb_render_pointfix_t     p1  /**< */,
                                   xcb_render_pointfix_t     p2  /**< */,
                                   uint32_t                  num_stops  /**< */,
                                   const xcb_render_fixed_t *stops  /**< */,
                                   const xcb_render_color_t *colors  /**< */);
d3128 7
a3134 1
xcb_render_create_radial_gradient_sizeof (const void  *_buffer  /**< */);
d3148 9
a3156 9
xcb_render_create_radial_gradient_checked (xcb_connection_t         *c  /**< */,
                                           xcb_render_picture_t      picture  /**< */,
                                           xcb_render_pointfix_t     inner  /**< */,
                                           xcb_render_pointfix_t     outer  /**< */,
                                           xcb_render_fixed_t        inner_radius  /**< */,
                                           xcb_render_fixed_t        outer_radius  /**< */,
                                           uint32_t                  num_stops  /**< */,
                                           const xcb_render_fixed_t *stops  /**< */,
                                           const xcb_render_color_t *colors  /**< */);
d3167 12
a3178 9
xcb_render_create_radial_gradient (xcb_connection_t         *c  /**< */,
                                   xcb_render_picture_t      picture  /**< */,
                                   xcb_render_pointfix_t     inner  /**< */,
                                   xcb_render_pointfix_t     outer  /**< */,
                                   xcb_render_fixed_t        inner_radius  /**< */,
                                   xcb_render_fixed_t        outer_radius  /**< */,
                                   uint32_t                  num_stops  /**< */,
                                   const xcb_render_fixed_t *stops  /**< */,
                                   const xcb_render_color_t *colors  /**< */);
d3181 16
a3196 1
xcb_render_create_conical_gradient_sizeof (const void  *_buffer  /**< */);
d3210 7
a3216 7
xcb_render_create_conical_gradient_checked (xcb_connection_t         *c  /**< */,
                                            xcb_render_picture_t      picture  /**< */,
                                            xcb_render_pointfix_t     center  /**< */,
                                            xcb_render_fixed_t        angle  /**< */,
                                            uint32_t                  num_stops  /**< */,
                                            const xcb_render_fixed_t *stops  /**< */,
                                            const xcb_render_color_t *colors  /**< */);
d3227 25
a3251 7
xcb_render_create_conical_gradient (xcb_connection_t         *c  /**< */,
                                    xcb_render_picture_t      picture  /**< */,
                                    xcb_render_pointfix_t     center  /**< */,
                                    xcb_render_fixed_t        angle  /**< */,
                                    uint32_t                  num_stops  /**< */,
                                    const xcb_render_fixed_t *stops  /**< */,
                                    const xcb_render_color_t *colors  /**< */);
@


1.5
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a1134 10

/*****************************************************************************
 **
 ** void xcb_render_glyph_next
 ** 
 ** @@param xcb_render_glyph_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1146 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyph_end
 ** 
 ** @@param xcb_render_glyph_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1157 10

/*****************************************************************************
 **
 ** void xcb_render_glyphset_next
 ** 
 ** @@param xcb_render_glyphset_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1169 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyphset_end
 ** 
 ** @@param xcb_render_glyphset_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1180 10

/*****************************************************************************
 **
 ** void xcb_render_picture_next
 ** 
 ** @@param xcb_render_picture_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1192 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_picture_end
 ** 
 ** @@param xcb_render_picture_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1203 10

/*****************************************************************************
 **
 ** void xcb_render_pictformat_next
 ** 
 ** @@param xcb_render_pictformat_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1215 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictformat_end
 ** 
 ** @@param xcb_render_pictformat_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1226 10

/*****************************************************************************
 **
 ** void xcb_render_fixed_next
 ** 
 ** @@param xcb_render_fixed_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1238 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_fixed_end
 ** 
 ** @@param xcb_render_fixed_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1249 10

/*****************************************************************************
 **
 ** void xcb_render_directformat_next
 ** 
 ** @@param xcb_render_directformat_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1261 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_directformat_end
 ** 
 ** @@param xcb_render_directformat_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1272 10

/*****************************************************************************
 **
 ** void xcb_render_pictforminfo_next
 ** 
 ** @@param xcb_render_pictforminfo_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1284 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictforminfo_end
 ** 
 ** @@param xcb_render_pictforminfo_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1295 10

/*****************************************************************************
 **
 ** void xcb_render_pictvisual_next
 ** 
 ** @@param xcb_render_pictvisual_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1307 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictvisual_end
 ** 
 ** @@param xcb_render_pictvisual_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1313 10

/*****************************************************************************
 **
 ** xcb_render_pictvisual_t * xcb_render_pictdepth_visuals
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns xcb_render_pictvisual_t *
 **
 *****************************************************************************/
 
a1316 10

/*****************************************************************************
 **
 ** int xcb_render_pictdepth_visuals_length
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1319 10

/*****************************************************************************
 **
 ** xcb_render_pictvisual_iterator_t xcb_render_pictdepth_visuals_iterator
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns xcb_render_pictvisual_iterator_t
 **
 *****************************************************************************/
 
a1330 10

/*****************************************************************************
 **
 ** void xcb_render_pictdepth_next
 ** 
 ** @@param xcb_render_pictdepth_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1342 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictdepth_end
 ** 
 ** @@param xcb_render_pictdepth_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1348 10

/*****************************************************************************
 **
 ** int xcb_render_pictscreen_depths_length
 ** 
 ** @@param const xcb_render_pictscreen_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1351 10

/*****************************************************************************
 **
 ** xcb_render_pictdepth_iterator_t xcb_render_pictscreen_depths_iterator
 ** 
 ** @@param const xcb_render_pictscreen_t *R
 ** @@returns xcb_render_pictdepth_iterator_t
 **
 *****************************************************************************/
 
a1362 10

/*****************************************************************************
 **
 ** void xcb_render_pictscreen_next
 ** 
 ** @@param xcb_render_pictscreen_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1374 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictscreen_end
 ** 
 ** @@param xcb_render_pictscreen_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1385 10

/*****************************************************************************
 **
 ** void xcb_render_indexvalue_next
 ** 
 ** @@param xcb_render_indexvalue_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1397 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_indexvalue_end
 ** 
 ** @@param xcb_render_indexvalue_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1408 10

/*****************************************************************************
 **
 ** void xcb_render_color_next
 ** 
 ** @@param xcb_render_color_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1420 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_color_end
 ** 
 ** @@param xcb_render_color_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1431 10

/*****************************************************************************
 **
 ** void xcb_render_pointfix_next
 ** 
 ** @@param xcb_render_pointfix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1443 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pointfix_end
 ** 
 ** @@param xcb_render_pointfix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1454 10

/*****************************************************************************
 **
 ** void xcb_render_linefix_next
 ** 
 ** @@param xcb_render_linefix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1466 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_linefix_end
 ** 
 ** @@param xcb_render_linefix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1477 10

/*****************************************************************************
 **
 ** void xcb_render_triangle_next
 ** 
 ** @@param xcb_render_triangle_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1489 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_triangle_end
 ** 
 ** @@param xcb_render_triangle_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1500 10

/*****************************************************************************
 **
 ** void xcb_render_trapezoid_next
 ** 
 ** @@param xcb_render_trapezoid_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1512 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_trapezoid_end
 ** 
 ** @@param xcb_render_trapezoid_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1523 10

/*****************************************************************************
 **
 ** void xcb_render_glyphinfo_next
 ** 
 ** @@param xcb_render_glyphinfo_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1535 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyphinfo_end
 ** 
 ** @@param xcb_render_glyphinfo_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d1545 1
a1545 1
 * 
a1546 12

/*****************************************************************************
 **
 ** xcb_render_query_version_cookie_t xcb_render_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_render_query_version_cookie_t
 **
 *****************************************************************************/
 
d1558 1
a1558 1
 * 
a1562 12

/*****************************************************************************
 **
 ** xcb_render_query_version_cookie_t xcb_render_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_render_query_version_cookie_t
 **
 *****************************************************************************/
 
d1575 1
a1575 1
 * 
a1581 12

/*****************************************************************************
 **
 ** xcb_render_query_version_reply_t * xcb_render_query_version_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_render_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_render_query_version_reply_t *
 **
 *****************************************************************************/
 
d1596 1
a1596 1
 * 
a1597 10

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_cookie_t xcb_render_query_pict_formats
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_render_query_pict_formats_cookie_t
 **
 *****************************************************************************/
 
d1607 1
a1607 1
 * 
a1611 10

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_cookie_t xcb_render_query_pict_formats_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_render_query_pict_formats_cookie_t
 **
 *****************************************************************************/
 
a1614 10

/*****************************************************************************
 **
 ** xcb_render_pictforminfo_t * xcb_render_query_pict_formats_formats
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictforminfo_t *
 **
 *****************************************************************************/
 
a1617 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_formats_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1620 10

/*****************************************************************************
 **
 ** xcb_render_pictforminfo_iterator_t xcb_render_query_pict_formats_formats_iterator
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictforminfo_iterator_t
 **
 *****************************************************************************/
 
a1623 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_screens_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1626 10

/*****************************************************************************
 **
 ** xcb_render_pictscreen_iterator_t xcb_render_query_pict_formats_screens_iterator
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictscreen_iterator_t
 **
 *****************************************************************************/
 
a1629 10

/*****************************************************************************
 **
 ** uint32_t * xcb_render_query_pict_formats_subpixels
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1632 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_subpixels_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1635 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_query_pict_formats_subpixels_end
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d1646 1
a1646 1
 * 
a1652 12

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_reply_t * xcb_render_query_pict_formats_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_render_query_pict_formats_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_render_query_pict_formats_reply_t *
 **
 *****************************************************************************/
 
d1667 1
a1667 1
 * 
a1668 11

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_cookie_t xcb_render_query_pict_index_values
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_render_query_pict_index_values_cookie_t
 **
 *****************************************************************************/
 
d1679 1
a1679 1
 * 
a1683 11

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_cookie_t xcb_render_query_pict_index_values_unchecked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_render_query_pict_index_values_cookie_t
 **
 *****************************************************************************/
 
a1687 10

/*****************************************************************************
 **
 ** xcb_render_indexvalue_t * xcb_render_query_pict_index_values_values
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns xcb_render_indexvalue_t *
 **
 *****************************************************************************/
 
a1690 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_index_values_values_length
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1693 10

/*****************************************************************************
 **
 ** xcb_render_indexvalue_iterator_t xcb_render_query_pict_index_values_values_iterator
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns xcb_render_indexvalue_iterator_t
 **
 *****************************************************************************/
 
d1704 1
a1704 1
 * 
a1710 12

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_reply_t * xcb_render_query_pict_index_values_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_render_query_pict_index_values_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_render_query_pict_index_values_reply_t *
 **
 *****************************************************************************/
 
d1725 1
a1725 1
 * 
a1729 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_picture_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     pid
 ** @@param xcb_drawable_t           drawable
 ** @@param xcb_render_pictformat_t  format
 ** @@param uint32_t                 value_mask
 ** @@param const uint32_t          *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1744 1
a1744 1
 * 
a1745 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_picture
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     pid
 ** @@param xcb_drawable_t           drawable
 ** @@param xcb_render_pictformat_t  format
 ** @@param uint32_t                 value_mask
 ** @@param const uint32_t          *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1763 1
a1763 1
 * 
a1767 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_change_picture_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param uint32_t              value_mask
 ** @@param const uint32_t       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1780 1
a1780 1
 * 
a1781 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_change_picture
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param uint32_t              value_mask
 ** @@param const uint32_t       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1798 1
a1798 1
 * 
a1802 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_clip_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_picture_t   picture
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1817 1
a1817 1
 * 
a1818 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_clip_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_picture_t   picture
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1833 1
a1833 1
 * 
a1837 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_picture_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1848 1
a1848 1
 * 
a1849 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_picture
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1860 1
a1860 1
 * 
a1864 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               op
 ** @@param xcb_render_picture_t  src
 ** @@param xcb_render_picture_t  mask
 ** @@param xcb_render_picture_t  dst
 ** @@param int16_t               src_x
 ** @@param int16_t               src_y
 ** @@param int16_t               mask_x
 ** @@param int16_t               mask_y
 ** @@param int16_t               dst_x
 ** @@param int16_t               dst_y
 ** @@param uint16_t              width
 ** @@param uint16_t              height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1886 1
a1886 1
 * 
a1887 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               op
 ** @@param xcb_render_picture_t  src
 ** @@param xcb_render_picture_t  mask
 ** @@param xcb_render_picture_t  dst
 ** @@param int16_t               src_x
 ** @@param int16_t               src_y
 ** @@param int16_t               mask_x
 ** @@param int16_t               mask_y
 ** @@param int16_t               dst_x
 ** @@param int16_t               dst_y
 ** @@param uint16_t              width
 ** @@param uint16_t              height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1913 1
a1913 1
 * 
a1917 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_trapezoids_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param uint8_t                       op
 ** @@param xcb_render_picture_t          src
 ** @@param xcb_render_picture_t          dst
 ** @@param xcb_render_pictformat_t       mask_format
 ** @@param int16_t                       src_x
 ** @@param int16_t                       src_y
 ** @@param uint32_t                      traps_len
 ** @@param const xcb_render_trapezoid_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1935 1
a1935 1
 * 
a1936 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_trapezoids
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param uint8_t                       op
 ** @@param xcb_render_picture_t          src
 ** @@param xcb_render_picture_t          dst
 ** @@param xcb_render_pictformat_t       mask_format
 ** @@param int16_t                       src_x
 ** @@param int16_t                       src_y
 ** @@param uint32_t                      traps_len
 ** @@param const xcb_render_trapezoid_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1958 1
a1958 1
 * 
a1962 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_triangles_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     triangles_len
 ** @@param const xcb_render_triangle_t *triangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1980 1
a1980 1
 * 
a1981 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_triangles
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     triangles_len
 ** @@param const xcb_render_triangle_t *triangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2003 1
a2003 1
 * 
a2007 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_strip_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2025 1
a2025 1
 * 
a2026 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_strip
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2048 1
a2048 1
 * 
a2052 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_fan_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2070 1
a2070 1
 * 
a2071 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_fan
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2089 1
a2089 1
 * 
a2093 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_glyph_set_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_glyphset_t    gsid
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2105 1
a2105 1
 * 
a2106 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_glyph_set
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_glyphset_t    gsid
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2118 1
a2118 1
 * 
a2122 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_reference_glyph_set_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  gsid
 ** @@param xcb_render_glyphset_t  existing
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2134 1
a2134 1
 * 
a2135 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_reference_glyph_set
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  gsid
 ** @@param xcb_render_glyphset_t  existing
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2147 1
a2147 1
 * 
a2151 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyph_set_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  glyphset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2162 1
a2162 1
 * 
a2163 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyph_set
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  glyphset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2178 1
a2178 1
 * 
a2182 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_glyphs_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_render_glyphset_t         glyphset
 ** @@param uint32_t                      glyphs_len
 ** @@param const uint32_t               *glyphids
 ** @@param const xcb_render_glyphinfo_t *glyphs
 ** @@param uint32_t                      data_len
 ** @@param const uint8_t                *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2198 1
a2198 1
 * 
a2199 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_glyphs
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_render_glyphset_t         glyphset
 ** @@param uint32_t                      glyphs_len
 ** @@param const uint32_t               *glyphids
 ** @@param const xcb_render_glyphinfo_t *glyphs
 ** @@param uint32_t                      data_len
 ** @@param const uint8_t                *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2219 1
a2219 1
 * 
a2223 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyphs_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_glyphset_t     glyphset
 ** @@param uint32_t                  glyphs_len
 ** @@param const xcb_render_glyph_t *glyphs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2236 1
a2236 1
 * 
a2237 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyphs
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_glyphset_t     glyphset
 ** @@param uint32_t                  glyphs_len
 ** @@param const xcb_render_glyph_t *glyphs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2254 1
a2254 1
 * 
a2258 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_8_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2277 1
a2277 1
 * 
a2278 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_8
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2301 1
a2301 1
 * 
a2305 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_16_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2324 1
a2324 1
 * 
a2325 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_16
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2348 1
a2348 1
 * 
a2352 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_32_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2371 1
a2371 1
 * 
a2372 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_32
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2395 1
a2395 1
 * 
a2399 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_fill_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                op
 ** @@param xcb_render_picture_t   dst
 ** @@param xcb_render_color_t     color
 ** @@param uint32_t               rects_len
 ** @@param const xcb_rectangle_t *rects
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2414 1
a2414 1
 * 
a2415 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_fill_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                op
 ** @@param xcb_render_picture_t   dst
 ** @@param xcb_render_color_t     color
 ** @@param uint32_t               rects_len
 ** @@param const xcb_rectangle_t *rects
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2430 1
a2430 1
 * 
a2434 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_cursor_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_cursor_t          cid
 ** @@param xcb_render_picture_t  source
 ** @@param uint16_t              x
 ** @@param uint16_t              y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2448 1
a2448 1
 * 
a2449 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_cursor
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_cursor_t          cid
 ** @@param xcb_render_picture_t  source
 ** @@param uint16_t              x
 ** @@param uint16_t              y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a2464 10

/*****************************************************************************
 **
 ** void xcb_render_transform_next
 ** 
 ** @@param xcb_render_transform_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2476 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_transform_end
 ** 
 ** @@param xcb_render_transform_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2486 1
a2486 1
 * 
a2490 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_transform_checked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_render_picture_t    picture
 ** @@param xcb_render_transform_t  transform
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2502 1
a2502 1
 * 
a2503 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_transform
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_render_picture_t    picture
 ** @@param xcb_render_transform_t  transform
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2518 1
a2518 1
 * 
a2519 11

/*****************************************************************************
 **
 ** xcb_render_query_filters_cookie_t xcb_render_query_filters
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_render_query_filters_cookie_t
 **
 *****************************************************************************/
 
d2530 1
a2530 1
 * 
a2534 11

/*****************************************************************************
 **
 ** xcb_render_query_filters_cookie_t xcb_render_query_filters_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_render_query_filters_cookie_t
 **
 *****************************************************************************/
 
a2538 10

/*****************************************************************************
 **
 ** uint16_t * xcb_render_query_filters_aliases
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2541 10

/*****************************************************************************
 **
 ** int xcb_render_query_filters_aliases_length
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2544 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_query_filters_aliases_end
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2547 10

/*****************************************************************************
 **
 ** int xcb_render_query_filters_filters_length
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2550 10

/*****************************************************************************
 **
 ** xcb_str_iterator_t xcb_render_query_filters_filters_iterator
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns xcb_str_iterator_t
 **
 *****************************************************************************/
 
d2561 1
a2561 1
 * 
a2567 12

/*****************************************************************************
 **
 ** xcb_render_query_filters_reply_t * xcb_render_query_filters_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_render_query_filters_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_render_query_filters_reply_t *
 **
 *****************************************************************************/
 
d2583 1
a2583 1
 * 
a2587 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_filter_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter
 ** @@param uint32_t                  values_len
 ** @@param const xcb_render_fixed_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2602 1
a2602 1
 * 
a2603 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_filter
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter
 ** @@param uint32_t                  values_len
 ** @@param const xcb_render_fixed_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a2619 10

/*****************************************************************************
 **
 ** void xcb_render_animcursorelt_next
 ** 
 ** @@param xcb_render_animcursorelt_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2631 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_animcursorelt_end
 ** 
 ** @@param xcb_render_animcursorelt_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2645 1
a2645 1
 * 
a2649 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_anim_cursor_checked
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_cursor_t                      cid
 ** @@param uint32_t                          cursors_len
 ** @@param const xcb_render_animcursorelt_t *cursors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2662 1
a2662 1
 * 
a2663 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_anim_cursor
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_cursor_t                      cid
 ** @@param uint32_t                          cursors_len
 ** @@param const xcb_render_animcursorelt_t *cursors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a2677 10

/*****************************************************************************
 **
 ** void xcb_render_spanfix_next
 ** 
 ** @@param xcb_render_spanfix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2689 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_spanfix_end
 ** 
 ** @@param xcb_render_spanfix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2700 10

/*****************************************************************************
 **
 ** void xcb_render_trap_next
 ** 
 ** @@param xcb_render_trap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2712 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_trap_end
 ** 
 ** @@param xcb_render_trap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d2726 1
a2726 1
 * 
a2730 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_traps_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     picture
 ** @@param int16_t                  x_off
 ** @@param int16_t                  y_off
 ** @@param uint32_t                 traps_len
 ** @@param const xcb_render_trap_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2745 1
a2745 1
 * 
a2746 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_traps
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     picture
 ** @@param int16_t                  x_off
 ** @@param int16_t                  y_off
 ** @@param uint32_t                 traps_len
 ** @@param const xcb_render_trap_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2761 1
a2761 1
 * 
a2765 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_solid_fill_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_render_color_t    color
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2777 1
a2777 1
 * 
a2778 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_solid_fill
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_render_color_t    color
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2793 1
a2793 1
 * 
a2797 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_linear_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     p1
 ** @@param xcb_render_pointfix_t     p2
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2813 1
a2813 1
 * 
a2814 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_linear_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     p1
 ** @@param xcb_render_pointfix_t     p2
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2833 1
a2833 1
 * 
a2837 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_radial_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     inner
 ** @@param xcb_render_pointfix_t     outer
 ** @@param xcb_render_fixed_t        inner_radius
 ** @@param xcb_render_fixed_t        outer_radius
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2855 1
a2855 1
 * 
a2856 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_radial_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     inner
 ** @@param xcb_render_pointfix_t     outer
 ** @@param xcb_render_fixed_t        inner_radius
 ** @@param xcb_render_fixed_t        outer_radius
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2877 1
a2877 1
 * 
a2881 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_conical_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     center
 ** @@param xcb_render_fixed_t        angle
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2897 1
a2897 1
 * 
a2898 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_conical_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     center
 ** @@param xcb_render_fixed_t        angle
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d28 2
a29 2
    XCB_RENDER_PICT_TYPE_INDEXED,
    XCB_RENDER_PICT_TYPE_DIRECT
d33 1
a33 1
    XCB_RENDER_PICTURE_NONE
d37 14
a50 14
    XCB_RENDER_PICT_OP_CLEAR,
    XCB_RENDER_PICT_OP_SRC,
    XCB_RENDER_PICT_OP_DST,
    XCB_RENDER_PICT_OP_OVER,
    XCB_RENDER_PICT_OP_OVER_REVERSE,
    XCB_RENDER_PICT_OP_IN,
    XCB_RENDER_PICT_OP_IN_REVERSE,
    XCB_RENDER_PICT_OP_OUT,
    XCB_RENDER_PICT_OP_OUT_REVERSE,
    XCB_RENDER_PICT_OP_ATOP,
    XCB_RENDER_PICT_OP_ATOP_REVERSE,
    XCB_RENDER_PICT_OP_XOR,
    XCB_RENDER_PICT_OP_ADD,
    XCB_RENDER_PICT_OP_SATURATE,
d52 11
a62 11
    XCB_RENDER_PICT_OP_DISJOINT_SRC,
    XCB_RENDER_PICT_OP_DISJOINT_DST,
    XCB_RENDER_PICT_OP_DISJOINT_OVER,
    XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE,
    XCB_RENDER_PICT_OP_DISJOINT_IN,
    XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE,
    XCB_RENDER_PICT_OP_DISJOINT_OUT,
    XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE,
    XCB_RENDER_PICT_OP_DISJOINT_ATOP,
    XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE,
    XCB_RENDER_PICT_OP_DISJOINT_XOR,
d64 11
a74 11
    XCB_RENDER_PICT_OP_CONJOINT_SRC,
    XCB_RENDER_PICT_OP_CONJOINT_DST,
    XCB_RENDER_PICT_OP_CONJOINT_OVER,
    XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE,
    XCB_RENDER_PICT_OP_CONJOINT_IN,
    XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE,
    XCB_RENDER_PICT_OP_CONJOINT_OUT,
    XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE,
    XCB_RENDER_PICT_OP_CONJOINT_ATOP,
    XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE,
    XCB_RENDER_PICT_OP_CONJOINT_XOR,
d76 14
a89 14
    XCB_RENDER_PICT_OP_SCREEN,
    XCB_RENDER_PICT_OP_OVERLAY,
    XCB_RENDER_PICT_OP_DARKEN,
    XCB_RENDER_PICT_OP_LIGHTEN,
    XCB_RENDER_PICT_OP_COLOR_DODGE,
    XCB_RENDER_PICT_OP_COLOR_BURN,
    XCB_RENDER_PICT_OP_HARD_LIGHT,
    XCB_RENDER_PICT_OP_SOFT_LIGHT,
    XCB_RENDER_PICT_OP_DIFFERENCE,
    XCB_RENDER_PICT_OP_EXCLUSION,
    XCB_RENDER_PICT_OP_HSL_HUE,
    XCB_RENDER_PICT_OP_HSL_SATURATION,
    XCB_RENDER_PICT_OP_HSL_COLOR,
    XCB_RENDER_PICT_OP_HSL_LUMINOSITY
d93 2
a94 2
    XCB_RENDER_POLY_EDGE_SHARP,
    XCB_RENDER_POLY_EDGE_SMOOTH
d98 2
a99 2
    XCB_RENDER_POLY_MODE_PRECISE,
    XCB_RENDER_POLY_MODE_IMPRECISE
d119 6
a124 6
    XCB_RENDER_SUB_PIXEL_UNKNOWN,
    XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB,
    XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR,
    XCB_RENDER_SUB_PIXEL_VERTICAL_RGB,
    XCB_RENDER_SUB_PIXEL_VERTICAL_BGR,
    XCB_RENDER_SUB_PIXEL_NONE
d128 4
a131 4
    XCB_RENDER_REPEAT_NONE,
    XCB_RENDER_REPEAT_NORMAL,
    XCB_RENDER_REPEAT_PAD,
    XCB_RENDER_REPEAT_REFLECT
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d1471 3
d1556 3
d1930 1
a1930 1
 * Delivers a request to the X server
d1955 1
a1955 1
 * Delivers a request to the X server
d2013 3
d2017 1
a2017 1
 * Delivers a request to the X server
d2038 1
a2038 1
 * Delivers a request to the X server
d2196 3
d2200 1
a2200 1
 * Delivers a request to the X server
d2223 1
a2223 1
 * Delivers a request to the X server
d2318 3
d2322 1
a2322 1
 * Delivers a request to the X server
d2356 1
a2356 1
 * Delivers a request to the X server
d2386 3
d2390 1
a2390 1
 * Delivers a request to the X server
d2420 1
a2420 1
 * Delivers a request to the X server
d2446 4
d2451 1
a2451 1
 * Delivers a request to the X server
d2485 1
a2485 1
 * Delivers a request to the X server
d2516 1
a2516 1
 * Delivers a request to the X server
d2542 1
a2542 1
 * Delivers a request to the X server
d2565 1
a2565 1
 * Delivers a request to the X server
d2613 1
a2613 1
 * Delivers a request to the X server
d2657 4
d2662 1
a2662 1
 * Delivers a request to the X server
d2702 1
a2702 1
 * Delivers a request to the X server
d2738 4
d2743 1
a2743 1
 * Delivers a request to the X server
d2783 1
a2783 1
 * Delivers a request to the X server
d2819 4
d2824 1
a2824 1
 * Delivers a request to the X server
d2864 1
a2864 1
 * Delivers a request to the X server
d2900 4
d2905 1
a2905 1
 * Delivers a request to the X server
d2945 1
a2945 1
 * Delivers a request to the X server
d2982 1
a2982 1
 * Delivers a request to the X server
d3010 1
a3010 1
 * Delivers a request to the X server
d3035 1
a3035 1
 * Delivers a request to the X server
d3063 1
a3063 1
 * Delivers a request to the X server
d3088 1
a3088 1
 * Delivers a request to the X server
d3114 1
a3114 1
 * Delivers a request to the X server
d3136 4
d3141 1
a3141 1
 * Delivers a request to the X server
d3177 1
a3177 1
 * Delivers a request to the X server
d3209 4
d3214 1
a3214 1
 * Delivers a request to the X server
d3244 1
a3244 1
 * Delivers a request to the X server
d3270 4
d3275 1
a3275 1
 * Delivers a request to the X server
d3317 1
a3317 1
 * Delivers a request to the X server
d3355 4
d3360 1
a3360 1
 * Delivers a request to the X server
d3402 1
a3402 1
 * Delivers a request to the X server
d3440 4
d3445 1
a3445 1
 * Delivers a request to the X server
d3487 1
a3487 1
 * Delivers a request to the X server
d3525 4
d3530 1
a3530 1
 * Delivers a request to the X server
d3564 1
a3564 1
 * Delivers a request to the X server
d3595 1
a3595 1
 * Delivers a request to the X server
d3627 1
a3627 1
 * Delivers a request to the X server
d3699 1
a3699 1
 * Delivers a request to the X server
d3727 1
a3727 1
 * Delivers a request to the X server
d3751 3
d3755 1
a3755 1
 * Delivers a request to the X server
d3778 1
a3778 1
 * Delivers a request to the X server
d3899 4
d3904 1
a3904 1
 * Delivers a request to the X server
d3938 1
a3938 1
 * Delivers a request to the X server
d4011 4
d4016 1
a4016 1
 * Delivers a request to the X server
d4046 1
a4046 1
 * Delivers a request to the X server
d4158 4
d4163 1
a4163 1
 * Delivers a request to the X server
d4197 1
a4197 1
 * Delivers a request to the X server
d4228 1
a4228 1
 * Delivers a request to the X server
d4256 1
a4256 1
 * Delivers a request to the X server
d4280 3
d4284 1
a4284 1
 * Delivers a request to the X server
d4320 1
a4320 1
 * Delivers a request to the X server
d4352 3
d4356 1
a4356 1
 * Delivers a request to the X server
d4396 1
a4396 1
 * Delivers a request to the X server
d4432 3
d4436 1
a4436 1
 * Delivers a request to the X server
d4472 1
a4472 1
 * Delivers a request to the X server
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d23 1
a23 1
#define XCB_RENDER_MINOR_VERSION 10
d74 16
a89 1
    XCB_RENDER_PICT_OP_CONJOINT_XOR
@


1.1
log
@Initial revision
@
text
@d32 4
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
